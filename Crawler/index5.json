[{"method_name": "getEnvironment", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Environment", "snippet": "\tprivate Environment getEnvironment() {\t\tif (this.context != null) {\t\t\treturn this.context.getEnvironment();\t\t}\t\tthrow new IllegalStateException(\"Could not obtain Environment\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "storeAndClearHeadlessProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid storeAndClearHeadlessProperty() {\t\tthis.headlessProperty = System.getProperty(\"java.awt.headless\");\t\tSystem.clearProperty(\"java.awt.headless\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "reinstateHeadlessProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid reinstateHeadlessProperty() {\t\tif (this.headlessProperty == null) {\t\t\tSystem.clearProperty(\"java.awt.headless\");\t\t}\t\telse {\t\t\tSystem.setProperty(\"java.awt.headless\", this.headlessProperty);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "cleanUp", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid cleanUp() {\t\tif (this.context != null) {\t\t\tthis.context.close();\t\t}\t\tSystem.clearProperty(\"spring.main.banner-mode\");\t\tSystem.clearProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "sourcesMustNotBeNull", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid sourcesMustNotBeNull() {\t\tassertThatIllegalArgumentException().isThrownBy(() -> new SpringApplication((Class<?>[]) null).run())\t\t\t\t.withMessageContaining(\"PrimarySources must not be null\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "sourcesMustNotBeEmpty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid sourcesMustNotBeEmpty() {\t\tassertThatIllegalArgumentException().isThrownBy(() -> new SpringApplication().run())\t\t\t\t.withMessageContaining(\"Sources must not be empty\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "sourcesMustBeAccessible", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid sourcesMustBeAccessible() {\t\tassertThatIllegalArgumentException()\t\t\t\t.isThrownBy(() -> new SpringApplication(InaccessibleConfiguration.class).run())\t\t\t\t.withMessageContaining(\"No visible constructors\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customBanner", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid customBanner(CapturedOutput output) {\t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--spring.banner.location=classpath:test-banner.txt\");\t\tassertThat(output).startsWith(\"Running a Test!\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customBannerWithProperties", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid customBannerWithProperties(CapturedOutput output) {\t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--spring.banner.location=classpath:test-banner-with-placeholder.txt\",\t\t\t\t\"--test.property=123456\");\t\tassertThat(output).containsPattern(\"Running a Test!\\\\s+123456\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "imageBannerAndTextBanner", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid imageBannerAndTextBanner(CapturedOutput output) {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tMockResourceLoader resourceLoader = new MockResourceLoader();\t\tresourceLoader.addResource(\"banner.gif\", \"black-and-white.gif\");\t\tresourceLoader.addResource(\"banner.txt\", \"foobar.txt\");\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.setResourceLoader(resourceLoader);\t\tapplication.run();\t\tassertThat(output).contains(\"@@@@\").contains(\"Foo Bar\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "imageBannerLoads", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid imageBannerLoads(CapturedOutput output) {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tMockResourceLoader resourceLoader = new MockResourceLoader();\t\tresourceLoader.addResource(\"banner.gif\", \"black-and-white.gif\");\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.setResourceLoader(resourceLoader);\t\tapplication.run();\t\tassertThat(output).contains(\"@@@@@@\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "logsNoActiveProfiles", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid logsNoActiveProfiles(CapturedOutput output) {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tassertThat(output).contains(\"No active profile set, falling back to default profiles: default\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "logsActiveProfiles", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid logsActiveProfiles(CapturedOutput output) {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--spring.profiles.active=myprofiles\");\t\tassertThat(output).contains(\"The following profiles are active: myprofile\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "enableBannerInLogViaProperty", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid enableBannerInLogViaProperty(CapturedOutput output) {\t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--spring.main.banner-mode=log\");\t\tverify(application, atLeastOnce()).setBannerMode(Banner.Mode.LOG);\t\tassertThat(output).contains(\"o.s.b.SpringApplication\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setIgnoreBeanInfoPropertyByDefault", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid setIgnoreBeanInfoPropertyByDefault(CapturedOutput output) {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tString property = System.getProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME);\t\tassertThat(property).isEqualTo(\"true\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "disableIgnoreBeanInfoProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid disableIgnoreBeanInfoProperty() {\t\tSystem.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME, \"false\");\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tString property = System.getProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME);\t\tassertThat(property).isEqualTo(\"false\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "triggersConfigFileApplicationListenerBeforeBinding", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid triggersConfigFileApplicationListenerBeforeBinding() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--spring.config.name=bindtoapplication\");\t\tassertThat(application).hasFieldOrPropertyWithValue(\"bannerMode\", Banner.Mode.OFF);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "bindsSystemPropertyToSpringApplication", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid bindsSystemPropertyToSpringApplication() {\t\tSystem.setProperty(\"spring.main.banner-mode\", \"off\");\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tassertThat(application).hasFieldOrPropertyWithValue(\"bannerMode\", Banner.Mode.OFF);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "bindsYamlStyleBannerModeToSpringApplication", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid bindsYamlStyleBannerModeToSpringApplication() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setDefaultProperties(Collections.singletonMap(\"spring.main.banner-mode\", false));\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tassertThat(application).hasFieldOrPropertyWithValue(\"bannerMode\", Banner.Mode.OFF);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "bindsBooleanAsStringBannerModeToSpringApplication", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid bindsBooleanAsStringBannerModeToSpringApplication() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--spring.main.banner-mode=false\");\t\tassertThat(application).hasFieldOrPropertyWithValue(\"bannerMode\", Banner.Mode.OFF);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customId", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid customId() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--spring.application.name=foo\");\t\tassertThat(this.context.getId()).startsWith(\"foo\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specificApplicationContextClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid specificApplicationContextClass() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setApplicationContextClass(StaticApplicationContext.class);\t\tthis.context = application.run();\t\tassertThat(this.context).isInstanceOf(StaticApplicationContext.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specificWebApplicationContextClassDetectWebApplicationType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid specificWebApplicationContextClassDetectWebApplicationType() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setApplicationContextClass(AnnotationConfigServletWebApplicationContext.class);\t\tassertThat(application.getWebApplicationType()).isEqualTo(WebApplicationType.SERVLET);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specificReactiveApplicationContextClassDetectReactiveApplicationType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid specificReactiveApplicationContextClassDetectReactiveApplicationType() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setApplicationContextClass(AnnotationConfigReactiveWebApplicationContext.class);\t\tassertThat(application.getWebApplicationType()).isEqualTo(WebApplicationType.REACTIVE);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "nonWebNorReactiveApplicationContextClassDetectNoneApplicationType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid nonWebNorReactiveApplicationContextClassDetectNoneApplicationType() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setApplicationContextClass(StaticApplicationContext.class);\t\tassertThat(application.getWebApplicationType()).isEqualTo(WebApplicationType.NONE);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specificApplicationContextInitializer", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid specificApplicationContextInitializer() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tfinal AtomicReference<ApplicationContext> reference = new AtomicReference<>();\t\tapplication.setInitializers(Collections\t\t\t\t.singletonList((ApplicationContextInitializer<ConfigurableApplicationContext>) reference::set));\t\tthis.context = application.run(\"--foo=bar\");\t\tassertThat(this.context).isSameAs(reference.get());\t\t// Custom initializers do not switch off the defaults\t\tassertThat(getEnvironment().getProperty(\"foo\")).isEqualTo(\"bar\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applicationRunningEventListener", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid applicationRunningEventListener() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tfinal AtomicReference<SpringApplication> reference = new AtomicReference<>();\t\tclass ApplicationReadyEventListener implements ApplicationListener<ApplicationReadyEvent> {\t\t\t@Override\t\t\tpublic void onApplicationEvent(ApplicationReadyEvent event) {\t\t\t\treference.set(event.getSpringApplication());\t\t\t}\t\t}\t\tapplication.addListeners(new ApplicationReadyEventListener());\t\tthis.context = application.run(\"--foo=bar\");\t\tassertThat(application).isSameAs(reference.get());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "contextRefreshedEventListener", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextRefreshedEventListener() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tfinal AtomicReference<ApplicationContext> reference = new AtomicReference<>();\t\tclass InitializerListener implements ApplicationListener<ContextRefreshedEvent> {\t\t\t@Override\t\t\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\t\t\t\treference.set(event.getApplicationContext());\t\t\t}\t\t}\t\tapplication.setListeners(Collections.singletonList(new InitializerListener()));\t\tthis.context = application.run(\"--foo=bar\");\t\tassertThat(this.context).isSameAs(reference.get());\t\t// Custom initializers do not switch off the defaults\t\tassertThat(getEnvironment().getProperty(\"foo\")).isEqualTo(\"bar\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "eventsArePublishedInExpectedOrder", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid eventsArePublishedInExpectedOrder() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\t\tapplication.addListeners(listener);\t\tthis.context = application.run();\t\tInOrder inOrder = Mockito.inOrder(listener);\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationStartingEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationEnvironmentPreparedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationContextInitializedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationPreparedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ContextRefreshedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(argThat(isAvailabilityChangeEventWithState(LivenessState.CORRECT)));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\t\tinOrder.verify(listener)\t\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(ReadinessState.ACCEPTING_TRAFFIC)));\t\tinOrder.verifyNoMoreInteractions();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "defaultApplicationContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid defaultApplicationContext() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tassertThat(this.context).isInstanceOf(AnnotationConfigApplicationContext.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "defaultApplicationContextForWeb", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid defaultApplicationContextForWeb() {\t\tSpringApplication application = new SpringApplication(ExampleWebConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.SERVLET);\t\tthis.context = application.run();\t\tassertThat(this.context).isInstanceOf(AnnotationConfigServletWebServerApplicationContext.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "defaultApplicationContextForReactiveWeb", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid defaultApplicationContextForReactiveWeb() {\t\tSpringApplication application = new SpringApplication(ExampleReactiveWebConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.REACTIVE);\t\tthis.context = application.run();\t\tassertThat(this.context).isInstanceOf(AnnotationConfigReactiveWebServerApplicationContext.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "environmentForWeb", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid environmentForWeb() {\t\tSpringApplication application = new SpringApplication(ExampleWebConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.SERVLET);\t\tthis.context = application.run();\t\tassertThat(this.context.getEnvironment()).isInstanceOf(StandardServletEnvironment.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "environmentForReactiveWeb", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid environmentForReactiveWeb() {\t\tSpringApplication application = new SpringApplication(ExampleReactiveWebConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.REACTIVE);\t\tthis.context = application.run();\t\tassertThat(this.context.getEnvironment()).isInstanceOf(StandardReactiveWebEnvironment.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customEnvironment", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid customEnvironment() {\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tConfigurableEnvironment environment = new StandardEnvironment();\t\tapplication.setEnvironment(environment);\t\tthis.context = application.run();\t\tverify(application.getLoader()).setEnvironment(environment);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customResourceLoader", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid customResourceLoader() {\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tResourceLoader resourceLoader = new DefaultResourceLoader();\t\tapplication.setResourceLoader(resourceLoader);\t\tthis.context = application.run();\t\tverify(application.getLoader()).setResourceLoader(resourceLoader);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customResourceLoaderFromConstructor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid customResourceLoaderFromConstructor() {\t\tResourceLoader resourceLoader = new DefaultResourceLoader();\t\tTestSpringApplication application = new TestSpringApplication(resourceLoader, ExampleWebConfig.class);\t\tthis.context = application.run();\t\tverify(application.getLoader()).setResourceLoader(resourceLoader);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customBeanNameGenerator", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid customBeanNameGenerator() {\t\tTestSpringApplication application = new TestSpringApplication(ExampleWebConfig.class);\t\tBeanNameGenerator beanNameGenerator = new DefaultBeanNameGenerator();\t\tapplication.setBeanNameGenerator(beanNameGenerator);\t\tthis.context = application.run();\t\tverify(application.getLoader()).setBeanNameGenerator(beanNameGenerator);\t\tObject actualGenerator = this.context.getBean(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);\t\tassertThat(actualGenerator).isSameAs(beanNameGenerator);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customBeanNameGeneratorWithNonWebApplication", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid customBeanNameGeneratorWithNonWebApplication() {\t\tTestSpringApplication application = new TestSpringApplication(ExampleWebConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tBeanNameGenerator beanNameGenerator = new DefaultBeanNameGenerator();\t\tapplication.setBeanNameGenerator(beanNameGenerator);\t\tthis.context = application.run();\t\tverify(application.getLoader()).setBeanNameGenerator(beanNameGenerator);\t\tObject actualGenerator = this.context.getBean(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);\t\tassertThat(actualGenerator).isSameAs(beanNameGenerator);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "commandLinePropertySource", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid commandLinePropertySource() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tConfigurableEnvironment environment = new StandardEnvironment();\t\tapplication.setEnvironment(environment);\t\tthis.context = application.run(\"--foo=bar\");\t\tassertThat(environment).has(matchingPropertySource(CommandLinePropertySource.class, \"commandLineArgs\"));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "commandLinePropertySourceEnhancesEnvironment", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid commandLinePropertySourceEnhancesEnvironment() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tConfigurableEnvironment environment = new StandardEnvironment();\t\tenvironment.getPropertySources()\t\t\t\t.addFirst(new MapPropertySource(\"commandLineArgs\", Collections.singletonMap(\"foo\", \"original\")));\t\tapplication.setEnvironment(environment);\t\tthis.context = application.run(\"--foo=bar\", \"--bar=foo\");\t\tassertThat(environment).has(matchingPropertySource(CompositePropertySource.class, \"commandLineArgs\"));\t\tassertThat(environment.getProperty(\"bar\")).isEqualTo(\"foo\");\t\t// New command line properties take precedence\t\tassertThat(environment.getProperty(\"foo\")).isEqualTo(\"bar\");\t\tCompositePropertySource composite = (CompositePropertySource) environment.getPropertySources()\t\t\t\t.get(\"commandLineArgs\");\t\tassertThat(composite.getPropertySources()).hasSize(2);\t\tassertThat(composite.getPropertySources()).first().matches(\t\t\t\t(source) -> source.getName().equals(\"springApplicationCommandLineArgs\"),\t\t\t\t\"is named springApplicationCommandLineArgs\");\t\tassertThat(composite.getPropertySources()).element(1)\t\t\t\t.matches((source) -> source.getName().equals(\"commandLineArgs\"), \"is named commandLineArgs\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "propertiesFileEnhancesEnvironment", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid propertiesFileEnhancesEnvironment() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tConfigurableEnvironment environment = new StandardEnvironment();\t\tapplication.setEnvironment(environment);\t\tthis.context = application.run();\t\tassertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addProfiles", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addProfiles() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.setAdditionalProfiles(\"foo\");\t\tConfigurableEnvironment environment = new StandardEnvironment();\t\tapplication.setEnvironment(environment);\t\tthis.context = application.run();\t\tassertThat(environment.acceptsProfiles(Profiles.of(\"foo\"))).isTrue();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addProfilesOrder", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addProfilesOrder() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.setAdditionalProfiles(\"foo\");\t\tConfigurableEnvironment environment = new StandardEnvironment();\t\tapplication.setEnvironment(environment);\t\tthis.context = application.run(\"--spring.profiles.active=bar,spam\");\t\t// Command line should always come last\t\tassertThat(environment.getActiveProfiles()).containsExactly(\"foo\", \"bar\", \"spam\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addProfilesOrderWithProperties", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addProfilesOrderWithProperties() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.setAdditionalProfiles(\"other\");\t\tConfigurableEnvironment environment = new StandardEnvironment();\t\tapplication.setEnvironment(environment);\t\tthis.context = application.run();\t\t// Active profile should win over default\t\tassertThat(environment.getProperty(\"my.property\")).isEqualTo(\"fromotherpropertiesfile\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "emptyCommandLinePropertySourceNotAdded", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid emptyCommandLinePropertySourceNotAdded() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tConfigurableEnvironment environment = new StandardEnvironment();\t\tapplication.setEnvironment(environment);\t\tthis.context = application.run();\t\tassertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "disableCommandLinePropertySource", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid disableCommandLinePropertySource() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.setAddCommandLineProperties(false);\t\tConfigurableEnvironment environment = new StandardEnvironment();\t\tapplication.setEnvironment(environment);\t\tthis.context = application.run(\"--foo=bar\");\t\tassertThat(environment).doesNotHave(matchingPropertySource(PropertySource.class, \"commandLineArgs\"));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "contextUsesApplicationConversionService", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextUsesApplicationConversionService() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tassertThat(this.context.getBeanFactory().getConversionService())\t\t\t\t.isInstanceOf(ApplicationConversionService.class);\t\tassertThat(this.context.getEnvironment().getConversionService())\t\t\t\t.isInstanceOf(ApplicationConversionService.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "contextWhenHasAddConversionServiceFalseUsesRegularConversionService", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextWhenHasAddConversionServiceFalseUsesRegularConversionService() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.setAddConversionService(false);\t\tthis.context = application.run();\t\tassertThat(this.context.getBeanFactory().getConversionService()).isNull();\t\tassertThat(this.context.getEnvironment().getConversionService())\t\t\t\t.isNotInstanceOf(ApplicationConversionService.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "runCommandLineRunnersAndApplicationRunners", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid runCommandLineRunnersAndApplicationRunners() {\t\tSpringApplication application = new SpringApplication(CommandLineRunConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"arg\");\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerA\"));\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerB\"));\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerC\"));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished(CapturedOutput output)\t\t\tthrows Exception {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tApplicationRunner applicationRunner = mock(ApplicationRunner.class);\t\tCommandLineRunner commandLineRunner = mock(CommandLineRunner.class);\t\tapplication.addInitializers((context) -> {\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\t\t\tbeanFactory.registerSingleton(\"commandLineRunner\", (CommandLineRunner) (args) -> {\t\t\t\tassertThat(output).contains(\"Started\");\t\t\t\tcommandLineRunner.run(args);\t\t\t});\t\t\tbeanFactory.registerSingleton(\"applicationRunner\", (ApplicationRunner) (args) -> {\t\t\t\tassertThat(output).contains(\"Started\");\t\t\t\tapplicationRunner.run(args);\t\t\t});\t\t});\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tApplicationListener<ApplicationReadyEvent> eventListener = mock(ApplicationListener.class);\t\tapplication.addListeners(eventListener);\t\tthis.context = application.run();\t\tInOrder applicationRunnerOrder = Mockito.inOrder(eventListener, applicationRunner);\t\tapplicationRunnerOrder.verify(applicationRunner).run(ArgumentMatchers.any(ApplicationArguments.class));\t\tapplicationRunnerOrder.verify(eventListener)\t\t\t\t.onApplicationEvent(ArgumentMatchers.any(ApplicationReadyEvent.class));\t\tInOrder commandLineRunnerOrder = Mockito.inOrder(eventListener, commandLineRunner);\t\tcommandLineRunnerOrder.verify(commandLineRunner).run();\t\tcommandLineRunnerOrder.verify(eventListener)\t\t\t\t.onApplicationEvent(ArgumentMatchers.any(ApplicationReadyEvent.class));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applicationRunnerFailureCausesApplicationFailedEventToBePublished", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid applicationRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\t@SuppressWarnings(\"unchecked\")\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\t\tapplication.addListeners(listener);\t\tApplicationRunner runner = mock(ApplicationRunner.class);\t\tException failure = new Exception();\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "commandLineRunnerFailureCausesApplicationFailedEventToBePublished", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid commandLineRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\t@SuppressWarnings(\"unchecked\")\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\t\tapplication.addListeners(listener);\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\t\tException failure = new Exception();\t\twillThrow(failure).given(runner).run();\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\t@SuppressWarnings(\"unchecked\")\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\t\tapplication.addListeners(listener);\t\tRuntimeException failure = new RuntimeException();\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run).isEqualTo(failure);\t\tverify(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "failureInReadyEventListenerCloseApplicationContext", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid failureInReadyEventListenerCloseApplicationContext(CapturedOutput output) {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tExitCodeListener exitCodeListener = new ExitCodeListener();\t\tapplication.addListeners(exitCodeListener);\t\t@SuppressWarnings(\"unchecked\")\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\t\tapplication.addListeners(listener);\t\tExitStatusException failure = new ExitStatusException();\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\t\tverify(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\t\tassertThat(exitCodeListener.getExitCode()).isEqualTo(11);\t\tassertThat(output).contains(\"Application run failed\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "loadSources", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid loadSources() {\t\tClass<?>[] sources = { ExampleConfig.class, TestCommandLineRunner.class };\t\tTestSpringApplication application = new TestSpringApplication(sources);\t\tapplication.getSources().add(\"a\");\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.setUseMockLoader(true);\t\tthis.context = application.run();\t\tSet<Object> allSources = application.getAllSources();\t\tassertThat(allSources).contains(ExampleConfig.class, TestCommandLineRunner.class, \"a\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "wildcardSources", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid wildcardSources() {\t\tTestSpringApplication application = new TestSpringApplication();\t\tapplication.getSources().add(\"classpath*:org/springframework/boot/sample-${sample.app.test.prop}.xml\");\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "run", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid run() {\t\tthis.context = SpringApplication.run(ExampleWebConfig.class);\t\tassertThat(this.context).isNotNull();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "runComponents", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid runComponents() {\t\tthis.context = SpringApplication.run(new Class<?>[] { ExampleWebConfig.class, Object.class }, new String[0]);\t\tassertThat(this.context).isNotNull();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "exit", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid exit() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tassertThat(this.context).isNotNull();\t\tassertThat(SpringApplication.exit(this.context)).isEqualTo(0);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "exitWithExplicitCode", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid exitWithExplicitCode() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tExitCodeListener listener = new ExitCodeListener();\t\tapplication.addListeners(listener);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tassertThat(this.context).isNotNull();\t\tassertThat(SpringApplication.exit(this.context, (ExitCodeGenerator) () -> 2)).isEqualTo(2);\t\tassertThat(listener.getExitCode()).isEqualTo(2);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "exitWithExplicitCodeFromException", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid exitWithExplicitCodeFromException() {\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\t\tSpringApplication application = new SpringApplication(ExitCodeCommandLineRunConfig.class) {\t\t\t@Override\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\t\t\t\treturn handler;\t\t\t}\t\t};\t\tExitCodeListener listener = new ExitCodeListener();\t\tapplication.addListeners(listener);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tassertThatIllegalStateException().isThrownBy(application::run);\t\tverify(handler).registerExitCode(11);\t\tassertThat(listener.getExitCode()).isEqualTo(11);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "exitWithExplicitCodeFromMappedException", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid exitWithExplicitCodeFromMappedException() {\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\t\tSpringApplication application = new SpringApplication(MappedExitCodeCommandLineRunConfig.class) {\t\t\t@Override\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\t\t\t\treturn handler;\t\t\t}\t\t};\t\tExitCodeListener listener = new ExitCodeListener();\t\tapplication.addListeners(listener);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tassertThatIllegalStateException().isThrownBy(application::run);\t\tverify(handler).registerExitCode(11);\t\tassertThat(listener.getExitCode()).isEqualTo(11);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "exceptionFromRefreshIsHandledGracefully", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid exceptionFromRefreshIsHandledGracefully(CapturedOutput output) {\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\t\tSpringApplication application = new SpringApplication(RefreshFailureConfig.class) {\t\t\t@Override\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\t\t\t\treturn handler;\t\t\t}\t\t};\t\tExitCodeListener listener = new ExitCodeListener();\t\tapplication.addListeners(listener);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\t\tArgumentCaptor<RuntimeException> exceptionCaptor = ArgumentCaptor.forClass(RuntimeException.class);\t\tverify(handler).registerLoggedException(exceptionCaptor.capture());\t\tassertThat(exceptionCaptor.getValue()).hasCauseInstanceOf(RefreshFailureException.class);\t\tassertThat(output).doesNotContain(\"NullPointerException\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "defaultCommandLineArgs", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid defaultCommandLineArgs() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setDefaultProperties(\t\t\t\tStringUtils.splitArrayElementsIntoProperties(new String[] { \"baz=\", \"bar=spam\" }, \"=\"));\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--bar=foo\", \"bucket\", \"crap\");\t\tassertThat(this.context).isInstanceOf(AnnotationConfigApplicationContext.class);\t\tassertThat(getEnvironment().getProperty(\"bar\")).isEqualTo(\"foo\");\t\tassertThat(getEnvironment().getProperty(\"baz\")).isEqualTo(\"\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "commandLineArgsApplyToSpringApplication", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid commandLineArgsApplyToSpringApplication() {\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--spring.main.banner-mode=OFF\");\t\tassertThat(application.getBannerMode()).isEqualTo(Banner.Mode.OFF);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "registerShutdownHook", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid registerShutdownHook() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setApplicationContextClass(SpyApplicationContext.class);\t\tthis.context = application.run();\t\tSpyApplicationContext applicationContext = (SpyApplicationContext) this.context;\t\tverify(applicationContext.getApplicationContext()).registerShutdownHook();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "registerListener", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid registerListener() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class, ListenerConfig.class);\t\tapplication.setApplicationContextClass(SpyApplicationContext.class);\t\tSet<ApplicationEvent> events = new LinkedHashSet<>();\t\tapplication.addListeners((ApplicationListener<ApplicationEvent>) events::add);\t\tthis.context = application.run();\t\tassertThat(events).hasAtLeastOneElementOfType(ApplicationPreparedEvent.class);\t\tassertThat(events).hasAtLeastOneElementOfType(ContextRefreshedEvent.class);\t\tverifyRegisteredListenerSuccessEvents();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "registerListenerWithCustomMulticaster", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid registerListenerWithCustomMulticaster() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class, ListenerConfig.class,\t\t\t\tMulticaster.class);\t\tapplication.setApplicationContextClass(SpyApplicationContext.class);\t\tSet<ApplicationEvent> events = new LinkedHashSet<>();\t\tapplication.addListeners((ApplicationListener<ApplicationEvent>) events::add);\t\tthis.context = application.run();\t\tassertThat(events).hasAtLeastOneElementOfType(ApplicationPreparedEvent.class);\t\tassertThat(events).hasAtLeastOneElementOfType(ContextRefreshedEvent.class);\t\tverifyRegisteredListenerSuccessEvents();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "verifyRegisteredListenerSuccessEvents", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void verifyRegisteredListenerSuccessEvents() {\t\tApplicationListener<ApplicationEvent> listener = this.context.getBean(\"testApplicationListener\",\t\t\t\tApplicationListener.class);\t\tInOrder inOrder = Mockito.inOrder(listener);\t\tinOrder.verify(listener).onApplicationEvent(isA(ContextRefreshedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(argThat(isAvailabilityChangeEventWithState(LivenessState.CORRECT)));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\t\tinOrder.verify(listener)\t\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(ReadinessState.ACCEPTING_TRAFFIC)));\t\tinOrder.verifyNoMoreInteractions();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration() {\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.addListeners(listener);\t\tassertThatExceptionOfType(ApplicationContextException.class).isThrownBy(application::run);\t\tverifyRegisteredListenerFailedFromApplicationEvents(listener);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration() {\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.addListeners(listener);\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\t\tverifyRegisteredListenerFailedFromApplicationEvents(listener);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "verifyRegisteredListenerFailedFromApplicationEvents", "params": ["ApplicationListener<ApplicationEvent>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void verifyRegisteredListenerFailedFromApplicationEvents(ApplicationListener<ApplicationEvent> listener) {\t\tInOrder inOrder = Mockito.inOrder(listener);\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationStartingEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationEnvironmentPreparedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationContextInitializedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationPreparedEvent.class));\t\tinOrder.verify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\t\tinOrder.verifyNoMoreInteractions();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration() {\t\tfinal ApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.addInitializers((applicationContext) -> applicationContext.addApplicationListener(listener));\t\tassertThatExceptionOfType(ApplicationContextException.class).isThrownBy(application::run);\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\t\tverifyNoMoreInteractions(listener);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration() {\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.addInitializers((applicationContext) -> applicationContext.addApplicationListener(listener));\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\t\tverifyNoMoreInteractions(listener);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "registerShutdownHookOff", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid registerShutdownHookOff() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setApplicationContextClass(SpyApplicationContext.class);\t\tapplication.setRegisterShutdownHook(false);\t\tthis.context = application.run();\t\tSpyApplicationContext applicationContext = (SpyApplicationContext) this.context;\t\tverify(applicationContext.getApplicationContext(), never()).registerShutdownHook();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "headless", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid headless() {\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tassertThat(System.getProperty(\"java.awt.headless\")).isEqualTo(\"true\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "headlessFalse", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid headlessFalse() {\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tapplication.setHeadless(false);\t\tthis.context = application.run();\t\tassertThat(System.getProperty(\"java.awt.headless\")).isEqualTo(\"false\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "headlessSystemPropertyTakesPrecedence", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid headlessSystemPropertyTakesPrecedence() {\t\tSystem.setProperty(\"java.awt.headless\", \"false\");\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run();\t\tassertThat(System.getProperty(\"java.awt.headless\")).isEqualTo(\"false\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getApplicationArgumentsBean", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getApplicationArgumentsBean() {\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--debug\", \"spring\", \"boot\");\t\tApplicationArguments args = this.context.getBean(ApplicationArguments.class);\t\tassertThat(args.getNonOptionArgs()).containsExactly(\"spring\", \"boot\");\t\tassertThat(args.containsOption(\"debug\")).isTrue();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "webApplicationSwitchedOffInListener", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid webApplicationSwitchedOffInListener() {\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\t\tapplication.addListeners((ApplicationListener<ApplicationEnvironmentPreparedEvent>) (event) -> {\t\t\tassertThat(event.getEnvironment()).isInstanceOf(StandardServletEnvironment.class);\t\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(event.getEnvironment(), \"foo=bar\");\t\t\tevent.getSpringApplication().setWebApplicationType(WebApplicationType.NONE);\t\t});\t\tthis.context = application.run();\t\tassertThat(this.context.getEnvironment()).isNotInstanceOf(StandardServletEnvironment.class);\t\tassertThat(this.context.getEnvironment().getProperty(\"foo\")).isEqualTo(\"bar\");\t\tIterator<PropertySource<?>> iterator = this.context.getEnvironment().getPropertySources().iterator();\t\tassertThat(iterator.next().getName()).isEqualTo(\"configurationProperties\");\t\tassertThat(iterator.next().getName())\t\t\t\t.isEqualTo(TestPropertySourceUtils.INLINED_PROPERTIES_PROPERTY_SOURCE_NAME);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment() {\t\tConfigurableApplicationContext context = new SpringApplication(ExampleConfig.class)\t\t\t\t.run(\"--spring.main.web-application-type=none\");\t\tassertThat(context).isNotInstanceOfAny(WebApplicationContext.class, ReactiveWebApplicationContext.class);\t\tassertThat(context.getEnvironment()).isNotInstanceOfAny(ConfigurableWebEnvironment.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "webApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid webApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment() {\t\tConfigurableApplicationContext context = new SpringApplication(ExampleWebConfig.class)\t\t\t\t.run(\"--spring.main.web-application-type=servlet\");\t\tassertThat(context).isInstanceOf(WebApplicationContext.class);\t\tassertThat(context.getEnvironment()).isInstanceOf(StandardServletEnvironment.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "reactiveApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid reactiveApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment() {\t\tConfigurableApplicationContext context = new SpringApplication(ExampleReactiveWebConfig.class)\t\t\t\t.run(\"--spring.main.web-application-type=reactive\");\t\tassertThat(context).isInstanceOf(ReactiveWebApplicationContext.class);\t\tassertThat(context.getEnvironment()).isInstanceOf(StandardReactiveWebEnvironment.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "environmentIsConvertedIfTypeDoesNotMatch", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid environmentIsConvertedIfTypeDoesNotMatch() {\t\tConfigurableApplicationContext context = new SpringApplication(ExampleReactiveWebConfig.class)\t\t\t\t.run(\"--spring.profiles.active=withwebapplicationtype\");\t\tassertThat(context).isInstanceOf(ReactiveWebApplicationContext.class);\t\tassertThat(context.getEnvironment()).isInstanceOf(StandardReactiveWebEnvironment.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "failureResultsInSingleStackTrace", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid failureResultsInSingleStackTrace(CapturedOutput output) throws Exception {\t\tThreadGroup group = new ThreadGroup(\"main\");\t\tThread thread = new Thread(group, \"main\") {\t\t\t@Override\t\t\tpublic void run() {\t\t\t\tSpringApplication application = new SpringApplication(FailingConfig.class);\t\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\t\t\tapplication.run();\t\t\t}\t\t};\t\tthread.start();\t\tthread.join(6000);\t\tassertThat(output).containsOnlyOnce(\"Caused by: java.lang.RuntimeException: ExpectedError\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "beanDefinitionOverridingIsDisabledByDefault", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid beanDefinitionOverridingIsDisabledByDefault() {\t\tassertThatExceptionOfType(BeanDefinitionOverrideException.class)\t\t\t\t.isThrownBy(() -> new SpringApplication(ExampleConfig.class, OverrideConfig.class).run());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "beanDefinitionOverridingCanBeEnabled", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid beanDefinitionOverridingCanBeEnabled() {\t\tassertThat(new SpringApplication(ExampleConfig.class, OverrideConfig.class)\t\t\t\t.run(\"--spring.main.allow-bean-definition-overriding=true\", \"--spring.main.web-application-type=none\")\t\t\t\t.getBean(\"someBean\")).isEqualTo(\"override\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "relaxedBindingShouldWorkBeforeEnvironmentIsPrepared", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid relaxedBindingShouldWorkBeforeEnvironmentIsPrepared() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\t\tthis.context = application.run(\"--spring.config.additionalLocation=classpath:custom-config/\");\t\tassertThat(this.context.getEnvironment().getProperty(\"hello\")).isEqualTo(\"world\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "lazyInitializationIsDisabledByDefault", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid lazyInitializationIsDisabledByDefault() {\t\tassertThat(new SpringApplication(LazyInitializationConfig.class).run(\"--spring.main.web-application-type=none\")\t\t\t\t.getBean(AtomicInteger.class)).hasValue(1);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "lazyInitializationCanBeEnabled", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid lazyInitializationCanBeEnabled() {\t\tassertThat(new SpringApplication(LazyInitializationConfig.class)\t\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.lazy-initialization=true\")\t\t\t\t.getBean(AtomicInteger.class)).hasValue(0);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy() {\t\tassertThat(new SpringApplication(NotLazyInitializationConfig.class)\t\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.lazy-initialization=true\")\t\t\t\t.getBean(AtomicInteger.class)).hasValue(1);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans() {\t\tassertThat(new SpringApplication(LazyInitializationExcludeFilterConfig.class)\t\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.lazy-initialization=true\")\t\t\t\t.getBean(AtomicInteger.class)).hasValue(1);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isAvailabilityChangeEventWithState", "params": ["S"], "throws": null, "modifiers": ["private"], "return_type": "ArgumentMatcher<ApplicationEvent>", "snippet": "\tprivate <S extends AvailabilityState> ArgumentMatcher<ApplicationEvent> isAvailabilityChangeEventWithState(\t\t\tS state) {\t\treturn (argument) -> (argument instanceof AvailabilityChangeEvent<?>)\t\t\t\t&& ((AvailabilityChangeEvent<?>) argument).getState().equals(state);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "matchingPropertySource", "params": ["Class<?>", "String"], "throws": null, "modifiers": ["private"], "return_type": "Condition<ConfigurableEnvironment>", "snippet": "\tprivate Condition<ConfigurableEnvironment> matchingPropertySource(final Class<?> propertySourceClass,\t\t\tfinal String name) {\t\treturn new Condition<ConfigurableEnvironment>(\"has property source\") {\t\t\t@Override\t\t\tpublic boolean matches(ConfigurableEnvironment value) {\t\t\t\tfor (PropertySource<?> source : value.getPropertySources()) {\t\t\t\t\tif (propertySourceClass.isInstance(source) && (name == null || name.equals(source.getName()))) {\t\t\t\t\t\treturn true;\t\t\t\t\t}\t\t\t\t}\t\t\t\treturn false;\t\t\t}\t\t};\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "runTestRunnerBean", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Condition<ConfigurableApplicationContext>", "snippet": "\tprivate Condition<ConfigurableApplicationContext> runTestRunnerBean(final String name) {\t\treturn new Condition<ConfigurableApplicationContext>(\"run testrunner bean\") {\t\t\t@Override\t\t\tpublic boolean matches(ConfigurableApplicationContext value) {\t\t\t\treturn value.getBean(name, AbstractTestRunner.class).hasRun();\t\t\t}\t\t};\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpringApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onApplicationEvent", "params": ["ApplicationReadyEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\tpublic void onApplicationEvent(ApplicationReadyEvent event) {\t\t\t\treference.set(event.getSpringApplication());\t\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ApplicationReadyEventListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": []}}, {"method_name": "onApplicationEvent", "params": ["ContextRefreshedEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\t\t\t\treference.set(event.getApplicationContext());\t\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "InitializerListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": []}}, {"method_name": "registerShutdownHook", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void registerShutdownHook() {\t\t\tthis.applicationContext.registerShutdownHook();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpyApplicationContext", "extends": "AnnotationConfigApplicationContext", "implements": null, "modifiers": ["static"]}}, {"method_name": "getApplicationContext", "params": [], "throws": null, "modifiers": [], "return_type": "ConfigurableApplicationContext", "snippet": "\t\tConfigurableApplicationContext getApplicationContext() {\t\t\treturn this.applicationContext;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpyApplicationContext", "extends": "AnnotationConfigApplicationContext", "implements": null, "modifiers": ["static"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void close() {\t\t\tthis.applicationContext.close();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "SpyApplicationContext", "extends": "AnnotationConfigApplicationContext", "implements": null, "modifiers": ["static"]}}, {"method_name": "setUseMockLoader", "params": ["boolean"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid setUseMockLoader(boolean useMockLoader) {\t\t\tthis.useMockLoader = useMockLoader;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "TestSpringApplication", "extends": "SpringApplication", "implements": null, "modifiers": ["static"]}}, {"method_name": "createBeanDefinitionLoader", "params": ["BeanDefinitionRegistry", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "BeanDefinitionLoader", "snippet": "\t\tprotected BeanDefinitionLoader createBeanDefinitionLoader(BeanDefinitionRegistry registry, Object[] sources) {\t\t\tif (this.useMockLoader) {\t\t\t\tthis.loader = mock(BeanDefinitionLoader.class);\t\t\t}\t\t\telse {\t\t\t\tthis.loader = spy(super.createBeanDefinitionLoader(registry, sources));\t\t\t}\t\t\treturn this.loader;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "TestSpringApplication", "extends": "SpringApplication", "implements": null, "modifiers": ["static"]}}, {"method_name": "getLoader", "params": [], "throws": null, "modifiers": [], "return_type": "BeanDefinitionLoader", "snippet": "\t\tBeanDefinitionLoader getLoader() {\t\t\treturn this.loader;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "TestSpringApplication", "extends": "SpringApplication", "implements": null, "modifiers": ["static"]}}, {"method_name": "setBannerMode", "params": ["Banner"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setBannerMode(Banner.Mode bannerMode) {\t\t\tsuper.setBannerMode(bannerMode);\t\t\tthis.bannerMode = bannerMode;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "TestSpringApplication", "extends": "SpringApplication", "implements": null, "modifiers": ["static"]}}, {"method_name": "getBannerMode", "params": [], "throws": null, "modifiers": [], "return_type": "Banner", "snippet": "\t\tBanner.Mode getBannerMode() {\t\t\treturn this.bannerMode;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "TestSpringApplication", "extends": "SpringApplication", "implements": null, "modifiers": ["static"]}}, {"method_name": "someBean", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "\t\tString someBean() {\t\t\treturn \"test\";\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ExampleConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "someBean", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "\t\tString someBean() {\t\t\treturn \"override\";\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "OverrideConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "thing", "params": [], "throws": null, "modifiers": [], "return_type": "Thing", "snippet": "\t\tThing thing() {\t\t\treturn new Thing();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "BrokenPostConstructConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "boom", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\t\tvoid boom() {\t\t\t\tthrow new IllegalStateException();\t\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "Thing", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "testApplicationListener", "params": [], "throws": null, "modifiers": [], "return_type": "ApplicationListener<?>", "snippet": "\t\tApplicationListener<?> testApplicationListener() {\t\t\treturn mock(ApplicationListener.class);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ListenerConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "applicationEventMulticaster", "params": [], "throws": null, "modifiers": [], "return_type": "ApplicationEventMulticaster", "snippet": "\t\tApplicationEventMulticaster applicationEventMulticaster() {\t\t\treturn spy(new SimpleApplicationEventMulticaster());\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "Multicaster", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "webServer", "params": [], "throws": null, "modifiers": [], "return_type": "TomcatServletWebServerFactory", "snippet": "\t\tTomcatServletWebServerFactory webServer() {\t\t\treturn new TomcatServletWebServerFactory(0);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ExampleWebConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "webServerFactory", "params": [], "throws": null, "modifiers": [], "return_type": "NettyReactiveWebServerFactory", "snippet": "\t\tNettyReactiveWebServerFactory webServerFactory() {\t\t\treturn new NettyReactiveWebServerFactory(0);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ExampleReactiveWebConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "httpHandler", "params": [], "throws": null, "modifiers": [], "return_type": "HttpHandler", "snippet": "\t\tHttpHandler httpHandler() {\t\t\treturn (serverHttpRequest, serverHttpResponse) -> Mono.empty();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ExampleReactiveWebConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "fail", "params": [], "throws": null, "modifiers": [], "return_type": "Object", "snippet": "\t\tObject fail() {\t\t\tthrow new RuntimeException(\"ExpectedError\");\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "FailingConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "runnerC", "params": [], "throws": null, "modifiers": [], "return_type": "TestCommandLineRunner", "snippet": "\t\tTestCommandLineRunner runnerC() {\t\t\treturn new TestCommandLineRunner(Ordered.LOWEST_PRECEDENCE, \"runnerB\", \"runnerA\");\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "CommandLineRunConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "runnerB", "params": [], "throws": null, "modifiers": [], "return_type": "TestApplicationRunner", "snippet": "\t\tTestApplicationRunner runnerB() {\t\t\treturn new TestApplicationRunner(Ordered.LOWEST_PRECEDENCE - 1, \"runnerA\");\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "CommandLineRunConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "runnerA", "params": [], "throws": null, "modifiers": [], "return_type": "TestCommandLineRunner", "snippet": "\t\tTestCommandLineRunner runnerA() {\t\t\treturn new TestCommandLineRunner(Ordered.HIGHEST_PRECEDENCE);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "CommandLineRunConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "runner", "params": [], "throws": null, "modifiers": [], "return_type": "CommandLineRunner", "snippet": "\t\tCommandLineRunner runner() {\t\t\treturn (args) -> {\t\t\t\tthrow new IllegalStateException(new ExitStatusException());\t\t\t};\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ExitCodeCommandLineRunConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "runner", "params": [], "throws": null, "modifiers": [], "return_type": "CommandLineRunner", "snippet": "\t\tCommandLineRunner runner() {\t\t\treturn (args) -> {\t\t\t\tthrow new IllegalStateException();\t\t\t};\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "MappedExitCodeCommandLineRunConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "exceptionMapper", "params": [], "throws": null, "modifiers": [], "return_type": "ExitCodeExceptionMapper", "snippet": "\t\tExitCodeExceptionMapper exceptionMapper() {\t\t\treturn (exception) -> {\t\t\t\tif (exception instanceof IllegalStateException) {\t\t\t\t\treturn 11;\t\t\t\t}\t\t\t\treturn 0;\t\t\t};\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "MappedExitCodeCommandLineRunConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "fail", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid fail() {\t\t\tthrow new RefreshFailureException();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "RefreshFailureConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "counter", "params": [], "throws": null, "modifiers": [], "return_type": "AtomicInteger", "snippet": "\t\tAtomicInteger counter() {\t\t\treturn new AtomicInteger(0);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "LazyInitializationConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "lazyBean", "params": ["AtomicInteger"], "throws": null, "modifiers": [], "return_type": "LazyBean", "snippet": "\t\tLazyBean lazyBean(AtomicInteger counter) {\t\t\treturn new LazyBean(counter);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "LazyInitializationConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "counter", "params": [], "throws": null, "modifiers": [], "return_type": "AtomicInteger", "snippet": "\t\tAtomicInteger counter() {\t\t\treturn new AtomicInteger(0);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "NotLazyInitializationConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "NotLazyBean", "params": ["AtomicInteger"], "throws": null, "modifiers": [], "return_type": "NotLazyBean", "snippet": "\t\tNotLazyBean NotLazyBean(AtomicInteger counter) {\t\t\treturn new NotLazyBean(counter);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "NotLazyInitializationConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "counter", "params": [], "throws": null, "modifiers": [], "return_type": "AtomicInteger", "snippet": "\t\tAtomicInteger counter() {\t\t\treturn new AtomicInteger(0);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "LazyInitializationExcludeFilterConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "notLazyBean", "params": ["AtomicInteger"], "throws": null, "modifiers": [], "return_type": "NotLazyBean", "snippet": "\t\tNotLazyBean notLazyBean(AtomicInteger counter) {\t\t\treturn new NotLazyBean(counter);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "LazyInitializationExcludeFilterConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "lazyInitializationExcludeFilter", "params": [], "throws": null, "modifiers": ["static"], "return_type": "LazyInitializationExcludeFilter", "snippet": "\t\tstatic LazyInitializationExcludeFilter lazyInitializationExcludeFilter() {\t\t\treturn LazyInitializationExcludeFilter.forBeanTypes(NotLazyBean.class);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "LazyInitializationExcludeFilterConfig", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getExitCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getExitCode() {\t\t\treturn 11;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ExitStatusException", "extends": "RuntimeException", "implements": ["ExitCodeGenerator"], "modifiers": ["static"]}}, {"method_name": "setApplicationContext", "params": ["ApplicationContext"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\t\t\tthis.applicationContext = applicationContext;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "AbstractTestRunner", "extends": null, "implements": ["ApplicationContextAware", "Ordered"], "modifiers": ["static", "abstract"]}}, {"method_name": "getOrder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getOrder() {\t\t\treturn this.order;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "AbstractTestRunner", "extends": null, "implements": ["ApplicationContextAware", "Ordered"], "modifiers": ["static", "abstract"]}}, {"method_name": "markAsRan", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid markAsRan() {\t\t\tthis.run = true;\t\t\tfor (String name : this.expectedBefore) {\t\t\t\tAbstractTestRunner bean = this.applicationContext.getBean(name, AbstractTestRunner.class);\t\t\t\tassertThat(bean.hasRun()).isTrue();\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "AbstractTestRunner", "extends": null, "implements": ["ApplicationContextAware", "Ordered"], "modifiers": ["static", "abstract"]}}, {"method_name": "hasRun", "params": [], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "\t\tboolean hasRun() {\t\t\treturn this.run;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "AbstractTestRunner", "extends": null, "implements": ["ApplicationContextAware", "Ordered"], "modifiers": ["static", "abstract"]}}, {"method_name": "run", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void run(String... args) {\t\t\tmarkAsRan();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "TestCommandLineRunner", "extends": "AbstractTestRunner", "implements": ["CommandLineRunner"], "modifiers": ["static"]}}, {"method_name": "run", "params": ["ApplicationArguments"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void run(ApplicationArguments args) {\t\t\tmarkAsRan();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "TestApplicationRunner", "extends": "AbstractTestRunner", "implements": ["ApplicationRunner"], "modifiers": ["static"]}}, {"method_name": "onApplicationEvent", "params": ["ExitCodeEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onApplicationEvent(ExitCodeEvent event) {\t\t\tthis.exitCode = event.getExitCode();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ExitCodeListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["static"]}}, {"method_name": "getExitCode", "params": [], "throws": null, "modifiers": [], "return_type": "Integer", "snippet": "\t\tInteger getExitCode() {\t\t\treturn this.exitCode;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "ExitCodeListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["static"]}}, {"method_name": "addResource", "params": ["String", "String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid addResource(String source, String path) {\t\t\tthis.resources.put(source, new ClassPathResource(path, getClass()));\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "MockResourceLoader", "extends": null, "implements": ["ResourceLoader"], "modifiers": ["static"]}}, {"method_name": "getResource", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Resource", "snippet": "\t\tpublic Resource getResource(String path) {\t\t\tResource resource = this.resources.get(path);\t\t\treturn (resource != null) ? resource : new ClassPathResource(\"doesnotexist\");\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "MockResourceLoader", "extends": null, "implements": ["ResourceLoader"], "modifiers": ["static"]}}, {"method_name": "getClassLoader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ClassLoader", "snippet": "\t\tpublic ClassLoader getClassLoader() {\t\t\treturn getClass().getClassLoader();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "stars": "47572", "class": {"name": "MockResourceLoader", "extends": null, "implements": ["ResourceLoader"], "modifiers": ["static"]}}, {"method_name": "getUgi", "params": [], "throws": null, "modifiers": [], "return_type": "UserGroupInformation", "snippet": "    UserGroupInformation getUgi(){        return ugi;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHiveMetadata", "params": ["String", "String", "String"], "throws": null, "modifiers": [], "return_type": "MetaSchema", "snippet": "    MetaSchema getHiveMetadata(String database, String table, String hiveMetaStoreUris) {        MetaSchema metaSchema = new MetaSchema();        try {            IMetaStoreClient client = null;            try {                client = getHiveConnByUris(hiveMetaStoreUris).getMSC();                Table tableInfo = client.getTable(database, table);                StorageDescriptor storageDescriptor = tableInfo.getSd();                metaSchema.addSchemaInfo(HIVE_META_SERDE_INFO, storageDescriptor.getSerdeInfo());                metaSchema.addSchemaInfo(HIVE_META_NUM_BUCKETS, storageDescriptor.getNumBuckets());                metaSchema.addSchemaInfo(HIVE_META_BUCKET_COLS, storageDescriptor.getBucketCols());                metaSchema.addSchemaInfo(HIVE_META_SORT_COLS, storageDescriptor.getSortCols());                metaSchema.addSchemaInfo(HIVE_META_INPUT_FORMAT, storageDescriptor.getInputFormat());                metaSchema.addSchemaInfo(HIVE_META_OUTPUT_FORMAT, storageDescriptor.getOutputFormat());                metaSchema.addSchemaInfo(HIVE_META_PARAMETERS, storageDescriptor.getParameters());                metaSchema.addSchemaInfo(HIVE_META_COMPRESSED, storageDescriptor.isCompressed());                // get the field schema list from storage descriptor                List<MetaSchema.FieldSchema> fieldSchemas = new ArrayList<>();                List<org.apache.hadoop.hive.metastore.api.FieldSchema> fields =                    storageDescriptor.getCols();                fields.forEach(schemaDescriptor ->{                    MetaSchema.FieldSchema fieldSchema = new MetaSchema.FieldSchema(                            schemaDescriptor.getName(),                            schemaDescriptor.getType(),                            schemaDescriptor.getComment()                    );                    fieldSchemas.add(fieldSchema);                });                metaSchema.setFieldSchemas(fieldSchemas);            } finally {                if (client != null) {                    client.close();                }            }        } catch (Exception e) {            LOG.error(\"Failure to obtain metadata\", e);            throw DataXException.asDataXException(HdfsReaderErrorCode.OBTAIN_METADATA_ERROR, e.getMessage());        }        return metaSchema;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateConfigByHiveMeta", "params": ["String", "String", "String", "Configuration"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean updateConfigByHiveMeta(String database, String table,                                   String hiveMetaStoreUris, Configuration originConfig){        try{            IMetaStoreClient client = null;            boolean affect = false;            try{                client = getHiveConnByUris(hiveMetaStoreUris).getMSC();                Table tableInfo = client.getTable(database, table);                StorageDescriptor descriptor = tableInfo.getSd();                String partitionValues = originConfig.getString(Key.PARTITIONS_VALUES);                if(StringUtils.isNotBlank(partitionValues)){                    String[] partitions = partitionValues.split(\",\");                    Partition partition= null;                    try{                        partition = client.getPartition(database, table, Arrays.asList(partitions));                    }catch(Exception e){                        //ignore                    }                    if(null != partition){                        //if the partition exists, use its storage descriptor                        descriptor = partition.getSd();                    }                }                String fileType = detectFileType(descriptor);                if(StringUtils.isNotBlank(fileType) && !fileType                        .equalsIgnoreCase(originConfig.getString(Key.FILETYPE, \"\"))){                    affect = true;                    originConfig.set(Key.FILETYPE, fileType);                }                String fieldDelimiter = descriptor.getSerdeInfo().getParameters().getOrDefault(Constant.META_FIELD_DELIMITER, \"\");                if(StringUtils.isNotEmpty(fieldDelimiter)                        && !fieldDelimiter.equalsIgnoreCase(originConfig                        .getString( com.alibaba.datax.plugin.unstructuredstorage.reader.Key.FIELD_DELIMITER, \"\"))){                    affect = true;                    originConfig.set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.FIELD_DELIMITER, fieldDelimiter);                }                return affect;            }finally{                if(null != client){                    client.close();                }            }        }catch(Exception e){            LOG.error(\"Fail to update configuration\", e);            throw DataXException.asDataXException(HdfsReaderErrorCode.UPDATE_CONFIG_ERROR, e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeFileSystem", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void closeFileSystem(){        try {            fileSystem.close();        } catch (IOException e) {            String message = \"\u5173\u95edFileSystem\u65f6\u53d1\u751fIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\";            LOG.error(message);            throw DataXException.asDataXException(HdfsReaderErrorCode.CONNECT_HDFS_IO_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exists", "params": ["String"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean exists(String path){        try{            return fileSystem.exists(new Path(path));        }catch(IOException e){            String message = \"exception occurs while reading the file info in HDFS ,please check your network\";            LOG.error(message);            throw DataXException.asDataXException(HdfsReaderErrorCode.CONNECT_HDFS_IO_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConf", "params": [], "throws": null, "modifiers": [], "return_type": "org", "snippet": "    org.apache.hadoop.conf.Configuration getConf(){        return hadoopConf;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFiles", "params": ["List<String>", "String"], "throws": null, "modifiers": [], "return_type": "HashSet<String>", "snippet": "    HashSet<String> getAllFiles(List<String> srcPaths, String specifiedFileType) {        this.specifiedFileType = specifiedFileType;        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                LOG.info(String.format(\"get HDFS all files in path = [%s]\", eachPath));                getHDFSAllFiles(eachPath);            }        }        return sourceHDFSAllFilesList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHDFSAllFiles", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "HashSet<String>", "snippet": "    private HashSet<String> getHDFSAllFiles(String hdfsPath) {        try {            //check if the hdfsPath contains regular sign            if (hdfsPath.contains(\"*\") || hdfsPath.contains(\"?\")) {                Path path = new Path(hdfsPath);                FileStatus[] stats = fileSystem.globStatus(path, path1 -> !path1.getName().startsWith(\".\"));                for (FileStatus f : stats) {                    if (f.isFile()) {                        if (f.getLen() == 0) {                            String message = String.format(\"\u6587\u4ef6[%s]\u957f\u5ea6\u4e3a0\uff0c\u5c06\u4f1a\u8df3\u8fc7\u4e0d\u4f5c\u5904\u7406\uff01\", hdfsPath);                            LOG.warn(message);                        } else {                            addSourceFileByType(f.getPath().toString());                        }                    } else if (f.isDirectory()) {                        getHDFSAllFilesNORegex(f.getPath().toString(), fileSystem);                    }                }            } else {                getHDFSAllFilesNORegex(hdfsPath, fileSystem);            }            return sourceHDFSAllFilesList;        } catch (IOException e) {            String message = String.format(\"\u65e0\u6cd5\u8bfb\u53d6\u8def\u5f84[%s]\u4e0b\u7684\u6240\u6709\u6587\u4ef6,\u8bf7\u786e\u8ba4\u60a8\u7684\u914d\u7f6e\u9879fs.defaultFS, path\u7684\u503c\u662f\u5426\u6b63\u786e\uff0c\" +                    \"\u662f\u5426\u6709\u8bfb\u5199\u6743\u9650\uff0c\u7f51\u7edc\u662f\u5426\u5df2\u65ad\u5f00\uff01\", hdfsPath);            LOG.error(message);            throw DataXException.asDataXException(HdfsReaderErrorCode.PATH_CONFIG_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHDFSAllFilesNORegex", "params": ["String", "FileSystem"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "HashSet<String>", "snippet": "    private HashSet<String> getHDFSAllFilesNORegex(String path, FileSystem hdfs) throws IOException {        // get the root directory        Path listFiles = new Path(path);        // If the network disconnected, this method will retry 45 times        // each time the retry interval for 20 seconds        // get all the subdirectories of root directory        FileStatus stats[] = hdfs.listStatus(listFiles, path1 -> !path1.getName().startsWith(\".\"));        for (FileStatus f : stats) {            // recursive directory            if (f.isDirectory()) {                LOG.info(String.format(\"[%s] \u662f\u76ee\u5f55, \u9012\u5f52\u83b7\u53d6\u8be5\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\", f.getPath().toString()));                getHDFSAllFilesNORegex(f.getPath().toString(), hdfs);            } else if (f.isFile()) {                addSourceFileByType(f.getPath().toString());            } else {                String message = String.format(\"\u8be5\u8def\u5f84[%s]\u6587\u4ef6\u7c7b\u578b\u65e2\u4e0d\u662f\u76ee\u5f55\u4e5f\u4e0d\u662f\u6587\u4ef6\uff0c\u63d2\u4ef6\u81ea\u52a8\u5ffd\u7565\u3002\",                        f.getPath().toString());                LOG.info(message);            }        }        return sourceHDFSAllFilesList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addSourceFileByType", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addSourceFileByType(String filePath) {        if(isEmpty(filePath)){            return;        }        boolean isMatchedFileType = checkHdfsFileType(filePath, this.specifiedFileType);        if (isMatchedFileType) {            LOG.info(String.format(\"[%s]\u662f[%s]\u7c7b\u578b\u7684\u6587\u4ef6, \u5c06\u8be5\u6587\u4ef6\u52a0\u5165source files\u5217\u8868\", filePath, this.specifiedFileType));            sourceHDFSAllFilesList.add(filePath);        } else {            String message = String.format(\"\u6587\u4ef6[%s]\u7684\u7c7b\u578b\u4e0e\u7528\u6237\u914d\u7f6e\u7684fileType\u7c7b\u578b\u4e0d\u4e00\u81f4\uff0c\" +                            \"\u8bf7\u786e\u8ba4\u60a8\u914d\u7f6e\u7684\u76ee\u5f55\u4e0b\u9762\u6240\u6709\u6587\u4ef6\u7684\u7c7b\u578b\u5747\u4e3a[%s]\"                    , filePath, this.specifiedFileType);            LOG.error(message);            throw DataXException.asDataXException(                    HdfsReaderErrorCode.FILE_TYPE_UNSUPPORT, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInputStream", "params": ["String"], "throws": null, "modifiers": [], "return_type": "InputStream", "snippet": "    InputStream getInputStream(String filepath) {        InputStream inputStream;        Path path = new Path(filepath);        try {            //If the network disconnected, this method will retry 45 times            //each time the retry interval for 20 seconds            inputStream = fileSystem.open(path);            FSDataInputStream in;            return inputStream;        } catch (IOException e) {            String message = String.format(\"\u8bfb\u53d6\u6587\u4ef6 : [%s] \u65f6\u51fa\u9519,\u8bf7\u786e\u8ba4\u6587\u4ef6\uff1a[%s]\u5b58\u5728\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8bfb\u53d6\", filepath, filepath);            throw DataXException.asDataXException(HdfsReaderErrorCode.READ_FILE_ERROR, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sequenceFileStartRead", "params": ["String", "Configuration", "RecordSender", "TaskPluginCollector"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,                               RecordSender recordSender, TaskPluginCollector taskPluginCollector) {        LOG.info(String.format(\"Start Read sequence file [%s].\", sourceSequenceFilePath));        Path seqFilePath = new Path(sourceSequenceFilePath);        SequenceFile.Reader reader = null;        try {            reader = new SequenceFile.Reader(this.hadoopConf,                    SequenceFile.Reader.file(seqFilePath));            Writable key = (Writable) ReflectionUtils.newInstance(reader.getKeyClass(), this.hadoopConf);            Text value = new Text();            while (reader.next(key, value)) {                if (StringUtils.isNotBlank(value.toString())) {                    UnstructuredStorageReaderUtil.transportOneRecord(recordSender,                            readerSliceConfig, taskPluginCollector, value.toString());                }            }        } catch (Exception e) {            String message = String.format(\"SequenceFile.Reader\u8bfb\u53d6\u6587\u4ef6[%s]\u65f6\u51fa\u9519\", sourceSequenceFilePath);            throw DataXException.asDataXException(HdfsReaderErrorCode.READ_SEQUENCEFILE_ERROR, message, e);        } finally {            IOUtils.closeStream(reader);            LOG.info(\"Finally, Close stream SequenceFile.Reader.\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rcFileStartRead", "params": ["String", "Configuration", "RecordSender", "TaskPluginCollector"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void rcFileStartRead(String sourceRcFilePath, Configuration readerSliceConfig,                         RecordSender recordSender, TaskPluginCollector taskPluginCollector) {        LOG.info(String.format(\"Start Read RC File [%s].\", sourceRcFilePath));        List<ColumnEntry> column = UnstructuredStorageReaderUtil                .getListColumnEntry(readerSliceConfig, com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN);        // warn: no default value '\\N'        String nullFormat = readerSliceConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.NULL_FORMAT);        Path rcFilePath = new Path(sourceRcFilePath);        RCFileRecordReader recordReader = null;        try {            long fileLen = fileSystem.getFileStatus(rcFilePath).getLen();            FileSplit split = new FileSplit(rcFilePath, 0, fileLen, (String[]) null);            recordReader = new RCFileRecordReader(hadoopConf, split);            LongWritable key = new LongWritable();            BytesRefArrayWritable value = new BytesRefArrayWritable();            Text txt = new Text();            while (recordReader.next(key, value)) {                String[] sourceLine = new String[value.size()];                txt.clear();                for (int i = 0; i < value.size(); i++) {                    BytesRefWritable v = value.get(i);                    txt.set(v.getData(), v.getStart(), v.getLength());                    sourceLine[i] = txt.toString();                }                UnstructuredStorageReaderUtil.transportOneRecord(recordSender,                        column, sourceLine, nullFormat, taskPluginCollector);            }        } catch (IOException e) {            String message = String.format(\"\u8bfb\u53d6\u6587\u4ef6[%s]\u65f6\u51fa\u9519\", sourceRcFilePath);            throw DataXException.asDataXException(HdfsReaderErrorCode.READ_RCFILE_ERROR, message, e);        } finally {            try {                if (recordReader != null) {                    recordReader.close();                    LOG.info(\"Finally, Close RCFileRecordReader.\");                }            } catch (IOException e) {                LOG.warn(String.format(\"finally: \u5173\u95edRCFileRecordReader\u5931\u8d25, %s\", e.getMessage()));            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "orcFileStartRead", "params": ["String", "Configuration", "RecordSender", "TaskPluginCollector"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void orcFileStartRead(String sourceOrcFilePath, Configuration readerSliceConfig,                          RecordSender recordSender, TaskPluginCollector taskPluginCollector) {        LOG.info(String.format(\"Start Read ORC File [%s].\", sourceOrcFilePath));        List<ColumnEntry> column = UnstructuredStorageReaderUtil                .getListColumnEntry(readerSliceConfig, com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN);        String nullFormat = readerSliceConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.NULL_FORMAT);        StringBuilder allColumns = new StringBuilder();        StringBuilder allColumnTypes = new StringBuilder();        boolean isReadAllColumns = false;        int columnIndexMax = -1;        if (null == column || column.size() == 0) {            int allColumnsCount = getAllColumnsCount(sourceOrcFilePath);            columnIndexMax = allColumnsCount - 1;            isReadAllColumns = true;        } else {            columnIndexMax = getMaxIndex(column);        }        for (int i = 0; i <= columnIndexMax; i++) {            allColumns.append(\"col\");            allColumnTypes.append(\"string\");            if (i != columnIndexMax) {                allColumns.append(\",\");                allColumnTypes.append(\":\");            }        }        if (columnIndexMax >= 0) {            JobConf conf = new JobConf(hadoopConf);            Path orcFilePath = new Path(sourceOrcFilePath);            Properties p = new Properties();            p.setProperty(\"columns\", allColumns.toString());            p.setProperty(\"columns.types\", allColumnTypes.toString());            try {                OrcSerde serde = new OrcSerde();                serde.initialize(conf, p);                StructObjectInspector inspector = (StructObjectInspector) serde.getObjectInspector();                InputFormat<?, ?> in = new OrcInputFormat();                FileInputFormat.setInputPaths(conf, orcFilePath.toString());                //If the network disconnected, will retry 45 times, each time the retry interval for 20 seconds                //Each file as a split                InputSplit[] splits = in.getSplits(conf, -1);                for(InputSplit split : splits){                    RecordReader reader = in.getRecordReader(split, conf, Reporter.NULL);                    Object key = reader.createKey();                    Object value = reader.createValue();                    // get all field refs                    List<? extends StructField> fields = inspector.getAllStructFieldRefs();                    List<Object> recordFields;                    while (reader.next(key, value)) {                        recordFields = new ArrayList<>();                        for (int i = 0; i <= columnIndexMax; i++) {                            Object field = inspector.getStructFieldData(value, fields.get(i));                            recordFields.add(field);                        }                        transportOneRecord(column, recordFields, recordSender,                                taskPluginCollector, isReadAllColumns, nullFormat);                    }                    reader.close();                }            } catch (IOException | SerDeException e) {                String message = String.format(\"\u4eceorcfile\u6587\u4ef6\u8def\u5f84[%s]\u4e2d\u8bfb\u53d6\u6570\u636e\u53d1\u751f\u5f02\u5e38\uff0c\u8bf7\u8054\u7cfb\u7cfb\u7edf\u7ba1\u7406\u5458\u3002\"                        , sourceOrcFilePath);                throw DataXException.asDataXException(HdfsReaderErrorCode.READ_FILE_ERROR, message);            }        } else {            String message = String.format(\"\u8bf7\u786e\u8ba4\u60a8\u6240\u8bfb\u53d6\u7684\u5217\u914d\u7f6e\u6b63\u786e\uff01columnIndexMax \u5c0f\u4e8e0,column:%s\", JSON.toJSONString(column));            throw DataXException.asDataXException(HdfsReaderErrorCode.BAD_CONFIG_VALUE, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hFileStartRead", "params": ["String", "Configuration", "RecordSender", "TaskPluginCollector"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void hFileStartRead(String sourceFilePath, Configuration readerSliceConfig,                        RecordSender recordSender, TaskPluginCollector taskPluginCollector){        LOG.info(String.format(\"Start Read HFile file [%s].\", sourceFilePath));        String encoding = readerSliceConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING, \"UTF-8\");        HFileParser parser = HFileParserFactory.getHBASEImpl(fileSystem, encoding);        List<ColumnEntry> column = UnstructuredStorageReaderUtil                .getListColumnEntry(readerSliceConfig, com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN);        String nullFormat = readerSliceConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.NULL_FORMAT);        parser.parse(sourceFilePath, readerSliceConfig.getConfiguration(HFILE_PARSE_CONFIG), sourceLine -> UnstructuredStorageReaderUtil.transportOneRecord(recordSender, column,                sourceLine, nullFormat, taskPluginCollector));        LOG.info(\"Finally, Close stream HFile.Reader\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "FileStatus", "snippet": "    public FileStatus getFileStatus(String path){        try{            return fileSystem.getFileStatus(new Path(path));        }catch(IOException e){            String message = String.format(\"Failed to get file status from : %s\", path);            LOG.error(message);            throw DataXException.asDataXException(HdfsReaderErrorCode.READ_FILE_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transportOneRecord", "params": ["List<ColumnEntry>", "List<Object>", "RecordSender", "TaskPluginCollector", "boolean", "String"], "throws": null, "modifiers": ["private"], "return_type": "Record", "snippet": "    private Record transportOneRecord(List<ColumnEntry> columnConfigs, List<Object> recordFields            , RecordSender recordSender, TaskPluginCollector taskPluginCollector, boolean isReadAllColumns, String nullFormat) {        Record record = recordSender.createRecord();        Column columnGenerated;        try {            if (isReadAllColumns) {                // read all the columns, then create the column whose type is STRING                for (Object recordField : recordFields) {                    String columnValue = null;                    if (recordField != null) {                        columnValue = recordField.toString();                    }                    columnGenerated = new StringColumn(columnValue);                    record.addColumn(columnGenerated);                }            } else {                for (ColumnEntry columnConfig : columnConfigs) {                    String columnType = columnConfig.getType();                    Integer columnIndex = columnConfig.getIndex();                    String columnConst = columnConfig.getValue();                    String columnValue = null;                    if (null != columnIndex) {                        if (null != recordFields.get(columnIndex)) {                            columnValue = recordFields.get(columnIndex).toString();                        }                    } else {                        columnValue = columnConst;                    }                    Type type = Type.valueOf(columnType.toUpperCase());                    // it's all ok if nullFormat is null                    if (StringUtils.equals(columnValue, nullFormat) || StringUtils.isBlank(columnValue)) {                        columnValue = null;                    }                    switch (type) {                        case STRING:                            columnGenerated = new StringColumn(columnValue);                            break;                        case LONG:                            try {                                columnGenerated = new LongColumn(columnValue);                            } catch (Exception e) {                                throw new IllegalArgumentException(String.format(                                        \"\u7c7b\u578b\u8f6c\u6362\u9519\u8bef, \u65e0\u6cd5\u5c06[%s] \u8f6c\u6362\u4e3a[%s]\", columnValue,                                        \"LONG\"));                            }                            break;                        case DOUBLE:                            try {                                columnGenerated = new DoubleColumn(columnValue);                            } catch (Exception e) {                                throw new IllegalArgumentException(String.format(                                        \"\u7c7b\u578b\u8f6c\u6362\u9519\u8bef, \u65e0\u6cd5\u5c06[%s] \u8f6c\u6362\u4e3a[%s]\", columnValue,                                        \"DOUBLE\"));                            }                            break;                        case BOOLEAN:                            try {                                columnGenerated = new BoolColumn(columnValue);                            } catch (Exception e) {                                throw new IllegalArgumentException(String.format(                                        \"\u7c7b\u578b\u8f6c\u6362\u9519\u8bef, \u65e0\u6cd5\u5c06[%s] \u8f6c\u6362\u4e3a[%s]\", columnValue,                                        \"BOOLEAN\"));                            }                            break;                        case DATE:                            try {                                if (columnValue == null) {                                    columnGenerated = new DateColumn((Date) null);                                } else {                                    String formatString = columnConfig.getFormat();                                    if (StringUtils.isNotBlank(formatString)) {                                        SimpleDateFormat format = new SimpleDateFormat(                                                formatString);                                        columnGenerated = new DateColumn(                                                format.parse(columnValue));                                    } else {                                        columnGenerated = new DateColumn(                                                new StringColumn(columnValue)                                                        .asDate());                                    }                                }                            } catch (Exception e) {                                throw new IllegalArgumentException(String.format(                                        \"\u7c7b\u578b\u8f6c\u6362\u9519\u8bef, \u65e0\u6cd5\u5c06[%s] \u8f6c\u6362\u4e3a[%s]\", columnValue,                                        \"DATE\"));                            }                            break;                        default:                            String errorMessage = String.format(                                    \"\u60a8\u914d\u7f6e\u7684\u5217\u7c7b\u578b\u6682\u4e0d\u652f\u6301 : [%s]\", columnType);                            LOG.error(errorMessage);                            throw DataXException                                    .asDataXException(                                            UnstructuredStorageReaderErrorCode.NOT_SUPPORT_TYPE,                                            errorMessage);                    }                    record.addColumn(columnGenerated);                }            }            recordSender.sendToWriter(record);        } catch (IllegalArgumentException iae) {            taskPluginCollector                    .collectDirtyRecord(record, iae.getMessage());        } catch (IndexOutOfBoundsException ioe) {            taskPluginCollector                    .collectDirtyRecord(record, ioe.getMessage());        } catch (Exception e) {            if (e instanceof DataXException) {                throw (DataXException) e;            }            //regard then failure of transform as dirty record            taskPluginCollector.collectDirtyRecord(record, e.getMessage());        }        return record;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllColumnsCount", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getAllColumnsCount(String filePath) {        Path path = new Path(filePath);        try {            Reader reader = OrcFile.createReader(path, OrcFile.readerOptions(hadoopConf));            return reader.getTypes().get(0).getSubtypesCount();        } catch (IOException e) {            String message = \"\u8bfb\u53d6orcfile column\u5217\u6570\u5931\u8d25\uff0c\u8bf7\u8054\u7cfb\u7cfb\u7edf\u7ba1\u7406\u5458\";            throw DataXException.asDataXException(HdfsReaderErrorCode.READ_FILE_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaxIndex", "params": ["List<ColumnEntry>"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getMaxIndex(List<ColumnEntry> columnConfigs) {        int maxIndex = -1;        for (ColumnEntry columnConfig : columnConfigs) {            Integer columnIndex = columnConfig.getIndex();            if (columnIndex != null && columnIndex < 0) {                String message = String.format(\"\u60a8column\u4e2d\u914d\u7f6e\u7684index\u4e0d\u80fd\u5c0f\u4e8e0\uff0c\u8bf7\u4fee\u6539\u4e3a\u6b63\u786e\u7684index,column\u914d\u7f6e:%s\",                        JSON.toJSONString(columnConfigs));                LOG.error(message);                throw DataXException.asDataXException(HdfsReaderErrorCode.CONFIG_INVALID_EXCEPTION, message);            } else if (columnIndex != null && columnIndex > maxIndex) {                maxIndex = columnIndex;            }        }        return maxIndex;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkHdfsFileType", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkHdfsFileType(String filepath, String specifiedFileType) {        if(StringUtils.isBlank(specifiedFileType)){            return true;        }        Path file = new Path(filepath);        try {            FSDataInputStream in = fileSystem.open(file);            if (StringUtils.equalsIgnoreCase(specifiedFileType, Constant.CSV)                    || StringUtils.equalsIgnoreCase(specifiedFileType, Constant.TEXT)) {                boolean isORC = isORCFile(file, fileSystem, in);                if (isORC) {                    return false;                }                boolean isRC = isRCFile(filepath, in);                if (isRC) {                    return false;                }                boolean isSEQ = isSequenceFile(filepath, in);                if (isSEQ) {                    return false;                }                //default file type is TEXT or CSV                return !isORC && !isRC && !isSEQ;            } else if (StringUtils.equalsIgnoreCase(specifiedFileType, Constant.ORC)) {                return isORCFile(file, fileSystem, in);            } else if (StringUtils.equalsIgnoreCase(specifiedFileType, Constant.RC)) {                return isRCFile(filepath, in);            } else if (StringUtils.equalsIgnoreCase(specifiedFileType, Constant.SEQ)) {                return isSequenceFile(filepath, in);            } else if (StringUtils.equalsIgnoreCase(specifiedFileType, Constant.HFILE)){                //Accept all files                return true;            }        } catch (Exception e) {            String message = String.format(\"\u68c0\u67e5\u6587\u4ef6[%s]\u7c7b\u578b\u5931\u8d25\uff0c\u76ee\u524d\u652f\u6301ORC,SEQUENCE,RCFile,TEXT,CSV\u4e94\u79cd\u683c\u5f0f\u7684\u6587\u4ef6,\" +                    \"\u8bf7\u68c0\u67e5\u60a8\u6587\u4ef6\u7c7b\u578b\u548c\u6587\u4ef6\u662f\u5426\u6b63\u786e\u3002\", filepath);            LOG.error(message);            throw DataXException.asDataXException(HdfsReaderErrorCode.READ_FILE_ERROR, message, e);        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isORCFile", "params": ["Path", "FileSystem", "FSDataInputStream"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isORCFile(Path file, FileSystem fs, FSDataInputStream in) {        try {            // figure out the size of the file using the option or filesystem            long size = fs.getFileStatus(file).getLen();            //read last bytes into buffer to get PostScript            int readSize = (int) Math.min(size, DIRECTORY_SIZE_GUESS);            in.seek(size - readSize);            ByteBuffer buffer = ByteBuffer.allocate(readSize);            in.readFully(buffer.array(), buffer.arrayOffset() + buffer.position(),                    buffer.remaining());            //read the PostScript            //get length of PostScript            int psLen = buffer.get(readSize - 1) & 0xff;            int len = OrcFile.MAGIC.length();            if (psLen < len + 1) {                return false;            }            int offset = buffer.arrayOffset() + buffer.position() + buffer.limit() - 1                    - len;            byte[] array = buffer.array();            // now look for the magic string at the end of the postscript.            if (Text.decode(array, offset, len).equals(OrcFile.MAGIC)) {                return true;            } else {                // If it isn't there, this may be the 0.11.0 version of ORC.                // Read the first 3 bytes of the file to check for the header                in.seek(0);                byte[] header = new byte[len];                in.readFully(header, 0, len);                // if it isn't there, this isn't an ORC file                if (Text.decode(header, 0, len).equals(OrcFile.MAGIC)) {                    return true;                }            }        } catch (IOException e) {            LOG.info(String.format(\"\u68c0\u67e5\u6587\u4ef6\u7c7b\u578b: [%s] \u4e0d\u662fORC File.\", file.toString()));        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isRCFile", "params": ["String", "FSDataInputStream"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isRCFile(String filepath, FSDataInputStream in) {        // The first version of RCFile used the sequence file header.        final byte[] ORIGINAL_MAGIC = new byte[]{(byte) 'S', (byte) 'E', (byte) 'Q'};        // The 'magic' bytes at the beginning of the RCFile        final byte[] RC_MAGIC = new byte[]{(byte) 'R', (byte) 'C', (byte) 'F'};        // the version that was included with the original magic, which is mapped        // into ORIGINAL_VERSION        final byte ORIGINAL_MAGIC_VERSION_WITH_METADATA = 6;        // All of the versions should be place in this list.        // version with SEQ        final int ORIGINAL_VERSION = 0;        // version with RCF        final int NEW_MAGIC_VERSION = 1;        final int CURRENT_VERSION = NEW_MAGIC_VERSION;        byte version;        byte[] magic = new byte[RC_MAGIC.length];        try {            in.seek(0);            in.readFully(magic);            if (Arrays.equals(magic, ORIGINAL_MAGIC)) {                byte vers = in.readByte();                if (vers != ORIGINAL_MAGIC_VERSION_WITH_METADATA) {                    return false;                }                version = ORIGINAL_VERSION;            } else {                if (!Arrays.equals(magic, RC_MAGIC)) {                    return false;                }                // Set 'version'                version = in.readByte();                if (version > CURRENT_VERSION) {                    return false;                }            }            if (version == ORIGINAL_VERSION) {                try {                    Class<?> keyCls = hadoopConf.getClassByName(Text.readString(in));                    Class<?> valCls = hadoopConf.getClassByName(Text.readString(in));                    if (!keyCls.equals(RCFile.KeyBuffer.class)                            || !valCls.equals(RCFile.ValueBuffer.class)) {                        return false;                    }                } catch (ClassNotFoundException e) {                    return false;                }            }            // is compressed?            boolean decompress = in.readBoolean();            if (version == ORIGINAL_VERSION) {                // is block-compressed? it should be always false.                boolean blkCompressed = in.readBoolean();                if (blkCompressed) {                    return false;                }            }            return true;        } catch (IOException e) {            LOG.info(String.format(\"\u68c0\u67e5\u6587\u4ef6\u7c7b\u578b: [%s] \u4e0d\u662fRC File.\", filepath));        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSequenceFile", "params": ["String", "FSDataInputStream"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isSequenceFile(String filepath, FSDataInputStream in) {        byte[] SEQ_MAGIC = new byte[]{(byte) 'S', (byte) 'E', (byte) 'Q'};        byte[] magic = new byte[SEQ_MAGIC.length];        try {            in.seek(0);            in.readFully(magic);            if (Arrays.equals(magic, SEQ_MAGIC)) {                return true;            } else {                return false;            }        } catch (IOException e) {            LOG.info(String.format(\"\u68c0\u67e5\u6587\u4ef6\u7c7b\u578b: [%s] \u4e0d\u662fSequence File.\", filepath));        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isEmpty(String filePath){        FileStatus status;        try {            status = fileSystem.getFileStatus(new Path(filePath));            return status.getLen() <= 0;        } catch (IOException e) {            throw DataXException.asDataXException(HdfsReaderErrorCode.READ_FILE_ERROR, e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHiveConnByUris", "params": ["String"], "throws": ["IOException", "InterruptedException"], "modifiers": ["private"], "return_type": "Hive", "snippet": "    private Hive getHiveConnByUris(String hiveMetaStoreUris) throws IOException, InterruptedException {        HiveConf hiveConf = new HiveConf();        hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS, hiveMetaStoreUris);        UserGroupInformation hiveUgi;        if(haveKerberos){            Properties kerberosProps = KerberosUtil.getProperties();            kerberosProps = null == kerberosProps? new Properties() : kerberosProps;            if(StringUtils.isNotBlank(kerberosProps.getProperty(\"kerberos.krb5.path\", \"\"))){                System.setProperty(\"java.security.krb5.conf\", kerberosProps.getProperty(\"kerberos.krb5.path\"));            }            hiveConf.setVar(HiveConf.ConfVars.METASTORE_USE_THRIFT_SASL, \"true\");            hiveConf.set(\"hadoop.security.authentication\", \"kerberos\");            hiveConf.setVar(HiveConf.ConfVars.METASTORE_KERBEROS_PRINCIPAL,                    this.readerConfig.getString(Key.HIVE_KEBEROS_PRINCIPAL, DEFAULT_HIVE_USER + \"/_HOST@EXAMPLE.COM\"));            hiveUgi = this.kerberosAuthentication(hiveConf, this.kerberosPrincipal, this.kerberosKeytabFilePath);        }else{            hiveUgi = this.getUgiInAuth(this.readerConfig);        }        return hiveUgi.doAs((PrivilegedExceptionAction<Hive>) () -> {            Hive hive1 = Hive.get(hiveConf);            hive1.getMSC();            return hive1;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUgiInAuth", "params": ["Configuration"], "throws": null, "modifiers": ["private"], "return_type": "UserGroupInformation", "snippet": "    private UserGroupInformation getUgiInAuth(Configuration taskConfig){        String userName = taskConfig.getString(Key.LDAP_USERNAME, \"\");        String password = taskConfig.getString(Key.LDAP_USERPASSWORD, \"\");        if(StringUtils.isNotBlank(userName) && StringUtils.isNotBlank(password)){            try {                password = (String) CryptoUtils.string2Object(password);            } catch (Exception e) {                LOG.error(\"Fail to decrypt password\", e);                throw DataXException.asDataXException(HdfsReaderErrorCode.CONFIG_INVALID_EXCEPTION, e);            }            Properties properties = null;            try {                properties = LdapUtil.getLdapProperties();            }catch(Exception e){                //Ignore            }            if(null != properties){                LdapConnector ldapConnector = LdapConnector.getInstance(properties);                if(!ldapConnector.authenticate(userName, password)){                    throw DataXException.asDataXException(HdfsReaderErrorCode.CONFIG_INVALID_EXCEPTION, \"LDAP authenticate fail\");                }            }else{                throw DataXException.asDataXException(HdfsReaderErrorCode.CONFIG_INVALID_EXCEPTION, \"Engine need LDAP configuration\");            }        }        UserGroupInformation ugi;        try {            UserGroupInformation.setConfiguration(hadoopConf);            String procUser = System.getProperty(\"user.name\", \"\");            String execUser = System.getProperty(EXEC_USER, \"\");            String remoteUser = StringUtils.isNotBlank(userName) ? userName : execUser;            if(StringUtils.isNotBlank(remoteUser) && !remoteUser.equals(procUser)){                //Disable the cache                this.hadoopConf.setBoolean(                        String.format(FS_DISABLE_CACHE, URI.create(this.hadoopConf.get(FS_DEFAULT_NAME_KEY, \"\")).getScheme()), true);                ugi = UserGroupInformation.createRemoteUser(remoteUser);            }else{                ugi = UserGroupInformation.getCurrentUser();            }        } catch (Exception e) {            LOG.error(e.getMessage());            throw DataXException.asDataXException(HdfsReaderErrorCode.HDFS_PROXY_ERROR, e);        }        return ugi;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kerberosAuthentication", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "UserGroupInformation", "snippet": "    private UserGroupInformation kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){        return kerberosAuthentication(this.hadoopConf, kerberosPrincipal, kerberosKeytabFilePath);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kerberosAuthentication", "params": ["org", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "UserGroupInformation", "snippet": "    private UserGroupInformation kerberosAuthentication(org.apache.hadoop.conf.Configuration config,                                                        String kerberosPrincipal, String kerberosKeytabFilePath) {        UserGroupInformation ugi = null;        if(StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {            UserGroupInformation.setConfiguration(config);            try {                ugi = UserGroupInformation.loginUserFromKeytabAndReturnUGI(kerberosPrincipal                        .substring(0, kerberosPrincipal.indexOf(\"@\")), kerberosKeytabFilePath);            } catch (Exception e) {                String message = String.format(\"kerberos\u8ba4\u8bc1\u5931\u8d25,\u8bf7\u786e\u5b9akerberosKeytabFilePath[%s]\u548ckerberosPrincipal[%s]\u586b\u5199\u6b63\u786e\",                        kerberosKeytabFilePath, kerberosPrincipal);                LOG.error(message);                throw DataXException.asDataXException(HdfsReaderErrorCode.KERBEROS_LOGIN_ERROR, e);            }        }        return ugi;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "detectFileType", "params": ["StorageDescriptor"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String detectFileType(StorageDescriptor tableDescriptor){        //search file type by output format of table/partition        HiveFileType hiveFileType = HiveFileType.input(tableDescriptor.getInputFormat());        return hiveFileType != null ? hiveFileType.toString(): \"\";    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReaderUtil.java", "stars": "23", "class": {"name": "HdfsReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "drawScreen", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawScreen(int mouseX, int mouseY, float partialTicks) {        drawDefaultBackground();        super.drawScreen(mouseX, mouseY, partialTicks);        renderHoveredToolTip(mouseX, mouseY);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/GuiColliculus.java", "stars": "2", "class": {"name": "GuiColliculus", "extends": "GuiContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawGuiContainerBackgroundLayer", "params": ["float", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void drawGuiContainerBackgroundLayer(float partialTicks, int mouseX, int mouseY) {        GlStateManager.color(1, 1, 1, 1);        mc.getTextureManager().bindTexture(COLLICULUS_GUI_TEXTURE);        drawTexturedModalRect(guiLeft, guiTop, 0, 0, xSize, ySize);        for (int i = 0; i < 7; ++i) {            Slot slot = inventorySlots.inventorySlots.get(i);            if (slot.getHasStack() && slot.getSlotStackLimit() == 1)                drawTexturedModalRect(guiLeft + slot.xPos, guiTop + slot.yPos, 200, 0, 16, 16);        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/GuiColliculus.java", "stars": "2", "class": {"name": "GuiColliculus", "extends": "GuiContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountLevel", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountLevel(int countLevel) {        this.countLevel = countLevel;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/BarrelBlurEffect.java", "stars": "2", "class": {"name": "BarrelBlurEffect", "extends": null, "implements": ["GSYVideoGLView"], "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        return  \"#extension GL_OES_EGL_image_external : require\\n\" +                \"precision mediump float;\\n\" +                \"uniform samplerExternalOES sTexture;  \\n\" +                \"  \\n\" +                \"varying vec2 vTextureCoord;\\n\" +                \"const float barrelPower = 0.5;   \\n\" +                \"const int num_iter = \"+ countLevel +\";  \\n\" +                \"const float reci_num_iter_f = 1.0 / float(num_iter); \\n\" +                \"  \\n\" +                \"vec2 barrelDistortion(vec2 coord, float amt) \\n\" +                \"{  \\n\" +                \"    vec2 cc = coord - 0.5;  \\n\" +                \"    float dist = dot(cc, cc);  \\n\" +                \"    return coord + cc * dist * amt;   \\n\" +                \"}  \\n\" +                \"  \\n\" +                \"float sat( float t )  \\n\" +                \"{  \\n\" +                \"    return clamp( t, 0.0, 1.0 );  \\n\" +                \"}  \\n\" +                \"  \\n\" +                \"float linterp( float t ) {  \\n\" +                \"    return sat( 1.0 - abs( 2.0*t - 1.0 ) );  \\n\" +                \"}  \\n\" +                \"  \\n\" +                \"float remap( float t, float a, float b )   \\n\" +                \"{  \\n\" +                \"    return sat( (t - a) / (b - a) );  \\n\" +                \"}  \\n\" +                \"  \\n\" +                \"vec3 spectrum_offset( float t )   \\n\" +                \"{  \\n\" +                \"    vec3 ret;  \\n\" +                \"    float lo = step(t,0.5);  \\n\" +                \"    float hi = 1.0-lo;  \\n\" +                \"    float w = linterp( remap( t, 1.0/6.0, 5.0/6.0 ) );  \\n\" +                \"    ret = vec3(lo,1.0,hi) * vec3(1.0-w, w, 1.0-w);  \\n\" +                \"  \\n\" +                \"    return pow( ret, vec3(1.0/2.2) );  \\n\" +                \"}  \\n\" +                \"  \\n\" +                \"void main()  \\n\" +                \"{     \\n\" +                \"    vec2 uv=(gl_FragCoord.xy/vTextureCoord.xy);  \\n\" +                \"  \\n\" +                \"    vec3 sumcol = vec3(0.0);  \\n\" +                \"    vec3 sumw = vec3(0.0);    \\n\" +                \"    for ( int i=0; i<num_iter;++i )  \\n\" +                \"    {  \\n\" +                \"        float t = float(i) * reci_num_iter_f;  \\n\" +                \"        vec3 w = spectrum_offset( t );\\n\" +                \"        sumw += w;\\n\" +                \"        sumcol += w * texture2D( sTexture, barrelDistortion(vTextureCoord, barrelPower*t ) ).rgb;   \\n\" +                \"    }\\n\" +                \"    gl_FragColor = vec4(sumcol.rgb / sumw, 1.0);  \\n\" +                \"}  \";    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/BarrelBlurEffect.java", "stars": "2", "class": {"name": "BarrelBlurEffect", "extends": null, "implements": ["GSYVideoGLView"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/emptycollection/mybatis-config.xml\")) {      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);      sqlSession = sqlSessionFactory.openSession();    }    conn = sqlSession.getConnection();    ScriptRunner runner = new ScriptRunner(conn);    runner.setLogWriter(null);    dao = sqlSession.getMapper(Dao.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/DaoTest.java", "stars": "15", "class": {"name": "DaoTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "tearDown", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void tearDown() throws Exception {    conn.close();    sqlSession.close();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/DaoTest.java", "stars": "15", "class": {"name": "DaoTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testWithEmptyList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testWithEmptyList() {    final List<TodoLists> actual = dao.selectWithEmptyList();    Assertions.assertEquals(1, actual.size());    final List<TodoItem> todoItems = actual.get(0).getTodoItems();    Assertions.assertEquals(0, todoItems.size(), \"expect \" + todoItems + \" to be empty\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/DaoTest.java", "stars": "15", "class": {"name": "DaoTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testWithNonEmptyList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testWithNonEmptyList() {    final List<TodoLists> actual = dao.selectWithNonEmptyList();    checkNonEmptyList(actual);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/DaoTest.java", "stars": "15", "class": {"name": "DaoTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testWithNonEmptyList_noCollectionId", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testWithNonEmptyList_noCollectionId() {    final List<TodoLists> actual = dao.selectWithNonEmptyList_noCollectionId();    checkNonEmptyList(actual);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/DaoTest.java", "stars": "15", "class": {"name": "DaoTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "checkNonEmptyList", "params": ["List<TodoLists>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkNonEmptyList(final List<TodoLists> actual) {//  Assertions.assertEquals(\"[List(1)=[a description(1), a 2nd description(2)], List(2)=[a description(1)]]\", actual.toString());    Assertions.assertEquals(2, actual.size());    Assertions.assertEquals(2, actual.get(0).getTodoItems().size());    Assertions.assertEquals(1, actual.get(0).getTodoItems().get(0).getOrder());    Assertions.assertEquals(\"a description\", actual.get(0).getTodoItems().get(0).getDescription().trim());    Assertions.assertEquals(2, actual.get(0).getTodoItems().get(1).getOrder());    Assertions.assertEquals(\"a 2nd description\", actual.get(0).getTodoItems().get(1).getDescription().trim());    Assertions.assertEquals(1, actual.get(1).getTodoItems().size());    Assertions.assertEquals(1, actual.get(1).getTodoItems().get(0).getOrder());    Assertions.assertEquals(\"a description\", actual.get(0).getTodoItems().get(0).getDescription().trim());    // We should have gotten three item objects. The first item from the first list and the first item from    // the second list have identical properties, but they should be distinct objects    Assertions.assertNotSame(actual.get(0).getTodoItems().get(0), actual.get(1).getTodoItems().get(0));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/DaoTest.java", "stars": "15", "class": {"name": "DaoTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "doFilterInternal", "params": ["HttpServletRequest", "HttpServletResponse", "FilterChain"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doFilterInternal(HttpServletRequest request,                                    HttpServletResponse response,                                    FilterChain chain) throws ServletException, IOException {        String authHeader = request.getHeader(this.tokenHeader);        if (authHeader != null && authHeader.startsWith(this.tokenHead)) {            String authToken = authHeader.substring(this.tokenHead.length());// The part after \"Bearer \"            String username = jwtTokenUtil.getUserNameFromToken(authToken);            LOGGER.info(\"checking username:{}\", username);            if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {                UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);                if (jwtTokenUtil.validateToken(authToken, userDetails)) {                    UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());                    authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                    LOGGER.info(\"authenticated user:{}\", username);                    SecurityContextHolder.getContext().setAuthentication(authentication);                }            }        }        chain.doFilter(request, response);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/component/JwtAuthenticationTokenFilter.java", "stars": "2", "class": {"name": "JwtAuthenticationTokenFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildConnectingBle", "params": ["BleDevice"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "BleBluetooth", "snippet": "    public synchronized BleBluetooth buildConnectingBle(BleDevice bleDevice) {        BleBluetooth bleBluetooth = new BleBluetooth(bleDevice);        if (!bleTempHashMap.containsKey(bleBluetooth.getDeviceKey())) {            bleTempHashMap.put(bleBluetooth.getDeviceKey(), bleBluetooth);        }        return bleBluetooth;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeConnectingBle", "params": ["BleBluetooth"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeConnectingBle(BleBluetooth bleBluetooth) {        if (bleBluetooth == null) {            return;        }        if (bleTempHashMap.containsKey(bleBluetooth.getDeviceKey())) {            bleTempHashMap.remove(bleBluetooth.getDeviceKey());        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addBleBluetooth", "params": ["BleBluetooth"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addBleBluetooth(BleBluetooth bleBluetooth) {        if (bleBluetooth == null) {            return;        }        if (!bleLruHashMap.containsKey(bleBluetooth.getDeviceKey())) {            bleLruHashMap.put(bleBluetooth.getDeviceKey(), bleBluetooth);        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeBleBluetooth", "params": ["BleBluetooth"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeBleBluetooth(BleBluetooth bleBluetooth) {        if (bleBluetooth == null) {            return;        }        if (bleLruHashMap.containsKey(bleBluetooth.getDeviceKey())) {            bleLruHashMap.remove(bleBluetooth.getDeviceKey());        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isContainDevice", "params": ["BleDevice"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "boolean", "snippet": "    public synchronized boolean isContainDevice(BleDevice bleDevice) {        return bleDevice != null && bleLruHashMap.containsKey(bleDevice.getKey());    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isContainDevice", "params": ["BluetoothDevice"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "boolean", "snippet": "    public synchronized boolean isContainDevice(BluetoothDevice bluetoothDevice) {        return bluetoothDevice != null && bleLruHashMap.containsKey(bluetoothDevice.getName() + bluetoothDevice.getAddress());    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBleBluetooth", "params": ["BleDevice"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "BleBluetooth", "snippet": "    public synchronized BleBluetooth getBleBluetooth(BleDevice bleDevice) {        if (bleDevice != null) {            if (bleLruHashMap.containsKey(bleDevice.getKey())) {                return bleLruHashMap.get(bleDevice.getKey());            }        }        return null;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnect", "params": ["BleDevice"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void disconnect(BleDevice bleDevice) {        if (isContainDevice(bleDevice)) {            getBleBluetooth(bleDevice).disconnect();        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnectAllDevice", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void disconnectAllDevice() {        for (Map.Entry<String, BleBluetooth> stringBleBluetoothEntry : bleLruHashMap.entrySet()) {            stringBleBluetoothEntry.getValue().disconnect();        }        bleLruHashMap.clear();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void destroy() {        for (Map.Entry<String, BleBluetooth> stringBleBluetoothEntry : bleLruHashMap.entrySet()) {            stringBleBluetoothEntry.getValue().destroy();        }        bleLruHashMap.clear();        for (Map.Entry<String, BleBluetooth> stringBleBluetoothEntry : bleTempHashMap.entrySet()) {            stringBleBluetoothEntry.getValue().destroy();        }        bleTempHashMap.clear();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBleBluetoothList", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "List<BleBluetooth>", "snippet": "    public synchronized List<BleBluetooth> getBleBluetoothList() {        List<BleBluetooth> bleBluetoothList = new ArrayList<>(bleLruHashMap.values());        Collections.sort(bleBluetoothList, new Comparator<BleBluetooth>() {            @Override            public int compare(BleBluetooth lhs, BleBluetooth rhs) {                return lhs.getDeviceKey().compareToIgnoreCase(rhs.getDeviceKey());            }        });        return bleBluetoothList;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeviceList", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "List<BleDevice>", "snippet": "    public synchronized List<BleDevice> getDeviceList() {        refreshConnectedDevice();        List<BleDevice> deviceList = new ArrayList<>();        for (BleBluetooth BleBluetooth : getBleBluetoothList()) {            if (BleBluetooth != null) {                deviceList.add(BleBluetooth.getDevice());            }        }        return deviceList;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "refreshConnectedDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void refreshConnectedDevice() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {            List<BleBluetooth> bluetoothList = getBleBluetoothList();            for (int i = 0; bluetoothList != null && i < bluetoothList.size(); i++) {                BleBluetooth bleBluetooth = bluetoothList.get(i);                if (!BleManager.getInstance().isConnected(bleBluetooth.getDevice())) {                    removeBleBluetooth(bleBluetooth);                }            }        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/MultipleBluetoothController.java", "stars": "2", "class": {"name": "MultipleBluetoothController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "Holder", "snippet": "    public Holder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view  = inflater.inflate(R.layout.fragment_event_row, parent, false);        return new Holder(view);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/status/EventsAdapter.java", "stars": "1", "class": {"name": "EventsAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["Holder", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NonNull Holder holder, int position) {        Event event = data.get(position);        holder.eventRowText.setText(event.message);        holder.eventRowTimestamp.setText(event.timestamp);        if (event.type == EventType.DEPLOY) {            holder.eventRowIcon.setImageResource(R.drawable.docker);        } else if (event.type == EventType.MACHINE) {            holder.eventRowIcon.setImageResource(R.drawable.machine);        } else {            holder.eventRowIcon.setImageResource(R.drawable.info);        }    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/status/EventsAdapter.java", "stars": "1", "class": {"name": "EventsAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return data.size();    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/status/EventsAdapter.java", "stars": "1", "class": {"name": "EventsAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getStartTime() {        return startTime;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/FightStatue.java", "stars": "2", "class": {"name": "FightStatue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartTime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartTime(String startTime) {        this.startTime = startTime;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/FightStatue.java", "stars": "2", "class": {"name": "FightStatue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLoop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLoop() {        return loop;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/FightStatue.java", "stars": "2", "class": {"name": "FightStatue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLoop", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoop(int loop) {        this.loop = loop;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/FightStatue.java", "stars": "2", "class": {"name": "FightStatue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSerial", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSerial() {        return serial;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/FightStatue.java", "stars": "2", "class": {"name": "FightStatue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSerial", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSerial(int serial) {        this.serial = serial;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/FightStatue.java", "stars": "2", "class": {"name": "FightStatue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRemnant", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getRemnant() {        return Remnant;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/FightStatue.java", "stars": "2", "class": {"name": "FightStatue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRemnant", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRemnant(int remnant) {        Remnant = remnant;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/FightStatue.java", "stars": "2", "class": {"name": "FightStatue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onNavigationItemReselected", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onNavigationItemReselected (android.view.MenuItem p0)\t{\t\tn_onNavigationItemReselected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/BottomNavigationView_OnNavigationItemReselectedListenerImplementor.java", "stars": "2", "class": {"name": "BottomNavigationView_OnNavigationItemReselectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onNavigationItemReselected", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onNavigationItemReselected (android.view.MenuItem p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/BottomNavigationView_OnNavigationItemReselectedListenerImplementor.java", "stars": "2", "class": {"name": "BottomNavigationView_OnNavigationItemReselectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/BottomNavigationView_OnNavigationItemReselectedListenerImplementor.java", "stars": "2", "class": {"name": "BottomNavigationView_OnNavigationItemReselectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/BottomNavigationView_OnNavigationItemReselectedListenerImplementor.java", "stars": "2", "class": {"name": "BottomNavigationView_OnNavigationItemReselectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onPlayerDamageBlock", "params": ["BlockPos", "EnumFacing", "CallbackInfoReturnable<Boolean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onPlayerDamageBlock(BlockPos posBlock, EnumFacing directionFacing, CallbackInfoReturnable<Boolean> cir) {        DamageBlockEvent event = new DamageBlockEvent(posBlock, directionFacing);        Mercury.INSTANCE.getEventManager().fireEvent(event);        if (event.isCancelled()) {            cir.setReturnValue(false);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinPlayerControllerMP.java", "stars": "12", "class": {"name": "MixinPlayerControllerMP", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_list);        listView = (ListView) findViewById(R.id.listView);        if (\"pcm\".equals(getIntent().getStringExtra(\"type\"))) {            list = FileUtil.getPcmFiles();        } else {            list = FileUtil.getWavFiles();        }        adapter = new FileListAdapter(this, list);        listView.setAdapter(adapter);    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/app/src/main/java/com/dreamfish/audiorecord/ListActivity.java", "stars": "2", "class": {"name": "ListActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": ["Tabela"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void salvar(Tabela tabela) {        tabelaDao.salvar(tabela);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/TabelaServiceImpl.java", "stars": "2", "class": {"name": "TabelaServiceImpl", "extends": null, "implements": ["TabelaService"], "modifiers": ["public"]}}, {"method_name": "recuperar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Tabela>", "snippet": "    public List<Tabela> recuperar() {        return tabelaDao.recuperar();    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/TabelaServiceImpl.java", "stars": "2", "class": {"name": "TabelaServiceImpl", "extends": null, "implements": ["TabelaService"], "modifiers": ["public"]}}, {"method_name": "recuperarPorId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Tabela", "snippet": "    public Tabela recuperarPorId(Integer id) {        return tabelaDao.recuperarPorId(id);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/TabelaServiceImpl.java", "stars": "2", "class": {"name": "TabelaServiceImpl", "extends": null, "implements": ["TabelaService"], "modifiers": ["public"]}}, {"method_name": "atualizar", "params": ["Tabela"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void atualizar(Tabela tabela) {        tabelaDao.atualizar(tabela);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/TabelaServiceImpl.java", "stars": "2", "class": {"name": "TabelaServiceImpl", "extends": null, "implements": ["TabelaService"], "modifiers": ["public"]}}, {"method_name": "excluir", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void excluir(Integer id) {        tabelaDao.excluir(id);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/TabelaServiceImpl.java", "stars": "2", "class": {"name": "TabelaServiceImpl", "extends": null, "implements": ["TabelaService"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getName() {            return mName;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginData", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "getSex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getSex() {            return mSex;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginData", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "getAvatar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getAvatar() {            return mAvatar;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginData", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getId() {            return mId;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginData", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "getToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getToken() {            return mToken;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginData", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "isMan", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isMan() {            return \"\u7537\".equals(mSex);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginData", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "onStart", "params": ["SHARE_MEDIA"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onStart(SHARE_MEDIA platform) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginListenerWrapper", "extends": "SoftReference", "implements": ["UMAuthListener"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onComplete", "params": ["SHARE_MEDIA", "int", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onComplete(SHARE_MEDIA platform, int action, Map<String, String> data) {            if (get() != null) {                get().onSucceed(mPlatform, new LoginData(data));            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginListenerWrapper", "extends": "SoftReference", "implements": ["UMAuthListener"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onError", "params": ["SHARE_MEDIA", "int", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onError(SHARE_MEDIA platform, int action, Throwable t) {            if (get() != null) {                get().onError(mPlatform, t);            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginListenerWrapper", "extends": "SoftReference", "implements": ["UMAuthListener"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onCancel", "params": ["SHARE_MEDIA", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onCancel(SHARE_MEDIA platform, int action) {            if (get() != null) {                get().onCancel(mPlatform);            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengLogin.java", "stars": "1", "class": {"name": "LoginListenerWrapper", "extends": "SoftReference", "implements": ["UMAuthListener"], "modifiers": ["public", "final", "static"]}}, {"method_name": "FileWrite", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void FileWrite(String filePath, String fileStr){    FileWriter fw = null;    try {      fw = new FileWriter(filePath);      //\u5199\u5165\u5230\u6587\u4ef6      fw.write(fileStr);    } catch (Exception e) {      utilLogger.error(\"\u5199\u5165\u811a\u672c\u6587\u4ef6\u5f02\u5e38\uff01\", e);      e.printStackTrace();    }finally {      if(fw != null){        try {          fw.close();        } catch (IOException e) {          e.printStackTrace();        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadAllPropertiesFile", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "  private List<String> loadAllPropertiesFile(String workingDir){    List<String> propPathList = new ArrayList<>();    findPropPath(workingDir, propPathList);    return propPathList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findPropPath", "params": ["String", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void findPropPath(String dirPath, List<String> filePathList){    File f = new File(dirPath);    if (!f.exists()) {      System.out.println(dirPath + \" not exists\");    }    File fa[] = f.listFiles();    for (int i = 0; i < fa.length; i++) {      File fs = fa[i];      if (fs.isDirectory()) {        findPropPath(fs.getPath(), filePathList);      } else {        if(fs.getName().endsWith(\".properties\")){          filePathList.add(fs.getPath().toString());        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadAllScriptFile", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "  private List<String> loadAllScriptFile(String workingDir){    List<String> scriptPathList = new ArrayList<>();    findScriptFilePath(workingDir, scriptPathList);    return scriptPathList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findScriptFilePath", "params": ["String", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void findScriptFilePath(String dirPath, List<String> filePathList){    File f = new File(dirPath);    if (!f.exists()) {      //System.out.println(dirPath + \" not exists\");      utilLogger.error(\"\u6587\u4ef6\u5730\u5740: \" + dirPath + \"\u4e0d\u5b58\u5728\uff01\");    }    File fa[] = f.listFiles();    for (int i = 0; i < fa.length; i++) {      File fs = fa[i];      if (fs.isDirectory()) {        findScriptFilePath(fs.getPath(), filePathList);      } else {        if(fs.getName().endsWith(\".py\") || fs.getName().endsWith(\".sh\")            || fs.getName().endsWith(\".sql\") || fs.getName().endsWith(\".hql\")){          filePathList.add(fs.getPath().toString());        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readProperties", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "  private Map<String, String> readProperties(String propPath){    Map<String, String> propMap = new HashMap<>();    Properties prop = new Properties();    InputStream input = null;    try {      input = new FileInputStream(propPath);      // load a properties file      prop.load(input);      if(!prop.isEmpty()){        for (Map.Entry<Object, Object> entry : prop.entrySet()) {          String key = String.valueOf(entry.getKey());          String value = String.valueOf(entry.getValue());          propMap.put(key, value);        }      }    } catch (Exception ex) {      utilLogger.error(\"\u8bfb\u53d6properties\u914d\u7f6e\u6587\u4ef6\u5f02\u5e38\uff01\", ex);      ex.printStackTrace();    } finally {      if (input != null) {        try {          input.close();        } catch (IOException e) {          e.printStackTrace();        }      }    }    return propMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readFile", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String readFile(String filePath)  {    StringBuilder sb = new StringBuilder();    BufferedReader br = null;    try {      File file = new File(filePath);      br = new BufferedReader(new FileReader(file));      char[] data = new char[1024];      int rn = 0;      String line = \"\";      while ((rn = br.read(data)) > 0){        String st = String.valueOf(data, 0, rn);        sb.append(st);      }      String fileStr = sb.toString();      //System.out.println(fileStr);      return fileStr;    } catch (Exception e) {      utilLogger.error(\"\u8bfb\u53d6\u811a\u672c\u6587\u4ef6\u5f02\u5e38\uff01\", e);      e.printStackTrace();    } finally {      if(br != null){        try {          br.close();        } catch (IOException e) {          e.printStackTrace();        }      }    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "paramDecompose", "params": ["String", "ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "  private Map<String, String> paramDecompose(String fileStr, ExecutableFlow ef){    Map<String, String> paramReplaceMap = new HashMap<>();    Pattern pattern = Pattern.compile(\"\\\\$\\\\{([^\\\\}]+)\\\\}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scriptTimeHandle", "params": ["String", "long"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String scriptTimeHandle(String param, long runDate) {    //\u65f6\u95f4\u5b57\u7b26\u4e32    String timeStr = \"\";    Date date = new Date(runDate);    Instant instant = date.toInstant();    ZoneId zoneId = ZoneId.systemDefault();    // atZone()\u65b9\u6cd5\u8fd4\u56de\u5728\u6307\u5b9a\u65f6\u533a\u4ece\u6b64Instant\u751f\u6210\u7684ZonedDateTime\u3002    LocalDate localDate = instant.atZone(zoneId).toLocalDate().minusDays(1);    //LocalDate localDate = LocalDate.now().minusDays(1);    param = param.replaceAll(\"\\\\s*\", \"\");    if (RUN_DATE.equals(param)) {      timeStr = localDate.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));    } else if (RUN_DATE_STD.equals(param)) {      timeStr = localDate.toString();    } else if (param.contains(RUN_DATE) && !param.contains(RUN_DATE_STD)) {      String mathStr = StringUtils.substringAfter(param, RUN_DATE);      String[] sAry = {};      if (MINUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"-\");        timeStr = localDate.minusDays(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      } else if (PLUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.plusDays(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      }    } else if (param.contains(RUN_DATE) && param.contains(RUN_DATE_STD)) {      String mathStr = StringUtils.substringAfter(param, RUN_DATE_STD);      String[] sAry = {};      if (MINUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"-\");        timeStr = localDate.minusDays(Long.valueOf(sAry[1])).toString();      } else if (PLUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.plusDays(Long.valueOf(sAry[1])).toString();      }    }    if (RUN_MONTH_BEGIN.equals(param)) {      timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())          .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));    } else if (RUN_MONTH_BEGIN_STD.equals(param)) {      timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth()).toString();    } else if (param.contains(RUN_MONTH_BEGIN) && !param.contains(RUN_MONTH_BEGIN_STD)) {      String mathStr = StringUtils.substringAfter(param, RUN_MONTH_BEGIN);      String[] sAry = {};      if (MINUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"-\");        timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())            .minusMonths(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      } else if (PLUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())            .plusMonths(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      }    } else if (param.contains(RUN_MONTH_BEGIN) && param.contains(RUN_MONTH_BEGIN_STD)) {      String mathStr = StringUtils.substringAfter(param, RUN_MONTH_BEGIN_STD);      String[] sAry = {};      if (MINUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"-\");        timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())            .minusMonths(Long.valueOf(sAry[1])).toString();      } else if (PLUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())            .plusMonths(Long.valueOf(sAry[1])).toString();      }    }    return timeStr;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scriptTimeHandleOther", "params": ["String", "long"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String scriptTimeHandleOther(String param, long runDate){    //\u65f6\u95f4\u5b57\u7b26\u4e32    String timeStr = \"\";    Date date = new Date(runDate);    Instant instant = date.toInstant();    ZoneId zoneId = ZoneId.systemDefault();    // atZone()\u65b9\u6cd5\u8fd4\u56de\u5728\u6307\u5b9a\u65f6\u533a\u4ece\u6b64Instant\u751f\u6210\u7684ZonedDateTime\u3002    LocalDate localDate = instant.atZone(zoneId).toLocalDate().minusDays(1);    //LocalDate localDate = LocalDate.now().minusDays(1);    param = param.replaceAll(\"\\\\s*\", \"\");    if(RUN_DATE.equals(param)){      timeStr = localDate.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));    }else if(RUN_DATE_STD.equals(param)){      timeStr = localDate.toString();    }else if(param.contains(RUN_DATE) && !param.contains(RUN_DATE_STD)){      String mathStr = StringUtils.substringAfter(param, RUN_DATE);      String[] sAry = {};      if(MINUS.equals(paramVerify(mathStr, param))){        sAry = mathStr.split(\"-\");        timeStr = localDate.minusDays(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      }else if(PLUS.equals(paramVerify(mathStr, param))){        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.plusDays(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      }    }else if(param.contains(RUN_DATE) && param.contains(RUN_DATE_STD)){      String mathStr = StringUtils.substringAfter(param, RUN_DATE_STD);      String[] sAry = {};      if(MINUS.equals(paramVerify(mathStr, param))){        sAry = mathStr.split(\"-\");        timeStr = localDate.minusDays(Long.valueOf(sAry[1])).toString();      }else if(PLUS.equals(paramVerify(mathStr, param))){        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.plusDays(Long.valueOf(sAry[1])).toString();      }    }    if(RUN_MONTH_BEGIN.equals(param)){      timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())          .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));    }else if(RUN_MONTH_BEGIN_STD.equals(param)){      timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth()).toString();    }else if(param.contains(RUN_MONTH_BEGIN) && !param.contains(RUN_MONTH_BEGIN_STD)){      String mathStr = StringUtils.substringAfter(param, RUN_MONTH_BEGIN);      String[] sAry = {};      if(MINUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"-\");        timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())            .minusMonths(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      } else if(PLUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())            .plusMonths(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      }    }else if(param.contains(RUN_MONTH_BEGIN) && param.contains(RUN_MONTH_BEGIN_STD)){      String mathStr = StringUtils.substringAfter(param, RUN_MONTH_BEGIN_STD);      String[] sAry = {};      if(MINUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"-\");        timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())            .minusMonths(Long.valueOf(sAry[1])).toString();      } else if(PLUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.with(TemporalAdjusters.firstDayOfMonth())            .plusMonths(Long.valueOf(sAry[1])).toString();      }    }    if(RUN_MONTH_END.equals(param)){      timeStr = localDate.withDayOfMonth(localDate.lengthOfMonth())          .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));    }else if(RUN_MONTH_END_STD.equals(param)){      timeStr = localDate.withDayOfMonth(localDate.lengthOfMonth()).toString();    }else if(param.contains(RUN_MONTH_END) && !param.contains(RUN_MONTH_END_STD)){      String mathStr = StringUtils.substringAfter(param, RUN_MONTH_END);      String[] sAry = {};      if(MINUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"-\");        timeStr = localDate.withDayOfMonth(localDate.lengthOfMonth())            .minusMonths(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      } else if(PLUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.withDayOfMonth(localDate.lengthOfMonth())            .plusMonths(Long.valueOf(sAry[1]))            .format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));      }    }else if(param.contains(RUN_MONTH_END) && param.contains(RUN_MONTH_END_STD)){      String mathStr = StringUtils.substringAfter(param, RUN_MONTH_END_STD);      String[] sAry = {};      if(MINUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"-\");        timeStr = localDate.withDayOfMonth(localDate.lengthOfMonth())            .minusMonths(Long.valueOf(sAry[1])).toString();      } else if(PLUS.equals(paramVerify(mathStr, param))) {        sAry = mathStr.split(\"\\\\+\");        timeStr = localDate.withDayOfMonth(localDate.lengthOfMonth()                                                                                   )            .plusMonths(Long.valueOf(sAry[1])).toString();      }    }    return timeStr;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filterUserParam", "params": ["Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void filterUserParam(Map<String, String> systemParam){    Map<String, String> handleMap = new HashMap<>();    handleMap.putAll(systemParam);    for(String userKey : getPropMap().keySet()){      for(String systemKey : handleMap.keySet()){        if(systemKey.contains(userKey) && !userKey.contains(\"_std\")            && !systemKey.contains(userKey + \"_std\")){          systemParam.remove(systemKey);        }        if(systemKey.contains(userKey) && userKey.contains(\"_std\")){          systemParam.remove(systemKey);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["String", "ExecutableFlow"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void run(String workingDir, ExecutableFlow ef){    SystemBuiltInParamUtils df = new SystemBuiltInParamUtils();    //\u7528\u6237propertie\u6587\u4ef6\u8def\u5f84\u96c6\u5408    List<String> propPathList = df.loadAllPropertiesFile(workingDir);    //\u83b7\u53d6\u7528\u6237\u6240\u6709\u914d\u7f6e\u6587\u4ef6\u53c2\u6570    for(String filePath : propPathList){      df.getPropMap().putAll(df.readProperties(filePath));    }    //\u6240\u6709\u811a\u672c\u7684\u6587\u4ef6\u5730\u5740    List<String> scriptPathList = df.loadAllScriptFile(workingDir);    //\u5faa\u73af\u811a\u672c\u6587\u4ef6\u5730\u5740    for(String filePath : scriptPathList){      //\u8bfb\u53d6\u5355\u4e2a\u811a\u672c\u6587\u4ef6\u7684\u5185\u5bb9      String fileStr = df.readFile(filePath);      System.out.println(\"===============Start===============\");      //\u83b7\u53d6\u5355\u4e2a\u811a\u672c\u4e2d\u9700\u8981\u66ff\u6362\u7684\u53c2\u6570      Map<String, String> scriptMap = df.paramDecompose(fileStr, ef);      //\u5982\u679c\u7528\u6237\u6ca1\u6709\u914d\u7f6erun_date\u6216\u8005run_date_std\u53c2\u6570 \u5c31\u4f7f\u7528\u7cfb\u7edf\u5185\u7f6e\u53d8\u91cf      //\u5e76\u628a\u7528\u6237\u4ee5\u5916\u7684\u914d\u7f6e\u53bb\u9664      if(StringUtils.isEmpty(df.getPropMap().get(df.RUN_DATE))          && StringUtils.isEmpty(df.getPropMap().get(df.RUN_DATE_STD))){        //\u8fc7\u6ee4\u7528\u6237\u8bbe\u7f6e\u7684\u53c2\u6570        df.filterUserParam(scriptMap);        //\u5faa\u73af\u66ff\u6362\u811a\u672c\u4e2d\u5bf9\u5e94\u7684\u53c2\u6570\u5185\u5bb9        for(String timeStr : scriptMap.keySet()){          fileStr = StringUtils.replace(fileStr, timeStr, scriptMap.get(timeStr));        }      }      System.out.println(\"===============End================\");      //\u5c06\u66ff\u6362\u540e\u7684\u5185\u5bb9\u91cd\u65b0\u5199\u5165\u5230\u811a\u672c\u6587\u4ef6\u4e2d      df.FileWrite(filePath, fileStr);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) {    LocalDate localDate = LocalDate.now().minusDays(1);    String timeStr = localDate.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));    System.out.println(localDate.toString());    System.out.println(timeStr);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPropMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getPropMap() {    return propMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPropMap", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPropMap(Map<String, String> propMap) {    this.propMap = propMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addPropMap", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addPropMap(String key, String value) {    this.propMap.put(key, value);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "paramVerify", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String paramVerify(String param, String fullParam){    int minusSite = param.indexOf(\"-\");    int plusSite = param.indexOf(\"+\");    String symbol = \"\";    String[] sAry = null;    if((plusSite > minusSite && minusSite != -1) || plusSite == -1){      sAry = param.split(\"-\");      symbol = MINUS;    } else if ((minusSite > plusSite && plusSite != -1) || minusSite == -1){      sAry = param.split(\"\\\\+\");      symbol = PLUS;    }    if(sAry.length > 1 && sAry.length == 2){      String start = sAry[0];      if(StringUtils.isNotEmpty(start)){        utilLogger.error(\"\u811a\u672c\u66ff\u6362\u53c2\u6570\u9002\u914d\u5f02\u5e38\uff01\u8bf7\u68c0\u67e5\u811a\u672c\uff01\");        throw new RuntimeException(\"The script parameter ${\" + fullParam + \"} exception!Please check the script!\");      }      String str = sAry[1];      Pattern pattern = Pattern.compile(\"[0-9]*\");      if(!pattern.matcher(str).matches()){        utilLogger.error(\"\u811a\u672c\u66ff\u6362\u53c2\u6570\u9002\u914d\u5f02\u5e38\uff01\u8bf7\u68c0\u67e5\u811a\u672c\uff01\");        throw new RuntimeException(\"The script parameter ${\" + fullParam + \"} exception!Please check the script!\");      }    }else if(sAry.length > 2){//\u591a\u4e2a\u8fd0\u7b97\u7b26\u53f7\u5c31\u62a5\u5f02\u5e38      utilLogger.error(\"\u811a\u672c\u66ff\u6362\u53c2\u6570\u9002\u914d\u5f02\u5e38\uff01\u8bf7\u68c0\u67e5\u811a\u672c\uff01\");      throw new RuntimeException(\"The script parameter ${\" + fullParam + \"} exception!Please check the script!\");    }else if(sAry.length <= 1){//\u591a\u4e2a\u8fd0\u7b97\u7b26\u53f7\u5c31\u62a5\u5f02\u5e38      utilLogger.error(\"\u811a\u672c\u66ff\u6362\u53c2\u6570\u9002\u914d\u5f02\u5e38\uff01\u8bf7\u68c0\u67e5\u811a\u672c\uff01\");      throw new RuntimeException(\"The script parameter ${\" + fullParam + \"} exception!Please check the script!\");    }    return symbol;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/jobExecutor/utils/SystemBuiltInParamUtils.java", "stars": "18", "class": {"name": "SystemBuiltInParamUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseAll", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void releaseAll();    public void setSurfaceView(GLSurfaceView surfaceView) {        this.mSurfaceView = surfaceView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSurfaceView", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSurfaceView(GLSurfaceView surfaceView) {        this.mSurfaceView = surfaceView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "sendSurfaceForPlayer", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendSurfaceForPlayer(final Surface surface) {        mHandler.post(new Runnable() {            @Override            public void run() {                if (mGSYSurfaceListener != null) {                    mGSYSurfaceListener.onSurfaceAvailable(surface);                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "loadShader", "params": ["int", "String"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int loadShader(int shaderType, String source) {        int shader = GLES20.glCreateShader(shaderType);        if (shader != 0) {            GLES20.glShaderSource(shader, source);            GLES20.glCompileShader(shader);            int[] compiled = new int[1];            GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS,                    compiled, 0);            if (compiled[0] == 0) {                Debuger.printfError(\"Could not compile shader \" + shaderType + \":\");                Debuger.printfError(GLES20.glGetShaderInfoLog(shader));                GLES20.glDeleteShader(shader);                shader = 0;            }        }        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "createProgram", "params": ["String", "String"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int createProgram(String vertexSource, String fragmentSource) {        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexSource);        if (vertexShader == 0) {            return 0;        }        int pixelShader = loadShader(GLES20.GL_FRAGMENT_SHADER,                fragmentSource);        if (pixelShader == 0) {            return 0;        }        int program = GLES20.glCreateProgram();        if (program != 0) {            GLES20.glAttachShader(program, vertexShader);            checkGlError(\"glAttachShader\");            GLES20.glAttachShader(program, pixelShader);            checkGlError(\"glAttachShader\");            GLES20.glLinkProgram(program);            int[] linkStatus = new int[1];            GLES20.glGetProgramiv(program, GLES20.GL_LINK_STATUS,                    linkStatus, 0);            if (linkStatus[0] != GLES20.GL_TRUE) {                Debuger.printfError(\"Could not link program: \");                Debuger.printfError(GLES20.glGetProgramInfoLog(program));                GLES20.glDeleteProgram(program);                program = 0;            }        }        return program;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "checkGlError", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void checkGlError(final String op) {        final int error;        if ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {            Debuger.printfError(op + \": glError \" + error);            mHandler.post(new Runnable() {                @Override                public void run() {                    if (mGSYVideoGLRenderErrorListener != null) {                        mGSYVideoGLRenderErrorListener.onError(GSYVideoGLViewBaseRender.this, op + \": glError \" + error, error, mChangeProgramSupportError);                    }                    mChangeProgramSupportError = false;                }            });            //throw new RuntimeException(op + \": glError \" + error);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "createBitmapFromGLSurface", "params": ["int", "int", "int", "int", "GL10"], "throws": null, "modifiers": ["protected"], "return_type": "Bitmap", "snippet": "    protected Bitmap createBitmapFromGLSurface(int x, int y, int w, int h, GL10 gl) {        int bitmapBuffer[] = new int[w * h];        int bitmapSource[] = new int[w * h];        IntBuffer intBuffer = IntBuffer.wrap(bitmapBuffer);        intBuffer.position(0);        try {            gl.glReadPixels(x, y, w, h, GL10.GL_RGBA, GL10.                            GL_UNSIGNED_BYTE,                    intBuffer);            int offset1, offset2;            for (int i = 0; i < h; i++) {                offset1 = i * w;                offset2 = (h - i - 1) * w;                for (int j = 0; j < w; j++) {                    int texturePixel = bitmapBuffer[offset1 + j];                    int blue = (texturePixel >> 16) & 0xff;                    int red = (texturePixel << 16) & 0x00ff0000;                    int pixel = (texturePixel & 0xff00ff00) | red | blue;                    bitmapSource[offset2 + j] = pixel;                }            }        } catch (GLException e) {            return null;        }        if (mHighShot) {            return Bitmap.createBitmap(bitmapSource, w, h, Bitmap.Config.ARGB_8888);        } else {            return Bitmap.createBitmap(bitmapSource, w, h, Bitmap.Config.RGB_565);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setGSYSurfaceListener", "params": ["GLSurfaceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGSYSurfaceListener(GLSurfaceListener onSurfaceListener) {        this.mGSYSurfaceListener = onSurfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "getMVPMatrix", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float[] getMVPMatrix() {        return mMVPMatrix;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setMVPMatrix", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMVPMatrix(float[] MVPMatrix) {        this.mMVPMatrix = MVPMatrix;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "takeShotPic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void takeShotPic() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setGSYVideoShotListener", "params": ["GSYVideoShotListener", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGSYVideoShotListener(GSYVideoShotListener listener, boolean high) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setEffect", "params": ["GSYVideoGLView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEffect(GSYVideoGLView.ShaderInterface shaderEffect) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "getEffect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoGLView", "snippet": "    public GSYVideoGLView.ShaderInterface getEffect() {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentViewWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentViewWidth() {        return mCurrentViewWidth;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setCurrentViewWidth", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentViewWidth(int currentViewWidth) {        this.mCurrentViewWidth = currentViewWidth;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentViewHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentViewHeight() {        return mCurrentViewHeight;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setCurrentViewHeight", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentViewHeight(int currentViewHeight) {        this.mCurrentViewHeight = currentViewHeight;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoWidth() {        return mCurrentVideoWidth;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setCurrentVideoWidth", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentVideoWidth(int currentVideoWidth) {        this.mCurrentVideoWidth = currentVideoWidth;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoHeight() {        return mCurrentVideoHeight;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setCurrentVideoHeight", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentVideoHeight(int currentVideoHeight) {        this.mCurrentVideoHeight = currentVideoHeight;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "initRenderSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initRenderSize() {        if (mCurrentViewWidth != 0 && mCurrentViewHeight != 0) {            Matrix.scaleM(mMVPMatrix, 0, (float) mCurrentViewWidth / mSurfaceView.getWidth(),                    (float) mCurrentViewHeight / mSurfaceView.getHeight(), 1);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "setGSYVideoGLRenderErrorListener", "params": ["GSYVideoGLRenderErrorListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGSYVideoGLRenderErrorListener(GSYVideoGLRenderErrorListener videoGLRenderErrorListener) {        this.mGSYVideoGLRenderErrorListener = videoGLRenderErrorListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewBaseRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewBaseRender", "extends": null, "implements": ["GLSurfaceView", "SurfaceTexture"], "modifiers": ["public", "abstract"]}}, {"method_name": "parseCommand", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "LibraryCommand", "snippet": "    public LibraryCommand parseCommand(String inputLine) {        Objects.requireNonNull(inputLine, \"Given input must not be null.\");        // split command keyword from arguments        int firstSpaceIdx = inputLine.indexOf(COMMAND_ARGUMENT_DELIMITER);        String commandInput, argumentInput;        if (firstSpaceIdx == -1) {            commandInput = inputLine.strip();            argumentInput = \"\";        } else {            commandInput = inputLine.substring(0, firstSpaceIdx);            argumentInput = inputLine.substring(firstSpaceIdx + 1);        }        return setupCommand(commandInput, argumentInput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/CommandInterpreter.java", "stars": "6", "class": {"name": "CommandInterpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeCommand", "params": ["LibraryCommand", "LibraryData"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void executeCommand(LibraryCommand command, LibraryData data) {        Objects.requireNonNull(command, \"Given command must not be null.\");        Objects.requireNonNull(data, \"Given data must not be null.\");        command.execute(data);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/CommandInterpreter.java", "stars": "6", "class": {"name": "CommandInterpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setupCommand", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "LibraryCommand", "snippet": "    private LibraryCommand setupCommand(String commandInput, String argumentInput) {        CommandType cmdType = parseCommandType(commandInput);        LibraryCommand command = null;        if (cmdType != null) {            command = CommandFactory.createCommand(cmdType, argumentInput);        }        return command;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/CommandInterpreter.java", "stars": "6", "class": {"name": "CommandInterpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseCommandType", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "CommandType", "snippet": "    private CommandType parseCommandType(String cmd) {        for (CommandType type : CommandType.values()) {            if (type.name().equals(cmd)) {                return type;            }        }        return null;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/CommandInterpreter.java", "stars": "6", "class": {"name": "CommandInterpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGroupId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getGroupId() {        return groupId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGroupId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGroupId(Integer groupId) {        this.groupId = groupId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDpId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getDpId() {        return dpId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDpId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDpId(Long dpId) {        this.dpId = dpId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDpName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDpName() {        return dpName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDpName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDpName(String dpName) {        this.dpName = dpName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDpChName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDpChName() {        return dpChName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDpChName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDpChName(String dpChName) {        this.dpChName = dpChName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrgId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getOrgId() {        return orgId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrgId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrgId(Long orgId) {        this.orgId = orgId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrgName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrgName() {        return orgName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrgName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrgName(String orgName) {        this.orgName = orgName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDivision", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDivision() {        return division;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDivision", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDivision(String division) {        this.division = division;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getPid() {        return pid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPid", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPid(Long pid) {        this.pid = pid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepartmentGroup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DepartmentGroup", "snippet": "    public DepartmentGroup getDepartmentGroup() {        return departmentGroup;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDepartmentGroup", "params": ["DepartmentGroup"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDepartmentGroup(DepartmentGroup departmentGroup) {        this.departmentGroup = departmentGroup;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUploadFlag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getUploadFlag() {        return uploadFlag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUploadFlag", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUploadFlag(Integer uploadFlag) {        this.uploadFlag = uploadFlag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"WebankDepartment{\" +                \"dpId=\" + dpId +                \", dpName='\" + dpName + '\\'' +                \", dpChName='\" + dpChName + '\\'' +                \", orgId=\" + orgId +                \", orgName='\" + orgName + '\\'' +                \", division='\" + division + '\\'' +                \", uploadFlag='\" + uploadFlag + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankDepartment.java", "stars": "18", "class": {"name": "WebankDepartment", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/ThatchStairsBlock.java", "stars": "2", "class": {"name": "ThatchStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/ThatchStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "link", "params": ["MethodHandles", "Operation", "MethodType"], "throws": null, "modifiers": ["public", "static"], "return_type": "CallSite", "snippet": "    public static CallSite link(MethodHandles.Lookup lookup, Operation operation, MethodType methodType) {        return DYNAMIC_LINKER.link(                new SimpleRelinkableCallSite(                        new CallSiteDescriptor(lookup, operation, methodType)));    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/ValueLinker.java", "stars": "5", "class": {"name": "ValueLinker", "extends": null, "implements": ["TypeBasedGuardingDynamicLinker"], "modifiers": ["public", "final"]}}, {"method_name": "canLinkType", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canLinkType(Class<?> aClass) {        return Value.class.isAssignableFrom(aClass);    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/ValueLinker.java", "stars": "5", "class": {"name": "ValueLinker", "extends": null, "implements": ["TypeBasedGuardingDynamicLinker"], "modifiers": ["public", "final"]}}, {"method_name": "getGuardedInvocation", "params": ["LinkRequest", "LinkerServices"], "throws": ["NoSuchFieldException", "IllegalAccessException"], "modifiers": ["public"], "return_type": "GuardedInvocation", "snippet": "    public GuardedInvocation getGuardedInvocation(LinkRequest linkRequest, LinkerServices linkerServices) throws NoSuchFieldException, IllegalAccessException {        // fixme... do stuff for other values?        var receiver = (FunValue<?>) linkRequest.getReceiver();        return receiver.getGuardedInvocation(linkRequest, linkerServices);    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/ValueLinker.java", "stars": "5", "class": {"name": "ValueLinker", "extends": null, "implements": ["TypeBasedGuardingDynamicLinker"], "modifiers": ["public", "final"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        MockitoAnnotations.initMocks(this);        doNothing().when(mockMailService).sendActivationEmail(any());        AccountController accountController =            new AccountController(userRepository, userService, mockMailService);        AccountController accountUserMockResource =            new AccountController(userRepository, mockUserService, mockMailService);        this.restMvc = MockMvcBuilders.standaloneSetup(accountController)            .setMessageConverters(httpMessageConverters)            .setControllerAdvice(exceptionTranslator)            .build();        this.restUserMockMvc = MockMvcBuilders.standaloneSetup(accountUserMockResource)            .setControllerAdvice(exceptionTranslator)            .build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testNonAuthenticatedUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testNonAuthenticatedUser() throws Exception {        restUserMockMvc.perform(get(\"/api/v1/authenticate\")            .accept(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().string(\"\"));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testAuthenticatedUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testAuthenticatedUser() throws Exception {        restUserMockMvc.perform(get(\"/api/v1/authenticate\")            .with(request -> {                request.setRemoteUser(\"test\");                return request;            })            .accept(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().string(\"test\"));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetExistingAccount", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetExistingAccount() throws Exception {        Set<Authority> authorities = new HashSet<>();        Authority authority = new Authority();        authority.setName(AuthoritiesConstants.ADMIN);        authorities.add(authority);        User user = new User();        user.setLogin(\"test\");        user.setFirstName(\"john\");        user.setLastName(\"doe\");        user.setEmail(\"john.doe@jhipster.com\");        user.setBirthDate(LocalDate.of(1990, 1, 2));        user.setTel(\"067761244368\");        user.setLangKey(\"en\");        user.setAuthorities(authorities);        user.setBankAccountIBAN(DEFAULT_IBAN);        when(mockUserService.getUserWithAuthorities()).thenReturn(Optional.of(user));        restUserMockMvc.perform(get(\"/api/v1/account\")            .accept(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.login\").value(\"test\"))            .andExpect(jsonPath(\"$.firstName\").value(\"john\"))            .andExpect(jsonPath(\"$.lastName\").value(\"doe\"))            .andExpect(jsonPath(\"$.email\").value(\"john.doe@jhipster.com\"))            .andExpect(jsonPath(\"$.langKey\").value(\"en\"))            .andExpect(jsonPath(\"$.authorities\").value(AuthoritiesConstants.ADMIN));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetUnknownAccount", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetUnknownAccount() throws Exception {        when(mockUserService.getUserWithAuthorities()).thenReturn(Optional.empty());        restUserMockMvc.perform(get(\"/api/v1/account\")            .accept(MediaType.APPLICATION_PROBLEM_JSON))            .andExpect(status().isNotFound());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterValid", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterValid() throws Exception {        ManagedUserVM validUser = new ManagedUserVM();        validUser.setLogin(\"test-register-valid\");        validUser.setPassword(\"password\");        validUser.setFirstName(\"Alice\");        validUser.setLastName(\"Test\");        validUser.setEmail(\"test-register-valid@example.com\");        validUser.setBirthDate(LocalDate.of(1990, 1, 2));        validUser.setTel(\"067761244368\");        validUser.setLangKey(Constants.DEFAULT_LANGUAGE);        validUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        validUser.setBankAccountIBAN(DEFAULT_IBAN);        assertThat(userRepository.findOneByLogin(\"test-register-valid\").isPresent()).isFalse();        restMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(validUser)))            .andExpect(status().isCreated());        assertThat(userRepository.findOneByLogin(\"test-register-valid\").isPresent()).isTrue();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterInvalidLogin", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterInvalidLogin() throws Exception {        ManagedUserVM invalidUser = new ManagedUserVM();        invalidUser.setLogin(\"funky-log!n\");// <-- invalid        invalidUser.setPassword(\"password\");        invalidUser.setFirstName(\"Funky\");        invalidUser.setLastName(\"One\");        invalidUser.setEmail(\"funky@example.com\");        invalidUser.setActivated(true);        invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);        invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        invalidUser.setBankAccountIBAN(DEFAULT_IBAN);        restUserMockMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(invalidUser)))            .andExpect(status().isBadRequest());        Optional<User> user = userRepository.findOneByEmailIgnoreCase(\"funky@example.com\");        assertThat(user.isPresent()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterInvalidEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterInvalidEmail() throws Exception {        ManagedUserVM invalidUser = new ManagedUserVM();        invalidUser.setLogin(\"bob\");        invalidUser.setPassword(\"password\");        invalidUser.setFirstName(\"Bob\");        invalidUser.setLastName(\"Green\");        invalidUser.setEmail(\"invalid\");// <-- invalid        invalidUser.setActivated(true);        invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);        invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        invalidUser.setBankAccountIBAN(DEFAULT_IBAN);        restUserMockMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(invalidUser)))            .andExpect(status().isBadRequest());        Optional<User> user = userRepository.findOneByLogin(\"bob\");        assertThat(user.isPresent()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterInvalidPassword", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterInvalidPassword() throws Exception {        ManagedUserVM invalidUser = new ManagedUserVM();        invalidUser.setLogin(\"bob\");        invalidUser.setPassword(\"123\");// password with only 3 digits        invalidUser.setFirstName(\"Bob\");        invalidUser.setLastName(\"Green\");        invalidUser.setEmail(\"bob@example.com\");        invalidUser.setActivated(true);        invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);        invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        invalidUser.setBankAccountIBAN(DEFAULT_IBAN);        restUserMockMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(invalidUser)))            .andExpect(status().isBadRequest());        Optional<User> user = userRepository.findOneByLogin(\"bob\");        assertThat(user.isPresent()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterInvalidIBAN", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterInvalidIBAN() throws Exception {        ManagedUserVM invalidUser = new ManagedUserVM();        invalidUser.setLogin(\"bob\");        invalidUser.setPassword(\"password\");        invalidUser.setFirstName(\"Bob\");        invalidUser.setLastName(\"Green\");        invalidUser.setEmail(\"test@mail.com\");        invalidUser.setActivated(true);        invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);        invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        invalidUser.setBankAccountIBAN(\"invalidIBAN123\");        restUserMockMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(invalidUser)))            .andExpect(status().isBadRequest());        Optional<User> user = userRepository.findOneByLogin(\"bob\");        assertThat(user.isPresent()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterNullPassword", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterNullPassword() throws Exception {        ManagedUserVM invalidUser = new ManagedUserVM();        invalidUser.setLogin(\"bob\");        invalidUser.setPassword(null);// invalid null password        invalidUser.setFirstName(\"Bob\");        invalidUser.setLastName(\"Green\");        invalidUser.setEmail(\"bob@example.com\");        invalidUser.setActivated(true);        invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);        invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        invalidUser.setBankAccountIBAN(DEFAULT_IBAN);        restUserMockMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(invalidUser)))            .andExpect(status().isBadRequest());        Optional<User> user = userRepository.findOneByLogin(\"bob\");        assertThat(user.isPresent()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterDuplicateLogin", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterDuplicateLogin() throws Exception {        // First registration        ManagedUserVM firstUser = new ManagedUserVM();        firstUser.setLogin(\"alice\");        firstUser.setPassword(\"password\");        firstUser.setFirstName(\"Alice\");        firstUser.setLastName(\"Something\");        firstUser.setEmail(\"alice@example.com\");        firstUser.setLangKey(Constants.DEFAULT_LANGUAGE);        firstUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        firstUser.setBankAccountIBAN(DEFAULT_IBAN);        // Duplicate login, different email        ManagedUserVM secondUser = new ManagedUserVM();        secondUser.setLogin(firstUser.getLogin());        secondUser.setPassword(firstUser.getPassword());        secondUser.setFirstName(firstUser.getFirstName());        secondUser.setLastName(firstUser.getLastName());        secondUser.setEmail(\"alice2@example.com\");        secondUser.setLangKey(firstUser.getLangKey());        secondUser.setCreatedBy(firstUser.getCreatedBy());        secondUser.setCreatedDate(firstUser.getCreatedDate());        secondUser.setLastModifiedBy(firstUser.getLastModifiedBy());        secondUser.setLastModifiedDate(firstUser.getLastModifiedDate());        secondUser.setAuthorities(new HashSet<>(firstUser.getAuthorities()));        secondUser.setBankAccountIBAN(DEFAULT_IBAN);        // First user        restMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(firstUser)))            .andExpect(status().isCreated());        // Second (non activated) user        restMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(secondUser)))            .andExpect(status().isCreated());        Optional<User> testUser = userRepository.findOneByEmailIgnoreCase(\"alice2@example.com\");        assertThat(testUser.isPresent()).isTrue();        testUser.get().setActivated(true);        userRepository.saveAndFlush(testUser.get());        // Second (already activated) user        restMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(secondUser)))            .andExpect(status().is4xxClientError());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterDuplicateEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterDuplicateEmail() throws Exception {        // First user        ManagedUserVM firstUser = new ManagedUserVM();        firstUser.setLogin(\"test-register-duplicate-email\");        firstUser.setPassword(\"password\");        firstUser.setFirstName(\"Alice\");        firstUser.setLastName(\"Test\");        firstUser.setEmail(\"test-register-duplicate-email@example.com\");        firstUser.setLangKey(Constants.DEFAULT_LANGUAGE);        firstUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        firstUser.setBankAccountIBAN(DEFAULT_IBAN);        // Register first user        restMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(firstUser)))            .andExpect(status().isCreated());        Optional<User> testUser1 = userRepository.findOneByLogin(\"test-register-duplicate-email\");        assertThat(testUser1.isPresent()).isTrue();        // Duplicate email, different login        ManagedUserVM secondUser = new ManagedUserVM();        secondUser.setLogin(\"test-register-duplicate-email-2\");        secondUser.setPassword(firstUser.getPassword());        secondUser.setFirstName(firstUser.getFirstName());        secondUser.setLastName(firstUser.getLastName());        secondUser.setEmail(firstUser.getEmail());        secondUser.setLangKey(firstUser.getLangKey());        secondUser.setAuthorities(new HashSet<>(firstUser.getAuthorities()));        secondUser.setBankAccountIBAN(DEFAULT_IBAN);        // Register second (non activated) user        restMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(secondUser)))            .andExpect(status().isCreated());        Optional<User> testUser2 = userRepository.findOneByLogin(\"test-register-duplicate-email\");        assertThat(testUser2.isPresent()).isFalse();        Optional<User> testUser3 = userRepository.findOneByLogin(\"test-register-duplicate-email-2\");        assertThat(testUser3.isPresent()).isTrue();        // Duplicate email - with uppercase email address        ManagedUserVM userWithUpperCaseEmail = new ManagedUserVM();        userWithUpperCaseEmail.setId(firstUser.getId());        userWithUpperCaseEmail.setLogin(\"test-register-duplicate-email-3\");        userWithUpperCaseEmail.setPassword(firstUser.getPassword());        userWithUpperCaseEmail.setFirstName(firstUser.getFirstName());        userWithUpperCaseEmail.setLastName(firstUser.getLastName());        userWithUpperCaseEmail.setEmail(\"TEST-register-duplicate-email@example.com\");        userWithUpperCaseEmail.setLangKey(firstUser.getLangKey());        userWithUpperCaseEmail.setAuthorities(new HashSet<>(firstUser.getAuthorities()));        userWithUpperCaseEmail.setBankAccountIBAN(DEFAULT_IBAN);        // Register third (not activated) user        restMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(userWithUpperCaseEmail)))            .andExpect(status().isCreated());        Optional<User> testUser4 = userRepository.findOneByLogin(\"test-register-duplicate-email-3\");        assertThat(testUser4.isPresent()).isTrue();        assertThat(testUser4.get().getEmail()).isEqualTo(\"test-register-duplicate-email@example.com\");        testUser4.get().setActivated(true);        userService.updateUser((new UserDTO(testUser4.get())));        // Register 4th (already activated) user        restMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(secondUser)))            .andExpect(status().is4xxClientError());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterAdminIsIgnored", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterAdminIsIgnored() throws Exception {        Authority authority = new Authority();        authority.setName(AuthoritiesConstants.USER);        authorityRepository.saveAndFlush(authority);        ManagedUserVM validUser = new ManagedUserVM();        validUser.setLogin(\"badguy\");        validUser.setPassword(\"password\");        validUser.setFirstName(\"Bad\");        validUser.setLastName(\"Guy\");        validUser.setEmail(\"badguy@Wennexample.com\");        validUser.setActivated(true);        validUser.setLangKey(Constants.DEFAULT_LANGUAGE);        validUser.setBankAccountIBAN(DEFAULT_IBAN);        validUser.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        validUser.setBankAccountIBAN(DEFAULT_IBAN);        restMvc.perform(            post(\"/api/v1/register\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(validUser)))            .andExpect(status().isCreated());        Optional<User> userDup = userRepository.findOneByLogin(\"badguy\");        assertThat(userDup.isPresent()).isTrue();        assertThat(userDup.get().getAuthorities()).hasSize(1)            .containsExactly(authorityRepository.findById(AuthoritiesConstants.USER).get());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testActivateAccount", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testActivateAccount() throws Exception {        final String activationKey = \"some activation key\";        User user = new User();        user.setLogin(\"activate-account\");        user.setEmail(\"activate-account@example.com\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(false);        user.setActivationKey(activationKey);        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        restMvc.perform(get(\"/api/v1/activate?key={activationKey}\", activationKey))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk());        user = userRepository.findOneByLogin(user.getLogin()).orElse(null);        assertThat(Objects.requireNonNull(user).isActivated()).isTrue();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testActivateAccountWithWrongKey", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testActivateAccountWithWrongKey() throws Exception {        restMvc.perform(get(\"/api/v1/activate?key=wrongActivationKey\"))            .andExpect(status().isNotFound());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSaveAccount", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSaveAccount() throws Exception {        User user = new User();        user.setLogin(\"save-account\");        user.setEmail(\"save-account@example.com\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        UserDTO userDTO = new UserDTO();        userDTO.setLogin(\"not-used\");        userDTO.setFirstName(\"firstname\");        userDTO.setLastName(\"lastname\");        userDTO.setEmail(\"save-account@example.com\");        userDTO.setActivated(false);        userDTO.setLangKey(Constants.DEFAULT_LANGUAGE);        userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        userDTO.setBankAccountIBAN(DEFAULT_IBAN);        restMvc.perform(            post(\"/api/v1/account\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(userDTO)))            .andExpect(status().isOk());        User updatedUser = userRepository.findOneByLogin(user.getLogin()).orElse(null);        assertThat(Objects.requireNonNull(updatedUser).getFirstName()).isEqualTo(userDTO.getFirstName());        assertThat(updatedUser.getLastName()).isEqualTo(userDTO.getLastName());        assertThat(updatedUser.getEmail()).isEqualTo(userDTO.getEmail());        assertThat(updatedUser.getLangKey()).isEqualTo(userDTO.getLangKey());        assertThat(updatedUser.getPassword()).isEqualTo(user.getPassword());        assertThat(updatedUser.isActivated()).isEqualTo(true);        assertThat(updatedUser.getAuthorities()).isEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSaveInvalidEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSaveInvalidEmail() throws Exception {        User user = new User();        user.setLogin(\"save-invalid-email\");        user.setEmail(\"save-invalid-email@example.com\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        UserDTO userDTO = new UserDTO();        userDTO.setLogin(\"not-used\");        userDTO.setFirstName(\"firstname\");        userDTO.setLastName(\"lastname\");        userDTO.setEmail(\"invalid email\");        userDTO.setActivated(false);        userDTO.setLangKey(Constants.DEFAULT_LANGUAGE);        userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        userDTO.setBankAccountIBAN(DEFAULT_IBAN);        restMvc.perform(            post(\"/api/v1/account\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(userDTO)))            .andExpect(status().isBadRequest());        assertThat(userRepository.findOneByEmailIgnoreCase(\"invalid email\")).isNotPresent();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSaveExistingEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSaveExistingEmail() throws Exception {        User user = new User();        user.setLogin(\"save-existing-email\");        user.setEmail(\"save-existing-email@example.com\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        User anotherUser = new User();        anotherUser.setLogin(\"save-existing-email2\");        anotherUser.setEmail(\"save-existing-email2@example.com\");        anotherUser.setPassword(RandomStringUtils.random(60));        anotherUser.setActivated(true);        anotherUser.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(anotherUser);        UserDTO userDTO = new UserDTO();        userDTO.setLogin(\"not-used\");        userDTO.setFirstName(\"firstname\");        userDTO.setLastName(\"lastname\");        userDTO.setEmail(\"save-existing-email2@example.com\");        userDTO.setActivated(false);        userDTO.setLangKey(Constants.DEFAULT_LANGUAGE);        userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        userDTO.setBankAccountIBAN(DEFAULT_IBAN);        restMvc.perform(            post(\"/api/v1/account\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(userDTO)))            .andExpect(status().isConflict());        User updatedUser = userRepository.findOneByLogin(\"save-existing-email\").orElse(null);        assertThat(Objects.requireNonNull(updatedUser).getEmail()).isEqualTo(\"save-existing-email@example.com\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSaveExistingEmailAndLogin", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSaveExistingEmailAndLogin() throws Exception {        User user = new User();        user.setLogin(\"save-existing-email-and-login\");        user.setEmail(\"save-existing-email-and-login@example.com\");        user.setBirthDate(LocalDate.of(1990, 1, 2));        user.setTel(\"067761244368\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        UserDTO userDTO = new UserDTO();        userDTO.setLogin(\"save-existing-email-and-login\");        userDTO.setFirstName(\"firstname\");        userDTO.setLastName(\"lastname\");        userDTO.setEmail(\"save-existing-email-and-login@example.com\");        userDTO.setBirthDate(LocalDate.of(1990, 1, 2));        userDTO.setTel(\"067761244368\");        userDTO.setActivated(false);        userDTO.setLangKey(Constants.DEFAULT_LANGUAGE);        userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        userDTO.setBankAccountIBAN(DEFAULT_IBAN);        restMvc.perform(            post(\"/api/v1/account\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(userDTO)))            .andExpect(status().isOk());        User updatedUser = userRepository.findOneByLogin(\"save-existing-email-and-login\").orElse(null);        assertThat(Objects.requireNonNull(updatedUser).getEmail()).isEqualTo(\"save-existing-email-and-login@example.com\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePasswordWrongExistingPassword", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePasswordWrongExistingPassword() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password-wrong-existing-password\");        user.setEmail(\"change-password-wrong-existing-password@example.com\");        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        restMvc.perform(post(\"/api/v1/account/change-password\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(\"1\" + currentPassword, \"new password\"))))            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(\"change-password-wrong-existing-password\").orElse(null);        assertThat(passwordEncoder.matches(\"new password\", Objects.requireNonNull(updatedUser).getPassword())).isFalse();        assertThat(passwordEncoder.matches(currentPassword, updatedUser.getPassword())).isTrue();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePassword", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePassword() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password\");        user.setEmail(\"change-password@example.com\");        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        restMvc.perform(post(\"/api/v1/account/change-password\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(currentPassword, \"new password\"))))            .andExpect(status().isOk());        User updatedUser = userRepository.findOneByLogin(\"change-password\").orElse(null);        assertThat(passwordEncoder.matches(\"new password\", Objects.requireNonNull(updatedUser).getPassword())).isTrue();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePasswordTooSmall", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePasswordTooSmall() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password-too-small\");        user.setEmail(\"change-password-too-small@example.com\");        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        String newPassword = RandomStringUtils.random(ManagedUserVM.PASSWORD_MIN_LENGTH - 1);        restMvc.perform(post(\"/api/v1/account/change-password\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(currentPassword, newPassword))))            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(\"change-password-too-small\").orElse(null);        assertThat(Objects.requireNonNull(updatedUser).getPassword()).isEqualTo(user.getPassword());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePasswordTooLong", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePasswordTooLong() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password-too-long\");        user.setEmail(\"change-password-too-long@example.com\");        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        String newPassword = RandomStringUtils.random(ManagedUserVM.PASSWORD_MAX_LENGTH + 1);        restMvc.perform(post(\"/api/v1/account/change-password\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(currentPassword, newPassword))))            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(\"change-password-too-long\").orElse(null);        assertThat(Objects.requireNonNull(updatedUser).getPassword()).isEqualTo(user.getPassword());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePasswordEmpty", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePasswordEmpty() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password-empty\");        user.setEmail(\"change-password-empty@example.com\");        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        restMvc.perform(post(\"/api/v1/account/change-password\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(currentPassword, \"\"))))            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(\"change-password-empty\").orElse(null);        assertThat(Objects.requireNonNull(updatedUser).getPassword()).isEqualTo(user.getPassword());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRequestPasswordReset", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRequestPasswordReset() throws Exception {        User user = new User();        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setLogin(\"password-reset\");        user.setEmail(\"password-reset@example.com\");        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        restMvc.perform(post(\"/api/v1/account/reset-password/init\")            .content(\"password-reset@example.com\"))            .andExpect(status().isOk());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRequestPasswordResetUpperCaseEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRequestPasswordResetUpperCaseEmail() throws Exception {        User user = new User();        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setLogin(\"password-reset\");        user.setEmail(\"password-reset@example.com\");        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        restMvc.perform(post(\"/api/v1/account/reset-password/init\")            .content(\"password-reset@EXAMPLE.COM\"))            .andExpect(status().isOk());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRequestPasswordResetWrongEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRequestPasswordResetWrongEmail() throws Exception {        restMvc.perform(            post(\"/api/v1/account/reset-password/init\")                .content(\"password-reset-wrong-email@example.com\"))            .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testFinishPasswordReset", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testFinishPasswordReset() throws Exception {        User user = new User();        user.setPassword(RandomStringUtils.random(60));        user.setLogin(\"finish-password-reset\");        user.setEmail(\"finish-password-reset@example.com\");        user.setPasswordResetTimestamp(Instant.now().plusSeconds(60));        user.setResetKey(\"reset key\");        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        KeyAndPasswordVM keyAndPassword = new KeyAndPasswordVM();        keyAndPassword.setKey(user.getResetKey());        keyAndPassword.setNewPassword(\"new password\");        restMvc.perform(            post(\"/api/v1/account/reset-password/finish\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(keyAndPassword)))            .andExpect(status().isOk());        User updatedUser = userRepository.findOneByLogin(user.getLogin()).orElse(null);        assertThat(passwordEncoder.matches(keyAndPassword.getNewPassword(), Objects.requireNonNull(updatedUser).getPassword())).isTrue();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testFinishPasswordResetTooSmall", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testFinishPasswordResetTooSmall() throws Exception {        User user = new User();        user.setPassword(RandomStringUtils.random(60));        user.setLogin(\"finish-password-reset-too-small\");        user.setEmail(\"finish-password-reset-too-small@example.com\");        user.setPasswordResetTimestamp(Instant.now().plusSeconds(60));        user.setResetKey(\"reset key too small\");        user.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(user);        KeyAndPasswordVM keyAndPassword = new KeyAndPasswordVM();        keyAndPassword.setKey(user.getResetKey());        keyAndPassword.setNewPassword(\"foo\");        restMvc.perform(            post(\"/api/v1/account/reset-password/finish\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(keyAndPassword)))            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(user.getLogin()).orElse(null);        assertThat(passwordEncoder.matches(keyAndPassword.getNewPassword(), Objects.requireNonNull(updatedUser).getPassword())).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testFinishPasswordResetWrongKey", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testFinishPasswordResetWrongKey() throws Exception {        KeyAndPasswordVM keyAndPassword = new KeyAndPasswordVM();        keyAndPassword.setKey(\"wrong reset key\");        keyAndPassword.setNewPassword(\"new password\");        restMvc.perform(            post(\"/api/v1/account/reset-password/finish\")                .contentType(TestUtil.APPLICATION_JSON_UTF8)                .content(TestUtil.convertObjectToJsonBytes(keyAndPassword)))            .andExpect(status().isNotFound());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/AccountControllerIT.java", "stars": "2", "class": {"name": "AccountControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws IOException {\t\tString expStr = getExpStr(); // a+b\t\tHashMap<String, Integer> var = getValue(expStr);// var {a=10, b=20}\t\tCalculator calculator = new Calculator(expStr);\t\tSystem.out.println(\"\u8fd0\u7b97\u7ed3\u679c\" + expStr + \"=\" + calculator.run(var));\t}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/interpreter/ClientTest.java", "stars": "2", "class": {"name": "ClientTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExpStr", "params": [], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getExpStr() throws IOException {\t\tSystem.out.print(\"\u8bf7\u8f93\u5165\u8868\u8fbe\u5f0f\uff1a\");\t\treturn (new BufferedReader(new InputStreamReader(System.in))).readLine();\t}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/interpreter/ClientTest.java", "stars": "2", "class": {"name": "ClientTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "HashMap<String,Integer>", "snippet": "\tpublic static HashMap<String, Integer> getValue(String expStr) throws IOException {\t\tHashMap<String, Integer> map = new HashMap<>();\t\tfor (char ch : expStr.toCharArray()) {\t\t\tif (ch != '+' && ch != '-') {\t\t\t\tif (!map.containsKey(String.valueOf(ch))) {\t\t\t\t\tSystem.out.print(\"\u8bf7\u8f93\u5165\" + String.valueOf(ch) + \"\u7684\u503c\uff1a\");\t\t\t\t\tString in = (new BufferedReader(new InputStreamReader(System.in))).readLine();\t\t\t\t\tmap.put(String.valueOf(ch), Integer.valueOf(in));\t\t\t\t}\t\t\t}\t\t}\t\treturn map;\t}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/interpreter/ClientTest.java", "stars": "2", "class": {"name": "ClientTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fillWindow", "params": ["int", "CursorWindow"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fillWindow(int pos, CursorWindow winow) {        mCursor.fillWindow(pos, winow);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCrossProcessCursor.java", "stars": "74", "class": {"name": "NonBlockingCrossProcessCursor", "extends": "NonBlockingCursor", "implements": ["CrossProcessCursor"], "modifiers": []}}, {"method_name": "getWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CursorWindow", "snippet": "    public CursorWindow getWindow() {        return mCursor.getWindow();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCrossProcessCursor.java", "stars": "74", "class": {"name": "NonBlockingCrossProcessCursor", "extends": "NonBlockingCursor", "implements": ["CrossProcessCursor"], "modifiers": []}}, {"method_name": "onMove", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onMove(int oldPosition, int newPosition) {        return mCursor.onMove(oldPosition, newPosition);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCrossProcessCursor.java", "stars": "74", "class": {"name": "NonBlockingCrossProcessCursor", "extends": "NonBlockingCursor", "implements": ["CrossProcessCursor"], "modifiers": []}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.items.add(() -> new ItemCustom());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/DriedWheatItem.java", "stars": "2", "class": {"name": "DriedWheatItem", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemEnchantability", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getItemEnchantability() {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/DriedWheatItem.java", "stars": "2", "class": {"name": "ItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getUseDuration", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getUseDuration(ItemStack itemstack) {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/DriedWheatItem.java", "stars": "2", "class": {"name": "ItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDestroySpeed", "params": ["ItemStack", "BlockState"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "\t\tpublic float getDestroySpeed(ItemStack par1ItemStack, BlockState par2Block) {\t\t\treturn 1F;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/DriedWheatItem.java", "stars": "2", "class": {"name": "ItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLightsPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getLightsPosition() {        return position;    }", "url": "https://raw.githubusercontent.com/DevUpgrade-online/gearbox/master/Lights.java", "stars": "2", "class": {"name": "Lights", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getLeft().checkType();\t\tthis.getRight().checkType();\t\tTypeCode[] typeCodes = {TypeCode.INTEGER, TypeCode.FLOAT};\t\tgetLeft().getType().assertType(this, typeCodes);\t\tgetLeft().getType().assertType(this, getRight().getType());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprMUL.java", "stars": "3", "class": {"name": "ExprMUL", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = \"(\" + getLeft().generateCode()\t\t\t\t+ \" * \" + getRight().generateCode() + \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprMUL.java", "stars": "3", "class": {"name": "ExprMUL", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o1 = getLeft().constEval(environment);\t\tObject o2 = getRight().constEval(environment);\t\tif ((o1 instanceof Integer) && (o2 instanceof Integer)) \t\t\treturn new Integer((Integer)o1 * (Integer)o2);\t\telse if ((o1 instanceof Float) && (o2 instanceof Float)) \t\t\treturn new Float((Float)o1 * (Float)o2);\t\telse\t\t\tthrow new TypeException(\"Impossible de calculer la constante, erreur de type\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprMUL.java", "stars": "3", "class": {"name": "ExprMUL", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"(\" + this.getLeft() + \" * \" + this.getRight() + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprMUL.java", "stars": "3", "class": {"name": "ExprMUL", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBOM", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "BOM", "snippet": "    public final BOM getBOM() {        // BOM type is immutable.        return bom;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "skipBOM", "params": [], "throws": ["IOException"], "modifiers": ["synchronized", "public", "final"], "return_type": "void", "snippet": "    public final synchronized void skipBOM() throws IOException {        if (!skipped) {            in.skip(bom.bytes.length);            skipped = true;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "read", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int read() throws IOException {        return in.read();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "read", "params": ["byte"], "throws": ["IOException", "NullPointerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int read(@NonNull final byte b[]) throws IOException,            NullPointerException {        return in.read(b, 0, b.length);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "read", "params": ["byte", "int", "int"], "throws": ["IOException", "NullPointerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int read(@NonNull final byte b[],                    final int off,                    final int len) throws IOException,            NullPointerException {        return in.read(b, off, len);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "skip", "params": ["long"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "long", "snippet": "    public long skip(final long n) throws IOException {        return in.skip(n);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "available", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int available() throws IOException {        return in.available();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() throws IOException {        in.close();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "mark", "params": ["int"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void mark(final int readlimit) {        in.mark(readlimit);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void reset() throws IOException {        in.reset();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "markSupported", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean markSupported() {        return in.markSupported();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "UnicodeBOMInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "String", "snippet": "        public final String toString() {            return description;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "BOM", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "getBytes", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "byte", "snippet": "        public final byte[] getBytes() {            final int length = bytes.length;            final byte[] result = new byte[length];            // Make a defensive copy            System.arraycopy(bytes, 0, result, 0, length);            return result;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/UnicodeBOMInputStream.java", "stars": "4", "class": {"name": "BOM", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "resolve", "params": ["Collection<Class>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void resolve(Collection<Class<?>> cls) {  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/DefaultBeanResolver.java", "stars": "2", "class": {"name": "DefaultBeanResolver", "extends": null, "implements": ["BeanResolver"], "modifiers": ["public"]}}, {"method_name": "resolveInterface", "params": ["Class<?>"], "throws": null, "modifiers": ["protected"], "return_type": "Class<?>", "snippet": "  protected Class<?> resolveInterface(Class<?> type) {    Class<?> classToCreate;    if (type == Map.class) {      classToCreate = LinkedHashMap.class;    } else if (type == List.class || type == Collection.class) {      classToCreate = LinkedList.class;    } else {      classToCreate = super.resolveInterface(type);    }    return classToCreate;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_handler_type/ObjectFactory.java", "stars": "15", "class": {"name": "ObjectFactory", "extends": "DefaultObjectFactory", "implements": null, "modifiers": ["public"]}}, {"method_name": "makePeopleLeaveRoom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void makePeopleLeaveRoom() {        System.out.println(\"\u0412\u0441\u0435\u0445 \u0443\u0431\u044c\u044e! \u0412\u043e\u043d \u043f\u043e\u0448\u043b\u0438\");    }", "url": "https://raw.githubusercontent.com/Jeka1978/coronadesinfectorlifedemo/master/src/main/java/com/epam/AngryPoliceman.java", "stars": "60", "class": {"name": "AngryPoliceman", "extends": null, "implements": ["Policeman"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoads() {\t}", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-jpa-paging-sorting/master/src/test/java/com/bezkoder/spring/data/jpa/pagingsorting/SpringBootJpaPagingSortingApplicationTests.java", "stars": "2", "class": {"name": "SpringBootJpaPagingSortingApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result = \"\";\t\tresult += super.generateCode();\t\t\t\tswitch (expr.getTypeCode()) {\t\tcase FLOAT:\t\t\tresult += tab() + \"printf(\\\"%f\\\\n\\\", \";\t\t\tresult += expr.generateCode() + \");\" + NL;\t\t\tbreak;\t\tcase INTEGER:\t\tcase ENUM:\t\t\tresult += tab() + \"printf(\\\"%d\\\\n\\\", \";\t\t\tresult += expr.generateCode() + \");\" + NL;\t\t\tbreak;\t\tcase BOOLEAN:\t\t\tresult += tab() + \"printf(\\\"%s\\\\n\\\", (\";\t\t\tresult += expr.generateCode() + \" == 1) ? \\\"true\\\" : \\\"false\\\");\" + NL;\t\t\tbreak;\t\tcase STRING:\t\t\tresult += tab() + \"printf(\\\"%s\\\\n\\\", \";\t\t\tresult += expr.generateCode() + \");\" + NL;\t\t\tbreak;\t\tcase POINTER:\t\t\tresult += tab() + \"printf(\\\"%lx\\\\n\\\", (unsigned long)\";\t\t\tif (expr.isPOINTER())\t\t\t\tresult += ((ExprPOINTER)expr).getPointerCode() + \");\" + NL;\t\t\telse\t\t\t\tresult += expr.generateCode() + \");\" + NL;\t\t\tbreak;\t\tcase ARRAY:\t\t\tresult += tab() + \"printf(\\\"ARRAY_%lx\\\\n\\\", (unsigned long)\";\t\t\tresult += expr.generateCode() + \");\" + NL;\t\t\tbreak;\t\tcase STRUCT:\t\t\tresult += tab() + \"printf(\\\"STRUCT_%lx\\\\n\\\", (unsigned long)\";\t\t\tresult += expr.generateCode() + \");\" + NL;\t\t\tbreak;\t\tdefault:\t\t\tthrow new CodeException(\"print\");\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmPRINTLN.java", "stars": "3", "class": {"name": "StmPRINTLN", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\texpr.checkType();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmPRINTLN.java", "stars": "3", "class": {"name": "StmPRINTLN", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"println \" + expr;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmPRINTLN.java", "stars": "3", "class": {"name": "StmPRINTLN", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);      sqlSessionFactory.getConfiguration().addMapper(Mapper.class);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/result_handler/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_handler/ResulthandlerTest.java", "stars": "15", "class": {"name": "ResulthandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_handler/ResulthandlerTest.java", "stars": "15", "class": {"name": "ResulthandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAllUsers", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAllUsers() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      UserResultHandler userResultHandler = new UserResultHandler();      mapper.getAllUsers(userResultHandler);      Assertions.assertEquals(3, userResultHandler.getUsers().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_handler/ResulthandlerTest.java", "stars": "15", "class": {"name": "ResulthandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setNoClip", "params": ["LivingUpdateEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setNoClip(LivingUpdateEvent event) {        // Only applied to player or it will absoultly ruin your experience        if (event.getEntityLiving() instanceof EntityPlayer) {            EntityPlayer player = (EntityPlayer) event.getEntityLiving();            Potion potion = PotionRegistry.POTION_PHASE;            // Only active when flying in capabilities to avoid annoying control            player.noClip = player.isPotionActive(potion) && player.capabilities.isFlying;        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/PhaseEvent.java", "stars": "2", "class": {"name": "PhaseEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onEntityTickUpdatePotion", "params": ["LivingUpdateEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onEntityTickUpdatePotion(LivingUpdateEvent event) {        for (PotionEffect effect : event.getEntityLiving().getActivePotionEffects()) {            if (effect.getPotion() instanceof IEffectDurated && effect.getDuration() == 0) {                ((IEffectDurated) effect.getPotion()).wornOut(event.getEntityLiving());            }        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/PhaseEvent.java", "stars": "2", "class": {"name": "PhaseEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clientTickUpdate", "params": ["TickEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void clientTickUpdate(TickEvent.ClientTickEvent event) {        if (event.phase == TickEvent.Phase.END) {            clientTick++;        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/PhaseEvent.java", "stars": "2", "class": {"name": "PhaseEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BaseCellView.java", "stars": "2", "class": {"name": "BaseCellView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BaseCellView.java", "stars": "2", "class": {"name": "BaseCellView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/zakariaelattar/Cannon-Bank/master/src/test/java/org/cannonbank/core/CoreApplicationTests.java", "stars": "1", "class": {"name": "CoreApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, \"Hello\", null);    verify(ps).setCharacterStream(Mockito.eq(1), Mockito.any(Reader.class), Mockito.eq(5));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NClobTypeHandlerTest.java", "stars": "15", "class": {"name": "NClobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getClob(\"column\")).thenReturn(clob);    when(clob.length()).thenReturn(3l);    when(clob.getSubString(1, 3)).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NClobTypeHandlerTest.java", "stars": "15", "class": {"name": "NClobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getClob(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NClobTypeHandlerTest.java", "stars": "15", "class": {"name": "NClobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getClob(1)).thenReturn(clob);    when(clob.length()).thenReturn(3L);    when(clob.getSubString(1, 3)).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NClobTypeHandlerTest.java", "stars": "15", "class": {"name": "NClobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getClob(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NClobTypeHandlerTest.java", "stars": "15", "class": {"name": "NClobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getClob(1)).thenReturn(clob);    when(clob.length()).thenReturn(3L);    when(clob.getSubString(1, 3)).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NClobTypeHandlerTest.java", "stars": "15", "class": {"name": "NClobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getClob(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NClobTypeHandlerTest.java", "stars": "15", "class": {"name": "NClobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "getIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getIndex() {        return index;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaColumnInfo.java", "stars": "23", "class": {"name": "MetaColumnInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setIndex", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIndex(int index) {        this.index = index;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaColumnInfo.java", "stars": "23", "class": {"name": "MetaColumnInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaColumnInfo.java", "stars": "23", "class": {"name": "MetaColumnInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaColumnInfo.java", "stars": "23", "class": {"name": "MetaColumnInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaColumnInfo.java", "stars": "23", "class": {"name": "MetaColumnInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(String type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaColumnInfo.java", "stars": "23", "class": {"name": "MetaColumnInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "isPrimaryKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPrimaryKey() {        return isPrimaryKey;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaColumnInfo.java", "stars": "23", "class": {"name": "MetaColumnInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPrimaryKey", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPrimaryKey(boolean primaryKey) {        isPrimaryKey = primaryKey;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaColumnInfo.java", "stars": "23", "class": {"name": "MetaColumnInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getOutputStream", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "OutputStream", "snippet": "    private OutputStream getOutputStream() throws IOException {        FileOutputStream fos = new FileOutputStream(file);        if(compression == Compression.GZIP)            return new GZIPOutputStream(fos);        if(compression == Compression.ZLIB)            return new DeflaterOutputStream(fos);        return fos;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInputStream", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "InputStream", "snippet": "    private InputStream getInputStream() throws IOException {        FileInputStream fis = new FileInputStream(file);        if(compression == Compression.GZIP)            return new GZIPInputStream(fis);        if(compression == Compression.ZLIB)            return new InflaterInputStream(fis);        return fis;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T extends Tag<?>> T get(String name){        try{            if(!file.exists()) return null;            RandomAccessFile raf = new RandomAccessFile(file, \"r\");            FileChannel channel = raf.getChannel();            ByteBuffer data = ByteBuffer.allocate((int) channel.size());            channel.read(data);            T out = (T) getSubData(data, name);            channel.close();            raf.close();            return out;        }catch(IOException ex){            ex.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T getObject(String key){        try{            if(!file.exists()) return null;            RandomAccessFile raf = new RandomAccessFile(file, \"r\");            FileChannel channel = raf.getChannel();            ByteBuffer data = ByteBuffer.allocate((int) channel.size());            channel.read(data);            T out = (T) getSubObjectData(data, key);            channel.close();            raf.close();            return out;        }catch(IOException ex){            ex.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Tag>", "snippet": "    public List<Tag<?>> getAll(){        try{            if(!file.exists()) return null;            RandomAccessFile raf = new RandomAccessFile(file, \"r\");            FileChannel channel = raf.getChannel();            ByteBuffer data = ByteBuffer.allocate((int) channel.size());            channel.read(data);            List<Tag<?>> output = getListData(data);            channel.close();            raf.close();            return output;        }catch(IOException ex){            ex.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["List<Tag>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void save(List<? extends Tag<?>> tags){        try{            OutputStream os = getOutputStream();            DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(os));            for(Tag<?> tag : tags){                tag.writeData(dos);            }            dos.close();            os.close();        }catch(IOException ex){            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "append", "params": ["Tag<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void append(Tag<?> tag){        try{            if(!file.exists()) file.createNewFile();            OutputStream os = getOutputStream();            DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(os));            InputStream is = getInputStream();            dos.write(is.readAllBytes());            is.close();            tag.writeData(dos);            dos.close();            os.close();        }catch(IOException ex){            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "appendAll", "params": ["List<Tag>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void appendAll(List<Tag<?>> tags){        try{            if (!file.exists()) file.createNewFile();            OutputStream os = getOutputStream();            DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(os));            InputStream is = getInputStream();            dos.write(is.readAllBytes());            is.close();            for(Tag<?> tag : tags){                tag.writeData(dos);            }            dos.close();            is.close();        }catch(IOException ex){            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubData", "params": ["ByteBuffer", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Tag<?>", "snippet": "    private Tag<?> getSubData(ByteBuffer data, String name) throws IOException {        data.flip();        TagBuilder currentBuilder = new TagBuilder();        while(data.hasRemaining()){            currentBuilder.setDataType(data.get());            currentBuilder.setDataSize(data.getInt());            currentBuilder.setStartingIndex(data.position());            currentBuilder.setNameSize(((Short) data.getShort()).intValue());            // If the name size isn't the same, then don't waste time reading the name.            if(currentBuilder.getNameSize() != name.getBytes(StandardCharsets.UTF_8).length){                data.position(((Long)currentBuilder.getStartingIndex()).intValue() + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            //TODO make sure the long math does not screw up this system.            byte[] nameBytes = new byte[currentBuilder.getNameSize()];            data.get(nameBytes);            String tagName = new String(nameBytes, StandardCharsets.UTF_8);            currentBuilder.setName(tagName);            // If the name is not correct, skip forward!            if(!name.equals(tagName)){                data.position(((Long)currentBuilder.getStartingIndex()).intValue() + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            byte[] value = new byte[((int) currentBuilder.getStartingIndex() - data.position()) + currentBuilder.getDataSize()];            data.get(value);            currentBuilder.setValueBytes(value);            data.clear();            return currentBuilder.process();        }        data.clear();        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubObjectData", "params": ["ByteBuffer", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Tag<?>", "snippet": "    private Tag<?> getSubObjectData(ByteBuffer data, String key) throws IOException {        data.flip();        String name = key.split(\"\\\\.\")[0];        String otherKey = getKey(key.split(\"\\\\.\"));        TagBuilder currentBuilder = new TagBuilder();        while(data.hasRemaining()){            currentBuilder.setDataType(data.get());            currentBuilder.setDataSize(data.getInt());            currentBuilder.setStartingIndex(data.position());            currentBuilder.setNameSize(((Short) data.getShort()).intValue());            // If the name size isn't the same, then don't waste time reading the name.            if(currentBuilder.getNameSize() != name.getBytes(StandardCharsets.UTF_8).length){                data.position(((Long)currentBuilder.getStartingIndex()).intValue() + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            byte[] nameBytes = new byte[currentBuilder.getNameSize()];            data.get(nameBytes);            String tagName = new String(nameBytes, StandardCharsets.UTF_8);            currentBuilder.setName(tagName);            // If the name is not correct, skip forward!            if(!name.equals(tagName)){                data.position(((Long)currentBuilder.getStartingIndex()).intValue() + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            byte[] value = new byte[((int) currentBuilder.getStartingIndex() - data.position()) + currentBuilder.getDataSize()];            data.get(value);            currentBuilder.setValueBytes(value);            data.clear();            if(otherKey != null) {                ByteBuffer newData = ByteBuffer.wrap(currentBuilder.getValueBytes());                newData.position(value.length);                return getSubObjectData(newData, otherKey);            }            return currentBuilder.process();        }        data.clear();        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getKey(String[] s){        List<String> list = new ArrayList<>(Arrays.asList(s));        list.remove(0);        if(list.size() == 1) return list.get(0);        if(list.size() < 1) return null;        return String.join(\".\", list);    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getListData", "params": ["ByteBuffer"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "List<Tag>", "snippet": "    public static List<Tag<?>> getListData(ByteBuffer data) throws IOException {        data.flip();        List<Tag<?>> output = new ArrayList<>();        TagBuilder currentBuilder = new TagBuilder();        while(data.hasRemaining()){            currentBuilder.setDataType(data.get());            currentBuilder.setDataSize(data.getInt());            currentBuilder.setStartingIndex(data.position());            currentBuilder.setNameSize(((Short) data.getShort()).intValue());            byte[] nameBytes = new byte[currentBuilder.getNameSize()];            data.get(nameBytes);            String tagName = new String(nameBytes, StandardCharsets.UTF_8);            currentBuilder.setName(tagName);            byte[] value = new byte[((int) currentBuilder.getStartingIndex() - data.position()) + currentBuilder.getDataSize()];            data.get(value);            currentBuilder.setValueBytes(value);            output.add(currentBuilder.process());        }        data.clear();        return output;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructureNIO.java", "stars": "2", "class": {"name": "ObjectDataStructureNIO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onApplicationEvent", "params": ["OnlineEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onApplicationEvent(OnlineEvent event) {\t\t\t\tif (logger.isDebugEnabled()) {\t\t\tlogger.debug(\"\u8bbe\u5907\u79bb\u7ebf\u4e8b\u4ef6\u89e6\u53d1\uff0cdeviceId\uff1a\" + event.getDeviceId() + \",from:\" + event.getFrom());\t\t}\t\t\t\tString key = VideoManagerConstants.KEEPLIVEKEY_PREFIX + event.getDeviceId();\t\tboolean needUpdateStorager = false;\t\tswitch (event.getFrom()) {\t\t// \u6ce8\u518c\u65f6\u89e6\u53d1\u7684\u5728\u7ebf\u4e8b\u4ef6\uff0c\u5148\u5728redis\u4e2d\u589e\u52a0\u8d85\u65f6\u8d85\u65f6\u76d1\u542c\t\tcase VideoManagerConstants.EVENT_ONLINE_REGISTER:\t\t\t// TODO \u8d85\u65f6\u65f6\u95f4\u6682\u65f6\u5199\u6b7b\u4e3a180\u79d2\t\t\tredis.set(key, event.getDeviceId(), 180);\t\t\tneedUpdateStorager = true;\t\t\tbreak;\t\t// \u8bbe\u5907\u4e3b\u52a8\u53d1\u9001\u5fc3\u8df3\u89e6\u53d1\u7684\u79bb\u7ebf\u4e8b\u4ef6\t\tcase VideoManagerConstants.EVENT_ONLINE_KEEPLIVE:\t\t\tboolean exist = redis.hasKey(key);\t\t\t// \u5148\u5224\u65ad\u662f\u5426\u8fd8\u5b58\u5728\uff0c\u5f53\u8bbe\u5907\u5148\u5fc3\u8df3\u8d85\u65f6\u540e\u53c8\u53d1\u9001\u5fc3\u8df3\u65f6\uff0credis\u6ca1\u6709\u76d1\u542c\uff0c\u9700\u8981\u589e\u52a0\t\t\tif (!exist) {\t\t\t\tneedUpdateStorager = true;\t\t\t\tredis.set(key, event.getDeviceId(), 180);\t\t\t} else {\t\t\t\tredis.expire(key, 180);\t\t\t}\t\t\tbreak;\t\t}\t\t\t\tif (needUpdateStorager) {\t\t\t// \u5904\u7406\u79bb\u7ebf\u76d1\u542c\t\t\tstorager.online(event.getDeviceId());\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/event/online/OnlineEventListener.java", "stars": "29", "class": {"name": "OnlineEventListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "getCronExpression", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCronExpression() {    return this.cronExpression;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/CronSchedule.java", "stars": "18", "class": {"name": "CronSchedule", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(final Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    final CronSchedule that = (CronSchedule) o;    return new EqualsBuilder()        .append(this.cronExpression, that.cronExpression)        .isEquals();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/CronSchedule.java", "stars": "18", "class": {"name": "CronSchedule", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return new HashCodeBuilder(17, 37)        .append(this.cronExpression)        .toHashCode();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/CronSchedule.java", "stars": "18", "class": {"name": "CronSchedule", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "TestFragmentB", "snippet": "    public static TestFragmentB newInstance() {        return new TestFragmentB();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentB.java", "stars": "1", "class": {"name": "TestFragmentB", "extends": "MyFragment", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.fragment_test_b;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentB.java", "stars": "1", "class": {"name": "TestFragmentB", "extends": "MyFragment", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        mSwitchButton.setOnCheckedChangeListener(this);        setOnClickListener(R.id.cv_test_countdown);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentB.java", "stars": "1", "class": {"name": "TestFragmentB", "extends": "MyFragment", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        GlideApp.with(this)                .load(R.drawable.bg_launcher)                .circleCrop()                .into(mCircleView);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentB.java", "stars": "1", "class": {"name": "TestFragmentB", "extends": "MyFragment", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        if (v.getId() == R.id.cv_test_countdown) {            toast(R.string.common_code_send_hint);            mCountdownView.start();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentB.java", "stars": "1", "class": {"name": "TestFragmentB", "extends": "MyFragment", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "isStatusBarEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isStatusBarEnabled() {        // \u4f7f\u7528\u6c89\u6d78\u5f0f\u72b6\u6001\u680f        return !super.isStatusBarEnabled();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentB.java", "stars": "1", "class": {"name": "TestFragmentB", "extends": "MyFragment", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "onCheckedChanged", "params": ["SwitchButton", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCheckedChanged(SwitchButton button, boolean isChecked) {        toast(isChecked);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentB.java", "stars": "1", "class": {"name": "TestFragmentB", "extends": "MyFragment", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new BlockCustomFlower());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoseBlock.java", "stars": "2", "class": {"name": "RoseBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoseBlock.java", "stars": "2", "class": {"name": "RoseBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tFlowersFeature feature = new DefaultFlowersFeature(BlockClusterFeatureConfig::func_227300_a_) {\t\t\t@Override\t\t\tpublic BlockState getFlowerToPlace(Random random, BlockPos bp, BlockClusterFeatureConfig fc) {\t\t\t\treturn block.getDefaultState();\t\t\t}\t\t\t@Override\t\t\tpublic boolean place(IWorld world, ChunkGenerator generator, Random random, BlockPos pos, BlockClusterFeatureConfig config) {\t\t\t\tDimensionType dimensionType = world.getDimension().getType();\t\t\t\tboolean dimensionCriteria = false;\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\tdimensionCriteria = true;\t\t\t\tif (!dimensionCriteria)\t\t\t\t\treturn false;\t\t\t\treturn super.place(world, generator, random, pos, config);\t\t\t}\t\t};\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tboolean biomeCriteria = false;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"forest\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (!biomeCriteria)\t\t\t\tcontinue;\t\t\tbiome.addFeature(GenerationStage.Decoration.VEGETAL_DECORATION,\t\t\t\t\tfeature.withConfiguration(\t\t\t\t\t\t\t(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(block.getDefaultState()), new SimpleBlockPlacer()))\t\t\t\t\t\t\t\t\t.tries(64).build())\t\t\t\t\t\t\t.withPlacement(Placement.COUNT_HEIGHTMAP_32.configure(new FrequencyConfig(1))));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoseBlock.java", "stars": "2", "class": {"name": "RoseBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(RoseBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoseBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoseBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlantType", "params": ["IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "PlantType", "snippet": "\t\tpublic PlantType getPlantType(IBlockReader world, BlockPos pos) {\t\t\treturn PlantType.Plains;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoseBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        paint.setFakeBoldText(true);        canvas.drawText(text, 50, 100, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice05SetFakeBoldTextView.java", "stars": "2", "class": {"name": "Practice05SetFakeBoldTextView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "UmsAdminExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameIsNull() {            addCriterion(\"username is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameIsNotNull() {            addCriterion(\"username is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameEqualTo(String value) {            addCriterion(\"username =\", value, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameNotEqualTo(String value) {            addCriterion(\"username <>\", value, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameGreaterThan(String value) {            addCriterion(\"username >\", value, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameGreaterThanOrEqualTo(String value) {            addCriterion(\"username >=\", value, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameLessThan(String value) {            addCriterion(\"username <\", value, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameLessThanOrEqualTo(String value) {            addCriterion(\"username <=\", value, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameLike(String value) {            addCriterion(\"username like\", value, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameNotLike(String value) {            addCriterion(\"username not like\", value, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameIn(List<String> values) {            addCriterion(\"username in\", values, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameNotIn(List<String> values) {            addCriterion(\"username not in\", values, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameBetween(String value1, String value2) {            addCriterion(\"username between\", value1, value2, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsernameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsernameNotBetween(String value1, String value2) {            addCriterion(\"username not between\", value1, value2, \"username\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordIsNull() {            addCriterion(\"password is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordIsNotNull() {            addCriterion(\"password is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordEqualTo(String value) {            addCriterion(\"password =\", value, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordNotEqualTo(String value) {            addCriterion(\"password <>\", value, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordGreaterThan(String value) {            addCriterion(\"password >\", value, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordGreaterThanOrEqualTo(String value) {            addCriterion(\"password >=\", value, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordLessThan(String value) {            addCriterion(\"password <\", value, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordLessThanOrEqualTo(String value) {            addCriterion(\"password <=\", value, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordLike(String value) {            addCriterion(\"password like\", value, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordNotLike(String value) {            addCriterion(\"password not like\", value, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordIn(List<String> values) {            addCriterion(\"password in\", values, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordNotIn(List<String> values) {            addCriterion(\"password not in\", values, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordBetween(String value1, String value2) {            addCriterion(\"password between\", value1, value2, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPasswordNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPasswordNotBetween(String value1, String value2) {            addCriterion(\"password not between\", value1, value2, \"password\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconIsNull() {            addCriterion(\"icon is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconIsNotNull() {            addCriterion(\"icon is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconEqualTo(String value) {            addCriterion(\"icon =\", value, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconNotEqualTo(String value) {            addCriterion(\"icon <>\", value, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconGreaterThan(String value) {            addCriterion(\"icon >\", value, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconGreaterThanOrEqualTo(String value) {            addCriterion(\"icon >=\", value, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconLessThan(String value) {            addCriterion(\"icon <\", value, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconLessThanOrEqualTo(String value) {            addCriterion(\"icon <=\", value, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconLike(String value) {            addCriterion(\"icon like\", value, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconNotLike(String value) {            addCriterion(\"icon not like\", value, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconIn(List<String> values) {            addCriterion(\"icon in\", values, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconNotIn(List<String> values) {            addCriterion(\"icon not in\", values, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconBetween(String value1, String value2) {            addCriterion(\"icon between\", value1, value2, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIconNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIconNotBetween(String value1, String value2) {            addCriterion(\"icon not between\", value1, value2, \"icon\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailIsNull() {            addCriterion(\"email is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailIsNotNull() {            addCriterion(\"email is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailEqualTo(String value) {            addCriterion(\"email =\", value, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailNotEqualTo(String value) {            addCriterion(\"email <>\", value, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailGreaterThan(String value) {            addCriterion(\"email >\", value, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailGreaterThanOrEqualTo(String value) {            addCriterion(\"email >=\", value, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailLessThan(String value) {            addCriterion(\"email <\", value, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailLessThanOrEqualTo(String value) {            addCriterion(\"email <=\", value, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailLike(String value) {            addCriterion(\"email like\", value, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailNotLike(String value) {            addCriterion(\"email not like\", value, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailIn(List<String> values) {            addCriterion(\"email in\", values, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailNotIn(List<String> values) {            addCriterion(\"email not in\", values, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailBetween(String value1, String value2) {            addCriterion(\"email between\", value1, value2, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEmailNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEmailNotBetween(String value1, String value2) {            addCriterion(\"email not between\", value1, value2, \"email\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameIsNull() {            addCriterion(\"nick_name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameIsNotNull() {            addCriterion(\"nick_name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameEqualTo(String value) {            addCriterion(\"nick_name =\", value, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameNotEqualTo(String value) {            addCriterion(\"nick_name <>\", value, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameGreaterThan(String value) {            addCriterion(\"nick_name >\", value, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameGreaterThanOrEqualTo(String value) {            addCriterion(\"nick_name >=\", value, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameLessThan(String value) {            addCriterion(\"nick_name <\", value, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameLessThanOrEqualTo(String value) {            addCriterion(\"nick_name <=\", value, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameLike(String value) {            addCriterion(\"nick_name like\", value, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameNotLike(String value) {            addCriterion(\"nick_name not like\", value, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameIn(List<String> values) {            addCriterion(\"nick_name in\", values, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameNotIn(List<String> values) {            addCriterion(\"nick_name not in\", values, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameBetween(String value1, String value2) {            addCriterion(\"nick_name between\", value1, value2, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNickNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNickNameNotBetween(String value1, String value2) {            addCriterion(\"nick_name not between\", value1, value2, \"nickName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteIsNull() {            addCriterion(\"note is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteIsNotNull() {            addCriterion(\"note is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteEqualTo(String value) {            addCriterion(\"note =\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteNotEqualTo(String value) {            addCriterion(\"note <>\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteGreaterThan(String value) {            addCriterion(\"note >\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteGreaterThanOrEqualTo(String value) {            addCriterion(\"note >=\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteLessThan(String value) {            addCriterion(\"note <\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteLessThanOrEqualTo(String value) {            addCriterion(\"note <=\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteLike(String value) {            addCriterion(\"note like\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteNotLike(String value) {            addCriterion(\"note not like\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteIn(List<String> values) {            addCriterion(\"note in\", values, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteNotIn(List<String> values) {            addCriterion(\"note not in\", values, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteBetween(String value1, String value2) {            addCriterion(\"note between\", value1, value2, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteNotBetween(String value1, String value2) {            addCriterion(\"note not between\", value1, value2, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeIsNull() {            addCriterion(\"create_time is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeIsNotNull() {            addCriterion(\"create_time is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeEqualTo(Date value) {            addCriterion(\"create_time =\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeNotEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeNotEqualTo(Date value) {            addCriterion(\"create_time <>\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeGreaterThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeGreaterThan(Date value) {            addCriterion(\"create_time >\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeGreaterThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeGreaterThanOrEqualTo(Date value) {            addCriterion(\"create_time >=\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeLessThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeLessThan(Date value) {            addCriterion(\"create_time <\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeLessThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeLessThanOrEqualTo(Date value) {            addCriterion(\"create_time <=\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeIn(List<Date> values) {            addCriterion(\"create_time in\", values, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeNotIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeNotIn(List<Date> values) {            addCriterion(\"create_time not in\", values, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeBetween(Date value1, Date value2) {            addCriterion(\"create_time between\", value1, value2, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeNotBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeNotBetween(Date value1, Date value2) {            addCriterion(\"create_time not between\", value1, value2, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeIsNull() {            addCriterion(\"login_time is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeIsNotNull() {            addCriterion(\"login_time is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeEqualTo(Date value) {            addCriterion(\"login_time =\", value, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeNotEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeNotEqualTo(Date value) {            addCriterion(\"login_time <>\", value, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeGreaterThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeGreaterThan(Date value) {            addCriterion(\"login_time >\", value, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeGreaterThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeGreaterThanOrEqualTo(Date value) {            addCriterion(\"login_time >=\", value, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeLessThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeLessThan(Date value) {            addCriterion(\"login_time <\", value, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeLessThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeLessThanOrEqualTo(Date value) {            addCriterion(\"login_time <=\", value, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeIn(List<Date> values) {            addCriterion(\"login_time in\", values, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeNotIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeNotIn(List<Date> values) {            addCriterion(\"login_time not in\", values, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeBetween(Date value1, Date value2) {            addCriterion(\"login_time between\", value1, value2, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLoginTimeNotBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLoginTimeNotBetween(Date value1, Date value2) {            addCriterion(\"login_time not between\", value1, value2, \"loginTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusIsNull() {            addCriterion(\"status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusIsNotNull() {            addCriterion(\"status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusEqualTo(Integer value) {            addCriterion(\"status =\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusNotEqualTo(Integer value) {            addCriterion(\"status <>\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusGreaterThan(Integer value) {            addCriterion(\"status >\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"status >=\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusLessThan(Integer value) {            addCriterion(\"status <\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"status <=\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusIn(List<Integer> values) {            addCriterion(\"status in\", values, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusNotIn(List<Integer> values) {            addCriterion(\"status not in\", values, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusBetween(Integer value1, Integer value2) {            addCriterion(\"status between\", value1, value2, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"status not between\", value1, value2, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setValue", "params": ["Short"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(Short s) {        this.value = s;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ShortTag.java", "stars": "2", "class": {"name": "ShortTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Short", "snippet": "    public Short getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ShortTag.java", "stars": "2", "class": {"name": "ShortTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ShortTag.java", "stars": "2", "class": {"name": "ShortTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ShortTag.java", "stars": "2", "class": {"name": "ShortTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "writeData", "params": ["DataOutputStream"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeData(DataOutputStream dos) throws IOException {        // Indicates the string        dos.write(getID());        //Create a new DataOutputStream        ByteArrayOutputStream os = new ByteArrayOutputStream();        CountingOutputStream cos = new CountingOutputStream(os);        DataOutputStream tempDos = new DataOutputStream(cos);        tempDos.writeShort(name.getBytes(StandardCharsets.UTF_8).length);        tempDos.write(name.getBytes(StandardCharsets.UTF_8));        tempDos.writeShort(value);        dos.writeInt(cos.getCount());        dos.write(os.toByteArray());        tempDos.close();    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ShortTag.java", "stars": "2", "class": {"name": "ShortTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "createFromData", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "Tag<Short>", "snippet": "    public Tag<Short> createFromData(byte[] value) {        ByteBuffer wrappedFloat = ByteBuffer.wrap(value);        this.value = wrappedFloat.getShort();        wrappedFloat.clear();        return this;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ShortTag.java", "stars": "2", "class": {"name": "ShortTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte getID() {        return 5;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ShortTag.java", "stars": "2", "class": {"name": "ShortTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "setTimeout", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setTimeout(final int timeoutMillis) {    _mailTimeout = timeoutMillis;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setConnectionTimeout", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setConnectionTimeout(final int timeoutMillis) {    _connectionTimeout = timeoutMillis;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalAttachmentMaxSize", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setTotalAttachmentMaxSize(final long sizeInBytes) {    if (sizeInBytes < 1) {      throw new IllegalArgumentException(          \"attachment max size can't be 0 or negative\");    }    _totalAttachmentMaxSizeInByte = sizeInBytes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableAttachementEmbedment", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage enableAttachementEmbedment(final boolean toEnable) {    this._enableAttachementEmbedment = toEnable;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAllToAddress", "params": ["Collection<String>"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage addAllToAddress(final Collection<? extends String> addresses) {    this._toAddress.addAll(addresses);    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addToAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage addToAddress(final String address) {    this._toAddress.add(address);    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFromAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage setFromAddress(final String fromAddress) {    this._fromAddress = fromAddress;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTLS", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage setTLS(final String tls) {    this._tls = tls;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAuth", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage setAuth(final boolean auth) {    this._usesAuth = auth;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAttachment", "params": ["File"], "throws": ["MessagingException"], "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage addAttachment(final File file) throws MessagingException {    return addAttachment(file.getName(), file);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAttachment", "params": ["String", "File"], "throws": ["MessagingException"], "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage addAttachment(final String attachmentName, final File file)      throws MessagingException {    this._totalAttachmentSizeSoFar += file.length();    if (this._totalAttachmentSizeSoFar > _totalAttachmentMaxSizeInByte) {      throw new MessageAttachmentExceededMaximumSizeException(          \"Adding attachment '\" + attachmentName              + \"' will exceed the allowed maximum size of \"              + _totalAttachmentMaxSizeInByte);    }    final BodyPart attachmentPart = new MimeBodyPart();    final DataSource fileDataSource = new FileDataSource(file);    attachmentPart.setDataHandler(new DataHandler(fileDataSource));    attachmentPart.setFileName(attachmentName);    this._attachments.add(attachmentPart);    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAttachment", "params": ["String", "InputStream"], "throws": ["MessagingException"], "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage addAttachment(final String attachmentName, final InputStream stream)      throws MessagingException {    final BodyPart attachmentPart = new MimeBodyPart(stream);    attachmentPart.setFileName(attachmentName);    this._attachments.add(attachmentPart);    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkSettings", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkSettings() {    if (this._mailHost == null) {      throw new RuntimeException(\"Mail host not set.\");    }    if (this._fromAddress == null || this._fromAddress.length() == 0) {      throw new RuntimeException(\"From address not set.\");    }    if (this._subject == null) {      throw new RuntimeException(\"Subject cannot be null\");    }    if (this._toAddress.size() == 0) {      throw new RuntimeException(\"T\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendEmail", "params": [], "throws": ["MessagingException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void sendEmail() throws MessagingException {    checkSettings();    final Properties props = new Properties();    if (this._usesAuth) {      props.put(\"mail.smtp.auth\", \"true\");      props.put(\"mail.user\", this._mailUser);      props.put(\"mail.password\", this._mailPassword);    } else {      props.put(\"mail.smtp.auth\", \"false\");    }    props.put(\"mail.smtp.host\", this._mailHost);    props.put(\"mail.smtp.port\", this._mailPort);    props.put(\"mail.smtp.timeout\", _mailTimeout);    props.put(\"mail.smtp.connectiontimeout\", _connectionTimeout);    props.put(\"mail.smtp.starttls.enable\", this._tls);    props.put(\"mail.smtp.ssl.trust\", this._mailHost);    final JavaxMailSender sender = this.creator.createSender(props);    final Message message = sender.createMessage();    final InternetAddress from = new InternetAddress(this._fromAddress, false);    message.setFrom(from);    for (final String toAddr : this._toAddress) {      message.addRecipient(Message.RecipientType.TO, new InternetAddress(          toAddr, false));    }    message.setSubject(this._subject);    message.setSentDate(new Date());    if (this._attachments.size() > 0) {      final MimeMultipart multipart =          this._enableAttachementEmbedment ? new MimeMultipart(\"related\")              : new MimeMultipart();      final BodyPart messageBodyPart = new MimeBodyPart();      messageBodyPart.setContent(this._body.toString(), this._mimeType);      multipart.addBodyPart(messageBodyPart);      // Add attachments      for (final BodyPart part : this._attachments) {        multipart.addBodyPart(part);      }      message.setContent(multipart);    } else {      message.setContent(this._body.toString(), this._mimeType);    }    retryConnectToSMTPServer(sender);    retrySendMessage(sender, message);    sender.close();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connectToSMTPServer", "params": ["JavaxMailSender"], "throws": ["MessagingException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void connectToSMTPServer(final JavaxMailSender s) throws MessagingException {    if (this._usesAuth) {      s.connect(this._mailHost, this._mailPort, this._mailUser, this._mailPassword);    } else {      s.connect();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "retryConnectToSMTPServer", "params": ["JavaxMailSender"], "throws": ["MessagingException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void retryConnectToSMTPServer(final JavaxMailSender s) throws MessagingException {    int attempt;    for (attempt = 0; attempt < MAX_EMAIL_RETRY_COUNT; attempt++) {      try {        connectToSMTPServer(s);        return;      } catch (final Exception e) {        this.logger.error(\"Connecting to SMTP server failed, attempt: \" + attempt, e);      }    }    s.close();    throw new MessagingException(\"Failed to connect to SMTP server after \"        + attempt + \" attempts.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "retrySendMessage", "params": ["JavaxMailSender", "Message"], "throws": ["MessagingException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void retrySendMessage(final JavaxMailSender s, final Message message)      throws MessagingException {    int attempt;    for (attempt = 0; attempt < MAX_EMAIL_RETRY_COUNT; attempt++) {      try {        s.sendMessage(message, message.getRecipients(Message.RecipientType.TO));        return;      } catch (final Exception e) {        this.logger.error(\"Sending email messages failed, attempt: \" + attempt, e);      }    }    s.close();    throw new MessagingException(\"Failed to send email messages after \"        + attempt + \" attempts.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBody", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setBody(final String body, final String mimeType) {    this._body = new StringBuffer(body);    this._mimeType = mimeType;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMimeType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage setMimeType(final String mimeType) {    this._mimeType = mimeType;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "println", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage println(final Object str) {    this._body.append(str);    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBody", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getBody() {    return this._body.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBody", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setBody(final String body) {    setBody(body, this._mimeType);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSubject() {    return this._subject;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubject", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage setSubject(final String subject) {    this._subject = subject;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMailPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMailPort() {    return this._mailPort;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessage.java", "stars": "18", "class": {"name": "EmailMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void actionPerformed(ActionEvent e) {            CpuConfigurationDialog.this.dispose();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/CpuConfigurationDialog.java", "stars": "4", "class": {"name": "SwingAction", "extends": "AbstractAction", "implements": null, "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void actionPerformed(ActionEvent evt) {            int new_clock;            String s = btnGroup.getSelection().getActionCommand();            if (s.equals(\"custom\")) {                s = txtCustomclock.getText();            }            try {                new_clock = Integer.parseInt(s);                if (new_clock <= 0 || new_clock > 10000000) {                    JOptionPane.showMessageDialog(                            null,                            \"100000(100kHz)\uff5e10000000(10MHz)\u306e\u9593\u306e\u6570\u5024\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\",                            \"ERROR\",                            JOptionPane.ERROR_MESSAGE);                    return ;                }            }            catch (NumberFormatException e) {                JOptionPane.showMessageDialog(                        null,                        \"\u4e0d\u6b63\u306a\u6570\u5024\u3067\u3059: \" + s,                        \"ERROR\",                        JOptionPane.ERROR_MESSAGE);                return ;            }            JR100.setPropertyOfCpuClockFrequency(new_clock);            CpuConfigurationDialog.this.dispose();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/CpuConfigurationDialog.java", "stars": "4", "class": {"name": "SwingAction_1", "extends": "AbstractAction", "implements": null, "modifiers": ["private"]}}, {"method_name": "peerExtend", "params": ["Map<String,String>", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void peerExtend(Map<String, String> diffPeerHostConfig, InitConfigEntity configEntity) {        //\u5728\u4e3b\u8282\u70b9\u4fee\u6539crypto-config.yaml\u6587\u4ef6\uff0c\u6dfb\u52a0\u65b0\u8282\u70b9hostname,\u7f16\u5199\u751f\u6210\u8bc1\u4e66\u547d\u4ee4\u884c\uff0c\u53c2\u6570extend\uff0c\u6267\u884c\u547d\u4ee4\u751f\u6210\u65b0\u8282\u70b9\u8bc1\u4e66,\u751f\u6210\u65b0\u589e\u8282\u70b9\u7684compose\u6587\u4ef6        //\u5728crypto-config\u914d\u7f6e\u6587\u4ef6\u6dfb\u52a0\u65b0\u8282\u70b9hostName\uff0c\u8c03\u7528generate.sh\u751f\u6210\u65b0\u8282\u70b9\u8bc1\u4e66        // log.info(\"\u5728crypto-config\u914d\u7f6e\u6587\u4ef6\u6dfb\u52a0\u65b0\u8282\u70b9hostName\uff0c\u8c03\u7528generate.sh\u751f\u6210\u65b0\u8282\u70b9\u8bc1\u4e66\");        log.info(\"Add a new node hostName in the crypto-config configuration file, run generate.sh to generate a new node certificate\");        /*initializer.reCreateNewPeerConfigFile(configEntity);*/        fabricConfigGen.cryptoGen(configEntity);        configFileGen.createExtendCerts();        //\u751f\u6210\u65b0\u8282\u70b9\u7684docker-compose\u6587\u4ef6        // log.info(\"\u751f\u6210\u65b0\u8282\u70b9\u7684docker-compose\u6587\u4ef6\");        log.info(\"Generate a docker-compose file for the new node\");        Map<String, List<String>> peerHostGroup = dockerConfigGen.groupHostByIp(diffPeerHostConfig);        Map<String, String> ipPathMap = this.createNewPeerDockerFile(configEntity, peerHostGroup);        //\u5c06\u65b0\u751f\u6210\u7684\u8bc1\u4e66\u62f7\u8d1d\u5230\u4e3b\u8282\u70b9\u5b89\u88c5\u76ee\u5f55        // log.info(\"\u5c06\u65b0\u751f\u6210\u7684\u8bc1\u4e66\u62f7\u8d1d\u5230\u4e3b\u8282\u70b9\u5b89\u88c5\u76ee\u5f55\");        log.info(\"Copy the new-generated certificate to the master node installation directory\");        fileService.masterCopyCryptoConfig();        // log.info(\"\u6ce8\u518c\u65b0Peer\u8282\u70b9\u89d2\u8272\");        log.info(\"Register a new Peer node role\");        List<String> ports = this.registerNewPeerRole(peerHostGroup);        // log.info(\"\u63a8\u9001\u65b0peer\u7684\u5b89\u88c5\u6587\u4ef6\");        log.info(\"Send new peer installation file\");        this.sendNewPeerFile(ipPathMap, configEntity);        //\u542f\u52a8\u65b0\u8282\u70b9        // log.info(\"\u542f\u52a8\u65b0\u65b0\u589epeer\");        log.info(\"Run the new peer node\");        List<ServerEntity> serverList = this.startNewPeer(ipPathMap, ports, configEntity);        // log.info(\"\u7b49\u5f85\u6240\u6709 peer \u542f\u52a8\u6210\u529f\");        log.info(\"Wait for all peer nodes to start successfully\");        while (serverList.stream().anyMatch(s -> s.getStatus() != InstallStatusEnum.SUCCESS)) {            try {                Thread.sleep(5000);            } catch (Exception e) {                e.printStackTrace();            }        }        // \u5c06\u65b0\u8282\u70b9\u7684\u57df\u540d\u66f4\u65b0\u5230cli\u6240\u5728\u5bbf\u4e3b\u673a\u7684host        // \u5728\u5bbf\u4e3b\u673a\u9632\u706b\u5899\u4e2d\u6253\u5f00\u65b0\u8282\u70b9\u7684\u7aef\u53e3        // log.info(\"\u5c06\u65b0\u8282\u70b9\u7684\u57df\u540d\u5199\u5165\u5230hosts\uff0c\u5728\u9632\u706b\u5899\u4e2d\u5f00\u542f\u65b0\u8282\u70b9\u7aef\u53e3\");        log.info(\"Write the domain name of the new node to the hosts, and open the new node port in the firewall\");        environmentService.updateNewPeerHostPort(diffPeerHostConfig);        // \u542f\u52a8\u4e00\u4e2a cli \u5bb9\u5668        // log.info(\"\u4e3b\u8282\u70b9\u521b\u5efacli\u5bb9\u5668\");        log.info(\"The master node creates a cli container\");        if (!fabricCliService.createCliContainer(modeService.getInstallPath() + \"cli\", configEntity)) {            // log.error(\"\u521b\u5efacli\u5bb9\u5668\u5931\u8d25\");            log.error(\"Failed to create cli container\");            return;        }        //\u83b7\u53d6\u6269\u5bb9peer\u53ef\u4ee5\u52a0\u5165\u7684\u4e1a\u52a1\u94fe\u5217\u8868        Set<String> channelList = new HashSet<>();        try {            channelList.addAll(fabricCliService.getAllChannels(configEntity));        } catch (IOException e) {            e.printStackTrace();        }        //\u65b0\u8282\u70b9\u52a0\u5165\u94fe        if (!CollectionUtils.isEmpty(channelList)) {            // log.info(\"\u65b0\u589e\u8282\u70b9\u52a0\u5165\u94fe\");            log.info(\"New node joins the chain\");            Set<String> joinChannels = newPeerJoinChannel(configEntity, diffPeerHostConfig, channelList);            // log.info(\"\u65b0\u589e\u8282\u70b9\u52a0\u5165\u94fe-joinChannels=\" + JSON.toJSONString(joinChannels));            log.info(\"New node joins the chain - joinChannels=\" + JSON.toJSONString(joinChannels));        }        // log.info(\"\u5c06\u65b0 peer(s) \u4fe1\u606f\u52a0\u5165\u672c\u5730\u6570\u636e\u5e93\");        log.info(\"Add the new peer(s) node information to the local database\");        // \u66f4\u65b0\u6570\u636e\u5e93        for (String host : diffPeerHostConfig.keySet()) {            String ip = diffPeerHostConfig.get(host);            int index = ip.lastIndexOf(\":\");            String port = ip.substring(index + 1);            ip = ip.substring(0, index);            NodeDO nodeDO = new NodeDO();            nodeDO.setOrgMspId(configEntity.getOrgMSPID());            nodeDO.setRole(RoleEnum.PEER);            nodeDO.setHostName(host);            nodeDO.setIp(ip);            nodeDO.setPort(Integer.parseInt(port));            nodeDO.setStatus(InstallStatusEnum.SUCCESS);            try {                this.checkPointDb.addNodeRecord(nodeDO);            } catch (SQLException e) {                // log.error(String.format(\"\u6dfb\u52a0\u65b0 peer \u8282\u70b9 %s \u8bb0\u5f55\u5230\u6570\u636e\u5e93\u5f02\u5e38\", host), e);                log.error(String.format(\"An exception occurred while recording the new peer node %s to the database\", host), e);                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/PeerExtendBiz.java", "stars": "7", "class": {"name": "PeerExtendBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerNewPeerRole", "params": ["Map<String,List>"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> registerNewPeerRole(Map<String, List<String>> peerHostGroup) {        List<String> ports = new ArrayList<>();        for (String ip : peerHostGroup.keySet()) {            List<String> hostList = peerHostGroup.get(ip);            for (String host : hostList) {                int index = host.lastIndexOf(\":\");                ports.add(host.substring(index + 1));            }            this.rolesBiz.addRole(RoleEnum.PEER, \"http://\" + ip + \":8080\", ip, ports);        }        return ports;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/PeerExtendBiz.java", "stars": "7", "class": {"name": "PeerExtendBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendNewPeerFile", "params": ["Map<String,String>", "InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendNewPeerFile(Map<String, String> ipPathMap, InitConfigEntity configEntity) {        for (String ip : ipPathMap.keySet()) {            String path = ipPathMap.get(ip);            String folderName = new File(path).getName();            if (NetUtil.ipIsMine(ip)) {                fileService.copyFiles(RoleEnum.PEER, ip, folderName, modeService.getInstallPath(), folderName, configEntity, null);                this.rolesBiz.setServerStatus(ip, InstallStatusEnum.DOWNLOADED);            } else {                // log.info(\"\u4e3a\u65b0\u589e peer \u6253\u5305\u5b89\u88c5\u5305\");                log.info(\"Package  for the new peer node\");                String packFilePath = fileService.packExtendNodeFiles(ip, folderName, RoleEnum.PEER, configEntity);                // \u53d1\u9001\u5230\u8282\u70b9\u542f\u52a8                // log.info(\"\u5c06\u751f\u6210\u7684\u6587\u4ef6\u5305\u53d1\u9001\u5230\u65b0\u589e peer \u8282\u70b9\");                log.info(\"Send the  package to the new peer node\");                remoteService.pushSlaveInstallPackage(ip, packFilePath, configEntity);            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/PeerExtendBiz.java", "stars": "7", "class": {"name": "PeerExtendBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startNewPeer", "params": ["Map<String,String>", "List<String>", "InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "List<ServerEntity>", "snippet": "    private List<ServerEntity> startNewPeer(Map<String, String> ipPathMap, List<String> ports, InitConfigEntity configEntity) {        List<ServerEntity> serverList = this.rolesBiz.getRolesMap().get(RoleEnum.PEER);        for (String ip : ipPathMap.keySet()) {            // log.info(String.format(\"\u53d1\u9001\u5b89\u88c5\u547d\u4ee4\u5230\u65b0\u589e peer \u8282\u70b9 %s\", ip));            log.info(String.format(\"Send installation command to the new peer node %s\", ip));            String path = ipPathMap.get(ip);            String folderName = new File(path).getName();            // \u5982\u679c\u4e3b\u8282\u70b9\u4e5f\u662f\u6b64\u89d2\u8272\uff0c\u5219\u5148\u5b89\u88c5            if (NetUtil.ipIsMine(ip)) {                Map<String, String> hosts = environmentService.getRoleNeedSetHost(RoleEnum.PEER, configEntity);                if (installService.startRole(RoleEnum.PEER, ports, hosts, folderName)) {                    this.rolesBiz.setServerStatus(ip, InstallStatusEnum.SUCCESS);                }            } else {                for (ServerEntity server : serverList) {                    if (server.getHost().equalsIgnoreCase(ip)) {                        // \u53d1\u9001\u5b89\u88c5\u6307\u4ee4\u7ed9\u4ece\u8282\u70b9                        do {                            HttpInstallResponse response = remoteService.sendInstallCommand(server, RoleEnum.PEER, folderName, configEntity);                            if (ResponseCode.SUCCESS.getCode().equals(response.getCode())) {                                // log.warn(String.format(\"\u53d1\u9001\u5b89\u88c5\u6307\u4ee4\u7ed9 %s \u8282\u70b9\u5b89\u88c5 peer \u6210\u529f\", ip));                                log.warn(String.format(\"Send installation instructions to %s node to install peer successfully\", ip));                                this.rolesBiz.setServerStatus(ip, InstallStatusEnum.INSTALLING);                                break;                            }                            // log.warn(String.format(\"\u53d1\u9001\u5b89\u88c5\u6307\u4ee4\u7ed9 %s \u8282\u70b9\u5b89\u88c5 peer \u5931\u8d25\uff0c\u7a0d\u540e\u91cd\u8bd5...\", ip));                            log.warn(String.format(\"Send installation instruction to %s, failed to install peer node, try again later...\", ip));                            try {                                Thread.sleep(3000);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                        } while (true);                        break;                    }                }            }        }        return serverList;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/PeerExtendBiz.java", "stars": "7", "class": {"name": "PeerExtendBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newPeerJoinChannel", "params": ["InitConfigEntity", "Map<String,String>", "Set<String>"], "throws": null, "modifiers": ["private"], "return_type": "Set<String>", "snippet": "    private Set<String> newPeerJoinChannel(InitConfigEntity configEntity, Map<String, String> diffPeerHostConifg, Set<String> channelList) {        //\u83b7\u53d6\u8fd0\u884c\u811a\u672c\u6240\u9700\u53c2\u6570\uff0cpeerAddress\u3001peerTlsRoot\u3001peerTlsCert,peerTlsKey\u3001orderer\u7684\u57df\u540d:\u7aef\u53e3\u3001\u5bf9\u5e94orderer\u7684ca\u8bc1\u4e66\u3001\u52a0\u5165\u94fe\u7684\u540d\u79f0\u3001        String privateChannel = \"privatechannel\" + configEntity.getOrgMSPID().toLowerCase();        String ordererHost = configEntity.getOrdererHostConfig().keySet().iterator().next();        String ordererPort = configEntity.getOrdererHostConfig().get(ordererHost).split(\":\")[1];        String orderer = ordererHost + \":\" + ordererPort;        String ordererCaPath = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/%s/orderers/%s/msp/tlscacerts/tlsca.%s-cert.pem\", configEntity.getOrdererDomain(), ordererHost, configEntity.getOrdererDomain());        Set<String> joinChannels = null;        for (String peerHost : diffPeerHostConifg.keySet()) {            //\u6269\u5bb9\u8282\u70b9\u9009\u62e9\u52a0\u5165\u94fe            joinChannels = this.selectJoinChannel(channelList, privateChannel);            //\u521d\u59cb\u5316\u73af\u5883\u53c2\u6570            String peerPort = diffPeerHostConifg.get(peerHost).split(\":\")[1];            String peerAddress = peerHost + \":\" + peerPort;            String peerTlsCaPath = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/%s/peers/%s/tls/ca.crt\", configEntity.getPeerDomain(), peerHost);            String peerTlsCertPath = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/%s/peers/%s/tls/server.crt\", configEntity.getPeerDomain(), peerHost);            String peerTlsKeyPath = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/%s/peers/%s/tls/server.key\", configEntity.getPeerDomain(), peerHost);            //\u521d\u59cb\u5316\u6267\u884c\u547d\u4ee4            for (String joinChannel : joinChannels) {                String cmd = String.format(\"docker exec cli bash ./scripts/newPeerJoinChannel.sh -c %s -o %s -O %s -p %s -r %s -e %s -k %s\", joinChannel, orderer, ordererCaPath, peerAddress, peerTlsCaPath, peerTlsCertPath, peerTlsKeyPath);                //\u6267\u884cpeer\u52a0\u5165\u94fe\u7684\u547d\u4ee4                try {                    FileUtils.copyFile(new File(modeService.getInitDir() + \"template/newPeerJoinChannel.sh\"), new File(modeService.getInstallPath() + \"cli/scripts/newPeerJoinChannel.sh\"));                    ProcessUtil.Result result = ProcessUtil.execCmd(cmd, null, modeService.getInstallPath() + \"cli\");                } catch (Exception e) {                    // log.error(\"\u6267\u884c docker \u811a\u672c\u5f02\u5e38\", e);                    log.error(\"An exception occurred while executing the docker script\", e);                    e.printStackTrace();                }            }        }        return joinChannels;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/PeerExtendBiz.java", "stars": "7", "class": {"name": "PeerExtendBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectJoinChannel", "params": ["Set<String>", "String"], "throws": null, "modifiers": ["private"], "return_type": "Set<String>", "snippet": "    private Set<String> selectJoinChannel(Set<String> queryChannelList, String privateChannel) {        Set<String> selectChannels = new HashSet<>();        Map<String, String> selectChannelIndexMap = new HashMap<>(16);        //\u9009\u62e9\u9700\u8981\u52a0\u5165\u7684\u4e1a\u52a1\u94fe        // System.out.println(\"\u8bf7\u6839\u636e\u4ee5\u4e0b\u5217\u8868\uff0c\u9009\u62e9\u6269\u5bb9peer\u9700\u8981\u52a0\u5165\u7684\u4e1a\u52a1\u94fe\u3002\");        System.out.println(\"Please select the business chain that the expanded peer node needs to join according to the following list\");        StringBuilder builder = new StringBuilder();        int nextLine = 1;        for (String channel : queryChannelList) {            if (channel.equals(privateChannel) || StringUtils.isEmpty(channel)) {                continue;            }            builder.append(nextLine).append(\")\").append(channel).append(\"\\t\");            selectChannelIndexMap.put(Integer.toString(nextLine), channel);            if (nextLine % 5 == 0) {                builder.append(\"\\n\");            }            nextLine += 1;        }        System.out.println(builder.toString());        Scanner sc = new Scanner(System.in);        // System.out.print(\"\u8bf7\u8f93\u5165\u9700\u8981\u52a0\u5165\u7684\u94fe\u540d\u7f16\u53f7(\u591a\u4e8e\u4e00\u4e2a\u7f16\u53f7\u65f6\u4ee5\u201c,\u201d\u5206\u5272,\u8bf7\u56de\u8f66\u540e\u8f93\u5165):\");        System.out.print(\"Please enter the chain name number to be added (if more than one number is divided by \",\", please enter after entering):\");        String inputIndexList = \"\";        if (sc.hasNextLine()) {            inputIndexList = sc.nextLine();            // System.out.println(\"\u7528\u6237\u8f93\u5165\" + inputIndexList);            System.out.println(\"User input\" + inputIndexList);        }        sc.close();        if (StringUtils.isEmpty(inputIndexList)) {            // log.info(\"\u6269\u5bb9\u8282\u70b9\u2014\u2014\u7528\u6237\u8f93\u5165\u4e3a\u7a7a\uff0c\u9ed8\u8ba4\u52a0\u5165\u672c\u673a\u6784\u7684\u6240\u6709\u4e1a\u52a1\u94fe\");            log.info(\"Expansion node -- User input is empty, default to join all business chains of the institution\");            selectChannels.addAll(queryChannelList);            selectChannels.remove(\"\");        } else {            String[] channelIndexArray = inputIndexList.split(\",\");            Arrays.stream(channelIndexArray).forEach(i -> {                String channelName = selectChannelIndexMap.get(i);                if (!StringUtils.isEmpty(channelName)) {                    selectChannels.add(channelName);                }            });            selectChannels.add(privateChannel);        }        return selectChannels;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/PeerExtendBiz.java", "stars": "7", "class": {"name": "PeerExtendBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createNewPeerDockerFile", "params": ["InitConfigEntity", "Map<String,List>"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> createNewPeerDockerFile(InitConfigEntity configEntity, Map<String, List<String>> peerHostGroup) {        Map<String, String> ipPathMap = new HashMap<>(16);        for (String peerServerIp : peerHostGroup.keySet()) {            try {                String folderName = UUID.randomUUID().toString();                folderName = StringUtils.deleteAny(folderName, \"-\");                folderName = \"new-\" + folderName;                String filePath = dockerConfigGen.createPeerYamlFile(configEntity, peerServerIp, peerHostGroup.get(peerServerIp), \"fabric-net/dockerFile\" + File.separator + \"peer-\" + folderName + File.separator);                String parentPath = new File(filePath).getParent();                ipPathMap.put(peerServerIp, parentPath);            } catch (IOException e) {                e.printStackTrace();            }        }        return ipPathMap;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/PeerExtendBiz.java", "stars": "7", "class": {"name": "PeerExtendBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(NettyGameAppApplication.class, args);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/NettyGameAppApplication.java", "stars": "1", "class": {"name": "NettyGameAppApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"entity\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency entity for procedure PlayerRightClicks!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure PlayerRightClicks!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure PlayerRightClicks!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure PlayerRightClicks!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure PlayerRightClicks!\");\t\t\treturn;\t\t}\t\tEntity entity = (Entity) dependencies.get(\"entity\");\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif ((((world.getBlockState(new BlockPos((int) x, (int) y, (int) z))).getBlock() == Blocks.FARMLAND.getDefaultState().getBlock())\t\t\t\t&& (((entity instanceof LivingEntity) ? ((LivingEntity) entity).getHeldItemMainhand() : ItemStack.EMPTY)\t\t\t\t\t\t.getItem() == new ItemStack(Items.WOODEN_SHOVEL, (int) (1)).getItem()))) {\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.AIR.getDefaultState(), 3);\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.DIRT.getDefaultState(), 3);\t\t} else if ((((world.getBlockState(new BlockPos((int) x, (int) y, (int) z))).getBlock() == Blocks.FARMLAND.getDefaultState().getBlock())\t\t\t\t&& (((entity instanceof LivingEntity) ? ((LivingEntity) entity).getHeldItemMainhand() : ItemStack.EMPTY)\t\t\t\t\t\t.getItem() == new ItemStack(Items.STONE_SHOVEL, (int) (1)).getItem()))) {\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.AIR.getDefaultState(), 3);\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.DIRT.getDefaultState(), 3);\t\t} else if ((((world.getBlockState(new BlockPos((int) x, (int) y, (int) z))).getBlock() == Blocks.FARMLAND.getDefaultState().getBlock())\t\t\t\t&& (((entity instanceof LivingEntity) ? ((LivingEntity) entity).getHeldItemMainhand() : ItemStack.EMPTY)\t\t\t\t\t\t.getItem() == new ItemStack(Items.IRON_SHOVEL, (int) (1)).getItem()))) {\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.AIR.getDefaultState(), 3);\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.DIRT.getDefaultState(), 3);\t\t} else if ((((world.getBlockState(new BlockPos((int) x, (int) y, (int) z))).getBlock() == Blocks.FARMLAND.getDefaultState().getBlock())\t\t\t\t&& (((entity instanceof LivingEntity) ? ((LivingEntity) entity).getHeldItemMainhand() : ItemStack.EMPTY)\t\t\t\t\t\t.getItem() == new ItemStack(Items.GOLDEN_SHOVEL, (int) (1)).getItem()))) {\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.AIR.getDefaultState(), 3);\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.DIRT.getDefaultState(), 3);\t\t} else if ((((world.getBlockState(new BlockPos((int) x, (int) y, (int) z))).getBlock() == Blocks.FARMLAND.getDefaultState().getBlock())\t\t\t\t&& (((entity instanceof LivingEntity) ? ((LivingEntity) entity).getHeldItemMainhand() : ItemStack.EMPTY)\t\t\t\t\t\t.getItem() == new ItemStack(Items.DIAMOND_SHOVEL, (int) (1)).getItem()))) {\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.AIR.getDefaultState(), 3);\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.DIRT.getDefaultState(), 3);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/PlayerRightClicksProcedure.java", "stars": "2", "class": {"name": "PlayerRightClicksProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRightClickBlock", "params": ["PlayerInteractEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onRightClickBlock(PlayerInteractEvent.RightClickBlock event) {\t\tPlayerEntity entity = event.getPlayer();\t\tint i = event.getPos().getX();\t\tint j = event.getPos().getY();\t\tint k = event.getPos().getZ();\t\tWorld world = event.getWorld();\t\tjava.util.HashMap<String, Object> dependencies = new java.util.HashMap<>();\t\tdependencies.put(\"x\", i);\t\tdependencies.put(\"y\", j);\t\tdependencies.put(\"z\", k);\t\tdependencies.put(\"world\", world);\t\tdependencies.put(\"entity\", entity);\t\tdependencies.put(\"event\", event);\t\tthis.executeProcedure(dependencies);\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/PlayerRightClicksProcedure.java", "stars": "2", "class": {"name": "PlayerRightClicksProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "isShouldEffect", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isShouldEffect() {        return shouldEffect;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setShouldEffect", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setShouldEffect(boolean shouldEffect) {        MistuneRenderManager.shouldEffect = shouldEffect;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMistuneRenderCallback", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Consumer<Integer>", "snippet": "    public static Consumer<Integer> getMistuneRenderCallback() {        return shader -> {            ShaderHelper.setUniformf(\"vertJerkOpt\", shader, vertJerkOpt);            ShaderHelper.setUniformf(\"vertMovementOpt\", shader, vertMovementOpt);            ShaderHelper.setUniformf(\"bottomStaticOpt\", shader, bottomStaticOpt);            ShaderHelper.setUniformf(\"scalinesOpt\", shader, scalinesOpt);            ShaderHelper.setUniformf(\"horzFuzzOpt\", shader, horzFuzzOpt);            ShaderHelper.setUniformf(\"rgbOffsetOpt\", shader, rgbOffsetOpt);            ShaderHelper.setUniformf(\"redMultiplier\", shader, redMultiplier);            ShaderHelper.setUniformf(\"greenMultiplier\", shader, greenMultiplier);            ShaderHelper.setUniformf(\"blueMultiplier\", shader, blueMultiplier);            ShaderHelper.setUniformf(\"brightnessMultiplier\", shader, brightnessMultiplier);            ShaderHelper.setUniformi(\"decolor\", shader, shouldDecolor ? 1 : 0);            ShaderHelper.setUniformi(\"showLeft\", shader, showLeft ? 1 : 0);            ShaderHelper.setUniformi(\"showRight\", shader, showRight ? 1 : 0);        };    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVertJerkOpt", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getVertJerkOpt() {        return vertJerkOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVertJerkOpt", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setVertJerkOpt(float vertJerkOpt) {        MistuneRenderManager.vertJerkOpt = vertJerkOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVertMovementOpt", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getVertMovementOpt() {        return vertMovementOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVertMovementOpt", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setVertMovementOpt(float vertMovementOpt) {        MistuneRenderManager.vertMovementOpt = vertMovementOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBottomStaticOpt", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getBottomStaticOpt() {        return bottomStaticOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBottomStaticOpt", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setBottomStaticOpt(float bottomStaticOpt) {        MistuneRenderManager.bottomStaticOpt = bottomStaticOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScalinesOpt", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getScalinesOpt() {        return scalinesOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setScalinesOpt", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setScalinesOpt(float scalinesOpt) {        MistuneRenderManager.scalinesOpt = scalinesOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHorzFuzzOpt", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getHorzFuzzOpt() {        return horzFuzzOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHorzFuzzOpt", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setHorzFuzzOpt(float horzFuzzOpt) {        MistuneRenderManager.horzFuzzOpt = horzFuzzOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRgbOffsetOpt", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getRgbOffsetOpt() {        return rgbOffsetOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRgbOffsetOpt", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setRgbOffsetOpt(float rgbOffsetOpt) {        MistuneRenderManager.rgbOffsetOpt = rgbOffsetOpt;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRedMultiplier", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getRedMultiplier() {        return redMultiplier;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRedMultiplier", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setRedMultiplier(float redMultiplier) {        MistuneRenderManager.redMultiplier = redMultiplier;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGreenMultiplier", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getGreenMultiplier() {        return greenMultiplier;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGreenMultiplier", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setGreenMultiplier(float greenMultiplier) {        MistuneRenderManager.greenMultiplier = greenMultiplier;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBlueMultiplier", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getBlueMultiplier() {        return blueMultiplier;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBlueMultiplier", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setBlueMultiplier(float blueMultiplier) {        MistuneRenderManager.blueMultiplier = blueMultiplier;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBrightnessMultiplier", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getBrightnessMultiplier() {        return brightnessMultiplier;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBrightnessMultiplier", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setBrightnessMultiplier(float brightnessMultiplier) {        MistuneRenderManager.brightnessMultiplier = brightnessMultiplier;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isShouldDecolor", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isShouldDecolor() {        return shouldDecolor;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setShouldDecolor", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setShouldDecolor(boolean shouldDecolor) {        MistuneRenderManager.shouldDecolor = shouldDecolor;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setShowLeft", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setShowLeft(boolean show) {        showLeft = show;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setShowRight", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setShowRight(boolean show) {        showRight = show;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/Mistuned/MistuneRenderManager.java", "stars": "2", "class": {"name": "MistuneRenderManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLabelsByUserId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getAllLabelsByUserId(int userId) {        List<String> result = new ArrayList<>();        List<Label> list = ld.getAllLabelsByUserId(userId);        for (Label temp: list ) {            result.add(temp.getLabel_name());        }        return result;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/service/impl/LabelServiceImpl.java", "stars": "10", "class": {"name": "LabelServiceImpl", "extends": "BaseServiceImpl", "implements": ["LabelService"], "modifiers": ["public"]}}, {"method_name": "addLabel", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addLabel(String label, int user_id) {        ld.addLabel(label,user_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/service/impl/LabelServiceImpl.java", "stars": "10", "class": {"name": "LabelServiceImpl", "extends": "BaseServiceImpl", "implements": ["LabelService"], "modifiers": ["public"]}}, {"method_name": "deleteLabel", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteLabel(String label, int user_id) {        List<Article> list = ad.getMyArticlesByTag(label,user_id);        if(list != null){            for (Article a:list            ) {                int id =  a.getArticle_id();                String oldTag = ld.getArticleLabel(id);                String newTag = oldTag.replaceAll(\"/\"+label,\"\");                ad.updateArticleTag(newTag,id);            }        }        ld.deleteLabel(label,user_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/service/impl/LabelServiceImpl.java", "stars": "10", "class": {"name": "LabelServiceImpl", "extends": "BaseServiceImpl", "implements": ["LabelService"], "modifiers": ["public"]}}, {"method_name": "updateLabel", "params": ["String", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLabel(String oldLabel, String newLabel, int user_id) {        List<Article> list = ad.getMyArticlesByTag(oldLabel,user_id);        if(list != null){            for (Article a:list            ) {                int id =  a.getArticle_id();                String oldTag = ld.getArticleLabel(id);                String newTag = oldTag.replaceAll(oldLabel,newLabel);                ad.updateArticleTag(newTag,id);            }        }        ld.updateLabel(oldLabel,newLabel,user_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/service/impl/LabelServiceImpl.java", "stars": "10", "class": {"name": "LabelServiceImpl", "extends": "BaseServiceImpl", "implements": ["LabelService"], "modifiers": ["public"]}}, {"method_name": "getLabel", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "Label", "snippet": "    public Label getLabel(String label, int user_id) {        return ld.getLabel(label,user_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/service/impl/LabelServiceImpl.java", "stars": "10", "class": {"name": "LabelServiceImpl", "extends": "BaseServiceImpl", "implements": ["LabelService"], "modifiers": ["public"]}}, {"method_name": "getTagArticleCount", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTagArticleCount(String tag, int user_id) {        List<Article> list = ad.getMyArticlesByTag(tag,user_id);        if(list == null){            return 0;        }        return list.size();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/service/impl/LabelServiceImpl.java", "stars": "10", "class": {"name": "LabelServiceImpl", "extends": "BaseServiceImpl", "implements": ["LabelService"], "modifiers": ["public"]}}, {"method_name": "getOtherTagArticleCount", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getOtherTagArticleCount(String tag, int user_id) {        List<Article> list = ad.getOtherArticlesByTag(tag,user_id);        if(list == null){            return 0;        }        return list.size();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/service/impl/LabelServiceImpl.java", "stars": "10", "class": {"name": "LabelServiceImpl", "extends": "BaseServiceImpl", "implements": ["LabelService"], "modifiers": ["public"]}}, {"method_name": "getArticleLabel", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getArticleLabel(int article_id) {        return ld.getArticleLabel(article_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/service/impl/LabelServiceImpl.java", "stars": "10", "class": {"name": "LabelServiceImpl", "extends": "BaseServiceImpl", "implements": ["LabelService"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(){        System.setProperty(\"java.security.krb5.conf\", conf.getKbKrb5Path());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/HdfsConnCheck.java", "stars": "23", "class": {"name": "HdfsConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "validate", "params": ["DataSourceModel"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void validate(DataSourceModel ma) throws Exception {        Map<String, Object> params = ma.resolveParams();        Set<String> keys = params.keySet();        if(!keys.contains(PARAM_HDFS_PATH)){            throw new Exception(PARAM_HDFS_PATH + \" cannot be found\");        }        if(!String.valueOf(params.get(PARAM_HDFS_PATH))                .startsWith(Hdfs.HDFS_PREFIX)){            throw new Exception(\"The structure of '\" + PARAM_HDFS_PATH + \"' is illegal\");        }        validateKb(params);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/HdfsConnCheck.java", "stars": "23", "class": {"name": "HdfsConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "check", "params": ["DataSource", "File"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void check(DataSource ds, File file) throws Exception {        Map<String, Object> parameters = ds.resolveParams();        File kbFileTmp = null;        try {            boolean isUseKb = isUseKb(parameters);            if(isUseKb && null == file){                if( ds.getId() > 0){                    new File(conf.getStoreTmp()).mkdirs();                    kbFileTmp = getAuthFileFromDataSource(ds, AuthType.KERBERS, conf.getStoreTmp());                    file = kbFileTmp;                }                if(null == file){                    throw new RuntimeException(\"Keytab file has been lost\");                }            }            //Try to get FileSystem            FileSystem fileSystem;            if(isUseKb){                fileSystem = Hdfs.getFileSystem(parameters, file);            }else {                String userName = String.valueOf(parameters.getOrDefault(PARAM_LADP_USERNAME, \"\"));                String password = String.valueOf(parameters.getOrDefault(PARAM_LADP_PASSWORD, \"\"));                if(StringUtils.isNotBlank(userName)) {                    if (conf.isLdapSwitch()) {                        LdapConnector connector = LdapConnector.getInstance(conf.getLdapUrl(), conf.getLdapBaseDn());                        if (!connector.authenticate(userName, password)) {                            throw new RuntimeException(\"LDAP Authenticate failed\");                        }                    } else {                        throw new RuntimeException(\"LDAP module does not be opened\");                    }                }                fileSystem = Hdfs.getFileSystem(parameters, userName);            }            fileSystem.close();        }finally{            if(null != kbFileTmp){                if(!kbFileTmp.delete()){                    logger.info(\"Delete kerberos temp file Failed, Path:\" + kbFileTmp.getPath());                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/HdfsConnCheck.java", "stars": "23", "class": {"name": "HdfsConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        dataSource = h2DbExtension.getDataSource();        systemClock.resetTime();        failsafeExecutor = new FailsafeExecutor(systemClock, dataSource, 5, 1, 1);        helloWorldTask = Tasks.of(\"TestTask\", parameter -> log.info(\"Hello {}\", parameter));        failsafeExecutor.register(helloWorldTask);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/test/java/os/failsafe/executor/FailsafeExecutorTest.java", "stars": "2", "class": {"name": "FailsafeExecutorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        failsafeExecutor.stop();    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/test/java/os/failsafe/executor/FailsafeExecutorTest.java", "stars": "2", "class": {"name": "FailsafeExecutorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldExecuteNextTask", "params": [], "throws": ["InterruptedException", "TimeoutException", "ExecutionException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void shouldExecuteNextTask() throws InterruptedException, TimeoutException, ExecutionException {        Task.Instance instance = helloWorldTask.instance(\" world!\");        String taskInstanceId = failsafeExecutor.execute(instance);        Future<String> execution = this.failsafeExecutor.submitNextExecution().get();        String actualTaskId = execution.get(5, TimeUnit.SECONDS);        assertEquals(taskInstanceId, actualTaskId);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/test/java/os/failsafe/executor/FailsafeExecutorTest.java", "stars": "2", "class": {"name": "FailsafeExecutorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldExecuteNextTaskViaScheduler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shouldExecuteNextTaskViaScheduler() {        Task.ExecutionEndedListener executionEndedListener = Mockito.mock(Task.ExecutionEndedListener.class);        helloWorldTask.subscribe(executionEndedListener);        Task.Instance instance = helloWorldTask.instance(\" world!\");        String taskInstanceId = failsafeExecutor.execute(instance);        this.failsafeExecutor.start();        verify(executionEndedListener, timeout((int) TimeUnit.SECONDS.toMillis(5))).executed(helloWorldTask.getName(), taskInstanceId);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/test/java/os/failsafe/executor/FailsafeExecutorTest.java", "stars": "2", "class": {"name": "FailsafeExecutorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldNotExecuteTaskThatIsAlreadyStarted", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void shouldNotExecuteTaskThatIsAlreadyStarted() throws SQLException {        Task.Instance instance = helloWorldTask.instance(\" world!\");        String taskInstanceId = failsafeExecutor.execute(instance);        TaskInstances taskInstances = new TaskInstances(dataSource, systemClock);        TaskInstance task;        try (Connection connection = dataSource.getConnection()) {            task = taskInstances.findNextTask(connection).get();            task.take(connection);        }        Optional<Future<String>> execution = failsafeExecutor.submitNextExecution();        assertTrue(execution.isEmpty());        task.delete();    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/test/java/os/failsafe/executor/FailsafeExecutorTest.java", "stars": "2", "class": {"name": "FailsafeExecutorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldExecuteTaskThatIsOlderThanTimeout", "params": [], "throws": ["InterruptedException", "TimeoutException", "ExecutionException", "SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void shouldExecuteTaskThatIsOlderThanTimeout() throws InterruptedException, TimeoutException, ExecutionException, SQLException {        Task.Instance instance = helloWorldTask.instance(\" world!\");        String taskInstanceId = failsafeExecutor.execute(instance);        TaskInstances taskInstances = new TaskInstances(dataSource, systemClock);        TaskInstance task;        try (Connection connection = dataSource.getConnection()) {            task = taskInstances.findNextTask(connection).get();            task.take(connection);        }        systemClock.timeTravelBy(Duration.ofMinutes(10));        Future<String> execution = failsafeExecutor.submitNextExecution().get();        String actualTaskId = execution.get(5, TimeUnit.SECONDS);        assertEquals(task.id, actualTaskId);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/test/java/os/failsafe/executor/FailsafeExecutorTest.java", "stars": "2", "class": {"name": "FailsafeExecutorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateSender", "params": ["DevolaySender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateSender(DevolaySender sender){        this.sender.set(sender);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/threads/NDIControlThread.java", "stars": "5", "class": {"name": "NDIControlThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "end", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void end() {        running = false;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/threads/NDIControlThread.java", "stars": "5", "class": {"name": "NDIControlThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();        DocumentBuilder db = null;        try {            db = documentBuilderFactory.newDocumentBuilder();        } catch (ParserConfigurationException e) {            e.printStackTrace();        }        while(running){            if(sender.get().getConnectionCount(0) < 1){                try {                    Thread.sleep(500);                } catch (InterruptedException e) {                    e.printStackTrace();                }                continue;            }            DevolayMetadataFrame metadataFrame = new DevolayMetadataFrame();            if (sender.get().sendCapture(metadataFrame, 0) == DevolayFrameType.METADATA) {                try {                    Document doc = db.parse(new InputSource(new StringReader(metadataFrame.getData())));                    String type = doc.getFirstChild().getNodeName();                    if(type.equals(\"ntk_ptz_pan_tilt_speed\")){                        Element element = (Element) doc.getFirstChild();                        float panSpeed = Float.parseFloat(element.getAttribute(\"pan_speed\"));                        float tiltSpeed = Float.parseFloat(element.getAttribute(\"tilt_speed\"));                        System.out.println(\"Pan speed is \" + panSpeed + \" and tilt speed is \" + tiltSpeed);                        float tilt = 5 * tiltSpeed;                        float pan = 5 * panSpeed;                        System.out.println(\"Pan is \" + pan + \" and tilt is \" + tilt);                        float pitch = entity.pitch - tilt;                        float yaw = entity.yaw - pan;                        System.out.println(\"Yaw is \" + yaw + \" and pitch is \" + pitch);                        entity.setHeadYaw(yaw);                        entity.updatePositionAndAngles(entity.getX(), entity.getY(), entity.getZ(), yaw, pitch);                    } else if(type.equals(\"ntk_ptz_zoom_speed\")){                        Element element = (Element) doc.getFirstChild();                        float zoomSpeed = Float.parseFloat(element.getAttribute(\"zoom_speed\"));                        float fov = 2 * zoomSpeed;                        int newZoom = (int) MathHelper.clamp((entity.getZoom() + fov), -50f, 69f);                        entity.setZoom(newZoom);                    }                } catch (SAXException | IOException e) {                    e.printStackTrace();                }            }            DevolayTally tally = sender.get().getTally(0);            if(tally != null){                entity.setLive(tally.isOnProgram());            }            try {                Thread.sleep(100);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/threads/NDIControlThread.java", "stars": "5", "class": {"name": "NDIControlThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "addServerRole", "params": ["String", "String", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addServerRole(String remoteAddr, String serverHttpPort, InitConfigEntity configEntity) {        Map<RoleEnum, List<String>> roles = parseAllRoles(remoteAddr, configEntity);        for (RoleEnum role : roles.keySet()) {            List<String> ports = roles.get(role);            this.rolesBiz.addRole(role, \"http://\" + remoteAddr + \":\" + serverHttpPort, remoteAddr, ports);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/RoleService.java", "stars": "7", "class": {"name": "RoleService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseAllRoles", "params": ["String", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "Map<RoleEnum,List>", "snippet": "    public Map<RoleEnum, List<String>> parseAllRoles(String slaveAddress, InitConfigEntity configEntity) {        // log.info(String.format(\"\u4e3a\u670d\u52a1\u5668 %s \u89e3\u6790\u89d2\u8272\", slaveAddress));        log.info(String.format(\"Resolve roles for server %s\", slaveAddress));        Map<RoleEnum, List<String>> roles = new HashMap<>(16);        this.parseRole(roles, slaveAddress, configEntity.getOrdererHostConfig(), RoleEnum.ORDER, configEntity);        this.parseRole(roles, slaveAddress, configEntity.getPeerHostConfig(), RoleEnum.PEER, configEntity);        // log.info(String.format(\"\u670d\u52a1\u5668 %s \u89e3\u6790\u540e\uff0c\u6240\u627f\u62c5\u7684\u89d2\u8272\u6709: \", slaveAddress, roles.keySet().stream().map(Enum::name).collect(Collectors.joining(\",\"))));        log.info(String.format(\"Parsed by server %s, the  roles are: \", slaveAddress, roles.keySet().stream().map(Enum::name).collect(Collectors.joining(\",\"))));        return roles;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/RoleService.java", "stars": "7", "class": {"name": "RoleService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseRole", "params": ["Map<RoleEnum,List>", "String", "Map<String,String>", "RoleEnum", "InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void parseRole(Map<RoleEnum, List<String>> roles, String slaveAddress, Map<String, String> hostConfig, RoleEnum role, InitConfigEntity configEntity) {        for (String host : hostConfig.keySet()) {            String ip = hostConfig.get(host);            int index = ip.lastIndexOf(\":\");            String port = ip.substring(index + 1);            ip = ip.substring(0, index);            if (slaveAddress.equals(ip)) {                List<String> ports;                if (roles.containsKey(role)) {                    ports = roles.get(role);                } else {                    ports = new ArrayList<>();                    roles.put(role, ports);                }                if (ports.stream().noneMatch(p -> p.equalsIgnoreCase(port))) {                    ports.add(port);                }            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/RoleService.java", "stars": "7", "class": {"name": "RoleService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_splash;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SplashActivity.java", "stars": "1", "class": {"name": "SplashActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        // \u8bbe\u7f6e\u52a8\u753b\u76d1\u542c        mLottieView.addAnimatorListener(new AnimatorListenerAdapter() {            @Override            public void onAnimationEnd(Animator animation) {                startActivity(HomeActivity.class);                finish();            }        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SplashActivity.java", "stars": "1", "class": {"name": "SplashActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        if (AppConfig.isDebug()) {            mDebugView.setVisibility(View.VISIBLE);        } else {            mDebugView.setVisibility(View.INVISIBLE);        }        if (true) {            return;        }        // \u83b7\u53d6\u7528\u6237\u4fe1\u606f        EasyHttp.post(this)                .api(new UserInfoApi())                .request(new HttpCallback<HttpData<UserInfoBean>>(this) {                    @Override                    public void onSucceed(HttpData<UserInfoBean> data) {                    }                });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SplashActivity.java", "stars": "1", "class": {"name": "SplashActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createStatusBarConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImmersionBar", "snippet": "    public ImmersionBar createStatusBarConfig() {        return super.createStatusBarConfig()                // \u6709\u5bfc\u822a\u680f\u7684\u60c5\u51b5\u4e0b\uff0cactivity\u5168\u5c4f\u663e\u793a\uff0c\u4e5f\u5c31\u662factivity\u6700\u4e0b\u9762\u88ab\u5bfc\u822a\u680f\u8986\u76d6\uff0c\u4e0d\u5199\u9ed8\u8ba4\u975e\u5168\u5c4f                .fullScreen(true)                // \u9690\u85cf\u72b6\u6001\u680f                .hideBar(BarHide.FLAG_HIDE_STATUS_BAR)                // \u900f\u660e\u5bfc\u822a\u680f\uff0c\u4e0d\u5199\u9ed8\u8ba4\u9ed1\u8272(\u8bbe\u7f6e\u6b64\u65b9\u6cd5\uff0cfullScreen()\u65b9\u6cd5\u81ea\u52a8\u4e3atrue)                .transparentNavigationBar();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SplashActivity.java", "stars": "1", "class": {"name": "SplashActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        //\u7981\u7528\u8fd4\u56de\u952e        //super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SplashActivity.java", "stars": "1", "class": {"name": "SplashActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isSwipeEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSwipeEnable() {        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SplashActivity.java", "stars": "1", "class": {"name": "SplashActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDescription", "params": ["JSONObject"], "throws": null, "modifiers": ["public", "static"], "return_type": "ServiceDescription", "snippet": "    public static ServiceDescription getDescription(JSONObject json) {        return new ServiceDescription(json);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getServiceFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getServiceFilter() {        return serviceFilter;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setServiceFilter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceFilter(String serviceFilter) {        this.serviceFilter = serviceFilter;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getUUID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUUID() {        return UUID;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setUUID", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUUID(String uUID) {        UUID = uUID;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getIpAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIpAddress() {        return ipAddress;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setIpAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIpAddress(String getIpAddress) {        this.ipAddress = getIpAddress;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setPort", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPort(int port) {        this.port = port;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPort() {        return port;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getFriendlyName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFriendlyName() {        return friendlyName;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setFriendlyName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFriendlyName(String friendlyName) {        this.friendlyName = friendlyName;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getModelName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModelName() {        return modelName;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setModelName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModelName(String modelName) {        this.modelName = modelName;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getModelNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModelNumber() {        return modelNumber;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setModelNumber", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModelNumber(String modelNumber) {        this.modelNumber = modelNumber;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getManufacturer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getManufacturer() {        return manufacturer;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setManufacturer", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setManufacturer(String manufacturer) {        this.manufacturer = manufacturer;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getModelDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModelDescription() {        return modelDescription;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setModelDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModelDescription(String modelDescription) {        this.modelDescription = modelDescription;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setServiceList", "params": ["List<Service>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceList(List<Service> serviceList) {        this.serviceList = serviceList;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getApplicationURL", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getApplicationURL() {        return applicationURL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setApplicationURL", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setApplicationURL(String applicationURL) {        this.applicationURL = applicationURL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getServiceList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Service>", "snippet": "    public List<Service> getServiceList() {        return serviceList;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getLastDetection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getLastDetection() {        return lastDetection;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setLastDetection", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastDetection(long last) {        lastDetection = last;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getServiceID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getServiceID() {        return serviceID;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setServiceID", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceID(String serviceID) {        this.serviceID = serviceID;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getResponseHeaders", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,List>", "snippet": "    public Map<String, List<String>> getResponseHeaders() {        return responseHeaders;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setResponseHeaders", "params": ["Map<String,List>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setResponseHeaders(Map<String, List<String>> responseHeaders) {        this.responseHeaders = responseHeaders;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getVersion() {        return version;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setVersion", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVersion(String version) {        this.version = version;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getLocationXML", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLocationXML() {        return locationXML;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setLocationXML", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLocationXML(String locationXML) {        this.locationXML = locationXML;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getServiceURI", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getServiceURI() {        return serviceURI;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setServiceURI", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceURI(String serviceURI) {        this.serviceURI = serviceURI;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getDevice() {        return device;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setDevice", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDevice(Object device) {        this.device = device;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "toJSONObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject toJSONObject() {        JSONObject jsonObj = new JSONObject();        try {            jsonObj.putOpt(KEY_FILTER, serviceFilter);            jsonObj.putOpt(KEY_IP_ADDRESS, ipAddress);            jsonObj.putOpt(KEY_UUID, UUID);            jsonObj.putOpt(KEY_FRIENDLY, friendlyName);            jsonObj.putOpt(KEY_MODEL_NAME, modelName);            jsonObj.putOpt(KEY_MODEL_NUMBER, modelNumber);            jsonObj.putOpt(KEY_PORT, port);            jsonObj.putOpt(KEY_VERSION, version);            jsonObj.putOpt(KEY_SERVICE_ID, serviceID);        } catch (JSONException e) {            e.printStackTrace();        }        return jsonObj;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ServiceDescription", "snippet": "    public ServiceDescription clone() {        ServiceDescription service = new ServiceDescription();        service.setPort(this.port);        // we can ignore all these NullPointerExceptions, it's OK if those properties don't have values        try { service.setServiceID(this.serviceID); } catch (NullPointerException ex) { }        try { service.setIpAddress(this.ipAddress); } catch (NullPointerException ex) { }        try { service.setUUID(this.UUID); } catch (NullPointerException ex) { }        try { service.setVersion(this.version); } catch (NullPointerException ex) { }        try { service.setFriendlyName(this.friendlyName); } catch (NullPointerException ex) { }        try { service.setManufacturer(this.manufacturer); } catch (NullPointerException ex) { }        try { service.setModelName(this.modelName); } catch (NullPointerException ex) { }        try { service.setModelNumber(this.modelNumber); } catch (NullPointerException ex) { }        try { service.setModelDescription(this.modelDescription); } catch (NullPointerException ex) { }        try { service.setApplicationURL(this.applicationURL); } catch (NullPointerException ex) { }        try { service.setLocationXML(this.locationXML); } catch (NullPointerException ex) { }        try { service.setResponseHeaders(this.responseHeaders); } catch (NullPointerException ex) { }        try { service.setServiceList(this.serviceList); } catch (NullPointerException ex) { }        try { service.setServiceFilter(this.serviceFilter); } catch (NullPointerException ex) { }        return service;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/ServiceDescription.java", "stars": "4", "class": {"name": "ServiceDescription", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\t//read inputs\t\tScanner in = new Scanner(System.in);\t\t\t\tSystem.out.print(\"How much money do you need to retire?\");\t\tdouble goal = in.nextDouble();\t\t\t\tSystem.out.print(\"How much money will you conteibute every year?\");\t\tdouble payment = in.nextDouble();\t\t\t\tSystem.out.print(\"Interest rate in %: \");\t\tdouble interestRate = in.nextDouble();\t\t\t\tdouble balance = 0;\t\tint years = 0;    //\u8ba1\u6570\u5668\t\t\t\t//update account balance while goal isn't reached\t\twhile(balance < goal)\t\t{\t\t\t//add this year's payment and interest\t\t\tbalance += payment;\t\t\tdouble interest = balance * interestRate/100;\t\t\tbalance += interest;\t\t\tyears += 1;\t\t}\t\t\t\tSystem.out.println(\"You can retire in \" + years +\"years.\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Xunhuan.java", "stars": "2", "class": {"name": "Xunhuan", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/BeamDeviceSelectorDialogFragment.java", "stars": "4", "class": {"name": "BeamDeviceSelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        AlertDialog.Builder builder;        final BeamManager beamManager = BeamManager.getInstance(getActivity());        if (!beamManager.isConnected()) {            mAdapter = new BeamDeviceAdapter(getActivity());            builder = new AlertDialog.Builder(getActivity())                    .setSingleChoiceItems(mAdapter, -1, new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int position) {                            ConnectableDevice device = mAdapter.getItem(position);                            BeamManager.getInstance(getActivity()).connect(device);                            dismiss();                        }                    })                    .setTitle(R.string.select_beaming)                    .setNegativeButton(R.string.cancel,                            new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialog, int which) {                                    dialog.dismiss();                                }                            }                    );            return builder.create();        } else if(beamManager.getConnectedDevice() != null) {            builder = new AlertDialog.Builder(getActivity())                    .setTitle(getString(R.string.connected_to) + \" \" + beamManager.getConnectedDevice().getFriendlyName())                    .setNeutralButton(R.string.disconnect, new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            beamManager.disconnect();                        }                    });            return builder.create();        }        return super.onCreateDialog(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/BeamDeviceSelectorDialogFragment.java", "stars": "4", "class": {"name": "BeamDeviceSelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Activity activity) {        super.onAttach(activity);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/BeamDeviceSelectorDialogFragment.java", "stars": "4", "class": {"name": "BeamDeviceSelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        super.onDestroy();        if (null != mAdapter)            mAdapter.destroy();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/BeamDeviceSelectorDialogFragment.java", "stars": "4", "class": {"name": "BeamDeviceSelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm) {        BeamDeviceSelectorDialogFragment fragment = new BeamDeviceSelectorDialogFragment();        fragment.show(fm, \"overlay_fragment\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/BeamDeviceSelectorDialogFragment.java", "stars": "4", "class": {"name": "BeamDeviceSelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(){        resWareHouse = new Resource(-1L, 0, MachineInfo.memoryTotal() - MachineInfo.memoryUsed());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/resource/LocalResourceManager.java", "stars": "23", "class": {"name": "LocalResourceManager", "extends": null, "implements": ["ResourceManager"], "modifiers": ["public"]}}, {"method_name": "allocate", "params": ["Resource"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean allocate(Resource resource) {        resourceLock.lock();        try{            if(allocated.size() <= 0){                resWareHouse.setMemByte(MachineInfo.memoryTotal() - MachineInfo.memoryUsed());            }            if(resWareHouse.getMemByte() >= resource.getMemByte()                     && resWareHouse.getCpuCore() >= resource.getCpuCore()){                long memRequire = resource.getMemByte();                long totalMem = MachineInfo.memoryTotal();                double actualRate = (double)(MachineInfo.memoryUsed() + memRequire)/(double)totalMem;                double virtualRate = (double)(totalMem - resWareHouse.getMemByte() + memRequire)/(double)totalMem;                LOG.info(\"ActualRate:[\" + actualRate +\"], virtualRate:[\" + virtualRate +\"],\" +                        \" threshold:[\"+resourceConfiguration.getThresholdMem() + \"]\");                if(Math.max(actualRate, virtualRate) >= resourceConfiguration.getThresholdMem()){                    return false;                }                resWareHouse.allocate(resource);                return null == allocated.putIfAbsent(String.valueOf(resource.getResourceId()), resource);            }            return false;        }finally{            resourceLock.unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/resource/LocalResourceManager.java", "stars": "23", "class": {"name": "LocalResourceManager", "extends": null, "implements": ["ResourceManager"], "modifiers": ["public"]}}, {"method_name": "collect", "params": ["Resource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void collect(Resource resource) {        if(null != allocated.remove(String.valueOf(resource.getResourceId()))){            resWareHouse.collect(resource);            if(allocated.size() <= 0){                resourceLock.lock();                try {                    resWareHouse.setMemByte(MachineInfo.memoryTotal() - MachineInfo.memoryUsed());                }finally{                    resourceLock.unlock();                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/resource/LocalResourceManager.java", "stars": "23", "class": {"name": "LocalResourceManager", "extends": null, "implements": ["ResourceManager"], "modifiers": ["public"]}}, {"method_name": "testCrossReferenceXmlConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testCrossReferenceXmlConfig() throws Exception {    testCrossReference(getSqlSessionFactoryXmlConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java", "stars": "15", "class": {"name": "XmlExternalRefTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCrossReferenceJavaConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testCrossReferenceJavaConfig() throws Exception {    testCrossReference(getSqlSessionFactoryJavaConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java", "stars": "15", "class": {"name": "XmlExternalRefTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testFailFastOnBuildAll", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testFailFastOnBuildAll() {    Configuration configuration = new Configuration();    try {      configuration.addMapper(InvalidMapper.class);    } catch (Exception e) {      fail(\"No exception should be thrown before parsing statement nodes.\");    }    Assertions.assertThrows(BuilderException.class, configuration::getMappedStatementNames);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java", "stars": "15", "class": {"name": "XmlExternalRefTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testFailFastOnBuildAllWithInsert", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testFailFastOnBuildAllWithInsert() {    Configuration configuration = new Configuration();    try {      configuration.addMapper(InvalidWithInsertMapper.class);      configuration.addMapper(InvalidMapper.class);    } catch (Exception e) {      fail(\"No exception should be thrown before parsing statement nodes.\");    }    Assertions.assertThrows(BuilderException.class, configuration::getMappedStatementNames);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java", "stars": "15", "class": {"name": "XmlExternalRefTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMappedStatementCache", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testMappedStatementCache() throws Exception {    try (Reader configReader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/xml_external_ref/MapperConfig.xml\")) {      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader);      Configuration configuration = sqlSessionFactory.getConfiguration();      configuration.getMappedStatementNames();      MappedStatement selectPetStatement = configuration.getMappedStatement(\"org.apache.ibatis.submitted.xml_external_ref.PetMapper.select\");      MappedStatement selectPersonStatement = configuration.getMappedStatement(\"org.apache.ibatis.submitted.xml_external_ref.PersonMapper.select\");      Cache cache = selectPetStatement.getCache();      assertEquals(\"org.apache.ibatis.submitted.xml_external_ref.PetMapper\", cache.getId());      assertSame(cache, selectPersonStatement.getCache());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java", "stars": "15", "class": {"name": "XmlExternalRefTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCrossReference", "params": ["SqlSessionFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void testCrossReference(SqlSessionFactory sqlSessionFactory) {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person person = personMapper.select(1);      assertEquals((Integer) 1, person.getId());      assertEquals(2, person.getPets().size());      assertEquals((Integer) 2, person.getPets().get(1).getId());      Pet pet = personMapper.selectPet(1);      assertEquals(Integer.valueOf(1), pet.getId());      PetMapper petMapper = sqlSession.getMapper(PetMapper.class);      Pet pet2 = petMapper.select(3);      assertEquals((Integer)3, pet2.getId());      assertEquals((Integer)2, pet2.getOwner().getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java", "stars": "15", "class": {"name": "XmlExternalRefTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryXmlConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {    try (Reader configReader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/xml_external_ref/MapperConfig.xml\")) {      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader);      initDb(sqlSessionFactory);      return sqlSessionFactory;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java", "stars": "15", "class": {"name": "XmlExternalRefTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryJavaConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(), new UnpooledDataSource(        \"org.hsqldb.jdbcDriver\", \"jdbc:hsqldb:mem:xmlextref\", null));    configuration.setEnvironment(environment);    configuration.addMapper(PersonMapper.class);    configuration.addMapper(PetMapper.class);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    initDb(sqlSessionFactory);    return sqlSessionFactory;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java", "stars": "15", "class": {"name": "XmlExternalRefTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initDb", "params": ["SqlSessionFactory"], "throws": ["IOException", "SQLException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void initDb(SqlSessionFactory sqlSessionFactory) throws IOException, SQLException {    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/xml_external_ref/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java", "stars": "15", "class": {"name": "XmlExternalRefTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "wrap", "params": ["Object", "Interceptor"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "  public static Object wrap(Object target, Interceptor interceptor) {    Map<Class<?>, Set<Method>> signatureMap = getSignatureMap(interceptor);    Class<?> type = target.getClass();    Class<?>[] interfaces = getAllInterfaces(type, signatureMap);    if (interfaces.length > 0) {      return Proxy.newProxyInstance(          type.getClassLoader(),          interfaces,          new Plugin(target, interceptor, signatureMap));    }    return target;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/Plugin.java", "stars": "15", "class": {"name": "Plugin", "extends": null, "implements": ["InvocationHandler"], "modifiers": ["public"]}}, {"method_name": "invoke", "params": ["Object", "Method", "Object"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {    try {      Set<Method> methods = signatureMap.get(method.getDeclaringClass());      if (methods != null && methods.contains(method)) {        return interceptor.intercept(new Invocation(target, method, args));      }      return method.invoke(target, args);    } catch (Exception e) {      throw ExceptionUtil.unwrapThrowable(e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/Plugin.java", "stars": "15", "class": {"name": "Plugin", "extends": null, "implements": ["InvocationHandler"], "modifiers": ["public"]}}, {"method_name": "getSignatureMap", "params": ["Interceptor"], "throws": null, "modifiers": ["private", "static"], "return_type": "Map<Class,Set>", "snippet": "  private static Map<Class<?>, Set<Method>> getSignatureMap(Interceptor interceptor) {    Intercepts interceptsAnnotation = interceptor.getClass().getAnnotation(Intercepts.class);    // issue #251    if (interceptsAnnotation == null) {      throw new PluginException(\"No @Intercepts annotation was found in interceptor \" + interceptor.getClass().getName());    }    Signature[] sigs = interceptsAnnotation.value();    Map<Class<?>, Set<Method>> signatureMap = new HashMap<>();    for (Signature sig : sigs) {      Set<Method> methods = signatureMap.computeIfAbsent(sig.type(), k -> new HashSet<>());      try {        Method method = sig.type().getMethod(sig.method(), sig.args());        methods.add(method);      } catch (NoSuchMethodException e) {        throw new PluginException(\"Could not find method on \" + sig.type() + \" named \" + sig.method() + \". Cause: \" + e, e);      }    }    return signatureMap;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/Plugin.java", "stars": "15", "class": {"name": "Plugin", "extends": null, "implements": ["InvocationHandler"], "modifiers": ["public"]}}, {"method_name": "getAllInterfaces", "params": ["Class<?>", "Map<Class,Set>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Class<?>", "snippet": "  private static Class<?>[] getAllInterfaces(Class<?> type, Map<Class<?>, Set<Method>> signatureMap) {    Set<Class<?>> interfaces = new HashSet<>();    while (type != null) {      for (Class<?> c : type.getInterfaces()) {        if (signatureMap.containsKey(c)) {          interfaces.add(c);        }      }      type = type.getSuperclass();    }    return interfaces.toArray(new Class<?>[interfaces.size()]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/Plugin.java", "stars": "15", "class": {"name": "Plugin", "extends": null, "implements": ["InvocationHandler"], "modifiers": ["public"]}}, {"method_name": "getHead", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SimpleNode<T>", "snippet": "    public SimpleNode<T> getHead() {        return head;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/SimpleList.java", "stars": "1", "class": {"name": "SimpleList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHead", "params": ["SimpleNode<T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHead(SimpleNode<T> head) {        this.head = head;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/SimpleList.java", "stars": "1", "class": {"name": "SimpleList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        return head == null;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/SimpleList.java", "stars": "1", "class": {"name": "SimpleList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void add(T info) {        if (head == null) {            head = new SimpleNode(info);        } else {            SimpleNode aux = head;            while (aux.next != null) {                aux = aux.next;            }            aux.next = new SimpleNode(info);        }    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/SimpleList.java", "stars": "1", "class": {"name": "SimpleList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "insert", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void insert(T info) {        head = new SimpleNode(info, head);    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/SimpleList.java", "stars": "1", "class": {"name": "SimpleList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void delete(T info) {        if (head != null) {            SimpleNode aux = head;            SimpleNode ant = null;            while (aux != null && info != aux.info) {                ant = aux;                aux = aux.next;            }            if (info == aux.info) {                if (aux == head) {                    head = aux.next;                } else {                    ant.next = aux.next;                }            }        }    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/SimpleList.java", "stars": "1", "class": {"name": "SimpleList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addInterceptors", "params": ["InterceptorRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addInterceptors(InterceptorRegistry registry) {        registry.addInterceptor(authenticationInterceptor).order(1).addPathPatterns(\"/api/v1/executor/**\");        registry.addInterceptor(authorityInterceptor).order(2).addPathPatterns(\"/api/v1/executor/**\");        registry.addInterceptor(taskProcessAuthInterceptor).order(3).addPathPatterns(\"/api/v1/task/process\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/auth/AuthWebConfiguer.java", "stars": "23", "class": {"name": "AuthWebConfiguer", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "ByteBufferToString", "params": ["ByteBuffer"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void ByteBufferToString(ByteBuffer message) {\t\tString resultStr = null;\t\tbyte[] bytes = ByteUtils.decodeValue(message);\t\tString hexString = ByteUtils.bytesToHexString(bytes);\t\t// \u6570\u636e\u5305\u534f\u8bae\u7248\u672c 0\u672a\u538b\u7f29\u7684json\u683c\u5f0f\u6570\u636e 1\u5ba2\u6237\u7aef\u5fc3\u8df3\u901a\u5e38\u4e3a\u4eba\u6c14\u503c 4\u5b57\u8282\u6574\u6570 2\u4e3a\u5e26zlib\u538b\u7f29\u8fc7\u7684json\u683c\u5f0f\u6570\u636e\t\tInteger dataVersion = Integer.valueOf(hexString.substring(15, 16));\t\t// 2\u5fc3\u8df3\u5305 \u6bcf30\u79d2\u53d1\u9001\u4e00\u6b21 3\u5fc3\u8df3\u56de\u5e94 \u4eba\u6c14\u503c 4\u5b57\u8282\u6574\u6570 5\u901a\u77e5 \u5f39\u5e55\u793c\u7269\u516c\u544a\u7b49\u5185\u5bb9 7\u52a0\u5165\u623f\u95f4\u53d1\u9001\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5305 8\u8ba4\u8bc1\u6210\u529f\u540e\u8fd4\u56de\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\t\tInteger dataType = Integer.valueOf(hexString.substring(23, 24));\t\tif (dataVersion == 2) {\t\t\tif (dataType == 5) {\t\t\t\tresultStr = ByteUtils.hexStringTozlibInflate(stringToArrayStrByte(hexString));\t\t\t\tresultStr = ByteUtils.unicodeToString(resultStr);\t\t\t}\t\t} else if (dataVersion == 1) {\t\t\tif (dataType == 3) {\t\t\t\tresultStr = String.valueOf(\"\u5f53\u524d\u623f\u95f4\u4eba\u6c14\u503c\u4e3a:\" + Long.parseLong(stringToArrayStrByte(hexString), 16));\t\t\t}\t\t} else if (dataVersion == 0) {\t\t\tresultStr = ByteUtils.hexStringToString(stringToArrayStrByte(hexString));\t\t\tresultStr = ByteUtils.unicodeToString(resultStr);\t\t}\t\tif (resultStr == null) {\t\t\treturn;\t\t}\t\tString[] split = resultStr.split(\"%split%\");\t\tfor (String string : split) {\t\t\tLOGGER.debug(string, \"utf-8\");\t\t}\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/PrintUtils.java", "stars": "3", "class": {"name": "PrintUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stringToArrayStrByte", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String stringToArrayStrByte(String hexString) {\t\tStringBuffer sb = new StringBuffer();\t\tint endIndex = Integer.parseInt(hexString.substring(0, 8), 16) * 2;\t\tif (hexString.length() == endIndex) {\t\t\treturn hexString.substring(32, endIndex);\t\t}\t\tsb.append(hexString.substring(32, endIndex) + \"706c697425\"\t\t\t\t+ stringToArrayStrByte(hexString.substring(endIndex, hexString.length())));\t\treturn sb.toString();\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/PrintUtils.java", "stars": "3", "class": {"name": "PrintUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDayNight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getDayNight(){        lat = issData.getLat();        lon = issData.getLon();        String url = \"https://api.sunrise-sunset.org/json?lat=\" + lat + \"&lng=\" + lon + \"&date=today\";        RestTemplate restTemplate = new RestTemplate();        HttpEntity httpEntityDayNight = new HttpEntity(dayNight);        ResponseEntity<DayNight> exchange = restTemplate.exchange(url, HttpMethod.GET, httpEntityDayNight, DayNight.class);        this.dayNight = exchange.getBody();//        System.out.println(dayNight);        issData.setSunriseUTC(dayNight.getResults().getSunrise());        issData.setSunsetUTC(dayNight.getResults().getSunset());    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/controller/DayNightApiController.java", "stars": "1", "class": {"name": "DayNightApiController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);//        \u7ec3\u4e60\u5185\u5bb9\uff1a\u4f7f\u7528 canvas.drawColor() \u65b9\u6cd5\u628a View \u6d82\u6210\u9ec4\u8272//        \u9ec4\u8272\uff1a Color.YELLOW        canvas.drawColor(Color.YELLOW);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson1/Practice1DrawColorView.java", "stars": "2", "class": {"name": "Practice1DrawColorView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "testErrorPath", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testErrorPath() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/spring/error\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\t\tassertThat(entity.getBody().get(\"error\")).isEqualTo(\"None\");\t\tassertThat(entity.getBody().get(\"status\")).isEqualTo(999);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ServletPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ServletPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHealth", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHealth() {\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", \"password\")\t\t\t\t.getForEntity(\"/spring/actuator/health\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(\"\\\"status\\\":\\\"UP\\\"\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ServletPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ServletPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHomeIsSecure", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHomeIsSecure() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(this.restTemplate.getForEntity(\"/spring/\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t\tMap<String, Object> body = entity.getBody();\t\tassertThat(body.get(\"error\")).isEqualTo(\"Unauthorized\");\t\tassertThat(entity.getHeaders()).doesNotContainKey(\"Set-Cookie\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ServletPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ServletPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asMapEntity", "params": ["ResponseEntity<Map>"], "throws": null, "modifiers": ["static"], "return_type": "ResponseEntity<Map>", "snippet": "\tstatic <K, V> ResponseEntity<Map<K, V>> asMapEntity(ResponseEntity<Map> entity) {\t\treturn (ResponseEntity) entity;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ServletPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ServletPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "registerLoggedException", "params": ["Throwable"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid registerLoggedException(Throwable exception) {\t\tthis.loggedExceptions.add(exception);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java", "stars": "47572", "class": {"name": "SpringBootExceptionHandler", "extends": null, "implements": ["UncaughtExceptionHandler"], "modifiers": []}}, {"method_name": "registerExitCode", "params": ["int"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid registerExitCode(int exitCode) {\t\tthis.exitCode = exitCode;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java", "stars": "47572", "class": {"name": "SpringBootExceptionHandler", "extends": null, "implements": ["UncaughtExceptionHandler"], "modifiers": []}}, {"method_name": "uncaughtException", "params": ["Thread", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void uncaughtException(Thread thread, Throwable ex) {\t\ttry {\t\t\tif (isPassedToParent(ex) && this.parent != null) {\t\t\t\tthis.parent.uncaughtException(thread, ex);\t\t\t}\t\t}\t\tfinally {\t\t\tthis.loggedExceptions.clear();\t\t\tif (this.exitCode != 0) {\t\t\t\tSystem.exit(this.exitCode);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java", "stars": "47572", "class": {"name": "SpringBootExceptionHandler", "extends": null, "implements": ["UncaughtExceptionHandler"], "modifiers": []}}, {"method_name": "isPassedToParent", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isPassedToParent(Throwable ex) {\t\treturn isLogConfigurationMessage(ex) || !isRegistered(ex);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java", "stars": "47572", "class": {"name": "SpringBootExceptionHandler", "extends": null, "implements": ["UncaughtExceptionHandler"], "modifiers": []}}, {"method_name": "isLogConfigurationMessage", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isLogConfigurationMessage(Throwable ex) {\t\tif (ex instanceof InvocationTargetException) {\t\t\treturn isLogConfigurationMessage(ex.getCause());\t\t}\t\tString message = ex.getMessage();\t\tif (message != null) {\t\t\tfor (String candidate : LOG_CONFIGURATION_MESSAGES) {\t\t\t\tif (message.contains(candidate)) {\t\t\t\t\treturn true;\t\t\t\t}\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java", "stars": "47572", "class": {"name": "SpringBootExceptionHandler", "extends": null, "implements": ["UncaughtExceptionHandler"], "modifiers": []}}, {"method_name": "isRegistered", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isRegistered(Throwable ex) {\t\tif (this.loggedExceptions.contains(ex)) {\t\t\treturn true;\t\t}\t\tif (ex instanceof InvocationTargetException) {\t\t\treturn isRegistered(ex.getCause());\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java", "stars": "47572", "class": {"name": "SpringBootExceptionHandler", "extends": null, "implements": ["UncaughtExceptionHandler"], "modifiers": []}}, {"method_name": "forCurrentThread", "params": [], "throws": null, "modifiers": ["static"], "return_type": "SpringBootExceptionHandler", "snippet": "\tstatic SpringBootExceptionHandler forCurrentThread() {\t\treturn handler.get();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java", "stars": "47572", "class": {"name": "SpringBootExceptionHandler", "extends": null, "implements": ["UncaughtExceptionHandler"], "modifiers": []}}, {"method_name": "initialValue", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "SpringBootExceptionHandler", "snippet": "\t\tprotected SpringBootExceptionHandler initialValue() {\t\t\tSpringBootExceptionHandler handler = new SpringBootExceptionHandler(\t\t\t\t\tThread.currentThread().getUncaughtExceptionHandler());\t\t\tThread.currentThread().setUncaughtExceptionHandler(handler);\t\t\treturn handler;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java", "stars": "47572", "class": {"name": "LoggedExceptionHandlerThreadLocal", "extends": "ThreadLocal", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GestureManager_TapAndPanGestureDetector.java", "stars": "2", "class": {"name": "GestureManager_TapAndPanGestureDetector", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GestureManager_TapAndPanGestureDetector.java", "stars": "2", "class": {"name": "GestureManager_TapAndPanGestureDetector", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GestureManager_TapAndPanGestureDetector.java", "stars": "2", "class": {"name": "GestureManager_TapAndPanGestureDetector", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GestureManager_TapAndPanGestureDetector.java", "stars": "2", "class": {"name": "GestureManager_TapAndPanGestureDetector", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Material", "snippet": "    public Material getItem()    {        return item;    }", "url": "https://raw.githubusercontent.com/Adzwoolly/FriendAnimals/master/src/main/java/uk/adamwoollen/friendanimals/Mission.java", "stars": "2", "class": {"name": "Mission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTargetFriend", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Friend", "snippet": "    public Friend getTargetFriend() {        return targetFriend;    }", "url": "https://raw.githubusercontent.com/Adzwoolly/FriendAnimals/master/src/main/java/uk/adamwoollen/friendanimals/Mission.java", "stars": "2", "class": {"name": "Mission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReward", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Material", "snippet": "    public Material getReward() {        return reward;    }", "url": "https://raw.githubusercontent.com/Adzwoolly/FriendAnimals/master/src/main/java/uk/adamwoollen/friendanimals/Mission.java", "stars": "2", "class": {"name": "Mission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getKey() {        return key;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setKey", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setKey(String key) {        this.key = key;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(String value) {        this.value = value;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Long createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getUpdateTime() {        return updateTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdateTime", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUpdateTime(Long updateTime) {        this.updateTime = updateTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "    public List<WtssUser> getUsers() {        return users;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsers", "params": ["List<WtssUser>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsers(List<WtssUser> wtssUsers) {        this.users = wtssUsers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOwner", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOwner(String owner) {        this.owner = owner;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOwner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOwner() {        return owner;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"UserVariable{\" +                \"id=\" + id +                \", key='\" + key + '\\'' +                \", description='\" + description + '\\'' +                \", value='\" + value + '\\'' +                \", createTime=\" + createTime +                \", updateTime=\" + updateTime +                '}';    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariable.java", "stars": "18", "class": {"name": "UserVariable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        show04();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo01/Map/Demo01Map.java", "stars": "2", "class": {"name": "Demo01Map", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show04", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show04() {        //\u521b\u5efaMap\u96c6\u5408\u5bf9\u8c61        Map<String,Integer> map = new HashMap<>();        map.put(\"\u8d75\u4e3d\u9896\",168);        map.put(\"\u6768\u9896\",165);        map.put(\"\u6797\u5fd7\u73b2\",178);        boolean b1 = map.containsKey(\"\u8d75\u4e3d\u9896\");        System.out.println(\"b1:\"+b1);//b1:true        boolean b2 = map.containsKey(\"\u8d75\u9896\");        System.out.println(\"b2:\"+b2);//b2:false    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo01/Map/Demo01Map.java", "stars": "2", "class": {"name": "Demo01Map", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show03", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show03() {        //\u521b\u5efaMap\u96c6\u5408\u5bf9\u8c61        Map<String,Integer> map = new HashMap<>();        map.put(\"\u8d75\u4e3d\u9896\",168);        map.put(\"\u6768\u9896\",165);        map.put(\"\u6797\u5fd7\u73b2\",178);        Integer v1 = map.get(\"\u6768\u9896\");        System.out.println(\"v1:\"+v1);//v1:165        Integer v2 = map.get(\"\u8fea\u4e3d\u70ed\u5df4\");        System.out.println(\"v2:\"+v2);//v2:null    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo01/Map/Demo01Map.java", "stars": "2", "class": {"name": "Demo01Map", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show02() {        //\u521b\u5efaMap\u96c6\u5408\u5bf9\u8c61        Map<String,Integer> map = new HashMap<>();        map.put(\"\u8d75\u4e3d\u9896\",168);        map.put(\"\u6768\u9896\",165);        map.put(\"\u6797\u5fd7\u73b2\",178);        System.out.println(map);//{\u6797\u5fd7\u73b2=178, \u8d75\u4e3d\u9896=168, \u6768\u9896=165}        Integer v1 = map.remove(\"\u6797\u5fd7\u73b2\");        System.out.println(\"v1:\"+v1);//v1:178        System.out.println(map);//{\u8d75\u4e3d\u9896=168, \u6768\u9896=165}        //int v2 = map.remove(\"\u6797\u5fd7\u9896\");//\u81ea\u52a8\u62c6\u7bb1  NullPointerException        Integer v2 = map.remove(\"\u6797\u5fd7\u9896\");        System.out.println(\"v2:\"+v2);//v2:null        System.out.println(map);//{\u8d75\u4e3d\u9896=168, \u6768\u9896=165}    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo01/Map/Demo01Map.java", "stars": "2", "class": {"name": "Demo01Map", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show01() {        //\u521b\u5efaMap\u96c6\u5408\u5bf9\u8c61,\u591a\u6001        Map<String,String> map = new HashMap<>();        String v1 = map.put(\"\u674e\u6668\", \"\u8303\u51b0\u51b01\");        System.out.println(\"v1:\"+v1);//v1:null        String v2 = map.put(\"\u674e\u6668\", \"\u8303\u51b0\u51b02\");        System.out.println(\"v2:\"+v2);//v2:\u8303\u51b0\u51b01        System.out.println(map);//{\u674e\u6668=\u8303\u51b0\u51b02}        map.put(\"\u51b7\u950b\",\"\u9f99\u5c0f\u4e91\");        map.put(\"\u6768\u8fc7\",\"\u5c0f\u9f99\u5973\");        map.put(\"\u5c39\u5fd7\u5e73\",\"\u5c0f\u9f99\u5973\");        System.out.println(map);//{\u6768\u8fc7=\u5c0f\u9f99\u5973, \u5c39\u5fd7\u5e73=\u5c0f\u9f99\u5973, \u674e\u6668=\u8303\u51b0\u51b02, \u51b7\u950b=\u9f99\u5c0f\u4e91}    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo01/Map/Demo01Map.java", "stars": "2", "class": {"name": "Demo01Map", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHint", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setHint(@StringRes int id) {            return setHint(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/InputDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setHint", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setHint(CharSequence text) {            mInputView.setHint(text);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/InputDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setContent", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setContent(@StringRes int id) {            return setContent(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/InputDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setContent", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setContent(CharSequence text) {            mInputView.setText(text);            int index = mInputView.getText().toString().length();            if (index > 0) {                mInputView.requestFocus();                mInputView.setSelection(index);            }            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/InputDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["OnListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/InputDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onShow", "params": ["BaseDialog"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onShow(BaseDialog dialog) {            postDelayed(() -> getSystemService(InputMethodManager.class).showSoftInput(mInputView, 0), 500);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/InputDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onDismiss", "params": ["BaseDialog"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onDismiss(BaseDialog dialog) {            getSystemService(InputMethodManager.class).hideSoftInputFromWindow(mInputView.getWindowToken(), 0);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/InputDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View v) {            switch (v.getId()) {                case R.id.tv_ui_confirm:                    autoDismiss();                    if (mListener != null) {                        mListener.onConfirm(getDialog(), mInputView.getText().toString());                    }                    break;                case R.id.tv_ui_cancel:                    autoDismiss();                    if (mListener != null) {                        mListener.onCancel(getDialog());                    }                    break;                default:                    break;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/InputDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setShareTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setShareTitle(String title) {            mData.setShareTitle(title);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setShareDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setShareDescription(String description) {            mData.setShareDescription(description);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setShareLogo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setShareLogo(String url) {            mData.setShareLogo(url);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setShareLogo", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setShareLogo(@DrawableRes int id) {            mData.setShareLogo(id);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setShareUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setShareUrl(String url) {            mData.setShareUrl(url);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["UmengShare"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(UmengShare.OnShareListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onItemClick", "params": ["RecyclerView", "View", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onItemClick(RecyclerView recyclerView, View itemView, int position) {            Platform platform = mAdapter.getItem(position).getSharePlatform();            if (platform != null) {                UmengClient.share(getActivity(), platform, mData, mListener);            } else {                // \u590d\u5236\u5230\u526a\u8d34\u677f                getSystemService(ClipboardManager.class).setPrimaryClip(ClipData.newPlainText(\"url\", mData.getShareUrl()));                ToastUtils.show(R.string.share_platform_copy_hint);            }            dismiss();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {            return new ViewHolder();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "ShareAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void onBindView(int position) {                ShareBean bean = getItem(position);                mImageView.setImageDrawable(bean.getShareIcon());                mTextView.setText(bean.getShareName());            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "getShareIcon", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Drawable", "snippet": "        private Drawable getShareIcon() {            return mShareIcon;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "ShareBean", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getShareName", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "        private String getShareName() {            return mShareName;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "ShareBean", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getSharePlatform", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Platform", "snippet": "        private Platform getSharePlatform() {            return mSharePlatform;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ShareDialog.java", "stars": "1", "class": {"name": "ShareBean", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return id;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(int id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdmin_login", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAdmin_login() {        return admin_login;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAdmin_login", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdmin_login(String admin_login) {        this.admin_login = admin_login;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLast_login_time", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLast_login_time() {        return last_login_time;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLast_login_time", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLast_login_time(int last_login_time) {        this.last_login_time = last_login_time;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(int status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeleted_at", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getDeleted_at() {        return deleted_at;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDeleted_at", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDeleted_at(Date deleted_at) {        this.deleted_at = deleted_at;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLast_login_ip", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLast_login_ip() {        return last_login_ip;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLast_login_ip", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLast_login_ip(String last_login_ip) {        this.last_login_ip = last_login_ip;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Emp{\" +                \"id=\" + id +                \", admin_login='\" + admin_login + '\\'' +                \", last_login_time=\" + last_login_time +                \", status=\" + status +                \", deleted_at=\" + deleted_at +                \", last_login_ip='\" + last_login_ip + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Domain/Emp.java", "stars": "2", "class": {"name": "Emp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.register_activity;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/RegisterActivity.java", "stars": "1", "class": {"name": "RegisterActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        // \u7ed9\u8fd9\u4e2a View \u8bbe\u7f6e\u6c89\u6d78\u5f0f\uff0c\u907f\u514d\u72b6\u6001\u680f\u906e\u6321        ImmersionBar.setTitleBar(this, mTitleView);        InputTextHelper.with(this)                .addView(mPhoneView)                .addView(mCodeView)                .addView(pwdEdit)                .addView(invideCodeEdit)                .setMain(mCommitView)                .setListener(helper -> mPhoneView.getText().toString().length() == 11 &&                        pwdEdit.getText().toString().length() >= 6)                .build();        mPhoneView.setInputType(InputType.TYPE_CLASS_PHONE | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);//\u7535\u8bdd\u548c\u90ae\u7bb1        setOnClickListener(R.id.cv_register_countdown, R.id.registerBtn, R.id.toLogin);        mPhoneView.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                String testcode = mCodeView.getText().toString().trim();                String pwdedit = pwdEdit.getText().toString().trim();                if (s.toString().length() > 0 && testcode.length() > 0 && pwdedit.length() > 0) {                    mCommitView.setBackgroundResource(R.drawable.login_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(true);                } else {                    mCommitView.setBackgroundResource(R.drawable.normal_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(false);                }            }        });        mCodeView.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                String mobile = mPhoneView.getText().toString().trim();                String pwdedit = pwdEdit.getText().toString().trim();                if (s.toString().length() > 0 && mobile.length() > 0 && pwdedit.length() > 0) {                    mCommitView.setBackgroundResource(R.drawable.login_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(true);                } else {                    mCommitView.setBackgroundResource(R.drawable.normal_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(false);                }            }        });        pwdEdit.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                String mobile = mPhoneView.getText().toString().trim();                String testcode = mCodeView.getText().toString().trim();                if (s.toString().length() > 0 && testcode.length() > 0 && mobile.length() > 0) {                    mCommitView.setBackgroundResource(R.drawable.login_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(true);                } else {                    mCommitView.setBackgroundResource(R.drawable.normal_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(false);                }            }        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/RegisterActivity.java", "stars": "1", "class": {"name": "RegisterActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/RegisterActivity.java", "stars": "1", "class": {"name": "RegisterActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createStatusBarConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImmersionBar", "snippet": "    public ImmersionBar createStatusBarConfig() {        // \u4e0d\u8981\u628a\u6574\u4e2a\u5e03\u5c40\u9876\u4e0a\u53bb        return super.createStatusBarConfig().keyboardEnable(true);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/RegisterActivity.java", "stars": "1", "class": {"name": "RegisterActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.cv_register_countdown:                // \u83b7\u53d6\u9a8c\u8bc1\u7801                if (mPhoneView.getText().toString().length() != 11) {                    toast(R.string.common_phone_input_error);                    return;                }                // \u83b7\u53d6\u9a8c\u8bc1\u7801                EasyHttp.post(this)                        .api(new GetCodeApi()                                .setPhone(mPhoneView.getText().toString())                                .setType(\"1\"))                        .request(new HttpCallback<HttpData<GetCode>>(this) {                            @Override                            public void onSucceed(HttpData<GetCode> getCode) {                                if (getCode!=null){                                    int code = getCode.getCode();                                    String message = getCode.getMessage();                                    if (code==0){                                        toast(R.string.common_code_send_hint);                                        mCountdownView.start();                                    }                                    if (!TextUtils.isEmpty(message)){                                        toast(message);                                    }                                }                            }                            @Override                            public void onFail(Exception e) {                                super.onFail(e);                                toast(e.getMessage());                            }                        });                break;            case R.id.registerBtn:                // \u63d0\u4ea4\u6ce8\u518c                EasyHttp.post(this)                        .api(new RegisterApi()                                .setAccount(mPhoneView.getText().toString())                                .setPwd(Md5Util.md5(pwdEdit.getText().toString()))                                .setCode(mCodeView.getText().toString())                                .setInviteCode(invideCodeEdit.getText().toString().trim())                                .setFrom(\"-1\"))                        .request(new HttpCallback<HttpData<RegisterBean>>(this) {                            @Override                            public void onSucceed(HttpData<RegisterBean> data) {                                LoginActivity.start(getActivity(), mPhoneView.getText().toString(), pwdEdit.getText().toString());                                setResult(RESULT_OK);                                finish();                            }                            @Override                            public void onFail(Exception e) {                                super.onFail(e);                                toast(e.getMessage());                            }                        });                break;            case R.id.toLogin:                // \u5df2\u6709\u8d26\u53f7\u53bb\u767b\u5f55                LoginActivity.start(getActivity(), mPhoneView.getText().toString(), pwdEdit.getText().toString());                setResult(RESULT_OK);                finish();                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/RegisterActivity.java", "stars": "1", "class": {"name": "RegisterActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isSwipeEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSwipeEnable() {        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/RegisterActivity.java", "stars": "1", "class": {"name": "RegisterActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "RegisterSP", "snippet": "    public static synchronized RegisterSP getInstance() {        if (instance == null) {            instance = new RegisterSP();        }        return instance;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/RegisterSP.java", "stars": "4", "class": {"name": "RegisterSP", "extends": "Register", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efa\u96c6\u5408\u5bf9\u8c61,\u53ef\u4ee5\u4f7f\u7528\u591a\u6001        //Collection<String> coll = new ArrayList<>();        Collection<String> coll = new HashSet<>();        System.out.println(coll);//\u91cd\u5199\u4e86toString\u65b9\u6cd5  []        /*            public boolean add(E e)\uff1a  \u628a\u7ed9\u5b9a\u7684\u5bf9\u8c61\u6dfb\u52a0\u5230\u5f53\u524d\u96c6\u5408\u4e2d \u3002            \u8fd4\u56de\u503c\u662f\u4e00\u4e2aboolean\u503c,\u4e00\u822c\u90fd\u8fd4\u56detrue,\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u63a5\u6536         */        boolean b1 = coll.add(\"\u5f20\u4e09\");        System.out.println(\"b1:\"+b1);//b1:true        System.out.println(coll);//[\u5f20\u4e09]        coll.add(\"\u674e\u56db\");        coll.add(\"\u674e\u56db\");        coll.add(\"\u8d75\u516d\");        coll.add(\"\u7530\u4e03\");        System.out.println(coll);//[\u5f20\u4e09, \u674e\u56db, \u8d75\u516d, \u7530\u4e03]        /*            public boolean remove(E e): \u628a\u7ed9\u5b9a\u7684\u5bf9\u8c61\u5728\u5f53\u524d\u96c6\u5408\u4e2d\u5220\u9664\u3002            \u8fd4\u56de\u503c\u662f\u4e00\u4e2aboolean\u503c,\u96c6\u5408\u4e2d\u5b58\u5728\u5143\u7d20,\u5220\u9664\u5143\u7d20,\u8fd4\u56detrue                                \u96c6\u5408\u4e2d\u4e0d\u5b58\u5728\u5143\u7d20,\u5220\u9664\u5931\u8d25,\u8fd4\u56defalse         */        boolean b2 = coll.remove(\"\u8d75\u516d\");        System.out.println(\"b2:\"+b2);//b2:true        boolean b3 = coll.remove(\"\u8d75\u56db\");        System.out.println(\"b3:\"+b3);//b3:false        System.out.println(coll);//[\u5f20\u4e09, \u674e\u56db, \u7530\u4e03]        /*            public boolean contains(E e): \u5224\u65ad\u5f53\u524d\u96c6\u5408\u4e2d\u662f\u5426\u5305\u542b\u7ed9\u5b9a\u7684\u5bf9\u8c61\u3002            \u5305\u542b\u8fd4\u56detrue            \u4e0d\u5305\u542b\u8fd4\u56defalse         */        boolean b4 = coll.contains(\"\u674e\u56db\");        System.out.println(\"b4:\"+b4);//b4:true        boolean b5 = coll.contains(\"\u8d75\u56db\");        System.out.println(\"b5:\"+b5);//b5:false        //public boolean isEmpty(): \u5224\u65ad\u5f53\u524d\u96c6\u5408\u662f\u5426\u4e3a\u7a7a\u3002 \u96c6\u5408\u4e3a\u7a7a\u8fd4\u56detrue,\u96c6\u5408\u4e0d\u4e3a\u7a7a\u8fd4\u56defalse        boolean b6 = coll.isEmpty();        System.out.println(\"b6:\"+b6);//b6:false        //public int size(): \u8fd4\u56de\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002        int size = coll.size();        System.out.println(\"size:\"+size);//size:3        //public Object[] toArray(): \u628a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\uff0c\u5b58\u50a8\u5230\u6570\u7ec4\u4e2d\u3002        Object[] arr = coll.toArray();        for (int i = 0; i < arr.length; i++) {            System.out.println(arr[i]);        }        //public void clear() :\u6e05\u7a7a\u96c6\u5408\u4e2d\u6240\u6709\u7684\u5143\u7d20\u3002\u4f46\u662f\u4e0d\u5220\u9664\u96c6\u5408,\u96c6\u5408\u8fd8\u5b58\u5728        coll.clear();        System.out.println(coll);//[]        System.out.println(coll.isEmpty());//true    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo01/Collection/Demo01Collection.java", "stars": "2", "class": {"name": "Demo01Collection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "paint", "params": ["Graphics"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void paint(Graphics g) {        g.setColor(Color.GREEN);        g.fillRect(0, 0, Utils.CHARACTER_SIZE, Utils.CHARACTER_SIZE);    }", "url": "https://raw.githubusercontent.com/radudioane99/Shape-Storm/master/Character.java", "stars": "2", "class": {"name": "Character", "extends": "JComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure RoseExplosion!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure RoseExplosion!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure RoseExplosion!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure RoseExplosion!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(RoseBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/RoseExplosionProcedure.java", "stars": "2", "class": {"name": "RoseExplosionProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "logSomething", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void logSomething() {\t\tlogger.debug(\"Sample Debug Message\");\t\tlogger.trace(\"Sample Trace Message\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-logback/src/main/java/smoketest/logback/SampleLogbackApplication.java", "stars": "47572", "class": {"name": "SampleLogbackApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleLogbackApplication.class, args).close();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-logback/src/main/java/smoketest/logback/SampleLogbackApplication.java", "stars": "47572", "class": {"name": "SampleLogbackApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTransportType", "params": ["TransportType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTransportType(TransportType transportType){        this.transportType = transportType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractJobPlugin.java", "stars": "23", "class": {"name": "AbstractJobPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTransportType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TransportType", "snippet": "    public TransportType getTransportType(){        return this.transportType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractJobPlugin.java", "stars": "23", "class": {"name": "AbstractJobPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getJobPluginCollector", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JobPluginCollector", "snippet": "    public JobPluginCollector getJobPluginCollector() {        return jobPluginCollector;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractJobPlugin.java", "stars": "23", "class": {"name": "AbstractJobPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setJobPluginCollector", "params": ["JobPluginCollector"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setJobPluginCollector(            JobPluginCollector jobPluginCollector) {        this.jobPluginCollector = jobPluginCollector;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractJobPlugin.java", "stars": "23", "class": {"name": "AbstractJobPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "handshakeAcceptResponse", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String handshakeAcceptResponse(String userName) {        return String.format(\"Hi %s, welcome to the chat room.\", userName);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "userJoiningInChatRoom", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String userJoiningInChatRoom(String userName) {        return String.format(\"%s join the chat room.\", userName);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendUsersList", "params": ["Set<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String sendUsersList(Set<String> onlineUsersList) {        StringBuilder list = new StringBuilder();        for (String user : onlineUsersList)            list.append(user).append(USERNAMES_SEPARATOR);        return String.format(\"%s%s<%s>\", GET_USER_LIST_RESPONSE, BODY_SEPARATOR,                list.subSequence(0, list.length() - 1).toString());    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "publicMessage", "params": ["String", "long", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String publicMessage(String body, long length, String sender) {        return String.format(\"Public message, length=<%d> from <%s>%s\" +                \"<%s>\", length, sender, BODY_SEPARATOR, body);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "privateMessage", "params": ["String", "long", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String privateMessage(String safeBody, long length, String userName, String[] receivers) {        return String.format(\"Private message, length=<%d> from <%s> to %s%s<%s>\",                length, userName, convertListToString(receivers),                BODY_SEPARATOR, safeBody);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertListToString", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String convertListToString(String[] receivers) {        if (receivers.length == 0)            return \"<>\";        StringBuilder list = new StringBuilder();        for (String receiver : receivers)            list.append(String.format(\"<%s>%s\", receiver.trim(), RECEIVERS_LIST_SEPARATOR));        return list.substring(0, list.length() - RECEIVERS_LIST_SEPARATOR.length());    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logoutMessage", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String logoutMessage(String userName) {        return String.format(\"<%s> left the chat room.\", userName);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "responseBuilder", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String responseBuilder(String status, String response) {        return String.format(\"%s,%s,%s\", SERVER_MESSAGE, status, response);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "privateFileSendMessage", "params": ["String", "String", "long", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String privateFileSendMessage(String sender, String fileName, long fileSize, String[] receivers) {        return String.format(\"%s, from<%s>, name<%s>, length<%d>, %s\", PRIVATE_FILE_MESSAGE, sender, fileName, fileSize,                convertListToString(receivers));    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "publicFileSendMessage", "params": ["String", "String", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String publicFileSendMessage(String sender, String fileName, long fileSize) {        return String.format(\"%s, from<%s>, name<%s>, length<%d>\", PUBLIC_FILE_MESSAGE, sender, fileName, fileSize);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageBuilder.java", "stars": "2", "class": {"name": "ServerMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "discount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void discount() {        System.out.println(\"\u5904\u7406VIP\u7528\u6237\u6298\u6263\u7684\u4e1a\u52a1\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/business/VIPDiscount.java", "stars": "2", "class": {"name": "VIPDiscount", "extends": "BasicDiscount", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "ZonedDateTime", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, ZonedDateTime parameter, JdbcType jdbcType)          throws SQLException {    ps.setObject(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ZonedDateTimeTypeHandler.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ZonedDateTime", "snippet": "  public ZonedDateTime getNullableResult(ResultSet rs, String columnName) throws SQLException {    return rs.getObject(columnName, ZonedDateTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ZonedDateTimeTypeHandler.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ZonedDateTime", "snippet": "  public ZonedDateTime getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    return rs.getObject(columnIndex, ZonedDateTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ZonedDateTimeTypeHandler.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ZonedDateTime", "snippet": "  public ZonedDateTime getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    return cs.getObject(columnIndex, ZonedDateTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ZonedDateTimeTypeHandler.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "loaderForFactory", "params": ["SpriteProviderFactory<RandomCTMConfig>"], "throws": null, "modifiers": ["public", "static"], "return_type": "CTMConfig", "snippet": "\tpublic static CTMConfig.Loader<RandomCTMConfig> loaderForFactory(SpriteProviderFactory<RandomCTMConfig> factory) {\t\treturn (p, l, m, n) -> new RandomCTMConfig(p, l, m, factory, n);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/config/RandomCTMConfig.java", "stars": "3", "class": {"name": "RandomCTMConfig", "extends": "BaseCTMConfig", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSelf", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "RandomCTMConfig", "snippet": "\tprotected RandomCTMConfig getSelf() {\t\treturn this;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/config/RandomCTMConfig.java", "stars": "3", "class": {"name": "RandomCTMConfig", "extends": "BaseCTMConfig", "implements": null, "modifiers": ["public"]}}, {"method_name": "createOption", "params": [], "throws": null, "modifiers": [], "return_type": "DumperOptions", "snippet": "    DumperOptions createOption() {        DumperOptions dumperOptions = new DumperOptions();        dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);        dumperOptions.setDefaultScalarStyle(DumperOptions.ScalarStyle.PLAIN);        dumperOptions.setPrettyFlow(false);        return dumperOptions;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/YamlFileService.java", "stars": "7", "class": {"name": "YamlFileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeObjectToYamlFile", "params": ["Map<Object,Object>", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean writeObjectToYamlFile(Map<Object, Object> entity, String yamlFile) {        DumperOptions options = this.createOption();        String yaml = new Yaml(new YamlRepresenter(options)).dumpAs(entity, null, DumperOptions.FlowStyle.BLOCK);        try {            File file = new File(yamlFile);            if (!file.getParentFile().exists()) {                boolean isMk = file.getParentFile().mkdirs();                if (!isMk) {                    return false;                }            }            FileOutputStream outputStream = new FileOutputStream(file, false);            outputStream.write(yaml.getBytes());            outputStream.close();        } catch (Exception e) {            e.printStackTrace();            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/YamlFileService.java", "stars": "7", "class": {"name": "YamlFileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadYamlFile", "params": ["String"], "throws": ["FileNotFoundException"], "modifiers": ["public"], "return_type": "Map<Object,Object>", "snippet": "    public Map<Object, Object> loadYamlFile(String filePath) throws FileNotFoundException {        return new Yaml().loadAs(new FileInputStream(new File(filePath)), Map.class);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/YamlFileService.java", "stars": "7", "class": {"name": "YamlFileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.originalConfig = super.getPluginJobConf();            Integer userConfigedFetchSize = this.originalConfig.getInt(Constant.FETCH_SIZE);            if (userConfigedFetchSize != null) {                LOG.warn(\"\u5bf9 mysqlreader \u4e0d\u9700\u8981\u914d\u7f6e fetchSize, mysqlreader \u5c06\u4f1a\u5ffd\u7565\u8fd9\u9879\u914d\u7f6e. \u5982\u679c\u60a8\u4e0d\u60f3\u518d\u770b\u5230\u6b64\u8b66\u544a,\u8bf7\u53bb\u9664fetchSize \u914d\u7f6e.\");            }            this.originalConfig.set(Constant.FETCH_SIZE, Integer.MIN_VALUE);            this.commonRdbmsReaderJob = new CommonRdbmsReader.Job(DATABASE_TYPE);            this.commonRdbmsReaderJob.init(this.originalConfig);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-mysqlreader/src/main/java/com/alibaba/datax/plugin/reader/mysqlreader/MysqlReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "preCheck", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void preCheck() {            init();            this.commonRdbmsReaderJob.preCheck(this.originalConfig, DATABASE_TYPE);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-mysqlreader/src/main/java/com/alibaba/datax/plugin/reader/mysqlreader/MysqlReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(int adviceNumber) {            return this.commonRdbmsReaderJob.split(this.originalConfig, adviceNumber);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-mysqlreader/src/main/java/com/alibaba/datax/plugin/reader/mysqlreader/MysqlReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {            this.commonRdbmsReaderJob.post(this.originalConfig);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-mysqlreader/src/main/java/com/alibaba/datax/plugin/reader/mysqlreader/MysqlReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            this.commonRdbmsReaderJob.destroy(this.originalConfig);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-mysqlreader/src/main/java/com/alibaba/datax/plugin/reader/mysqlreader/MysqlReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.readerSliceConfig = super.getPluginJobConf();            this.commonRdbmsReaderTask = new CommonRdbmsReader.Task(DATABASE_TYPE, super.getTaskGroupId(), super.getTaskId());            this.commonRdbmsReaderTask.init(this.readerSliceConfig);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-mysqlreader/src/main/java/com/alibaba/datax/plugin/reader/mysqlreader/MysqlReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startRead", "params": ["RecordSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startRead(RecordSender recordSender) {            int fetchSize = this.readerSliceConfig.getInt(Constant.FETCH_SIZE);            this.commonRdbmsReaderTask.startRead(this.readerSliceConfig, recordSender,                    super.getTaskPluginCollector(), fetchSize);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-mysqlreader/src/main/java/com/alibaba/datax/plugin/reader/mysqlreader/MysqlReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {            this.commonRdbmsReaderTask.post(this.readerSliceConfig);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-mysqlreader/src/main/java/com/alibaba/datax/plugin/reader/mysqlreader/MysqlReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            this.commonRdbmsReaderTask.destroy(this.readerSliceConfig);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-mysqlreader/src/main/java/com/alibaba/datax/plugin/reader/mysqlreader/MysqlReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "euclideanTo", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double euclideanTo(int x, int y) {        return Math.sqrt(sqrEuclideanTo(x, y));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sqrEuclideanTo", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "double", "snippet": "    private double sqrEuclideanTo(int x, int y) {        return Math.pow(x - this.x, 2) + Math.pow(y - this.y, 2);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        final int prime = 31;        int result = 1;        result = prime * result + x;        result = prime * result + y;        return result;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object obj) {        if (this == obj) return true;        if (obj == null) return false;        Coord other = (Coord) obj;        if (x != other.x) return false;        if (y != other.y) return false;        return true;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"(\" + x + \", \" + y + \")\";    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getX() {        return x;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getY() {        return y;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "manhattanTo", "params": ["Coord"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int manhattanTo(Coord other) {        return manhattanTo(other.x, other.y);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "chebyshevTo", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int chebyshevTo(int x, int y) {        return Math.max(Math.abs(x - this.x), Math.abs(y - this.y));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "manhattanTo", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int manhattanTo(int x, int y) {        return Math.abs(x - this.x) + Math.abs(y - this.y);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["Coord"], "throws": null, "modifiers": ["public"], "return_type": "Coord", "snippet": "    public Coord add(Coord d) {        return new Coord(x + d.x, y + d.y);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "subtract", "params": ["Coord"], "throws": null, "modifiers": ["public"], "return_type": "Coord", "snippet": "    public Coord subtract(Coord d) {        return new Coord(x - d.x, y - d.y);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "euclideanTo", "params": ["Coord"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double euclideanTo(Coord d) {        return euclideanTo(d.x, d.y);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnitVector", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Coord", "snippet": "    public Coord getUnitVector() {        int newX = this.x == 0 ? 0 : this.x / Math.abs(this.x);        int newY = this.y == 0 ? 0 : this.y / Math.abs(this.y);        return new Coord(newX, newY);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Coord.java", "stars": "15", "class": {"name": "Coord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["ScaledResolution"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDraw(ScaledResolution scaledResolution) {        super.onDraw(scaledResolution);        if (mc.world == null || mc.player == null)            return;        boolean compensateEffect = effects && ((getY() + getH() / 2) > scaledResolution.getScaledHeight() / 2) && ((getX() + getW() / 2) > scaledResolution.getScaledWidth() / 2) && mc.player.getActivePotionEffects().size() > 0;        float compensatedY = 0;        if (compensateEffect) {            boolean bad = false, good = false;            for (PotionEffect effect : mc.player.getActivePotionEffects()) {                if (effect.getPotion().isBadEffect()) {                    bad = true;                } else {                    good = true;                }            }            if (good)                compensatedY += 25;            if (bad)                compensatedY += 25;        }        float y = getY() + (compensateEffect ? compensatedY : 0);        sorted.sort(Comparator.comparingDouble(m -> -font.getStringWidth(getLabel(m))));        for (Module module : sorted) {            if (module.isEnabled() && !module.isHidden()) {                font.drawStringWithShadow(getLabel(module), getX() + ((getX() + getW() / 2) > scaledResolution.getScaledWidth() / 2 ? (getW() - font.getStringWidth(getLabel(module))) : 0), y + ((getY() + getH() / 2) > scaledResolution.getScaledHeight() / 2 ? getH() - font.getHeight() : 0), rainbow ? getRainbow(6000, (int) (y * 30), 0.85f): -1);                y += ((getY() + getH() / 2) > scaledResolution.getScaledHeight() / 2) ? -(font.getHeight() + 1) : font.getHeight() + 1;            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/hudcomponents/ArrayList.java", "stars": "12", "class": {"name": "ArrayList", "extends": "HudComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRainbow", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getRainbow(int speed, int offset,float s) {        float hue = (System.currentTimeMillis() + offset) % speed;        hue /= speed;        return Color.getHSBColor(hue, s, 1f).getRGB();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/hudcomponents/ArrayList.java", "stars": "12", "class": {"name": "ArrayList", "extends": "HudComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLabel", "params": ["Module"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLabel(Module module) {        StringBuilder string = new StringBuilder((module.getFakeLabel() != null && module.getFakeLabel().equals(\"\")) ? module.getLabel() : module.getFakeLabel());        if (module.getSuffix() != null && !module.getSuffix().equals(\"\"))            string.append(\" \").append(ChatFormatting.GRAY + module.getSuffix());        return string.toString();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/hudcomponents/ArrayList.java", "stars": "12", "class": {"name": "ArrayList", "extends": "HudComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "insertgroup", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t public String insertgroup(String gname) \t    {\t\t db = dbhelper.getWritableDatabase();\t        ContentValues initialValues = new ContentValues();\t        initialValues.put(\"group_name\",gname);\t         db.insert(DB_table, null, initialValues);\t         return gname;\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/gsondemo/src/com/example/gsondemo/Dbadapter.java", "stars": "74", "class": {"name": "Dbadapter", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["SQLiteDatabase"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t        public void onCreate(SQLiteDatabase db) \t        {\t            db.execSQL(DATABASE_CREATE);\t        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/gsondemo/src/com/example/gsondemo/Dbadapter.java", "stars": "74", "class": {"name": "DatabaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "onUpgrade", "params": ["SQLiteDatabase", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\tpublic void onUpgrade(SQLiteDatabase db, int arg1, int arg2) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\tdb.execSQL(\"DROP TABLE IF EXIST Info\");\t\t\t\tonCreate(db);\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/gsondemo/src/com/example/gsondemo/Dbadapter.java", "stars": "74", "class": {"name": "DatabaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getAzkaban", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AzkabanWebServer", "snippet": "  public AzkabanWebServer getAzkaban() {    return AzkabanWebServer.getInstance();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/restli/java/azkaban/restli/UserManagerResource.java", "stars": "18", "class": {"name": "UserManagerResource", "extends": "ResourceContextHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": ["String", "String"], "throws": ["UserManagerException", "ServletException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String login(@ActionParam(\"username\") final String username,      @ActionParam(\"password\") final String password) throws UserManagerException,      ServletException {    final String ip = ResourceUtils.getRealClientIpAddr(this.getContext());    logger        .info(\"Attempting to login for \" + username + \" from ip '\" + ip + \"'\");    final Session session = createSession(username, password, ip);    logger.info(\"Session id created for user '\" + username + \"' and ip \" + ip);    return session.getSessionId();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/restli/java/azkaban/restli/UserManagerResource.java", "stars": "18", "class": {"name": "UserManagerResource", "extends": "ResourceContextHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserFromSessionId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "User", "snippet": "  public User getUserFromSessionId(@ActionParam(\"sessionId\") final String sessionId) {    final Session session = getSessionFromSessionId(sessionId);    final azkaban.user.User azUser = session.getUser();    // Fill out the restli object with properties from the Azkaban user    final User user = new User();    user.setUserId(azUser.getUserId());    user.setEmail(azUser.getEmail());    return user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/restli/java/azkaban/restli/UserManagerResource.java", "stars": "18", "class": {"name": "UserManagerResource", "extends": "ResourceContextHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "createSession", "params": ["String", "String", "String"], "throws": ["UserManagerException", "ServletException"], "modifiers": ["private"], "return_type": "Session", "snippet": "  private Session createSession(final String username, final String password, final String ip)      throws UserManagerException, ServletException {    final UserManager manager = getAzkaban().getTransitionService().getUserManager();    final azkaban.user.User user = manager.getUser(username, password);    final String randomUID = UUID.randomUUID().toString();    final Session session = new Session(randomUID, user, ip);    getAzkaban().getSessionCache().addSession(session);    return session;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/restli/java/azkaban/restli/UserManagerResource.java", "stars": "18", "class": {"name": "UserManagerResource", "extends": "ResourceContextHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSessionFromSessionId", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Session", "snippet": "  private Session getSessionFromSessionId(final String sessionId) {    if (sessionId == null) {      return null;    }    return getAzkaban().getSessionCache().getSession(sessionId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/restli/java/azkaban/restli/UserManagerResource.java", "stars": "18", "class": {"name": "UserManagerResource", "extends": "ResourceContextHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "insertOrUpdate", "params": ["String", "List<String>", "List<Object>", "List<Object>", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String insertOrUpdate(String tableName, List<String> tableColumns, List<Object> valueColumns,                                 List<Object> destKeys, List<Object> destvalues) {        StringBuilder builder = new StringBuilder();        builder.append(DESC_INSERT).append(tableName);        // \u62fc\u63a5\u5b57\u6bb5        StringJoiner paramsStr = new StringJoiner(\"`,`\", \"(`\", \"`)\");        tableColumns.forEach(paramsStr::add);        builder.append(paramsStr.toString()).append(DESC_VALUES);        StringJoiner valuesStr = new StringJoiner(\",\", \"(\", \")\");        for (Object valueColumn : valueColumns) {            StringBuilder valueParamBuilder = new StringBuilder();            // \u83b7\u53d6\u5c5e\u6027\u7c7b\u578b            String filedType = valueColumn.getClass().getSimpleName();            // \u5c5e\u6027\u5224\u65ad            if (filedType.equals(\"Integer\") || filedType.equals(\"Long\")) {                valueParamBuilder.append(valueColumn);            } else if (filedType.equals(\"String\") || filedType.equals(\"Boolean\")) {                valueParamBuilder.append(\"'\").append(valueColumn).append(\"'\");            }            valuesStr.add(valueParamBuilder);        }        // \u62fc\u63a5\u5b57\u6bb5\u503c        builder.append(valuesStr.toString()).append(DESC_INSERT_OR_UPDATE);        StringJoiner kvStr = new StringJoiner(\",\", \"\", \"\");        for (int i = 0; i < destKeys.size(); i++) {            StringBuilder kvBuilder = new StringBuilder();            kvBuilder.append(destKeys.get(i)).append(\"=\");            // \u5c5e\u6027\u5224\u65ad            Object value = destvalues.get(i);            String filedValueType = value.getClass().getSimpleName();            // \u5c5e\u6027\u5224\u65ad            if (filedValueType.equals(\"Integer\") || filedValueType.equals(\"Long\")) {                kvBuilder.append(value);            } else if (filedValueType.equals(\"String\") || filedValueType.equals(\"Boolean\")) {                kvBuilder.append(\"'\").append(value).append(\"'\");            }            kvStr.add(kvBuilder);        }        // \u62fc\u63a5\u9700\u8981\u63d2\u5165\u6216\u8005\u4fee\u6539\u7684\u503c        builder.append(kvStr.toString()).append(\";\");        return builder.toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/SqlWrapperUtils.java", "stars": "18", "class": {"name": "SqlWrapperUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyObjectBar.java", "stars": "15", "class": {"name": "LazyObjectBar", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyObjectBar.java", "stars": "15", "class": {"name": "LazyObjectBar", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "visitMethodInsn", "params": ["int", "String", "String", "String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void visitMethodInsn(int opcodeAndSource, String owner, String name, String descriptor,            boolean isInterface) {        // maybe it can be ignored, because the api has always been Opcodes.ASM8?        if (api < Opcodes.ASM5 && (opcodeAndSource & Opcodes.SOURCE_DEPRECATED) == 0) {            super.visitMethodInsn(opcodeAndSource, owner, name, descriptor, isInterface);            return;        }        int opcode = opcodeAndSource & ~Opcodes.SOURCE_MASK;        MethodInsnNode mn = new MethodInsnNode(opcode, owner, name, descriptor, isInterface);        // navigate to the instruction where the object needs to be created        if (opcode == INVOKESPECIAL || \"<init>\".equals(name)) {            methods.add(mn);        }        // support multiple extension types, which have different degrees of impact on        // execution efficiency        if (isSuspendableInsn(opcode, name)) {            Label label = new Label();            super.visitLabel(label);            labels.add(label);            nodes.add(mn);        }        instructions.add(mn);    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/JroutineMethodAnalyzer.java", "stars": "3", "class": {"name": "JroutineMethodAnalyzer", "extends": "MethodNode", "implements": ["Opcodes"], "modifiers": ["public"]}}, {"method_name": "visitEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void visitEnd() {        if (instructions.size() == 0 || labels.size() == 0) {            accept(mv);            return;        }        operandStackRecorderVar = maxLocals;        try {            HashMap<AbstractInsnNode, MethodInsnNode> promotableVars = null;            if ((promotableVars = findPromotableVars()).size() > 0) {                promoteVars(promotableVars);            }            //            basicAnalyzer = new Analyzer<BasicValue>(new SimpleVerifier()) {                protected Frame<BasicValue> newFrame(final int nLocals, final int nStack) {                    return new MonitoringFrame(nLocals, nStack);                }                @SuppressWarnings({ \"rawtypes\", \"unchecked\" })                protected Frame<BasicValue> newFrame(final Frame src) {                    return new MonitoringFrame(src);                }            };            basicAnalyzer.analyze(className, this);            accept(new JroutineMethodAdapter(this));        } catch (AnalyzerException e) {            logger.error(e.getMessage(), e);            e.printStackTrace();            accept(mv);        }    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/JroutineMethodAnalyzer.java", "stars": "3", "class": {"name": "JroutineMethodAnalyzer", "extends": "MethodNode", "implements": ["Opcodes"], "modifiers": ["public"]}}, {"method_name": "getLabelNode", "params": ["Label"], "throws": null, "modifiers": ["protected"], "return_type": "LabelNode", "snippet": "    protected LabelNode getLabelNode(Label label) {        if (!(label.info instanceof LabelNode)) {            label.info = new LabelNode(label);        }        return (LabelNode) label.info;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/JroutineMethodAnalyzer.java", "stars": "3", "class": {"name": "JroutineMethodAnalyzer", "extends": "MethodNode", "implements": ["Opcodes"], "modifiers": ["public"]}}, {"method_name": "findPromotableVars", "params": [], "throws": ["AnalyzerException"], "modifiers": ["private"], "return_type": "HashMap<AbstractInsnNode,MethodInsnNode>", "snippet": "    private HashMap<AbstractInsnNode, MethodInsnNode> findPromotableVars() throws AnalyzerException {        HashMap<AbstractInsnNode, MethodInsnNode> promotableVars = new HashMap<AbstractInsnNode, MethodInsnNode>();        Analyzer<SourceValue> sourceAnalyzer = new Analyzer<SourceValue>(new SourceInterpreter());        sourceAnalyzer.analyze(className, this);        Frame<SourceValue>[] frames = sourceAnalyzer.getFrames();        for (int i = 0; i < methods.size(); i++) {            MethodInsnNode methodInsn = methods.get(i);            Frame<SourceValue> frame = frames[instructions.indexOf(methodInsn)];            Type[] args = Type.getArgumentTypes(methodInsn.desc);            SourceValue sourceValue = frame.getStack(frame.getStackSize() - args.length - 1);            Set<AbstractInsnNode> insns = sourceValue.insns;            for (AbstractInsnNode insn : insns) {                if (insn.getOpcode() == NEW) {                    promotableVars.put(insn, methodInsn);                } else {                    if (insn.getOpcode() == DUP) {                        AbstractInsnNode prevInsn = insn.getPrevious();                        if (prevInsn.getOpcode() == NEW) {                            promotableVars.put(prevInsn, methodInsn);                        }                    } else if (insn.getOpcode() == SWAP) {                        AbstractInsnNode insn1 = insn.getPrevious();                        AbstractInsnNode insn2 = insn1.getPrevious();                        if (insn2.getOpcode() == NEW && insn1.getOpcode() == DUP_X1) {                            promotableVars.put(insn2, methodInsn);                        }                    }                }            }        }        return promotableVars;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/JroutineMethodAnalyzer.java", "stars": "3", "class": {"name": "JroutineMethodAnalyzer", "extends": "MethodNode", "implements": ["Opcodes"], "modifiers": ["public"]}}, {"method_name": "promoteVars", "params": ["HashMap<AbstractInsnNode,MethodInsnNode>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void promoteVars(HashMap<AbstractInsnNode, MethodInsnNode> promotableVars) {        int updateMaxStack = 0;        for (Map.Entry<AbstractInsnNode, MethodInsnNode> entry : promotableVars.entrySet()) {            AbstractInsnNode node1 = entry.getKey();            AbstractInsnNode node2 = node1.getNext();            AbstractInsnNode node3 = node2.getNext();            boolean requireDup = false;            instructions.remove(node1); // NEW            if (node2.getOpcode() == DUP) {                instructions.remove(node2); // DUP                requireDup = true;            } else if (node2.getOpcode() == DUP_X1) {                instructions.remove(node2); // DUP_X1                instructions.remove(node3); // SWAP                requireDup = true;            }            MethodInsnNode mnode = entry.getValue();            // FIXME ???            AbstractInsnNode mn = mnode;            int varOffset = operandStackRecorderVar + 1;            Type[] args = Type.getArgumentTypes(mnode.desc);            if (args.length == 0) {                InsnList doNew = new InsnList();                doNew.add(node1);                if (requireDup) {                    doNew.add(new InsnNode(DUP));                }                instructions.insertBefore(mn, doNew);                mn = doNew.getLast();                continue;            }            if (args.length == 1 && args[0].getSize() == 1) {                InsnList doNew = new InsnList();                doNew.add(node1);                if (requireDup) {                    doNew.add(new InsnNode(DUP));                    doNew.add(new InsnNode(DUP_X1));                    doNew.add(new InsnNode(POP2));                    updateMaxStack = updateMaxStack < 2 ? 2 : updateMaxStack;                } else {                    doNew.add(new InsnNode(SWAP));                }                instructions.insertBefore(mn, doNew);                mn = doNew.getLast();                continue;            }            if ((args.length == 1 && args[0].getSize() == 2)                    || (args.length == 2 && args[0].getSize() == 1 && args[1].getSize() == 1)) {                final InsnList doNew = new InsnList();                doNew.add(node1);                if (requireDup) {                    doNew.add(new InsnNode(DUP));                    doNew.add(new InsnNode(DUP2_X2));                    doNew.add(new InsnNode(POP2));                    updateMaxStack = updateMaxStack < 2 ? 2 : updateMaxStack;                } else {                    doNew.add(new InsnNode(DUP_X2));                    doNew.add(new InsnNode(POP));                    updateMaxStack = updateMaxStack < 1 ? 1 : updateMaxStack;                }                instructions.insertBefore(mn, doNew);                mn = doNew.getLast();                continue;            }            InsnList doNew = new InsnList();            for (int j = args.length - 1; j >= 0; j--) {                Type type = args[j];                doNew.add(new VarInsnNode(type.getOpcode(ISTORE), varOffset));                varOffset += type.getSize();            }            maxLocals = varOffset > maxLocals ? varOffset : maxLocals;            doNew.add(node1);            if (requireDup) {                doNew.add(new InsnNode(DUP));            }            for (int j = 0; j < args.length; j++) {                Type type = args[j];                varOffset -= type.getSize();                doNew.add(new VarInsnNode(type.getOpcode(ILOAD), varOffset));                if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {                    updateMaxStack = updateMaxStack < 1 ? 1 : updateMaxStack;                    doNew.add(new InsnNode(ACONST_NULL));                    doNew.add(new VarInsnNode(type.getOpcode(ISTORE), varOffset));                }            }            instructions.insertBefore(mn, doNew);            mn = doNew.getLast();        }        maxStack += updateMaxStack;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/JroutineMethodAnalyzer.java", "stars": "3", "class": {"name": "JroutineMethodAnalyzer", "extends": "MethodNode", "implements": ["Opcodes"], "modifiers": ["public"]}}, {"method_name": "isSuspendableInsn", "params": ["int", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isSuspendableInsn(int opcode, String name) {        if (Configs.getExtensionType() == ExtensionType.METHOD && isMethodInsn(opcode, name)) {            return true;        }        if (Configs.getExtensionType() == ExtensionType.METHOD_AND_LOOP                && (isMethodInsn(opcode, name) || isLoopInsn(opcode))) {            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/JroutineMethodAnalyzer.java", "stars": "3", "class": {"name": "JroutineMethodAnalyzer", "extends": "MethodNode", "implements": ["Opcodes"], "modifiers": ["public"]}}, {"method_name": "isMethodInsn", "params": ["int", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isMethodInsn(int opcode, String name) {        return opcode == INVOKEINTERFACE || opcode == INVOKEVIRTUAL || opcode == INVOKESTATIC                || (opcode == INVOKESPECIAL && !\"<init>\".equals(name));    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/JroutineMethodAnalyzer.java", "stars": "3", "class": {"name": "JroutineMethodAnalyzer", "extends": "MethodNode", "implements": ["Opcodes"], "modifiers": ["public"]}}, {"method_name": "isLoopInsn", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isLoopInsn(int opcode) {        return true;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/JroutineMethodAnalyzer.java", "stars": "3", "class": {"name": "JroutineMethodAnalyzer", "extends": "MethodNode", "implements": ["Opcodes"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return id;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProject.java", "stars": "4", "class": {"name": "SketchwareProject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProjectName() {        return projectName;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProject.java", "stars": "4", "class": {"name": "SketchwareProject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectPackage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProjectPackage() {        return projectPackage;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProject.java", "stars": "4", "class": {"name": "SketchwareProject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(int id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProject.java", "stars": "4", "class": {"name": "SketchwareProject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProjectName(String projectName) {        this.projectName = projectName;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProject.java", "stars": "4", "class": {"name": "SketchwareProject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectPackage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProjectPackage(String projectPackage) {        this.projectPackage = projectPackage;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProject.java", "stars": "4", "class": {"name": "SketchwareProject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIconPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIconPath() {        return iconPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProject.java", "stars": "4", "class": {"name": "SketchwareProject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIconPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIconPath(String iconPath) {        this.iconPath = iconPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProject.java", "stars": "4", "class": {"name": "SketchwareProject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjects", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<SketchwareProject>", "snippet": "    public ArrayList<SketchwareProject> getProjects () {        // init list with SketchwareProject object        ArrayList<SketchwareProject> projects = new ArrayList<>();        // init list for list files        ArrayList<String> files = new ArrayList<>();        // list files        FileUtil.listDir(SKETCHWARE_PROJECTS_PATH, files);        // adding projects to list        for(String file : files) {            // decrypting list file and set as HashMap            HashMap<String, Object> project = JsonUtil.from(projectDecryptor.decryptListFile(file.concat(\"/project\")));            SketchwareProject sketchwareProject = new SketchwareProject();            sketchwareProject.setId(Integer.parseInt(Objects.requireNonNull(project.get(\"sc_id\")).toString()));            sketchwareProject.setProjectName(Objects.requireNonNull(project.get(\"my_app_name\")).toString());            sketchwareProject.setProjectPackage(Objects.requireNonNull(project.get(\"my_sc_pkg_name\")).toString());            sketchwareProject.setIconPath(SKETCHWARE_BASE_PATH + \"/resources/icons/\" + project.get(\"sc_id\") + \"/icon.png\");            projects.add(sketchwareProject);        }        return projects;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectBackups", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<BackupedProject>", "snippet": "    public ArrayList<BackupedProject> getProjectBackups (String src) {        // binding array with projects        ArrayList<BackupedProject> projects = new ArrayList<>();        // binding array with files in [src]        ArrayList<String> files = new ArrayList<>();        // list files to [files]        FileUtil.listDir(src, files);        // perform projects list        for(String file : files) {            // perform Backuped Projects            BackupedProject project = JsonUtil.gson.fromJson(FileUtil.readFile(file.concat(\"/config.scfg\")), BackupedProject.class);            project.setProject(getProject(project.getConfiguration().getListFilePath()));            // perform SketchwareProjectConfiguration            project.setConfiguration(project.getConfiguration());            projects.add(project);        }        return projects;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBackupedProjects", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<ArrayList>", "snippet": "    public ArrayList<ArrayList<BackupedProject>> getBackupedProjects () {        // init array with array        ArrayList<ArrayList<BackupedProject>> array = new ArrayList<>();        // making array with files        ArrayList<String> files = new ArrayList<>();        FileUtil.listDir(SKETCHCODE_BACKUP_BASE_PATH, files);        // adding all to list        for(String file : files) {            ArrayList<BackupedProject> backupedProjects = getProjectBackups(file);            array.add(backupedProjects);        }        return array;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "backupProject", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void backupProject (int projectId) {        backupProject(projectId, SKETCHCODE_BACKUP_BASE_PATH);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "backupProject", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void backupProject (int projectId, String sourcePath) {        SketchwareProjectConfiguration configuration = getConfiguration(projectId);        BackupedProject backupData = getBackupConfiguration(projectId, sourcePath);        // writing configuration        FileUtil.writeFile(sourcePath.concat(\"/\").concat(backupData.getProject().getProjectPackage()).concat(\"/\").concat(String.valueOf(backupData.getTime())).concat(\"/config.scfg\"), new Gson().toJson(backupData));        // copying sketchware conf to sourcePath/info        FileUtil.copyFile(configuration.getListFilePath(), backupData.getConfiguration().getListFilePath());        // copying project        copyProject(configuration, backupData.getConfiguration());    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBackupConfiguration", "params": ["int", "String"], "throws": null, "modifiers": ["private"], "return_type": "BackupedProject", "snippet": "    private BackupedProject getBackupConfiguration (int forProject, String sourcePath) {        // making configuration        BackupedProject configuration = new BackupedProject();        // get a sketchware project        SketchwareProject sketchwareProject = getSketchwareProject(forProject);        // get current time        long time = System.currentTimeMillis();        // base folder        String baseFolder = sourcePath.concat(\"/\").concat(sketchwareProject.getProjectPackage()).concat(\"/\").concat(String.valueOf(time));        // set backup conf values        configuration.getConfiguration().setId(forProject);        configuration.getConfiguration().setBakFolderPath(baseFolder.concat(\"/bak\"));        configuration.getConfiguration().setListFilePath(baseFolder.concat(\"/info/project\"));        configuration.getConfiguration().setResources(new SketchwareProjectResources(baseFolder.concat(\"/resources/icons\"), baseFolder.concat(\"/resources/images\"),                baseFolder.concat(\"/resources/fonts\"), baseFolder.concat(\"/resources/fonts\")));        configuration.setTime(time);        configuration.setProject(getSketchwareProject(forProject));        return configuration;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSketchwareProject", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SketchwareProject", "snippet": "    public SketchwareProject getSketchwareProject (int projectId) {        // checking is project exist        if(!isProjectExist(projectId))            throw new ProjectNotFoundException(projectId);        // exec getProject() func for get project        return getProject(SKETCHWARE_PROJECTS_PATH.concat(\"/\").concat(String.valueOf(projectId)).concat(\"/project\"));    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProject", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SketchwareProject", "snippet": "    public SketchwareProject getProject (String srcFile) {        // checking is file exist, if not throwing exception        if(!FileUtil.isExistFile(srcFile))            throw new ProjectNotHaveRequiredInfoException(\"failed to access file: \".concat(srcFile).concat(\" file not found.\"));        // decrypting project data        HashMap<String, Object> project = JsonUtil.from(projectDecryptor.decryptListFile(srcFile));        // set values        SketchwareProject sketchwareProject = new SketchwareProject();        sketchwareProject.setId(Integer.parseInt(Objects.requireNonNull(project.get(\"sc_id\")).toString()));        sketchwareProject.setProjectName(Objects.requireNonNull(project.get(\"my_app_name\")).toString());        sketchwareProject.setProjectPackage(Objects.requireNonNull(project.get(\"my_sc_pkg_name\")).toString());        sketchwareProject.setIconPath(SKETCHWARE_BASE_PATH + \"/resources/icons/\" + project.get(\"sc_id\") + \"/icon.png\");        return sketchwareProject;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDecryptor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ProjectDecryptor", "snippet": "    public ProjectDecryptor getDecryptor() {        return projectDecryptor;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyProject", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void copyProject (int id, int newId) {        SketchwareProjectConfiguration configuration = getConfiguration(id);        SketchwareProjectConfiguration newConfiguration = getNewConfiguration(newId);        copyProject(configuration, newConfiguration);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNewConfiguration", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SketchwareProjectConfiguration", "snippet": "    public SketchwareProjectConfiguration getNewConfiguration (int id) {        SketchwareProjectConfiguration configuration = new SketchwareProjectConfiguration();        configuration.setId(id);        configuration.setResources(new SketchwareProjectResources(SKETCHWARE_RESOURCES_PATH.concat(\"/icons/\").concat(String.valueOf(id)), SKETCHWARE_RESOURCES_PATH.concat(\"/images/\").concat(String.valueOf(id)), SKETCHWARE_RESOURCES_PATH.concat(\"/fonts/\").concat(String.valueOf(id)), SKETCHWARE_RESOURCES_PATH.concat(\"/sounds/\").concat(String.valueOf(id))));        configuration.setListFilePath(SKETCHWARE_PROJECTS_PATH.concat(\"/\").concat(String.valueOf(id)).concat(\"/project\"));        configuration.setBakFolderPath(SKETCHWARE_BASE_PATH.concat(\"/bak/\").concat(String.valueOf(id)));        return configuration;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextFreeId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int nextFreeId () {        int returnValue = 601;        while (true) {            if(isProjectExist(returnValue))                returnValue++;            else return returnValue;        }    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "duplicateProject", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void duplicateProject (int projectId) {        copyProject(projectId, nextFreeId());    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyProject", "params": ["SketchwareProjectConfiguration", "SketchwareProjectConfiguration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void copyProject (SketchwareProjectConfiguration configuration, SketchwareProjectConfiguration newConfiguration) {        try {            // starting copying logic & view data.            if (configuration.getBakFolderPath() != null)                if (newConfiguration.getBakFolderPath() != null)                    CopyManager.copyFolder(new File(configuration.getBakFolderPath()), new File(newConfiguration.getBakFolderPath()));                else                    throw new ProjectNotHaveRequiredInfoException(\"The configuration has a bak path, but the new Configuration one does not have a specified path for copying.\");            // copying resources            if (configuration.getResources().getIconsPath() != null)                if (newConfiguration.getResources().getIconsPath() != null)                    CopyManager.copyFolder(new File(configuration.getResources().getIconsPath()), new File(newConfiguration.getResources().getIconsPath()));                else                    throw new ProjectNotHaveRequiredInfoException(\"The configuration have resources->icons path, but the new Configuration does not have specified path for icons\");            if (configuration.getResources().getFontsPath() != null)                if (newConfiguration.getResources().getFontsPath() != null)                    CopyManager.copyFolder(new File(configuration.getResources().getFontsPath()), new File(newConfiguration.getResources().getFontsPath()));                else                    throw new ProjectNotHaveRequiredInfoException(\"The configuration have resources->fonts path, but the new Configuration does not have specified path for fonts.\");            if (configuration.getResources().getImagesPath() != null)                if (newConfiguration.getResources().getImagesPath() != null)                    CopyManager.copyFolder(new File(configuration.getResources().getImagesPath()), new File(newConfiguration.getResources().getImagesPath()));                else                    throw new ProjectNotHaveRequiredInfoException(\"The configuration have resources->images path, but the new Configuration does not have specified path for images.\");            if (configuration.getResources().getSoundsPath() != null)                if (newConfiguration.getResources().getImagesPath() != null)                    CopyManager.copyFolder(new File(configuration.getResources().getSoundsPath()), new File(newConfiguration.getResources().getSoundsPath()));                else                    throw new ProjectNotHaveRequiredInfoException(\"The configuration have resources->sounds path, but the new Configuration does not have specified path for sounds.\");            if (configuration.getListFilePath() == null)                throw new ProjectNotHaveRequiredInfoException(\"configuration does not have a required list file. Maybe you should use validateProject() ?\");            // checking is configuration exists            if(!FileUtil.isExistFile(configuration.getListFilePath()))                throw new ProjectNotHaveRequiredInfoException(\"project list file not exist at path: \".concat(configuration.getListFilePath()));            // get [configuration] info from list file            HashMap<String, Object> confListFileInfo = JsonUtil.from(getDecryptor().decryptListFile(configuration.getListFilePath()));            if (confListFileInfo == null || confListFileInfo.isEmpty())                throw new ProjectNotHaveRequiredInfoException(\"configuration have non-exist or bad formatted project list file.\");            // transforming to new project id            confListFileInfo.put(\"sc_id\", String.valueOf(newConfiguration.getId()));            System.out.println(SKETCHWARE_PROJECTS_PATH.concat(\"/\").concat(String.valueOf(newConfiguration.getId())));            // making paths            FileUtil.makeDir(SKETCHWARE_PROJECTS_PATH.concat(\"/\").concat(String.valueOf(newConfiguration.getId())));            // writing list info file with new sc_id in new project path            getDecryptor().writeEncodedListFile(newConfiguration.getListFilePath() , new Gson().toJson(confListFileInfo));            // end        } catch (IOException io) {            io.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfiguration", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SketchwareProjectConfiguration", "snippet": "    public SketchwareProjectConfiguration getConfiguration (int sketchwareProjectId) {        // checking is project exist        if (!isProjectExist(sketchwareProjectId))            throw new ProjectNotFoundException(sketchwareProjectId);        // making configuration        SketchwareProjectConfiguration configuration = new SketchwareProjectConfiguration();        configuration.setBakFolderPath(SKETCHWARE_BASE_PATH.concat(\"/bak/\").concat(String.valueOf(sketchwareProjectId)));        configuration.setListFilePath(SKETCHWARE_PROJECTS_PATH.concat(\"/\").concat(String.valueOf(sketchwareProjectId)).concat(\"/project\"));        configuration.setResources(new SketchwareProjectResources(SKETCHWARE_RESOURCES_PATH.concat(\"/icons/\").concat(String.valueOf(sketchwareProjectId)), SKETCHWARE_RESOURCES_PATH.concat(\"/images/\").concat(String.valueOf(sketchwareProjectId)), SKETCHWARE_RESOURCES_PATH.concat(\"/fonts/\").concat(String.valueOf(sketchwareProjectId)),SKETCHWARE_RESOURCES_PATH.concat(\"/sounds/\").concat(String.valueOf(sketchwareProjectId))));        return configuration;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isProjectExist", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isProjectExist (int projectId) {        // making boolean response variable        boolean is = false;        // Make list with files from SKETCHWARE_PROJECTS_PATH        ArrayList<String> files = new ArrayList<>();        FileUtil.listDir(SKETCHWARE_PROJECTS_PATH, files);        // checking is exist        for (String file : files) {            if(Objects.equals(Uri.parse(file).getLastPathSegment(), String.valueOf(projectId))) {                is = true;            }        }        return is;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String toString() {            return \"Project with input id \" + id + \" not found.\";        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectNotFoundException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getMessage() {            return toString();        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectNotFoundException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String toString() {            return \"ProjectNotHaveRequiredInfoException: \" + msg;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectNotHaveRequiredInfoException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getMessage() {            return msg;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectNotHaveRequiredInfoException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "decryptListFile", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String decryptListFile(String path) {            try {                Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");                byte[] arrby = \"sketchwaresecure\".getBytes();                // init Cipher for decryption                cipher.init(2, new SecretKeySpec(arrby, \"AES\"), new IvParameterSpec(arrby));                RandomAccessFile randomAccessFile = new RandomAccessFile(path, \"r\");                byte[] arrby2 = new byte[(int) randomAccessFile.length()];                randomAccessFile.readFully(arrby2);                return new String(cipher.doFinal(arrby2));            } catch (Exception e) {                e.printStackTrace();                throw new ProjectCryptorException(\"failed when trying to get sketchware info from path: \".concat(path));            }        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectDecryptor", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "writeEncodedListFile", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void writeEncodedListFile(String path, String value) {            try {                Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");                byte[] arrby = \"sketchwaresecure\".getBytes();                // init Cipher for decryption                cipher.init(1, new SecretKeySpec(arrby, \"AES\"), new IvParameterSpec(arrby));                byte[] arrby2 = cipher.doFinal(value.getBytes());                RandomAccessFile randomAccessFile = new RandomAccessFile(path, \"rw\");                randomAccessFile.setLength(0L);                randomAccessFile.write(arrby2);            } catch (Exception e) {                throw new ProjectCryptorException(\"failed when trying to write sketchware info to path: \".concat(path).concat(\". Error: \").concat(e.getMessage()));            }        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectDecryptor", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String toString() {                return \"ProjectCryptorException: \" + msg;            }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectCryptorException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getMessage() {                return msg;            }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/ProjectUtil.java", "stars": "4", "class": {"name": "ProjectCryptorException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onInitialize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onInitialize() {        System.out.println(\"Starting Fabric NDI, loading NDI libraries.\");        Devolay.loadLibraries();        instance = this;        cameras = new ConcurrentHashMap<>();        cameraControls = new ConcurrentHashMap<>();        cameraEntities = new ConcurrentSet<>();        keyBinding = FabricKeyBinding.Builder.create(new Identifier(\"fabricndi\", \"newcamera\"), InputUtil.Type.KEYSYM, GLFW.GLFW_KEY_R, \"NDI\").build();        killAll = FabricKeyBinding.Builder.create(new Identifier(\"fabricndi\", \"killall\"), InputUtil.Type.KEYSYM, GLFW.GLFW_KEY_Y, \"NDI\").build();        KeyBindingRegistry.INSTANCE.addCategory(\"NDI\");        KeyBindingRegistry.INSTANCE.register(keyBinding);        KeyBindingRegistry.INSTANCE.register(killAll);        ClientTickCallback.EVENT.register(e -> {            if(keyBinding.isPressed() && e.world != null && e.player != null){                UUID uuid = UUID.randomUUID();                CameraEntity armorStandEntity = new CameraEntity(e.world, new GameProfile(uuid, uuid.toString()));                armorStandEntity.refreshPositionAndAngles(e.player.getX(), e.player.getY(), e.player.getZ(), e.player.yaw, e.player.pitch);                e.world.addEntity(armorStandEntity.getEntityId(), armorStandEntity);                keyBinding.setPressed(false);                FabricNDI.instance.cameraEntities.add(armorStandEntity);            } else if(killAll.isPressed() && e.world != null && e.player != null){                for(Entity ent : cameraEntities){                    e.world.removeEntity(ent.getEntityId());                }            }        });    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/FabricNDI.java", "stars": "5", "class": {"name": "FabricNDI", "extends": null, "implements": ["ModInitializer"], "modifiers": ["public"]}}, {"method_name": "getGameRenderHook", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GameRenderHook", "snippet": "    public GameRenderHook getGameRenderHook() {        if(gameRenderHook == null)            gameRenderHook = new GameRenderHook(\"MC - Player\");        return gameRenderHook;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/FabricNDI.java", "stars": "5", "class": {"name": "FabricNDI", "extends": null, "implements": ["ModInitializer"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        show02();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo04File.java", "stars": "2", "class": {"name": "Demo04File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show02() {        File f1 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shung\");        //\u4e0d\u5b58\u5728,\u5c31\u6ca1\u6709\u5fc5\u8981\u83b7\u53d6        if(f1.exists()){            System.out.println(f1.isDirectory());            System.out.println(f1.isFile());        }        File f2 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\");        if(f2.exists()){            System.out.println(f2.isDirectory());//true            System.out.println(f2.isFile());//false        }        File f3 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\shungyuan.iml\");        if(f3.exists()){            System.out.println(f3.isDirectory());//false            System.out.println(f3.isFile());//true        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo04File.java", "stars": "2", "class": {"name": "Demo04File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show01() {        File f1 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\");        System.out.println(f1.exists());//true        File f2 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shung\");        System.out.println(f2.exists());//false        File f3 = new File(\"shungyuan.iml\");//\u76f8\u5bf9\u8def\u5f84 C:\\Users\\itcast\\IdeaProjects\\shungyuan\\shungyuan.iml        System.out.println(f3.exists());//true        File f4 = new File(\"a.txt\");        System.out.println(f4.exists());//false    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo04File.java", "stars": "2", "class": {"name": "Demo04File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return mCount;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SelectValueScrollAdapter.java", "stars": "74", "class": {"name": "SelectValueScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getItem(int position) {        return Integer.valueOf(position);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SelectValueScrollAdapter.java", "stars": "74", "class": {"name": "SelectValueScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        if (convertView == null) {            convertView = LayoutInflater.from(mContext).inflate(R.layout.card_select_value, parent);        }        final TextView view = (TextView) convertView.findViewById(R.id.value);        view.setText(String.format(\"%02d\", position));        return setItemOnCard(this, convertView);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SelectValueScrollAdapter.java", "stars": "74", "class": {"name": "SelectValueScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "findIdPosition", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int findIdPosition(Object id) {        if (id instanceof Integer) {            int idInt = (Integer) id;            if (idInt >= 0 && idInt < mCount) {                return idInt;            }        }        return AdapterView.INVALID_POSITION;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SelectValueScrollAdapter.java", "stars": "74", "class": {"name": "SelectValueScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "findItemPosition", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int findItemPosition(Object item) {        return findIdPosition(item);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SelectValueScrollAdapter.java", "stars": "74", "class": {"name": "SelectValueScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobId() {    return jobId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setJobId(String jobId) {    this.jobId = jobId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobName() {    return jobName;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setJobName(String jobName) {    this.jobName = jobName;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTrackingURL", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getTrackingURL() {    return trackingURL;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTrackingURL", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTrackingURL(String trackingURL) {    this.trackingURL = trackingURL;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFailureInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFailureInfo() {    return failureInfo;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFailureInfo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFailureInfo(String failureInfo) {    this.failureInfo = failureInfo;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isComplete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isComplete() {    return isComplete;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setComplete", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setComplete(boolean complete) {    isComplete = complete;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSuccessful", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isSuccessful() {    return isSuccessful;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSuccessful", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSuccessful(boolean successful) {    isSuccessful = successful;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMapProgress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "  public float getMapProgress() {    return mapProgress;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMapProgress", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMapProgress(float mapProgress) {    this.mapProgress = mapProgress;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReduceProgress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "  public float getReduceProgress() {    return reduceProgress;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setReduceProgress", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setReduceProgress(float reduceProgress) {    this.reduceProgress = reduceProgress;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalMappers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getTotalMappers() {    return totalMappers;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalMappers", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTotalMappers(int totalMappers) {    this.totalMappers = totalMappers;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalReducers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getTotalReducers() {    return totalReducers;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalReducers", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTotalReducers(int totalReducers) {    this.totalReducers = totalReducers;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFinishedMappersCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getFinishedMappersCount() {    return finishedMappersCount;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFinishedMappersCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFinishedMappersCount(int finishedMappersCount) {    this.finishedMappersCount = finishedMappersCount;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFinishedReducersCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getFinishedReducersCount() {    return finishedReducersCount;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFinishedReducersCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFinishedReducersCount(int finishedReducersCount) {    this.finishedReducersCount = finishedReducersCount;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getJobStartTime() {    return jobStartTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobStartTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setJobStartTime(long jobStartTime) {    this.jobStartTime = jobStartTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobLastUpdateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getJobLastUpdateTime() {    return jobLastUpdateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobLastUpdateTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setJobLastUpdateTime(long jobLastUpdateTime) {    this.jobLastUpdateTime = jobLastUpdateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCounters", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Counters", "snippet": "  public Counters getCounters() {    return this.counters;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCounters", "params": ["Counters"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCounters(Counters counters) {    this.counters = counters;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toJson() {    Map<String, Object> jsonObj = new HashMap<String, Object>();    jsonObj.put(\"jobId\", jobId);    jsonObj.put(\"jobName\", jobName);    jsonObj.put(\"trackingURL\", trackingURL);    jsonObj.put(\"failureInfo\", failureInfo);    jsonObj.put(\"isComplete\", String.valueOf(isComplete));    jsonObj.put(\"isSuccessful\", String.valueOf(isSuccessful));    jsonObj.put(\"mapProgress\", String.valueOf(mapProgress));    jsonObj.put(\"reduceProgress\", String.valueOf(reduceProgress));    jsonObj.put(\"jobStartTime\", String.valueOf(jobStartTime));    jsonObj.put(\"jobLastUpdateTime\", String.valueOf(jobLastUpdateTime));    jsonObj.put(\"totalMappers\", String.valueOf(totalMappers));    jsonObj.put(\"finishedMappersCount\", String.valueOf(finishedMappersCount));    jsonObj.put(\"totalReducers\", String.valueOf(totalReducers));    jsonObj.put(\"finishedReducersCount\", String.valueOf(finishedReducersCount));    jsonObj.put(\"counters\", StatsUtils.countersToJson(counters));    String countersString =        (counters != null) ? counters.makeEscapedCompactString() : \"\";    jsonObj.put(\"countersString\", countersString);    return jsonObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "MapReduceJobState", "snippet": "  public static MapReduceJobState fromJson(Object obj) throws Exception {    Map<String, Object> jsonObj = (HashMap<String, Object>) obj;    String jobId = (String) jsonObj.get(\"jobId\");    String jobName = (String) jsonObj.get(\"jobName\");    String trackingUrl = (String) jsonObj.get(\"trackingURL\");    boolean isComplete =        Boolean.parseBoolean((String) jsonObj.get(\"isComplete\"));    boolean isSuccessful =        Boolean.parseBoolean((String) jsonObj.get(\"isSuccessful\"));    String failureInfo = (String) jsonObj.get(\"failureInfo\");    float mapProgress = Float.parseFloat((String) jsonObj.get(\"mapProgress\"));    float reduceProgress =        Float.parseFloat((String) jsonObj.get(\"reduceProgress\"));    long jobStartTime = Long.parseLong((String) jsonObj.get(\"jobStartTime\"));    long jobLastUpdateTime =        Long.parseLong((String) jsonObj.get(\"jobLastUpdateTime\"));    int totalMappers = Integer.parseInt((String) jsonObj.get(\"totalMappers\"));    int finishedMappersCount =        Integer.parseInt((String) jsonObj.get(\"finishedMappersCount\"));    int totalReducers = Integer.parseInt((String) jsonObj.get(\"totalReducers\"));    int finishedReducersCount =        Integer.parseInt((String) jsonObj.get(\"finishedReducersCount\"));    String countersString = (String) jsonObj.get(\"countersString\");    Counters counters = Counters.fromEscapedCompactString(countersString);    return new MapReduceJobState(jobId, jobName, trackingUrl, failureInfo,        isComplete, isSuccessful, mapProgress, reduceProgress, jobStartTime,        jobLastUpdateTime, totalMappers, finishedMappersCount, totalReducers,        finishedReducersCount, counters);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/MapReduceJobState.java", "stars": "18", "class": {"name": "MapReduceJobState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequestMapping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRequestMapping() {        return requestMapping;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/XMLStatement.java", "stars": "13", "class": {"name": "XMLStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRequestMapping", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequestMapping(String requestMapping) {        this.requestMapping = requestMapping;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/XMLStatement.java", "stars": "13", "class": {"name": "XMLStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Statement>", "snippet": "    public List<Statement> getStatements() {        return statements;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/XMLStatement.java", "stars": "13", "class": {"name": "XMLStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addStatement", "params": ["List<Statement>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addStatement(List<Statement> statements) {        this.statements.addAll(statements);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/XMLStatement.java", "stars": "13", "class": {"name": "XMLStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addValidateStatement", "params": ["ValidateStatement"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addValidateStatement(ValidateStatement validateStatement) {        this.validateStatements.put(validateStatement.getId(), validateStatement);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/XMLStatement.java", "stars": "13", "class": {"name": "XMLStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValidateStatement", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ValidateStatement", "snippet": "    public ValidateStatement getValidateStatement(String id) {        return this.validateStatements.get(id);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/XMLStatement.java", "stars": "13", "class": {"name": "XMLStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "containsValidateStatement", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsValidateStatement(String id) {        return this.validateStatements.containsKey(id);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/XMLStatement.java", "stars": "13", "class": {"name": "XMLStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recover", "params": ["Message", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void recover(Message message, Throwable throwable) {        for (RabbitStrategy rabbitStrategy: rabbitStrategies) {            //Checks Strategy is suited for exception and message            boolean isSuccess = rabbitStrategy.process(message,throwable);            if (isSuccess){                //Apply suitable strategy                rabbitStrategy.recover(message,throwable);                break;            }        }    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/recover/CustomMessageRecover.java", "stars": "2", "class": {"name": "CustomMessageRecover", "extends": null, "implements": ["MessageRecoverer"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_funding_record);        ButterKnife.bind(this);        mAdapter = new FundRecordAdapter(this, mList);        mRecyclerview.setLayoutManager(new LinearLayoutManager(this));        mRecyclerview.setAdapter(mAdapter);        getData();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/otc/FundingRecordsActivity.java", "stars": "1", "class": {"name": "FundingRecordsActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            default:                break;            case R.id.back_img:                onBackPressed();                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/otc/FundingRecordsActivity.java", "stars": "1", "class": {"name": "FundingRecordsActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getData() {        for (int i = 0; i < 10; i++) {            FundRecordBean ecommendBean = new FundRecordBean();            ecommendBean.setNum(100);            ecommendBean.setStatus(i);            ecommendBean.setMessage(\"\u4e70\u5165\");            ecommendBean.setTime(1588685332362L);            Date currentTime = new Date(1588685332362L);            SimpleDateFormat formatter1 = new SimpleDateFormat(\"yyyy-MM-dd\");            String dateStr = formatter1.format(currentTime);            ecommendBean.setTitle(dateStr);            mList.add(ecommendBean);        }        mAdapter.setUpdate(mList);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/otc/FundingRecordsActivity.java", "stars": "1", "class": {"name": "FundingRecordsActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new BlockCustomFlower());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SyringaBlock.java", "stars": "2", "class": {"name": "SyringaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SyringaBlock.java", "stars": "2", "class": {"name": "SyringaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tFlowersFeature feature = new DefaultFlowersFeature(BlockClusterFeatureConfig::func_227300_a_) {\t\t\t@Override\t\t\tpublic BlockState getFlowerToPlace(Random random, BlockPos bp, BlockClusterFeatureConfig fc) {\t\t\t\treturn block.getDefaultState();\t\t\t}\t\t\t@Override\t\t\tpublic boolean place(IWorld world, ChunkGenerator generator, Random random, BlockPos pos, BlockClusterFeatureConfig config) {\t\t\t\tDimensionType dimensionType = world.getDimension().getType();\t\t\t\tboolean dimensionCriteria = false;\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\tdimensionCriteria = true;\t\t\t\tif (!dimensionCriteria)\t\t\t\t\treturn false;\t\t\t\treturn super.place(world, generator, random, pos, config);\t\t\t}\t\t};\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tboolean biomeCriteria = false;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"forest\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (!biomeCriteria)\t\t\t\tcontinue;\t\t\tbiome.addFeature(GenerationStage.Decoration.VEGETAL_DECORATION,\t\t\t\t\tfeature.withConfiguration(\t\t\t\t\t\t\t(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(block.getDefaultState()), new SimpleBlockPlacer()))\t\t\t\t\t\t\t\t\t.tries(64).build())\t\t\t\t\t\t\t.withPlacement(Placement.COUNT_HEIGHTMAP_32.configure(new FrequencyConfig(1))));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SyringaBlock.java", "stars": "2", "class": {"name": "SyringaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(SyringaBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SyringaBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SyringaBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlantType", "params": ["IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "PlantType", "snippet": "\t\tpublic PlantType getPlantType(IBlockReader world, BlockPos pos) {\t\t\treturn PlantType.Plains;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SyringaBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "apply", "params": ["Player", "VipType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void apply(Player player, VipType type) {        if (!isPresent()) return;        for (String command : getSection()) {            Bukkit.dispatchCommand(Bukkit.getConsoleSender(), Strings.prepareVipTypeMessage(command, player, type));        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/entity/section/Commands.java", "stars": "2", "class": {"name": "Commands", "extends": "VipSection", "implements": null, "modifiers": ["public"]}}, {"method_name": "toDistributionMasques", "params": ["DistributionMasqueUI", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<DistributionMasque>", "snippet": "    public List<DistributionMasque> toDistributionMasques(DistributionMasqueUI distributionMasqueUI, String codePostal, String typeRemettantStr) {        IdentiteDemandeurUI identiteDemandeur = distributionMasqueUI.getIdentiteDemandeur();        String hashIdentite = identiteDemandeur.getHashIdentite();        if (StringUtils.isNotBlank(hashIdentite)) {            String hashDemandeur = hashGenerator.hasherAvecPepper(hashIdentite);            ModeSaisie modeSaisie = recupererValeurOuNullDepuisEnum(identiteDemandeur.getModeSaisie(), ModeSaisie.class);            TypeRemettant typeRemettant = recupererValeurOuNullDepuisEnum(typeRemettantStr, TypeRemettant.class);            return recupererMasquesDistribues(distributionMasqueUI, hashDemandeur, identiteDemandeur.getNombrePersonnes(), modeSaisie, codePostal, typeRemettant);        }        return List.of();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/DistributionMasqueUIMapper.java", "stars": "5", "class": {"name": "DistributionMasqueUIMapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recupererValeurOuNullDepuisEnum", "params": ["String", "Class<E>"], "throws": null, "modifiers": ["private"], "return_type": "E", "snippet": "    private <E extends Enum<E>> E recupererValeurOuNullDepuisEnum(String valeur, Class<E> enumClass) {        return StringUtils.isNotBlank(valeur) ? Enum.valueOf(enumClass, valeur) : null;    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/DistributionMasqueUIMapper.java", "stars": "5", "class": {"name": "DistributionMasqueUIMapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recupererMasquesDistribues", "params": ["DistributionMasqueUI", "String", "Integer", "ModeSaisie", "String", "TypeRemettant"], "throws": null, "modifiers": ["private"], "return_type": "List<DistributionMasque>", "snippet": "    private List<DistributionMasque> recupererMasquesDistribues(DistributionMasqueUI distributionMasqueUI, String hashDemandeur, Integer nombrePersonnes, ModeSaisie modeSaisie, String codePostal, TypeRemettant typeRemettant) {        List<DistributionMasque> distributionMasques = new ArrayList<>();        if (distributionMasqueUI.getNbMasquesAdulteUsageUnique() > 0) {            distributionMasques.add(construireDistributionMasque(hashDemandeur, nombrePersonnes, distributionMasqueUI.getNbMasquesAdulteUsageUnique(), modeSaisie, ADULTE_USAGE_UNIQUE, codePostal, typeRemettant));        }        if (distributionMasqueUI.getNbMasquesAdulteReutilisable() > 0) {            distributionMasques.add(construireDistributionMasque(hashDemandeur, nombrePersonnes, distributionMasqueUI.getNbMasquesAdulteReutilisable(), modeSaisie, ADULTE_REUTILISABLE, codePostal, typeRemettant));        }        if (distributionMasqueUI.getNbMasquesEnfantUsageUnique() > 0) {            distributionMasques.add(construireDistributionMasque(hashDemandeur, nombrePersonnes, distributionMasqueUI.getNbMasquesEnfantUsageUnique(), modeSaisie, ENFANT_USAGE_UNIQUE, codePostal, typeRemettant));        }        if (distributionMasqueUI.getNbMasquesEnfantReutilisable() > 0) {            distributionMasques.add(construireDistributionMasque(hashDemandeur, nombrePersonnes, distributionMasqueUI.getNbMasquesEnfantReutilisable(), modeSaisie, ENFANT_REUTILISABLE, codePostal, typeRemettant));        }        return distributionMasques;    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/DistributionMasqueUIMapper.java", "stars": "5", "class": {"name": "DistributionMasqueUIMapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "construireDistributionMasque", "params": ["String", "Integer", "Integer", "ModeSaisie", "TypeMasque", "String", "TypeRemettant"], "throws": null, "modifiers": ["private"], "return_type": "DistributionMasque", "snippet": "    private DistributionMasque construireDistributionMasque(String hashDemandeur, Integer nombrePersonnes, Integer nbMasques, ModeSaisie modeSaisie, TypeMasque typeMasque, String codePostal, TypeRemettant typeRemettant) {        return DistributionMasque.builder()                .hashDemandeur(hashDemandeur)                .nbPersonnes(nombrePersonnes)                .nbMasques(nbMasques)                .modeSaisie(modeSaisie)                .typeMasque(typeMasque)                .dateDistribution(LocalDateTime.now(clock))                .codePostal(codePostal)                .typeRemettant(typeRemettant)                .build();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/DistributionMasqueUIMapper.java", "stars": "5", "class": {"name": "DistributionMasqueUIMapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this._id;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "getProgress", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "double", "snippet": "  public double getProgress() throws Exception {    return this._progress;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "setProgress", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProgress(final double progress) {    this._progress = progress;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "cancel", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancel() throws Exception {    throw new RuntimeException(\"Job \" + this._id + \" does not support cancellation!\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "getLog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Logger", "snippet": "  public Logger getLog() {    return this._log;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "debug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(final String message) {    this._log.debug(message);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "debug", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(final String message, final Throwable t) {    this._log.debug(message, t);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "info", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void info(final String message) {    this._log.info(message);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "info", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void info(final String message, final Throwable t) {    this._log.info(message, t);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "warn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(final String message) {    this._log.warn(message);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "warn", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(final String message, final Throwable t) {    this._log.warn(message, t);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(final String message) {    this._log.error(message);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "error", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(final String message, final Throwable t) {    this._log.error(message, t);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "getJobGeneratedProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getJobGeneratedProperties() {    return new Props();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "run", "params": [], "throws": ["Exception"], "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "  public abstract void run() throws Exception;  @Override  public boolean isCanceled() {    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "isCanceled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isCanceled() {    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractJob.java", "stars": "18", "class": {"name": "AbstractJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "getClock", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getClock() {        return clock;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/EmulatorEvent.java", "stars": "4", "class": {"name": "EmulatorEvent", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "decreaseClock", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void decreaseClock(long interval) {        clock -= interval;        if (clock < 0) {            clock = 0;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/EmulatorEvent.java", "stars": "4", "class": {"name": "EmulatorEvent", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "dispatch", "params": ["Computer"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void dispatch(Computer computer);}", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/EmulatorEvent.java", "stars": "4", "class": {"name": "EmulatorEvent", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getUnknownFields", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "com", "snippet": "  public final com.google.protobuf.UnknownFieldSet  getUnknownFields() {    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDescriptor", "params": [], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "com", "snippet": "  public static final com.google.protobuf.Descriptors.Descriptor      getDescriptor() {    return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloReply_descriptor;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "internalGetFieldAccessorTable", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "com", "snippet": "  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable      internalGetFieldAccessorTable() {    return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloReply_fieldAccessorTable        .ensureFieldAccessorsInitialized(            generated.io.grpc.examples.helloworld.HelloReply.class, generated.io.grpc.examples.helloworld.HelloReply.Builder.class);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "  public java.lang.String getMessage() {    java.lang.Object ref = message_;    if (ref instanceof java.lang.String) {      return (java.lang.String) ref;    } else {      com.google.protobuf.ByteString bs =           (com.google.protobuf.ByteString) ref;      java.lang.String s = bs.toStringUtf8();      message_ = s;      return s;    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getMessageBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "  public com.google.protobuf.ByteString      getMessageBytes() {    java.lang.Object ref = message_;    if (ref instanceof java.lang.String) {      com.google.protobuf.ByteString b =           com.google.protobuf.ByteString.copyFromUtf8(              (java.lang.String) ref);      message_ = b;      return b;    } else {      return (com.google.protobuf.ByteString) ref;    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "  public final boolean isInitialized() {    byte isInitialized = memoizedIsInitialized;    if (isInitialized == 1) return true;    if (isInitialized == 0) return false;    memoizedIsInitialized = 1;    return true;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "writeTo", "params": ["com"], "throws": ["java.io.IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void writeTo(com.google.protobuf.CodedOutputStream output)                      throws java.io.IOException {    if (!getMessageBytes().isEmpty()) {      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, message_);    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getSerializedSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSerializedSize() {    int size = memoizedSize;    if (size != -1) return size;    size = 0;    if (!getMessageBytes().isEmpty()) {      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, message_);    }    memoizedSize = size;    return size;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "equals", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(final java.lang.Object obj) {    if (obj == this) {     return true;    }    if (!(obj instanceof generated.io.grpc.examples.helloworld.HelloReply)) {      return super.equals(obj);    }    generated.io.grpc.examples.helloworld.HelloReply other = (generated.io.grpc.examples.helloworld.HelloReply) obj;    boolean result = true;    result = result && getMessage()        .equals(other.getMessage());    return result;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    if (memoizedHashCode != 0) {      return memoizedHashCode;    }    int hash = 41;    hash = (19 * hash) + getDescriptorForType().hashCode();    hash = (37 * hash) + MESSAGE_FIELD_NUMBER;    hash = (53 * hash) + getMessage().hashCode();    hash = (29 * hash) + unknownFields.hashCode();    memoizedHashCode = hash;    return hash;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseFrom(      com.google.protobuf.ByteString data)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com", "com"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseFrom(      com.google.protobuf.ByteString data,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["byte"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseFrom(byte[] data)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["byte", "com"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseFrom(      byte[] data,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["java"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseFrom(java.io.InputStream input)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["java", "com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseFrom(      java.io.InputStream input,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseDelimitedFrom", "params": ["java"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseDelimitedFrom(java.io.InputStream input)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseDelimitedWithIOException(PARSER, input);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseDelimitedFrom", "params": ["java", "com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseDelimitedFrom(      java.io.InputStream input,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseFrom(      com.google.protobuf.CodedInputStream input)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com", "com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply parseFrom(      com.google.protobuf.CodedInputStream input,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilderForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "  public Builder newBuilderForType() { return newBuilder(); }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilder", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "  public static Builder newBuilder() {    return DEFAULT_INSTANCE.toBuilder();  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilder", "params": ["generated"], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "  public static Builder newBuilder(generated.io.grpc.examples.helloworld.HelloReply prototype) {    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "toBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "  public Builder toBuilder() {    return this == DEFAULT_INSTANCE        ? new Builder() : new Builder().mergeFrom(this);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilderForType", "params": ["com"], "throws": null, "modifiers": ["protected"], "return_type": "Builder", "snippet": "  protected Builder newBuilderForType(      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {    Builder builder = new Builder(parent);    return builder;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDefaultInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloReply getDefaultInstance() {    return DEFAULT_INSTANCE;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parser", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "com", "snippet": "  public static com.google.protobuf.Parser<HelloReply> parser() {    return PARSER;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getParserForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "  public com.google.protobuf.Parser<HelloReply> getParserForType() {    return PARSER;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDefaultInstanceForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "  public generated.io.grpc.examples.helloworld.HelloReply getDefaultInstanceForType() {    return DEFAULT_INSTANCE;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "HelloReply", "extends": "com", "implements": ["HelloReplyOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDescriptor", "params": [], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "com", "snippet": "    public static final com.google.protobuf.Descriptors.Descriptor        getDescriptor() {      return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloReply_descriptor;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "internalGetFieldAccessorTable", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "com", "snippet": "    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable        internalGetFieldAccessorTable() {      return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloReply_fieldAccessorTable          .ensureFieldAccessorsInitialized(              generated.io.grpc.examples.helloworld.HelloReply.class, generated.io.grpc.examples.helloworld.HelloReply.Builder.class);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "maybeForceBuilderInitialization", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void maybeForceBuilderInitialization() {      if (com.google.protobuf.GeneratedMessageV3              .alwaysUseFieldBuilders) {      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clear() {      super.clear();      message_ = \"\";      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getDescriptorForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.Descriptors.Descriptor        getDescriptorForType() {      return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloReply_descriptor;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getDefaultInstanceForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.io.grpc.examples.helloworld.HelloReply getDefaultInstanceForType() {      return generated.io.grpc.examples.helloworld.HelloReply.getDefaultInstance();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.io.grpc.examples.helloworld.HelloReply build() {      generated.io.grpc.examples.helloworld.HelloReply result = buildPartial();      if (!result.isInitialized()) {        throw newUninitializedMessageException(result);      }      return result;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "buildPartial", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.io.grpc.examples.helloworld.HelloReply buildPartial() {      generated.io.grpc.examples.helloworld.HelloReply result = new generated.io.grpc.examples.helloworld.HelloReply(this);      result.message_ = message_;      onBuilt();      return result;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clone() {      return (Builder) super.clone();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setField", "params": ["com", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setField(        com.google.protobuf.Descriptors.FieldDescriptor field,        Object value) {      return (Builder) super.setField(field, value);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearField", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearField(        com.google.protobuf.Descriptors.FieldDescriptor field) {      return (Builder) super.clearField(field);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearOneof", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearOneof(        com.google.protobuf.Descriptors.OneofDescriptor oneof) {      return (Builder) super.clearOneof(oneof);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setRepeatedField", "params": ["com", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setRepeatedField(        com.google.protobuf.Descriptors.FieldDescriptor field,        int index, Object value) {      return (Builder) super.setRepeatedField(field, index, value);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "addRepeatedField", "params": ["com", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder addRepeatedField(        com.google.protobuf.Descriptors.FieldDescriptor field,        Object value) {      return (Builder) super.addRepeatedField(field, value);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeFrom", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder mergeFrom(com.google.protobuf.Message other) {      if (other instanceof generated.io.grpc.examples.helloworld.HelloReply) {        return mergeFrom((generated.io.grpc.examples.helloworld.HelloReply)other);      } else {        super.mergeFrom(other);        return this;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeFrom", "params": ["generated"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder mergeFrom(generated.io.grpc.examples.helloworld.HelloReply other) {      if (other == generated.io.grpc.examples.helloworld.HelloReply.getDefaultInstance()) return this;      if (!other.getMessage().isEmpty()) {        message_ = other.message_;        onChanged();      }      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "    public final boolean isInitialized() {      return true;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeFrom", "params": ["com", "com"], "throws": ["java.io.IOException"], "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder mergeFrom(        com.google.protobuf.CodedInputStream input,        com.google.protobuf.ExtensionRegistryLite extensionRegistry)        throws java.io.IOException {      generated.io.grpc.examples.helloworld.HelloReply parsedMessage = null;      try {        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);      } catch (com.google.protobuf.InvalidProtocolBufferException e) {        parsedMessage = (generated.io.grpc.examples.helloworld.HelloReply) e.getUnfinishedMessage();        throw e.unwrapIOException();      } finally {        if (parsedMessage != null) {          mergeFrom(parsedMessage);        }      }      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "    public java.lang.String getMessage() {      java.lang.Object ref = message_;      if (!(ref instanceof java.lang.String)) {        com.google.protobuf.ByteString bs =            (com.google.protobuf.ByteString) ref;        java.lang.String s = bs.toStringUtf8();        message_ = s;        return s;      } else {        return (java.lang.String) ref;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getMessageBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.ByteString        getMessageBytes() {      java.lang.Object ref = message_;      if (ref instanceof String) {        com.google.protobuf.ByteString b =             com.google.protobuf.ByteString.copyFromUtf8(                (java.lang.String) ref);        message_ = b;        return b;      } else {        return (com.google.protobuf.ByteString) ref;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMessage", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setMessage(        java.lang.String value) {      if (value == null) {    throw new NullPointerException();  }        message_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearMessage() {            message_ = getDefaultInstance().getMessage();      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMessageBytes", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setMessageBytes(        com.google.protobuf.ByteString value) {      if (value == null) {    throw new NullPointerException();  }  checkByteStringIsUtf8(value);            message_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setUnknownFields", "params": ["com"], "throws": null, "modifiers": ["public", "final"], "return_type": "Builder", "snippet": "    public final Builder setUnknownFields(        final com.google.protobuf.UnknownFieldSet unknownFields) {      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeUnknownFields", "params": ["com"], "throws": null, "modifiers": ["public", "final"], "return_type": "Builder", "snippet": "    public final Builder mergeUnknownFields(        final com.google.protobuf.UnknownFieldSet unknownFields) {      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloReply.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onOK", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onOK() {        final float weight = Float.parseFloat(textAreaWeight.getText());        try {            waste = new Waste(weight);        } catch (Exception e) {            JOptionPane.showMessageDialog(null, e.getMessage(), \"Waste dialog error\", JOptionPane.ERROR_MESSAGE);            waste = null;        }        setVisible(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgWaste.java", "stars": "2", "class": {"name": "DlgWaste", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "onCancel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onCancel() {        waste = null;        setVisible(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgWaste.java", "stars": "2", "class": {"name": "DlgWaste", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getObject() {        return waste;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgWaste.java", "stars": "2", "class": {"name": "DlgWaste", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "setWoodDirectory", "params": ["WoodDirectory"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWoodDirectory(WoodDirectory woodDirectory) {    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgWaste.java", "stars": "2", "class": {"name": "DlgWaste", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Waste\";    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgWaste.java", "stars": "2", "class": {"name": "DlgWaste", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        show03();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo05File.java", "stars": "2", "class": {"name": "Demo05File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show03", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show03() {        File f1 = new File(\"08_FileAndRecursion\\\\\u65b0\u5efa\u6587\u4ef6\u5939\");        boolean b1 = f1.delete();        System.out.println(\"b1:\"+b1);        File f2 = new File(\"08_FileAndRecursion\\\\abc.txt\");        System.out.println(f2.delete());    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo05File.java", "stars": "2", "class": {"name": "Demo05File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show02() {        File f1 = new File(\"08_FileAndRecursion\\\\aaa\");        boolean b1 = f1.mkdir();        System.out.println(\"b1:\"+b1);        File f2 = new File(\"08_FileAndRecursion\\\\111\\\\222\\\\333\\\\444\");        boolean b2 = f2.mkdirs();        System.out.println(\"b2:\"+b2);        File f3 = new File(\"08_FileAndRecursion\\\\abc.txt\");        boolean b3 = f3.mkdirs();//\u770b\u7c7b\u578b,\u662f\u4e00\u4e2a\u6587\u4ef6        System.out.println(\"b3:\"+b3);        File f4 = new File(\"08_F\\\\ccc\");        boolean b4 = f4.mkdirs();//\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38,\u8def\u5f84\u4e0d\u5b58\u5728,\u4e0d\u4f1a\u521b\u5efa        System.out.println(\"b4:\"+b4);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo05File.java", "stars": "2", "class": {"name": "Demo05File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show01", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show01() throws IOException {        File f1 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\08_FileAndRecursion\\\\1.txt\");        boolean b1 = f1.createNewFile();        System.out.println(\"b1:\"+b1);        File f2 = new File(\"08_FileAndRecursion\\\\2.txt\");        System.out.println(f2.createNewFile());        File f3 = new File(\"08_FileAndRecursion\\\\\u65b0\u5efa\u6587\u4ef6\u5939\");        System.out.println(f3.createNewFile());//\u4e0d\u8981\u88ab\u540d\u79f0\u8ff7\u7cca,\u8981\u770b\u7c7b\u578b        File f4 = new File(\"08_FileAndRecursi\\\\3.txt\");        System.out.println(f4.createNewFile());//\u8def\u5f84\u4e0d\u5b58\u5728,\u629b\u51faIOException    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo05File.java", "stars": "2", "class": {"name": "Demo05File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return this.name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanNode.java", "stars": "18", "class": {"name": "AzkabanNode", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return this.type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanNode.java", "stars": "18", "class": {"name": "AzkabanNode", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getProps() {    return this.props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanNode.java", "stars": "18", "class": {"name": "AzkabanNode", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCondition() {    return this.condition;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanNode.java", "stars": "18", "class": {"name": "AzkabanNode", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getDependsOn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getDependsOn() {    return this.dependsOn;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanNode.java", "stars": "18", "class": {"name": "AzkabanNode", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "exec", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String exec(HttpServletRequest req, HttpServletResponse resp) {\t\tString view = \"/gBoard/gBoardList.jsp\";\t\t// \ud560\uc77c\t\tString sid = (String)req.getSession().getAttribute(\"SID\");\t\t// \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc791\uc5c5\ud558\uace0 \uacb0\uacfc \ubc1b\uace0\t\tGBoardDAO gDAO = new GBoardDAO();\t\tArrayList<GBoardVO> list = gDAO.getGList();\t\t\t\t// \uc791\uc131\ud55c \ubc29\uba85\ub85d \uae00 \uc218 \ubc1b\uae30\t\tint cnt = gDAO.getCnt(sid);\t\t\t\tString avt = gDAO.getAvt(sid);\t\t// \uacb0\uacfc \ub118\uaca8\uc8fc\uace0\t\treq.setAttribute(\"LIST\", list);\t\treq.setAttribute(\"CNT\", cnt);\t\treq.setAttribute(\"AVT\", avt);\t\t// \ubdf0 \ubd80\ub974\uace0\t\treturn view;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/controller/gBoard/GBoardList.java", "stars": "2", "class": {"name": "GBoardList", "extends": null, "implements": ["ClsController"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "  public View onCreateView(      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {    View controlView = inflater.inflate(R.layout.fragment_call, container, false);    // Create UI controls.    contactView = controlView.findViewById(R.id.contact_name_call);    ImageButton disconnectButton = controlView.findViewById(R.id.button_call_disconnect);    cameraSwitchButton = controlView.findViewById(R.id.button_call_switch_camera);    videoScalingButton = controlView.findViewById(R.id.button_call_scaling_mode);    toggleMuteButton = controlView.findViewById(R.id.button_call_toggle_mic);    captureFormatText = controlView.findViewById(R.id.capture_format_text_call);    captureFormatSlider = controlView.findViewById(R.id.capture_format_slider_call);    // Add buttons click events.    disconnectButton.setOnClickListener(new View.OnClickListener() {      @Override      public void onClick(View view) {        callEvents.onCallHangUp();      }    });    cameraSwitchButton.setOnClickListener(new View.OnClickListener() {      @Override      public void onClick(View view) {        callEvents.onCameraSwitch();      }    });    videoScalingButton.setOnClickListener(new View.OnClickListener() {      @Override      public void onClick(View view) {        if (scalingType == ScalingType.SCALE_ASPECT_FILL) {          videoScalingButton.setBackgroundResource(R.drawable.ic_action_full_screen);          scalingType = ScalingType.SCALE_ASPECT_FIT;        } else {          videoScalingButton.setBackgroundResource(R.drawable.ic_action_return_from_full_screen);          scalingType = ScalingType.SCALE_ASPECT_FILL;        }        callEvents.onVideoScalingSwitch(scalingType);      }    });    scalingType = ScalingType.SCALE_ASPECT_FILL;    toggleMuteButton.setOnClickListener(new View.OnClickListener() {      @Override      public void onClick(View view) {        boolean enabled = callEvents.onToggleMic();        toggleMuteButton.setAlpha(enabled ? 1.0f : 0.3f);      }    });    return controlView;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallFragment.java", "stars": "2", "class": {"name": "CallFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onStart() {    super.onStart();    boolean captureSliderEnabled = false;    Bundle args = getArguments();    if (args != null) {      String contactName = args.getString(CallActivity.EXTRA_ROOMID);      contactView.setText(contactName);      videoCallEnabled = args.getBoolean(CallActivity.EXTRA_VIDEO_CALL, true);      captureSliderEnabled = videoCallEnabled          && args.getBoolean(CallActivity.EXTRA_VIDEO_CAPTUREQUALITYSLIDER_ENABLED, false);    }    if (!videoCallEnabled) {      cameraSwitchButton.setVisibility(View.INVISIBLE);    }    if (captureSliderEnabled) {      captureFormatSlider.setOnSeekBarChangeListener(          new CaptureQualityController(captureFormatText, callEvents));    } else {      captureFormatText.setVisibility(View.GONE);      captureFormatSlider.setVisibility(View.GONE);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallFragment.java", "stars": "2", "class": {"name": "CallFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onAttach(Activity activity) {    super.onAttach(activity);    callEvents = (OnCallEvents) activity;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallFragment.java", "stars": "2", "class": {"name": "CallFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onWriteSuccess", "params": ["int", "int", "byte"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onWriteSuccess(int current, int total, byte[] justWrite);    public abstract void onWriteFailure(BleException exception);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleWriteCallback.java", "stars": "2", "class": {"name": "BleWriteCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onWriteFailure", "params": ["BleException"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onWriteFailure(BleException exception);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleWriteCallback.java", "stars": "2", "class": {"name": "BleWriteCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ProjectsManager", "snippet": "    public static ProjectsManager getInstance() {        if (mInstance == null) {            mInstance = new ProjectsManager();        }        return mInstance;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/manager/ProjectsManager.java", "stars": "4", "class": {"name": "ProjectsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Api", "snippet": "    public Api getApi () {        return mRetrofit.create(Api.class);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/manager/ProjectsManager.java", "stars": "4", "class": {"name": "ProjectsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createDatabase", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createDatabase() throws IOException    {          boolean dbExist = checkDataBase();          if(dbExist)          {                Log.v(\"DB Exists\", \"db exists\");                // By calling this method here onUpgrade will be called on a                // writeable database, but only if the version number has been                // bumped                //onUpgrade(myDataBase, DATABASE_VERSION_old, DATABASE_VERSION);          }                   boolean dbExist1 = checkDataBase();          if(!dbExist1)          {                this.getReadableDatabase();                try                {                      this.close();                          copyDataBase();                }                catch (IOException e)                {                      throw new Error(\"Error copying database\");                }          }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/databaseFromAsset/src/com/example/databasefromasset/DataBaseHelper.java", "stars": "74", "class": {"name": "DataBaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkDataBase", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean checkDataBase()    {          boolean checkDB = false;          try          {                String myPath = DATABASE_PATH + DATABASE_NAME;                File dbfile = new File(myPath);                checkDB = dbfile.exists();          }          catch(SQLiteException e)          {          }          return checkDB;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/databaseFromAsset/src/com/example/databasefromasset/DataBaseHelper.java", "stars": "74", "class": {"name": "DataBaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "copyDataBase", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void copyDataBase() throws IOException    {          String outFileName = DATABASE_PATH + DATABASE_NAME;          OutputStream myOutput = new FileOutputStream(outFileName);          InputStream myInput = myContext.getAssets().open(DATABASE_NAME);          byte[] buffer = new byte[1024];          int length;          while ((length = myInput.read(buffer)) > 0)          {                myOutput.write(buffer, 0, length);          }          myInput.close();          myOutput.flush();          myOutput.close();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/databaseFromAsset/src/com/example/databasefromasset/DataBaseHelper.java", "stars": "74", "class": {"name": "DataBaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "db_delete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void db_delete()    {          File file = new File(DATABASE_PATH + DATABASE_NAME);          if(file.exists())          {                file.delete();                System.out.println(\"delete database file.\");          }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/databaseFromAsset/src/com/example/databasefromasset/DataBaseHelper.java", "stars": "74", "class": {"name": "DataBaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "openDatabase", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void openDatabase() throws SQLException    {          String myPath = DATABASE_PATH + DATABASE_NAME;          myDataBase = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READWRITE);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/databaseFromAsset/src/com/example/databasefromasset/DataBaseHelper.java", "stars": "74", "class": {"name": "DataBaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "closeDataBase", "params": [], "throws": ["SQLException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void closeDataBase()throws SQLException    {          if(myDataBase != null)                myDataBase.close();          super.close();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/databaseFromAsset/src/com/example/databasefromasset/DataBaseHelper.java", "stars": "74", "class": {"name": "DataBaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["SQLiteDatabase"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(SQLiteDatabase db)    {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/databaseFromAsset/src/com/example/databasefromasset/DataBaseHelper.java", "stars": "74", "class": {"name": "DataBaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpgrade", "params": ["SQLiteDatabase", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)    {              if (newVersion > oldVersion)          {                Log.v(\"Database Upgrade\", \"Database version higher than old.\");                db_delete();          }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/databaseFromAsset/src/com/example/databasefromasset/DataBaseHelper.java", "stars": "74", "class": {"name": "DataBaseHelper", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftListResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftListResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftListResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftListResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GiftData", "snippet": "    public GiftData getData() {        return data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftListResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setData", "params": ["GiftData"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(GiftData data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftListResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"GiftListResult{\" +                \"msg='\" + msg + '\\'' +                \", code=\" + code +                \", data=\" + data +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftListResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLastTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getLastTime() {            return lastTime;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftData", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "static"]}}, {"method_name": "setLastTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setLastTime(long lastTime) {            this.lastTime = lastTime;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftData", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "static"]}}, {"method_name": "getGifts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Gift>", "snippet": "        public ArrayList<Gift> getGifts() {            return gifts;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftData", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "static"]}}, {"method_name": "setGifts", "params": ["ArrayList<Gift>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setGifts(ArrayList<Gift> gifts) {            this.gifts = gifts;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftData", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String toString() {            return \"GiftListResult{\" +                    \"lastTime=\" + lastTime +                    \", gifts=\" + gifts +                    '}';        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListResult.java", "stars": "1", "class": {"name": "GiftData", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "static"]}}, {"method_name": "width", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int width() {        return mRight - mLeft;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/model/PositionData.java", "stars": "1", "class": {"name": "PositionData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "height", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int height() {        return mBottom - mTop;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/model/PositionData.java", "stars": "1", "class": {"name": "PositionData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contentWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int contentWidth() {        return mContentRight - mContentLeft;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/model/PositionData.java", "stars": "1", "class": {"name": "PositionData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contentHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int contentHeight() {        return mContentBottom - mContentTop;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/model/PositionData.java", "stars": "1", "class": {"name": "PositionData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "horizontalCenter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int horizontalCenter() {        return mLeft + width() / 2;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/model/PositionData.java", "stars": "1", "class": {"name": "PositionData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verticalCenter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int verticalCenter() {        return mTop + height() / 2;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/model/PositionData.java", "stars": "1", "class": {"name": "PositionData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Grid", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(Grid gridModel, int cellSize) {        group = gem.createBufferedGroup();        groupTunnel = gem.createGroup();        cells = new HashMap<>();        width = gridModel.getWidth();        height = gridModel.getHeight();        for (Entry<Coord, Cell> entry : gridModel.getCells().entrySet()) {            Coord coord = entry.getKey();            Cell cell = entry.getValue();            int padding = 0;            if (cell.getType() == CellType.WALL) {                int neighbourCode = getNeighbourCode(coord, gridModel);                if (neighbourCode != 255) {                    Sprite wall = gem.createSprite()                        .setBaseWidth(cellSize - padding)                        .setBaseHeight(cellSize - padding)                        .setImage(String.valueOf(neighbourCode));                    view.setToGridCoordinates(wall, coord);                    group.add(wall);                    cells.put(coord, wall);                }            } else if (cell.getType() == CellType.FLOOR) {                Sprite floor = gem.createSprite()                    .setBaseWidth(cellSize - padding)                    .setBaseHeight(cellSize - padding)                    .setImage(\"floor\");                if (isTunnel(coord)) {                    double emptyBorderSize = 100d;                    double tileSize = 250d;                    double cornerSize = cellSize * emptyBorderSize / tileSize;                    Sprite tunnel = view.createTunnelMask(coord, cellSize, padding, cornerSize);                    groupTunnel.add(tunnel);                    tunnel                        .setX((int) (coord.getX() * cellSize + cellSize / 2))                        .setY((int) (coord.getY() * cellSize - cornerSize));                }                view.setToGridCoordinates(floor, coord);                group.add(floor);                cells.put(coord, floor);            }        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/GridView.java", "stars": "15", "class": {"name": "GridView", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isTunnel", "params": ["Coord"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isTunnel(Coord coord) {        return coord.getX() == 0 || coord.getX() == (width - 1);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/GridView.java", "stars": "15", "class": {"name": "GridView", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNeighbourCode", "params": ["Coord", "Grid"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getNeighbourCode(Coord coord, Grid gridModel) {        int total = 0;        for (Entry<Coord, TileMapping> entry : View.NEIGHBOUR_MAP.entrySet()) {            Coord delta = entry.getKey();            TileMapping mapping = entry.getValue();            Coord n = coord.add(delta);            Cell cell = gridModel.get(n);            if (cell.isWall() || !cell.isValid()) {                total += mapping.value;            }        }        for (Entry<Coord, TileMapping> entry : View.CORNER_MAP.entrySet()) {            Coord delta = entry.getKey();            TileMapping mapping = entry.getValue();            if ((total & mapping.mask) == mapping.mask) {                Coord n = coord.add(delta);                Cell cell = gridModel.get(n);                if (cell.isWall() || !cell.isValid()) {                    total += mapping.value;                }            }        }        return total;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/GridView.java", "stars": "15", "class": {"name": "GridView", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String login(){        return \"admin/login\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/AuthController.java", "stars": "2", "class": {"name": "AuthController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toLogin", "params": ["HttpServletRequest", "HttpServletResponse", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "APIResponse", "snippet": "    public APIResponse toLogin(            HttpServletRequest request,            HttpServletResponse response,            @ApiParam(name = \"username\", value = \"\u7528\u6237\u540d\", required = true)            @RequestParam(name = \"username\", required = true)            String username,            @ApiParam(name = \"password\", value = \"\u5bc6\u7801\", required = true)            @RequestParam(name = \"password\", required = true)            String password,            @ApiParam(name = \"remeber_me\", value = \"\u8bb0\u4f4f\u6211\", required = false)            @RequestParam(name = \"remeber_me\", required = false)            String remeber_me    ){        String ip= IPKit.getIpAddrByRequest(request); // \u83b7\u53d6ip\u5e76\u8fc7\u6ee4\u767b\u5f55\u65f6\u7f13\u5b58\u7684bug        Integer error_count = cache.hget(\"login_error_count\",ip);        try {            UserDomain userInfo = userService.login(username, password);            request.getSession().setAttribute(WebConst.LOGIN_SESSION_KEY, userInfo);            if (StringUtils.isNotBlank(remeber_me)) {                TaleUtils.setCookie(response, userInfo.getUid());            }            logService.addLog(LogActions.LOGIN.getAction(), null, request.getRemoteAddr(), userInfo.getUid());        } catch (Exception e) {            e.getMessage();            error_count = null == error_count ? 1 : error_count + 1;            if (error_count > 3) {                return APIResponse.fail(\"\u60a8\u8f93\u5165\u5bc6\u7801\u5df2\u7ecf\u9519\u8bef\u8d85\u8fc73\u6b21\uff0c\u8bf710\u5206\u949f\u540e\u5c1d\u8bd5\");            }            cache.hset(\"login_error_count\", ip,error_count, 10 * 60); // \u52a0\u5165ip\u7684\u8fc7\u6ee4            String msg = \"\u767b\u5f55\u5931\u8d25\";            if (e instanceof BusinessException) {                msg = e.getMessage();            } else {                e.printStackTrace();            }            return APIResponse.fail(msg);        }        return APIResponse.success();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/AuthController.java", "stars": "2", "class": {"name": "AuthController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "logout", "params": ["HttpSession", "HttpServletResponse", "org"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void logout(HttpSession session, HttpServletResponse response, org.apache.catalina.servlet4preview.http.HttpServletRequest request) {        session.removeAttribute(WebConst.LOGIN_SESSION_KEY);        Cookie cookie = new Cookie(WebConst.USER_IN_COOKIE, \"\");        cookie.setValue(null);        cookie.setMaxAge(0);// \u7acb\u5373\u9500\u6bc1cookie        cookie.setPath(\"/\");        response.addCookie(cookie);        try {            response.sendRedirect(\"/admin/login\");        } catch (IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/AuthController.java", "stars": "2", "class": {"name": "AuthController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageSql", "params": ["String", "RequestContext", "long", "long"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPageSql(String sql, RequestContext context, long offset, long limit) {        context.addParameter(limit);        context.addParameter(offset);        return sql + \" limit ?,?\";    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/dialect/MySQLDialect.java", "stars": "13", "class": {"name": "MySQLDialect", "extends": null, "implements": ["Dialect"], "modifiers": ["public"]}}, {"method_name": "toHexString", "params": ["byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toHexString(byte b[]) {        int pos = 0;        char[] c = new char[b.length * 2];        for (int i = 0; i < b.length; i++) {            c[pos++] = toHex[(b[i] >> 4) & 0x0F];            c[pos++] = toHex[b[i] & 0x0f];        }        return new String(c);    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/auth/DigestServerAuthenticationHelper.java", "stars": "29", "class": {"name": "DigestServerAuthenticationHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateNonce", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String generateNonce() {        // Get the time of day and run MD5 over it.        Date date = new Date();        long time = date.getTime();        Random rand = new Random();        long pad = rand.nextLong();        String nonceString = (new Long(time)).toString()                + (new Long(pad)).toString();        byte mdbytes[] = messageDigest.digest(nonceString.getBytes());        // Convert the mdbytes array into a hex string.        return toHexString(mdbytes);    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/auth/DigestServerAuthenticationHelper.java", "stars": "29", "class": {"name": "DigestServerAuthenticationHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateChallenge", "params": ["HeaderFactory", "Response", "String"], "throws": null, "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response generateChallenge(HeaderFactory headerFactory, Response response, String realm) {        try {            WWWAuthenticateHeader proxyAuthenticate = headerFactory                    .createWWWAuthenticateHeader(DEFAULT_SCHEME);            proxyAuthenticate.setParameter(\"realm\", realm);            proxyAuthenticate.setParameter(\"nonce\", generateNonce());            proxyAuthenticate.setParameter(\"opaque\", \"\");            proxyAuthenticate.setParameter(\"stale\", \"FALSE\");            proxyAuthenticate.setParameter(\"algorithm\", DEFAULT_ALGORITHM);            response.setHeader(proxyAuthenticate);        } catch (Exception ex) {            InternalErrorHandler.handleException(ex);        }        return response;    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/auth/DigestServerAuthenticationHelper.java", "stars": "29", "class": {"name": "DigestServerAuthenticationHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doAuthenticateHashedPassword", "params": ["Request", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean doAuthenticateHashedPassword(Request request, String hashedPassword) {    \tAuthorizationHeader authHeader = (AuthorizationHeader) request.getHeader(AuthorizationHeader.NAME);        if ( authHeader == null ) return false;        String realm = authHeader.getRealm();        String username = authHeader.getUsername();              if ( username == null || realm == null ) {            return false;        }               String nonce = authHeader.getNonce();        URI uri = authHeader.getURI();        if (uri == null) {            return false;        }                      String A2 = request.getMethod().toUpperCase() + \":\" + uri.toString();        String HA1 = hashedPassword;               byte[] mdbytes = messageDigest.digest(A2.getBytes());        String HA2 = toHexString(mdbytes);              String cnonce = authHeader.getCNonce();        String KD = HA1 + \":\" + nonce;        if (cnonce != null) {            KD += \":\" + cnonce;        }        KD += \":\" + HA2;        mdbytes = messageDigest.digest(KD.getBytes());        String mdString = toHexString(mdbytes);        String response = authHeader.getResponse();               return mdString.equals(response);    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/auth/DigestServerAuthenticationHelper.java", "stars": "29", "class": {"name": "DigestServerAuthenticationHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doAuthenticatePlainTextPassword", "params": ["Request", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean doAuthenticatePlainTextPassword(Request request, String pass) {    \tAuthorizationHeader authHeader = (AuthorizationHeader) request.getHeader(AuthorizationHeader.NAME);        if ( authHeader == null ) return false;        String realm = authHeader.getRealm();        String username = authHeader.getUsername();                 if ( username == null || realm == null ) {            return false;        }                String nonce = authHeader.getNonce();        URI uri = authHeader.getURI();        if (uri == null) {           return false;        }                String A1 = username + \":\" + realm + \":\" + pass;        String A2 = request.getMethod().toUpperCase() + \":\" + uri.toString();        byte mdbytes[] = messageDigest.digest(A1.getBytes());        String HA1 = toHexString(mdbytes);               mdbytes = messageDigest.digest(A2.getBytes());        String HA2 = toHexString(mdbytes);              String cnonce = authHeader.getCNonce();        String KD = HA1 + \":\" + nonce;        if (cnonce != null) {            KD += \":\" + cnonce;        }        KD += \":\" + HA2;        mdbytes = messageDigest.digest(KD.getBytes());        String mdString = toHexString(mdbytes);        String response = authHeader.getResponse();        return mdString.equals(response);            }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/auth/DigestServerAuthenticationHelper.java", "stars": "29", "class": {"name": "DigestServerAuthenticationHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setColumn", "params": ["Object", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void setColumn(Object key, Object value) {    columnMap.put(key, value);    columnNames.add(key);    columnValues.add(value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getColumn", "params": ["Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "  protected Object getColumn(Object key) {    return columnMap.get(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getParameterValueString", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getParameterValueString() {    List<Object> typeList = new ArrayList<>(columnValues.size());    for (Object value : columnValues) {      if (value == null) {        typeList.add(\"null\");      } else {        typeList.add(objectValueString(value) + \"(\" + value.getClass().getSimpleName() + \")\");      }    }    final String parameters = typeList.toString();    return parameters.substring(1, parameters.length() - 1);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "objectValueString", "params": ["Object"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String objectValueString(Object value) {    if (value instanceof Array) {      try {        return ArrayUtil.toString(((Array) value).getArray());      } catch (SQLException e) {        return value.toString();      }    }    return value.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getColumnString", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getColumnString() {    return columnNames.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clearColumnInfo", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void clearColumnInfo() {    columnMap.clear();    columnNames.clear();    columnValues.clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "removeBreakingWhitespace", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String removeBreakingWhitespace(String original) {    StringTokenizer whitespaceStripper = new StringTokenizer(original);    StringBuilder builder = new StringBuilder();    while (whitespaceStripper.hasMoreTokens()) {      builder.append(whitespaceStripper.nextToken());      builder.append(\" \");    }    return builder.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "  protected boolean isDebugEnabled() {    return statementLog.isDebugEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isTraceEnabled", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "  protected boolean isTraceEnabled() {    return statementLog.isTraceEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "debug", "params": ["String", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void debug(String text, boolean input) {    if (statementLog.isDebugEnabled()) {      statementLog.debug(prefix(input) + text);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "trace", "params": ["String", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void trace(String text, boolean input) {    if (statementLog.isTraceEnabled()) {      statementLog.trace(prefix(input) + text);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "prefix", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String prefix(boolean isInput) {    char[] buffer = new char[queryStack * 2 + 2];    Arrays.fill(buffer, '=');    buffer[queryStack * 2 + 1] = ' ';    if (isInput) {      buffer[queryStack * 2] = '>';    } else {      buffer[0] = '<';    }    return new String(buffer);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java", "stars": "15", "class": {"name": "BaseJdbcLogger", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "supports", "params": ["MethodParameter", "Class<HttpMessageConverter>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {        return AbstractJackson2HttpMessageConverter.class.isAssignableFrom(converterType);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/core/CommonResultControllerAdvice.java", "stars": "1", "class": {"name": "CommonResultControllerAdvice", "extends": null, "implements": ["ResponseBodyAdvice"], "modifiers": ["public"]}}, {"method_name": "beforeBodyWrite", "params": ["Object", "MethodParameter", "MediaType", "Class<HttpMessageConverter>", "ServerHttpRequest", "ServerHttpResponse"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object beforeBodyWrite(Object body,                                  MethodParameter returnType,                                  MediaType contentType,                                  Class<? extends HttpMessageConverter<?>> converterType,                                  ServerHttpRequest request,                                  ServerHttpResponse response) {        MappingJacksonValue container = getOrCreateContainer(body);        // The contain body will never be null        beforeBodyWriteInternal(container, contentType, returnType, request, response);        return container;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/core/CommonResultControllerAdvice.java", "stars": "1", "class": {"name": "CommonResultControllerAdvice", "extends": null, "implements": ["ResponseBodyAdvice"], "modifiers": ["public"]}}, {"method_name": "getOrCreateContainer", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "MappingJacksonValue", "snippet": "    private MappingJacksonValue getOrCreateContainer(Object body) {        return (body instanceof MappingJacksonValue ? (MappingJacksonValue) body : new MappingJacksonValue(body));    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/core/CommonResultControllerAdvice.java", "stars": "1", "class": {"name": "CommonResultControllerAdvice", "extends": null, "implements": ["ResponseBodyAdvice"], "modifiers": ["public"]}}, {"method_name": "beforeBodyWriteInternal", "params": ["MappingJacksonValue", "MediaType", "MethodParameter", "ServerHttpRequest", "ServerHttpResponse"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void beforeBodyWriteInternal(MappingJacksonValue bodyContainer,                                         MediaType contentType,                                         MethodParameter returnType,                                         ServerHttpRequest request,                                         ServerHttpResponse response) {        // \u83b7\u53d6\u8fd4\u56de\u503c        Object returnBody = bodyContainer.getValue();        if (returnBody instanceof BaseResponse) {            // \u5982\u679c\u662fBaseResponse\u76f4\u63a5\u8fd4\u56de            BaseResponse<?> baseResponse = (BaseResponse) returnBody;            response.setStatusCode(HttpStatus.resolve(baseResponse.getStatus()));            return;        }        // \u5305\u88c5\u8fd4\u56de        if (returnBody != null) {            BaseResponse<?> baseResponse = BaseResponse.ok(returnBody);            bodyContainer.setValue(baseResponse);            response.setStatusCode(HttpStatus.valueOf(baseResponse.getStatus()));        } else {//controller \u8fd4\u56de void            BaseResponse<?> baseResponse = BaseResponse.ok(null);            bodyContainer.setValue(baseResponse);            response.setStatusCode(HttpStatus.valueOf(baseResponse.getStatus()));        }    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/core/CommonResultControllerAdvice.java", "stars": "1", "class": {"name": "CommonResultControllerAdvice", "extends": null, "implements": ["ResponseBodyAdvice"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRenderer.java", "stars": "2", "class": {"name": "EditorRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRenderer.java", "stars": "2", "class": {"name": "EditorRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getLineNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getLineNumber() {        return lineNumber;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/OrderDetail.java", "stars": "15", "class": {"name": "OrderDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLineNumber", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLineNumber(Integer lineNumber) {        this.lineNumber = lineNumber;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/OrderDetail.java", "stars": "15", "class": {"name": "OrderDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getQuantity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getQuantity() {        return quantity;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/OrderDetail.java", "stars": "15", "class": {"name": "OrderDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setQuantity", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setQuantity(Integer quantity) {        this.quantity = quantity;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/OrderDetail.java", "stars": "15", "class": {"name": "OrderDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/OrderDetail.java", "stars": "15", "class": {"name": "OrderDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/OrderDetail.java", "stars": "15", "class": {"name": "OrderDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getOrderNumber() {        return orderNumber;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/OrderDetail.java", "stars": "15", "class": {"name": "OrderDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderNumber", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderNumber(Integer orderNumber) {        this.orderNumber = orderNumber;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/OrderDetail.java", "stars": "15", "class": {"name": "OrderDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Byte", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Byte parameter, JdbcType jdbcType)      throws SQLException {    ps.setByte(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteTypeHandler.java", "stars": "15", "class": {"name": "ByteTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Byte", "snippet": "  public Byte getNullableResult(ResultSet rs, String columnName)      throws SQLException {    byte result = rs.getByte(columnName);    return result == 0 && rs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteTypeHandler.java", "stars": "15", "class": {"name": "ByteTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Byte", "snippet": "  public Byte getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    byte result = rs.getByte(columnIndex);    return result == 0 && rs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteTypeHandler.java", "stars": "15", "class": {"name": "ByteTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Byte", "snippet": "  public Byte getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    byte result = cs.getByte(columnIndex);    return result == 0 && cs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteTypeHandler.java", "stars": "15", "class": {"name": "ByteTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleDevToolsApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-devtools/src/main/java/smoketest/devtools/SampleDevToolsApplication.java", "stars": "47572", "class": {"name": "SampleDevToolsApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.main);\t\t// Welcome Message\t\tTextView textview = (TextView) findViewById(R.id.text);\t\ttextview.setText(\"Welcome to SocialAuth Demo. Connect any provider and then press Update button to Share Update.\");\t\t// Create Your Own Share Button\t\tButton share = (Button) findViewById(R.id.sharebutton);\t\tshare.setText(\"Share\");\t\tshare.setTextColor(Color.WHITE);\t\tshare.setBackgroundResource(R.drawable.button_gradient);\t\t// Add it to Library\t\tadapter = new SocialAuthAdapter(new ResponseListener());\t\t// Add providers\t\tadapter.addProvider(Provider.FACEBOOK, R.drawable.facebook);\t\tadapter.addProvider(Provider.TWITTER, R.drawable.twitter);\t\tadapter.addProvider(Provider.LINKEDIN, R.drawable.linkedin);\t\tadapter.addProvider(Provider.MYSPACE, R.drawable.myspace);\t\tadapter.addProvider(Provider.YAHOO, R.drawable.yahoo);\t\tadapter.addProvider(Provider.YAMMER, R.drawable.yammer);\t\tadapter.addProvider(Provider.EMAIL, R.drawable.email);\t\tadapter.addProvider(Provider.MMS, R.drawable.mms);\t\t// Providers require setting user call Back url\t\tadapter.addCallBack(Provider.TWITTER, \"http://socialauth.in/socialauthdemo/socialAuthSuccessAction.do\");\t\tadapter.addCallBack(Provider.YAMMER, \"http://socialauth.in/socialauthdemo/socialAuthSuccessAction.do\");\t\t// Enable Provider\t\tadapter.enable(share);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/share-button/src/org/brickred/socialshare/ShareButtonActivity.java", "stars": "74", "class": {"name": "ShareButtonActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onComplete", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onComplete(Bundle values) {\t\t\tLog.d(\"ShareButton\", \"Authentication Successful\");\t\t\t// Get name of provider after authentication\t\t\tfinal String providerName = values.getString(SocialAuthAdapter.PROVIDER);\t\t\tLog.d(\"ShareButton\", \"Provider Name = \" + providerName);\t\t\tToast.makeText(ShareButtonActivity.this, providerName + \" connected\", Toast.LENGTH_LONG).show();\t\t\tupdate = (Button) findViewById(R.id.update);\t\t\tedit = (EditText) findViewById(R.id.editTxt);\t\t\t// Please avoid sending duplicate message. Social Media Providers\t\t\t// block duplicate messages.\t\t\tupdate.setOnClickListener(new OnClickListener() {\t\t\t\t@Override\t\t\t\tpublic void onClick(View v) {\t\t\t\t\tadapter.updateStatus(edit.getText().toString(), new MessageListener(), false);\t\t\t\t\t// to share on multiple providers\t\t\t\t\tadapter.updateStatus(edit.getText().toString(), new MessageListener(), false);\t\t\t\t}\t\t\t});\t\t\t// Share via Email Intent\t\t\tif (providerName.equalsIgnoreCase(\"share_mail\")) {\t\t\t\t// Use your own code here\t\t\t\tIntent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(\"mailto\",\t\t\t\t\t\t\"vineet.aggarwal@3pillarglobal.com\", null));\t\t\t\temailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, \"Test\");\t\t\t\tFile file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM),\t\t\t\t\t\t\"image5964402.png\");\t\t\t\tUri uri = Uri.fromFile(file);\t\t\t\temailIntent.putExtra(Intent.EXTRA_STREAM, uri);\t\t\t\tstartActivity(Intent.createChooser(emailIntent, \"Test\"));\t\t\t}\t\t\t// Share via mms intent\t\t\tif (providerName.equalsIgnoreCase(\"share_mms\")) {\t\t\t\t// Use your own code here\t\t\t\tFile file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM),\t\t\t\t\t\t\"image5964402.png\");\t\t\t\tUri uri = Uri.fromFile(file);\t\t\t\tIntent mmsIntent = new Intent(Intent.ACTION_SEND, uri);\t\t\t\tmmsIntent.putExtra(\"sms_body\", \"Test\");\t\t\t\tmmsIntent.putExtra(Intent.EXTRA_STREAM, uri);\t\t\t\tmmsIntent.setType(\"image/png\");\t\t\t\tstartActivity(mmsIntent);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/share-button/src/org/brickred/socialshare/ShareButtonActivity.java", "stars": "74", "class": {"name": "ResponseListener", "extends": null, "implements": ["DialogListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError error) {\t\t\tLog.d(\"ShareButton\", \"Authentication Error: \" + error.getMessage());\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/share-button/src/org/brickred/socialshare/ShareButtonActivity.java", "stars": "74", "class": {"name": "ResponseListener", "extends": null, "implements": ["DialogListener"], "modifiers": ["private", "final"]}}, {"method_name": "onCancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onCancel() {\t\t\tLog.d(\"ShareButton\", \"Authentication Cancelled\");\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/share-button/src/org/brickred/socialshare/ShareButtonActivity.java", "stars": "74", "class": {"name": "ResponseListener", "extends": null, "implements": ["DialogListener"], "modifiers": ["private", "final"]}}, {"method_name": "onBack", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onBack() {\t\t\tLog.d(\"Share-Button\", \"Dialog Closed by pressing Back Key\");\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/share-button/src/org/brickred/socialshare/ShareButtonActivity.java", "stars": "74", "class": {"name": "ResponseListener", "extends": null, "implements": ["DialogListener"], "modifiers": ["private", "final"]}}, {"method_name": "onExecute", "params": ["String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExecute(String provider, Integer t) {\t\t\tInteger status = t;\t\t\tif (status.intValue() == 200 || status.intValue() == 201 || status.intValue() == 204)\t\t\t\tToast.makeText(ShareButtonActivity.this, \"Message posted on \" + provider, Toast.LENGTH_LONG).show();\t\t\telse\t\t\t\tToast.makeText(ShareButtonActivity.this, \"Message not posted on \" + provider, Toast.LENGTH_LONG).show();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/share-button/src/org/brickred/socialshare/ShareButtonActivity.java", "stars": "74", "class": {"name": "MessageListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError e) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/share-button/src/org/brickred/socialshare/ShareButtonActivity.java", "stars": "74", "class": {"name": "MessageListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "symbol", "params": ["WorkspaceSymbolParams"], "throws": null, "modifiers": ["public"], "return_type": "CompletableFuture<List>", "snippet": "  public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams params) {    return null;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/NoOpWorkspaceService.java", "stars": "3", "class": {"name": "NoOpWorkspaceService", "extends": null, "implements": ["WorkspaceService"], "modifiers": []}}, {"method_name": "didChangeConfiguration", "params": ["DidChangeConfigurationParams"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void didChangeConfiguration(DidChangeConfigurationParams params) {  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/NoOpWorkspaceService.java", "stars": "3", "class": {"name": "NoOpWorkspaceService", "extends": null, "implements": ["WorkspaceService"], "modifiers": []}}, {"method_name": "didChangeWatchedFiles", "params": ["DidChangeWatchedFilesParams"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void didChangeWatchedFiles(DidChangeWatchedFilesParams params) {  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/NoOpWorkspaceService.java", "stars": "3", "class": {"name": "NoOpWorkspaceService", "extends": null, "implements": ["WorkspaceService"], "modifiers": []}}, {"method_name": "report", "params": ["Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void report(Communication communication) {        super.getReporter().reportTGCommunication(super.taskGroupId, communication);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/taskgroup/StandaloneTGContainerCommunicator.java", "stars": "23", "class": {"name": "StandaloneTGContainerCommunicator", "extends": "AbstractTGContainerCommunicator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBlogBaseUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getBlogBaseUrl() {        String serverPort = applicationContext.getEnvironment().getProperty(\"server.port\", \"8080\");        String baseUrl;        if (StringUtils.hasText(domain)) {            baseUrl = String.format(\"http://%s\", domain);        } else {            baseUrl = String.format(\"http://%s:%s\", IpUtil.getMachineIp(), serverPort);        }        return baseUrl;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/OptionServiceImpl.java", "stars": "1", "class": {"name": "OptionServiceImpl", "extends": null, "implements": ["OptionService"], "modifiers": ["public"]}}, {"method_name": "listOptions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> listOptions() {        Map<String, Object> result = new HashMap<>(3);        List<Info> infos = infoMapper.selectAll();        if (!CollectionUtils.isEmpty(infos)) {            Info info = infos.get(0);            result.put(\"blog_title\", info.getBlogTitle());            result.put(\"seo_keywords\", info.getSeoKeywords());            result.put(\"seo_description\", info.getSeoDescription());        }        return result;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/OptionServiceImpl.java", "stars": "1", "class": {"name": "OptionServiceImpl", "extends": null, "implements": ["OptionService"], "modifiers": ["public"]}}, {"method_name": "apply", "params": ["Project"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void apply(Project project) {\t\tproject.getPlugins().apply(MavenPublishPlugin.class);\t\tPublishingExtension publishing = project.getExtensions().getByType(PublishingExtension.class);\t\tFile repositoryLocation = new File(project.getBuildDir(), \"maven-repository\");\t\tpublishing.getRepositories().maven((mavenRepository) -> {\t\t\tmavenRepository.setName(\"project\");\t\t\tmavenRepository.setUrl(repositoryLocation.toURI());\t\t});\t\tproject.getTasks().matching((task) -> task.getName().equals(PUBLISH_TO_PROJECT_REPOSITORY_TASK_NAME))\t\t\t\t.all((task) -> setUpProjectRepository(project, task, repositoryLocation));\t\tproject.getTasks().matching((task) -> task.getName().equals(\"publishPluginMavenPublicationToProjectRepository\"))\t\t\t\t.all((task) -> setUpProjectRepository(project, task, repositoryLocation));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenRepositoryPlugin.java", "stars": "47572", "class": {"name": "MavenRepositoryPlugin", "extends": null, "implements": ["Plugin"], "modifiers": ["public"]}}, {"method_name": "setUpProjectRepository", "params": ["Project", "Task", "File"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void setUpProjectRepository(Project project, Task publishTask, File repositoryLocation) {\t\tpublishTask.doFirst(new CleanAction(repositoryLocation));\t\tConfiguration projectRepository = project.getConfigurations().create(MAVEN_REPOSITORY_CONFIGURATION_NAME);\t\tproject.getArtifacts().add(projectRepository.getName(), repositoryLocation,\t\t\t\t(artifact) -> artifact.builtBy(publishTask));\t\tDependencySet target = projectRepository.getDependencies();\t\tproject.getPlugins().withType(JavaPlugin.class).all((javaPlugin) -> addMavenRepositoryDependencies(project,\t\t\t\tJavaPlugin.IMPLEMENTATION_CONFIGURATION_NAME, target));\t\tproject.getPlugins().withType(JavaLibraryPlugin.class)\t\t\t\t.all((javaLibraryPlugin) -> addMavenRepositoryDependencies(project, JavaPlugin.API_CONFIGURATION_NAME,\t\t\t\t\t\ttarget));\t\tproject.getPlugins().withType(JavaPlatformPlugin.class)\t\t\t\t.all((javaPlugin) -> addMavenRepositoryDependencies(project, JavaPlatformPlugin.API_CONFIGURATION_NAME,\t\t\t\t\t\ttarget));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenRepositoryPlugin.java", "stars": "47572", "class": {"name": "MavenRepositoryPlugin", "extends": null, "implements": ["Plugin"], "modifiers": ["public"]}}, {"method_name": "addMavenRepositoryDependencies", "params": ["Project", "String", "DependencySet"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void addMavenRepositoryDependencies(Project project, String sourceConfigurationName, DependencySet target) {\t\tproject.getConfigurations().getByName(sourceConfigurationName).getDependencies()\t\t\t\t.withType(ProjectDependency.class).all((dependency) -> {\t\t\t\t\tMap<String, String> dependencyDescriptor = new HashMap<>();\t\t\t\t\tdependencyDescriptor.put(\"path\", dependency.getDependencyProject().getPath());\t\t\t\t\tdependencyDescriptor.put(\"configuration\", MAVEN_REPOSITORY_CONFIGURATION_NAME);\t\t\t\t\ttarget.add(project.getDependencies().project(dependencyDescriptor));\t\t\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenRepositoryPlugin.java", "stars": "47572", "class": {"name": "MavenRepositoryPlugin", "extends": null, "implements": ["Plugin"], "modifiers": ["public"]}}, {"method_name": "execute", "params": ["Task"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void execute(Task task) {\t\t\ttask.getProject().delete(this.location);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenRepositoryPlugin.java", "stars": "47572", "class": {"name": "CleanAction", "extends": null, "implements": ["Action"], "modifiers": ["private", "static", "final"]}}, {"method_name": "generateKey", "params": ["String", "ImageSize"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String generateKey(String imageUri, ImageSize targetSize) {\t\treturn new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/MemoryCacheUtil.java", "stars": "74", "class": {"name": "MemoryCacheUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createFuzzyKeyComparator", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Comparator<String>", "snippet": "\tpublic static Comparator<String> createFuzzyKeyComparator() {\t\treturn new Comparator<String>() {\t\t\t@Override\t\t\tpublic int compare(String key1, String key2) {\t\t\t\tString imageUri1 = key1.substring(0, key1.lastIndexOf(URI_AND_SIZE_SEPARATOR));\t\t\t\tString imageUri2 = key2.substring(0, key2.lastIndexOf(URI_AND_SIZE_SEPARATOR));\t\t\t\treturn imageUri1.compareTo(imageUri2);\t\t\t}\t\t};\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/MemoryCacheUtil.java", "stars": "74", "class": {"name": "MemoryCacheUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "findCachedBitmapsForImageUri", "params": ["String", "MemoryCacheAware<String,Bitmap>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Bitmap>", "snippet": "\tpublic static List<Bitmap> findCachedBitmapsForImageUri(String imageUri, MemoryCacheAware<String, Bitmap> memoryCache) {\t\tList<Bitmap> values = new ArrayList<Bitmap>();\t\tfor (String key : memoryCache.keys()) {\t\t\tif (key.startsWith(imageUri)) {\t\t\t\tvalues.add(memoryCache.get(key));\t\t\t}\t\t}\t\treturn values;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/MemoryCacheUtil.java", "stars": "74", "class": {"name": "MemoryCacheUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "findCacheKeysForImageUri", "params": ["String", "MemoryCacheAware<String,Bitmap>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "\tpublic static List<String> findCacheKeysForImageUri(String imageUri, MemoryCacheAware<String, Bitmap> memoryCache) {\t\tList<String> values = new ArrayList<String>();\t\tfor (String key : memoryCache.keys()) {\t\t\tif (key.startsWith(imageUri)) {\t\t\t\tvalues.add(key);\t\t\t}\t\t}\t\treturn values;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/MemoryCacheUtil.java", "stars": "74", "class": {"name": "MemoryCacheUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "removeFromCache", "params": ["String", "MemoryCacheAware<String,Bitmap>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void removeFromCache(String imageUri, MemoryCacheAware<String, Bitmap> memoryCache) {\t\tList<String> keysToRemove = new ArrayList<String>();\t\tfor (String key : memoryCache.keys()) {\t\t\tif (key.startsWith(imageUri)) {\t\t\t\tkeysToRemove.add(key);\t\t\t}\t\t}\t\tfor (String keyToRemove : keysToRemove) {\t\t\tmemoryCache.remove(keyToRemove);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/MemoryCacheUtil.java", "stars": "74", "class": {"name": "MemoryCacheUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getkoneksi", "params": [], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "Connection", "snippet": "    public static Connection getkoneksi() throws SQLException{     try{        DriverManager.registerDriver(new com.mysql.jdbc.Driver());        con = DriverManager.getConnection(\"jdbc:mysql://localhost/db_bengkel\",\"root\",\"\");           }catch (Exception e){         System.out.println(\"Koneksi Gagal\" + e.getMessage());    }    return con;    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/koneksi.java", "stars": "2", "class": {"name": "koneksi", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLoggedInUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "User", "snippet": "    public User getLoggedInUser() {        String login = SecurityUtils.getCurrentUserLogin().orElseThrow(MissingAuthorityServiceException::new);        return userRepository.findOneByLogin(login).orElseThrow(MissingAuthorityServiceException::new);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/SecurityHelperService.java", "stars": "2", "class": {"name": "SecurityHelperService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkAuthority", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkAuthority(Long userId) {        User user = getLoggedInUser();        if (!user.getId().equals(userId)) {            throw new MissingAuthorityServiceException();        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/SecurityHelperService.java", "stars": "2", "class": {"name": "SecurityHelperService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkPermission", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkPermission(Long userId) {        User user = getLoggedInUser();        if (!user.getId().equals(userId)) {            throw new MissingPermissionServiceException(\"User has not the permission for this action\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/SecurityHelperService.java", "stars": "2", "class": {"name": "SecurityHelperService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkAuthorityByGardenFieldId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkAuthorityByGardenFieldId(Long gardenFieldId) {        User user = getLoggedInUser();        GardenField gardenField = gardenFieldRepository.findById(gardenFieldId)            .orElseThrow(() -> new GardenFieldUnknownServiceException(\"Unknown Gardenfield\"));        if (!user.getId().equals(gardenField.getOwner().getId())) {            throw new MissingAuthorityServiceException();        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/SecurityHelperService.java", "stars": "2", "class": {"name": "SecurityHelperService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkPermissionByGardenFieldId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkPermissionByGardenFieldId(Long gardenFieldId) {        User user = getLoggedInUser();        GardenField gardenField = gardenFieldRepository.findById(gardenFieldId)            .orElseThrow(() -> new GardenFieldUnknownServiceException(\"Unknown Gardenfield\"));        if (!user.getId().equals(gardenField.getOwner().getId())) {            throw new MissingPermissionServiceException(\"User has not the permission for the requested gardenfield\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/SecurityHelperService.java", "stars": "2", "class": {"name": "SecurityHelperService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loggedInUserIsOwnerOfGardenField", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean loggedInUserIsOwnerOfGardenField(Long gardenFieldId) {        User user = getLoggedInUser();        GardenField gardenField = gardenFieldRepository.findById(gardenFieldId)            .orElseThrow(() -> new GardenFieldUnknownServiceException(\"Unknown Gardenfield\"));        return user.getId().equals(gardenField.getOwner().getId());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/SecurityHelperService.java", "stars": "2", "class": {"name": "SecurityHelperService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exec", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String exec(HttpServletRequest req, HttpServletResponse resp) {\t\tString view = \"/clsProj/gBoard/gBoardList.cls\";\t\treq.setAttribute(\"isRedirect\", true);\t\tString body = req.getParameter(\"body\");\t\tString sid = (String) req.getSession().getAttribute(\"SID\");\t\tGBoardDAO gDAO = new GBoardDAO();\t\tint cnt = gDAO.addData(sid, body);\t\treturn view;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/controller/gBoard/GBoardProc.java", "stars": "2", "class": {"name": "GBoardProc", "extends": null, "implements": ["ClsController"], "modifiers": ["public"]}}, {"method_name": "drawStringWithShadow", "params": ["String", "double", "double", "int"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float drawStringWithShadow(String text, double x, double y, int color) {        float shadowWidth = drawString(text, x + 1D, y + 1D, color, true);        return Math.max(shadowWidth, drawString(text, x, y, color, false));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawString", "params": ["String", "float", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float drawString(String text, float x, float y, int color) {        return drawString(text, x, y, color, false);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawCenteredStringWithShadow", "params": ["String", "float", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float drawCenteredStringWithShadow(String text, float x, float y, int color) {        return drawStringWithShadow(text, x - getStringWidth(text) / 2, y, color);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawCenteredString", "params": ["String", "float", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float drawCenteredString(String text, float x, float y, int color) {        return drawString(text, x - getStringWidth(text) / 2, y, color);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawString", "params": ["String", "double", "double", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float drawString(String text, double x, double y, int color, boolean shadow) {        x -= 1;        y -= 2;        if (text == null) {            return 0.0F;        }        if (color == 553648127) {            color = 16777215;        }        if ((color & 0xFC000000) == 0) {            color |= -16777216;        }        if (shadow) {            color = (color & 0xFCFCFC) >> 2 | color & 0xFF000000;        }        CharData[] currentData = this.charData;        float alpha = (color >> 24 & 0xFF) / 255.0F;        boolean randomCase = false;        boolean bold = false;        boolean italic = false;        boolean strikethrough = false;        boolean underline = false;        boolean render = true;        x *= 2.0D;        y *= 2.0D;        if (render) {            GL11.glPushMatrix();            GlStateManager.scale(0.5D, 0.5D, 0.5D);            GlStateManager.enableBlend();            GlStateManager.blendFunc(770, 771);            GlStateManager.color((color >> 16 & 0xFF) / 255.0F, (color >> 8 & 0xFF) / 255.0F, (color & 0xFF) / 255.0F, alpha);            int size = text.length();            GlStateManager.enableTexture2D();            GlStateManager.bindTexture(tex.getGlTextureId());            GL11.glBindTexture(GL11.GL_TEXTURE_2D, tex.getGlTextureId());            for (int i = 0; i < size; i++) {                char character = text.charAt(i);                if ((character == '\\u00A7') && (i < size)) {                    int colorIndex = 21;                    try {                        colorIndex = \"0123456789abcdefklmnor\".indexOf(text.charAt(i + 1));                    } catch (Exception e) {                    }                    if (colorIndex < 16) {                        bold = false;                        italic = false;                        randomCase = false;                        underline = false;                        strikethrough = false;                        GlStateManager.bindTexture(tex.getGlTextureId());                        // GL11.glBindTexture(GL11.GL_TEXTURE_2D,                        // tex.getGlTextureId());                        currentData = this.charData;                        if ((colorIndex < 0) || (colorIndex > 15)) colorIndex = 15;                        if (shadow) colorIndex += 16;                        int colorcode = this.colorCode[colorIndex];                        GlStateManager.color((colorcode >> 16 & 0xFF) / 255.0F, (colorcode >> 8 & 0xFF) / 255.0F, (colorcode & 0xFF) / 255.0F, alpha);                    } else if (colorIndex == 16) randomCase = true;                    else if (colorIndex == 17) {                        bold = true;                        if (italic) {                            GlStateManager.bindTexture(texItalicBold.getGlTextureId());                            // GL11.glBindTexture(GL11.GL_TEXTURE_2D,                            // texItalicBold.getGlTextureId());                            currentData = this.boldItalicChars;                        } else {                            GlStateManager.bindTexture(texBold.getGlTextureId());                            // GL11.glBindTexture(GL11.GL_TEXTURE_2D,                            // texBold.getGlTextureId());                            currentData = this.boldChars;                        }                    } else if (colorIndex == 18) strikethrough = true;                    else if (colorIndex == 19) underline = true;                    else if (colorIndex == 20) {                        italic = true;                        if (bold) {                            GlStateManager.bindTexture(texItalicBold.getGlTextureId());                            // GL11.glBindTexture(GL11.GL_TEXTURE_2D,                            // texItalicBold.getGlTextureId());                            currentData = this.boldItalicChars;                        } else {                            GlStateManager.bindTexture(texItalic.getGlTextureId());                            // GL11.glBindTexture(GL11.GL_TEXTURE_2D,                            // texItalic.getGlTextureId());                            currentData = this.italicChars;                        }                    } else if (colorIndex == 21) {                        bold = false;                        italic = false;                        randomCase = false;                        underline = false;                        strikethrough = false;                        GlStateManager.color((color >> 16 & 0xFF) / 255.0F, (color >> 8 & 0xFF) / 255.0F, (color & 0xFF) / 255.0F, alpha);                        GlStateManager.bindTexture(tex.getGlTextureId());                        // GL11.glBindTexture(GL11.GL_TEXTURE_2D,                        // tex.getGlTextureId());                        currentData = this.charData;                    }                    i++;                } else if ((character < currentData.length) && (character >= 0)) {                    GL11.glBegin(4);                    drawChar(currentData, character, (float) x, (float) y);                    GL11.glEnd();                    if (strikethrough)                        drawLine(x, y + currentData[character].height / 2, x + currentData[character].width - 8.0D, y + currentData[character].height / 2, 1.0F);                    if (underline)                        drawLine(x, y + currentData[character].height - 2.0D, x + currentData[character].width - 8.0D, y + currentData[character].height - 2.0D, 1.0F);                    x += currentData[character].width - 8 + this.charOffset;                }            }            GL11.glHint(3155, 4352);            GL11.glPopMatrix();        }        return (float) x / 2.0F;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringWidth", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStringWidth(String text) {        if (text == null) {            return 0;        }        int width = 0;        CharData[] currentData = this.charData;        boolean bold = false;        boolean italic = false;        int size = text.length();        for (int i = 0; i < size; i++) {            char character = text.charAt(i);            if ((character == '\\u00A7') && (i < size)) {                int colorIndex = \"0123456789abcdefklmnor\".indexOf(character);                if (colorIndex < 16) {                    bold = false;                    italic = false;                } else if (colorIndex == 17) {                    bold = true;                    if (italic) currentData = this.boldItalicChars;                    else currentData = this.boldChars;                } else if (colorIndex == 20) {                    italic = true;                    if (bold) currentData = this.boldItalicChars;                    else currentData = this.italicChars;                } else if (colorIndex == 21) {                    bold = false;                    italic = false;                    currentData = this.charData;                }                i++;            } else if ((character < currentData.length) && (character >= 0)) {                width += currentData[character].width - 8 + this.charOffset;            }        }        return width / 2;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFont", "params": ["Font"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFont(Font font) {        super.setFont(font);        setupBoldItalicIDs();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAntiAlias", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAntiAlias(boolean antiAlias) {        super.setAntiAlias(antiAlias);        setupBoldItalicIDs();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFractionalMetrics", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFractionalMetrics(boolean fractionalMetrics) {        super.setFractionalMetrics(fractionalMetrics);        setupBoldItalicIDs();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "setupBoldItalicIDs", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupBoldItalicIDs() {        texBold = setupTexture(this.font.deriveFont(1), this.antiAlias, this.fractionalMetrics, this.boldChars);        texItalic = setupTexture(this.font.deriveFont(2), this.antiAlias, this.fractionalMetrics, this.italicChars);        texItalicBold = setupTexture(this.font.deriveFont(3), this.antiAlias, this.fractionalMetrics, this.boldItalicChars);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawLine", "params": ["double", "double", "double", "double", "float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawLine(double x, double y, double x1, double y1, float width) {        GL11.glDisable(GL11.GL_TEXTURE_2D);        GL11.glLineWidth(width);        GL11.glBegin(1);        GL11.glVertex2d(x, y);        GL11.glVertex2d(x1, y1);        GL11.glEnd();        GL11.glEnable(GL11.GL_TEXTURE_2D);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "wrapWords", "params": ["String", "double"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> wrapWords(String text, double width) {        List finalWords = new ArrayList();        if (getStringWidth(text) > width) {            String[] words = text.split(\" \");            String currentWord = \"\";            char lastColorCode = 65535;            for (String word : words) {                for (int i = 0; i < word.toCharArray().length; i++) {                    char c = word.toCharArray()[i];                    if ((c == '\\u00A7') && (i < word.toCharArray().length - 1)) {                        lastColorCode = word.toCharArray()[(i + 1)];                    }                }                if (getStringWidth(currentWord + word + \" \") < width) {                    currentWord = currentWord + word + \" \";                } else {                    finalWords.add(currentWord);                    currentWord = \"\\u00A7\" + lastColorCode + word + \" \";                }            }            if (currentWord.length() > 0) if (getStringWidth(currentWord) < width) {                finalWords.add(\"\\u00A7\" + lastColorCode + currentWord + \" \");                currentWord = \"\";            } else {                for (String s : formatString(currentWord, width))                    finalWords.add(s);            }        } else {            finalWords.add(text);        }        return finalWords;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "formatString", "params": ["String", "double"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> formatString(String string, double width) {        List finalWords = new ArrayList();        String currentWord = \"\";        char lastColorCode = 65535;        char[] chars = string.toCharArray();        for (int i = 0; i < chars.length; i++) {            char c = chars[i];            if ((c == '\\u00A7') && (i < chars.length - 1)) {                lastColorCode = chars[(i + 1)];            }            if (getStringWidth(currentWord + c) < width) {                currentWord = currentWord + c;            } else {                finalWords.add(currentWord);                currentWord = \"\\u00A7\" + lastColorCode + String.valueOf(c);            }        }        if (currentWord.length() > 0) {            finalWords.add(currentWord);        }        return finalWords;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "setupMinecraftColorcodes", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupMinecraftColorcodes() {        for (int index = 0; index < 32; index++) {            int noClue = (index >> 3 & 0x1) * 85;            int red = (index >> 2 & 0x1) * 170 + noClue;            int green = (index >> 1 & 0x1) * 170 + noClue;            int blue = (index >> 0 & 0x1) * 170 + noClue;            if (index == 6) {                red += 85;            }            if (index >= 16) {                red /= 4;                green /= 4;                blue /= 4;            }            this.colorCode[index] = ((red & 0xFF) << 16 | (green & 0xFF) << 8 | blue & 0xFF);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFontRenderer.java", "stars": "12", "class": {"name": "CFontRenderer", "extends": "CFont", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return this.id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(int id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequest_id", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRequest_id() {        return this.request_id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRequest_id", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequest_id(String request_id) {        this.request_id = request_id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLock_resource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLock_resource() {        return this.lock_resource;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLock_resource", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLock_resource(String lock_resource) {        this.lock_resource = lock_resource;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLock_count", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getLock_count() {        return this.lock_count;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLock_count", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLock_count(long lock_count) {        this.lock_count = lock_count;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVersion() {        return this.version;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVersion", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVersion(int version) {        this.version = version;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIp() {        return this.ip;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIp", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIp(String ip) {        this.ip = ip;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getTimeout() {        return this.timeout;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimeout", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimeout(long timeout) {        this.timeout = timeout;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreate_time", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getCreate_time() {        return this.create_time;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreate_time", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreate_time(long create_time) {        this.create_time = create_time;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdate_time", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getUpdate_time() {        return this.update_time;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdate_time", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUpdate_time(long update_time) {        this.update_time = update_time;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"DistributeLock{\" +                \"id=\" + id +                \", request_id='\" + request_id + '\\'' +                \", lock_resource='\" + lock_resource + '\\'' +                \", lock_count=\" + lock_count +                \", version=\" + version +                \", ip='\" + ip + '\\'' +                \", timeout=\" + new Date(timeout) +                \", create_time=\" + new Date(create_time) +                \", update_time=\" + new Date(update_time) +                '}';    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/DistributeLock.java", "stars": "18", "class": {"name": "DistributeLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inicializar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void inicializar() {\t\tdao = new ProdutoDao();\t\tbuscarProdutos();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaProdutoBean.java", "stars": "1", "class": {"name": "PesquisaProdutoBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarProdutos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void buscarProdutos() {\t\tprodutos = dao.buscarTodos();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaProdutoBean.java", "stars": "1", "class": {"name": "PesquisaProdutoBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "excluir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void excluir() {\t\tdao.excluir(produtoSelecionado);\t\tbuscarProdutos();\t\tFacesUtil.addInfoMessage(\"Produto excluido com sucesso\");\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaProdutoBean.java", "stars": "1", "class": {"name": "PesquisaProdutoBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ProdutoDao", "snippet": "\tpublic ProdutoDao getDao() {\t\treturn dao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaProdutoBean.java", "stars": "1", "class": {"name": "PesquisaProdutoBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDao", "params": ["ProdutoDao"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDao(ProdutoDao dao) {\t\tthis.dao = dao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaProdutoBean.java", "stars": "1", "class": {"name": "PesquisaProdutoBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProdutoSelecionado", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Produto", "snippet": "\tpublic Produto getProdutoSelecionado() {\t\treturn produtoSelecionado;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaProdutoBean.java", "stars": "1", "class": {"name": "PesquisaProdutoBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProdutoSelecionado", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setProdutoSelecionado(Produto produtoSelecionado) {\t\tthis.produtoSelecionado = produtoSelecionado;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaProdutoBean.java", "stars": "1", "class": {"name": "PesquisaProdutoBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProdutos", "params": ["List<Produto>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setProdutos(List<Produto> produtos) {\t\tthis.produtos = produtos;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaProdutoBean.java", "stars": "1", "class": {"name": "PesquisaProdutoBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProdutos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Produto>", "snippet": "\tpublic List<Produto> getProdutos() {\t\treturn produtos;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaProdutoBean.java", "stars": "1", "class": {"name": "PesquisaProdutoBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        if (mode.equalsIgnoreCase(\"entity\")) {            if (mc.player.getRidingEntity() != null) {                this.riding = mc.player.getRidingEntity();                mc.player.dismountRidingEntity();                mc.world.removeEntity(this.riding);                mc.player.setPosition(mc.player.getPosition().getX(), mc.player.getPosition().getY() - 1, mc.player.getPosition().getZ());            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/GodMode.java", "stars": "12", "class": {"name": "GodMode", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {        if (mode.equalsIgnoreCase(\"entity\")) {            if (this.riding != null) {                mc.player.connection.sendPacket(new CPacketUseEntity(this.riding, EnumHand.MAIN_HAND));            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/GodMode.java", "stars": "12", "class": {"name": "GodMode", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (mode.equalsIgnoreCase(\"entity\")) {            if (this.riding != null) {                this.riding.posX = mc.player.posX;                this.riding.posY = mc.player.posY;                this.riding.posZ = mc.player.posZ;                this.riding.rotationYaw = mc.player.rotationYaw;                mc.player.connection.sendPacket(new CPacketPlayer.Rotation(mc.player.rotationYaw, mc.player.rotationPitch, true));                mc.player.connection.sendPacket(new CPacketInput(mc.player.movementInput.moveForward, mc.player.movementInput.moveStrafe, false, false));                mc.player.connection.sendPacket(new CPacketVehicleMove(this.riding));            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/GodMode.java", "stars": "12", "class": {"name": "GodMode", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (event.getType().equals(PacketEvent.Type.OUTGOING)) {            if (this.mode.equalsIgnoreCase(\"portal\")) {                if (event.getPacket() instanceof CPacketConfirmTeleport) {                    event.setCancelled(true);                }            }            if (this.mode.equalsIgnoreCase(\"entity\")) {                if (event.getPacket() instanceof CPacketUseEntity) {                    final CPacketUseEntity packet = (CPacketUseEntity) event.getPacket();                    if (this.riding != null) {                        final Entity entity = packet.getEntityFromWorld(mc.world);                        if (entity != null) {                            this.riding.posX = entity.posX;                            this.riding.posY = entity.posY;                            this.riding.posZ = entity.posZ;                            this.riding.rotationYaw = mc.player.rotationYaw;                            mc.player.connection.sendPacket(new CPacketPlayer.Rotation(mc.player.rotationYaw, mc.player.rotationPitch, true));                            mc.player.connection.sendPacket(new CPacketInput(mc.player.movementInput.moveForward, mc.player.movementInput.moveStrafe, false, false));                            mc.player.connection.sendPacket(new CPacketVehicleMove(this.riding));                        }                    }                }                if (event.getPacket() instanceof CPacketPlayer.Position || event.getPacket() instanceof CPacketPlayer.PositionRotation) {                    event.setCancelled(true);                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/GodMode.java", "stars": "12", "class": {"name": "GodMode", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tLocalDate date = LocalDate.now();\t\tint month = date.getMonthValue();\t\tint today = date.getDayOfMonth();\t\t\t\tdate = date.minusDays(today-1);//Set to start of month\t\tDayOfWeek weekday = date.getDayOfWeek();\t\tint value = weekday.getValue();//1 = Monday, . . .7 = Sunday\t\t\t\tSystem.out.println(\"Mon Tue Wed Thu Fri Sat Sun\");\t\tfor (int i = 1; i < value; i++)\t\t\tSystem.out.print(\"    \");\t\twhile (date.getMonthValue() == month)\t\t{\t\t\tSystem.out.printf(\"%3d\", date.getDayOfMonth());\t\t\tif (date.getDayOfMonth() == today)\t\t\t\tSystem.out.print(\"*\");\t\t\telse\t\t\t\tSystem.out.print(\" \");\t\t\tdate = date.plusDays(1);\t\t\tif (date.getDayOfWeek().getValue() == 1) System.out.println();\t\t}\t\tif (date.getDayOfWeek().getValue() != 1) System.out.println();\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Rili.java", "stars": "2", "class": {"name": "Rili", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "commence", "params": ["HttpServletRequest", "HttpServletResponse", "AuthenticationException"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void commence(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException {        httpServletResponse.setCharacterEncoding(\"UTF-8\");//\u8bbe\u7f6e\u670d\u52a1\u5668\u7684\u7f16\u7801\uff0c\u9ed8\u8ba4\u662fISO-8859-1        httpServletResponse.setContentType(\"application/json; charset = utf-8\");//\u544a\u8bc9\u6d4f\u89c8\u5668\u670d\u52a1\u5668\u7684\u7f16\u7801\u683c\u5f0f        httpServletResponse.getWriter().write(new Gson().toJson(ApiResponse.ofStatus(ApiResponseEnum.NOT_LOGIN)));    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/ajax_login/AjaxAuthenticationEntryPoint.java", "stars": "3", "class": {"name": "AjaxAuthenticationEntryPoint", "extends": null, "implements": ["AuthenticationEntryPoint"], "modifiers": ["public"]}}, {"method_name": "checkIfValueDuplicate", "params": ["List<String>", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean checkIfValueDuplicate(List<String> aList,                                                boolean caseSensitive) {        if (null == aList || aList.isEmpty()) {            throw DataXException.asDataXException(CommonErrorCode.CONFIG_ERROR,                    \"\u60a8\u63d0\u4f9b\u7684\u4f5c\u4e1a\u914d\u7f6e\u6709\u8bef\uff0cList\u4e0d\u80fd\u4e3a\u7a7a.\");        }        try {            makeSureNoValueDuplicate(aList, caseSensitive);        } catch (Exception e) {            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/ListUtil.java", "stars": "23", "class": {"name": "ListUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "makeSureNoValueDuplicate", "params": ["List<String>", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void makeSureNoValueDuplicate(List<String> aList,                                                boolean caseSensitive) {        if (null == aList || aList.isEmpty()) {            throw new IllegalArgumentException(\"\u60a8\u63d0\u4f9b\u7684\u4f5c\u4e1a\u914d\u7f6e\u6709\u8bef, List\u4e0d\u80fd\u4e3a\u7a7a.\");        }        if (1 == aList.size()) {            return;        } else {            List<String> list = null;            if (!caseSensitive) {                list = valueToLowerCase(aList);            } else {                list = new ArrayList<String>(aList);            }            Collections.sort(list);            for (int i = 0, len = list.size() - 1; i < len; i++) {                if (list.get(i).equals(list.get(i + 1))) {                    throw DataXException                            .asDataXException(                                    CommonErrorCode.CONFIG_ERROR,                                    String.format(                                            \"\u60a8\u63d0\u4f9b\u7684\u4f5c\u4e1a\u914d\u7f6e\u4fe1\u606f\u6709\u8bef, String:[%s] \u4e0d\u5141\u8bb8\u91cd\u590d\u51fa\u73b0\u5728\u5217\u8868\u4e2d: [%s].\",                                            list.get(i),                                            StringUtils.join(aList, \",\")));                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/ListUtil.java", "stars": "23", "class": {"name": "ListUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkIfBInA", "params": ["List<String>", "List<String>", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean checkIfBInA(List<String> aList, List<String> bList,                                      boolean caseSensitive) {        if (null == aList || aList.isEmpty() || null == bList                || bList.isEmpty()) {            throw new IllegalArgumentException(\"\u60a8\u63d0\u4f9b\u7684\u4f5c\u4e1a\u914d\u7f6e\u6709\u8bef, List\u4e0d\u80fd\u4e3a\u7a7a.\");        }        try {            makeSureBInA(aList, bList, caseSensitive);        } catch (Exception e) {            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/ListUtil.java", "stars": "23", "class": {"name": "ListUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "makeSureBInA", "params": ["List<String>", "List<String>", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void makeSureBInA(List<String> aList, List<String> bList,                                    boolean caseSensitive) {        if (null == aList || aList.isEmpty() || null == bList                || bList.isEmpty()) {            throw new IllegalArgumentException(\"\u60a8\u63d0\u4f9b\u7684\u4f5c\u4e1a\u914d\u7f6e\u6709\u8bef, List\u4e0d\u80fd\u4e3a\u7a7a.\");        }        List<String> all = null;        List<String> part = null;        if (!caseSensitive) {            all = valueToLowerCase(aList);            part = valueToLowerCase(bList);        } else {            all = new ArrayList<String>(aList);            part = new ArrayList<String>(bList);        }        for (String oneValue : part) {            if (!all.contains(oneValue)) {                throw DataXException                        .asDataXException(                                CommonErrorCode.CONFIG_ERROR,                                String.format(                                        \"\u60a8\u63d0\u4f9b\u7684\u4f5c\u4e1a\u914d\u7f6e\u4fe1\u606f\u6709\u8bef, String:[%s] \u4e0d\u5b58\u5728\u4e8e\u5217\u8868\u4e2d:[%s].\",                                        oneValue, StringUtils.join(aList, \",\")));            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/ListUtil.java", "stars": "23", "class": {"name": "ListUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkIfValueSame", "params": ["List<Boolean>"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean checkIfValueSame(List<Boolean> aList) {        if (null == aList || aList.isEmpty()) {            throw new IllegalArgumentException(\"\u60a8\u63d0\u4f9b\u7684\u4f5c\u4e1a\u914d\u7f6e\u6709\u8bef, List\u4e0d\u80fd\u4e3a\u7a7a.\");        }        if (1 == aList.size()) {            return true;        } else {            Boolean firstValue = aList.get(0);            for (int i = 1, len = aList.size(); i < len; i++) {                if (firstValue.booleanValue() != aList.get(i).booleanValue()) {                    return false;                }            }            return true;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/ListUtil.java", "stars": "23", "class": {"name": "ListUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "valueToLowerCase", "params": ["List<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "    public static List<String> valueToLowerCase(List<String> aList) {        if (null == aList || aList.isEmpty()) {            throw new IllegalArgumentException(\"\u60a8\u63d0\u4f9b\u7684\u4f5c\u4e1a\u914d\u7f6e\u6709\u8bef, List\u4e0d\u80fd\u4e3a\u7a7a.\");        }        List<String> result = new ArrayList<String>(aList.size());        for (String oneValue : aList) {            result.add(null != oneValue ? oneValue.toLowerCase() : null);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/ListUtil.java", "stars": "23", "class": {"name": "ListUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setUp", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void setUp(String browser, String URL) {\t\t\t\t\t\tif(browser.equalsIgnoreCase(\"chrome\")) {\t\t\tSystem.setProperty(ChromeDriverService.CHROME_DRIVER_SILENT_OUTPUT_PROPERTY, \"true\");\t\t\t\t\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\t\tdriver=new ChromeDriver();\t\t}else if(browser.equalsIgnoreCase(\"firefox\")) {\t\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"drivers/geckodriver.exe\");\t\t\tdriver=new FirefoxDriver();\t\t}else {\t\t\tSystem.out.println(\"Invalid browser type\");\t\t}\t\t\t\tdriver.manage().window().maximize();\t\tdriver.manage().deleteAllCookies();\t\t\t\tdriver.manage().timeouts().pageLoadTimeout(30,  TimeUnit.SECONDS);\t\tdriver.manage().timeouts().implicitlyWait(30,  TimeUnit.SECONDS);\t\t\t\tdriver.get(URL);\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/utils/CommonMethods.java", "stars": "3", "class": {"name": "CommonMethods", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendText", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void sendText(String locatorType, String locator, String str) {\t\tWebElement element = null;\t\tlocatorType=locatorType.toLowerCase();\t\t\t\tswitch (locatorType) {\t\tcase \"xpath\":\t\t\telement=driver.findElement(By.xpath(locator));\t\t\tbreak;\t\t\t\t\tcase \"id\":\t\t\telement=driver.findElement(By.id(locator));\t\t\tbreak;\t\t\t\t\tcase \"classname\":\t\t\telement=driver.findElement(By.className(locator));\t\t\tbreak;\t\t\t\t\tcase \"name\":\t\t\telement=driver.findElement(By.name(locator));\t\t\tbreak;\t\t\t\t\tcase \"tagname\":\t\t\telement=driver.findElement(By.tagName(locator));\t\t\tbreak;\t\t\t\t\tcase \"linktext\":\t\t\telement=driver.findElement(By.linkText(locator));\t\t\tbreak;\t\t\t\t\tcase \"partiallinktext\":\t\t\telement=driver.findElement(By.partialLinkText(locator));\t\t\tbreak;\t\t\t\t\tcase \"css\":\t\t\telement=driver.findElement(By.cssSelector(locator));\t\t\tbreak;\t\tdefault:\t\t\tSystem.out.println(\"Invalid value\");\t\t\tbreak;\t\t}\t\telement.sendKeys(str);\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/utils/CommonMethods.java", "stars": "3", "class": {"name": "CommonMethods", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnknownFields", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "com", "snippet": "  public final com.google.protobuf.UnknownFieldSet  getUnknownFields() {    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDescriptor", "params": [], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "com", "snippet": "  public static final com.google.protobuf.Descriptors.Descriptor      getDescriptor() {    return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloRequest_descriptor;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "internalGetFieldAccessorTable", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "com", "snippet": "  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable      internalGetFieldAccessorTable() {    return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloRequest_fieldAccessorTable        .ensureFieldAccessorsInitialized(            generated.io.grpc.examples.helloworld.HelloRequest.class, generated.io.grpc.examples.helloworld.HelloRequest.Builder.class);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "  public java.lang.String getName() {    java.lang.Object ref = name_;    if (ref instanceof java.lang.String) {      return (java.lang.String) ref;    } else {      com.google.protobuf.ByteString bs =           (com.google.protobuf.ByteString) ref;      java.lang.String s = bs.toStringUtf8();      name_ = s;      return s;    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getNameBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "  public com.google.protobuf.ByteString      getNameBytes() {    java.lang.Object ref = name_;    if (ref instanceof java.lang.String) {      com.google.protobuf.ByteString b =           com.google.protobuf.ByteString.copyFromUtf8(              (java.lang.String) ref);      name_ = b;      return b;    } else {      return (com.google.protobuf.ByteString) ref;    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "  public final boolean isInitialized() {    byte isInitialized = memoizedIsInitialized;    if (isInitialized == 1) return true;    if (isInitialized == 0) return false;    memoizedIsInitialized = 1;    return true;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "writeTo", "params": ["com"], "throws": ["java.io.IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void writeTo(com.google.protobuf.CodedOutputStream output)                      throws java.io.IOException {    if (!getNameBytes().isEmpty()) {      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getSerializedSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSerializedSize() {    int size = memoizedSize;    if (size != -1) return size;    size = 0;    if (!getNameBytes().isEmpty()) {      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);    }    memoizedSize = size;    return size;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "equals", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(final java.lang.Object obj) {    if (obj == this) {     return true;    }    if (!(obj instanceof generated.io.grpc.examples.helloworld.HelloRequest)) {      return super.equals(obj);    }    generated.io.grpc.examples.helloworld.HelloRequest other = (generated.io.grpc.examples.helloworld.HelloRequest) obj;    boolean result = true;    result = result && getName()        .equals(other.getName());    return result;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    if (memoizedHashCode != 0) {      return memoizedHashCode;    }    int hash = 41;    hash = (19 * hash) + getDescriptorForType().hashCode();    hash = (37 * hash) + NAME_FIELD_NUMBER;    hash = (53 * hash) + getName().hashCode();    hash = (29 * hash) + unknownFields.hashCode();    memoizedHashCode = hash;    return hash;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseFrom(      com.google.protobuf.ByteString data)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com", "com"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseFrom(      com.google.protobuf.ByteString data,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["byte"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseFrom(byte[] data)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["byte", "com"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseFrom(      byte[] data,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["java"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseFrom(java.io.InputStream input)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["java", "com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseFrom(      java.io.InputStream input,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseDelimitedFrom", "params": ["java"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseDelimitedFrom(java.io.InputStream input)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseDelimitedWithIOException(PARSER, input);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseDelimitedFrom", "params": ["java", "com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseDelimitedFrom(      java.io.InputStream input,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseFrom(      com.google.protobuf.CodedInputStream input)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com", "com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest parseFrom(      com.google.protobuf.CodedInputStream input,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilderForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "  public Builder newBuilderForType() { return newBuilder(); }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilder", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "  public static Builder newBuilder() {    return DEFAULT_INSTANCE.toBuilder();  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilder", "params": ["generated"], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "  public static Builder newBuilder(generated.io.grpc.examples.helloworld.HelloRequest prototype) {    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "toBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "  public Builder toBuilder() {    return this == DEFAULT_INSTANCE        ? new Builder() : new Builder().mergeFrom(this);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilderForType", "params": ["com"], "throws": null, "modifiers": ["protected"], "return_type": "Builder", "snippet": "  protected Builder newBuilderForType(      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {    Builder builder = new Builder(parent);    return builder;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDefaultInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.io.grpc.examples.helloworld.HelloRequest getDefaultInstance() {    return DEFAULT_INSTANCE;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parser", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "com", "snippet": "  public static com.google.protobuf.Parser<HelloRequest> parser() {    return PARSER;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getParserForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "  public com.google.protobuf.Parser<HelloRequest> getParserForType() {    return PARSER;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDefaultInstanceForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "  public generated.io.grpc.examples.helloworld.HelloRequest getDefaultInstanceForType() {    return DEFAULT_INSTANCE;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "HelloRequest", "extends": "com", "implements": ["HelloRequestOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDescriptor", "params": [], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "com", "snippet": "    public static final com.google.protobuf.Descriptors.Descriptor        getDescriptor() {      return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloRequest_descriptor;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "internalGetFieldAccessorTable", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "com", "snippet": "    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable        internalGetFieldAccessorTable() {      return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloRequest_fieldAccessorTable          .ensureFieldAccessorsInitialized(              generated.io.grpc.examples.helloworld.HelloRequest.class, generated.io.grpc.examples.helloworld.HelloRequest.Builder.class);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "maybeForceBuilderInitialization", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void maybeForceBuilderInitialization() {      if (com.google.protobuf.GeneratedMessageV3              .alwaysUseFieldBuilders) {      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clear() {      super.clear();      name_ = \"\";      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getDescriptorForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.Descriptors.Descriptor        getDescriptorForType() {      return generated.io.grpc.examples.helloworld.HelloWorldProto.internal_static_helloworld_HelloRequest_descriptor;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getDefaultInstanceForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.io.grpc.examples.helloworld.HelloRequest getDefaultInstanceForType() {      return generated.io.grpc.examples.helloworld.HelloRequest.getDefaultInstance();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.io.grpc.examples.helloworld.HelloRequest build() {      generated.io.grpc.examples.helloworld.HelloRequest result = buildPartial();      if (!result.isInitialized()) {        throw newUninitializedMessageException(result);      }      return result;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "buildPartial", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.io.grpc.examples.helloworld.HelloRequest buildPartial() {      generated.io.grpc.examples.helloworld.HelloRequest result = new generated.io.grpc.examples.helloworld.HelloRequest(this);      result.name_ = name_;      onBuilt();      return result;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clone() {      return (Builder) super.clone();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setField", "params": ["com", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setField(        com.google.protobuf.Descriptors.FieldDescriptor field,        Object value) {      return (Builder) super.setField(field, value);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearField", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearField(        com.google.protobuf.Descriptors.FieldDescriptor field) {      return (Builder) super.clearField(field);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearOneof", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearOneof(        com.google.protobuf.Descriptors.OneofDescriptor oneof) {      return (Builder) super.clearOneof(oneof);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setRepeatedField", "params": ["com", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setRepeatedField(        com.google.protobuf.Descriptors.FieldDescriptor field,        int index, Object value) {      return (Builder) super.setRepeatedField(field, index, value);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "addRepeatedField", "params": ["com", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder addRepeatedField(        com.google.protobuf.Descriptors.FieldDescriptor field,        Object value) {      return (Builder) super.addRepeatedField(field, value);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeFrom", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder mergeFrom(com.google.protobuf.Message other) {      if (other instanceof generated.io.grpc.examples.helloworld.HelloRequest) {        return mergeFrom((generated.io.grpc.examples.helloworld.HelloRequest)other);      } else {        super.mergeFrom(other);        return this;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeFrom", "params": ["generated"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder mergeFrom(generated.io.grpc.examples.helloworld.HelloRequest other) {      if (other == generated.io.grpc.examples.helloworld.HelloRequest.getDefaultInstance()) return this;      if (!other.getName().isEmpty()) {        name_ = other.name_;        onChanged();      }      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "    public final boolean isInitialized() {      return true;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeFrom", "params": ["com", "com"], "throws": ["java.io.IOException"], "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder mergeFrom(        com.google.protobuf.CodedInputStream input,        com.google.protobuf.ExtensionRegistryLite extensionRegistry)        throws java.io.IOException {      generated.io.grpc.examples.helloworld.HelloRequest parsedMessage = null;      try {        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);      } catch (com.google.protobuf.InvalidProtocolBufferException e) {        parsedMessage = (generated.io.grpc.examples.helloworld.HelloRequest) e.getUnfinishedMessage();        throw e.unwrapIOException();      } finally {        if (parsedMessage != null) {          mergeFrom(parsedMessage);        }      }      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "    public java.lang.String getName() {      java.lang.Object ref = name_;      if (!(ref instanceof java.lang.String)) {        com.google.protobuf.ByteString bs =            (com.google.protobuf.ByteString) ref;        java.lang.String s = bs.toStringUtf8();        name_ = s;        return s;      } else {        return (java.lang.String) ref;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getNameBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.ByteString        getNameBytes() {      java.lang.Object ref = name_;      if (ref instanceof String) {        com.google.protobuf.ByteString b =             com.google.protobuf.ByteString.copyFromUtf8(                (java.lang.String) ref);        name_ = b;        return b;      } else {        return (com.google.protobuf.ByteString) ref;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setName", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setName(        java.lang.String value) {      if (value == null) {    throw new NullPointerException();  }        name_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearName() {            name_ = getDefaultInstance().getName();      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setNameBytes", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setNameBytes(        com.google.protobuf.ByteString value) {      if (value == null) {    throw new NullPointerException();  }  checkByteStringIsUtf8(value);            name_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setUnknownFields", "params": ["com"], "throws": null, "modifiers": ["public", "final"], "return_type": "Builder", "snippet": "    public final Builder setUnknownFields(        final com.google.protobuf.UnknownFieldSet unknownFields) {      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeUnknownFields", "params": ["com"], "throws": null, "modifiers": ["public", "final"], "return_type": "Builder", "snippet": "    public final Builder mergeUnknownFields(        final com.google.protobuf.UnknownFieldSet unknownFields) {      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloRequest.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater,                             ViewGroup container, Bundle savedInstanceState) {        slideshowViewModel =                ViewModelProviders.of(this).get(SlideshowViewModel.class);        View root = inflater.inflate(R.layout.fragment_slideshow, container, false);        final TextView textView = root.findViewById(R.id.text_slideshow);        slideshowViewModel.getText().observe(getViewLifecycleOwner(), new Observer<String>() {            @Override            public void onChanged(@Nullable String s) {                textView.setText(s);            }        });        return root;    }", "url": "https://raw.githubusercontent.com/dahilu/BeautyOverview/master/app/src/main/java/com/example/beautyoverview/ui/slideshow/SlideshowFragment.java", "stars": "1", "class": {"name": "SlideshowFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "valueChanged", "params": ["ListSelectionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void valueChanged(ListSelectionEvent e) {        String path= ProjectViewer.mechString+\"\\\\\"+ GUI.pvv4.elementAt(GUI.pvl4.getSelectedIndex()).toString();        File file=new File(path);        StringBuilder result = new StringBuilder();        BufferedReader bf= null;        System.out.println(path);        try {            bf = new BufferedReader(new FileReader(file));            String s;            BufferedReader bf1=new BufferedReader(new FileReader(file));            String s1;            while((s1 = bf1.readLine())!=null){                result.append(System.lineSeparator()+s1);            }            bf.close();            GUI.jt1.setText(result.toString());        } catch (IOException ex) {            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/4156/MindustryModMaker/master/src/Listener/MechProjectListener.java", "stars": "2", "class": {"name": "MechProjectListener", "extends": null, "implements": ["ListSelectionListener"], "modifiers": ["public"]}}, {"method_name": "setInstance", "params": ["AbstractReflection"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "void", "snippet": "\tpublic synchronized static void setInstance (AbstractReflection abstractReflection) {\t\tinstance = abstractReflection;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AbstractReflection.java", "stars": "13", "class": {"name": "AbstractReflection", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "AbstractReflection", "snippet": "\tpublic synchronized static AbstractReflection getInstance () {\t\treturn instance;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AbstractReflection.java", "stars": "13", "class": {"name": "AbstractReflection", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getField", "params": ["Object", "String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Object", "snippet": "\tpublic abstract Object getField (Object obj, String name);\t/** Returns an opaque handle to the method with the given name best matching the signature implied by the given arguments, or\t * null if the method could not be found. If obj is an instance of Class, the matching static method is returned. If the name\t * is null and the object is a {@link FunctionalInterface}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AbstractReflection.java", "stars": "13", "class": {"name": "AbstractReflection", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getMethod", "params": ["Object", "String", "Object"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Object", "snippet": "\tpublic abstract Object getMethod (Object obj, String name, Object... arguments);\t\tpublic abstract Object getExtensionMethod (Object obj, String name,Object ... arguments);\t\tpublic abstract void registerExtensionClass(Class<?> target,Class<?> clazz);\t/** Returns the value of the field from the object. The field must have been previously retrieved via\t * {@link #getField(Object, String)}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AbstractReflection.java", "stars": "13", "class": {"name": "AbstractReflection", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getExtensionMethod", "params": ["Object", "String", "Object"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Object", "snippet": "\tpublic abstract Object getExtensionMethod (Object obj, String name,Object ... arguments);\t\tpublic abstract void registerExtensionClass(Class<?> target,Class<?> clazz);\t/** Returns the value of the field from the object. The field must have been previously retrieved via\t * {@link #getField(Object, String)}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AbstractReflection.java", "stars": "13", "class": {"name": "AbstractReflection", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "registerExtensionClass", "params": ["Class<?>", "Class<?>"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "\tpublic abstract void registerExtensionClass(Class<?> target,Class<?> clazz);\t/** Returns the value of the field from the object. The field must have been previously retrieved via\t * {@link #getField(Object, String)}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AbstractReflection.java", "stars": "13", "class": {"name": "AbstractReflection", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getFieldValue", "params": ["Object", "Object"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Object", "snippet": "\tpublic abstract Object getFieldValue (Object obj, Object field);\t/** Calls the method on the object with the given arguments. The method must have been previously retrieved via\t * {@link #getMethod(Object, String, Object...)}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AbstractReflection.java", "stars": "13", "class": {"name": "AbstractReflection", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "callMethod", "params": ["Object", "Object", "Object"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Object", "snippet": "\tpublic abstract Object callMethod (Object obj, Object method, Object... arguments);}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AbstractReflection.java", "stars": "13", "class": {"name": "AbstractReflection", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "send", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void send(String data) throws IOException {        DatagramPacket dp = new DatagramPacket(data.getBytes(), data.length(), multicastGroup);        datagramSocket.send(dp);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPClient.java", "stars": "4", "class": {"name": "SSDPClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "responseReceive", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "DatagramPacket", "snippet": "    public DatagramPacket responseReceive() throws IOException {        byte[] buf = new byte[1024];        DatagramPacket dp = new DatagramPacket(buf, buf.length);        datagramSocket.receive(dp);        return dp;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPClient.java", "stars": "4", "class": {"name": "SSDPClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "multicastReceive", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "DatagramPacket", "snippet": "    public DatagramPacket multicastReceive() throws IOException {        byte[] buf = new byte[1024];        DatagramPacket dp = new DatagramPacket(buf, buf.length);        multicastSocket.receive(dp);        return dp;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPClient.java", "stars": "4", "class": {"name": "SSDPClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return datagramSocket != null && multicastSocket != null && datagramSocket.isConnected() && multicastSocket.isConnected();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPClient.java", "stars": "4", "class": {"name": "SSDPClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() {        if (multicastSocket != null) {            try {                multicastSocket.leaveGroup(multicastGroup, networkInterface);            } catch (IOException e) {                e.printStackTrace();            }            multicastSocket.close();        }        if (datagramSocket != null) {            datagramSocket.disconnect();            datagramSocket.close();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPClient.java", "stars": "4", "class": {"name": "SSDPClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimeout", "params": ["int"], "throws": ["SocketException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimeout(int timeout) throws SocketException {        this.timeout = timeout;        datagramSocket.setSoTimeout(this.timeout);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPClient.java", "stars": "4", "class": {"name": "SSDPClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSSDPSearchMessage", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getSSDPSearchMessage(String ST) {        StringBuilder sb = new StringBuilder();        sb.append(MSEARCH + NEWLINE);        sb.append(\"HOST: \" + MULTICAST_ADDRESS + \":\" + PORT + NEWLINE);        sb.append(\"MAN: \\\"ssdp:discover\\\"\" + NEWLINE);        sb.append(\"ST: \").append(ST).append(NEWLINE);        sb.append(\"MX: \").append(MX).append(NEWLINE);        if (ST.contains(\"udap\")) {            sb.append(\"USER-AGENT: UDAP/2.0\" + NEWLINE);        }        sb.append(NEWLINE);        return sb.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPClient.java", "stars": "4", "class": {"name": "SSDPClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "BackupedProjectsAdapter", "snippet": "    public BackupedProjectsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        View view = inflater.inflate(R.layout.projects_manager_item_project, parent, false);        return new BackupedProjectsAdapter.ViewHolder(view);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/BackupedProjectsAdapter.java", "stars": "4", "class": {"name": "BackupedProjectsAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["BackupedProjectsAdapter", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NotNull BackupedProjectsAdapter.ViewHolder holder, int position) {        if (data.size() != 0) {            int lastPos = data.get(position).size() - 1;            holder.title.setText(data.get(position).get(lastPos).getProject().getProjectName());            holder.subtitle.setText(data.get(position).get(lastPos).getProject().getProjectPackage().concat(\" (\")                    .concat(activity.getString(R.string.title_backups_count).concat(\": \").concat(String.valueOf(data.get(position).size())).concat(\")\")));            GlideUtil.set(new File(data.get(position).get(lastPos).getProject().getIconPath()), holder.icon, activity);            holder.itemView.setOnClickListener(v -> {                // init view for dialog (recyclerView)                RecyclerView recyclerView = new RecyclerView(activity);                recyclerView.setLayoutManager(new LinearLayoutManager(activity));                recyclerView.setAdapter(new BackupsProjectAdapter(data.get(position), activity));                recyclerView.setNestedScrollingEnabled(false);                new AppBottomDialog.Builder(activity)                        .setTitle(R.string.title_choose_project_backup_version)                        .setTheme(AppBottomDialogUtil.getThemeSettings(activity))                        .setContentView(recyclerView)                        .show();            });        } else {            holder.title.setText(\"No info\");            holder.subtitle.setText(\"No info\");            holder.icon.setImageDrawable(activity.getDrawable(R.mipmap.ic_launcher));        }    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/BackupedProjectsAdapter.java", "stars": "4", "class": {"name": "BackupedProjectsAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return data.size();    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/BackupedProjectsAdapter.java", "stars": "4", "class": {"name": "BackupedProjectsAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onItemLongClick", "params": ["android", "android", "int", "long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onItemLongClick (android.widget.AdapterView p0, android.view.View p1, int p2, long p3)\t{\t\treturn n_onItemLongClick (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onItemLongClick", "params": ["android", "android", "int", "long"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onItemLongClick (android.widget.AdapterView p0, android.view.View p1, int p2, long p3);\tpublic boolean onActionItemClicked (android.view.ActionMode p0, android.view.MenuItem p1)\t{\t\treturn n_onActionItemClicked (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onActionItemClicked", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onActionItemClicked (android.view.ActionMode p0, android.view.MenuItem p1)\t{\t\treturn n_onActionItemClicked (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onActionItemClicked", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onActionItemClicked (android.view.ActionMode p0, android.view.MenuItem p1);\tpublic boolean onCreateActionMode (android.view.ActionMode p0, android.view.Menu p1)\t{\t\treturn n_onCreateActionMode (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onCreateActionMode", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onCreateActionMode (android.view.ActionMode p0, android.view.Menu p1)\t{\t\treturn n_onCreateActionMode (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onCreateActionMode", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onCreateActionMode (android.view.ActionMode p0, android.view.Menu p1);\tpublic void onDestroyActionMode (android.view.ActionMode p0)\t{\t\tn_onDestroyActionMode (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDestroyActionMode", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroyActionMode (android.view.ActionMode p0)\t{\t\tn_onDestroyActionMode (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onDestroyActionMode", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroyActionMode (android.view.ActionMode p0);\tpublic boolean onPrepareActionMode (android.view.ActionMode p0, android.view.Menu p1)\t{\t\treturn n_onPrepareActionMode (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPrepareActionMode", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onPrepareActionMode (android.view.ActionMode p0, android.view.Menu p1)\t{\t\treturn n_onPrepareActionMode (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onPrepareActionMode", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onPrepareActionMode (android.view.ActionMode p0, android.view.Menu p1);\tpublic void onItemClick (android.widget.AdapterView p0, android.view.View p1, int p2, long p3)\t{\t\tn_onItemClick (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onItemClick", "params": ["android", "android", "int", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onItemClick (android.widget.AdapterView p0, android.view.View p1, int p2, long p3)\t{\t\tn_onItemClick (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onItemClick", "params": ["android", "android", "int", "long"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onItemClick (android.widget.AdapterView p0, android.view.View p1, int p2, long p3);\tpublic boolean onActionItemClicked (android.support.v7.view.ActionMode p0, android.view.MenuItem p1)\t{\t\treturn n_onActionItemClicked (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onActionItemClicked", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onActionItemClicked (android.support.v7.view.ActionMode p0, android.view.MenuItem p1)\t{\t\treturn n_onActionItemClicked (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onActionItemClicked", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onActionItemClicked (android.support.v7.view.ActionMode p0, android.view.MenuItem p1);\tpublic boolean onCreateActionMode (android.support.v7.view.ActionMode p0, android.view.Menu p1)\t{\t\treturn n_onCreateActionMode (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onCreateActionMode", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onCreateActionMode (android.support.v7.view.ActionMode p0, android.view.Menu p1)\t{\t\treturn n_onCreateActionMode (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onCreateActionMode", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onCreateActionMode (android.support.v7.view.ActionMode p0, android.view.Menu p1);\tpublic void onDestroyActionMode (android.support.v7.view.ActionMode p0)\t{\t\tn_onDestroyActionMode (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDestroyActionMode", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroyActionMode (android.support.v7.view.ActionMode p0)\t{\t\tn_onDestroyActionMode (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onDestroyActionMode", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroyActionMode (android.support.v7.view.ActionMode p0);\tpublic boolean onPrepareActionMode (android.support.v7.view.ActionMode p0, android.view.Menu p1)\t{\t\treturn n_onPrepareActionMode (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPrepareActionMode", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onPrepareActionMode (android.support.v7.view.ActionMode p0, android.view.Menu p1)\t{\t\treturn n_onPrepareActionMode (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onPrepareActionMode", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onPrepareActionMode (android.support.v7.view.ActionMode p0, android.view.Menu p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellAdapter.java", "stars": "2", "class": {"name": "CellAdapter", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "startWindowFullscreen", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer startWindowFullscreen(Context context, boolean actionBar, boolean statusBar) {        return super.startWindowFullscreen(context, actionBar, statusBar);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecVideo.java", "stars": "2", "class": {"name": "MediaCodecVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSurfaceAvailable", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceAvailable(Surface surface) {        super.onSurfaceAvailable(surface);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecVideo.java", "stars": "2", "class": {"name": "MediaCodecVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSurfaceDestroyed", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onSurfaceDestroyed(Surface surface) {        //\u6e05\u7a7a\u91ca\u653e        //setDisplay(null);        //\u540c\u4e00\u6d88\u606f\u961f\u5217\u4e2d\u53bbrelease        //releaseSurface(surface);        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecVideo.java", "stars": "2", "class": {"name": "MediaCodecVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "addTextureView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void addTextureView() {        mTextureView = new MediaCodecRenderView();        mTextureView.addView(getContext(), mTextureViewContainer, mRotate, this, this, mEffectFilter, mMatrixGL, mRenderer, mMode);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecVideo.java", "stars": "2", "class": {"name": "MediaCodecVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "initComponents", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initComponents() {        jScrollPane1 = new javax.swing.JScrollPane();        receiveTextArea = new javax.swing.JTextArea();        jScrollPane2 = new javax.swing.JScrollPane();        sendTextArea = new javax.swing.JTextArea();        sendButton = new javax.swing.JButton();        usernameTextArea = new javax.swing.JTextField();        jLabel1 = new javax.swing.JLabel();        enableServer = new javax.swing.JRadioButton();        jSeparator1 = new javax.swing.JSeparator();        jSeparator2 = new javax.swing.JSeparator();        serverIpAddress = new javax.swing.JTextField();        jLabel2 = new javax.swing.JLabel();        connectButton = new javax.swing.JButton();        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);        receiveTextArea.setColumns(20);        receiveTextArea.setRows(5);        jScrollPane1.setViewportView(receiveTextArea);        sendTextArea.setColumns(20);        sendTextArea.setRows(5);        jScrollPane2.setViewportView(sendTextArea);        sendButton.setText(\"Send\");        sendButton.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                sendButtonActionPerformed(evt);            }        });        jLabel1.setText(\"                    Username:\");        enableServer.setText(\"Enable Server\");        enableServer.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                enableServerActionPerformed(evt);            }        });        serverIpAddress.setText(\"192.168.0.100\");        jLabel2.setText(\"Server IP Address:\");        connectButton.setText(\"Connect\");        connectButton.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                connectButtonActionPerformed(evt);            }        });        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());        getContentPane().setLayout(layout);        layout.setHorizontalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(layout.createSequentialGroup()                .addContainerGap()                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)                    .addComponent(jScrollPane1))                .addGap(18, 18, Short.MAX_VALUE)                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)                    .addComponent(usernameTextArea)                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)                    .addComponent(enableServer)                    .addComponent(jSeparator1)                    .addComponent(jSeparator2)                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                    .addComponent(serverIpAddress, javax.swing.GroupLayout.Alignment.TRAILING)                    .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                .addContainerGap())            .addGroup(layout.createSequentialGroup()                .addGap(208, 208, 208)                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)                .addContainerGap(431, Short.MAX_VALUE))        );        layout.setVerticalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(layout.createSequentialGroup()                .addContainerGap()                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)                    .addGroup(layout.createSequentialGroup()                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)                        .addComponent(usernameTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)                        .addGap(12, 12, 12)                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                        .addComponent(enableServer)                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                        .addComponent(jLabel2)                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                        .addComponent(serverIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)                        .addGap(18, 18, 18)                        .addComponent(connectButton)                        .addGap(132, 132, 132))                    .addGroup(layout.createSequentialGroup()                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)                .addContainerGap())        );        pack();    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "enableServerActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void enableServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableServerActionPerformed        // TODO add your handling code here:        if(enableServer.isSelected()) //verify if the enableServer radio button is selected. Use isSelected method to find out that the button is selected or not. The fuction returns true if the radio button is selected.        {            //if the radio button is selected -> enter in the server mode            receiveTextArea.setText(\"Waiting for remote user...\"); //inform user that you are in the server mode and you are waiting another person to connect            serverIpAddress.setEditable(false); //make serverIpAddress text area non editable (if you are in the server mode you must not be able to enter the server ip address)            connectButton.setEnabled(false); //disable connectButton (if you are in the server mode you must not be able to connect to a server, the application runs as a server)            this.isServer = true;  //set isServer to true, this global variable will be used in the run method to start the server mode.        }        else //if you are in the client mode or if you want to connect to the server        {            receiveTextArea.setText(\"\");  //clear any message from the receiveTextArea            serverIpAddress.setEditable(true); //enable client mode, make serverIpAddress text area editable in order to enter the server ip address            connectButton.setEnabled(true); //enable the connectButton in order to connect to the server            this.isServer = false; //set isServer to false, this global variable will be used in the run method to start the server mode or the client mode        }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "connectButtonActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed        // TODO add your handling code here:        connectToServer = true; //set the connectToServer to true in order to enter in initializaClientMode    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "sendButtonActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed        // TODO add your handling code here:        String message = sendTextArea.getText(); //get the written message        message = localUsername + \": \" + message; //append the username         try        {            out.write(message); // write the message            out.newLine(); //write a new line, on the other side the reading is done using readLine method, so you must add a new line.             out.flush(); //flush the stream            sendTextArea.setText(\"\"); //clear sendTextArea after the message was sent            String allText = receiveTextArea.getText();             allText = allText + \"\\n\" + message;            receiveTextArea.setText(allText); //add the message to your receiveTextArea, you want to see what have you sent.        }        catch(Exception e)        {            disconnect(); //if the message cannot be send, execute disconnect        }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run()    {        while(!isClosed) //run application until the user closes it.        {            sleep(100); //add a small timeout to free up the processor to do other things.            if(isServer) //if server mode (variable is set in the enableServerActionPerformed method, when the enableServer radio button is selected)            {                initializeServerMode(); //initialize the server mode            }            if(connectToServer) //if the connect button was pressed, then the application is trying to connect to the server            {                System.out.println(\"1. connect to  server\");                initializeClientMode();                 System.out.println(\"connect to  server\");//initialize the client mode                //readIncomingMessages(); //read all incoming messages            }        }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "initializeServerMode", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initializeServerMode()    {        try        {            System.out.println(\"in server\");            server = new ServerSocket(portNumber); //create the scoket object            client = server.accept(); //wait for a connection                        System.out.println(\"connected\");            out = new BufferedWriter(new OutputStreamWriter(client.getOutputStream())); //create the outputstream            in = new BufferedReader(new InputStreamReader(client.getInputStream())); //create the inputstream                 //the first thing the application will do after the client is connected is to exchange the user names.            //1. server will wait for the client username            remoteUsername = in.readLine(); // read the remote username and store it in the remoteUsername global variable                   //2. server will send his username;            localUsername = usernameTextArea.getText(); //get the username from the text area            localUsername = localUsername.trim(); //remove white spaces from the username String            if(localUsername.length() == 0) //if no username was entered in the text area, create a default username            {                localUsername = \"Server\"; //the default username is \"Server\"            }            out.write(localUsername); // send the username            out.newLine(); // add a new line (in the file transfer application we have used PrintWriter.println() method which enters automatically a new line character)                           // on the client side and also for the server side we have used readLine() method to read the username String, so the method is waiting for a line (text + new line character))            out.flush();            //after exchanging the names            //1. Inform user that the romote user is connected and print its name in the receive text area;            receiveTextArea.setText(\"User: \" + remoteUsername + \" is connected! You can start the chat conversation\");            //2. Enable send button in order to send a new messages            sendButton.setEnabled(true);            //3. deactivate enable server radio button. User should not be able to change the connection mode after the connection was established            enableServer.setEnabled(false);                        readIncomingMessages(); //read all incoming messages        }        catch(BindException e1)        {            receiveTextArea.setText(\"Port \" + portNumber + \" is used by another application!\");        }        catch(Exception e)        {            System.out.println(\"server error!\" + e.toString());            //System.exit(1);            disconnect();        }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "initializeClientMode", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initializeClientMode()    {        try        {            System.out.println(\"client tries connect to server\");            //String ip = serverIpAddress.getText(); //get the server ip address from the serverIpAddress text area            client = new Socket(\"127.0.0.1\", portNumber); //try to connect to the server            System.out.println(\"client connected to server\");            out = new BufferedWriter(new OutputStreamWriter(client.getOutputStream())); //create the outputstream            in = new BufferedReader(new InputStreamReader(client.getInputStream())); //create the inputstream                 //the first thing the application will do after the client is connected is to exchange the user names.            //1. sent the local username to the server            localUsername = usernameTextArea.getText(); //get the username from the text area            if(localUsername.length() == 0) //if no username was entered in the text area, create a default username            {                localUsername = \"Client\"; //the default username is \"Server\"            }            localUsername = localUsername.trim(); //remove white spaces from the username String            out.write(localUsername); //send the username            out.newLine(); //add a new line            out.flush(); //flush                  //2. client is waiting to receive the server username            remoteUsername = in.readLine(); // read the remote username and store it in the remoteUsername global variable                                          //after exchanging the names:                        //1. Inform user that the romote user is connected and print it's name in the receive text area;            receiveTextArea.setText(\"User: \" + remoteUsername + \" is connected! You can start the chat conversation\");            //2. Enable send button in order to send a new messages            sendButton.setEnabled(true);            //3. deactivate enableServer radio button, User should not be able to change the connection mode after the connection was established.            // you have to close the connection in order to change the mode.            enableServer.setEnabled(false);            //4. deactivate the connect button            connectButton.setEnabled(false);                        readIncomingMessages(); //read all incoming messages        }        catch(UnknownHostException e2)        {            receiveTextArea.setText(\"the IP address of the host could not be determined!\");        }        catch(ConnectException e1)        {            receiveTextArea.setText(\"Server is unreachable!\");        }        catch(Exception e)        {            //if the ip address is not correct please             System.out.println(\"client error!\" + e.toString());            disconnect();        }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "readIncomingMessages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readIncomingMessages()    {        try        {            while(true)            {                String message = in.readLine(); //read a message from the connection                String allText = receiveTextArea.getText(); //get all the text                 allText = allText + \"\\n\" + message; //append the new message                receiveTextArea.setText(allText); //add all text            }        }        catch(Exception e)        {            System.out.println(e.toString() + \"in readIncomingMessages\");            disconnect(); //if an error occurs, close the connection        }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect()    {        try        {            String allText = receiveTextArea.getText(); //get all the text             allText = allText + \"\\n\" + this.remoteUsername + \" has been disconected! \\nThe connection is closed.\"; //info message            receiveTextArea.setText(allText);            if(isServer) //if server mode (variable is set in the enableServerActionPerformed server method, when the enableServer radio button is selected)            {                /*                    verify the inputstream is not null. There are some cases when InputStream could be null.                    Eg: In the server mode if the application is closed when it is waiting for a connection, the accept method will not                    return a socket object and the inputstream could not be created because we don't have a socket object.]                    In this case we have a null inputestream object and if we try to close a null inputstream an error is thrown.                */                if(in != null)                 {                    in.close(); //close the inputstream                }                if(out != null)                {                    out.close(); //close the outputstream                }                if(client != null)                 {                    client.close();                }                if(server != null)                {                    server.close();                }                enableServer.setEnabled(true); // enable connection mode button                enableServer.setSelected(false);                serverIpAddress.setEditable(true);                 connectButton.setEnabled(true);                 sendButton.setEnabled(false); // disable send button                isServer = false; //no more in the server mode            }            if(connectToServer)            {                if(in != null)                {                    in.close(); //close the inputstream                }                if(out != null)                {                    out.close(); //close the outputstream                }                if(client != null)                {                    client.close(); //close the client socket                }                enableServer.setEnabled(true);                enableServer.setSelected(false);                serverIpAddress.setEditable(true);                 connectButton.setEnabled(true);                 sendButton.setEnabled(false);                connectToServer = false;  //no more in the client mode            }        }        catch(Exception e)        {            System.out.println(\"in disconnect\" + e.toString());        }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "sleep", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sleep(int milliseconds)    {        try        {            Thread.sleep(milliseconds);        }        catch(Exception e)        {            System.exit(1);        }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/MainFrame.java", "stars": "1", "class": {"name": "MainFrame", "extends": "javax", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        user = new User();        user.setLogin(DEFAULT_LOGIN);        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(\"johndoe@localhost\");        user.setFirstName(\"john\");        user.setLastName(\"doe\");        user.setLangKey(\"en\");        userDto = new UserDTO(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/UserMapperIT.java", "stars": "2", "class": {"name": "UserMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "usersToUserDTOsShouldMapOnlyNonNullUsers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void usersToUserDTOsShouldMapOnlyNonNullUsers() {        List<User> users = new ArrayList<>();        users.add(user);        users.add(null);        List<UserDTO> userDTOS = userMapper.usersToUserDTOs(users);        assertThat(userDTOS).isNotEmpty();        assertThat(userDTOS).size().isEqualTo(1);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/UserMapperIT.java", "stars": "2", "class": {"name": "UserMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "userDTOsToUsersShouldMapOnlyNonNullUsers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void userDTOsToUsersShouldMapOnlyNonNullUsers() {        List<UserDTO> usersDto = new ArrayList<>();        usersDto.add(userDto);        usersDto.add(null);        List<User> users = userMapper.userDTOsToUsers(usersDto);        assertThat(users).isNotEmpty();        assertThat(users).size().isEqualTo(1);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/UserMapperIT.java", "stars": "2", "class": {"name": "UserMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "userDTOsToUsersWithAuthoritiesStringShouldMapToUsersWithAuthoritiesDomain", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void userDTOsToUsersWithAuthoritiesStringShouldMapToUsersWithAuthoritiesDomain() {        Set<String> authoritiesAsString = new HashSet<>();        authoritiesAsString.add(\"ADMIN\");        userDto.setAuthorities(authoritiesAsString);        List<UserDTO> usersDto = new ArrayList<>();        usersDto.add(userDto);        List<User> users = userMapper.userDTOsToUsers(usersDto);        assertThat(users).isNotEmpty();        assertThat(users).size().isEqualTo(1);        assertThat(users.get(0).getAuthorities()).isNotNull();        assertThat(users.get(0).getAuthorities()).isNotEmpty();        assertThat(users.get(0).getAuthorities().iterator().next().getName()).isEqualTo(\"ADMIN\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/UserMapperIT.java", "stars": "2", "class": {"name": "UserMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "userDTOsToUsersMapWithNullAuthoritiesStringShouldReturnUserWithEmptyAuthorities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void userDTOsToUsersMapWithNullAuthoritiesStringShouldReturnUserWithEmptyAuthorities() {        userDto.setAuthorities(null);        List<UserDTO> usersDto = new ArrayList<>();        usersDto.add(userDto);        List<User> users = userMapper.userDTOsToUsers(usersDto);        assertThat(users).isNotEmpty();        assertThat(users).size().isEqualTo(1);        assertThat(users.get(0).getAuthorities()).isNotNull();        assertThat(users.get(0).getAuthorities()).isEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/UserMapperIT.java", "stars": "2", "class": {"name": "UserMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "userDTOToUserMapWithAuthoritiesStringShouldReturnUserWithAuthorities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void userDTOToUserMapWithAuthoritiesStringShouldReturnUserWithAuthorities() {        Set<String> authoritiesAsString = new HashSet<>();        authoritiesAsString.add(\"ADMIN\");        userDto.setAuthorities(authoritiesAsString);        User user = userMapper.userDTOToUser(userDto);        assertThat(user).isNotNull();        assertThat(user.getAuthorities()).isNotNull();        assertThat(user.getAuthorities()).isNotEmpty();        assertThat(user.getAuthorities().iterator().next().getName()).isEqualTo(\"ADMIN\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/UserMapperIT.java", "stars": "2", "class": {"name": "UserMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "userDTOToUserMapWithNullAuthoritiesStringShouldReturnUserWithEmptyAuthorities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void userDTOToUserMapWithNullAuthoritiesStringShouldReturnUserWithEmptyAuthorities() {        userDto.setAuthorities(null);        User user = userMapper.userDTOToUser(userDto);        assertThat(user).isNotNull();        assertThat(user.getAuthorities()).isNotNull();        assertThat(user.getAuthorities()).isEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/UserMapperIT.java", "stars": "2", "class": {"name": "UserMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "userDTOToUserMapWithNullUserShouldReturnNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void userDTOToUserMapWithNullUserShouldReturnNull() {        assertThat(userMapper.userDTOToUser(null)).isNull();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/UserMapperIT.java", "stars": "2", "class": {"name": "UserMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUserFromId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUserFromId() {        assertThat(userMapper.userFromId(DEFAULT_ID).getId()).isEqualTo(DEFAULT_ID);        assertThat(userMapper.userFromId(null)).isNull();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/UserMapperIT.java", "stars": "2", "class": {"name": "UserMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJdbcConnectionString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toJdbcConnectionString() {    final String prjId = checkNotNull(this.projectId, \"Missing project ID.\");    final String emailAddr = checkNotNull(this.email, \"Missing service account email address.\");    checkNotNull(this.jsonKey, \"Missing service account JSON key\");    String keyPath = null;    try {      keyPath = getOauthPrivateKeyPath();    } catch (final IOException e) {      // This will cause an error in auth, no need to do anything here...      logger.warn(\"Unable to write BigQuery authentication key\", e);    }    // Setup the parameters required to connect to BigQuery    final Map<String, String> attributes = new HashMap<>();    attributes.put(\"ProjectId\", prjId);    attributes.put(\"OAuthServiceAcctEmail\", emailAddr);    attributes.put(\"OAuthPvtKeyPath\", keyPath);    // Service-account based auth    attributes.put(\"OAuthType\", \"0\");    // Allow result sets larger than 128MB    attributes.put(\"AllowLargeResults\", \"1\");    // Use modern BQ SQL dialect    attributes.put(\"QueryDialect\", \"SQL\");    // Check if we have a custom KMS key, use it if provided    if (this.customerKmsKeyName != null && !this.customerKmsKeyName.isEmpty()) {      attributes.put(\"KMSKeyName\", this.customerKmsKeyName);    }    // Compile the final connection string    final String connectAttribs = attributes.entrySet().stream().map(e -> e.getKey()+\"=\"+e.getValue()).collect(joining(\";\"));    return String.format(\"jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;%s;\", connectAttribs);  }", "url": "https://raw.githubusercontent.com/panoramichq/dremio-bigquery-connector/master/src/main/java/com/dremio/exec/store/jdbc/conf/BigQueryConf.java", "stars": "2", "class": {"name": "BigQueryConf", "extends": "AbstractArpConf", "implements": null, "modifiers": ["public"]}}, {"method_name": "toPluginConfig", "params": ["SabotContext"], "throws": null, "modifiers": ["public"], "return_type": "Config", "snippet": "  public Config toPluginConfig(final SabotContext context) {    logger.info(\"Connecting to BigQuery\");    return JdbcStoragePlugin.Config.newBuilder()        .withDialect(getDialect())        .withFetchSize(fetchSize)        .withDatasourceFactory(this::newDataSource)        .clearHiddenSchemas()        .addHiddenSchema(\"SYSTEM\")        .build();  }", "url": "https://raw.githubusercontent.com/panoramichq/dremio-bigquery-connector/master/src/main/java/com/dremio/exec/store/jdbc/conf/BigQueryConf.java", "stars": "2", "class": {"name": "BigQueryConf", "extends": "AbstractArpConf", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOauthPrivateKeyPath", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "String", "snippet": "  private String getOauthPrivateKeyPath() throws IOException {    final File temp = File.createTempFile(\"bqk\", \".json\");    temp.deleteOnExit();    final BufferedWriter bw = new BufferedWriter(new FileWriter(temp));    bw.write(this.jsonKey);    bw.close();    return temp.getAbsolutePath();  }", "url": "https://raw.githubusercontent.com/panoramichq/dremio-bigquery-connector/master/src/main/java/com/dremio/exec/store/jdbc/conf/BigQueryConf.java", "stars": "2", "class": {"name": "BigQueryConf", "extends": "AbstractArpConf", "implements": null, "modifiers": ["public"]}}, {"method_name": "newDataSource", "params": [], "throws": null, "modifiers": ["private"], "return_type": "CloseableDataSource", "snippet": "  private CloseableDataSource newDataSource() {    final Properties properties = new Properties();    return DataSources.newGenericConnectionPoolDataSource(DRIVER,        toJdbcConnectionString(), null, null, properties,        DataSources.CommitMode.DRIVER_SPECIFIED_COMMIT_MODE);  }", "url": "https://raw.githubusercontent.com/panoramichq/dremio-bigquery-connector/master/src/main/java/com/dremio/exec/store/jdbc/conf/BigQueryConf.java", "stars": "2", "class": {"name": "BigQueryConf", "extends": "AbstractArpConf", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDialect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArpDialect", "snippet": "  public ArpDialect getDialect() {    return ARP_DIALECT;  }", "url": "https://raw.githubusercontent.com/panoramichq/dremio-bigquery-connector/master/src/main/java/com/dremio/exec/store/jdbc/conf/BigQueryConf.java", "stars": "2", "class": {"name": "BigQueryConf", "extends": "AbstractArpConf", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDialectSingleton", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ArpDialect", "snippet": "  public static ArpDialect getDialectSingleton() {    return ARP_DIALECT;  }", "url": "https://raw.githubusercontent.com/panoramichq/dremio-bigquery-connector/master/src/main/java/com/dremio/exec/store/jdbc/conf/BigQueryConf.java", "stars": "2", "class": {"name": "BigQueryConf", "extends": "AbstractArpConf", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        measureHelper = new MeasureHelper(this, this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        measureHelper.prepareMeasure(widthMeasureSpec, heightMeasureSpec, (int) getRotation());        setMeasuredDimension(measureHelper.getMeasuredWidth(), measureHelper.getMeasuredHeight());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onSurfaceTextureAvailable", "params": ["SurfaceTexture", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceTextureAvailable(SurfaceTexture texture, int width, int height) {        if (mSaveTexture == null) {            mSaveTexture = texture;            mSurface = new Surface(texture);            if (mIGSYSurfaceListener != null) {                mIGSYSurfaceListener.onSurfaceAvailable(mSurface);            }        } else {            setSurfaceTexture(mSaveTexture);            if (mIGSYSurfaceListener != null) {                mIGSYSurfaceListener.onSurfaceAvailable(mSurface);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onSurfaceTextureSizeChanged", "params": ["SurfaceTexture", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceSizeChanged(mSurface, width, height);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onSurfaceTextureDestroyed", "params": ["SurfaceTexture"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {        //\u6e05\u7a7a\u91ca\u653e        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceDestroyed(mSurface);        }        return (mSaveTexture == null);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onSurfaceTextureUpdated", "params": ["SurfaceTexture"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceTextureUpdated(SurfaceTexture surface) {        //\u5982\u679c\u64ad\u653e\u7684\u662f\u6682\u505c\u5168\u5c4f\u4e86        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceUpdated(mSurface);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getIGSYSurfaceListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IGSYSurfaceListener", "snippet": "    public IGSYSurfaceListener getIGSYSurfaceListener() {        return mIGSYSurfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setIGSYSurfaceListener", "params": ["IGSYSurfaceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIGSYSurfaceListener(IGSYSurfaceListener surfaceListener) {        setSurfaceTextureListener(this);        mIGSYSurfaceListener = surfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeH() {        return getHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeW() {        return getWidth();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCover", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCover() {        Bitmap bitmap = Bitmap.createBitmap(                getSizeW(), getSizeH(), Bitmap.Config.RGB_565);        return getBitmap(bitmap);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCoverHigh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCoverHigh() {        Bitmap bitmap = Bitmap.createBitmap(                getSizeW(), getSizeH(), Bitmap.Config.ARGB_8888);        return getBitmap(bitmap);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "taskShotPic", "params": ["GSYVideoShotListener", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void taskShotPic(GSYVideoShotListener gsyVideoShotListener, boolean shotHigh) {        if (shotHigh) {            gsyVideoShotListener.getBitmap(initCoverHigh());        } else {            gsyVideoShotListener.getBitmap(initCover());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "saveFrame", "params": ["File", "boolean", "GSYVideoShotSaveListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveFrame(final File file, final boolean high, final GSYVideoShotSaveListener gsyVideoShotSaveListener) {        GSYVideoShotListener gsyVideoShotListener = new GSYVideoShotListener() {            @Override            public void getBitmap(Bitmap bitmap) {                if (bitmap == null) {                    gsyVideoShotSaveListener.result(false, file);                } else {                    FileUtils.saveBitmap(bitmap, file);                    gsyVideoShotSaveListener.result(true, file);                }            }        };        if (high) {            gsyVideoShotListener.getBitmap(initCoverHigh());        } else {            gsyVideoShotListener.getBitmap(initCover());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getRenderView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getRenderView() {        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderResume() {        Debuger.printfLog(getClass().getSimpleName() + \" not support onRenderResume now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderPause() {        Debuger.printfLog(getClass().getSimpleName() + \" not support onRenderPause now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "releaseRenderAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseRenderAll() {        Debuger.printfLog(getClass().getSimpleName() + \" not support releaseRenderAll now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderMode(int mode) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setRenderMode now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderTransform", "params": ["Matrix"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderTransform(Matrix transform) {        setTransform(transform);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLRenderer", "params": ["GSYVideoGLViewBaseRender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLRenderer(GSYVideoGLViewBaseRender renderer) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setGLRenderer now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLMVPMatrix", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLMVPMatrix(float[] MVPMatrix) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setGLMVPMatrix now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLEffectFilter", "params": ["GSYVideoGLView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLEffectFilter(GSYVideoGLView.ShaderInterface effectFilter) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setGLEffectFilter now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setVideoParamsListener", "params": ["MeasureHelper"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoParamsListener(MeasureHelper.MeasureFormVideoParamsListener listener) {        mVideoParamsListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoWidth() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoWidth();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoHeight() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoHeight();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarNum() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarNum();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarDen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarDen() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarDen();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        mSaveTexture = null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "addTextureView", "params": ["Context", "ViewGroup", "int", "IGSYSurfaceListener", "MeasureHelper"], "throws": null, "modifiers": ["public", "static"], "return_type": "MediaCodecTextureView", "snippet": "    public static MediaCodecTextureView addTextureView(Context context, ViewGroup textureViewContainer, int rotate,                                                       final IGSYSurfaceListener gsySurfaceListener,                                                       final MeasureHelper.MeasureFormVideoParamsListener videoParamsListener) {        if (textureViewContainer.getChildCount() > 0) {            textureViewContainer.removeAllViews();        }        MediaCodecTextureView gsyTextureView = new MediaCodecTextureView(context);        gsyTextureView.setIGSYSurfaceListener(gsySurfaceListener);        gsyTextureView.setVideoParamsListener(videoParamsListener);        gsyTextureView.setRotation(rotate);        GSYRenderView.addToParent(textureViewContainer, gsyTextureView);        return gsyTextureView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecTextureView.java", "stars": "2", "class": {"name": "MediaCodecTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getClient", "params": [], "throws": null, "modifiers": ["private"], "return_type": "OkHttpClient", "snippet": "    private OkHttpClient getClient() {        return client;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/BaseProvider.java", "stars": "4", "class": {"name": "BaseProvider", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "enqueue", "params": ["Request", "Callback"], "throws": null, "modifiers": ["protected"], "return_type": "Call", "snippet": "    protected Call enqueue(Request request, Callback requestCallback) {        request = request.newBuilder()                .tag(getClass())                .build();        Call call = getClient().newCall(request);        if (requestCallback != null) {            call.enqueue(requestCallback);        }        return call;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/BaseProvider.java", "stars": "4", "class": {"name": "BaseProvider", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancel() {        final Dispatcher dispatcher = client.dispatcher();        dispatcher.executorService().execute(new Runnable() {            @Override            public void run() {                if (dispatcher.queuedCallsCount() > 0) {                    for (Call call : dispatcher.queuedCalls()) {                        if (getClass().equals(call.request().tag())) {                            call.cancel();                        }                    }                }                if (dispatcher.runningCallsCount() > 0) {                    for (Call call : dispatcher.runningCalls()) {                        if (getClass().equals(call.request().tag())) {                            call.cancel();                        }                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/BaseProvider.java", "stars": "4", "class": {"name": "BaseProvider", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "buildQuery", "params": ["List<AbstractMap>"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String buildQuery(List<AbstractMap.SimpleEntry<String, String>> valuePairs) {        StringBuilder stringBuilder = new StringBuilder();        try {            for (int i = 0; i < valuePairs.size(); i++) {                AbstractMap.SimpleEntry<String, String> pair = valuePairs.get(i);                stringBuilder.append(URLEncoder.encode(pair.getKey(), \"utf-8\"));                stringBuilder.append(\"=\");                stringBuilder.append(URLEncoder.encode(pair.getValue(), \"utf-8\"));                if (i + 1 != valuePairs.size()) stringBuilder.append(\"&\");            }        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return stringBuilder.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/BaseProvider.java", "stars": "4", "class": {"name": "BaseProvider", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "RecyclerView", "snippet": "    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        View v;        switch (viewType) {            case LOADING:                v = LayoutInflater.from(parent.getContext()).inflate(R.layout.media_griditem_loading, parent, false);                return new MediaGridAdapter.LoadingHolder(v);            case NORMAL:            default:                v = LayoutInflater.from(parent.getContext()).inflate(R.layout.media_griditem, parent, false);                return new MediaGridAdapter.ViewHolder(v);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["RecyclerView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(final RecyclerView.ViewHolder viewHolder, int position) {        @Px int doubleMargin = margin * 2;        @Px int topMargin = (position < columns) ? margin * 2 : margin;        GridLayoutManager.LayoutParams layoutParams = (GridLayoutManager.LayoutParams) viewHolder.itemView.getLayoutParams();        layoutParams.height = itemHeight;        layoutParams.width = itemWidth;        int mod = LocaleUtils.currentLocaleIsRTL() ? 1 : 0;        if (position % columns == mod) {            viewHolder.itemView.setPadding(doubleMargin, topMargin, margin, margin);        } else if (position % columns == columns - 1) {            viewHolder.itemView.setPadding(margin, topMargin, doubleMargin, margin);        } else {            viewHolder.itemView.setPadding(margin, topMargin, margin, margin);        }        viewHolder.itemView.setLayoutParams(layoutParams);        if (getItemViewType(position) == NORMAL) {            final ViewHolder videoViewHolder = (ViewHolder) viewHolder;            final OverviewItem overviewItem = getItem(position);            Media item = overviewItem.media;            videoViewHolder.title.setText(item.title);            videoViewHolder.year.setText(item.year);            if (item.image != null && !item.image.equals(\"\")) {                Picasso.get().cancelRequest(videoViewHolder.coverImage);                Picasso.get().load(item.image)                        .resize(itemWidth, itemHeight)                        .transform(DrawGradient.getInstance())                        .into(videoViewHolder.coverImage);            }        }        // Here you apply the animation when the view is bound        setAnimation(viewHolder.itemView, position);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onViewDetachedFromWindow", "params": ["RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewDetachedFromWindow(final RecyclerView.ViewHolder holder)    {        clearAnimation(holder.itemView);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return mItems.size();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemViewType(int position) {        if (getItem(position).isLoadingItem) {            return LOADING;        }        return NORMAL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "OverviewItem", "snippet": "    public OverviewItem getItem(int position) {        if (position < 0 || mItems.size() <= position) return null;        return mItems.get(position);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnItemClickListener", "params": ["MediaGridAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnItemClickListener(MediaGridAdapter.OnItemClickListener listener) {        mItemClickListener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeLoading", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeLoading() {        if (getItemCount() <= 0) return;        OverviewItem item = mItems.get(getItemCount() - 1);        if (item.isLoadingItem) {            mItems.remove(getItemCount() - 1);            notifyDataSetChanged();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "addLoading", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addLoading() {        OverviewItem item = null;        if (getItemCount() != 0) {            item = mItems.get(getItemCount() - 1);        }        if (getItemCount() == 0 || (item != null && !item.isLoadingItem)) {            mItems.add(new OverviewItem(true));            notifyDataSetChanged();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "isLoading", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLoading() {        return getItemCount() > 0 && getItemViewType(getItemCount() - 1) == LOADING;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setItems", "params": ["ArrayList<Media>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setItems(ArrayList<Media> items) {        // Clear items        mItems.clear();        // Add new items, if available        if (null != items) {            for (Media item : items) {                mItems.add(new OverviewItem(item));            }        }        notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "addItem", "params": ["Media"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addItem(Media media) {        mItems.add(new OverviewItem(media));        notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "clearItems", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearItems() {        mItems.clear();        notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "resetItemAnimationLastPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void resetItemAnimationLastPosition() {        lastPosition = -1;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAnimation", "params": ["View", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setAnimation(View viewToAnimate, int position) {        if (position > lastPosition) {            Animation animation = AnimationUtils.loadAnimation(mContext, R.anim.item_animation_fall_down);            // animation.setDuration((int) (animation.getDuration() + ((position % (columns * columns)) * animation.getDuration() * 0.1f)));            viewToAnimate.startAnimation(animation);            lastPosition = position;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "clearAnimation", "params": ["View"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void clearAnimation(View viewToAnimate) {        if (viewToAnimate.getAnimation() != null) {            if (!viewToAnimate.getAnimation().hasEnded()) {                viewToAnimate.clearAnimation();            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "MediaGridAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Transformation", "snippet": "        public static Transformation getInstance() {            if (instance == null) {                instance = new DrawGradient();            }            return instance;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "DrawGradient", "extends": null, "implements": ["Transformation"], "modifiers": ["private", "static"]}}, {"method_name": "transform", "params": ["Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "        public Bitmap transform(Bitmap src) {            // Code borrowed from https://stackoverflow.com/questions/23657811/how-to-mask-bitmap-with-lineargradient-shader-properly            int w = src.getWidth();            int h = src.getHeight();            Bitmap overlay = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);            Canvas canvas = new Canvas(overlay);            canvas.drawBitmap(src, 0, 0, null);            src.recycle();            Paint paint = new Paint();            float gradientHeight = h / 2f;            LinearGradient shader = new LinearGradient(0, h - gradientHeight, 0, h, 0xFFFFFFFF, 0x00FFFFFF, Shader.TileMode.CLAMP);            paint.setShader(shader);            paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));            canvas.drawRect(0, h - gradientHeight, w, h, paint);            return overlay;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "DrawGradient", "extends": null, "implements": ["Transformation"], "modifiers": ["private", "static"]}}, {"method_name": "key", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String key() {            return \"gradient()\";        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "DrawGradient", "extends": null, "implements": ["Transformation"], "modifiers": ["private", "static"]}}, {"method_name": "getCoverImage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImageView", "snippet": "        public ImageView getCoverImage() {            return coverImage;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View view) {            if (mItemClickListener != null) {                int position = getLayoutPosition();                Media item = getItem(position).media;                mItemClickListener.onItemClick(view, item, position);            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/MediaGridAdapter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return mRootView = inflater.inflate(R.layout.fragment_beamplayer, container, false);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(View v, @Nullable Bundle savedInstanceState) {        super.onViewCreated(v, savedInstanceState);        ButterKnife.bind(this, v);        mToolbar.getBackground().setAlpha(0);        mToolbar.setNavigationIcon(R.drawable.abc_ic_clear_material);        mButterSeekBar.setOnSeekBarChangeListener(mSeekBarChangeListener);        mVolumeBar.setOnSeekBarChangeListener(mVolumeBarChangeListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mActivity = (BeamPlayerActivity) getActivity();        mActivity.setSupportActionBar(mToolbar);        mLoadingDialog = LoadingBeamingDialogFragment.newInstance();        mLoadingDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {            @Override            public void onCancel(DialogInterface dialogInterface) {                closePlayer();            }        });        mLoadingDialog.show(getChildFragmentManager(), \"overlay_fragment\");        mResumePosition = mActivity.getResumePosition();        mStreamInfo = mActivity.getInfo();        int paletteColor = mStreamInfo.getPaletteColor();        if (paletteColor == -1) {            paletteColor = getResources().getColor(R.color.primary);        }        LayerDrawable progressDrawable;        LayerDrawable volumeDrawable;        if (!VersionUtils.isLollipop()) {            progressDrawable = (LayerDrawable) getResources().getDrawable(R.drawable.scrubber_progress_horizontal_bigtrack);            volumeDrawable = (LayerDrawable) getResources().getDrawable(R.drawable.scrubber_progress_horizontal);        } else {            if (mVolumeBar.getProgressDrawable() instanceof StateListDrawable) {                StateListDrawable stateListDrawable = (StateListDrawable) mVolumeBar.getProgressDrawable();                volumeDrawable = (LayerDrawable) stateListDrawable.getCurrent();            } else {                volumeDrawable = (LayerDrawable) mVolumeBar.getProgressDrawable();            }            progressDrawable = (LayerDrawable) getResources().getDrawable(R.drawable.progress_horizontal_material);        }        if(volumeDrawable == null) {            volumeDrawable = (LayerDrawable) progressDrawable.mutate();        }        progressDrawable.findDrawableByLayerId(android.R.id.background).setColorFilter(getResources().getColor(R.color.beamplayer_seekbar_track), PorterDuff.Mode.SRC_IN);        progressDrawable.findDrawableByLayerId(android.R.id.progress).setColorFilter(paletteColor, PorterDuff.Mode.SRC_IN);        progressDrawable.findDrawableByLayerId(android.R.id.secondaryProgress).setColorFilter(paletteColor, PorterDuff.Mode.SRC_IN);        volumeDrawable.findDrawableByLayerId(android.R.id.background).setColorFilter(getResources().getColor(R.color.beamplayer_seekbar_track), PorterDuff.Mode.SRC_IN);        volumeDrawable.findDrawableByLayerId(android.R.id.progress).setColorFilter(paletteColor, PorterDuff.Mode.SRC_IN);        volumeDrawable.findDrawableByLayerId(android.R.id.secondaryProgress).setColorFilter(paletteColor, PorterDuff.Mode.SRC_IN);        mButterSeekBar.setProgressDrawable(progressDrawable);        mButterSeekBar.getThumbDrawable().setColorFilter(paletteColor, PorterDuff.Mode.SRC_IN);        mVolumeBar.setProgressDrawable(volumeDrawable);        mVolumeBar.getThumbDrawable().setColorFilter(paletteColor, PorterDuff.Mode.SRC_IN);        if (!VersionUtils.isJellyBean()) {            mPlayButton.setBackgroundDrawable(PixelUtils.changeDrawableColor(mPlayButton.getContext(), R.drawable.play_button_circle, paletteColor));        } else {            mPlayButton.setBackground(PixelUtils.changeDrawableColor(mPlayButton.getContext(), R.drawable.play_button_circle, paletteColor));        }        if (mStreamInfo.getImageUrl() != null && !mStreamInfo.getImageUrl().equals(\"\")) {            Picasso.get().load(mStreamInfo.getImageUrl())                .into(mCoverImage, new Callback() {                    @Override                    public void onSuccess() {                        AnimUtils.fadeIn(mCoverImage);                    }                    @Override                    public void onError(Exception e) {                    }                });        }        mActivity.getSupportActionBar().setDisplayHomeAsUpEnabled(true);        mActivity.getSupportActionBar().setTitle(\"\");        try {            if (!mBeamManager.getConnectedDevice().hasCapability(MediaControl.Position) || !mBeamManager.getConnectedDevice().hasCapability(MediaControl.Seek) || !mBeamManager.getConnectedDevice().hasCapability(MediaControl.Duration)) {                mHasSeekControl = false;                mButterSeekBar.setVisibility(View.INVISIBLE);            }            if (!mBeamManager.getConnectedDevice().hasCapability(VolumeControl.Volume_Get) || !mBeamManager.getConnectedDevice().hasCapability(VolumeControl.Volume_Set) || !mBeamManager.getConnectedDevice().hasCapability(VolumeControl.Volume_Subscribe)) {                mHasVolumeControl = false;                mPanel.setEnabled(false);                mPanel.setTouchEnabled(false);            }            if (!mBeamManager.getConnectedDevice().hasCapability(MediaControl.Pause)) {                mPlayButton.setEnabled(false);            }            startVideo();        } catch (Exception e) {            Snackbar.make(mRootView, R.string.unknown_error, Snackbar.LENGTH_SHORT).show();            getActivity().finish();        }        Intent intent = new Intent( getActivity(), BeamPlayerNotificationService.class );        intent.setAction(mIsPlaying ? BeamPlayerNotificationService.ACTION_PLAY : BeamPlayerNotificationService.ACTION_PAUSE);        getActivity().startService(intent);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        BeamManager.getInstance(getActivity()).addDeviceListener(mDeviceListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        super.onPause();        BeamManager manager = BeamManager.getInstance(getActivity());        manager.removeDeviceListener(mDeviceListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        super.onDestroy();        Intent intent = new Intent( getActivity(), BeamPlayerNotificationService.class );        getActivity().stopService(intent);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "startVideo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startVideo() {        mBeamManager.playVideo(mStreamInfo, new MediaPlayer.LaunchListener() {            @Override            public void onSuccess(MediaPlayer.MediaLaunchObject object) {                mMediaControl = object.mediaControl;                mMediaControl.subscribePlayState(mPlayStateListener);                mMediaControl.getPlayState(mPlayStateListener);                if (mHasVolumeControl) {                    mVolumeControl = BeamManager.getInstance(getActivity()).getVolumeControl();                    mVolumeControl.subscribeVolume(mVolumeListener);                    mVolumeControl.getVolume(mVolumeListener);                }                if (mHasSeekControl) {                    startUpdating();                    mMediaControl.getDuration(mDurationListener);                }                if(mResumePosition > 0) {                    mMediaControl.seek(mResumePosition, null);                }            }            @Override            public void onError(ServiceCommandError error) {                Timber.e(error.getCause(), error.getMessage());                if (mRetries > 2 && !isDetached()) {                    if (mLoadingDialog.isVisible() && !getActivity().isFinishing()) {                        mLoadingDialog.dismiss();                    }                    OptionDialogFragment.show(mActivity, getChildFragmentManager(), R.string.unknown_error, R.string.beaming_failed, android.R.string.yes, android.R.string.no, new OptionDialogFragment.Listener() {                        @Override                        public void onSelectionPositive() {                            startVideo();                        }                        @Override                        public void onSelectionNegative() {                            closePlayer();                        }                    });                    return;                }                startVideo();                mRetries++;            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "playPauseClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playPauseClick(View v) {        if(mMediaControl == null) return;        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object object) {                mMediaControl.getPlayState(mPlayStateListener);            }            @Override            public void onError(ServiceCommandError error) {                mMediaControl.getPlayState(mPlayStateListener);            }        };        if (mIsPlaying) {            mIsPlaying = false;            mMediaControl.pause(responseListener);        } else {            mIsPlaying = true;            mMediaControl.play(responseListener);        }        mPlayButton.setImageResource(mIsPlaying ? R.drawable.ic_av_pause : R.drawable.ic_av_play);        mPlayButton.setContentDescription(mIsPlaying ? getString(R.string.pause) : getString(R.string.play));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "forwardClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void forwardClick(View v) {        int newProgress = mButterSeekBar.getProgress() + 10000;        if (newProgress > mTotalTimeDuration) newProgress = (int) mTotalTimeDuration;        mMediaControl.seek(newProgress, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "backwardClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void backwardClick(View v) {        int newProgress = mButterSeekBar.getProgress() - 10000;        if (newProgress < 0) newProgress = 0;        mMediaControl.seek(newProgress, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "startUpdating", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startUpdating() {        mTask = mExecutor.scheduleAtFixedRate(mPositionRunnable, 0, REFRESH_INTERVAL_MS, TimeUnit.MILLISECONDS);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "stopUpdating", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void stopUpdating() {        if (mTask != null) {            mTask.cancel(false);        }        if (mExecutor != null) {            for (Runnable r : mExecutor.getQueue()) {                mExecutor.remove(r);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "closePlayer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void closePlayer() {        if (mActivity != null && mActivity.getService() != null) {            mActivity.getService().stopStreaming();        }        mBeamManager.stopVideo();        getActivity().finish();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onStreamStarted", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamStarted(Torrent torrent) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onStreamPrepared", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamPrepared(Torrent torrent) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onStreamError", "params": ["Torrent", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamError(Torrent torrent, Exception e) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onStreamReady", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamReady(Torrent torrent) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onServerReady", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServerReady(String url) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onStreamProgress", "params": ["Torrent", "StreamStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamProgress(Torrent torrent, StreamStatus status) {        mDownloadProgress = mTotalTimeDuration / 100 * status.progress;        mButterSeekBar.setSecondaryProgress(0); // hack to make the secondary progress appear on Android 5.0        mButterSeekBar.setSecondaryProgress(mDownloadProgress.intValue());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "onStreamStopped", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamStopped() {}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/BeamPlayerFragment.java", "stars": "4", "class": {"name": "BeamPlayerFragment", "extends": "Fragment", "implements": ["TorrentServerListener"], "modifiers": ["public"]}}, {"method_name": "getMemory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MemorySystem", "snippet": "    public MemorySystem getMemory() {        return memory;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "setDisplay", "params": ["AbstractDisplay"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDisplay(AbstractDisplay display) {        this.display = display;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "getDisplay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AbstractDisplay", "snippet": "    public AbstractDisplay getDisplay() {        return display;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "getSoundProcessor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AbstractSoundProcessor", "snippet": "    public AbstractSoundProcessor getSoundProcessor() {        return soundProcessor;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "setSoundProcessor", "params": ["AbstractSoundProcessor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSoundProcessor(AbstractSoundProcessor sound) {        this.soundProcessor = sound;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "getKeyboard", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AbstractKeyboard", "snippet": "    public AbstractKeyboard getKeyboard() {        return keyboard;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "setKeyboard", "params": ["AbstractKeyboard"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setKeyboard(AbstractKeyboard keyboard) {        this.keyboard = keyboard;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "getGamepad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Gamepad", "snippet": "    public Gamepad getGamepad() {        return gamepad;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "setGamepad", "params": ["Gamepad"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGamepad(Gamepad gamepad) {        this.gamepad = gamepad;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "getApplication", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Application", "snippet": "    public Application getApplication() {        return application;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "setApplication", "params": ["Application"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setApplication(Application application) {        this.application = application;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "saveState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveState(StateSet ss) {        for (Addressable m : memory.getMemories()) {            if (m instanceof StateSavable) {                ((StateSavable)m).saveState(ss);            }        }        display.saveState(ss);        soundProcessor.saveState(ss);        keyboard.saveState(ss);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "loadState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadState(StateSet ss) {        for (Addressable m : memory.getMemories()) {            if (m instanceof StateSavable) {                ((StateSavable)m).loadState(ss);            }        }        display.loadState(ss);        soundProcessor.loadState(ss);        keyboard.loadState(ss);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractHardware.java", "stars": "4", "class": {"name": "AbstractHardware", "extends": null, "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_change_language);        title           = findViewById(R.id.title);        back            = findViewById(R.id.back);        checkIndoneisa  = findViewById(R.id.checkIndonesia);        checkEnglish    = findViewById(R.id.checkEnglish);        layoutIndonesia = findViewById(R.id.layoutIndonesia);        layoutEnglish   = findViewById(R.id.layoutEnglish);        indonesiaText   = findViewById(R.id.indonesiaText);        englishText     = findViewById(R.id.englishText);        title.setTypeface(FontUtils.loadFontFromAssets(this, Constant.FONT_BOLD));        indonesiaText.setTypeface(FontUtils.loadFontFromAssets(this, Constant.FONT_BOLD));        englishText.setTypeface(FontUtils.loadFontFromAssets(this, Constant.FONT_BOLD));        back.setOnClickListener(this);        layoutIndonesia.setOnClickListener(this);        layoutEnglish.setOnClickListener(this);        SharedPreferences mSettings = PreferenceManager.getDefaultSharedPreferences(this);        String lang= mSettings.getString(\"lang\", \"en\");        if(lang.equals(Constant.INDONESIA)){            checkIndoneisa.setVisibility(View.VISIBLE);        }else if(lang.equals(Constant.ENGLISH)){            checkEnglish.setVisibility(View.VISIBLE);        }    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/Activity/ChangeLanguageActivity.java", "stars": "2", "class": {"name": "ChangeLanguageActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        if(v.getId() == R.id.back){            finish();        }else if(v.getId() == R.id.layoutIndonesia){            changeLanguage(Constant.INDONESIA);        }else if(v.getId() == R.id.layoutEnglish){            changeLanguage(Constant.ENGLISH);        }    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/Activity/ChangeLanguageActivity.java", "stars": "2", "class": {"name": "ChangeLanguageActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "changeLanguage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void changeLanguage(String language){        if(language == Constant.INDONESIA){            checkIndoneisa.setVisibility(View.VISIBLE);            checkEnglish.setVisibility(View.GONE);        }else if(language == Constant.ENGLISH){            checkIndoneisa.setVisibility(View.GONE);            checkEnglish.setVisibility(View.VISIBLE);        }        Utility.setLocale(language, getBaseContext(), this);        Intent refresh = new Intent(this, MainActivity.class);        finish();       startActivity(refresh);    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/Activity/ChangeLanguageActivity.java", "stars": "2", "class": {"name": "ChangeLanguageActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpStatus", "snippet": "    public HttpStatus getStatus() {        return HttpStatus.BAD_REQUEST;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/exception/BadRequestException.java", "stars": "1", "class": {"name": "BadRequestException", "extends": "BaseException", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate()\t{\t\tsuper.onCreate();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "LiveWallpaper", "extends": "WallpaperService", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroy()\t{\t\tsuper.onDestroy();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "LiveWallpaper", "extends": "WallpaperService", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateEngine", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Engine", "snippet": "\tpublic Engine onCreateEngine()\t{\t\treturn new TestPatternEngine();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "LiveWallpaper", "extends": "WallpaperService", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSharedPreferenceChanged", "params": ["SharedPreferences", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onSharedPreferenceChanged(SharedPreferences prefs,\t\t\t\tString key)\t\t{\t\t\tmShape = prefs.getString(\"livewallpaper_testpattern\", \"smpte\");\t\t\tmMotion = prefs.getBoolean(\"livewallpaper_movement\", true);\t\t\treadColors();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "readColors", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\t\tprivate void readColors()\t\t{\t\t\tint pid = getResources().getIdentifier(mShape + \"colors\", \"array\", getPackageName());\t\t\trectColor = getResources().getIntArray(pid);\t\t\tmRectCount = rectColor.length;\t\t\tmColorRectangles = new Rect[mRectCount];\t\t\tSystem.out.println(\"mRectCount \"+mRectCount);\t\t\tinitFrameParams();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "onCreate", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onCreate(SurfaceHolder surfaceHolder)\t\t{\t\t\tsuper.onCreate(surfaceHolder);\t\t\tsetTouchEventsEnabled(true);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onDestroy()\t\t{\t\t\tsuper.onDestroy();\t\t\tmHandler.removeCallbacks(mDrawPattern);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "onVisibilityChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onVisibilityChanged(boolean visible)\t\t{\t\t\tmVisible = visible;\t\t\tif (visible)\t\t\t{\t\t\t\tdrawFrame();\t\t\t}\t\t\telse\t\t\t{\t\t\t\tmHandler.removeCallbacks(mDrawPattern);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "onSurfaceChanged", "params": ["SurfaceHolder", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onSurfaceChanged(SurfaceHolder holder, int format,\t\t\t\tint width, int height)\t\t{\t\t\tsuper.onSurfaceChanged(holder, format, width, height);\t\t\tinitFrameParams();\t\t\tdrawFrame();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "onSurfaceCreated", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onSurfaceCreated(SurfaceHolder holder)\t\t{\t\t\tsuper.onSurfaceCreated(holder);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "onSurfaceDestroyed", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onSurfaceDestroyed(SurfaceHolder holder)\t\t{\t\t\tsuper.onSurfaceDestroyed(holder);\t\t\tmVisible = false;\t\t\tmHandler.removeCallbacks(mDrawPattern);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "onOffsetsChanged", "params": ["float", "float", "float", "float", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onOffsetsChanged(float xOffset, float yOffset, float xStep,\t\t\t\tfloat yStep, int xPixels, int yPixels)\t\t{\t\t\tdrawFrame();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "onTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onTouchEvent(MotionEvent event)\t\t{\t\t\tif (event.getAction() == MotionEvent.ACTION_MOVE)\t\t\t{\t\t\t\tmTouchX = event.getX();\t\t\t\tmTouchY = event.getY();\t\t\t}\t\t\telse\t\t\t{\t\t\t\tmTouchX = -1;\t\t\t\tmTouchY = -1;\t\t\t}\t\t\tsuper.onTouchEvent(event);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "drawFrame", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid drawFrame()\t\t{\t\t\tfinal SurfaceHolder holder = getSurfaceHolder();\t\t\tCanvas c = null;\t\t\ttry\t\t\t{\t\t\t\tc = holder.lockCanvas();\t\t\t\tif (c != null)\t\t\t\t{\t\t\t\t\t// draw something\t\t\t\t\tdrawPattern(c);\t\t\t\t\tdrawTouchPoint(c);\t\t\t\t}\t\t\t}\t\t\tfinally\t\t\t{\t\t\t\tif (c != null)\t\t\t\t\tholder.unlockCanvasAndPost(c);\t\t\t}\t\t\tmHandler.removeCallbacks(mDrawPattern);\t\t\tif (mVisible)\t\t\t{\t\t\t\tmHandler.postDelayed(mDrawPattern, 1000 / 25);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "drawPattern", "params": ["Canvas"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid drawPattern(Canvas c)\t\t{\t\t\tc.save();\t\t\tc.drawColor(0xff000000);\t\t\tPaint paint = new Paint();\t\t\tif (mMotion)\t\t\t{\t\t\t\tmFrameCounter++;\t\t\t\tif (mHorizontal)\t\t\t\t{\t\t\t\t\tint right;\t\t\t\t\tint left;\t\t\t\t\tif (mFrameCounter > mRectFrame.right)\t\t\t\t\t\tmFrameCounter = 0;\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < mRectCount; i++)\t\t\t\t\t{\t\t\t\t\t\tpaint.setColor(rectColor[i]);\t\t\t\t\t\tright = mColorRectangles[i].right + mFrameCounter;\t\t\t\t\t\tleft = mColorRectangles[i].left + mFrameCounter;\t\t\t\t\t\tif(right > mRectFrame.right)\t\t\t\t\t\t{\t\t\t\t\t\t\tc.drawRect(left - mRectFrame.right, mColorRectangles[i].top, right - mRectFrame.right, mColorRectangles[i].bottom, paint);\t\t\t\t\t\t}\t\t\t\t\t\tif(left < mRectFrame.right)\t\t\t\t\t\t{\t\t\t\t\t\t\tc.drawRect(left, mColorRectangles[i].top, right, mColorRectangles[i].bottom, paint);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\tif(mShape.compareToIgnoreCase(\"smpte\") == 0)\t\t\t\t\t{\t\t\t\t\t\tright =mGradientRect.right + mFrameCounter;\t\t\t\t\t\tleft = mGradientRect.left + mFrameCounter;\t\t\t\t\t\tif(right > mRectFrame.right)\t\t\t\t\t\t{\t\t\t\t\t\t\tmGradient.setBounds(left - mRectFrame.right, mGradientRect.top, right - mRectFrame.right, mGradientRect.bottom);\t\t\t\t\t\t\tmGradient.draw(c);\t\t\t\t\t\t}\t\t\t\t\t\tif(left < mRectFrame.right)\t\t\t\t\t\t{\t\t\t\t\t\t\tmGradient.setBounds(left, mGradientRect.top, right, mGradientRect.bottom);\t\t\t\t\t\t\tmGradient.draw(c);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t\telse\t\t\t\t{\t\t\t\t\tint top;\t\t\t\t\tint bottom;\t\t\t\t\tif (mFrameCounter > mRectFrame.bottom)\t\t\t\t\t\tmFrameCounter = 0;\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < mRectCount; i++)\t\t\t\t\t{\t\t\t\t\t\tpaint.setColor(rectColor[i]);\t\t\t\t\t\ttop = mColorRectangles[i].top + mFrameCounter;\t\t\t\t\t\tbottom = mColorRectangles[i].bottom + mFrameCounter;\t\t\t\t\t\tif(bottom > mRectFrame.bottom)\t\t\t\t\t\t{\t\t\t\t\t\t\tc.drawRect(mColorRectangles[i].left, top - mRectFrame.bottom, mColorRectangles[i].right, bottom - mRectFrame.bottom, paint);\t\t\t\t\t\t}\t\t\t\t\t\tif(top < mRectFrame.bottom)\t\t\t\t\t\t{\t\t\t\t\t\t\tc.drawRect(mColorRectangles[i].left, top, mColorRectangles[i].right, bottom, paint);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\tif(mShape.compareToIgnoreCase(\"smpte\") == 0)\t\t\t\t\t{\t\t\t\t\t\ttop = mGradientRect.top + mFrameCounter;\t\t\t\t\t\tbottom = mGradientRect.bottom + mFrameCounter;\t\t\t\t\t\tif(bottom > mRectFrame.bottom)\t\t\t\t\t\t{\t\t\t\t\t\t\tmGradient.setBounds(mGradientRect.left, top - mRectFrame.bottom, mGradientRect.right, bottom - mRectFrame.bottom);\t\t\t\t\t\t\tmGradient.draw(c);\t\t\t\t\t\t}\t\t\t\t\t\tif(top < mRectFrame.bottom)\t\t\t\t\t\t{\t\t\t\t\t\t\tmGradient.setBounds(mGradientRect.left, top, mGradientRect.right, bottom);\t\t\t\t\t\t\tmGradient.draw(c);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfor (int i = 0; i < mRectCount; i++)\t\t\t\t{\t\t\t\t\tpaint.setColor(rectColor[i]);\t\t\t\t\tc.drawRect(mColorRectangles[i], paint);\t\t\t\t}\t\t\t\tif(mShape.compareToIgnoreCase(\"smpte\") == 0)\t\t\t\t{\t\t\t\t\tmGradient.setBounds(mGradientRect);\t\t\t\t\tmGradient.draw(c);\t\t\t\t}\t\t\t}\t\t\tc.restore();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "drawTouchPoint", "params": ["Canvas"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid drawTouchPoint(Canvas c)\t\t{\t\t\tif (mTouchX >= 0 && mTouchY >= 0)\t\t\t{\t\t\t\tc.drawCircle(mTouchX, mTouchY, 80, mPaint);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "initFrameParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid initFrameParams()\t\t{\t\t\tDisplayMetrics metrics = new DisplayMetrics();\t\t\tDisplay display = ((WindowManager) getSystemService(WINDOW_SERVICE)).getDefaultDisplay();\t\t\tdisplay.getMetrics(metrics);\t\t\tmRectFrame = new Rect(0, 0, metrics.widthPixels, metrics.heightPixels);\t\t\t\t\t\tint rotation = display.getOrientation();\t\t\tif(rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_180)\t\t\t\tmHorizontal = false;\t\t\telse\t\t\t\tmHorizontal = true;\t\t\tSystem.out.println(\"mHorizontal \"+mHorizontal);\t\t\tSystem.out.println(\"mShape \"+mShape);\t\t\tif(mShape.compareToIgnoreCase(\"smpte\") == 0)\t\t\t{\t\t\t\tSystem.out.println(\"mShape == smpte\");\t\t\t\t\t\t\tCreateSmpte();\t\t\t}\t\t\telse if(mShape.compareToIgnoreCase(\"bars\") == 0)\t\t\t{\t\t\t\tSystem.out.println(\"mShape == bars\");\t\t\t\tCreateBars();\t\t\t}\t\t\telse\t\t\t{\t\t\t\tSystem.out.println(\"mShape == ebu\");\t\t\t\tCreateEbu();\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "CreateSmpte", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\t\tprivate void CreateSmpte()\t\t{\t\t\tif(mHorizontal)\t\t\t{\t\t\t\tint topHeight = mRectFrame.bottom * 7 / 12;\t\t\t\tint bottomHeight = mRectFrame.bottom * 3 / 4;\t\t\t\tint wideColumnWidth = mRectFrame.right / 8;\t\t\t\tint narrowColumnWidth = mRectFrame.right * 3 / 28;\t\t\t\tmColorRectangles[0] = new Rect(0, 0, wideColumnWidth, topHeight);\t\t\t\tfor (int i = 1; i < 8; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(mColorRectangles[i - 1].right, 0, mColorRectangles[i - 1].right + narrowColumnWidth, topHeight);\t\t\t\t}\t\t\t\tmColorRectangles[8] = new Rect(mColorRectangles[7].right, 0, mRectFrame.right, topHeight);\t\t\t\tfor (int i = 0; i < 2; i++)\t\t\t\t{\t\t\t\t\tint middleTop = mRectFrame.bottom * (7 + i) / 12;\t\t\t\t\tint middleBottom = mRectFrame.bottom * (8 + i) / 12;\t\t\t\t\tmColorRectangles[i + 9] = new Rect(0, middleTop, wideColumnWidth, middleBottom);\t\t\t\t\tmColorRectangles[i + 11] = new Rect(wideColumnWidth, middleTop, narrowColumnWidth + wideColumnWidth, middleBottom);\t\t\t\t\tmColorRectangles[i + 13] = new Rect(narrowColumnWidth * 7 + wideColumnWidth, middleTop, mRectFrame.right, middleBottom);\t\t\t\t}\t\t\t\tmColorRectangles[15] = new Rect(narrowColumnWidth + wideColumnWidth, topHeight, narrowColumnWidth * 7 + wideColumnWidth, mRectFrame.bottom * 8 / 12);\t\t\t\tmGradientRect = new Rect(mColorRectangles[15].left, mColorRectangles[15].bottom, mColorRectangles[15].right, mRectFrame.bottom * 9 / 12);\t\t\t\tmGradient = new GradientDrawable(Orientation.LEFT_RIGHT, new int[] { 0xff050505, 0xfffdfdfd });\t\t\t\tmGradient.setBounds(mGradientRect);\t\t\t\tmColorRectangles[16] = new Rect(0, bottomHeight, wideColumnWidth, mRectFrame.right);\t\t\t\tmColorRectangles[17] = new Rect(mColorRectangles[16].right, bottomHeight, mRectFrame.right * 9 / 56 + mColorRectangles[16].right, mRectFrame.bottom);\t\t\t\tmColorRectangles[18] = new Rect(mColorRectangles[17].right, bottomHeight, mRectFrame.right * 3 / 14 + mColorRectangles[17].right, mRectFrame.bottom);\t\t\t\tmColorRectangles[19] = new Rect(mColorRectangles[18].right, bottomHeight, mRectFrame.right * 45 / 448 + mColorRectangles[18].right, mRectFrame.bottom);\t\t\t\tfor (int i = 20; i < 25; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(mColorRectangles[i - 1].right, bottomHeight, mRectFrame.right * 15 / 448 + mColorRectangles[i - 1].right, mRectFrame.right);\t\t\t\t}\t\t\t\tmColorRectangles[25] = new Rect(mColorRectangles[24].right, bottomHeight, narrowColumnWidth + mColorRectangles[24].right, mRectFrame.bottom);\t\t\t\tmColorRectangles[26] = new Rect(mColorRectangles[25].right, bottomHeight, mRectFrame.right, mRectFrame.bottom);\t\t\t}\t\t\telse\t\t\t{\t\t\t\tint topHeight = mRectFrame.right * 5 / 12;\t\t\t\tint bottomHeight = mRectFrame.right / 4;\t\t\t\tint wideColumnWidth = mRectFrame.bottom / 8;\t\t\t\tint narrowColumnWidth = mRectFrame.bottom * 3 / 28;\t\t\t\tmColorRectangles[0] = new Rect(topHeight, 0, mRectFrame.bottom, wideColumnWidth);\t\t\t\tfor (int i = 1; i < 8; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(topHeight, mColorRectangles[i - 1].bottom, mRectFrame.right, narrowColumnWidth + mColorRectangles[i - 1].bottom);\t\t\t\t}\t\t\t\tmColorRectangles[8] = new Rect(topHeight, mColorRectangles[7].bottom, mRectFrame.right, mRectFrame.bottom);\t\t\t\tfor (int i = 0; i < 2; i++)\t\t\t\t{\t\t\t\t\tint middleLeft = mRectFrame.right * (4 - i) / 12;\t\t\t\t\tint middleRight = mRectFrame.right * (5 - i) / 12;\t\t\t\t\tmColorRectangles[i + 9] = new Rect(middleLeft, 0, middleRight, wideColumnWidth);\t\t\t\t\tmColorRectangles[i + 11] = new Rect(middleLeft, wideColumnWidth, middleRight, narrowColumnWidth + wideColumnWidth);\t\t\t\t\tmColorRectangles[i + 13] = new Rect(middleLeft, narrowColumnWidth * 7 + wideColumnWidth, middleRight, mRectFrame.bottom);\t\t\t\t}\t\t\t\tmColorRectangles[15] = new Rect(mRectFrame.right * 4 / 12, narrowColumnWidth + wideColumnWidth, mRectFrame.right * 5 / 12, narrowColumnWidth * 7 + wideColumnWidth);\t\t\t\tmGradientRect = new Rect(mRectFrame.right * 3 / 12, mColorRectangles[15].top, mColorRectangles[15].left, mColorRectangles[15].bottom);\t\t\t\tmGradient = new GradientDrawable(Orientation.TOP_BOTTOM, new int[] { 0xff050505, 0xfffdfdfd });\t\t\t\tmGradient.setBounds(mGradientRect);\t\t\t\tmColorRectangles[16] = new Rect(0, 0, bottomHeight, wideColumnWidth);\t\t\t\tmColorRectangles[17] = new Rect(0, mColorRectangles[16].bottom, bottomHeight, mRectFrame.bottom * 9 / 56 + mColorRectangles[16].bottom);\t\t\t\tmColorRectangles[18] = new Rect(0, mColorRectangles[17].bottom, bottomHeight, mRectFrame.bottom * 3 / 14 + mColorRectangles[17].bottom);\t\t\t\tmColorRectangles[19] = new Rect(0, mColorRectangles[18].bottom, bottomHeight, mRectFrame.bottom * 45 / 448 + mColorRectangles[18].bottom);\t\t\t\tfor (int i = 20; i < 25; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(0, mColorRectangles[i - 1].bottom, bottomHeight, mRectFrame.bottom * 15 / 448 + mColorRectangles[i - 1].bottom);\t\t\t\t}\t\t\t\tmColorRectangles[25] = new Rect(0, mColorRectangles[24].bottom, bottomHeight, narrowColumnWidth + mColorRectangles[24].bottom);\t\t\t\tmColorRectangles[26] = new Rect(0, mColorRectangles[25].bottom, bottomHeight, mRectFrame.bottom);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "CreateBars", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\t\tprivate void CreateBars()\t\t{\t\t\tif(mHorizontal)\t\t\t{\t\t\t\tint narrowColumnWidth = mRectFrame.right / 7;\t\t\t\tint wideColumnWidth = mRectFrame.right * 5 / 28;\t\t\t\tint narrowestColumnWidth = mRectFrame.right / 21;\t\t\t\t\t\t\t\tint topColumnHeight = mRectFrame.bottom *2/3;\t\t\t\tint middleColumnHeight = mRectFrame.bottom /12;\t\t\t\t\t\t\t\tmColorRectangles[0] = new Rect(0, 0, narrowColumnWidth, topColumnHeight);\t\t\t\t\t\tfor (int i = 1; i < 7; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(mColorRectangles[i - 1].right, 0, mColorRectangles[i - 1].right + narrowColumnWidth, topColumnHeight);\t\t\t\t\t\t}\t\t\t\tmColorRectangles[7] = new Rect(0, mColorRectangles[0].bottom, narrowColumnWidth, mColorRectangles[0].bottom + middleColumnHeight);\t\t\t\t\t\tfor (int i = 8; i < 14; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(mColorRectangles[i - 1].right, mColorRectangles[7].top, mColorRectangles[i - 1].right + narrowColumnWidth, mColorRectangles[7].bottom);\t\t\t\t\t\t}\t\t\t\tmColorRectangles[14] = new Rect(0, mColorRectangles[7].bottom, wideColumnWidth, mRectFrame.bottom);\t\t\t\t\t\tfor (int i = 15; i < 18; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(mColorRectangles[i - 1].right, mColorRectangles[14].top, mColorRectangles[i - 1].right + wideColumnWidth, mRectFrame.bottom);\t\t\t\t\t\t}\t\t\t\tmColorRectangles[18] = new Rect(mColorRectangles[17].right, mColorRectangles[17].top, mColorRectangles[17].right + narrowestColumnWidth, mRectFrame.bottom);\t\t\t\t\t\tfor (int i = 19; i < 21; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(mColorRectangles[i - 1].right, mColorRectangles[14].top, mColorRectangles[i - 1].right + narrowestColumnWidth, mRectFrame.bottom);\t\t\t\t\t\t}\t\t\t\tmColorRectangles[21] = new Rect(mColorRectangles[20].right, mColorRectangles[17].top, mColorRectangles[6].right, mRectFrame.bottom);\t\t\t\t\t}\t\t\telse\t\t\t{\t\t\t\tint narrowColumnWidth = mRectFrame.bottom / 7;\t\t\t\tint wideColumnWidth = mRectFrame.bottom * 5 / 28;\t\t\t\tint narrowestColumnWidth = mRectFrame.bottom / 21;\t\t\t\t\t\t\t\tint topColumnHeight = mRectFrame.right /3;\t\t\t\tint middleColumnHeight = mRectFrame.right /12;\t\t\t\t\t\t\t\tmColorRectangles[0] = new Rect(topColumnHeight, 0, mRectFrame.right, narrowColumnWidth);\t\t\t\t\t\tfor (int i = 1; i < 7; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(topColumnHeight, mColorRectangles[i - 1].bottom, mRectFrame.right, mColorRectangles[i - 1].bottom + narrowColumnWidth);\t\t\t\t\t\t}\t\t\t\tmColorRectangles[7] = new Rect(mColorRectangles[0].left + middleColumnHeight, 0, mColorRectangles[0].left, narrowColumnWidth);\t\t\t\t\t\tfor (int i = 8; i < 14; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(mColorRectangles[7].left, mColorRectangles[i - 1].bottom, mColorRectangles[7].right, mColorRectangles[i - 1].bottom + narrowColumnWidth);\t\t\t\t\t\t}\t\t\t\tmColorRectangles[14] = new Rect(0, 0, mColorRectangles[7].right,  wideColumnWidth);\t\t\t\t\t\tfor (int i = 15; i < 18; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(0, mColorRectangles[i - 1].bottom, mColorRectangles[7].right, mColorRectangles[i - 1].bottom + wideColumnWidth);\t\t\t\t\t\t}\t\t\t\tmColorRectangles[18] = new Rect(0, mColorRectangles[17].bottom, mColorRectangles[7].right, mColorRectangles[17].bottom + narrowestColumnWidth);\t\t\t\t\t\tfor (int i = 19; i < 21; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(0, mColorRectangles[i - 1].bottom, mColorRectangles[7].right, mColorRectangles[i - 1].bottom + narrowestColumnWidth);\t\t\t\t\t\t}\t\t\t\tmColorRectangles[21] = new Rect(0, mColorRectangles[20].bottom, mColorRectangles[7].right, mRectFrame.bottom);\t\t\t\t\t\t\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "CreateEbu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\t\tprivate void CreateEbu()\t\t{\t\t\tif(mHorizontal)\t\t\t{\t\t\t\tint narrowColumnWidth = mRectFrame.right / 8;\t\t\t\tmColorRectangles[0] = new Rect(0, 0, narrowColumnWidth, mRectFrame.bottom);\t\t\t\t\t\tfor (int i = 1; i < 8; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(mColorRectangles[i - 1].right, 0, mColorRectangles[i - 1].right + narrowColumnWidth, mRectFrame.bottom);\t\t\t\t\t\t}\t\t\t}\t\t\telse\t\t\t{\t\t\t\tint narrowColumnWidth = mRectFrame.bottom / 8;\t\t\t\tmColorRectangles[0] = new Rect(0, 0, mRectFrame.right, narrowColumnWidth);\t\t\t\tfor (int i = 1; i < 8; i++)\t\t\t\t{\t\t\t\t\tmColorRectangles[i] = new Rect(0, mColorRectangles[i - 1].bottom, mRectFrame.right, narrowColumnWidth + mColorRectangles[i - 1].bottom);\t\t\t\t}\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/LiveWallpaper/src/ca/jvsh/livewallpaper/LiveWallpaper.java", "stars": "74", "class": {"name": "TestPatternEngine", "extends": "Engine", "implements": ["SharedPreferences"], "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tScanner sc = new Scanner(System.in);\t\tint arr[] = {0,0,0,0,0};\t\tint count = 1;\t\tint num = 0;\t\tint max = 0;\t\tfor(int i = 0;i < arr.length;i++) {\t\t\tarr[i] = sc.nextInt();\t\t}\t\tArrays.sort(arr);\t\tfor(int i = 0;i < arr.length; i++) {\t\t\tcount = 1;\t\t\tfor(int j = i+1; j < arr.length; j++) {\t\t\t\tif(arr[i] == arr[j] && num!=arr[i]) {\t\t\t\t\tcount= count+1;\t\t\t\t}\t\t\t}\t\t\tif(count > max) {\t\t\t\tmax = count;\t\t\t\tnum = arr[i];\t\t\t}\t\t}\t\tSystem.out.println(\"most frequent nnumber is \"+num+\" frequency is \"+max);\t\tsc.close();\t}", "url": "https://raw.githubusercontent.com/likith22/java-programs/master/HighestFrequency.java", "stars": "3", "class": {"name": "HighestFrequency", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "seDeconnecter", "params": ["HttpServletResponse", "HttpSession"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String seDeconnecter(HttpServletResponse httpServletResponse, HttpSession session) {        httpServletResponse.addCookie(creerCookieInvalide(NOM_COOKIE_CODE_POSTAL_REMETTANT));        httpServletResponse.addCookie(creerCookieInvalide(NOM_COOKIE_TYPE_REMETTANT));        return \"redirect:/\";    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/DeconnexionController.java", "stars": "5", "class": {"name": "DeconnexionController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "creerCookieInvalide", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Cookie", "snippet": "    private Cookie creerCookieInvalide(String nomCookie) {        Cookie cookie = new Cookie(nomCookie, \"\");        cookie.setMaxAge(0);        return cookie;    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/DeconnexionController.java", "stars": "5", "class": {"name": "DeconnexionController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unicodeToString", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String unicodeToString(String unicode){        if(StringUtils.isEmpty(unicode)){            return null;        }        StringBuilder sb = new StringBuilder();        int i = -1;        int pos = 0;        while((i = unicode.indexOf(\"\\\\u\", pos)) != -1){            sb.append(unicode.substring(pos, i));            if(i + 5 < unicode.length()){                pos = i + 6;                sb.append((char)Integer.parseInt(unicode.substring(i + 2, i + 6), 16));            }        }        sb.append(unicode.substring(pos));        return sb.toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/Unicode.java", "stars": "23", "class": {"name": "Unicode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stringToUnicode", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String stringToUnicode(String string){        if(StringUtils.isEmpty(string)){            return null;        }        char[] bytes = string.toCharArray();        StringBuilder unicode = new StringBuilder();        for(int i = 0; i < bytes.length; i++){            String hexString = Integer.toHexString(bytes[i]);            unicode.append(\"\\\\u\");            if(hexString.length() < 4){                unicode.append(\"0000\", hexString.length(), 4);            }            unicode.append(hexString);        }        return unicode.toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/Unicode.java", "stars": "23", "class": {"name": "Unicode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "of", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "Bored", "snippet": "    private static Bored of() {        return BoredHolder.INSTANCE;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/Bored.java", "stars": "2", "class": {"name": "Bored", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "env", "params": ["Environment"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void env(Environment env) {        Bored.of().env = env;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/Bored.java", "stars": "2", "class": {"name": "Bored", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "env", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Environment", "snippet": "    public static Environment env() {        return Bored.of().env;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/Bored.java", "stars": "2", "class": {"name": "Bored", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] commands) {        CommandExecute.start(commands);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/Bored.java", "stars": "2", "class": {"name": "Bored", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\t\t\tSystem.setProperty(ChromeDriverService.CHROME_DRIVER_SILENT_OUTPUT_PROPERTY, \"true\");\t\t// System.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\tWebDriver driver = new ChromeDriver();\t\tString url = \"https://www.seleniumeasy.com/test/basic-checkbox-demo.html\";\t\tdriver.get(url);\t\t\t\tList<WebElement> checkboxes=driver.findElements(By.xpath(\"//input[@class='cb1-element']\"));\t\t\t\tfor(WebElement list: checkboxes) {\t\t\tlist.click();\t\t\tThread.sleep(2000);\t\t}\t\t\t\tdriver.quit();\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class4/CheckBoxes.java", "stars": "3", "class": {"name": "CheckBoxes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int size() {        return map.size();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        return map.isEmpty();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "containsKey", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsKey(Object key) {        return map.containsKey(key);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "containsValue", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsValue(Object value) {        return map.containsValue(value);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object get(Object key) {        return map.get(key);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object put(String key, Object value) {        return map.put(key, value);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object remove(Object key) {        return map.remove(key);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "putAll", "params": ["Map<String,?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void putAll(Map<? extends String, ?> m) {        map.putAll(m);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        map.clear();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "keySet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "    public Set<String> keySet() {        return map.keySet();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "values", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Object>", "snippet": "    public Collection<Object> values() {        return map.values();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "entrySet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<Entry>", "snippet": "    public Set<Entry<String, Object>> entrySet() {        return map.entrySet();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object get(String key) {        return map.get(key);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getString(String key) {        Object obj = map.get(key);        if (!(obj instanceof String)) {            throw new JSONTypeException(\"Type of value is not String\");        }        return (String) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getLong", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getLong(String key) {        Object obj = map.get(key);        if (!(obj instanceof Long)) {            throw new JSONTypeException(\"Type of value is not Long\");        }        return (Long) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getInteger", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getInteger(String key) {        Object obj = map.get(key);        if (!(obj instanceof Integer)) {            throw new JSONTypeException(\"Type of value is not Integer\");        }        return (Integer) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getShort", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Short", "snippet": "    public Short getShort(String key) {        Object obj = map.get(key);        if (!(obj instanceof Short)) {            throw new JSONTypeException(\"Type of value is not Short\");        }        return (Short) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getByte", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Byte", "snippet": "    public Byte getByte(String key) {        Object obj = map.get(key);        if (!(obj instanceof Byte)) {            throw new JSONTypeException(\"Type of value is not Byte\");        }        return (Byte) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getCharacter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Character", "snippet": "    public Character getCharacter(String key) {        Object obj = map.get(key);        if (!(obj instanceof Character)) {            throw new JSONTypeException(\"Type of value is not Character\");        }        return (Character) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getDouble", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getDouble(String key) {        Object obj = map.get(key);        if (!(obj instanceof Double)) {            throw new JSONTypeException(\"Type of value is not Double\");        }        return (Double) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getFloat", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Float", "snippet": "    public Float getFloat(String key) {        Object obj = map.get(key);        if (!(obj instanceof Float)) {            throw new JSONTypeException(\"Type of value is not Float\");        }        return (Float) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getBoolean", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean getBoolean(String key) {        Object obj = map.get(key);        if (!(obj instanceof Boolean)) {            throw new JSONTypeException(\"Type of value is not Boolean\");        }        return (Boolean) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getJSONObject", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject getJSONObject(String key) {        Object obj = map.get(key);        if (!(obj instanceof JSONObject)) {            throw new JSONTypeException(\"Type of value is not JSONObject\");        }        return (JSONObject) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getJSONArray", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray getJSONArray(String key) {        Object obj = map.get(key);        if (!(obj instanceof JSONArray)) {            throw new JSONTypeException(\"Type of value is not JSONArray\");        }        return (JSONArray) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return JSON.toJSONString(this);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString(int indent) {        return JSON.toJSONString(this, indent);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONObject.java", "stars": "2", "class": {"name": "JSONObject", "extends": null, "implements": ["Map", "Serializable"], "modifiers": ["public"]}}, {"method_name": "initCommunicator", "params": ["Configuration"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initCommunicator(Configuration configuration) {        super.setContainerCommunicator(new StandaloneTGContainerCommunicator(configuration));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getJobId() {        return jobId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTaskGroupId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTaskGroupId() {        return taskGroupId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        try {            /**             * \u72b6\u6001check\u65f6\u95f4\u95f4\u9694\uff0c\u8f83\u77ed\uff0c\u53ef\u4ee5\u628a\u4efb\u52a1\u53ca\u65f6\u5206\u53d1\u5230\u5bf9\u5e94channel\u4e2d             */            int sleepIntervalInMillSec = this.configuration.getInt(                    CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_SLEEPINTERVAL, 100);            /**             * \u72b6\u6001\u6c47\u62a5\u65f6\u95f4\u95f4\u9694\uff0c\u7a0d\u957f\uff0c\u907f\u514d\u5927\u91cf\u6c47\u62a5             */            long reportIntervalInMillSec = this.configuration.getLong(                    CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_REPORTINTERVAL,                    10000);            /**             * 2\u5206\u949f\u6c47\u62a5\u4e00\u6b21\u6027\u80fd\u7edf\u8ba1             */            // \u83b7\u53d6channel\u6570\u76ee            int channelNumber = this.configuration.getInt(                    CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_CHANNEL);            int taskMaxRetryTimes = this.configuration.getInt(                    CoreConstant.DATAX_CORE_CONTAINER_TASK_FAILOVER_MAXRETRYTIMES, 1);            long taskRetryIntervalInMsec = this.configuration.getLong(                    CoreConstant.DATAX_CORE_CONTAINER_TASK_FAILOVER_RETRYINTERVALINMSEC, 10000);            long taskMaxWaitInMsec = this.configuration.getLong(CoreConstant.DATAX_CORE_CONTAINER_TASK_FAILOVER_MAXWAITINMSEC, 60000);            List<Configuration> taskConfigs = this.configuration                    .getListConfiguration(CoreConstant.DATAX_JOB_CONTENT);            if (LOG.isDebugEnabled()) {                LOG.debug(\"taskGroup[{}]'s task configs[{}]\", this.taskGroupId,                        JSON.toJSONString(taskConfigs));            }            int taskCountInThisTaskGroup = taskConfigs.size();            LOG.info(String.format(                    \"taskGroupId=[%d] start [%d] channels for [%d] tasks.\",                    this.taskGroupId, channelNumber, taskCountInThisTaskGroup));            this.containerCommunicator.registerCommunication(taskConfigs);            runTasks = new CopyOnWriteArrayList<>();            //taskId\u4e0etask\u914d\u7f6e            Map<Integer, Configuration> taskConfigMap = buildTaskConfigMap(taskConfigs);            //\u5f85\u8fd0\u884ctask\u5217\u8868            List<Configuration> taskQueue = buildRemainTasks(taskConfigs);            //taskId\u4e0e\u4e0a\u6b21\u5931\u8d25\u5b9e\u4f8b            Map<Integer, TaskExecutor> taskFailedExecutorMap = new HashMap<>(8);            //\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4            Map<Integer, Long> taskStartTimeMap = new HashMap<>(8);            long lastReportTimeStamp = 0;            Communication lastTaskGroupContainerCommunication = new Communication();            while (!isShutdown) {                //1.\u5224\u65adtask\u72b6\u6001                boolean failedOrKilled = false;                Map<Integer, Communication> communicationMap = containerCommunicator.getCommunicationMap();                for (Map.Entry<Integer, Communication> entry : communicationMap.entrySet()) {                    Integer taskId = entry.getKey();                    Communication taskCommunication = entry.getValue();                    if (!taskCommunication.isFinished()) {                        continue;                    }                    TaskExecutor taskExecutor = removeTask(runTasks, taskId);                    //\u4e0a\u9762\u4ecerunTasks\u91cc\u79fb\u9664\u4e86\uff0c\u56e0\u6b64\u5bf9\u5e94\u5728monitor\u91cc\u79fb\u9664                    taskMonitor.removeTask(taskId);                    //\u5931\u8d25\uff0c\u770btask\u662f\u5426\u652f\u6301failover\uff0c\u91cd\u8bd5\u6b21\u6570\u672a\u8d85\u8fc7\u6700\u5927\u9650\u5236                    if (taskCommunication.getState() == State.FAILED) {                        taskFailedExecutorMap.put(taskId, taskExecutor);                        if (null != taskExecutor &&                                taskExecutor.supportFailOver() && taskExecutor.getAttemptCount() < taskMaxRetryTimes) {                            taskExecutor.shutdown(); //\u5173\u95ed\u8001\u7684executor                            //\u5c06task\u7684\u72b6\u6001\u91cd\u7f6e                            containerCommunicator.resetCommunication(taskId);                            Configuration taskConfig = taskConfigMap.get(taskId);                            //\u91cd\u65b0\u52a0\u5165\u4efb\u52a1\u5217\u8868                            taskQueue.add(taskConfig);                        } else {                            failedOrKilled = true;                            break;                        }                    } else if (taskCommunication.getState() == State.KILLED) {                        failedOrKilled = true;                        break;                    } else if (taskCommunication.getState() == State.SUCCEEDED) {                        Long taskStartTime = taskStartTimeMap.get(taskId);                        if (taskStartTime != null) {                            Long usedTime = System.currentTimeMillis() - taskStartTime;                            LOG.info(\"taskGroup[{}] taskId[{}] is successed, used[{}]ms\",                                    this.taskGroupId, taskId, usedTime);                            //usedTime*1000*1000 \u8f6c\u6362\u6210PerfRecord\u8bb0\u5f55\u7684ns\uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u7b80\u5355\u767b\u8bb0\uff0c\u8fdb\u884c\u6700\u957f\u4efb\u52a1\u7684\u6253\u5370\u3002\u56e0\u6b64\u589e\u52a0\u7279\u5b9a\u9759\u6001\u65b9\u6cd5                            PerfRecord.addPerfRecord(taskGroupId, taskId, PerfRecord.PHASE.TASK_TOTAL, taskStartTime, usedTime * 1000L * 1000L);                            taskStartTimeMap.remove(taskId);                            taskConfigMap.remove(taskId);                        }                    }                }                // 2.\u53d1\u73b0\u8be5taskGroup\u4e0btaskExecutor\u7684\u603b\u72b6\u6001\u5931\u8d25\u5219\u6c47\u62a5\u9519\u8bef                if (failedOrKilled) {                    lastTaskGroupContainerCommunication = reportTaskGroupCommunication(                            lastTaskGroupContainerCommunication, taskCountInThisTaskGroup);                    throw DataXException.asDataXException(                            FrameworkErrorCode.PLUGIN_RUNTIME_ERROR, lastTaskGroupContainerCommunication.getThrowable());                }                //3.\u6709\u4efb\u52a1\u672a\u6267\u884c\uff0c\u4e14\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u6570\u5c0f\u4e8e\u6700\u5927\u901a\u9053\u9650\u5236                Iterator<Configuration> iterator = taskQueue.iterator();                while (iterator.hasNext() && null != runTasks && runTasks.size() < channelNumber) {                    Configuration taskConfig = iterator.next();                    Integer taskId = taskConfig.getInt(CoreConstant.TASK_ID);                    int attemptCount = 1;                    TaskExecutor lastExecutor = taskFailedExecutorMap.get(taskId);                    if (lastExecutor != null) {                        attemptCount = lastExecutor.getAttemptCount() + 1;                        long now = System.currentTimeMillis();                        long failedTime = lastExecutor.getTimeStamp();                        //\u672a\u5230\u7b49\u5f85\u65f6\u95f4\uff0c\u7ee7\u7eed\u7559\u5728\u961f\u5217                        if (now - failedTime < taskRetryIntervalInMsec) {                            continue;                        }                        //\u4e0a\u6b21\u5931\u8d25\u7684task\u4ecd\u672a\u7ed3\u675f                        if (!lastExecutor.isShutdown()) {                            if (now - failedTime > taskMaxWaitInMsec) {                                markCommunicationFailed(taskId);                                reportTaskGroupCommunication(lastTaskGroupContainerCommunication, taskCountInThisTaskGroup);                                throw DataXException.asDataXException(CommonErrorCode.WAIT_TIME_EXCEED, \"task failover\u7b49\u5f85\u8d85\u65f6\");                            } else {                                lastExecutor.shutdown(); //\u518d\u6b21\u5c1d\u8bd5\u5173\u95ed                                continue;                            }                        } else {                            LOG.info(\"taskGroup[{}] taskId[{}] attemptCount[{}] has already shutdown\",                                    this.taskGroupId, taskId, lastExecutor.getAttemptCount());                        }                    }                    Configuration taskConfigForRun = taskMaxRetryTimes > 1 ? taskConfig.clone() : taskConfig;                    TaskExecutor taskExecutor = new TaskExecutor(taskConfigForRun, attemptCount);                    taskStartTimeMap.put(taskId, System.currentTimeMillis());                    iterator.remove();                    //first to add into the list of running task, then start                    runTasks.add(taskExecutor);                    taskExecutor.doStart();                    //\u4e0a\u9762\uff0c\u589e\u52a0task\u5230runTasks\u5217\u8868\uff0c\u56e0\u6b64\u5728monitor\u91cc\u6ce8\u518c\u3002                    taskMonitor.registerTask(taskId, this.containerCommunicator.getCommunication(taskId));                    taskFailedExecutorMap.remove(taskId);                    LOG.info(\"taskGroup[{}] taskId[{}] attemptCount[{}] is started\",                            this.taskGroupId, taskId, attemptCount);                }                //4.\u4efb\u52a1\u5217\u8868\u4e3a\u7a7a\uff0cexecutor\u5df2\u7ed3\u675f, \u641c\u96c6\u72b6\u6001\u4e3asuccess--->\u6210\u529f                if (taskQueue.isEmpty() && isAllTaskDone(runTasks) && containerCommunicator.collectState() == State.SUCCEEDED) {                    // \u6210\u529f\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u9700\u8981\u6c47\u62a5\u4e00\u6b21\u3002\u5426\u5219\u5728\u4efb\u52a1\u7ed3\u675f\u975e\u5e38\u5feb\u7684\u60c5\u51b5\u4e0b\uff0c\u91c7\u96c6\u7684\u4fe1\u606f\u5c06\u4f1a\u4e0d\u51c6\u786e                    lastTaskGroupContainerCommunication = reportTaskGroupCommunication(                            lastTaskGroupContainerCommunication, taskCountInThisTaskGroup);                    LOG.info(\"taskGroup[{}] completed it's tasks.\", this.taskGroupId);                    break;                }                // 5.\u5982\u679c\u5f53\u524d\u65f6\u95f4\u5df2\u7ecf\u8d85\u51fa\u6c47\u62a5\u65f6\u95f4\u7684interval\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u9a6c\u4e0a\u6c47\u62a5                long now = System.currentTimeMillis();                if (now - lastReportTimeStamp > reportIntervalInMillSec) {                    lastTaskGroupContainerCommunication = reportTaskGroupCommunication(                            lastTaskGroupContainerCommunication, taskCountInThisTaskGroup);                    lastReportTimeStamp = now;                    //taskMonitor\u5bf9\u4e8e\u6b63\u5728\u8fd0\u884c\u7684task\uff0c\u6bcfreportIntervalInMillSec\u8fdb\u884c\u68c0\u67e5                    for (TaskExecutor taskExecutor : runTasks) {                        taskMonitor.report(taskExecutor.getTaskId(), this.containerCommunicator.getCommunication(taskExecutor.getTaskId()));                    }                }                Thread.sleep(sleepIntervalInMillSec);            }            //6.\u6700\u540e\u8fd8\u8981\u6c47\u62a5\u4e00\u6b21            reportTaskGroupCommunication(lastTaskGroupContainerCommunication, taskCountInThisTaskGroup);        } catch (Throwable e) {            Communication nowTaskGroupContainerCommunication = this.containerCommunicator.collect();            if (nowTaskGroupContainerCommunication.getThrowable() == null) {                nowTaskGroupContainerCommunication.setThrowable(e);            }            nowTaskGroupContainerCommunication.setState(State.FAILED);            this.containerCommunicator.report(nowTaskGroupContainerCommunication);            throw DataXException.asDataXException(                    FrameworkErrorCode.RUNTIME_ERROR, e);        } finally {            if (!PerfTrace.getInstance().isJob()) {                //\u6700\u540e\u6253\u5370cpu\u7684\u5e73\u5747\u6d88\u8017\uff0cGC\u7684\u7edf\u8ba1                VMInfo vmInfo = VMInfo.getVmInfo();                if (vmInfo != null) {                    vmInfo.getDelta(false);                    LOG.info(vmInfo.totalString());                }                LOG.info(PerfTrace.getInstance().summarizeNoException());            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {        isShutdown = true;        if(null != runTasks && !runTasks.isEmpty()){            runTasks.forEach(taskExecutor -> {                taskExecutor.shutdown();                runTasks.remove(taskExecutor);            });            if(runTasks.size() > 0){                //maybe have new task executors                runTasks.forEach(TaskExecutor::shutdown);                runTasks.clear();            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "adjustSpeed", "params": ["long", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void adjustSpeed(long byteSpeed, long recordSpeed){        //first to update configuration        configuration.set(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_BYTE, byteSpeed);        configuration.set(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_RECORD, recordSpeed);        //adjust dynamically        runTasks.forEach(runTask -> runTask.adjustChannelSpeed(byteSpeed, recordSpeed));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildTaskConfigMap", "params": ["List<Configuration>"], "throws": null, "modifiers": ["private"], "return_type": "Map<Integer,Configuration>", "snippet": "    private Map<Integer, Configuration> buildTaskConfigMap(List<Configuration> configurations) {        Map<Integer, Configuration> map = new HashMap<>();        for (Configuration taskConfig : configurations) {            int taskId = taskConfig.getInt(CoreConstant.TASK_ID);            map.put(taskId, taskConfig);        }        return map;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildRemainTasks", "params": ["List<Configuration>"], "throws": null, "modifiers": ["private"], "return_type": "List<Configuration>", "snippet": "    private List<Configuration> buildRemainTasks(List<Configuration> configurations) {        List<Configuration> remainTasks = new LinkedList<>();        for (Configuration taskConfig : configurations) {            remainTasks.add(taskConfig);        }        return remainTasks;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeTask", "params": ["List<TaskExecutor>", "int"], "throws": null, "modifiers": ["private"], "return_type": "TaskExecutor", "snippet": "    private TaskExecutor removeTask(List<TaskExecutor> taskList, int taskId) {        for(TaskExecutor taskExecutor : taskList){            if(taskExecutor.getTaskId() == taskId){                taskList.remove(taskExecutor);                return taskExecutor;            }        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "isAllTaskDone", "params": ["List<TaskExecutor>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isAllTaskDone(List<TaskExecutor> taskList) {        for (TaskExecutor taskExecutor : taskList) {            if (!taskExecutor.isTaskFinished()) {                return false;            }        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "reportTaskGroupCommunication", "params": ["Communication", "int"], "throws": null, "modifiers": ["private"], "return_type": "Communication", "snippet": "    private Communication reportTaskGroupCommunication(Communication lastTaskGroupContainerCommunication, int taskCount) {        Communication nowTaskGroupContainerCommunication = this.containerCommunicator.collect();        nowTaskGroupContainerCommunication.setTimestamp(System.currentTimeMillis());        Communication reportCommunication = CommunicationTool.getReportCommunication(nowTaskGroupContainerCommunication,                lastTaskGroupContainerCommunication, taskCount);        //mark the number of channel running        reportCommunication.setLongCounter(CommunicationTool.CHANNEL_RUNNING, runTasks.size());        this.containerCommunicator.report(reportCommunication);        return reportCommunication;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "markCommunicationFailed", "params": ["Integer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void markCommunicationFailed(Integer taskId) {        Communication communication = containerCommunicator.getCommunication(taskId);        communication.setState(State.FAILED);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskGroupContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void doStart() {            //Run writer threads            this.writerThreads.forEach(Thread::start);            this.writerThreads.forEach(writerThread ->{                if(!writerThread.isAlive() || this.taskCommunication.getState() == State.FAILED){                    throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                            this.taskCommunication.getThrowable());                }            });            //Run reader thread            this.readerThread.start();            // \u8fd9\u91ccreader\u53ef\u80fd\u5f88\u5feb\u7ed3\u675f            if (!this.readerThread.isAlive() && this.taskCommunication.getState() == State.FAILED) {                // \u8fd9\u91cc\u6709\u53ef\u80fd\u51fa\u73b0Reader\u7ebf\u4e0a\u542f\u52a8\u5373\u6302\u60c5\u51b5 \u5bf9\u4e8e\u8fd9\u7c7b\u60c5\u51b5 \u9700\u8981\u7acb\u523b\u629b\u51fa\u5f02\u5e38                throw DataXException.asDataXException(                        FrameworkErrorCode.RUNTIME_ERROR,                        this.taskCommunication.getThrowable());            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "generateRunner", "params": ["PluginType", "String", "Configuration"], "throws": null, "modifiers": ["private"], "return_type": "AbstractRunner", "snippet": "        private AbstractRunner generateRunner(PluginType pluginType, String pluginName, Configuration taskConf) {            return generateRunner(pluginType, pluginName, taskConf, null);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "generateRunner", "params": ["PluginType", "String", "Configuration", "List<TransformerExecution>"], "throws": null, "modifiers": ["private"], "return_type": "AbstractRunner", "snippet": "        private AbstractRunner generateRunner(PluginType pluginType, String pluginName, Configuration taskConf, List<TransformerExecution> transformerInfoExecs) {            AbstractRunner newRunner = null;            TaskPluginCollector pluginCollector;            switch (pluginType) {                case READER:                    newRunner = LoadUtil.loadPluginRunner(pluginType, pluginName);                    newRunner.setJobConf(taskConf);                    if(null != transportType && transportType.equals(TransportType.STREAM)){                        ChannelOutput outputStream = new ChannelOutput(streamChannel);                        ((ReaderRunner)newRunner).setChannelOutput(outputStream);                    }else {                        pluginCollector = ClassUtil.instantiate(                                taskCollectorClass, AbstractTaskPluginCollector.class,                                configuration, this.taskCommunication,                                PluginType.READER);                        RecordSender recordSender;                        if (transformerInfoExecs != null && transformerInfoExecs.size() > 0) {                            recordSender = new BufferedRecordTransformerExchanger(taskGroupId, this.taskId, this.recordChannel, this.taskCommunication, pluginCollector, transformerInfoExecs);                        } else {                            recordSender = new BufferedRecordExchanger(this.recordChannel, pluginCollector);                        }                        /**                         * \u8bbe\u7f6etaskPlugin\u7684collector\uff0c\u7528\u6765\u5904\u7406\u810f\u6570\u636e\u548cjob/task\u901a\u4fe1                         */                        newRunner.setTaskPluginCollector(pluginCollector);                        ((ReaderRunner) newRunner).setRecordSender(recordSender);                    }                    break;                case WRITER:                    newRunner = LoadUtil.loadPluginRunner(pluginType, pluginName);                    newRunner.setJobConf(taskConf);                    if(null != transportType && transportType.equals(TransportType.STREAM)){                        ChannelInput inputStream = new ChannelInput(streamChannel);                        ((WriterRunner)newRunner).setChannelInput(inputStream);                        //Increase consumer                        streamChannel.incConsumer();                    }else {                        pluginCollector  = ClassUtil.instantiate(                                taskCollectorClass, AbstractTaskPluginCollector.class,                                configuration, this.taskCommunication,                                PluginType.WRITER);                        ((WriterRunner) newRunner).setRecordReceiver(new BufferedRecordExchanger(                                this.recordChannel, pluginCollector));                        /**                         * \u8bbe\u7f6etaskPlugin\u7684collector\uff0c\u7528\u6765\u5904\u7406\u810f\u6570\u636e\u548cjob/task\u901a\u4fe1                         */                        newRunner.setTaskPluginCollector(pluginCollector);                        //Increase consumer                        this.recordChannel.incConsumer();                    }                    break;                default:                    throw DataXException.asDataXException(FrameworkErrorCode.ARGUMENT_ERROR, \"Cant generateRunner for:\" + pluginType);            }            newRunner.setTaskGroupId(taskGroupId);            newRunner.setTaskId(this.taskId);            newRunner.setRunnerCommunication(this.taskCommunication);            return newRunner;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isTaskFinished", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "        private boolean isTaskFinished() {            // \u5982\u679creader \u6216 writer\u6ca1\u6709\u5b8c\u6210\u5de5\u4f5c\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u5de5\u4f5c\u6ca1\u6709\u5b8c\u6210            if (readerThread.isAlive()) {                return false;            }            for(Thread writerThread : writerThreads){                if(writerThread.isAlive()){                    return false;                }            }            return taskCommunication != null && taskCommunication.isFinished();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getTaskId", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "        private int getTaskId() {            return taskId;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getTimeStamp", "params": [], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "        private long getTimeStamp() {            return taskCommunication.getTimestamp();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getAttemptCount", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "        private int getAttemptCount() {            return attemptCount;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "supportFailOver", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "        private boolean supportFailOver() {            for(WriterRunner runner : writerRunners){                if(!runner.supportFailOver()){                    return false;                }            }            return true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "adjustChannelSpeed", "params": ["long", "long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void adjustChannelSpeed(long byteSpeed, long dataSpeed){            this.recordChannel.adjustRateLimit(byteSpeed, dataSpeed);            this.streamChannel.adjustRateLimit(byteSpeed, dataSpeed);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void shutdown() {            writerRunners.forEach(WriterRunner::shutdown);            readerRunner.shutdown();            writerThreads.forEach(writerThread -> {                if(writerThread.isAlive()){                    writerThread.interrupt();                }            });            if (readerThread.isAlive()) {                readerThread.interrupt();            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isShutdown", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "        private boolean isShutdown() {            if(readerThread.isAlive()){                return false;            }            for(Thread writerThread : writerThreads){                if(writerThread.isAlive()){                   return false;                }            }            return true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskGroupContainer.java", "stars": "23", "class": {"name": "TaskExecutor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {        EntityUtil.resetTimer();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/Timer.java", "stars": "12", "class": {"name": "Timer", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        switch (mode.toLowerCase()) {            case \"normal\":                EntityUtil.setTimer(speed);                break;            case \"test\":                    EntityUtil.setTimer(10f);                if (mc.player.ticksExisted % 10 == 0) {                    EntityUtil.setTimer(1f);                }                break;        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/Timer.java", "stars": "12", "class": {"name": "Timer", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return this.name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerDependency.java", "stars": "18", "class": {"name": "FlowTriggerDependency", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return this.type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerDependency.java", "stars": "18", "class": {"name": "FlowTriggerDependency", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getProps() {    return this.props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerDependency.java", "stars": "18", "class": {"name": "FlowTriggerDependency", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"FlowTriggerDependency{\" +        \"name='\" + this.name + '\\'' +        \", type='\" + this.type + '\\'' +        \", props=\" + this.props +        '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerDependency.java", "stars": "18", "class": {"name": "FlowTriggerDependency", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDao", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "IBaseDao<UserInfo>", "snippet": "    protected IBaseDao<UserInfo> getDao() {        return userInfoDao;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["UserInfo"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(UserInfo userInfo) {        //Encrypt password        if(StringUtils.isNotBlank(userInfo.getPassword())){            userInfo.setPassword(CryptoUtils.md5(userInfo.getPassword(), userInfo.getUserName(), 2));        }        return super.add(userInfo);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "sync", "params": ["UserInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sync(UserInfo userInfo){        boolean exist = userInfoDao.selectByUsername(userInfo.getUserName()) != null;        if(!exist) {            userInfoDao.insertOrUpdateOne(userInfo);        }else{            userInfoDao.update(userInfo);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "selectByUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "UserInfo", "snippet": "    public UserInfo selectByUsername(String userName){        return userInfoDao.selectByUsername(userName);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "selectDetailByUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "UserInfo", "snippet": "    public UserInfo selectDetailByUsername(String userName) {        return userInfoDao.selectDetailByUsername(userName);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "findExecUserPage", "params": ["Integer", "PageQuery"], "throws": null, "modifiers": ["public"], "return_type": "PageList<ExecUser>", "snippet": "    public PageList<ExecUser> findExecUserPage(Integer appUserId, PageQuery query) {        Long count = userExecUserDao.count(appUserId);        int currentPage = query.getPage();        int pageSize = query.getPageSize();        PageList<ExecUser> page = new PageList<>(new Paginator(currentPage, pageSize, count.intValue()));        int offset = currentPage > 0 ? (currentPage - 1) * pageSize : 0;        List<ExecUser> result = userExecUserDao.findPageByAppUserId(appUserId, query, new RowBounds(offset, pageSize));        page.setData(result);        return page;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "bindExecUser", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void bindExecUser(String appUser, String execUser) {        UserExecUser userExecUser = new UserExecUser(appUser, execUser);        userExecUserDao.addOne(userExecUser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "unbindExecNode", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unbindExecNode(String appUser, String execUser) {        UserExecUser userExecUser = new UserExecUser(appUser, execUser);        userExecUserDao.deleteOne(userExecUser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "findExecNodePage", "params": ["Integer", "PageQuery"], "throws": null, "modifiers": ["public"], "return_type": "PageList<ExecutorNode>", "snippet": "    public PageList<ExecutorNode> findExecNodePage(Integer appUserId, PageQuery query) {        Long count = userExecNodeDao.count(appUserId);        int currentPage = query.getPage();        int pageSize = query.getPageSize();        PageList<ExecutorNode> page = new PageList<>(new Paginator(currentPage, pageSize, count.intValue()));        int offset = currentPage > 0 ? (currentPage - 1) * pageSize : 0;        List<ExecutorNode> result = userExecNodeDao.findPageByUserId(appUserId, query, new RowBounds(offset, pageSize));        page.setData(result);        return page;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "bindExecNode", "params": ["String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void bindExecNode(String appUser, Integer nodeId) {        UserExecNode userExecNode = new UserExecNode(appUser, nodeId);        userExecNodeDao.addOne(userExecNode);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "unbindExecNode", "params": ["String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unbindExecNode(String appUser, Integer nodeId) {        UserExecNode userExecNode = new UserExecNode(appUser, nodeId);        userExecNodeDao.deleteOne(userExecNode);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "hasBoundExecUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasBoundExecUser(String appUser) {        Integer result = userExecUserDao.existsAppUser(appUser);        return result != null && result > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "hasBoundExecNode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasBoundExecNode(String appUser) {        Integer result = userExecNodeDao.existsAppUser(appUser);        return result != null && result > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "resetPassword", "params": ["Integer", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean resetPassword(Integer id, String password) {        UserInfo userInfo = userInfoDao.selectOne(id);        if(null != userInfo) {            String userName = userInfo.getUserName();            String encryptedPassword = CryptoUtils.md5(password, userName, 2);            int affect = userInfoDao.resetPassword(id, encryptedPassword);            return affect > 0;        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/service/impl/UserInfoServiceImpl.java", "stars": "23", "class": {"name": "UserInfoServiceImpl", "extends": "AbstractGenericService", "implements": ["UserInfoService"], "modifiers": ["public"]}}, {"method_name": "processMessage", "params": ["SampleMessage"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid processMessage(SampleMessage message) {\t\tthis.messages.add(message);\t\tSystem.out.println(\"Received sample message [\" + message + \"]\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-kafka/src/main/java/smoketest/kafka/Consumer.java", "stars": "47572", "class": {"name": "Consumer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getMessages", "params": [], "throws": null, "modifiers": [], "return_type": "List<SampleMessage>", "snippet": "\tList<SampleMessage> getMessages() {\t\treturn this.messages;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-kafka/src/main/java/smoketest/kafka/Consumer.java", "stars": "47572", "class": {"name": "Consumer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setLeftText", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLeftText(@StringRes int id) {        return setLeftText(getResources().getString(id));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLeftText", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLeftText(CharSequence text) {        mLeftView.setText(text);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLeftText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CharSequence", "snippet": "    public CharSequence getLeftText() {        return mLeftView.getText();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLeftHint", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLeftHint(@StringRes int id) {        return setLeftHint(getResources().getString(id));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLeftHint", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLeftHint(CharSequence hint) {        mLeftView.setHint(hint);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setRightText", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setRightText(@StringRes int id) {        setRightText(getResources().getString(id));        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setRightText", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setRightText(CharSequence text) {        mRightView.setText(text);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getRightText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CharSequence", "snippet": "    public CharSequence getRightText() {        return mRightView.getText();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setRightHint", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setRightHint(@StringRes int id) {        return setRightHint(getResources().getString(id));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setRightHint", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setRightHint(CharSequence hint) {        mRightView.setHint(hint);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLeftIcon", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLeftIcon(@DrawableRes int id) {        setLeftIcon(ContextCompat.getDrawable(getContext(), id));        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLeftIcon", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLeftIcon(Drawable drawable) {        mLeftView.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLeftIcon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "    public Drawable getLeftIcon() {        return mLeftView.getCompoundDrawables()[0];    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setRightIcon", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setRightIcon(@DrawableRes int id) {        setRightIcon(ContextCompat.getDrawable(getContext(), id));        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setRightIcon", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setRightIcon(Drawable drawable) {        mRightView.setCompoundDrawablesWithIntrinsicBounds(null, null, drawable, null);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getRightIcon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "    public Drawable getRightIcon() {        return mRightView.getCompoundDrawables()[2];    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLeftColor", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLeftColor(@ColorInt int color) {        mLeftView.setTextColor(color);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setRightColor", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setRightColor(@ColorInt int color) {        mRightView.setTextColor(color);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLeftSize", "params": ["int", "float"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLeftSize(int unit, float size) {        mLeftView.setTextSize(unit, size);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setRightSize", "params": ["int", "float"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setRightSize(int unit, float size) {        mRightView.setTextSize(unit, size);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLineVisible", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLineVisible(boolean visible) {        mLineView.setVisibility(visible ? VISIBLE : GONE);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLineColor", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLineColor(@ColorInt int color) {        return setLineDrawable(new ColorDrawable(color));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLineDrawable", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLineDrawable(Drawable drawable) {        mLineView.setBackground(drawable);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLineSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLineSize(int size) {        ViewGroup.LayoutParams layoutParams = mLineView.getLayoutParams();        layoutParams.height = size;        mLineView.setLayoutParams(layoutParams);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setLineMargin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "SettingBar", "snippet": "    public SettingBar setLineMargin(int margin) {        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) mLineView.getLayoutParams();        params.leftMargin = margin;        params.rightMargin = margin;        mLineView.setLayoutParams(params);        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getMainLayout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LinearLayout", "snippet": "    public LinearLayout getMainLayout() {        return mMainLayout;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLeftView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TextView", "snippet": "    public TextView getLeftView() {        return mLeftView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getRightView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TextView", "snippet": "    public TextView getRightView() {        return mRightView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLineView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getLineView() {        return mLineView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/SettingBar.java", "stars": "1", "class": {"name": "SettingBar", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "kosongkan_foam", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void kosongkan_foam(){    txtKodeKonsumen.setEditable(true);    cbKodeMontir.setSelectedItem(this);      txtKodeKonsumen.setText(null);    txtKodeMobil.setText(null);    txtKodeTransaksi.setText(null);    txtTanggalTransaksi.setText(null);    txtTotalTransaksi.setText(null);}", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "tampilkan_data", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "private void tampilkan_data(){                DefaultTableModel model = new DefaultTableModel();        model.addColumn(\"No.\");        model.addColumn(\"Kode Montir\");        model.addColumn(\"Kode Konsumen\");        model.addColumn(\"Kode Mobil\");        model.addColumn(\"Kode Transaksi\");        model.addColumn(\"Tanggal Transaksi\");        model.addColumn(\"Total Transaksi\");                try{            int no = 1;            String sql = \"SELECT * FROM tb_biaya\";            java.sql.Connection conn = (Connection)koneksi.getkoneksi();            java.sql.Statement stm = conn.createStatement();            java.sql.ResultSet res = stm.executeQuery(sql);                        while(res.next()){                model.addRow(new Object[]{no++,res.getString(1),res.getString(2),res.getString(3),res.getString(4),res.getString(5),res.getString(6)});            }            tabelBiaya.setModel(model);        }catch (SQLException e){            System.out.println(\"Error : \" + e.getMessage());        }            }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "initComponents", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initComponents() {        jLabel1 = new javax.swing.JLabel();        jLabel3 = new javax.swing.JLabel();        jLabel4 = new javax.swing.JLabel();        jLabel5 = new javax.swing.JLabel();        jLabel6 = new javax.swing.JLabel();        jLabel7 = new javax.swing.JLabel();        jLabel8 = new javax.swing.JLabel();        jScrollPane1 = new javax.swing.JScrollPane();        tabelBiaya = new javax.swing.JTable();        txtKodeKonsumen = new javax.swing.JTextField();        txtKodeMobil = new javax.swing.JTextField();        txtKodeTransaksi = new javax.swing.JTextField();        txtTanggalTransaksi = new javax.swing.JTextField();        txtTotalTransaksi = new javax.swing.JTextField();        btSimpan = new javax.swing.JButton();        btHapus = new javax.swing.JButton();        btEdit = new javax.swing.JButton();        btKeluar = new javax.swing.JButton();        cbKodeMontir = new javax.swing.JComboBox<String>();        btTambah = new javax.swing.JButton();        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());        jLabel1.setFont(new java.awt.Font(\"Tahoma\", 0, 36)); // NOI18N        jLabel1.setText(\"BIAYA\");        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(268, 28, -1, -1));        jLabel3.setText(\"Kode Montir\");        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 96, -1, -1));        jLabel4.setText(\"Kode Konsumen\");        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 131, -1, -1));        jLabel5.setText(\"Kode Mobil\");        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 169, -1, -1));        jLabel6.setText(\"Kode Transaksi\");        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 207, -1, -1));        jLabel7.setText(\"Tanggal Transaksi\");        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 245, -1, -1));        jLabel8.setText(\"Total Transaksi\");        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 283, -1, -1));        tabelBiaya.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null, null, null},                {null, null, null, null},                {null, null, null, null},                {null, null, null, null}            },            new String [] {                \"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\"            }        ));        tabelBiaya.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                tabelBiayaMouseClicked(evt);            }        });        jScrollPane1.setViewportView(tabelBiaya);        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 374, 436, 104));        txtKodeKonsumen.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                txtKodeKonsumenActionPerformed(evt);            }        });        getContentPane().add(txtKodeKonsumen, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 128, 319, -1));        getContentPane().add(txtKodeMobil, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 166, 319, -1));        getContentPane().add(txtKodeTransaksi, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 204, 319, -1));        getContentPane().add(txtTanggalTransaksi, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 242, 319, -1));        getContentPane().add(txtTotalTransaksi, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 280, 319, -1));        btSimpan.setText(\"Simpan\");        btSimpan.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btSimpanActionPerformed(evt);            }        });        getContentPane().add(btSimpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 333, -1, -1));        btHapus.setText(\"Hapus\");        btHapus.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btHapusActionPerformed(evt);            }        });        getContentPane().add(btHapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(396, 333, -1, -1));        btEdit.setText(\"Edit\");        btEdit.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btEditActionPerformed(evt);            }        });        getContentPane().add(btEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 333, -1, -1));        btKeluar.setText(\"Keluar\");        btKeluar.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btKeluarActionPerformed(evt);            }        });        getContentPane().add(btKeluar, new org.netbeans.lib.awtextra.AbsoluteConstraints(477, 333, -1, -1));        cbKodeMontir.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"M007\", \"M067\", \"M069\", \"M076\" }));        getContentPane().add(cbKodeMontir, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 90, -1, -1));        btTambah.setText(\"Tambah\");        btTambah.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btTambahActionPerformed(evt);            }        });        getContentPane().add(btTambah, new org.netbeans.lib.awtextra.AbsoluteConstraints(153, 333, -1, -1));        pack();    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btKeluarActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btKeluarActionPerformed        // TODO add your handling code here:        System.exit(0);    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btTambahActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTambahActionPerformed        // TODO add your handling code here:        kosongkan_foam();    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btSimpanActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSimpanActionPerformed        // TODO add your handling code here:        try{            String sql = \"INSERT INTO tb_biaya VALUES ('\"+cbKodeMontir.getSelectedItem()+\"','\"+txtKodeKonsumen.getText()+\"','\"+txtKodeMobil.getText()+\"','\"+txtKodeTransaksi.getText()+\"','\"+txtTanggalTransaksi.getText()+\"','\"+txtTotalTransaksi.getText()+\"')\";            java.sql.Connection conn = (Connection)koneksi.getkoneksi();            java.sql.PreparedStatement pstm = conn.prepareStatement(sql);            pstm.execute();            JOptionPane.showMessageDialog(null,\"Simpan data berhasil..\");            tampilkan_data();            kosongkan_foam();        }catch (HeadlessException | SQLException e){            JOptionPane.showMessageDialog(this,e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btEditActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditActionPerformed        // TODO add your handling code here:        try{            String sql = \"UPDATE tb_biaya SET kode_montir='\"+cbKodeMontir.getSelectedItem()+\"',kode_konsumen='\"+txtKodeKonsumen.getText()+\"',kode_mobil='\"+txtKodeMobil.getText()+\"',kode_transaksi='\"+txtKodeTransaksi.getText()+\"',tgl_transaksi='\"+txtTanggalTransaksi.getText()+\"',total_transaksi='\"+txtTotalTransaksi.getText()+\"' WHERE kode_konsumen = '\"+txtKodeKonsumen.getText()+\"'\";            java.sql.Connection conn = (Connection)koneksi.getkoneksi();            java.sql.PreparedStatement pstm = conn.prepareStatement(sql);            pstm.execute();            JOptionPane.showMessageDialog(null,\"Edit data berhasil..\");            tampilkan_data();            kosongkan_foam();        }catch(HeadlessException | SQLException e){            JOptionPane.showMessageDialog(this,e.getMessage());        }            }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "tabelBiayaMouseClicked", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tabelBiayaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelBiayaMouseClicked        // TODO add your handling code here:        int baris = tabelBiaya.rowAtPoint(evt.getPoint());        String jab = tabelBiaya.getValueAt(baris, 1).toString();        cbKodeMontir.setSelectedItem(jab);                String ksmn = tabelBiaya.getValueAt(baris, 2).toString();        txtKodeKonsumen.setText(ksmn);                String mobil = tabelBiaya.getValueAt(baris, 3).toString();        txtKodeMobil.setText(mobil);                String kdtr = tabelBiaya.getValueAt(baris, 4).toString();        txtKodeTransaksi.setText(kdtr);                String tgltr = tabelBiaya.getValueAt(baris, 5).toString();        txtTanggalTransaksi.setText(tgltr);                String ttr = tabelBiaya.getValueAt(baris, 6).toString();        txtTotalTransaksi.setText(ttr);    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btHapusActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHapusActionPerformed        // TODO add your handling code here:        try{            String sql = \"DELETE FROM tb_biaya WHERE kode_konsumen = '\"+txtKodeKonsumen.getText()+\"'\";            java.sql.Connection conn = (Connection)koneksi.getkoneksi();            java.sql.PreparedStatement pstm = conn.prepareStatement(sql);            pstm.execute();            JOptionPane.showMessageDialog(null,\"HAPUS data berhasil..\");            tampilkan_data();            kosongkan_foam();        }catch(HeadlessException | SQLException e){            JOptionPane.showMessageDialog(this,e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "txtKodeKonsumenActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void txtKodeKonsumenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKodeKonsumenActionPerformed        // TODO add your handling code here:    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String args[]) {        /* Set the Nimbus look and feel */        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html          */        try {            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {                if (\"Nimbus\".equals(info.getName())) {                    javax.swing.UIManager.setLookAndFeel(info.getClassName());                    break;                }            }        } catch (ClassNotFoundException ex) {            java.util.logging.Logger.getLogger(tb_biaya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        } catch (InstantiationException ex) {            java.util.logging.Logger.getLogger(tb_biaya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        } catch (IllegalAccessException ex) {            java.util.logging.Logger.getLogger(tb_biaya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        } catch (javax.swing.UnsupportedLookAndFeelException ex) {            java.util.logging.Logger.getLogger(tb_biaya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        }        //</editor-fold>        /* Create and display the form */        java.awt.EventQueue.invokeLater(new Runnable() {            public void run() {                new tb_biaya().setVisible(true);            }        });    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_biaya.java", "stars": "2", "class": {"name": "tb_biaya", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "prePrintBannerText", "params": ["PrintStream", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void prePrintBannerText(PrintStream printStream, String bannerText, String bannerFont) {    printStream.println(BananaUtils.bananaify(Const.BANNER_TEXT, bannerFont));  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerBanner.java", "stars": "3", "class": {"name": "NettyServerBanner", "extends": "BannerTemplate", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpPadding", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String setUpPadding(Integer strapLineSize) {    final StringBuilder padding = new StringBuilder();    while (padding.length() < strapLineSize - (Const.CRISPY_VERSION.length() + Const.CRISPY_FRAMEWORK.length())) {      padding.append(Const.SPACE);    }    return padding.toString();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerBanner.java", "stars": "3", "class": {"name": "NettyServerBanner", "extends": "BannerTemplate", "implements": null, "modifiers": ["public"]}}, {"method_name": "printTextAndVersion", "params": ["PrintStream", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void printTextAndVersion(PrintStream printStream, String padding) {    printStream.println(AnsiOutput.toString(AnsiColor.GREEN, Const.CRISPY_FRAMEWORK,            AnsiColor.RESET, padding, Const.CRISPY_VERSION));    printStream.println();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerBanner.java", "stars": "3", "class": {"name": "NettyServerBanner", "extends": "BannerTemplate", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "\tpublic Long getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(Long id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNome", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getNome() {\t\treturn nome;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNome", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setNome(String nome) {\t\tthis.nome = nome;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getEmail() {\t\treturn email;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setEmail(String email) {\t\tthis.email = email;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSenha", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getSenha() {\t\treturn senha;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSenha", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setSenha(String senha) {\t\tthis.senha = senha;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfirmacaoSenha", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getConfirmacaoSenha() {\t\treturn confirmacaoSenha;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setConfirmacaoSenha", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setConfirmacaoSenha(String confirmacaoSenha) {\t\tthis.confirmacaoSenha = confirmacaoSenha;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAtivo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getAtivo() {\t\treturn ativo;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAtivo", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAtivo(int ativo) {\t\tthis.ativo = ativo;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int hashCode() {\t\tfinal int prime = 31;\t\tint result = 1;\t\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean equals(Object obj) {\t\tif (this == obj)\t\t\treturn true;\t\tif (obj == null)\t\t\treturn false;\t\tif (getClass() != obj.getClass())\t\t\treturn false;\t\tUsuario other = (Usuario) obj;\t\tif (id == null) {\t\t\tif (other.id != null)\t\t\t\treturn false;\t\t} else if (!id.equals(other.id))\t\t\treturn false;\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Usuario.java", "stars": "1", "class": {"name": "Usuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getList", "params": ["Movie", "Callback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getList(final Movie movie, final Callback callback) {        login(new XMLRPCCallback() {            @Override            public void onResponse(long id, Object result) {                Map<String, Object> response = (Map<String, Object>) result;                String token = (String) response.get(\"token\");                if (token != null && !token.isEmpty()) {                    search(movie, token, new XMLRPCCallback() {                        @Override                        public void onResponse(long id, Object result) {                            Map<String, Integer[]> scoreMap = new HashMap<>();                            Map<String, String> subsMap = new HashMap<>();                            Map<String, Object> subData = (Map<String, Object>) result;                            if (subData != null && subData.get(\"data\") != null && subData.get(\"data\") instanceof Object[]) {                                Object[] dataList = (Object[]) subData.get(\"data\");                                for (Object dataItem : dataList) {                                    Map<String, String> item = (Map<String, String>) dataItem;                                    if (!item.get(\"SubFormat\").equals(\"srt\")) {                                        continue;                                    }                                    // imdb & year check                                    if (Integer.parseInt(item.get(\"IDMovieImdb\")) != Integer.parseInt(movie.imdbId.replace(\"tt\", \"\"))) {                                        continue;                                    }                                    if (!item.get(\"MovieYear\").equals(movie.year)) {                                        continue;                                    }                                    String url = item.get(\"SubDownloadLink\").replace(\".gz\", \".srt\");                                    String lang = item.get(\"ISO639\").replace(\"pb\", \"pt-br\");                                    int downloads = Integer.parseInt(item.get(\"SubDownloadsCnt\"));                                    int score = 0;                                    if (item.get(\"MatchedBy\").equals(\"tag\")) {                                        score += 50;                                    }                                    if (item.get(\"UserRank\").equals(\"trusted\")) {                                        score += 100;                                    }                                    if (!subsMap.containsKey(lang)) {                                        subsMap.put(lang, url);                                        scoreMap.put(lang, new Integer[]{score, downloads});                                    } else if (score > scoreMap.get(lang)[0] || (score == scoreMap.get(lang)[0] && downloads > scoreMap.get(lang)[1])) {                                        subsMap.put(lang, url);                                        scoreMap.put(lang, new Integer[]{score, downloads});                                    }                                }                                callback.onSuccess(subsMap);                            } else {                                callback.onFailure(new XMLRPCException(\"No subs found\"));                                removeCall(id);                            }                        }                        @Override                        public void onError(long id, XMLRPCException error) {                            callback.onFailure(error);                            removeCall(id);                        }                        @Override                        public void onServerError(long id, XMLRPCServerException error) {                            callback.onFailure(error);                            removeCall(id);                        }                    });                } else {                    callback.onFailure(new XMLRPCException(\"Token not correct\"));                }            }            @Override            public void onError(long id, XMLRPCException error) {                callback.onFailure(error);                removeCall(id);            }            @Override            public void onServerError(long id, XMLRPCServerException error) {                callback.onFailure(error);                removeCall(id);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/open/OpenSubsProvider.java", "stars": "4", "class": {"name": "OpenSubsProvider", "extends": "SubsProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getList", "params": ["Episode", "Callback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getList(final Episode episode, final Callback callback) {        login(new XMLRPCCallback() {            @Override            public void onResponse(long id, Object result) {                Map<String, Object> response = (Map<String, Object>) result;                String token = (String) response.get(\"token\");                final String episodeStr = Integer.toString(episode.episode);                final String seasonStr = Integer.toString(episode.season);                if (token != null && !token.isEmpty()) {                    search(episode, token, new XMLRPCCallback() {                        @Override                        public void onResponse(long id, Object result) {                            Map<String, Map<String, String>> returnMap = new HashMap<>();                            Map<String, Integer[]> scoreMap = new HashMap<>();                            Map<String, String> episodeMap = new HashMap<>();                            Map<String, Object> subData = (Map<String, Object>) result;                            if (subData != null && subData.get(\"data\") != null && subData.get(\"data\") instanceof Object[]) {                                Object[] dataList = (Object[]) subData.get(\"data\");                                for (Object dataItem : dataList) {                                    Map<String, String> item = (Map<String, String>) dataItem;                                    if (!item.get(\"SubFormat\").equals(\"srt\")) {                                        continue;                                    }                                    // episode check                                    if (Integer.parseInt(item.get(\"SeriesIMDBParent\")) != Integer.parseInt(episode.imdbId.replace(\"tt\", \"\"))) {                                        continue;                                    }                                    if (!item.get(\"SeriesSeason\").equals(seasonStr)) {                                        continue;                                    }                                    if (!item.get(\"SeriesEpisode\").equals(episodeStr)) {                                        continue;                                    }                                    String url = item.get(\"SubDownloadLink\").replace(\".gz\", \".srt\");                                    String lang = item.get(\"ISO639\").replace(\"pb\", \"pt-br\");                                    int downloads = Integer.parseInt(item.get(\"SubDownloadsCnt\"));                                    int score = 0;                                    if (item.get(\"MatchedBy\").equals(\"tag\")) {                                        score += 50;                                    }                                    if (item.get(\"UserRank\").equals(\"trusted\")) {                                        score += 100;                                    }                                    if (!episodeMap.containsKey(lang)) {                                        episodeMap.put(lang, url);                                        scoreMap.put(lang, new Integer[]{score, downloads});                                    } else if (score > scoreMap.get(lang)[0] || (score == scoreMap.get(lang)[0] && downloads > scoreMap.get(lang)[1])) {                                        episodeMap.put(lang, url);                                        scoreMap.put(lang, new Integer[]{score, downloads});                                    }                                }                                returnMap.put(episode.videoId, episodeMap);                                callback.onSuccess(returnMap.get(episode.videoId));                            } else {                                callback.onFailure(new XMLRPCException(\"No subs found\"));                                removeCall(id);                            }                        }                        @Override                        public void onError(long id, XMLRPCException error) {                            callback.onFailure(error);                            removeCall(id);                        }                        @Override                        public void onServerError(long id, XMLRPCServerException error) {                            callback.onFailure(error);                            removeCall(id);                        }                    });                } else {                    callback.onFailure(new XMLRPCException(\"Token not correct\"));                }            }            @Override            public void onError(long id, XMLRPCException error) {                callback.onFailure(error);                removeCall(id);            }            @Override            public void onServerError(long id, XMLRPCServerException error) {                callback.onFailure(error);                removeCall(id);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/open/OpenSubsProvider.java", "stars": "4", "class": {"name": "OpenSubsProvider", "extends": "SubsProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancel() {        super.cancel();        synchronized (ongoingCalls) {            for (Long ongoingCall : ongoingCalls) {                client.cancel(ongoingCall);            }            ongoingCalls.clear();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/open/OpenSubsProvider.java", "stars": "4", "class": {"name": "OpenSubsProvider", "extends": "SubsProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeCall", "params": ["long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void removeCall(long callId) {        synchronized (ongoingCalls) {            ongoingCalls.remove(callId);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/open/OpenSubsProvider.java", "stars": "4", "class": {"name": "OpenSubsProvider", "extends": "SubsProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": ["XMLRPCCallback"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void login(XMLRPCCallback callback) {        long callId = client.callAsync(callback, \"LogIn\", \"\", \"\", \"en\", USER_AGENT);        synchronized (ongoingCalls) {            ongoingCalls.add(callId);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/open/OpenSubsProvider.java", "stars": "4", "class": {"name": "OpenSubsProvider", "extends": "SubsProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "search", "params": ["Episode", "String", "XMLRPCCallback"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void search(Episode episode, String token, XMLRPCCallback callback) {        Map<String, String> option = new HashMap<>();        option.put(\"imdbid\", episode.imdbId.replace(\"tt\", \"\"));        option.put(\"season\", String.format(Locale.US, \"%d\", episode.season));        option.put(\"episode\", String.format(Locale.US, \"%d\", episode.episode));        option.put(\"sublanguageid\", \"all\");        long callId = client.callAsync(callback, \"SearchSubtitles\", token, new Object[]{option});        synchronized (ongoingCalls) {            ongoingCalls.add(callId);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/open/OpenSubsProvider.java", "stars": "4", "class": {"name": "OpenSubsProvider", "extends": "SubsProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "search", "params": ["Movie", "String", "XMLRPCCallback"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void search(Movie movie, String token, XMLRPCCallback callback) {        Map<String, String> option = new HashMap<>();        option.put(\"imdbid\", movie.imdbId.replace(\"tt\", \"\"));        option.put(\"sublanguageid\", \"all\");        long callId = client.callAsync(callback, \"SearchSubtitles\", token, new Object[]{option});        synchronized (ongoingCalls) {            ongoingCalls.add(callId);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/open/OpenSubsProvider.java", "stars": "4", "class": {"name": "OpenSubsProvider", "extends": "SubsProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettWallBlock.java", "stars": "2", "class": {"name": "MossySettWallBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettWallBlock.java", "stars": "2", "class": {"name": "MossySettWallBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "func_220113_a", "params": ["BlockState", "boolean", "Direction"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\t\tprivate boolean func_220113_a(BlockState state, boolean checkattach, Direction face) {\t\t\tboolean flag = state.getBlock() instanceof WallBlock\t\t\t\t\t|| state.getBlock() instanceof FenceGateBlock && FenceGateBlock.isParallel(state, face);\t\t\treturn !cannotAttach(state.getBlock()) && checkattach || flag;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getStateForPlacement", "params": ["BlockItemUseContext"], "throws": null, "modifiers": ["public"], "return_type": "BlockState", "snippet": "\t\tpublic BlockState getStateForPlacement(BlockItemUseContext context) {\t\t\tIWorldReader iworldreader = context.getWorld();\t\t\tBlockPos blockpos = context.getPos();\t\t\tIFluidState ifluidstate = context.getWorld().getFluidState(context.getPos());\t\t\tBlockPos blockpos1 = blockpos.north();\t\t\tBlockPos blockpos2 = blockpos.east();\t\t\tBlockPos blockpos3 = blockpos.south();\t\t\tBlockPos blockpos4 = blockpos.west();\t\t\tBlockState blockstate = iworldreader.getBlockState(blockpos1);\t\t\tBlockState blockstate1 = iworldreader.getBlockState(blockpos2);\t\t\tBlockState blockstate2 = iworldreader.getBlockState(blockpos3);\t\t\tBlockState blockstate3 = iworldreader.getBlockState(blockpos4);\t\t\tboolean flag = this.func_220113_a(blockstate, blockstate.isSolidSide(iworldreader, blockpos1, Direction.SOUTH), Direction.SOUTH);\t\t\tboolean flag1 = this.func_220113_a(blockstate1, blockstate1.isSolidSide(iworldreader, blockpos2, Direction.WEST), Direction.WEST);\t\t\tboolean flag2 = this.func_220113_a(blockstate2, blockstate2.isSolidSide(iworldreader, blockpos3, Direction.NORTH), Direction.NORTH);\t\t\tboolean flag3 = this.func_220113_a(blockstate3, blockstate3.isSolidSide(iworldreader, blockpos4, Direction.EAST), Direction.EAST);\t\t\tboolean flag4 = (!flag || flag1 || !flag2 || flag3) && (flag || !flag1 || flag2 || !flag3);\t\t\treturn this.getDefaultState().with(UP, Boolean.valueOf(flag4 || !iworldreader.isAirBlock(blockpos.up())))\t\t\t\t\t.with(NORTH, Boolean.valueOf(flag)).with(EAST, Boolean.valueOf(flag1)).with(SOUTH, Boolean.valueOf(flag2))\t\t\t\t\t.with(WEST, Boolean.valueOf(flag3)).with(WATERLOGGED, Boolean.valueOf(ifluidstate.getFluid() == Fluids.WATER));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "updatePostPlacement", "params": ["BlockState", "Direction", "BlockState", "IWorld", "BlockPos", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "BlockState", "snippet": "\t\tpublic BlockState updatePostPlacement(BlockState stateIn, Direction facing, BlockState facingState, IWorld worldIn, BlockPos currentPos,\t\t\t\tBlockPos facingPos) {\t\t\tif (stateIn.get(WATERLOGGED)) {\t\t\t\tworldIn.getPendingFluidTicks().scheduleTick(currentPos, Fluids.WATER, Fluids.WATER.getTickRate(worldIn));\t\t\t}\t\t\tif (facing == Direction.DOWN) {\t\t\t\treturn super.updatePostPlacement(stateIn, facing, facingState, worldIn, currentPos, facingPos);\t\t\t} else {\t\t\t\tDirection direction = facing.getOpposite();\t\t\t\tboolean flag = facing == Direction.NORTH\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(NORTH);\t\t\t\tboolean flag1 = facing == Direction.EAST\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(EAST);\t\t\t\tboolean flag2 = facing == Direction.SOUTH\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(SOUTH);\t\t\t\tboolean flag3 = facing == Direction.WEST\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(WEST);\t\t\t\tboolean flag4 = (!flag || flag1 || !flag2 || flag3) && (flag || !flag1 || flag2 || !flag3);\t\t\t\treturn stateIn.with(UP, Boolean.valueOf(flag4 || !worldIn.isAirBlock(currentPos.up()))).with(NORTH, Boolean.valueOf(flag))\t\t\t\t\t\t.with(EAST, Boolean.valueOf(flag1)).with(SOUTH, Boolean.valueOf(flag2)).with(WEST, Boolean.valueOf(flag3));\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPositionForSection", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getPositionForSection (int p0)\t{\t\treturn n_getPositionForSection (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GroupedListViewAdapter.java", "stars": "2", "class": {"name": "GroupedListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getPositionForSection", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getPositionForSection (int p0);\tpublic int getSectionForPosition (int p0)\t{\t\treturn n_getSectionForPosition (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GroupedListViewAdapter.java", "stars": "2", "class": {"name": "GroupedListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getSectionForPosition", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getSectionForPosition (int p0)\t{\t\treturn n_getSectionForPosition (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GroupedListViewAdapter.java", "stars": "2", "class": {"name": "GroupedListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getSectionForPosition", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getSectionForPosition (int p0);\tpublic java.lang.Object[] getSections ()\t{\t\treturn n_getSections ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GroupedListViewAdapter.java", "stars": "2", "class": {"name": "GroupedListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getSections", "params": [], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "\tpublic java.lang.Object[] getSections ()\t{\t\treturn n_getSections ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GroupedListViewAdapter.java", "stars": "2", "class": {"name": "GroupedListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getSections", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "java", "snippet": "\tprivate native java.lang.Object[] n_getSections ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GroupedListViewAdapter.java", "stars": "2", "class": {"name": "GroupedListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GroupedListViewAdapter.java", "stars": "2", "class": {"name": "GroupedListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GroupedListViewAdapter.java", "stars": "2", "class": {"name": "GroupedListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"AST_Node{\" +                \"name='\" + name + '\\'' +                \", value='\" + value + '\\'' +                \", children=\" + children +                '}';    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/parser/AST_Node.java", "stars": "2", "class": {"name": "AST_Node", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lock", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void lock(){        globallock.lock();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/utils/HdfsUserGroupInfoLock.java", "stars": "23", "class": {"name": "HdfsUserGroupInfoLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unlock", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void unlock(){        globallock.unlock();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/utils/HdfsUserGroupInfoLock.java", "stars": "23", "class": {"name": "HdfsUserGroupInfoLock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        //\u4f7f\u7528\u6b7b\u5faa\u73af,\u8ba9\u5403\u8d27\u4e00\u76f4\u5403\u5305\u5b50        while (true){            //\u5fc5\u987b\u540c\u65f6\u540c\u6b65\u6280\u672f\u4fdd\u8bc1\u4e24\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u5728\u6267\u884c            synchronized (bz){                //\u5bf9\u5305\u5b50\u7684\u72b6\u6001\u8fdb\u884c\u5224\u65ad                if(bz.flag==false){                    //\u5403\u8d27\u8c03\u7528wait\u65b9\u6cd5\u8fdb\u5165\u7b49\u5f85\u72b6\u6001                    try {                        bz.wait();                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }                //\u88ab\u5524\u9192\u4e4b\u540e\u6267\u884c\u7684\u4ee3\u7801,\u5403\u5305\u5b50                System.out.println(\"\u5403\u8d27\u6b63\u5728\u5403:\"+bz.pi+bz.xian+\"\u7684\u5305\u5b50\");                //\u5403\u8d27\u5403\u5b8c\u5305\u5b50                //\u4fee\u6539\u5305\u5b50\u7684\u72b6\u6001\u4e3afalse\u6ca1\u6709                bz.flag = false;                //\u5403\u8d27\u5524\u9192\u5305\u5b50\u94fa\u7ebf\u7a0b,\u751f\u4ea7\u5305\u5b50                bz.notify();                System.out.println(\"\u5403\u8d27\u5df2\u7ecf\u628a:\"+bz.pi+bz.xian+\"\u7684\u5305\u5b50\u5403\u5b8c\u4e86,\u5305\u5b50\u94fa\u5f00\u59cb\u751f\u4ea7\u5305\u5b50\");                System.out.println(\"----------------------------------------------------\");            }        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/18.%E3%80%90%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%91-%E7%AC%94%E8%AE%B0/code/07_ThreadAndLambda/src/com/itheima/demo01/WaitAndNotify/ChiHuo.java", "stars": "2", "class": {"name": "ChiHuo", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["PropertyTokenizer"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object get(PropertyTokenizer prop) {    if (prop.getIndex() != null) {      Object collection = resolveCollection(prop, object);      return getCollectionValue(prop, collection);    } else {      return getBeanProperty(prop, object);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["PropertyTokenizer", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void set(PropertyTokenizer prop, Object value) {    if (prop.getIndex() != null) {      Object collection = resolveCollection(prop, object);      setCollectionValue(prop, collection, value);    } else {      setBeanProperty(prop, object, value);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "findProperty", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String findProperty(String name, boolean useCamelCaseMapping) {    return metaClass.findProperty(name, useCamelCaseMapping);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGetterNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String[] getGetterNames() {    return metaClass.getGetterNames();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSetterNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String[] getSetterNames() {    return metaClass.getSetterNames();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSetterType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getSetterType(String name) {    PropertyTokenizer prop = new PropertyTokenizer(name);    if (prop.hasNext()) {      MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());      if (metaValue == SystemMetaObject.NULL_META_OBJECT) {        return metaClass.getSetterType(name);      } else {        return metaValue.getSetterType(prop.getChildren());      }    } else {      return metaClass.getSetterType(name);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGetterType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getGetterType(String name) {    PropertyTokenizer prop = new PropertyTokenizer(name);    if (prop.hasNext()) {      MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());      if (metaValue == SystemMetaObject.NULL_META_OBJECT) {        return metaClass.getGetterType(name);      } else {        return metaValue.getGetterType(prop.getChildren());      }    } else {      return metaClass.getGetterType(name);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasSetter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasSetter(String name) {    PropertyTokenizer prop = new PropertyTokenizer(name);    if (prop.hasNext()) {      if (metaClass.hasSetter(prop.getIndexedName())) {        MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());        if (metaValue == SystemMetaObject.NULL_META_OBJECT) {          return metaClass.hasSetter(name);        } else {          return metaValue.hasSetter(prop.getChildren());        }      } else {        return false;      }    } else {      return metaClass.hasSetter(name);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasGetter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasGetter(String name) {    PropertyTokenizer prop = new PropertyTokenizer(name);    if (prop.hasNext()) {      if (metaClass.hasGetter(prop.getIndexedName())) {        MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());        if (metaValue == SystemMetaObject.NULL_META_OBJECT) {          return metaClass.hasGetter(name);        } else {          return metaValue.hasGetter(prop.getChildren());        }      } else {        return false;      }    } else {      return metaClass.hasGetter(name);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "instantiatePropertyValue", "params": ["String", "PropertyTokenizer", "ObjectFactory"], "throws": null, "modifiers": ["public"], "return_type": "MetaObject", "snippet": "  public MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory) {    MetaObject metaValue;    Class<?> type = getSetterType(prop.getName());    try {      Object newObject = objectFactory.create(type);      metaValue = MetaObject.forObject(newObject, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory(), metaObject.getReflectorFactory());      set(prop, newObject);    } catch (Exception e) {      throw new ReflectionException(\"Cannot set value of property '\" + name + \"' because '\" + name + \"' is null and cannot be instantiated on instance of \" + type.getName() + \". Cause:\" + e.toString(), e);    }    return metaValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBeanProperty", "params": ["PropertyTokenizer", "Object"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "  private Object getBeanProperty(PropertyTokenizer prop, Object object) {    try {      Invoker method = metaClass.getGetInvoker(prop.getName());      try {        return method.invoke(object, NO_ARGUMENTS);      } catch (Throwable t) {        throw ExceptionUtil.unwrapThrowable(t);      }    } catch (RuntimeException e) {      throw e;    } catch (Throwable t) {      throw new ReflectionException(\"Could not get property '\" + prop.getName() + \"' from \" + object.getClass() + \".  Cause: \" + t.toString(), t);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBeanProperty", "params": ["PropertyTokenizer", "Object", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setBeanProperty(PropertyTokenizer prop, Object object, Object value) {    try {      Invoker method = metaClass.getSetInvoker(prop.getName());      Object[] params = {value};      try {        method.invoke(object, params);      } catch (Throwable t) {        throw ExceptionUtil.unwrapThrowable(t);      }    } catch (Throwable t) {      throw new ReflectionException(\"Could not set property '\" + prop.getName() + \"' of '\" + object.getClass() + \"' with value '\" + value + \"' Cause: \" + t.toString(), t);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "isCollection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isCollection() {    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void add(Object element) {    throw new UnsupportedOperationException();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["List<E>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public <E> void addAll(List<E> list) {    throw new UnsupportedOperationException();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java", "stars": "15", "class": {"name": "BeanWrapper", "extends": "BaseWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "IntArray", "snippet": "\tpublic final IntArray clone() {\t\tIntArray out = new IntArray(nElements,bitsPerInt,true);\t\tlong[] outArray = out.array;\t\tfor (int i=0; i<=lastCell; i++) outArray[i]=array[i];\t\treturn out;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": ["int"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void clear(int forceLastOffset) {\t\tlastCell=0;\t\tlastOffset=forceLastOffset;\t\tnElements=0;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void clear() {\t\tlastCell=0;\t\tlastOffset=0;\t\tnElements=0;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reverse", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void reverse() {\t\tfor (int i=0; i<=lastCell; i++) array[i]=Long.reverse(array[i]);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deallocate", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void deallocate() {\t\tarray=null;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "length", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long length() {\t\treturn nElements;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "print", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void print() {\t\t//System.out.println(\"bitsPerInt=\"+bitsPerInt+\" nElements=\"+nElements);//+\" lastCell=\"+lastCell+\" lastOffset=\"+lastOffset);\t\t//for (int i=0; i<nElements; i++) System.out.println(i+\": \"+getElementAt(i));\t\tfor (long i=0; i<nElements; i++) System.out.print(getElementAt(i)+\" \");\t\tSystem.out.println();\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printBits", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void printBits() {\t\t//System.out.println(\"bitsPerInt=\"+bitsPerInt+\" nElements=\"+nElements+\" lastCell=\"+lastCell+\" lastOffset=\"+lastOffset);\t\tfor (int i=0; i<=lastCell; i++) System.out.print(Long.toBinaryString(array[i])+\"|\");\t\tSystem.out.println();\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printAsDNASuffixes", "params": ["IntArray"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "void", "snippet": "\tpublic static final void printAsDNASuffixes(IntArray string) {\t\tchar d = 'n';\t\tlong i, j, c, stringLength, suffix;\t\tString label;\t\tstringLength=string.length();\t\tfor (i=0; i<stringLength; i++) {\t\t\tsuffix=string.getElementAt(i);\t\t\tlabel=suffix+\"\";\t\t\twhile (label.length()<3) label=\" \"+label;\t\t\tSystem.out.print(label+\": \");\t\t\tfor (j=0; j<stringLength; j++) {\t\t\t\tif (suffix+j==stringLength) System.out.print(\"$\");\t\t\t\telse {\t\t\t\t\tc=string.getElementAt((suffix+j)%stringLength);\t\t\t\t\tswitch ((int)c) {\t\t\t\t\t\tcase 0: d='a'; break;\t\t\t\t\t\tcase 1: d='c'; break;\t\t\t\t\t\tcase 2: d='g'; break;\t\t\t\t\t\tcase 3: d='t'; break;\t\t\t\t\t}\t\t\t\t\tSystem.out.print(d+\"\");\t\t\t\t}\t\t\t}\t\t\tSystem.out.println();\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printAsDNA", "params": ["IntArray"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "void", "snippet": "\tpublic static final void printAsDNA(IntArray string) {\t\tchar d = 'n';\t\tlong i, c, stringLength;\t\tstringLength=string.length();\t\tfor (i=0; i<stringLength; i++) {\t\t\tc=string.getElementAt(i);\t\t\tswitch ((int)c) {\t\t\t\tcase 0: d='a'; break;\t\t\t\tcase 1: d='c'; break;\t\t\t\tcase 2: d='g'; break;\t\t\t\tcase 3: d='t'; break;\t\t\t}\t\t\tSystem.out.print(d+\"\");\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPointer", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void setPointer(long i) {\t\ti<<=log2BitsPerInt;\t\tpointerCell=(int)( i>>>6 );\t\tpointerOffset=(int)( i&Utils.LAST_6_BITS_LONG );\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pasteAtPointer", "params": ["IntArray"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void pasteAtPointer(IntArray block) {\t\tfinal int blockLastCell, blockLastOffset, pointerCellPlusBlockLastCell;\t\tlong source;\t\t// First cell\t\tsource=block.array[0]&Utils.shiftOnesRight[pointerOffset];\t\tblockLastCell=block.lastCell;\t\tblockLastOffset=block.lastOffset;\t\tif (blockLastCell==0) {\t\t\tsource&=Utils.shiftOnesLeft[64-blockLastOffset];\t\t\tarray[pointerCell]&=Utils.shiftOnesLeft[64-pointerOffset]|Utils.shiftOnesRight[blockLastOffset];\t\t\tarray[pointerCell]|=source;\t\t\treturn;\t\t}\t\telse {\t\t\tarray[pointerCell]&=Utils.shiftOnesLeft[64-pointerOffset];\t\t\tarray[pointerCell]|=source;\t\t}\t\t// Intermediate cells\t\tif (blockLastCell>1) System.arraycopy(block.array,1,array,pointerCell+1,blockLastCell-1);\t\t// Last cell\t\tpointerCellPlusBlockLastCell=pointerCell+blockLastCell;\t\tsource=block.array[blockLastCell]&Utils.shiftOnesLeft[64-blockLastOffset];\t\tarray[pointerCellPlusBlockLastCell]&=Utils.shiftOnesRight[blockLastOffset];\t\tarray[pointerCellPlusBlockLastCell]|=source;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "push", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void push(long value) {\t\tint tmp;\t\tsetElementAt(lastCell,lastOffset,value);\t\tif (lastOffset==sixtyFourMinusBitsPerInt) {\t\t\tlastCell++;\t\t\tlastOffset=0;\t\t}\t\telse lastOffset+=bitsPerInt;\t\tnElements++;\t\ttotalBits+=bitsPerInt;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pushFromRight", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void pushFromRight(long value) {\t\tsetElementFromRightAt(lastCell,lastOffset,value);\t\tif (lastOffset==sixtyFourMinusBitsPerInt) {\t\t\tlastCell++;\t\t\tlastOffset=0;\t\t}\t\telse lastOffset+=bitsPerInt;\t\tnElements++;\t\ttotalBits+=bitsPerInt;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pop", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long pop() {\t\tif (lastOffset<bitsPerInt) {\t\t\tlastCell--;\t\t\tlastOffset=sixtyFourMinusBitsPerInt+lastOffset;\t\t}\t\telse lastOffset-=bitsPerInt;\t\tnElements--;\t\treturn getElementAt(lastCell,lastOffset);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load63", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long load63(long i) {\t\tint cell = (int)( i>>>6 );\t\tint offset = (int)( i&Utils.LAST_6_BITS );\t\tif (cell>lastCell || (cell==lastCell&&offset>=lastOffset)) return 0x0L;\t\tif (offset==0) {\t\t\tlong out = array[cell];\t\t\tif (cell==lastCell) out&=Utils.shiftOnesLeft[64-lastOffset];\t\t\treturn out>>>1;\t\t}\t\tif (offset==1) {\t\t\tlong out = array[cell]&Utils.zeroSelectors1[63];\t\t\tif (cell==lastCell) out&=Utils.shiftOnesLeft[64-lastOffset];\t\t\treturn out;\t\t}\t\tint sixtyFourMinusOffset = 64-offset;\t\tlong out = (array[cell]<<(offset-1))&Utils.zeroSelectors1[63];\t\tif (cell<lastCell) {\t\t\tout|=array[cell+1]>>>(sixtyFourMinusOffset+1);\t\t\tif (cell==lastCell-1) {\t\t\t\tint measure = 1+sixtyFourMinusOffset+lastOffset;\t\t\t\tif (measure<64) out&=Utils.shiftOnesLeft[64-measure];\t\t\t}\t\t}\t\treturn out;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getElementAt", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long getElementAt(long i) {\t\ti<<=log2BitsPerInt;\t\treturn (array[(int)(i>>>6)]>>>64-(int)(i&Utils.LAST_6_BITS_LONG)-bitsPerInt)&oneSelectors[0];\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getElementAt", "params": ["int", "int"], "throws": null, "modifiers": ["private", "final"], "return_type": "long", "snippet": "\tprivate final long getElementAt(int cell, int offset) {\t\treturn (array[cell]>>>64-offset-bitsPerInt)&oneSelectors[0];\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setElementAt", "params": ["long", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void setElementAt(long i, long value) {\t\tfinal int cell, offset;\t\tint tmp;\t\ti<<=log2BitsPerInt;\t\tcell=(int)(i>>>6);\t\toffset=(int)(i&Utils.LAST_6_BITS_LONG);\t\tvalue&=oneSelectors[0];\t\ttmp=64-offset;\t\tif (tmp==bitsPerInt) {\t\t\tarray[cell]&=zeroSelectors[0];\t\t\tarray[cell]|=value;\t\t}\t\telse {\t\t\ttmp=sixtyFourMinusBitsPerInt-offset;//System.out.println(\"cell=\"+cell+\" offset=\"+offset+\" bitsPerInt=\"+bitsPerInt+\" tmp=\"+tmp);\t\t\tarray[cell]&=zeroSelectors[tmp];\t\t\tvalue<<=tmp;\t\t\tarray[cell]|=value;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setElementAt", "params": ["int", "int", "long"], "throws": null, "modifiers": ["private", "final"], "return_type": "void", "snippet": "\tprivate final void setElementAt(int cell, int offset, long value) {\t\tint tmp;\t\tvalue&=oneSelectors[0];\t\ttmp=64-offset;\t\tif (tmp==bitsPerInt) {\t\t\tarray[cell]&=zeroSelectors[0];\t\t\tarray[cell]|=value;\t\t}\t\telse {\t\t\ttmp=sixtyFourMinusBitsPerInt-offset;\t\t\tarray[cell]&=zeroSelectors[tmp];\t\t\tvalue<<=tmp;\t\t\tarray[cell]|=value;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setElementFromRightAt", "params": ["long", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void setElementFromRightAt(long i, long value) {\t\tfinal int cell, offset;\t\tint tmp;\t\ti<<=log2BitsPerInt;\t\tcell=(int)(i>>>6);\t\toffset=(int)(i&Utils.LAST_6_BITS_LONG);\t\tvalue&=oneSelectors[0];\t\tarray[cell]&=zeroSelectors[offset];\t\tvalue<<=offset;\t\tarray[cell]|=value;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setElementFromRightAt", "params": ["int", "int", "long"], "throws": null, "modifiers": ["private", "final"], "return_type": "void", "snippet": "\tprivate final void setElementFromRightAt(int cell, int offset, long value) {\t\tvalue&=oneSelectors[0];\t\tarray[cell]&=zeroSelectors[offset];\t\tvalue<<=offset;\t\tarray[cell]|=value;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "incrementElementAt", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void incrementElementAt(long i) {\t\tfinal int cell, offset;\t\tint tmp;\t\tlong value;\t\ti<<=log2BitsPerInt;\t\tcell=(int)( i>>>6 );\t\toffset=(int)( i&Utils.LAST_6_BITS_LONG );\t\ttmp=64-offset;\t\tif (tmp==bitsPerInt) {\t\t\tvalue=(array[cell]&oneSelectors[0])+1;\t\t\tarray[cell]&=zeroSelectors[0];\t\t\tarray[cell]|=value;\t\t}\t\telse {\t\t\ttmp=sixtyFourMinusBitsPerInt-offset;\t\t\tvalue=((((array[cell]&oneSelectors[tmp])>>>tmp)+1)<<tmp)&oneSelectors[tmp];\t\t\tarray[cell]&=zeroSelectors[tmp];\t\t\tarray[cell]|=value;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "incrementElementAt", "params": ["int", "int"], "throws": null, "modifiers": ["private", "final"], "return_type": "void", "snippet": "\tprivate final void incrementElementAt(int cell, int offset) {\t\tint tmp;\t\tlong value;\t\ttmp=64-offset;\t\tif (tmp==bitsPerInt) {\t\t\tvalue=(array[cell]&oneSelectors[0])+1;\t\t\tarray[cell]&=zeroSelectors[0];\t\t\tarray[cell]|=value;\t\t}\t\telse {\t\t\ttmp=sixtyFourMinusBitsPerInt-offset;\t\t\tvalue=((((array[cell]&oneSelectors[tmp])>>>tmp)+1)<<tmp)&oneSelectors[tmp];\t\t\tarray[cell]&=zeroSelectors[tmp];\t\t\tarray[cell]|=value;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "swap", "params": ["long", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void swap(long i, long j) {\t\tfinal int iCell, jCell, iOffset, jOffset;\t\tfinal int sixtyFourMinusBitsPerIntMinusIOffset, sixtyFourMinusBitsPerIntMinusJOffset;\t\tlong iValue, jValue;\t\ti<<=log2BitsPerInt;\t\tiCell=(int)( i>>>6 );\t\tiOffset=(int)( i&Utils.LAST_6_BITS );\t\tj<<=log2BitsPerInt;\t\tjCell=(int)( j>>>6 );\t\tjOffset=(int)( j&Utils.LAST_6_BITS );\t\tsixtyFourMinusBitsPerIntMinusIOffset=sixtyFourMinusBitsPerInt-iOffset;\t\tsixtyFourMinusBitsPerIntMinusJOffset=sixtyFourMinusBitsPerInt-jOffset;\t\tiValue=(array[iCell]&oneSelectors[sixtyFourMinusBitsPerIntMinusIOffset])>>>sixtyFourMinusBitsPerIntMinusIOffset;\t\tarray[iCell]&=zeroSelectors[sixtyFourMinusBitsPerIntMinusIOffset];\t\tjValue=(array[jCell]&oneSelectors[sixtyFourMinusBitsPerIntMinusJOffset])>>>sixtyFourMinusBitsPerIntMinusJOffset;\t\tarray[jCell]&=zeroSelectors[sixtyFourMinusBitsPerIntMinusJOffset];\t\tarray[jCell]|=iValue<<sixtyFourMinusBitsPerIntMinusJOffset;\t\tarray[iCell]|=jValue<<sixtyFourMinusBitsPerIntMinusIOffset;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "vecswap", "params": ["long", "long", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void vecswap(long i, long j, long n) {\t\tfinal int iCell, jCell, iOffset, jOffset, lastXCell, xOffset, yOffset, diff;\t\tfinal int sixtyFourMinusDiff, sixtyFourMinusXOffset, sixtyFourMinusYOffset;\t\tint k, sixtyFourMinusK, xCell, yCell;\t\tlong xBuffer, yBuffer, mask, nBits, swappedBits;\t\tnBits=n<<log2BitsPerInt;\t\ti<<=log2BitsPerInt;\t\tiCell=(int)( i>>>6 );\t\tiOffset=(int)( i&Utils.LAST_6_BITS_LONG );\t\tj<<=log2BitsPerInt;\t\tjCell=(int)( j>>>6 );\t\tjOffset=(int)( j&Utils.LAST_6_BITS );\t\tif (jOffset>iOffset) {\t\t\txCell=jCell;\t\t\txOffset=jOffset;\t\t\tyCell=iCell;\t\t\tyOffset=iOffset;\t\t\tdiff=jOffset-iOffset;\t\t\tlastXCell=(int)( (j+nBits)>>6 );\t\t}\t\telse {\t\t\txCell=iCell;\t\t\txOffset=iOffset;\t\t\tyCell=jCell;\t\t\tyOffset=jOffset;\t\t\tdiff=iOffset-jOffset;\t\t\tlastXCell=(int)( (i+nBits)>>6 );\t\t}\t\tsixtyFourMinusDiff=64-diff;\t\tsixtyFourMinusXOffset=64-xOffset;\t\tsixtyFourMinusYOffset=64-yOffset;\t\tswappedBits=0;\t\t// First $xCell$\t\tif (xOffset!=0) {\t\t\tif (xCell==lastXCell) {\t\t\t\tmask=Utils.shiftOnesRight[xOffset]&Utils.shiftOnesLeft[sixtyFourMinusXOffset-(int)nBits];\t\t\t\txBuffer=array[xCell]&mask;\t\t\t\tmask=Utils.shiftOnesLeft[sixtyFourMinusXOffset]|Utils.shiftOnesRight[xOffset+(int)nBits];\t\t\t\tarray[xCell]&=mask;\t\t\t\tmask=Utils.shiftOnesRight[yOffset]&Utils.shiftOnesLeft[sixtyFourMinusYOffset-(int)nBits];\t\t\t\tyBuffer=array[yCell]&mask;\t\t\t\tmask=Utils.shiftOnesLeft[sixtyFourMinusYOffset]|Utils.shiftOnesRight[yOffset+(int)nBits];\t\t\t\tarray[yCell]&=mask;\t\t\t\tarray[yCell]|=xBuffer<<diff;\t\t\t\tarray[xCell]|=yBuffer>>>diff;\t\t\t\treturn;\t\t\t}\t\t\telse {\t\t\t\txBuffer=array[xCell]&Utils.shiftOnesRight[xOffset];\t\t\t\tarray[xCell]&=Utils.shiftOnesLeft[sixtyFourMinusXOffset];\t\t\t\tmask=Utils.shiftOnesRight[yOffset]&Utils.shiftOnesLeft[diff];\t\t\t\tyBuffer=array[yCell]&mask;\t\t\t\tmask=Utils.shiftOnesLeft[sixtyFourMinusYOffset]|Utils.shiftOnesRight[sixtyFourMinusDiff];\t\t\t\tarray[yCell]&=mask;\t\t\t\tarray[yCell]|=xBuffer<<diff;\t\t\t\tarray[xCell]|=yBuffer>>>diff;\t\t\t\tswappedBits=sixtyFourMinusXOffset;\t\t\t\txCell++;\t\t\t\tif (diff==0) yCell++;\t\t\t}\t\t}\t\t// Middle $xCell$s\t\tif (diff==0) {\t\t\twhile (xCell<lastXCell) {\t\t\t\txBuffer=array[xCell];\t\t\t\tarray[xCell]=array[yCell];\t\t\t\tarray[yCell]=xBuffer;\t\t\t\txCell++; yCell++;\t\t\t\tswappedBits+=64;\t\t\t}\t\t}\t\telse {\t\t\twhile (xCell<lastXCell) {\t\t\t\txBuffer=array[xCell];\t\t\t\tyBuffer=array[yCell]<<sixtyFourMinusDiff;\t\t\t\tarray[yCell]&=Utils.shiftOnesLeft[diff];\t\t\t\tarray[yCell]|=xBuffer>>>sixtyFourMinusDiff;\t\t\t\tyBuffer|=array[yCell+1]>>>diff;\t\t\t\tarray[yCell+1]&=Utils.shiftOnesRight[sixtyFourMinusDiff];\t\t\t\tarray[yCell+1]|=xBuffer<<diff;\t\t\t\tarray[xCell]=yBuffer;\t\t\t\txCell++; yCell++;\t\t\t\tswappedBits+=64;\t\t\t}\t\t}\t\t// Last $xCell$\t\tk=(int)( nBits-swappedBits );\t\tif (k==0) return;\t\tsixtyFourMinusK=64-k;\t\txBuffer=array[xCell]&Utils.shiftOnesLeft[sixtyFourMinusK];\t\tarray[xCell]&=Utils.shiftOnesRight[k];\t\tif (diff==0) {\t\t\tyBuffer=array[yCell]&Utils.shiftOnesLeft[sixtyFourMinusK];\t\t\tarray[yCell]&=Utils.shiftOnesRight[k];\t\t\tarray[yCell]|=xBuffer;\t\t\tarray[xCell]|=yBuffer;\t\t\treturn;\t\t}\t\tif (k==diff) {\t\t\tyBuffer=array[yCell]<<sixtyFourMinusDiff;\t\t\tarray[yCell]&=Utils.shiftOnesLeft[diff];\t\t\tarray[yCell]|=xBuffer>>>sixtyFourMinusDiff;\t\t\tarray[xCell]|=yBuffer;\t\t}\t\telse if (k<diff) {\t\t\tmask=Utils.shiftOnesRight[sixtyFourMinusDiff]&Utils.shiftOnesLeft[diff-k];\t\t\tyBuffer=array[yCell]&mask;\t\t\tmask=Utils.shiftOnesLeft[diff]|Utils.shiftOnesRight[sixtyFourMinusDiff+k];\t\t\tarray[yCell]&=mask;\t\t\tarray[yCell]|=xBuffer>>>sixtyFourMinusDiff;\t\t\tarray[xCell]|=yBuffer<<sixtyFourMinusDiff;\t\t}\t\telse {\t\t\tyBuffer=array[yCell]<<sixtyFourMinusDiff;\t\t\tarray[yCell]&=Utils.shiftOnesLeft[diff];\t\t\tarray[yCell]|=xBuffer>>>sixtyFourMinusDiff;\t\t\tyBuffer|=array[yCell+1]>>>diff;\t\t\tyBuffer&=Utils.shiftOnesLeft[sixtyFourMinusK];\t\t\tarray[yCell+1]&=Utils.shiftOnesRight[k-diff];\t\t\tarray[yCell+1]|=xBuffer<<diff;\t\t\tarray[xCell]|=yBuffer;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyToRight", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void copyToRight(long i) {\t\tfinal int cell;\t\tint nextCell, offset, sixtyFourMinusBitsPerIntMinusOffset;\t\tlong value;\t\ti<<=log2BitsPerInt;\t\tcell=(int)( i>>>6 );\t\toffset=(int)( i&Utils.LAST_6_BITS_LONG );\t\tif (offset==sixtyFourMinusBitsPerInt) {\t\t\tvalue=array[cell]&oneSelectors[0];\t\t\tnextCell=cell+1;\t\t\tarray[nextCell]&=Utils.shiftOnesRight[bitsPerInt];\t\t\tarray[nextCell]|=value<<sixtyFourMinusBitsPerInt;\t\t}\t\telse {\t\t\tsixtyFourMinusBitsPerIntMinusOffset=sixtyFourMinusBitsPerInt-offset;\t\t\tvalue=array[cell]&oneSelectors[sixtyFourMinusBitsPerIntMinusOffset];\t\t\toffset=offset+bitsPerInt;\t\t\tsixtyFourMinusBitsPerIntMinusOffset=sixtyFourMinusBitsPerInt-offset;\t\t\tarray[cell]&=zeroSelectors[sixtyFourMinusBitsPerIntMinusOffset];\t\t\tarray[cell]|=value>>>bitsPerInt;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "linearSearch", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long linearSearch(long value) {\t\tint i, cell, offset, zeros, top;\t\tlong longValue, probe, result;\t\t// Building XOR mask\t\tlongValue=value&oneSelectors[0];\t\tprobe=0;\t\tfor (i=0; i<64; i+=bitsPerInt) {\t\t\tprobe|=longValue;\t\t\tlongValue<<=bitsPerInt;\t\t}\t\t// Intermediate cells\t\tcell=0;\t\twhile (cell<lastCell) {\t\t\tresult=array[cell]^probe;\t\t\tfor (i=0; i<=sixtyFourMinusBitsPerInt; i+=bitsPerInt) {\t\t\t\tif ((result&oneSelectors[sixtyFourMinusBitsPerInt-i])==0) return ((((long)cell)<<6)+i)>>>log2BitsPerInt;\t\t\t}\t\t\tcell++;\t\t}\t\t// Last cell\t\tresult=array[cell]^probe;\t\ttop=lastOffset-bitsPerInt;\t\tfor (i=0; i<=top; i+=bitsPerInt) {\t\t\tif ((result&oneSelectors[sixtyFourMinusBitsPerInt-i])==0) return ((((long)cell)<<6)+i)>>>log2BitsPerInt;\t\t}\t\treturn -1;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "binarySearch", "params": ["long", "long", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long binarySearch(long value, long first, long last) {\t\tlong mid, midValue;\t  \twhile (last>=first) {\t\t\tmid=(last+first)>>1;\t\t\tmidValue=getElementAt(mid);\t\t\tif (value>midValue) first=mid+1;\t\t\telse if (value<midValue) last=mid-1;\t\t\telse return mid;\t\t}\t\treturn -1;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lcp", "params": ["long", "long", "boolean"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long lcp(long x, long y, boolean order) {\t\tfinal boolean xSmallerThanY = x<y;\t\tx<<=log2BitsPerInt;\t\tfinal int xCell = (int)( x>>>6 );\t\tfinal int xOffset = (int)( x&Utils.LAST_6_BITS );\t\ty<<=log2BitsPerInt;\t\tfinal int yCell = (int)( y>>>6 );\t\tfinal int yOffset = (int)( y&Utils.LAST_6_BITS );\t\tlong xBuffer, yBuffer;\t\tif (xOffset==0) xBuffer=array[xCell];\t\telse {\t\t\txBuffer=array[xCell]<<xOffset;\t\t\tif (xCell<lastCell) xBuffer|=array[xCell+1]>>>(64-xOffset);\t\t}\t\tif (yOffset==0) yBuffer=array[yCell];\t\telse {\t\t\tyBuffer=array[yCell]<<yOffset;\t\t\tif (yCell<lastCell) yBuffer|=array[yCell+1]>>>(64-yOffset);\t\t}\t\treturn lcp(xCell,xOffset,yCell,yOffset,xSmallerThanY,order,xBuffer,yBuffer,false);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lcp63", "params": ["long", "long", "boolean", "long", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long lcp63(long x, long y, boolean order, long bufferX, long bufferY) {\t\tfinal boolean xSmallerThanY = x<y;\t\tx<<=log2BitsPerInt; y<<=log2BitsPerInt;\t\treturn lcp((int)(x>>>6),(int)(x&Utils.LAST_6_BITS_LONG),(int)(y>>>6),(int)(y&Utils.LAST_6_BITS_LONG),xSmallerThanY,order,bufferX,bufferY,true);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lcp", "params": ["int", "int", "int", "int", "boolean", "boolean", "long", "long", "boolean"], "throws": null, "modifiers": ["private", "final"], "return_type": "long", "snippet": "\tprivate final long lcp(int xCell, int xOffset, int yCell, int yOffset, boolean xSmallerThanY, boolean order, long bufferX, long bufferY, boolean sixtyThreeBitBuffers) {\t\tboolean xLexGreaterThanY = xSmallerThanY;\t\tint tmp, bitsToCompare, leadingZeros;\t\tlong xBuffer=bufferX, yBuffer=bufferY;\t\tlong lcpBits;\t\t// First iteration: buffers could contain 63 bits.\t\tlcpBits=0;\t\tif (sixtyThreeBitBuffers) {\t\t\t// Deciding the number of bits to compare in the buffers\t\t\tbitsToCompare=63;\t\t\tif (xCell==lastCell-1 && xOffset>=lastOffset+2) bitsToCompare=64-xOffset+lastOffset;\t\t\telse if (xCell==lastCell) bitsToCompare=lastOffset-xOffset;\t\t\tif (yCell==lastCell-1 && yOffset>=lastOffset+2) {\t\t\t\ttmp=64-yOffset+lastOffset;\t\t\t\tif (tmp<bitsToCompare) bitsToCompare=tmp;\t\t\t}\t\t\telse if (yCell==lastCell) {\t\t\t\ttmp=lastOffset-yOffset;\t\t\t\tif (tmp<bitsToCompare) bitsToCompare=tmp;\t\t\t}\t\t\t// Comparing buffers\t\t\tleadingZeros=Long.numberOfLeadingZeros(xBuffer^yBuffer)-1;\t\t\tif (leadingZeros<bitsToCompare) {\t\t\t\tlcpBits=leadingZeros;\t\t\t\txLexGreaterThanY=(yBuffer&Utils.oneSelectors1[64-leadingZeros-2])==0x0L?true:false;\t\t\t\tlcpBits>>>=log2BitsPerInt;\t\t\t\tif (order&&xLexGreaterThanY) lcpBits|=Utils.MSB_LONG_ONE;\t\t\t\treturn lcpBits;\t\t\t}\t\t\telse {\t\t\t\tlcpBits=bitsToCompare;\t\t\t\tif (bitsToCompare<63) {\t\t\t\t\tlcpBits>>>=log2BitsPerInt;\t\t\t\t\tif (order&&xLexGreaterThanY) lcpBits|=Utils.MSB_LONG_ONE;\t\t\t\t\treturn lcpBits;\t\t\t\t}\t\t\t}\t\t\t// Reloading 64-bit buffers\t\t\tif (xOffset==0) xOffset=63;\t\t\telse { xCell++; xOffset--; }\t\t\tif (yOffset==0) yOffset=63;\t\t\telse { yCell++; yOffset--; }\t\t\tif (xCell>lastCell || (xCell==lastCell&&xOffset>=lastOffset) || yCell>lastCell || (yCell==lastCell&&yOffset>=lastOffset)) {\t\t\t\tlcpBits>>>=log2BitsPerInt;\t\t\t\tif (order&&xLexGreaterThanY) lcpBits|=Utils.MSB_LONG_ONE;\t\t\t\treturn lcpBits;\t\t\t}\t\t\tif (xOffset==0) xBuffer=array[xCell];\t\t\telse {\t\t\t\txBuffer=array[xCell]<<xOffset;\t\t\t\tif (xCell<lastCell) xBuffer|=array[xCell+1]>>>(64-xOffset);\t\t\t}\t\t\tif (yOffset==0) yBuffer=array[yCell];\t\t\telse {\t\t\t\tyBuffer=array[yCell]<<yOffset;\t\t\t\tif (yCell<lastCell) yBuffer|=array[yCell+1]>>>(64-yOffset);\t\t\t}\t\t}\t\t// Normal iterations: 64-bit buffers.\t\twhile (true) {\t\t\t// Deciding the number of bits to compare in the buffers\t\t\tbitsToCompare=64;\t\t\tif (xCell==lastCell-1 && xOffset>=lastOffset+1) bitsToCompare=64-xOffset+lastOffset;\t\t\telse if (xCell==lastCell) bitsToCompare=lastOffset-xOffset;\t\t\tif (yCell==lastCell-1 && yOffset>=lastOffset+1) {\t\t\t\ttmp=64-yOffset+lastOffset;\t\t\t\tif (tmp<bitsToCompare) bitsToCompare=tmp;\t\t\t}\t\t\telse if (yCell==lastCell) {\t\t\t\ttmp=lastOffset-yOffset;\t\t\t\tif (tmp<bitsToCompare) bitsToCompare=tmp;\t\t\t}\t\t\t// Comparing buffers\t\t\tleadingZeros=Long.numberOfLeadingZeros(xBuffer^yBuffer);\t\t\tif (leadingZeros<bitsToCompare) {\t\t\t\tlcpBits+=leadingZeros;\t\t\t\txLexGreaterThanY=(yBuffer&Utils.oneSelectors1[64-leadingZeros-1])==0x0L?true:false;\t\t\t\tbreak;\t\t\t}\t\t\telse {\t\t\t\tlcpBits+=bitsToCompare;\t\t\t\tif (bitsToCompare<64) break;\t\t\t}\t\t\t// Reloading buffers\t\t\txCell++; yCell++;\t\t\tif (xCell>lastCell || (xCell==lastCell&&xOffset>=lastOffset)) break;\t\t\tif (yCell>lastCell || (yCell==lastCell&&yOffset>=lastOffset)) break;\t\t\tif (xOffset==0) xBuffer=array[xCell];\t\t\telse {\t\t\t\txBuffer=array[xCell]<<xOffset;\t\t\t\tif (xCell<lastCell) xBuffer|=array[xCell+1]>>>(64-xOffset);\t\t\t}\t\t\tif (yOffset==0) yBuffer=array[yCell];\t\t\telse {\t\t\t\tyBuffer=array[yCell]<<yOffset;\t\t\t\tif (yCell<lastCell) yBuffer|=array[yCell+1]>>>(64-yOffset);\t\t\t}\t\t}\t\tlcpBits>>>=log2BitsPerInt;\t\tif (order&&xLexGreaterThanY) lcpBits|=Utils.MSB_LONG_ONE;\t\treturn lcpBits;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "heapSort", "params": ["long", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void heapSort(long first, long n) {\t\tlong i;\t\tfor (i=(n>>1)-1; i>=0; i--) heapify(first,n,i);\t\tfor (i=n-1; i>0; i--) {\t\t\tswap(first+i,first);\t\t\tn--;\t\t\theapify(first,n,0);\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "heapify", "params": ["long", "long", "long"], "throws": null, "modifiers": ["private", "final"], "return_type": "void", "snippet": "\tprivate final void heapify(long first, long n, long position) {\t\tlong i, firstPlusI, iValue, child, firstPlusChild, childValue, largest, firstPlusLargest, largestValue;\t\ti=position;\t\twhile ((i<<1)+1<n) {\t\t\tfirstPlusI=first+i;\t\t\tiValue=getElementAt(firstPlusI);\t\t\tchild=(i<<1)+1;\t\t\tfirstPlusChild=first+child;\t\t\tchildValue=getElementAt(firstPlusChild);\t\t\tlargest=childValue>iValue?child:i;\t\t\tfirstPlusLargest=first+largest;\t\t\tchild++;\t\t\tif (child<n) {\t\t\t\tlargestValue=getElementAt(firstPlusLargest);\t\t\t\tfirstPlusChild=first+child;\t\t\t\tchildValue=getElementAt(firstPlusChild);\t\t\t\tif (largestValue<childValue) {\t\t\t\t\tlargest=child;\t\t\t\t\tfirstPlusLargest=first+largest;\t\t\t\t}\t\t\t}\t\t\tif (largest!=i) {\t\t\t\tswap(firstPlusI,firstPlusLargest);\t\t\t\ti=largest;\t\t\t}\t\t\telse return;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/IntArray.java", "stars": "2", "class": {"name": "IntArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(LxApplication.class, args);    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/LxApplication.java", "stars": "2", "class": {"name": "LxApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        FileWriter fw = new FileWriter(\"09_IOAndProperties\\\\f.txt\");        char[] cs = {'a','b','c','d','e'};        //void write(char[] cbuf)\u5199\u5165\u5b57\u7b26\u6570\u7ec4\u3002        fw.write(cs);//abcde        //void write(char[] cbuf, int off, int len)\u5199\u5165\u5b57\u7b26\u6570\u7ec4\u7684\u67d0\u4e00\u90e8\u5206,off\u6570\u7ec4\u7684\u5f00\u59cb\u7d22\u5f15,len\u5199\u7684\u5b57\u7b26\u4e2a\u6570\u3002        fw.write(cs,1,3);//bcd        //void write(String str)\u5199\u5165\u5b57\u7b26\u4e32\u3002        fw.write(\"\u4f20\u667a\u64ad\u5ba2\");//\u4f20\u667a\u64ad\u5ba2        //void write(String str, int off, int len) \u5199\u5165\u5b57\u7b26\u4e32\u7684\u67d0\u4e00\u90e8\u5206,off\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u7d22\u5f15,len\u5199\u7684\u5b57\u7b26\u4e2a\u6570\u3002        fw.write(\"\u9ed1\u9a6c\u7a0b\u5e8f\u5458\",2,3);//\u7a0b\u5e8f\u5458        fw.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/Demo05Writer/Demo03Writer.java", "stars": "2", "class": {"name": "Demo03Writer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDirSizeInByte", "params": [], "throws": null, "modifiers": [], "return_type": "Long", "snippet": "  Long getDirSizeInByte() {    return this.dirSizeInByte;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java", "stars": "18", "class": {"name": "ProjectDirectoryMetadata", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setDirSizeInByte", "params": ["Long"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setDirSizeInByte(final Long dirSize) {    this.dirSizeInByte = dirSize;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java", "stars": "18", "class": {"name": "ProjectDirectoryMetadata", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": [], "return_type": "int", "snippet": "  int getProjectId() {    return this.projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java", "stars": "18", "class": {"name": "ProjectDirectoryMetadata", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": [], "return_type": "int", "snippet": "  int getVersion() {    return this.version;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java", "stars": "18", "class": {"name": "ProjectDirectoryMetadata", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getInstalledDir", "params": [], "throws": null, "modifiers": [], "return_type": "File", "snippet": "  File getInstalledDir() {    return this.installedDir;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java", "stars": "18", "class": {"name": "ProjectDirectoryMetadata", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setInstalledDir", "params": ["File"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setInstalledDir(final File installedDir) {    this.installedDir = installedDir;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java", "stars": "18", "class": {"name": "ProjectDirectoryMetadata", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"ProjectVersion{\" +        \"projectId=\" + this.projectId +        \", version=\" + this.version +        \", installedDir=\" + this.installedDir +        \", dirSizeInByte=\" + this.dirSizeInByte +        \", lastAccessTime=\" + this.lastAccessTime +        '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java", "stars": "18", "class": {"name": "ProjectDirectoryMetadata", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLastAccessTime", "params": [], "throws": null, "modifiers": [], "return_type": "FileTime", "snippet": "  FileTime getLastAccessTime() {    return this.lastAccessTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java", "stars": "18", "class": {"name": "ProjectDirectoryMetadata", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setLastAccessTime", "params": ["FileTime"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setLastAccessTime(final FileTime lastAccessTime) {    this.lastAccessTime = lastAccessTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java", "stars": "18", "class": {"name": "ProjectDirectoryMetadata", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "inicializar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void inicializar() {\t\tproduto = new Produto();\t\tprodutoDao = new ProdutoDao();\t\t\t\tcategoriaDao = new CategoriaDao();\t\t\t\tcategorias = categoriaDao.buscarTodos();\t\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "categoriaSelecionada", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void categoriaSelecionada() {\t\tFacesUtil.addInfoMessage(\"categoria selecionada\");\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "salvar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void salvar() {\t\tSystem.out.println(\"Salvando a categoria: \" + produto.getNome());\t\tprodutoDao.salvar(produto);\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProduto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Produto", "snippet": "\tpublic Produto getProduto() {\t\treturn produto;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setProduto", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setProduto(Produto produto) {\t\tthis.produto = produto;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProdutoDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ProdutoDao", "snippet": "\tpublic ProdutoDao getProdutoDao() {\t\treturn produtoDao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setProdutoDao", "params": ["ProdutoDao"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setProdutoDao(ProdutoDao produtoDao) {\t\tthis.produtoDao = produtoDao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCategoriaDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CategoriaDao", "snippet": "\tpublic CategoriaDao getCategoriaDao() {\t\treturn categoriaDao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCategoriaDao", "params": ["CategoriaDao"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCategoriaDao(CategoriaDao categoriaDao) {\t\tthis.categoriaDao = categoriaDao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCategorias", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Categoria>", "snippet": "\tpublic List<Categoria> getCategorias() {\t\treturn categorias;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCategorias", "params": ["List<Categoria>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCategorias(List<Categoria> categorias) {\t\tthis.categorias = categorias;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getForma", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FormaPagamento", "snippet": "\tpublic FormaPagamento[] getForma() {\t\treturn FormaPagamento.values();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroProdutoBean.java", "stars": "1", "class": {"name": "CadastroProdutoBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // \u4f7f\u7528 Paint.getFontSpacing() \u6765\u83b7\u53d6\u63a8\u8350\u7684\u884c\u8ddd        float spacing = paint.getFontSpacing();        canvas.drawText(text, 50, 100, paint);        canvas.drawText(text, 50, 100 + spacing, paint);        canvas.drawText(text, 50, 100 + spacing * 2, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice11GetFontSpacingView.java", "stars": "2", "class": {"name": "Practice11GetFontSpacingView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Integer", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Integer parameter, JdbcType jdbcType)      throws SQLException {    ps.setInt(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/IntegerTypeHandler.java", "stars": "15", "class": {"name": "IntegerTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getNullableResult(ResultSet rs, String columnName)      throws SQLException {    int result = rs.getInt(columnName);    return result == 0 && rs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/IntegerTypeHandler.java", "stars": "15", "class": {"name": "IntegerTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    int result = rs.getInt(columnIndex);    return result == 0 && rs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/IntegerTypeHandler.java", "stars": "15", "class": {"name": "IntegerTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    int result = cs.getInt(columnIndex);    return result == 0 && cs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/IntegerTypeHandler.java", "stars": "15", "class": {"name": "IntegerTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "addArg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder addArg(final String... command) {    for (final String c : command) {      this.cmd.add(c);    }    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setWorkingDir", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder setWorkingDir(final String dir) {    this.workingDir = dir;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder setJobName(String jobName){    this.jobName = jobName;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWorkingDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getWorkingDir() {    return this.workingDir;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setWorkingDir", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder setWorkingDir(final File f) {    return setWorkingDir(f.getAbsolutePath());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addEnv", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder addEnv(final String variable, final String value) {    this.env.put(variable, value);    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnv", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getEnv() {    return this.env;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnv", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder setEnv(final Map<String, String> m) {    this.env = m;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStdErrorSnippetSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getStdErrorSnippetSize() {    return this.stdErrSnippetSize;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStdErrorSnippetSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder setStdErrorSnippetSize(final int size) {    this.stdErrSnippetSize = size;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStdOutSnippetSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getStdOutSnippetSize() {    return this.stdOutSnippetSize;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStdOutSnippetSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder setStdOutSnippetSize(final int size) {    this.stdOutSnippetSize = size;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogger", "params": ["Logger"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder setLogger(final Logger logger) {    this.logger = logger;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcess", "snippet": "  public AzkabanProcess build() {    if (this.isExecuteAsUser) {      return new AzkabanProcess(this.cmd, this.env, this.workingDir, this.logger,          this.executeAsUserBinaryPath, this.effectiveUser, this.jobName);    } else {      return new AzkabanProcess(this.cmd, this.env, this.workingDir, this.logger);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCommand", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getCommand() {    return this.cmd;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCommandString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCommandString() {    return Joiner.on(\" \").join(getCommand());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"ProcessBuilder(cmd = \" + Joiner.on(\" \").join(this.cmd) + \", env = \"        + this.env + \", cwd = \" + this.workingDir + \")\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableExecuteAsUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder enableExecuteAsUser() {    this.isExecuteAsUser = true;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecuteAsUserBinaryPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder setExecuteAsUserBinaryPath(final String executeAsUserBinaryPath) {    this.executeAsUserBinaryPath = executeAsUserBinaryPath;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEffectiveUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanProcessBuilder", "snippet": "  public AzkabanProcessBuilder setEffectiveUser(final String effectiveUser) {    this.effectiveUser = effectiveUser;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcessBuilder.java", "stars": "18", "class": {"name": "AzkabanProcessBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        PrintStream var10000;        String s;        boolean var10001;        Object o;        OperandStackRecoder recorder;        label40: {            Object var10002;            String var4;            label44: {                if ((recorder = OperandStackRecoder.get()) != null && recorder.isRestoring) {                    switch (recorder.popInt()) {                    case 0://                        this = (Loop) recorder.popObject();                        break;                    case 1:                        o = (Object) recorder.popObject();                        s = (String) recorder.popObject();//                        this = (Loop) recorder.popObject();                        var10000 = (PrintStream) recorder.popObject();                        var4 = (String) recorder.popReference();                        var10002 = null;                        break label44;                    case 2:                        o = (Object) recorder.popObject();                        s = (String) recorder.popObject();//                        this = (Loop) recorder.popObject();                        var10000 = (PrintStream) recorder.popReference();                        var10001 = false;                        /*    */ break label40;                    /*    */ }                    /*    */ }                /*    */                /* 7 */ test();                if (recorder != null && recorder.isCapturing) {                    recorder.pushReference(this);                    recorder.pushObject(this);                    recorder.pushInt(0);                    return;                }                /* 8 */ s = new String();                /* 9 */ o = new Object();                /* 10 */ var10000 = System.out;                var4 = s;                var10002 = o;            }            var10001 = var4.equals(var10002);            if (recorder != null && recorder.isCapturing) {                recorder.pushObject(var10000);                recorder.pushReference(this);                recorder.pushObject(this);                recorder.pushObject(s);                recorder.pushObject(o);                recorder.pushInt(1);                return;            }        }        var10000.println(var10001);        if (recorder != null && recorder.isCapturing) {            recorder.pushReference(this);            recorder.pushObject(this);            recorder.pushObject(s);            recorder.pushObject(o);            recorder.pushInt(2);        }        /* 11 */ }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/test/java/org/coral/jroutine/weave/rewrite/LoopDecompile.java", "stars": "3", "class": {"name": "LoopDecompile", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    /*    */ private static void test() {        /* 16 */ }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/test/java/org/coral/jroutine/weave/rewrite/LoopDecompile.java", "stars": "3", "class": {"name": "LoopDecompile", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getProjectId() {    return this.projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecId() {    return this.execId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getVersion() {    return this.version;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFlowId() {    return this.flowId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImmediateFlowId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getImmediateFlowId() {    return this.immediateFlowId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobId() {    return this.jobId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getStartTime() {    return this.startTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getEndTime() {    return this.endTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status getStatus() {    return this.status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAttempt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getAttempt() {    return this.attempt;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParsedFlowId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Pair>", "snippet": "  public List<Pair<String, String>> getParsedFlowId() {    return this.jobPath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseFlowId", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseFlowId() {    this.jobPath = new ArrayList<>();    // parsing pattern: flowRootName[,embeddedFlowName:embeddedFlowPath]*    final String[] flowPairs = this.flowId.split(\",\");    for (final String flowPair : flowPairs) {      // splitting each embeddedFlowName:embeddedFlowPath pair by the first occurrence of ':'      // only because embeddedFlowPath also uses ':' as delimiter.      // Ex: \"embeddedFlow3:rootFlow:embeddedFlow1:embeddedFlow2:embeddedFlow3\" will result in      // [\"embeddedFlow3\", \"rootFlow:embeddedFlow1:embeddedFlow2:embeddedFlow3\"]      final String[] pairSplit = flowPair.split(\":\", 2);      final Pair<String, String> pair;      if (pairSplit.length == 1) {        pair = new Pair<>(pairSplit[0], pairSplit[0]);      } else {        pair = new Pair<>(pairSplit[0], pairSplit[1]);      }      this.jobPath.add(pair);    }    this.immediateFlowId = this.jobPath.get(this.jobPath.size() - 1).getSecond();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobIdPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobIdPath() {    // Skip the first one because it's always just the root.    String path = \"\";    for (int i = 1; i < this.jobPath.size(); ++i) {      final Pair<String, String> pair = this.jobPath.get(i);      path += pair.getFirst() + \":\";    }    path += this.jobId;    return path;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toObject() {    final HashMap<String, Object> map = new HashMap<>();    map.put(\"execId\", this.execId);    map.put(\"version\", this.version);    map.put(\"flowId\", this.flowId);    map.put(\"jobId\", this.jobId);    map.put(\"startTime\", this.startTime);    map.put(\"endTime\", this.endTime);    map.put(\"status\", this.status.toString());    map.put(\"attempt\", this.attempt);    return map;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRunDate", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRunDate(long runDate) {    this.runDate = runDate;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRunDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getRunDate() {    return runDate;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableJobInfo.java", "stars": "18", "class": {"name": "ExecutableJobInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAppContext", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "TVButterApplication", "snippet": "    public static TVButterApplication getAppContext() {        return (TVButterApplication) ButterApplication.getAppContext();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/TVButterApplication.java", "stars": "4", "class": {"name": "TVButterApplication", "extends": "ButterApplication", "implements": null, "modifiers": ["public"]}}, {"method_name": "attachBaseContext", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void attachBaseContext(Context base) {        super.attachBaseContext(base);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/TVButterApplication.java", "stars": "4", "class": {"name": "TVButterApplication", "extends": "ButterApplication", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        component = DaggerApplicationComponent.builder()                .baseApplicationModule(new BaseApplicationModule(this))                .build();        component.inject(this);        super.onCreate();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/TVButterApplication.java", "stars": "4", "class": {"name": "TVButterApplication", "extends": "ButterApplication", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateAvailable", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateAvailable(String filePath) {        if(!VersionUtils.isAndroidTV()) {            super.updateAvailable(filePath);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/TVButterApplication.java", "stars": "4", "class": {"name": "TVButterApplication", "extends": "ButterApplication", "implements": null, "modifiers": ["public"]}}, {"method_name": "getComponent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ApplicationComponent", "snippet": "    public ApplicationComponent getComponent() {        return component;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/TVButterApplication.java", "stars": "4", "class": {"name": "TVButterApplication", "extends": "ButterApplication", "implements": null, "modifiers": ["public"]}}, {"method_name": "toPublish", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toPublish() {        return \"publish\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toSuggest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toSuggest() {        return \"suggest\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toMain", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toMain() {        return \"main\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toMessages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toMessages() {        return \"messages\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toMyCircle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toMyCircle(String user_name) {        User user = us.getUserByUserName(user_name);        User userOnline = (User) session.getAttribute(\"onlineUser\");        if(user.getUser_name().equals(userOnline.getUser_name())){            return \"my_home\";        }        session.setAttribute(\"otherUser\",user);        return \"other_home\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toMyHome", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toMyHome() {        return \"my_home\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toFileStore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toFileStore() {        return \"file_store\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toTags", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toTags() {        return \"add_tag\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toArticles", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toArticles() {        return \"my_articles\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toUpdateTag", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toUpdateTag(String name) {        request.setAttribute(\"tagName\",name);        return \"update_tag\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toUpdateInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toUpdateInfo() {        return \"update_info\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toLogout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toLogout() {        //\u6e05\u7a7a\u6574\u4e2asession\u57df        request.getSession().invalidate();        return \"redirect:login.jsp\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "toEdit", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toEdit(int article_id){        Article article = as.getMyArticleById(article_id);        request.setAttribute(\"articleToEdit\",article);        return \"edit_article\";    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/controller/GotoController.java", "stars": "10", "class": {"name": "GotoController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void start() {    try {      this.scheduler.start();    } catch (final SchedulerException e) {      logger.error(\"Error starting Quartz scheduler: \", e);    }    logger.info(\"Quartz Scheduler started.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void cleanup() {    logger.info(\"Cleaning up schedules in scheduler\");    try {      this.scheduler.clear();    } catch (final SchedulerException e) {      logger.error(\"Exception clearing scheduler: \", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void pause() {    logger.info(\"pausing all schedules in Quartz\");    try {      this.scheduler.pauseAll();    } catch (final SchedulerException e) {      logger.error(\"Exception pausing scheduler: \", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void resume() {    logger.info(\"resuming all schedules in Quartz\");    try {      this.scheduler.resumeAll();    } catch (final SchedulerException e) {      logger.error(\"Exception resuming scheduler: \", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    logger.info(\"Shutting down scheduler\");    try {      this.scheduler.shutdown();    } catch (final SchedulerException e) {      logger.error(\"Exception shutting down scheduler: \", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkJobExistence", "params": ["String", "String"], "throws": ["SchedulerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkJobExistence(final String jobName, final String groupName)      throws SchedulerException {    if (!ifJobExist(jobName, groupName)) {      throw new SchedulerException(String.format(\"can not find job with job name: %s and group \"          + \"name %s: in quartz.\", jobName, groupName));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pauseJob", "params": ["String", "String"], "throws": ["SchedulerException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void pauseJob(final String jobName, final String groupName)      throws SchedulerException {    checkJobExistence(jobName, groupName);    this.scheduler.pauseJob(new JobKey(jobName, groupName));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isJobPaused", "params": ["String", "String"], "throws": ["SchedulerException"], "modifiers": ["synchronized", "public"], "return_type": "boolean", "snippet": "  public synchronized boolean isJobPaused(final String jobName, final String groupName)      throws SchedulerException {    final JobKey jobKey = new JobKey(jobName, groupName);    final JobDetail jobDetail = this.scheduler.getJobDetail(jobKey);    final List<? extends Trigger> triggers = this.scheduler.getTriggersOfJob(jobDetail.getKey());    for (final Trigger trigger : triggers) {      final TriggerState triggerState = this.scheduler.getTriggerState(trigger.getKey());      if (TriggerState.PAUSED.equals(triggerState)) {        return true;      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resumeJob", "params": ["String", "String"], "throws": ["SchedulerException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void resumeJob(final String jobName, final String groupName)      throws SchedulerException {    checkJobExistence(jobName, groupName);    this.scheduler.resumeJob(new JobKey(jobName, groupName));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unregisterJob", "params": ["String", "String"], "throws": ["SchedulerException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void unregisterJob(final String jobName, final String groupName) throws      SchedulerException {    checkJobExistence(jobName, groupName);    this.scheduler.deleteJob(new JobKey(jobName, groupName));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerJob", "params": ["String", "QuartzJobDescription"], "throws": ["SchedulerException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void registerJob(final String cronExpression, final QuartzJobDescription      jobDescription)      throws SchedulerException {    requireNonNull(jobDescription, \"jobDescription is null\");    if (ifJobExist(jobDescription.getJobName(), jobDescription.getGroupName())) {      throw new SchedulerException(String.format(\"can not register existing job with job name: \"          + \"%s and group name: %s\", jobDescription.getJobName(), jobDescription.getGroupName()));    }    if (!CronExpression.isValidExpression(cronExpression)) {      throw new SchedulerException(          \"The cron expression string <\" + cronExpression + \"> is not valid.\");    }    // TODO kunkun-tang: we will modify this when we start supporting multi schedules per flow.    final JobDetail job = JobBuilder.newJob(jobDescription.getJobClass())        .withIdentity(jobDescription.getJobName(), jobDescription.getGroupName()).build();    // Add external dependencies to Job Data Map.    job.getJobDataMap().putAll(jobDescription.getContextMap());    // TODO kunkun-tang: Need management code to deal with different misfire policy    final Trigger trigger = TriggerBuilder        .newTrigger()        .withSchedule(            CronScheduleBuilder.cronSchedule(cronExpression)                .withMisfireHandlingInstructionFireAndProceed()//            .withMisfireHandlingInstructionDoNothing()//            .withMisfireHandlingInstructionIgnoreMisfires()        )        .build();    this.scheduler.scheduleJob(job, trigger);    logger.info(\"Quartz Schedule with jobDetail \" + job.getDescription() + \" is registered.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ifJobExist", "params": ["String", "String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean ifJobExist(final String jobName, final String groupName)      throws SchedulerException {    return this.scheduler.getJobDetail(new JobKey(jobName, groupName)) != null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScheduler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Scheduler", "snippet": "  public Scheduler getScheduler() {    return this.scheduler;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/QuartzScheduler.java", "stars": "18", "class": {"name": "QuartzScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "measureWidth", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int measureWidth(int widthMeasureSpec, int heightMeasureSpec) {        int widthSpecMode = View.MeasureSpec.getMode(widthMeasureSpec);        int widthSpecSize = View.MeasureSpec.getSize(widthMeasureSpec);        int heightSpecMode = View.MeasureSpec.getMode(heightMeasureSpec);        int heightSpecSize = View.MeasureSpec.getSize(heightMeasureSpec);        // \u5982\u679c\u5f53\u524d\u5bbd\u5ea6\u4e0d\u662f\u5199\u6b7b\u7684        if (widthSpecMode != View.MeasureSpec.EXACTLY) {            // \u5982\u679c\u5f53\u524d\u9ad8\u5ea6\u4e0d\u662f\u5199\u6b7b\u7684            if (heightSpecMode != View.MeasureSpec.EXACTLY) {                // \u5bf9\u6bd4\u9ad8\u5ea6\u548c\u5bbd\u5ea6\uff0c\u8fd4\u56de\u6700\u5927\u503c\u7684\u90a3\u4e2a                return View.MeasureSpec.makeMeasureSpec(Math.max(widthSpecSize, heightSpecSize), View.MeasureSpec.EXACTLY);            } else {                // \u5982\u679c\u5df2\u7ecf\u5b9a\u6b7b\u4e86\u9ad8\u5ea6\uff0c\u800c\u5bbd\u5ea6\u6ca1\u6709\u5199\u6b7b\uff0c\u5219\u4f7f\u7528\u9ad8\u5ea6\u4ee3\u66ff\u5bbd\u5ea6                return heightMeasureSpec;            }        } else {            // \u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5df2\u7ecf\u5199\u6b7b\uff0c\u8fd9\u91cc\u4e0d\u505a\u4efb\u4f55\u5904\u7406            return widthMeasureSpec;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/square/SquareDelegate.java", "stars": "1", "class": {"name": "SquareDelegate", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "measureHeight", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int measureHeight(int widthMeasureSpec, int heightMeasureSpec) {        int widthSpecMode = View.MeasureSpec.getMode(widthMeasureSpec);        int widthSpecSize = View.MeasureSpec.getSize(widthMeasureSpec);        int heightSpecMode = View.MeasureSpec.getMode(heightMeasureSpec);        int heightSpecSize = View.MeasureSpec.getSize(heightMeasureSpec);        // \u5982\u679c\u5f53\u524d\u9ad8\u5ea6\u4e0d\u662f\u5199\u6b7b\u7684        if (heightSpecMode != View.MeasureSpec.EXACTLY) {            // \u5982\u679c\u5f53\u524d\u5bbd\u5ea6\u4e0d\u662f\u5199\u6b7b\u7684            if (widthSpecMode != View.MeasureSpec.EXACTLY) {                // \u5bf9\u6bd4\u9ad8\u5ea6\u548c\u5bbd\u5ea6\uff0c\u8fd4\u56de\u6700\u5927\u503c\u7684\u90a3\u4e2a                return View.MeasureSpec.makeMeasureSpec(Math.max(widthSpecSize, heightSpecSize), View.MeasureSpec.EXACTLY);            } else {                // \u5982\u679c\u5df2\u7ecf\u5b9a\u6b7b\u4e86\u5bbd\u5ea6\uff0c\u800c\u9ad8\u5ea6\u6ca1\u6709\u5199\u6b7b\uff0c\u5219\u4f7f\u7528\u9ad8\u5ea6\u4ee3\u66ff\u5bbd\u5ea6                return widthMeasureSpec;            }        } else {            // \u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5df2\u7ecf\u5199\u6b7b\uff0c\u8fd9\u91cc\u4e0d\u505a\u4efb\u4f55\u5904\u7406            return heightMeasureSpec;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/square/SquareDelegate.java", "stars": "1", "class": {"name": "SquareDelegate", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        paint.setTextScaleX(1);        canvas.drawText(text, 100, 150, paint);        paint.setTextScaleX(0.8f);        canvas.drawText(text, 100, 230, paint);        paint.setTextScaleX(1.2f);        canvas.drawText(text, 100, 310, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice09SetTextScaleXView.java", "stars": "2", "class": {"name": "Practice09SetTextScaleXView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStopOnError", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setStopOnError(boolean stopOnError) {    this.stopOnError = stopOnError;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setThrowWarning", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setThrowWarning(boolean throwWarning) {    this.throwWarning = throwWarning;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAutoCommit", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAutoCommit(boolean autoCommit) {    this.autoCommit = autoCommit;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSendFullScript", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSendFullScript(boolean sendFullScript) {    this.sendFullScript = sendFullScript;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRemoveCRs", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRemoveCRs(boolean removeCRs) {    this.removeCRs = removeCRs;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEscapeProcessing", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setEscapeProcessing(boolean escapeProcessing) {    this.escapeProcessing = escapeProcessing;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogWriter", "params": ["PrintWriter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLogWriter(PrintWriter logWriter) {    this.logWriter = logWriter;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setErrorLogWriter", "params": ["PrintWriter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setErrorLogWriter(PrintWriter errorLogWriter) {    this.errorLogWriter = errorLogWriter;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDelimiter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDelimiter(String delimiter) {    this.delimiter = delimiter;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFullLineDelimiter", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFullLineDelimiter(boolean fullLineDelimiter) {    this.fullLineDelimiter = fullLineDelimiter;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runScript", "params": ["Reader"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void runScript(Reader reader) {    setAutoCommit();    try {      if (sendFullScript) {        executeFullScript(reader);      } else {        executeLineByLine(reader);      }    } finally {      rollbackConnection();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeFullScript", "params": ["Reader"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void executeFullScript(Reader reader) {    StringBuilder script = new StringBuilder();    try {      BufferedReader lineReader = new BufferedReader(reader);      String line;      while ((line = lineReader.readLine()) != null) {        script.append(line);        script.append(LINE_SEPARATOR);      }      String command = script.toString();      println(command);      executeStatement(command);      commitConnection();    } catch (Exception e) {      String message = \"Error executing: \" + script + \".  Cause: \" + e;      printlnError(message);      throw new RuntimeSqlException(message, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeLineByLine", "params": ["Reader"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void executeLineByLine(Reader reader) {    StringBuilder command = new StringBuilder();    try {      BufferedReader lineReader = new BufferedReader(reader);      String line;      while ((line = lineReader.readLine()) != null) {        handleLine(command, line);      }      commitConnection();      checkForMissingLineTerminator(command);    } catch (Exception e) {      String message = \"Error executing: \" + command + \".  Cause: \" + e;      printlnError(message);      throw new RuntimeSqlException(message, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void closeConnection() {    try {      connection.close();    } catch (Exception e) {      // ignore    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAutoCommit", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setAutoCommit() {    try {      if (autoCommit != connection.getAutoCommit()) {        connection.setAutoCommit(autoCommit);      }    } catch (Throwable t) {      throw new RuntimeSqlException(\"Could not set AutoCommit to \" + autoCommit + \". Cause: \" + t, t);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "commitConnection", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void commitConnection() {    try {      if (!connection.getAutoCommit()) {        connection.commit();      }    } catch (Throwable t) {      throw new RuntimeSqlException(\"Could not commit transaction. Cause: \" + t, t);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rollbackConnection", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void rollbackConnection() {    try {      if (!connection.getAutoCommit()) {        connection.rollback();      }    } catch (Throwable t) {      // ignore    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkForMissingLineTerminator", "params": ["StringBuilder"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkForMissingLineTerminator(StringBuilder command) {    if (command != null && command.toString().trim().length() > 0) {      throw new RuntimeSqlException(\"Line missing end-of-line terminator (\" + delimiter + \") => \" + command);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleLine", "params": ["StringBuilder", "String"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleLine(StringBuilder command, String line) throws SQLException {    String trimmedLine = line.trim();    if (lineIsComment(trimmedLine)) {      Matcher matcher = DELIMITER_PATTERN.matcher(trimmedLine);      if (matcher.find()) {        delimiter = matcher.group(5);      }      println(trimmedLine);    } else if (commandReadyToExecute(trimmedLine)) {      command.append(line.substring(0, line.lastIndexOf(delimiter)));      command.append(LINE_SEPARATOR);      println(command);      executeStatement(command.toString());      command.setLength(0);    } else if (trimmedLine.length() > 0) {      command.append(line);      command.append(LINE_SEPARATOR);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lineIsComment", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean lineIsComment(String trimmedLine) {    return trimmedLine.startsWith(\"//\") || trimmedLine.startsWith(\"--\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "commandReadyToExecute", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean commandReadyToExecute(String trimmedLine) {    // issue #561 remove anything after the delimiter    return !fullLineDelimiter && trimmedLine.contains(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeStatement", "params": ["String"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void executeStatement(String command) throws SQLException {    Statement statement = connection.createStatement();    try {      statement.setEscapeProcessing(escapeProcessing);      String sql = command;      if (removeCRs) {        sql = sql.replace(\"\\r\\n\", \"\\n\");      }      try {        boolean hasResults = statement.execute(sql);        while (!(!hasResults && statement.getUpdateCount() == -1)) {          checkWarnings(statement);          printResults(statement, hasResults);          hasResults = statement.getMoreResults();        }      } catch (SQLWarning e) {        throw e;      } catch (SQLException e) {        if (stopOnError) {          throw e;        } else {          String message = \"Error executing: \" + command + \".  Cause: \" + e;          printlnError(message);        }      }    } finally {      try {        statement.close();      } catch (Exception ignored) {        // Ignore to workaround a bug in some connection pools        // (Does anyone know the details of the bug?)      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkWarnings", "params": ["Statement"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkWarnings(Statement statement) throws SQLException {    if (!throwWarning) {      return;    }    // In Oracle, CREATE PROCEDURE, FUNCTION, etc. returns warning    // instead of throwing exception if there is compilation error.    SQLWarning warning = statement.getWarnings();    if (warning != null) {      throw warning;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printResults", "params": ["Statement", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void printResults(Statement statement, boolean hasResults) {    if (!hasResults) {      return;    }    try (ResultSet rs = statement.getResultSet()) {      ResultSetMetaData md = rs.getMetaData();      int cols = md.getColumnCount();      for (int i = 0; i < cols; i++) {        String name = md.getColumnLabel(i + 1);        print(name + \"\\t\");      }      println(\"\");      while (rs.next()) {        for (int i = 0; i < cols; i++) {          String value = rs.getString(i + 1);          print(value + \"\\t\");        }        println(\"\");      }    } catch (SQLException e) {      printlnError(\"Error printing results: \" + e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "print", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void print(Object o) {    if (logWriter != null) {      logWriter.print(o);      logWriter.flush();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "println", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void println(Object o) {    if (logWriter != null) {      logWriter.println(o);      logWriter.flush();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printlnError", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void printlnError(Object o) {    if (errorLogWriter != null) {      errorLogWriter.println(o);      errorLogWriter.flush();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java", "stars": "15", "class": {"name": "ScriptRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRetrofitClient", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Retrofit", "snippet": "    public  static Retrofit getRetrofitClient()    {        return new Retrofit.Builder().baseUrl(BASE_URL).addConverterFactory(GsonConverterFactory.create()).build();    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/helper/RetrofitClient.java", "stars": "2", "class": {"name": "RetrofitClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": ["HttpServletRequest", "Model", "int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String index(HttpServletRequest request, Model model, int jobId) {\t\tXxlJobInfo jobInfo = xxlJobInfoDao.loadById(jobId);\t\tList<XxlJobLogGlue> jobLogGlues = xxlJobLogGlueDao.findByJobId(jobId);\t\tif (jobInfo == null) {\t\t\tthrow new RuntimeException(I18nUtil.getString(\"jobinfo_glue_jobid_unvalid\"));\t\t}\t\tif (GlueTypeEnum.BEAN == GlueTypeEnum.match(jobInfo.getGlueType())) {\t\t\tthrow new RuntimeException(I18nUtil.getString(\"jobinfo_glue_gluetype_unvalid\"));\t\t}\t\t// valid permission\t\tJobInfoController.validPermission(request, jobInfo.getJobGroup());\t\t// Glue\u7c7b\u578b-\u5b57\u5178\t\tmodel.addAttribute(\"GlueTypeEnum\", GlueTypeEnum.values());\t\tmodel.addAttribute(\"jobInfo\", jobInfo);\t\tmodel.addAttribute(\"jobLogGlues\", jobLogGlues);\t\treturn \"jobcode/jobcode.index\";\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobCodeController.java", "stars": "1", "class": {"name": "JobCodeController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["Model", "int", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> save(Model model, int id, String glueSource, String glueRemark) {\t\t// valid\t\tif (glueRemark==null) {\t\t\treturn new ReturnT<String>(500, (I18nUtil.getString(\"system_please_input\") + I18nUtil.getString(\"jobinfo_glue_remark\")) );\t\t}\t\tif (glueRemark.length()<4 || glueRemark.length()>100) {\t\t\treturn new ReturnT<String>(500, I18nUtil.getString(\"jobinfo_glue_remark_limit\"));\t\t}\t\tXxlJobInfo exists_jobInfo = xxlJobInfoDao.loadById(id);\t\tif (exists_jobInfo == null) {\t\t\treturn new ReturnT<String>(500, I18nUtil.getString(\"jobinfo_glue_jobid_unvalid\"));\t\t}\t\t\t\t// update new code\t\texists_jobInfo.setGlueSource(glueSource);\t\texists_jobInfo.setGlueRemark(glueRemark);\t\texists_jobInfo.setGlueUpdatetime(new Date());\t\texists_jobInfo.setUpdateTime(new Date());\t\txxlJobInfoDao.update(exists_jobInfo);\t\t// log old code\t\tXxlJobLogGlue xxlJobLogGlue = new XxlJobLogGlue();\t\txxlJobLogGlue.setJobId(exists_jobInfo.getId());\t\txxlJobLogGlue.setGlueType(exists_jobInfo.getGlueType());\t\txxlJobLogGlue.setGlueSource(glueSource);\t\txxlJobLogGlue.setGlueRemark(glueRemark);\t\txxlJobLogGlue.setAddTime(new Date());\t\txxlJobLogGlue.setUpdateTime(new Date());\t\txxlJobLogGlueDao.save(xxlJobLogGlue);\t\t// remove code backup more than 30\t\txxlJobLogGlueDao.removeOld(exists_jobInfo.getId(), 30);\t\treturn ReturnT.SUCCESS;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobCodeController.java", "stars": "1", "class": {"name": "JobCodeController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPetAndRoom", "params": ["SqlSession"], "throws": null, "modifiers": ["protected"], "return_type": "List<Pet>", "snippet": "  protected List<Pet> getPetAndRoom(SqlSession sqlSession) {    List<Pet> pets = sqlSession.selectList(\"org.apache.ibatis.submitted.column_prefix.MapperAutoMapping.selectPets\");    return pets;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixAutoMappingTest.java", "stars": "15", "class": {"name": "ColumnPrefixAutoMappingTest", "extends": "ColumnPrefixTest", "implements": null, "modifiers": []}}, {"method_name": "getPersons", "params": ["SqlSession"], "throws": null, "modifiers": ["protected"], "return_type": "List<Person>", "snippet": "  protected List<Person> getPersons(SqlSession sqlSession) {    List<Person> list = sqlSession        .selectList(\"org.apache.ibatis.submitted.column_prefix.MapperAutoMapping.selectPersons\");    return list;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixAutoMappingTest.java", "stars": "15", "class": {"name": "ColumnPrefixAutoMappingTest", "extends": "ColumnPrefixTest", "implements": null, "modifiers": []}}, {"method_name": "getConfigPath", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getConfigPath() {    return \"org/apache/ibatis/submitted/column_prefix/ConfigAutoMapping.xml\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixAutoMappingTest.java", "stars": "15", "class": {"name": "ColumnPrefixAutoMappingTest", "extends": "ColumnPrefixTest", "implements": null, "modifiers": []}}, {"method_name": "testCaseInsensitivity", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCaseInsensitivity() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Brand brand = sqlSession.selectOne(\"org.apache.ibatis.submitted.column_prefix.MapperAutoMapping.selectBrandWithProducts\", 1);      assertEquals(Integer.valueOf(1), brand.getId());      assertEquals(2, brand.getProducts().size());      assertEquals(Integer.valueOf(10), brand.getProducts().get(0).getId());      assertEquals(\"alpha\", brand.getProducts().get(0).getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixAutoMappingTest.java", "stars": "15", "class": {"name": "ColumnPrefixAutoMappingTest", "extends": "ColumnPrefixTest", "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setUp() {    logger = new BaseJdbcLogger(log, 1) {    };  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/BaseJdbcLoggerTest.java", "stars": "15", "class": {"name": "BaseJdbcLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldDescribePrimitiveArrayParameter", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldDescribePrimitiveArrayParameter() throws Exception {    logger.setColumn(\"1\", array);    when(array.getArray()).thenReturn(new int[] { 1, 2, 3 });    assertThat(logger.getParameterValueString()).startsWith(\"[1, 2, 3]\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/BaseJdbcLoggerTest.java", "stars": "15", "class": {"name": "BaseJdbcLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldDescribeObjectArrayParameter", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldDescribeObjectArrayParameter() throws Exception {    logger.setColumn(\"1\", array);    when(array.getArray()).thenReturn(new String[] { \"one\", \"two\", \"three\" });    assertThat(logger.getParameterValueString()).startsWith(\"[one, two, three]\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/BaseJdbcLoggerTest.java", "stars": "15", "class": {"name": "BaseJdbcLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "touch", "params": ["File"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void touch(File file) throws IOException {        workerThread.submit(new TouchCallable(file));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/LruDiskUsage.java", "stars": "2", "class": {"name": "LruDiskUsage", "extends": null, "implements": ["DiskUsage"], "modifiers": ["public", "abstract"]}}, {"method_name": "touchInBackground", "params": ["File"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void touchInBackground(File file) throws IOException {        Files.setLastModifiedNow(file);        List<File> files = Files.getLruListFiles(file.getParentFile());        trim(files);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/LruDiskUsage.java", "stars": "2", "class": {"name": "LruDiskUsage", "extends": null, "implements": ["DiskUsage"], "modifiers": ["public", "abstract"]}}, {"method_name": "accept", "params": ["File", "long", "int"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "boolean", "snippet": "    protected abstract boolean accept(File file, long totalSize, int totalCount);    private void trim(List<File> files) {        long totalSize = countTotalSize(files);        int totalCount = files.size();        for (File file : files) {            boolean accepted = accept(file, totalSize, totalCount);            if (!accepted) {                long fileSize = file.length();                boolean deleted = file.delete();                if (deleted) {                    totalCount--;                    totalSize -= fileSize;                    HttpProxyCacheDebuger.printfLog(\"Cache file \" + file + \" is deleted because it exceeds cache limit\");                } else {                    HttpProxyCacheDebuger.printfError(\"Error deleting file \" + file + \" for trimming cache\");                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/LruDiskUsage.java", "stars": "2", "class": {"name": "LruDiskUsage", "extends": null, "implements": ["DiskUsage"], "modifiers": ["public", "abstract"]}}, {"method_name": "trim", "params": ["List<File>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void trim(List<File> files) {        long totalSize = countTotalSize(files);        int totalCount = files.size();        for (File file : files) {            boolean accepted = accept(file, totalSize, totalCount);            if (!accepted) {                long fileSize = file.length();                boolean deleted = file.delete();                if (deleted) {                    totalCount--;                    totalSize -= fileSize;                    HttpProxyCacheDebuger.printfLog(\"Cache file \" + file + \" is deleted because it exceeds cache limit\");                } else {                    HttpProxyCacheDebuger.printfError(\"Error deleting file \" + file + \" for trimming cache\");                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/LruDiskUsage.java", "stars": "2", "class": {"name": "LruDiskUsage", "extends": null, "implements": ["DiskUsage"], "modifiers": ["public", "abstract"]}}, {"method_name": "countTotalSize", "params": ["List<File>"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long countTotalSize(List<File> files) {        long totalSize = 0;        for (File file : files) {            totalSize += file.length();        }        return totalSize;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/LruDiskUsage.java", "stars": "2", "class": {"name": "LruDiskUsage", "extends": null, "implements": ["DiskUsage"], "modifiers": ["public", "abstract"]}}, {"method_name": "call", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Void", "snippet": "        public Void call() throws Exception {            touchInBackground(file);            return null;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/LruDiskUsage.java", "stars": "2", "class": {"name": "TouchCallable", "extends": null, "implements": ["Callable"], "modifiers": ["private"]}}, {"method_name": "getDefaultClassLoader", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ClassLoader", "snippet": "  public static ClassLoader getDefaultClassLoader() {    return classLoaderWrapper.defaultClassLoader;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDefaultClassLoader", "params": ["ClassLoader"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setDefaultClassLoader(ClassLoader defaultClassLoader) {    classLoaderWrapper.defaultClassLoader = defaultClassLoader;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceURL", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "URL", "snippet": "  public static URL getResourceURL(String resource) throws IOException {      // issue #625      return getResourceURL(null, resource);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceURL", "params": ["ClassLoader", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "URL", "snippet": "  public static URL getResourceURL(ClassLoader loader, String resource) throws IOException {    URL url = classLoaderWrapper.getResourceAsURL(resource, loader);    if (url == null) {      throw new IOException(\"Could not find resource \" + resource);    }    return url;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsStream", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "InputStream", "snippet": "  public static InputStream getResourceAsStream(String resource) throws IOException {    return getResourceAsStream(null, resource);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsStream", "params": ["ClassLoader", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "InputStream", "snippet": "  public static InputStream getResourceAsStream(ClassLoader loader, String resource) throws IOException {    InputStream in = classLoaderWrapper.getResourceAsStream(resource, loader);    if (in == null) {      throw new IOException(\"Could not find resource \" + resource);    }    return in;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsProperties", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Properties", "snippet": "  public static Properties getResourceAsProperties(String resource) throws IOException {    Properties props = new Properties();    try (InputStream in = getResourceAsStream(resource)) {      props.load(in);    }    return props;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsProperties", "params": ["ClassLoader", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Properties", "snippet": "  public static Properties getResourceAsProperties(ClassLoader loader, String resource) throws IOException {    Properties props = new Properties();    try (InputStream in = getResourceAsStream(loader, resource)) {      props.load(in);    }    return props;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsReader", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Reader", "snippet": "  public static Reader getResourceAsReader(String resource) throws IOException {    Reader reader;    if (charset == null) {      reader = new InputStreamReader(getResourceAsStream(resource));    } else {      reader = new InputStreamReader(getResourceAsStream(resource), charset);    }    return reader;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsReader", "params": ["ClassLoader", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Reader", "snippet": "  public static Reader getResourceAsReader(ClassLoader loader, String resource) throws IOException {    Reader reader;    if (charset == null) {      reader = new InputStreamReader(getResourceAsStream(loader, resource));    } else {      reader = new InputStreamReader(getResourceAsStream(loader, resource), charset);    }    return reader;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsFile", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "File", "snippet": "  public static File getResourceAsFile(String resource) throws IOException {    return new File(getResourceURL(resource).getFile());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsFile", "params": ["ClassLoader", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "File", "snippet": "  public static File getResourceAsFile(ClassLoader loader, String resource) throws IOException {    return new File(getResourceURL(loader, resource).getFile());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrlAsStream", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "InputStream", "snippet": "  public static InputStream getUrlAsStream(String urlString) throws IOException {    URL url = new URL(urlString);    URLConnection conn = url.openConnection();    return conn.getInputStream();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrlAsReader", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Reader", "snippet": "  public static Reader getUrlAsReader(String urlString) throws IOException {    Reader reader;    if (charset == null) {      reader = new InputStreamReader(getUrlAsStream(urlString));    } else {      reader = new InputStreamReader(getUrlAsStream(urlString), charset);    }    return reader;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrlAsProperties", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Properties", "snippet": "  public static Properties getUrlAsProperties(String urlString) throws IOException {    Properties props = new Properties();    try (InputStream in = getUrlAsStream(urlString)) {      props.load(in);    }    return props;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "classForName", "params": ["String"], "throws": ["ClassNotFoundException"], "modifiers": ["public", "static"], "return_type": "Class<?>", "snippet": "  public static Class<?> classForName(String className) throws ClassNotFoundException {    return classLoaderWrapper.classForName(className);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCharset", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Charset", "snippet": "  public static Charset getCharset() {    return charset;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCharset", "params": ["Charset"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setCharset(Charset charset) {    Resources.charset = charset;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/Resources.java", "stars": "15", "class": {"name": "Resources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPersonSectionVisible", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPersonSectionVisible(Boolean show) {\t\tpersonName.setVisible(show);\t\tpersonNameInput.setVisible(show);\t\tpersonNameInput.setText(\"\");\t\tpersonProfession.setVisible(show);\t\tprofessionDropDown.setVisible(show);\t\tprofessionDropDown.setSelectedItem(\"\");\t\tpersonBirth.setVisible(show);\t\tbirthYearMin.setVisible(show);\t\tbirthYearMin.setText(\"\");\t\tbirthAnd.setVisible(show);\t\tbirthYearMax.setVisible(show);\t\tbirthYearMax.setText(\"\");\t\tpersonDeath.setVisible(show);\t\tdeathYearMin.setVisible(show);\t\tdeathYearMin.setText(\"\");\t\tdeathAnd.setVisible(show);\t\tdeathYearMax.setVisible(show);\t\tdeathYearMax.setText(\"\");\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/SearchPanel.java", "stars": "1", "class": {"name": "SearchPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "setTitleSectionVisible", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTitleSectionVisible(Boolean show) {\t\ttitleName.setVisible(show);\t\ttitleNameInput.setVisible(show);\t\ttitleNameInput.setText(\"\");\t\ttitleType.setVisible(show);\t\ttypeDropDown.setVisible(show);\t\ttypeDropDown.setSelectedItem(\"\");\t\ttitleAdult.setVisible(show);\t\tadultDropDown.setVisible(show);\t\tadultDropDown.setSelectedItem(\"\");\t\ttitleStart.setVisible(show);\t\tstartYearMin.setVisible(show);\t\tstartYearMin.setText(\"\");\t\tstartYearAnd.setVisible(show);\t\tstartYearMax.setVisible(show);\t\tstartYearMax.setText(\"\");\t\ttitleEnd.setVisible(show);\t\tendYearMin.setVisible(show);\t\tendYearMin.setText(\"\");\t\tendYearAnd.setVisible(show);\t\tendYearMax.setVisible(show);\t\tendYearMax.setText(\"\");\t\ttitleRating.setVisible(show);\t\tratingMin.setVisible(show);\t\tratingMin.setText(\"\");\t\tratingAnd.setVisible(show);\t\tratingMax.setVisible(show);\t\tratingMax.setText(\"\");\t\ttitleRuntime.setVisible(show);\t\truntimeMin.setVisible(show);\t\truntimeMin.setText(\"\");\t\truntimeAnd.setVisible(show);\t\truntimeMax.setVisible(show);\t\truntimeMax.setText(\"\");\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/SearchPanel.java", "stars": "1", "class": {"name": "SearchPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "setEpisodeSectionVisible", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setEpisodeSectionVisible(Boolean show) {\t\tseasonText.setVisible(show);\t\tseasonInput.setVisible(show);\t\tseasonInput.setText(\"\");\t\tepisodeText.setVisible(show);\t\tepisodeInput.setVisible(show);\t\tepisodeInput.setText(\"\");\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/SearchPanel.java", "stars": "1", "class": {"name": "SearchPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "setJobSectionVisible", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setJobSectionVisible(Boolean show) {\t\tcharacterText.setVisible(show);\t\tcharacterInput.setVisible(show);\t\tcharacterInput.setText(\"\");\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/SearchPanel.java", "stars": "1", "class": {"name": "SearchPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "setOutputFileVisible", "params": ["Boolean", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setOutputFileVisible(Boolean show, Integer numResults) {\t\tresults.setText(\"\");\t\toutputLabel\t\t\t\t.setText(\"Search returned \" + numResults + \" results. Please enter a filename to send the results to:\");\t\toutputLabel.setVisible(show);\t\toutputFile.setVisible(show);\t\toutputButton.setVisible(show);\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/SearchPanel.java", "stars": "1", "class": {"name": "SearchPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "writeFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void writeFile() {\t\ttry {\t\t\tFileManager fManager = new FileManager(outputFile.getText());\t\t\tfManager.writeToFile(finalResults);\t\t\tfManager.close();\t\t\toutputDone.setVisible(true);\t\t} catch (IOException e) {\t\t\toutputLabel.setText(\"Output failed! There was an exception writing to the specified file\");\t\t}\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/SearchPanel.java", "stars": "1", "class": {"name": "SearchPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void actionPerformed(ActionEvent e) {\t\t// check if the source of the UI event was the search button\t\tif (e.getSource() == searchButton) {\t\t\tresults.setText(\"Collecting results, please wait...\");\t\t\t// Execute query in a new thread to show status text\t\t\tThread t = new Thread() {\t\t\t\t@Override\t\t\t\tpublic void run() {\t\t\t\t\t// Initialize query and filter variables to be used in the database manager\t\t\t\t\t// functions\t\t\t\t\tString name = ((personNameInput.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: personNameInput.getText().toLowerCase().trim());\t\t\t\t\tString title = ((titleNameInput.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: titleNameInput.getText().toLowerCase().trim());\t\t\t\t\tString profession = ((professionDropDown.getItemAt(professionDropDown.getSelectedIndex())\t\t\t\t\t\t\t.equals(\"\")) ? null\t\t\t\t\t\t\t\t\t: professionDropDown.getItemAt(professionDropDown.getSelectedIndex())\t\t\t\t\t\t\t\t\t\t\t.toLowerCase());\t\t\t\t\tInteger minBirthYear = ((birthYearMin.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(birthYearMin.getText().trim()));\t\t\t\t\tInteger maxBirthYear = ((birthYearMax.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(birthYearMax.getText().trim()));\t\t\t\t\tInteger minDeathYear = ((deathYearMin.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(deathYearMin.getText().trim()));\t\t\t\t\tInteger maxDeathYear = ((deathYearMax.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(deathYearMax.getText().trim()));\t\t\t\t\tString type = ((typeDropDown.getItemAt(typeDropDown.getSelectedIndex()) == \"\") ? null\t\t\t\t\t\t\t: typeDropDown.getItemAt(typeDropDown.getSelectedIndex()));\t\t\t\t\t// Genre compatibility added in back-end, no UI support ATM\t\t\t\t\t// String genre = ((genreInput.getText().trim().equals(\"\")) ? null :\t\t\t\t\t// genreInput.getText().trim());\t\t\t\t\tString genre = null;\t\t\t\t\tInteger minStartYear = ((startYearMin.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(startYearMin.getText().trim()));\t\t\t\t\tInteger maxStartYear = ((startYearMax.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(startYearMax.getText().trim()));\t\t\t\t\tInteger minEndYear = ((endYearMin.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(endYearMin.getText().trim()));\t\t\t\t\tInteger maxEndYear = ((endYearMax.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(endYearMax.getText().trim()));\t\t\t\t\tInteger minRuntime = ((runtimeMin.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(runtimeMin.getText().trim()));\t\t\t\t\tInteger maxRuntime = ((runtimeMax.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(runtimeMax.getText().trim()));\t\t\t\t\tDouble minRating = ((ratingMin.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Double.parseDouble(ratingMin.getText().trim()));\t\t\t\t\tDouble maxRating = ((ratingMax.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Double.parseDouble(ratingMax.getText().trim()));\t\t\t\t\tBoolean adult = ((adultDropDown.getItemAt(adultDropDown.getSelectedIndex()).trim().equals(\"\"))\t\t\t\t\t\t\t? null\t\t\t\t\t\t\t: Boolean.parseBoolean(\t\t\t\t\t\t\t\t\tadultDropDown.getItemAt(adultDropDown.getSelectedIndex()).toLowerCase().trim()));\t\t\t\t\tInteger season = ((seasonInput.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(seasonInput.getText().trim()));\t\t\t\t\tInteger episode = ((episodeInput.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: Integer.parseInt(episodeInput.getText().trim()));\t\t\t\t\tString character = ((characterInput.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t: characterInput.getText().toLowerCase().trim());\t\t\t\t\tif (pGenInfo) {\t\t\t\t\t\t// print all info about the people who fit the given criteria\t\t\t\t\t\tArrayList<Person> people = manager.getPersonInfo(name, profession, minBirthYear, maxBirthYear,\t\t\t\t\t\t\t\tminDeathYear, maxDeathYear, false);\t\t\t\t\t\tString return_val = \"\";\t\t\t\t\t\tfor (Person person : people) {\t\t\t\t\t\t\treturn_val += manager.getPersonString(person, true);\t\t\t\t\t\t}\t\t\t\t\t\tif (!return_val.equals(\"\")) {\t\t\t\t\t\t\tif (people.size() > 5) {\t\t\t\t\t\t\t\t// show output to file result if there are too many people returned\t\t\t\t\t\t\t\tfinalResults = return_val;\t\t\t\t\t\t\t\tsetOutputFileVisible(true, people.size());\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tresults.setText(return_val);\t\t\t\t\t\t\t}\t\t\t\t\t\t} else {\t\t\t\t\t\t\tresults.setText(\"No results!\");\t\t\t\t\t\t}\t\t\t\t\t} else if (pRelTitles) {\t\t\t\t\t\t// prints all the titles a given person worked on that fit the given criteria\t\t\t\t\t\t// for people and titles\t\t\t\t\t\tArrayList<Title> titles = manager.getPersonTitles(name, title, profession, minBirthYear,\t\t\t\t\t\t\t\tmaxBirthYear, minDeathYear, maxDeathYear, type, genre, minStartYear, maxStartYear,\t\t\t\t\t\t\t\tminEndYear, maxEndYear, minRuntime, maxRuntime, minRating, maxRating, adult);\t\t\t\t\t\tString return_val = \"\";\t\t\t\t\t\tfor (Title t : titles) {\t\t\t\t\t\t\treturn_val += manager.getTitleString(t, true);\t\t\t\t\t\t}\t\t\t\t\t\tif (!return_val.equals(\"\")) {\t\t\t\t\t\t\tif (titles.size() > 5) {\t\t\t\t\t\t\t\t// show output to file result if there are too many titles returned\t\t\t\t\t\t\t\tfinalResults = return_val;\t\t\t\t\t\t\t\tsetOutputFileVisible(true, titles.size());\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tresults.setText(return_val);\t\t\t\t\t\t\t}\t\t\t\t\t\t} else {\t\t\t\t\t\t\tresults.setText(\"No results!\");\t\t\t\t\t\t}\t\t\t\t\t} else if (pJobs) {\t\t\t\t\t\t// print out info about jobs worked on by a particular person\t\t\t\t\t\tArrayList<Person> people = manager.getPersonInfo(name, profession, minBirthYear, maxBirthYear,\t\t\t\t\t\t\t\tminDeathYear, maxDeathYear, true);\t\t\t\t\t\tArrayList<Job> jobs = new ArrayList<Job>();\t\t\t\t\t\tfor (Person person : people) {\t\t\t\t\t\t\tjobs.addAll(manager.personJobSearch(person, type, genre, minStartYear, maxStartYear,\t\t\t\t\t\t\t\t\tminEndYear, maxEndYear, minRuntime, maxRuntime, minRating, maxRating, adult, null,\t\t\t\t\t\t\t\t\tcharacter, false));\t\t\t\t\t\t}\t\t\t\t\t\tString return_val = \"\";\t\t\t\t\t\tfor (Job job : jobs) {\t\t\t\t\t\t\treturn_val += manager.getJobString(job);\t\t\t\t\t\t}\t\t\t\t\t\tif (!return_val.equals(\"\")) {\t\t\t\t\t\t\tif (jobs.size() > 5) {\t\t\t\t\t\t\t\t// show output to file result if there are too many jobs returned\t\t\t\t\t\t\t\tfinalResults = return_val;\t\t\t\t\t\t\t\tsetOutputFileVisible(true, jobs.size());\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tresults.setText(return_val);\t\t\t\t\t\t\t}\t\t\t\t\t\t} else {\t\t\t\t\t\t\tresults.setText(\"No results!\");\t\t\t\t\t\t}\t\t\t\t\t} else if (tGenInfo) {\t\t\t\t\t\t// print all info about titles that fit the given criteria\t\t\t\t\t\tArrayList<Title> titles = manager.getTitleInfo(title, type, genre, minStartYear, maxStartYear,\t\t\t\t\t\t\t\tminEndYear, maxEndYear, minRuntime, maxRuntime, minRating, maxRating, adult);\t\t\t\t\t\tString return_val = \"\";\t\t\t\t\t\tif (titles == null) {\t\t\t\t\t\t\treturn_val = \"Enter search criteria\";\t\t\t\t\t\t\tresults.setText(return_val);\t\t\t\t\t\t}\t\t\t\t\t\telse {\t\t\t\t\t\t\tfor (Title titleName : titles) {\t\t\t\t\t\t\t\treturn_val += manager.getTitleString(titleName, true);\t\t\t\t\t\t\t}\t\t\t\t\t\t\tif (!return_val.equals(\"\")) {\t\t\t\t\t\t\t\tif (titles.size() > 5) {\t\t\t\t\t\t\t\t\t// show output to file result if there are too many titles returned\t\t\t\t\t\t\t\t\tfinalResults = return_val;\t\t\t\t\t\t\t\t\tsetOutputFileVisible(true, titles.size());\t\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\t\tresults.setText(return_val);\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tresults.setText(\"No results!\");\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t} else if (tRelPeople) {\t\t\t\t\t\t// print all info about jobs worked on the given title by the given person\t\t\t\t\t\tArrayList<Title> titles = manager.getTitleInfo(title, type, genre, minStartYear, maxStartYear,\t\t\t\t\t\t\t\tminEndYear, maxEndYear, minRuntime, maxRuntime, minRating, maxRating, adult);\t\t\t\t\t\tArrayList<Job> jobs = new ArrayList<Job>();\t\t\t\t\t\tArrayList<Job> tempJobs = new ArrayList<Job>();\t\t\t\t\t\tfor (Title t : titles) {\t\t\t\t\t\t\ttempJobs.addAll(manager.titleCastSearch(t, profession, minBirthYear, maxBirthYear,\t\t\t\t\t\t\t\t\tminDeathYear, maxDeathYear, null, character));\t\t\t\t\t\t}\t\t\t\t\t\tfor (Job job : tempJobs) {\t\t\t\t\t\t\tif (name != null) {\t\t\t\t\t\t\t\tif (job.getPerson().getName().trim().toLowerCase().equals(name)) {\t\t\t\t\t\t\t\t\tjobs.add(job);\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tjobs.add(job);\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t\t// add every job to the string we will print\t\t\t\t\t\tString return_val = \"\";\t\t\t\t\t\tfor (Job job : jobs) {\t\t\t\t\t\t\treturn_val += manager.getJobString(job);\t\t\t\t\t\t}\t\t\t\t\t\t// if there were results found\t\t\t\t\t\tif (!return_val.equals(\"\")) {\t\t\t\t\t\t\tif (jobs.size() > 5) {\t\t\t\t\t\t\t\t// show output to file result if there are too many jobs returned\t\t\t\t\t\t\t\tfinalResults = return_val;\t\t\t\t\t\t\t\tsetOutputFileVisible(true, jobs.size());\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tresults.setText(return_val);\t\t\t\t\t\t\t}\t\t\t\t\t\t} else {\t\t\t\t\t\t\tresults.setText(\"No results!\");\t\t\t\t\t\t}\t\t\t\t\t} else if (tEpisodes) {\t\t\t\t\t\t// print out info about episodes with the given ep. number/season and title\t\t\t\t\t\t// filters\t\t\t\t\t\tArrayList<Title> titles = manager.getTitleEpisodeInfo(title, genre, minStartYear, maxStartYear,\t\t\t\t\t\t\t\tminEndYear, maxEndYear, minRuntime, maxRuntime, minRating, maxRating, adult, season,\t\t\t\t\t\t\t\tepisode);\t\t\t\t\t\tString return_val = \"\";\t\t\t\t\t\tfor (Title titleName : titles) {\t\t\t\t\t\t\treturn_val += manager.getTitleString(titleName, true);\t\t\t\t\t\t}\t\t\t\t\t\tif (!return_val.equals(\"\")) {\t\t\t\t\t\t\tif (titles.size() > 5) {\t\t\t\t\t\t\t\t// show output to file result if there are too many titles returned\t\t\t\t\t\t\t\tfinalResults = return_val;\t\t\t\t\t\t\t\tsetOutputFileVisible(true, titles.size());\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tresults.setText(return_val);\t\t\t\t\t\t\t}\t\t\t\t\t\t} else {\t\t\t\t\t\t\tresults.setText(\"No results!\");\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t};\t\t\tt.start();\t\t} else if (e.getSource() == outputButton) {\t\t\t// send results to file\t\t\twriteFile();\t\t}\t\t// if it was the search drop down\t\telse if (e.getSource() == searchDropDown) {\t\t\t// clear options for want to know\t\t\tif (searchDropDown.getSelectedItem() == \"People\") {\t\t\t\tnoSearch = false;\t\t\t\tpSearch = true;\t\t\t\tpGenInfo = true;\t\t\t\tpRelTitles = false;\t\t\t\tpJobs = false;\t\t\t\ttSearch = false;\t\t\t\ttGenInfo = false;\t\t\t\ttRelPeople = false;\t\t\t\ttEpisodes = false;\t\t\t\twantDropDown.removeAllItems();\t\t\t\t// add the new options\t\t\t\twantDropDown.addItem(\"General Information\");\t\t\t\twantDropDown.addItem(\"Related Titles\");\t\t\t\twantDropDown.addItem(\"Job Search\");\t\t\t\t// make it editable if not already\t\t\t} else if (searchDropDown.getSelectedItem() == \"Titles\") {\t\t\t\tnoSearch = false;\t\t\t\tpSearch = false;\t\t\t\tpGenInfo = false;\t\t\t\tpRelTitles = false;\t\t\t\tpJobs = false;\t\t\t\ttSearch = true;\t\t\t\ttGenInfo = true;\t\t\t\ttRelPeople = false;\t\t\t\ttEpisodes = false;\t\t\t\t// clear all other things\t\t\t\twantDropDown.removeAllItems();\t\t\t\twantDropDown.addItem(\"General Information\");\t\t\t\twantDropDown.addItem(\"Cast Search\");\t\t\t\twantDropDown.addItem(\"Episode Search\");\t\t\t} else {\t\t\t\tnoSearch = true;\t\t\t\tpSearch = false;\t\t\t\tpGenInfo = false;\t\t\t\tpRelTitles = false;\t\t\t\tpJobs = false;\t\t\t\ttSearch = false;\t\t\t\ttGenInfo = false;\t\t\t\ttRelPeople = false;\t\t\t\ttEpisodes = false;\t\t\t\t// picked the \"\" in search\t\t\t\t// clear all other things\t\t\t\tresults.setText(\"\");\t\t\t\tsetPersonSectionVisible(false);\t\t\t\tsetTitleSectionVisible(false);\t\t\t\tsetEpisodeSectionVisible(false);\t\t\t\tsetJobSectionVisible(false);\t\t\t\tsearchButton.setVisible(false);\t\t\t\toutputDone.setVisible(false);\t\t\t\tsetOutputFileVisible(false, 0);\t\t\t\twantDropDown.removeAllItems();\t\t\t}\t\t} else if (e.getSource() == wantDropDown) {\t\t\tif (searchDropDown.getSelectedItem() == \"People\") {\t\t\t\tfilter.setVisible(true);\t\t\t\t// set of filters for search by\t\t\t\tthis.add(personName);\t\t\t\tpersonName.setBounds(20, 110, 120, 20);\t\t\t\tthis.add(personNameInput);\t\t\t\tpersonNameInput.setBounds(120, 110, 380, 20);\t\t\t\tthis.add(personProfession);\t\t\t\tpersonProfession.setBounds(20, 140, 120, 20);\t\t\t\tthis.add(professionDropDown);\t\t\t\tprofessionDropDown.setBounds(120, 140, 120, 20);\t\t\t\tthis.add(personBirth);\t\t\t\tpersonBirth.setBounds(260, 140, 150, 20);\t\t\t\tthis.add(birthYearMin);\t\t\t\tbirthYearMin.setBounds(380, 140, 40, 20);\t\t\t\tthis.add(birthAnd);\t\t\t\tbirthAnd.setBounds(430, 140, 40, 20);\t\t\t\tthis.add(birthYearMax);\t\t\t\tbirthYearMax.setBounds(460, 140, 40, 20);\t\t\t\tthis.add(characterText);\t\t\t\tcharacterText.setBounds(20, 170, 120, 20);\t\t\t\tthis.add(characterInput);\t\t\t\tcharacterInput.setBounds(120, 170, 120, 20);\t\t\t\tthis.add(personDeath);\t\t\t\tpersonDeath.setBounds(260, 170, 150, 20);\t\t\t\tthis.add(deathYearMin);\t\t\t\tdeathYearMin.setBounds(380, 170, 40, 20);\t\t\t\tthis.add(deathAnd);\t\t\t\tdeathAnd.setBounds(430, 170, 40, 20);\t\t\t\tthis.add(deathYearMax);\t\t\t\tdeathYearMax.setBounds(460, 170, 40, 20);\t\t\t\t// specify title filters\t\t\t\tthis.add(titleName);\t\t\t\ttitleName.setBounds(20, 220, 120, 20);\t\t\t\tthis.add(titleNameInput);\t\t\t\ttitleNameInput.setBounds(120, 220, 380, 20);\t\t\t\tthis.add(titleType);\t\t\t\ttitleType.setBounds(20, 250, 120, 20);\t\t\t\tthis.add(typeDropDown);\t\t\t\ttypeDropDown.setBounds(120, 250, 120, 20);\t\t\t\tthis.add(titleAdult);\t\t\t\ttitleAdult.setBounds(20, 280, 120, 20);\t\t\t\tthis.add(adultDropDown);\t\t\t\tadultDropDown.setBounds(120, 280, 120, 20);\t\t\t\tthis.add(titleRating);\t\t\t\ttitleRating.setBounds(20, 310, 150, 20);\t\t\t\tthis.add(ratingMin);\t\t\t\tratingMin.setBounds(120, 310, 40, 20);\t\t\t\tthis.add(ratingAnd);\t\t\t\tratingAnd.setBounds(170, 310, 40, 20);\t\t\t\tthis.add(ratingMax);\t\t\t\tratingMax.setBounds(200, 310, 40, 20);\t\t\t\tthis.add(titleStart);\t\t\t\ttitleStart.setBounds(260, 250, 150, 20);\t\t\t\tthis.add(startYearMin);\t\t\t\tstartYearMin.setBounds(380, 250, 40, 20);\t\t\t\tthis.add(startYearAnd);\t\t\t\tstartYearAnd.setBounds(430, 250, 40, 20);\t\t\t\tthis.add(startYearMax);\t\t\t\tstartYearMax.setBounds(460, 250, 40, 20);\t\t\t\tthis.add(titleEnd);\t\t\t\ttitleEnd.setBounds(260, 280, 150, 20);\t\t\t\tthis.add(endYearMin);\t\t\t\tendYearMin.setBounds(380, 280, 40, 20);\t\t\t\tthis.add(endYearAnd);\t\t\t\tendYearAnd.setBounds(430, 280, 40, 20);\t\t\t\tthis.add(endYearMax);\t\t\t\tendYearMax.setBounds(460, 280, 40, 20);\t\t\t\tthis.add(titleRuntime);\t\t\t\ttitleRuntime.setBounds(260, 310, 150, 20);\t\t\t\tthis.add(runtimeMin);\t\t\t\truntimeMin.setBounds(380, 310, 40, 20);\t\t\t\tthis.add(runtimeAnd);\t\t\t\truntimeAnd.setBounds(430, 310, 40, 20);\t\t\t\tthis.add(runtimeMax);\t\t\t\truntimeMax.setBounds(460, 310, 40, 20);\t\t\t\tthis.add(searchButton);\t\t\t\tif (wantDropDown.getSelectedItem() == \"General Information\") {\t\t\t\t\tpGenInfo = true;\t\t\t\t\tpRelTitles = false;\t\t\t\t\tpJobs = false;\t\t\t\t\tsearchButton.setBounds(240, 210, 80, 20);\t\t\t\t\tresults.setText(\"\");\t\t\t\t\tsetPersonSectionVisible(true);\t\t\t\t\tsetTitleSectionVisible(false);\t\t\t\t\tsetEpisodeSectionVisible(false);\t\t\t\t\tsetJobSectionVisible(false);\t\t\t\t\toutputDone.setVisible(false);\t\t\t\t\tsetOutputFileVisible(false, 0);\t\t\t\t\tsearchButton.setVisible(true);\t\t\t\t}\t\t\t\telse if (wantDropDown.getSelectedItem() == \"Related Titles\") {\t\t\t\t\tpGenInfo = false;\t\t\t\t\tpRelTitles = true;\t\t\t\t\tpJobs = false;\t\t\t\t\tsearchButton.setBounds(240, 350, 80, 20);\t\t\t\t\tresults.setText(\"\");\t\t\t\t\tsetPersonSectionVisible(true);\t\t\t\t\tsetTitleSectionVisible(true);\t\t\t\t\tsetEpisodeSectionVisible(false);\t\t\t\t\tsetJobSectionVisible(false);\t\t\t\t\toutputDone.setVisible(false);\t\t\t\t\tsetOutputFileVisible(false, 0);\t\t\t\t\tsearchButton.setVisible(true);\t\t\t\t} else if (wantDropDown.getSelectedItem() == \"Job Search\") {\t\t\t\t\tpGenInfo = false;\t\t\t\t\tpRelTitles = false;\t\t\t\t\tpJobs = true;\t\t\t\t\tsearchButton.setBounds(240, 210, 80, 20);\t\t\t\t\tresults.setText(\"\");\t\t\t\t\tsetPersonSectionVisible(true);\t\t\t\t\tsetTitleSectionVisible(false);\t\t\t\t\tsetEpisodeSectionVisible(false);\t\t\t\t\tsetJobSectionVisible(true);\t\t\t\t\toutputDone.setVisible(false);\t\t\t\t\tsetOutputFileVisible(false, 0);\t\t\t\t\tsearchButton.setVisible(true);\t\t\t\t}\t\t\t} else if (searchDropDown.getSelectedItem() == \"Titles\") {\t\t\t\tfilter.setVisible(true);\t\t\t\tthis.add(titleName);\t\t\t\ttitleName.setBounds(20, 110, 120, 20);\t\t\t\tthis.add(titleNameInput);\t\t\t\ttitleNameInput.setBounds(120, 110, 380, 20);\t\t\t\tthis.add(titleType);\t\t\t\ttitleType.setBounds(20, 140, 120, 20);\t\t\t\tthis.add(typeDropDown);\t\t\t\ttypeDropDown.setBounds(120, 140, 120, 20);\t\t\t\tthis.add(titleAdult);\t\t\t\ttitleAdult.setBounds(20, 170, 120, 20);\t\t\t\tthis.add(adultDropDown);\t\t\t\tadultDropDown.setBounds(120, 170, 120, 20);\t\t\t\tthis.add(titleRating);\t\t\t\ttitleRating.setBounds(20, 200, 150, 20);\t\t\t\tthis.add(ratingMin);\t\t\t\tratingMin.setBounds(120, 200, 40, 20);\t\t\t\tthis.add(ratingAnd);\t\t\t\tratingAnd.setBounds(170, 200, 40, 20);\t\t\t\tthis.add(ratingMax);\t\t\t\tratingMax.setBounds(200, 200, 40, 20);\t\t\t\tthis.add(titleStart);\t\t\t\ttitleStart.setBounds(260, 140, 150, 20);\t\t\t\tthis.add(startYearMin);\t\t\t\tstartYearMin.setBounds(380, 140, 40, 20);\t\t\t\tthis.add(startYearAnd);\t\t\t\tstartYearAnd.setBounds(430, 140, 40, 20);\t\t\t\tthis.add(startYearMax);\t\t\t\tstartYearMax.setBounds(460, 140, 40, 20);\t\t\t\tthis.add(titleEnd);\t\t\t\ttitleEnd.setBounds(260, 170, 150, 20);\t\t\t\tthis.add(endYearMin);\t\t\t\tendYearMin.setBounds(380, 170, 40, 20);\t\t\t\tthis.add(endYearAnd);\t\t\t\tendYearAnd.setBounds(430, 170, 40, 20);\t\t\t\tthis.add(endYearMax);\t\t\t\tendYearMax.setBounds(460, 170, 40, 20);\t\t\t\tthis.add(titleRuntime);\t\t\t\ttitleRuntime.setBounds(260, 200, 150, 20);\t\t\t\tthis.add(runtimeMin);\t\t\t\truntimeMin.setBounds(380, 200, 40, 20);\t\t\t\tthis.add(runtimeAnd);\t\t\t\truntimeAnd.setBounds(430, 200, 40, 20);\t\t\t\tthis.add(runtimeMax);\t\t\t\truntimeMax.setBounds(460, 200, 40, 20);\t\t\t\tthis.add(personName);\t\t\t\tpersonName.setBounds(20, 240, 120, 20);\t\t\t\tthis.add(personNameInput);\t\t\t\tpersonNameInput.setBounds(120, 240, 380, 20);\t\t\t\tthis.add(personBirth);\t\t\t\tpersonBirth.setBounds(260, 270, 150, 20);\t\t\t\tthis.add(birthYearMin);\t\t\t\tbirthYearMin.setBounds(380, 270, 40, 20);\t\t\t\tthis.add(birthAnd);\t\t\t\tbirthAnd.setBounds(430, 270, 40, 20);\t\t\t\tthis.add(birthYearMax);\t\t\t\tbirthYearMax.setBounds(460, 270, 40, 20);\t\t\t\tthis.add(personDeath);\t\t\t\tpersonDeath.setBounds(260, 300, 150, 20);\t\t\t\tthis.add(deathYearMin);\t\t\t\tdeathYearMin.setBounds(380, 300, 40, 20);\t\t\t\tthis.add(deathAnd);\t\t\t\tdeathAnd.setBounds(430, 300, 40, 20);\t\t\t\tthis.add(deathYearMax);\t\t\t\tdeathYearMax.setBounds(460, 300, 40, 20);\t\t\t\tthis.add(personProfession);\t\t\t\tpersonProfession.setBounds(20, 270, 120, 20);\t\t\t\tthis.add(professionDropDown);\t\t\t\tprofessionDropDown.setBounds(120, 270, 120, 20);\t\t\t\tthis.add(characterText);\t\t\t\tcharacterText.setBounds(20, 300, 120, 20);\t\t\t\tthis.add(characterInput);\t\t\t\tcharacterInput.setBounds(120, 300, 120, 20);\t\t\t\tthis.add(seasonText);\t\t\t\tseasonText.setBounds(20, 240, 120, 20);\t\t\t\tthis.add(seasonInput);\t\t\t\tseasonInput.setBounds(120, 240, 120, 20);\t\t\t\tthis.add(episodeText);\t\t\t\tepisodeText.setBounds(260, 240, 120, 20);\t\t\t\tthis.add(episodeInput);\t\t\t\tepisodeInput.setBounds(380, 240, 120, 20);\t\t\t\tthis.add(searchButton);\t\t\t\tif (wantDropDown.getSelectedItem() == \"General Information\") {\t\t\t\t\ttGenInfo = true;\t\t\t\t\ttRelPeople = false;\t\t\t\t\ttEpisodes = false;\t\t\t\t\tsearchButton.setBounds(240, 240, 80, 20);\t\t\t\t\tresults.setText(\"\");\t\t\t\t\tsetEpisodeSectionVisible(false);\t\t\t\t\tsetPersonSectionVisible(false);\t\t\t\t\tsetTitleSectionVisible(true);\t\t\t\t\tsetJobSectionVisible(false);\t\t\t\t\toutputDone.setVisible(false);\t\t\t\t\tsetOutputFileVisible(false, 0);\t\t\t\t\tsearchButton.setVisible(true);\t\t\t\t} else if (wantDropDown.getSelectedItem() == \"Cast Search\") {\t\t\t\t\ttGenInfo = false;\t\t\t\t\ttRelPeople = true;\t\t\t\t\ttEpisodes = false;\t\t\t\t\tsearchButton.setBounds(240, 340, 80, 20);\t\t\t\t\tresults.setText(\"\");\t\t\t\t\tsetEpisodeSectionVisible(false);\t\t\t\t\tsetPersonSectionVisible(true);\t\t\t\t\tsetTitleSectionVisible(true);\t\t\t\t\tsetJobSectionVisible(true);\t\t\t\t\toutputDone.setVisible(false);\t\t\t\t\tsetOutputFileVisible(false, 0);\t\t\t\t\tsearchButton.setVisible(true);\t\t\t\t} else if (wantDropDown.getSelectedItem() == \"Episode Search\") {\t\t\t\t\ttGenInfo = false;\t\t\t\t\ttRelPeople = false;\t\t\t\t\ttEpisodes = true;\t\t\t\t\tsearchButton.setBounds(240, 280, 80, 20);\t\t\t\t\tresults.setText(\"\");\t\t\t\t\tsetEpisodeSectionVisible(true);\t\t\t\t\tsetPersonSectionVisible(false);\t\t\t\t\tsetTitleSectionVisible(true);\t\t\t\t\tsetJobSectionVisible(false);\t\t\t\t\toutputDone.setVisible(false);\t\t\t\t\tsetOutputFileVisible(false, 0);\t\t\t\t\ttitleType.setVisible(false);\t\t\t\t\ttypeDropDown.setVisible(false);\t\t\t\t\ttypeDropDown.setSelectedItem(\"\");\t\t\t\t\tsearchButton.setVisible(true);\t\t\t\t}\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/SearchPanel.java", "stars": "1", "class": {"name": "SearchPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t//\u521b\u5efaScanner\u5bf9\u8c61\uff0c\u63a5\u53d7\u4ece\u63a7\u5236\u53f0\u8f93\u5165\t\tScanner input=new Scanner(System.in);\t\t//\u63a5\u53d7String\u7c7b\u578b\t\tString str=input.next();\t\t//\u8f93\u51fa\u7ed3\u679c\t\tSystem.out.println(str);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Inputdemo.java", "stars": "2", "class": {"name": "Inputdemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setScrimsShown", "params": ["boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setScrimsShown(boolean shown, boolean animate) {        super.setScrimsShown(shown, true);        // \u5224\u65ad\u6e10\u53d8\u72b6\u6001\u662f\u5426\u6539\u53d8\u4e86        if (isScrimsShown != shown) {            // \u5982\u679c\u662f\u5c31\u8bb0\u5f55\u5e76\u4e14\u56de\u8c03\u76d1\u542c\u5668            isScrimsShown = shown;            if (mListener != null) {                mListener.onScrimsStateChange(this, isScrimsShown);            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/XCollapsingToolbarLayout.java", "stars": "1", "class": {"name": "XCollapsingToolbarLayout", "extends": "CollapsingToolbarLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isScrimsShown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isScrimsShown() {        return isScrimsShown;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/XCollapsingToolbarLayout.java", "stars": "1", "class": {"name": "XCollapsingToolbarLayout", "extends": "CollapsingToolbarLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setOnScrimsListener", "params": ["OnScrimsListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnScrimsListener(OnScrimsListener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/XCollapsingToolbarLayout.java", "stars": "1", "class": {"name": "XCollapsingToolbarLayout", "extends": "CollapsingToolbarLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FailType", "snippet": "\tpublic FailType getType() {\t\treturn type;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/FailReason.java", "stars": "74", "class": {"name": "FailReason", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Throwable", "snippet": "\tpublic Throwable getCause() {\t\treturn cause;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/FailReason.java", "stars": "74", "class": {"name": "FailReason", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fazRetirada", "params": ["int"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "\tstatic void fazRetirada(int valor) {\t\t\t\t//Testa se o valor \u00e9 v\u00e1lido, isto \u00e9, se \u00e9 maior que 0\t\tif (valor >= 0) {\t\t\t\t\t\t/*\t\t\tDivide o valor de retirada pelo valor da c\u00e9dula para saber quantas c\u00e9dulas ser\u00e3o necess\u00e1rias,\t\t\tarmazena, e utiliza o resto da opera\u00e7\u00e3o anterior para realizar a pr\u00f3xima divis\u00e3o.\t\t\t\t\t\tEx: 127 \t\t\t127 / 50 == 2\t\t\t127 % 50 == 27 \t\t\t27 / 10 == 2\t\t\t27 % 10 == 7\t\t\t7 / 5 == 1\t\t\t7 % 5 == 2\t\t\t2 / 1 == 2\t\t\t2 % 1 == 0\t\t\t*/\t\t\tn50 = (valor / 50);\t\t\tint resto50 = (valor % 50);\t\t\tn10 = (resto50 /10);\t\t\tint resto10 = (resto50 % 10);\t\t\tn5 = (resto10 / 5);\t\t\tint resto5 = (resto10 % 5);\t\t\tn1 = (resto5);        } else {\t\t\tn50 = -1;            n10 = -1;            n5 = -1;\t\t\tn1 = -1;\t\t}\t}", "url": "https://raw.githubusercontent.com/raulmel1o/epIP/master/ep1/CaixaEletronico.java", "stars": "2", "class": {"name": "CaixaEletronico", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// Exemplo de teste:\t\tfazRetirada(0);\t\tSystem.out.println(\"Notas de 50: \"+n50);\t\tSystem.out.println(\"Notas de 10: \"+n10);\t\tSystem.out.println(\"Notas de 5:  \"+n5);\t\tSystem.out.println(\"Notas de 1:  \"+n1);\t}", "url": "https://raw.githubusercontent.com/raulmel1o/epIP/master/ep1/CaixaEletronico.java", "stars": "2", "class": {"name": "CaixaEletronico", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleRSocketApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-rsocket/src/main/java/smoketest/rsocket/SampleRSocketApplication.java", "stars": "47572", "class": {"name": "SampleRSocketApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimerTask", "params": [], "throws": null, "modifiers": ["private"], "return_type": "TimerTask", "snippet": "  private TimerTask getTimerTask() {    final TimeBasedReportingMetric<T> lockObject = this;    final TimerTask recurringReporting = new TimerTask() {      @Override      public void run() {        synchronized (lockObject) {          preTrackingEventMethod();          notifyManager();          postTrackingEventMethod();        }      }    };    return recurringReporting;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/TimeBasedReportingMetric.java", "stars": "18", "class": {"name": "TimeBasedReportingMetric", "extends": "AbstractMetric", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "updateInterval", "params": ["long"], "throws": ["MetricException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateInterval(final long interval) throws MetricException {    if (!isValidInterval(interval)) {      throw new MetricException(\"Invalid interval: Cannot update timer\");    }    logger.debug(String        .format(\"Updating tracking interval to %d milisecond for %s metric\", interval, getName()));    this.timer.cancel();    this.timer = new Timer();    this.timer.schedule(getTimerTask(), interval, interval);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/TimeBasedReportingMetric.java", "stars": "18", "class": {"name": "TimeBasedReportingMetric", "extends": "AbstractMetric", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isValidInterval", "params": ["long"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isValidInterval(final long interval) {    return interval >= this.MIN_MILLISEC_INTERVAL && interval <= this.MAX_MILLISEC_INTERVAL;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/TimeBasedReportingMetric.java", "stars": "18", "class": {"name": "TimeBasedReportingMetric", "extends": "AbstractMetric", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "preTrackingEventMethod", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "  protected abstract void preTrackingEventMethod();  /**   * This method is responsible for making any post processing after tracking   */  protected abstract void postTrackingEventMethod();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/TimeBasedReportingMetric.java", "stars": "18", "class": {"name": "TimeBasedReportingMetric", "extends": "AbstractMetric", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "postTrackingEventMethod", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "  protected abstract void postTrackingEventMethod();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/TimeBasedReportingMetric.java", "stars": "18", "class": {"name": "TimeBasedReportingMetric", "extends": "AbstractMetric", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "configure", "params": ["ClientDetailsServiceConfigurer"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void configure(ClientDetailsServiceConfigurer clients) throws Exception {\t\tclients.inMemory()\t\t\t.withClient(\"cloudsimpleservice\")\t\t\t.secret(\"mysecret\")\t\t\t.authorizedGrantTypes(\t\t\t\t\"refesh_token\",\t\t\t\t\"password\",\t\t\t\t\"client_credentials\")\t\t\t.scopes(\"webclient\", \"mobileclient\");\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth-service/src/main/java/com/iiht/stock/auth/security/OAuth2Config.java", "stars": "2", "class": {"name": "OAuth2Config", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["AuthorizationServerSecurityConfigurer"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void configure(AuthorizationServerSecurityConfigurer security) throws Exception {\t\tsecurity.tokenKeyAccess(\"permitAll()\")\t\t\t\t.checkTokenAccess(\"isAuthenticated()\");\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth-service/src/main/java/com/iiht/stock/auth/security/OAuth2Config.java", "stars": "2", "class": {"name": "OAuth2Config", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["AuthorizationServerEndpointsConfigurer"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\t\tendpoints\t\t\t.authenticationManager(authenticationManager)\t\t\t.userDetailsService(userDetailsService);\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth-service/src/main/java/com/iiht/stock/auth/security/OAuth2Config.java", "stars": "2", "class": {"name": "OAuth2Config", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateSender", "params": ["DevolaySender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateSender(DevolaySender sender){        this.sender.get().close();        this.sender.set(sender);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/threads/NDIThread.java", "stars": "5", "class": {"name": "NDIThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateVideoFrame", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateVideoFrame(int width, int height){        this.width.set(width);        this.height.set(height);        DevolayVideoFrame videoFrame1 = videoFrame.get();        videoFrame1.setResolution(width, height);        videoFrame1.setLineStride(width * 4);        videoFrame.set(videoFrame1);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/threads/NDIThread.java", "stars": "5", "class": {"name": "NDIThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "setByteBuffer", "params": ["ByteBuffer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setByteBuffer(ByteBuffer buffer){        this.byteBuffer.set(buffer);        this.needsFrame.set(false);        this.hasFlipped.set(false);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/threads/NDIThread.java", "stars": "5", "class": {"name": "NDIThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNeedsFrame", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AtomicBoolean", "snippet": "    public AtomicBoolean getNeedsFrame(){        return needsFrame;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/threads/NDIThread.java", "stars": "5", "class": {"name": "NDIThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "end", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void end(){        this.running = false;        videoFrame.get().close();        sender.get().close();    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/threads/NDIThread.java", "stars": "5", "class": {"name": "NDIThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        int frameCounter = 0;        long fpsPeriod = System.currentTimeMillis();        long lastFrame = System.currentTimeMillis();        float amountofTime = (1f / 30f) * 1000;        while(running) {            long timeSinceLastFrame = System.currentTimeMillis() - lastFrame;            if(timeSinceLastFrame < amountofTime){                try {                    Thread.sleep((long) (amountofTime - timeSinceLastFrame));                } catch (InterruptedException e) {                    e.printStackTrace();                }                continue;            }            if(sender.get().getConnectionCount(0) < 1){                try {                    Thread.sleep(500);                } catch (InterruptedException e) {                    e.printStackTrace();                }                continue;            }            if(needsFrame.get()){                continue;            }            DevolayVideoFrame frame = videoFrame.get();            ByteBuffer buffer = byteBuffer.get();            frame.setData(buffer);            this.sender.get().sendVideoFrame(frame);            needsFrame.set(true);            lastFrame = System.currentTimeMillis();            if(frameCounter % 30 == 29) {                long timeSpent = System.currentTimeMillis() - fpsPeriod;                System.out.println(\"Sent 30 frames. Average FPS: \" + 30f / (timeSpent / 1000f));                fpsPeriod = System.currentTimeMillis();            }            frameCounter++;        }    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/threads/NDIThread.java", "stars": "5", "class": {"name": "NDIThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_user_profile);        fullName =findViewById(R.id.full_name_profile);        email =findViewById(R.id.email_profile);        phoneNo =findViewById(R.id.phone_no_profile);        password =findViewById(R.id.password_profile);        fullNameLabel = findViewById(R.id.fullname_field);        usernameLabel = findViewById(R.id.username_field);        reference = FirebaseDatabase.getInstance().getReference(\"users\");        // show all Data        showAllUserData();    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserProfile.java", "stars": "3", "class": {"name": "UserProfile", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "showAllUserData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showAllUserData() {        Intent intent = getIntent();         user_username = intent.getStringExtra(\"username\");         user_name = intent.getStringExtra(\"name\");         user_email = intent.getStringExtra(\"email\");         user_phoneNo = intent.getStringExtra(\"phoneNo\");         user_password = intent.getStringExtra(\"password\");        fullNameLabel.setText(user_name);        usernameLabel.setText(user_username);        fullName.getEditText().setText(user_name);        email.getEditText().setText(user_email);        phoneNo.getEditText().setText(user_phoneNo);        password.getEditText().setText(user_password);    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserProfile.java", "stars": "3", "class": {"name": "UserProfile", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void update(View view){        if(isNameChanged() || isPasswordChanged()  ){            Toast.makeText(this, \"Data has been updated\", Toast.LENGTH_LONG).show();        }        else Toast.makeText(this,\"Data is same and cannot be updated\",Toast.LENGTH_LONG).show();    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserProfile.java", "stars": "3", "class": {"name": "UserProfile", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isPasswordChanged", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Boolean", "snippet": "    private Boolean isPasswordChanged(){        if(!user_password.equals(password.getEditText().getText().toString()))        {            reference.child(user_username).child(\"password\").setValue(password.getEditText().getText().toString());            user_password=password.getEditText().getText().toString();            return true;        }else{            return false;        }    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserProfile.java", "stars": "3", "class": {"name": "UserProfile", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNameChanged", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Boolean", "snippet": "    private  Boolean isNameChanged(){        if(!user_name.equals(fullName.getEditText().getText().toString())){            reference.child(user_username).child(\"name\").setValue(fullName.getEditText().getText().toString());            user_name=fullName.getEditText().getText().toString();            return true;        }else{            return false;    }}", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserProfile.java", "stars": "3", "class": {"name": "UserProfile", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        int bitmapWidth = bitmap.getWidth();        int bitmapHeight = bitmap.getHeight();        canvas.save();        matrix.reset();        matrix.postScale(1.3f, 1.3f, point1.x + bitmapWidth / 2, point1.y + bitmapHeight / 2);        canvas.concat(matrix);        canvas.drawBitmap(bitmap, point1.x, point1.y, paint);        canvas.restore();        canvas.save();        matrix.reset();        matrix.postScale(0.6f, 1.6f, point2.x + bitmapWidth / 2, point2.y + bitmapHeight / 2);        canvas.concat(matrix);        canvas.drawBitmap(bitmap, point2.x, point2.y, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice08MatrixScaleView.java", "stars": "2", "class": {"name": "Practice08MatrixScaleView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "haveNodeIdsPermission", "params": ["String", "List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean haveNodeIdsPermission(String appUser, List<Integer> execNodeIds) {        execNodeIds = execNodeIds.stream().map(String::valueOf)                .distinct()                .map(Integer::valueOf).collect(Collectors.toList());        List<ExecutorNode> nodes = userExecNodeDao.getExecNodeByUserAndIds(appUser, execNodeIds);        List<Integer> nodeIds = nodes.stream().map(ExecutorNode::getId).distinct().collect(Collectors.toList());        if(nodeIds.size() < execNodeIds.size()){            List<Integer> copyExecNodeIds = new ArrayList<>(execNodeIds);            copyExecNodeIds.removeAll(nodeIds);            int defaultNodes = execNodeDao.countDefaultByIds(copyExecNodeIds);            return defaultNodes == copyExecNodeIds.size();        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "haveNodeNamesPermission", "params": ["String", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Pair<List,Boolean>", "snippet": "    public Pair<List<ExecutorNode>, Boolean> haveNodeNamesPermission(String appUser, List<String> execNodeNames) {        execNodeNames = execNodeNames.stream().distinct().collect(Collectors.toList());        List<ExecutorNode> nodes = userExecNodeDao.getExecNodeByUserAndNames(appUser, execNodeNames);        List<String> nodeNames = nodes.stream().map(ExecutorNode::getAddress).distinct().collect(Collectors.toList());        if(nodeNames.size() < execNodeNames.size()){            List<String> copyExecNodeNames = new ArrayList<>(execNodeNames);            copyExecNodeNames.removeAll(nodeNames);            int defaultNodes = execNodeDao.countDefaultByNames(copyExecNodeNames);            return new MutablePair<>(nodes, defaultNodes == copyExecNodeNames.size());        }        return new MutablePair<>(nodes,true);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "getExecNodeByUserAndNames", "params": ["String", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutorNode>", "snippet": "    public List<ExecutorNode> getExecNodeByUserAndNames(String appUser, List<String> execNodeNames) {        return userExecNodeDao.getExecNodeByUserAndNames(appUser, execNodeNames);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "getExecNodesByAppUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutorNode>", "snippet": "    public List<ExecutorNode> getExecNodesByAppUser(String appUser) {        return  userExecNodeDao.getExecNodeByUser(appUser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "getExecNodesByAppUserAndTab", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutorNode>", "snippet": "    public List<ExecutorNode> getExecNodesByAppUserAndTab(String appUser, String tabName) {        return userExecNodeDao.getExecNodeByUserAndTab(appUser, tabName);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "getExecNodeUser", "params": ["Integer", "String"], "throws": null, "modifiers": ["public"], "return_type": "ExecNodeUser", "snippet": "    public ExecNodeUser getExecNodeUser(Integer nodeId, String execUser) {        return execNodeUserDao.selectOne(nodeId, execUser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "bindExecNodeAndUsers", "params": ["ExecNodeUserBind"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int bindExecNodeAndUsers(ExecNodeUserBind bind) {        Integer nodeId = bind.getNodeId();        ExecutorNode node = execNodeDao.selectOne(nodeId);        if(null != node && !bind.getExecUserList().isEmpty()) {            String address = node.getAddress();            List<ExecUser> execUserList =  bind.getExecUserList();            ExecNodeUserBind.BindOpType opType = bind.getOpType();            ExecNodeInfoService execNodeInfoService = (ExecNodeInfoService)AopContext.currentProxy();            execNodeInfoService.bindExecNodeAndUsers(nodeId, execUserList);            if(opType == ExecNodeUserBind.BindOpType.BIND_RELATE){                AtomicInteger count = new AtomicInteger();                execUserList.forEach(execUser -> {                    try {                        ExecNodeUser execNodeUser = execNodeUserDao.selectOne(nodeId, execUser.getExecUser());                        if (execNodeInfoService.relateExecNodeAndUser(address, execNodeUser)) {                            count.getAndIncrement();                        }                    }catch(Exception e){                        LOG.error(e.getMessage(), e);                    }                });                return count.get();            }else{                return execUserList.size();            }        }        return 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "bindAndRelateExecNodesAndUser", "params": ["List<Integer>", "List<String>", "ExecUser"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int bindAndRelateExecNodesAndUser(List<Integer> nodeIds, List<String> nodeNames, ExecUser execUser) {        List<ExecNodeUser> execNodeUsers = new ArrayList<>();        nodeIds.forEach(nodeId -> {            ExecNodeUser execNodeUser = new ExecNodeUser();            execNodeUser.setExecNodeId(nodeId);            execNodeUser.setExecUser(execUser.getExecUser());            execNodeUser.setUpdateTime(Calendar.getInstance().getTime());            execNodeUsers.add(execNodeUser);        });        execNodeUserDao.insertBatch(execNodeUsers);        ExecNodeInfoService execNodeInfoService = (ExecNodeInfoService)AopContext.currentProxy();        AtomicInteger count = new AtomicInteger();        for(int i = 0 ; i < nodeIds.size(); i ++){            Integer nodeId = nodeIds.get(i);            String nodeName = nodeNames.size() > i ? nodeNames.get(i) : \"\";            try {                ExecNodeUser execNodeUser = execNodeUserDao.selectOne(nodeId, execUser.getExecUser());                if (execNodeInfoService.relateExecNodeAndUser(nodeName, execNodeUser)) {                    count.getAndIncrement();                }            }catch(Exception e){                LOG.error(e.getMessage(), e);            }        }        return count.get();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "bindExecNodeAndUsers", "params": ["Integer", "List<ExecUser>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void bindExecNodeAndUsers(Integer nodeId, List<ExecUser> execUsers) {        List<ExecNodeUser> execNodeUsers = new ArrayList<>();        execUsers.forEach(execUser -> {            ExecNodeUser execNodeUser = new ExecNodeUser();            execNodeUser.setExecNodeId(nodeId);            execNodeUser.setExecUser(execUser.getExecUser());            execNodeUser.setUpdateTime(Calendar.getInstance().getTime());            execNodeUsers.add(execNodeUser);        });        execNodeUserDao.insertBatch(execNodeUsers);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "unBindExecNodeAndUser", "params": ["ExecNodeUser"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unBindExecNodeAndUser(ExecNodeUser execNodeUser) {        ExecutorNode node = execNodeDao.selectOne(execNodeUser.getExecNodeId());        String address = null == node?null : node.getAddress();        if(StringUtils.isNotBlank(address)){            if(execNodeUser.getUid() != null) {                int result = execNodeUserDao.markDelete(execNodeUser.getExecNodeId(), execNodeUser.getExecUser());                if (result > 0) {                    try {                        Response<String> response = executeService.deleteSysUser(address, execNodeUser.getExecUser());                        if (response.getCode() != 0) {                            LOG.info(\"Fail to delete system user in executor, message: \" + response.getMessage());                        }                    } catch (Exception e) {                        LOG.error(\"Error to delete system user in executor\", e);                    }                }            }else{                execNodeUserDao.delete(execNodeUser.getExecNodeId(), execNodeUser.getExecUser());            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "relateExecNodeAndUser", "params": ["String", "ExecNodeUser"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean relateExecNodeAndUser(String address, ExecNodeUser execNodeUser) {        boolean result = false;        if(StringUtils.isBlank(address)){            ExecutorNode node = execNodeDao.selectOne(execNodeUser.getExecNodeId());            address = null == node?address : node.getAddress();        }        if(StringUtils.isNotBlank(address)){            String execUser = execNodeUser.getExecUser();            Long uid = (long) (null == execNodeUser.getUid() ? -1 : execNodeUser.getUid());            String userType = execNodeUser.getUserType();            if(uid < 0){                Pair<String, Long> pair = uidGenerator.generate(execNodeUser.getExecNodeId(), execUser);                userType = pair.getLeft();                uid = pair.getRight();            }            try {                Response<ExecSysUser> response = executeService                        .createSysUser(address, execUser, Math.toIntExact(uid), PlatformUidGenerator.DEFAULT_EXEC_USER_GROUP_ID);                if (response.getCode() == 0) {                    ExecSysUser sysUser = response.getData();                    execNodeUser.setUserType(userType);                    execNodeUser.setUid(sysUser.getUid());                    execNodeUser.setGid(sysUser.getGid());                    execNodeUser.setRelationState(1);                    result = true;                } else {                    execNodeUser.setRelationState(2);                    LOG.error(\"Fail to associate executive user: \" + execUser + \", response msg:\" + response.getMessage());                }            }catch(Exception e){                execNodeUser.setRelationState(2);                LOG.error(\"Fail to associate executive user: \" + execUser + \", error msg:\" + e.getMessage());            }            execNodeUserDao.updateOne(execNodeUser);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "notRelateExecNodeAndUser", "params": ["ExecNodeUser"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean notRelateExecNodeAndUser(ExecNodeUser execNodeUser) {        execNodeUser.setRelationState(0);        execNodeUserDao.updateOne(execNodeUser);        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "findExecNodeUserPage", "params": ["ExecNodeUserQuery"], "throws": null, "modifiers": ["public"], "return_type": "PageList<ExecNodeUser>", "snippet": "    public PageList<ExecNodeUser> findExecNodeUserPage(ExecNodeUserQuery query) {        Long count = execNodeUserDao.count(query);        int currentPage = query.getPage();        int pageSize = query.getPageSize();        PageList<ExecNodeUser> page = new PageList<>(new Paginator(currentPage, pageSize, count.intValue()));        int offset = currentPage > 0 ? (currentPage - 1) * pageSize : 0;        List<ExecNodeUser> result = execNodeUserDao.findPage(query, new RowBounds(offset, pageSize));        page.setData(result);        return page;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "selectExecNode", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "ExecutorNode", "snippet": "    public ExecutorNode selectExecNode(Integer nodeId) {        return execNodeDao.selectOne(nodeId);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "attachTab", "params": ["ExecNodeTabRelation"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void attachTab(ExecNodeTabRelation relation) {        List<Integer> tabIds = relation.getTabIds();        if(tabIds.isEmpty() && !relation.getTabNames().isEmpty()) {            tabIds = tabDao.getTabIdsByNameList(relation.getTabNames());        }        if(!tabIds.isEmpty()){            List<Integer> oldTabIds = execNodeTabDao.getTabIdsByExecNode(relation.getNodeId());            List<Integer> removeTabIds = new ArrayList<>(oldTabIds);            removeTabIds.removeAll(tabIds);            if (!removeTabIds.isEmpty()) {                //delete                execNodeTabDao.deleteBatch(relation.getNodeId(), removeTabIds);            }            tabIds.removeAll(oldTabIds);            if (!tabIds.isEmpty()) {                //add                List<TabEntity> tabEntities = tabDao.getTabsByIds(tabIds);                List<ExecNodeTab> attachTabs = new ArrayList<>();                tabEntities.forEach(tabEntity -> attachTabs.add(new ExecNodeTab(relation.getNodeId(), tabEntity.getId(), tabEntity.getName())));                execNodeTabDao.insertBatch(attachTabs);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "getExecNodeUserList", "params": ["List<Integer>", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<ExecNodeUser>", "snippet": "    public List<ExecNodeUser> getExecNodeUserList(List<Integer> execNodes, String execUser) {        return execNodeUserDao.listByExecNodeIdsAndUser(execNodes, execUser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "deleteNode", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteNode(Long id) {        ExecutorNode node = execNodeDao.selectOne(id);        //Delete relation of node and executive user        execNodeUserDao.deleteByNodeId(node.getId());        //Delete relation of node and app user        userExecNodeDao.deleteByNodeId(node.getId());        execNodeDao.delete(Collections.singletonList(id));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "changeDefault", "params": ["Integer", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean changeDefault(Integer nodeId, boolean value) {        return execNodeDao.updateDefault(nodeId, value) > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "getDefaultNodeListByTab", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutorNode>", "snippet": "    public List<ExecutorNode> getDefaultNodeListByTab(String tabName) {        return execNodeDao.getDefaultNodesByTab(tabName);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeInfoServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeInfoServiceImpl", "extends": null, "implements": ["ExecNodeInfoService"], "modifiers": ["public"]}}, {"method_name": "execute", "params": ["ProceedingJoinPoint"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object execute(ProceedingJoinPoint joinPoint) throws Throwable {        Object[] args = joinPoint.getArgs();        if (logger.isDebugEnabled() || logger.isWarnEnabled()) {            StopWatch clock = new StopWatch();            clock.start();            Object returnObj = null;            try {                return returnObj = joinPoint.proceed(args);            } catch (Exception e) {                throw e;            } finally {                clock.stop();                long totalTimeMillis = clock.getTotalTimeMillis();                handleLog(joinPoint, args, returnObj, totalTimeMillis);            }        } else {            return joinPoint.proceed(args);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/AbstractPrintLog.java", "stars": "7", "class": {"name": "AbstractPrintLog", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "handleLog", "params": ["ProceedingJoinPoint", "Object", "Object", "long"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void handleLog(ProceedingJoinPoint joinPoint, Object[] args, Object returnObj, long costTime);    /**     * @param name            \u64cd\u4f5c\u540d\u79f0     * @param description     \u63cf\u8ff0     * @param printReturn     \u662f\u5426\u6253\u5370\u54cd\u5e94     * @param joinPoint       \u4f4d\u7f6e     * @param args            \u53c2\u6570     * @param returnObj       \u54cd\u5e94     * @param totalTimeMillis \u8017\u65f6ms     */    protected void printLogMsg(String name, String description, boolean printReturn, JoinPoint joinPoint, Object[] args, Object returnObj, long totalTimeMillis) {        // Object[] params = argsDemote(args);        String params = getParam(args);        /**         * \u8fd4\u56de\u7801\u4e0d\u662f\u6210\u529f,\u6216\u8005\u6267\u884c\u8d85\u8fc71\u79d2\u624d\u8bb0\u5f55\u65e5\u5fd7         *///        if ( isSave(baseResponse,totalTimeMillis) ) {//            sendLogToMongoDB(name, description, printReturn, joinPoint, args, returnObj, totalTimeMillis);//        }        if (totalTimeMillis < getTimeLimit()) {            logger.info(MSG, new Object[]{name, description, joinPoint.getStaticPart(), params, getPrintMsg(printReturn, returnObj), totalTimeMillis});        } else {            logger.warn(MSG, new Object[]{name, description, joinPoint.getStaticPart(), params, getPrintMsg(printReturn, returnObj), totalTimeMillis});        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/AbstractPrintLog.java", "stars": "7", "class": {"name": "AbstractPrintLog", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "printLogMsg", "params": ["String", "String", "boolean", "JoinPoint", "Object", "Object", "long"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void printLogMsg(String name, String description, boolean printReturn, JoinPoint joinPoint, Object[] args, Object returnObj, long totalTimeMillis) {        // Object[] params = argsDemote(args);        String params = getParam(args);        /**         * \u8fd4\u56de\u7801\u4e0d\u662f\u6210\u529f,\u6216\u8005\u6267\u884c\u8d85\u8fc71\u79d2\u624d\u8bb0\u5f55\u65e5\u5fd7         *///        if ( isSave(baseResponse,totalTimeMillis) ) {//            sendLogToMongoDB(name, description, printReturn, joinPoint, args, returnObj, totalTimeMillis);//        }        if (totalTimeMillis < getTimeLimit()) {            logger.info(MSG, new Object[]{name, description, joinPoint.getStaticPart(), params, getPrintMsg(printReturn, returnObj), totalTimeMillis});        } else {            logger.warn(MSG, new Object[]{name, description, joinPoint.getStaticPart(), params, getPrintMsg(printReturn, returnObj), totalTimeMillis});        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/AbstractPrintLog.java", "stars": "7", "class": {"name": "AbstractPrintLog", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTimeLimit", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getTimeLimit() {        return DEFAULT_TIME_LIMIT;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/AbstractPrintLog.java", "stars": "7", "class": {"name": "AbstractPrintLog", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getPrintMsg", "params": ["boolean", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getPrintMsg(boolean printReturn, Object returnObj) {        return printReturn ? ((returnObj != null) ? JSONObject.toJSONString(returnObj) : \"null\") : \"[printReturn = false]\";    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/AbstractPrintLog.java", "stars": "7", "class": {"name": "AbstractPrintLog", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "argsDemote", "params": ["Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object[] argsDemote(Object[] args) {        if (args == null || args.length == 0) {            return new Object[]{};        }        Object[] params = new Object[args.length];        for (int i = 0; i < args.length; i++) {            Object arg = args[i];            if (arg instanceof ServletRequest || arg instanceof ServletResponse                    || arg instanceof ModelMap || arg instanceof Model                    || arg instanceof InputStreamSource || arg instanceof File || arg instanceof BaseEntity) {                params[i] = args[i];            } else {                params[i] = args.toString();            }        }        return params;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/AbstractPrintLog.java", "stars": "7", "class": {"name": "AbstractPrintLog", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getParam", "params": ["Object"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getParam(Object[] args) {        StringBuilder params = new StringBuilder();        if (args != null && args.length > 0) {            for (int i = 0; i < args.length; i++) {                if (null == args[i]) {                    params.append(\"null\").append(\";\");                } else {                    params.append(args[i].toString()).append(\";\");                }            }        }        return params.toString();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/AbstractPrintLog.java", "stars": "7", "class": {"name": "AbstractPrintLog", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getHttpServletRequest", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "HttpServletRequest", "snippet": "    protected HttpServletRequest getHttpServletRequest() {        return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/AbstractPrintLog.java", "stars": "7", "class": {"name": "AbstractPrintLog", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isSave", "params": ["BaseResponse", "long"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isSave(BaseResponse baseResponse, long totalTimeMillis) {        return baseResponse != null && !baseResponse.getCode().equals(ResponseCode.SUCCESS) || totalTimeMillis >= getTimeLimit();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/AbstractPrintLog.java", "stars": "7", "class": {"name": "AbstractPrintLog", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCheckedChanged", "params": ["android", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCheckedChanged (android.widget.CompoundButton p0, boolean p1)\t{\t\tn_onCheckedChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SwitchCellView.java", "stars": "2", "class": {"name": "SwitchCellView", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onCheckedChanged", "params": ["android", "boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onCheckedChanged (android.widget.CompoundButton p0, boolean p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SwitchCellView.java", "stars": "2", "class": {"name": "SwitchCellView", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SwitchCellView.java", "stars": "2", "class": {"name": "SwitchCellView", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SwitchCellView.java", "stars": "2", "class": {"name": "SwitchCellView", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // \u666e\u901a\u4e8b\u4ef6\u76d1\u542c\u521d\u59cb\u5316        mPageEventEnable = initPageEvent();        if (mPageEventEnable && mEventList != null) {            for (Class<? extends PageEvent> eventPage : mEventList) {                EventHelper.registerEventPage(this, eventPage);            }        }        // \u7c98\u6027\u4e8b\u4ef6\u76d1\u542c\u521d\u59cb\u5316        mPageStickEventEnable = initPageStickEvent();        if (mPageStickEventEnable && mStickEventList != null) {            for (Class<? extends PageEvent> eventPage : mStickEventList) {                EventHelper.registerStickEventPage(this, eventPage);            }        }        LogHelper.i(TAG, \"activity: \" + this +                \", mPageEventEnable: \" + mPageEventEnable +                \", mPageStickEventEnable: \" + mPageStickEventEnable);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/base/EventFragment.java", "stars": "1", "class": {"name": "EventFragment", "extends": "Fragment", "implements": ["PageEventListener", "PageStickEventListener", "PageEvent"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        // \u666e\u901a\u4e8b\u4ef6\u76d1\u542c\u6ce8\u9500        if (mPageEventEnable && mEventList != null) {            for (Class<? extends PageEvent> eventPage : mEventList) {                EventHelper.unregisterEventPage(this, eventPage);            }            mEventList.clear();            mEventList = null;        }        // \u7c98\u6027\u4e8b\u4ef6\u76d1\u542c\u6ce8\u9500        if (mPageStickEventEnable && mStickEventList != null) {            for (Class<? extends PageEvent> eventPage : mStickEventList) {                EventHelper.unregisterStickEventPage(this, eventPage);            }            mStickEventList.clear();            mStickEventList = null;        }        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/base/EventFragment.java", "stars": "1", "class": {"name": "EventFragment", "extends": "Fragment", "implements": ["PageEventListener", "PageStickEventListener", "PageEvent"], "modifiers": ["public"]}}, {"method_name": "initPageEvent", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean initPageEvent() {        return false;    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/base/EventFragment.java", "stars": "1", "class": {"name": "EventFragment", "extends": "Fragment", "implements": ["PageEventListener", "PageStickEventListener", "PageEvent"], "modifiers": ["public"]}}, {"method_name": "addPageEvent", "params": ["Class<PageEvent>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void addPageEvent(Class<? extends PageEvent> eventPage) {        if (eventPage == null) {            return;        }        if (mEventList == null) {            mEventList = new ArrayList<>();        }        if (mEventList.contains(eventPage)) {            return;        }        mEventList.add(eventPage);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/base/EventFragment.java", "stars": "1", "class": {"name": "EventFragment", "extends": "Fragment", "implements": ["PageEventListener", "PageStickEventListener", "PageEvent"], "modifiers": ["public"]}}, {"method_name": "onEvent", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEvent(@NonNull Event event) {    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/base/EventFragment.java", "stars": "1", "class": {"name": "EventFragment", "extends": "Fragment", "implements": ["PageEventListener", "PageStickEventListener", "PageEvent"], "modifiers": ["public"]}}, {"method_name": "initPageStickEvent", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean initPageStickEvent() {        return false;    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/base/EventFragment.java", "stars": "1", "class": {"name": "EventFragment", "extends": "Fragment", "implements": ["PageEventListener", "PageStickEventListener", "PageEvent"], "modifiers": ["public"]}}, {"method_name": "addPageStickEvent", "params": ["Class<PageEvent>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void addPageStickEvent(Class<? extends PageEvent> eventPage) {        if (eventPage == null) {            return;        }        if (mStickEventList == null) {            mStickEventList = new ArrayList<>();        }        if (mStickEventList.contains(eventPage)) {            return;        }        mStickEventList.add(eventPage);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/base/EventFragment.java", "stars": "1", "class": {"name": "EventFragment", "extends": "Fragment", "implements": ["PageEventListener", "PageStickEventListener", "PageEvent"], "modifiers": ["public"]}}, {"method_name": "onStickEvent", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onStickEvent(@NonNull Event event) {        return false;    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/base/EventFragment.java", "stars": "1", "class": {"name": "EventFragment", "extends": "Fragment", "implements": ["PageEventListener", "PageStickEventListener", "PageEvent"], "modifiers": ["public"]}}, {"method_name": "onLeave", "params": ["int", "int", "float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLeave(int index, int totalCount, float leavePercent, boolean leftToRight) {        int color = ArgbEvaluatorHolder.eval(leavePercent, mSelectedColor, mNormalColor);        setTextColor(color);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/ColorTransitionPagerTitleView.java", "stars": "1", "class": {"name": "ColorTransitionPagerTitleView", "extends": "SimplePagerTitleView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnter", "params": ["int", "int", "float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnter(int index, int totalCount, float enterPercent, boolean leftToRight) {        int color = ArgbEvaluatorHolder.eval(enterPercent, mNormalColor, mSelectedColor);        setTextColor(color);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/ColorTransitionPagerTitleView.java", "stars": "1", "class": {"name": "ColorTransitionPagerTitleView", "extends": "SimplePagerTitleView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSelected", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSelected(int index, int totalCount) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/ColorTransitionPagerTitleView.java", "stars": "1", "class": {"name": "ColorTransitionPagerTitleView", "extends": "SimplePagerTitleView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDeselected", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeselected(int index, int totalCount) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/ColorTransitionPagerTitleView.java", "stars": "1", "class": {"name": "ColorTransitionPagerTitleView", "extends": "SimplePagerTitleView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAABB", "params": ["AxisAlignedBB"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAABB(AxisAlignedBB aabb) {        this.aabb = aabb;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/CollisionBoxEvent.java", "stars": "12", "class": {"name": "CollisionBoxEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBlock", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Block", "snippet": "    public final Block getBlock() {        return this.block;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/CollisionBoxEvent.java", "stars": "12", "class": {"name": "CollisionBoxEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPos", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "BlockPos", "snippet": "    public final BlockPos getPos() {        return this.pos;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/CollisionBoxEvent.java", "stars": "12", "class": {"name": "CollisionBoxEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBoundingBox", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "AxisAlignedBB", "snippet": "    public final AxisAlignedBB getBoundingBox() {        return this.aabb;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/CollisionBoxEvent.java", "stars": "12", "class": {"name": "CollisionBoxEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCollidingBoxes", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "List<AxisAlignedBB>", "snippet": "    public final List<AxisAlignedBB> getCollidingBoxes() {        return this.collidingBoxes;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/CollisionBoxEvent.java", "stars": "12", "class": {"name": "CollisionBoxEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEntity", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Entity", "snippet": "    public final Entity getEntity() {        return this.entity;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/CollisionBoxEvent.java", "stars": "12", "class": {"name": "CollisionBoxEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "collectFromTaskGroup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Communication", "snippet": "    public Communication collectFromTaskGroup() {        return LocalTGCommunicationManager.getJobCommunication();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/collector/ProcessInnerCollector.java", "stars": "23", "class": {"name": "ProcessInnerCollector", "extends": "AbstractCollector", "implements": null, "modifiers": ["public"]}}, {"method_name": "service", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void service(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException\t{\t\tPrintWriter out=response.getWriter();\t\tresponse.setContentType(\"text/html\");\t\tString un=request.getParameter(\"username\");\t\tString mobile1=request.getParameter(\"mobilenumber\");\t\tString mail123=request.getParameter(\"mailid\");\t\tString pwd=request.getParameter(\"password\");\t\tString cpwd=request.getParameter(\"confirmpassword\");\t\tint c=1;\t\tStatement st=null;        Connection con=null;\t\t\t\tout.print(\"<head><style>\");\t\tout.print(\"body{padding:0%;margin:0%;}\");\t\tout.print(\".box form h1{padding:0%;margin:0%;}\");\t\tout.print(\".next{background-color:green;color:white;width:100%;font-size:15px;border-radius:35%;padding:10px;margin:2% 19%;}\");\t\tout.print(\"form{padding:0%;margin:0%;}\");\t\tout.print(\".image{padding:0%;border-radius:15%;}\");\t\tout.print(\".box{background-color:pink;color:white;margin:5%;padding:5%;border-radius:15%;}\");\t\tout.print(\".inst h2{color:green;}\");\t\tout.print(\".inst h3{padding:0%;margin:0%;}\");\t\tout.print(\".inst{width:70%;padding-left:30%;}\");\t\tout.print(\"</style></head>\");\t\ttry\t\t{\t\t\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\t\t    con=DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1521:orcl\",\"scott\",\"tiger\");\t\t\tst=con.createStatement();\t\t\tint x=st.executeUpdate(\"Insert into javaquiz values('\"+un+\"','\"+mobile1+\"','\"+mail123+\"','\"+pwd+\"')\");\t\t\t\t\t\tif(x!=0)\t\t\t{\t\t\t\tout.print(\"<body>\");\t\t\t\tout.print(\"<div class=\\\"box\\\">\");\t\t\t\tout.print(\"<form action=quiz.com method=post>\");\t\t\t\tout.print(\"<div class=\\\"image\\\"><img src=\\\"img.jfif\\\" width=\\\"100%\\\" height=\\\"30%\\\"></div>\");\t\t\t\tout.print(\"<h1 align=center>ExQuizMe</h1><br>\");\t\t\t\tout.print(\"<h1 align=center>Quiz On Java</h1><br>\");\t\t\t\tout.print(\"<h1 align=center>=====================</h1><br><br>\");\t\t\t\tout.print(\"<h1 align=center>Registration Successful..!!</h1><br>\");\t\t\t\tout.print(\"<div class=\\\"inst\\\">\");\t\t\t\tout.print(\"<h2>Read the following instructions before proceeding</h2><br>\");\t\t\t\tout.print(\"<h3>1. This test consists of 10 questions on java.</h3><br>\");\t\t\t\tout.print(\"<h3>2. Each question carries 1 mark.</h3><br>\");\t\t\t\tout.print(\"<h3>3. Questions are of multiple choice type</h3><br>\");\t\t\t\tout.print(\"<input type=submit value=\\\"Start Quiz\\\" class=next>\");\t\t\t\tout.print(\"</div>\");\t\t\t\tout.print(\"</form>\");\t\t\t\tout.print(\"</div>\");\t\t\t\tout.print(\"</body>\");  \t\t\t}\t\t\telse\t\t\t{\t\t\t\tout.print(\"<body bgcolor=pink text=white>\");\t\t\t\tout.print(\"<form action=welcome.html method=post>\");\t\t\t\tout.print(\"<h2 align=center>LOGIN..!!</h2>\");\t\t\t\tout.print(\"<hr><br></br>\");\t\t\t\tout.print(\"<h2 align=center>Authentication Failed...Please re-enter your details!!....</h2>\");\t\t\t\tout.print(\"<table align=center>\");\t\t\t\tout.print(\"<tr><td><input type=submit value=Back class=next></td></tr>\");\t\t\t\tout.print(\"</table></form></body>\");\t\t\t}\t\t\t\t}\t\tcatch(SQLException | ClassNotFoundException e)\t\t{\t\t\tout.print(\"<body bgcolor=pink text=white>\");\t\t\tout.print(\"<form action=welcome.html method=post>\");\t\t\tout.print(\"<h2 align=center>LOGIN..!!</h2>\");\t\t\tout.print(\"<hr><br></br>\");\t\t\tout.print(\"<h2 align=center>Authentication Failed...Please re-enter your details!!....</h2>\");\t\t\tout.print(\"<h2 align=center>Username already exists....!!</h2>\");\t\t\tout.print(\"<table align=center>\");\t\t\tout.print(\"<tr><td><input type=submit value=Back class=next></td></tr>\");\t\t\tout.print(\"</table></form></body>\");\t\t}\t\tfinally        {         try         {\t\t\tst.close();\t\t\tcon.close();\t\t }\t\t catch(Exception ee)\t\t {\t\t\tout.print(\"<h1>\"+ee+\"</h1>\");\t\t }\t\t}\t}", "url": "https://raw.githubusercontent.com/SShivani/Online-Quiz-Project/master/WEB-INF/classes/RegisterInstructionServlet.java", "stars": "2", "class": {"name": "RegisterInstructionServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseXMLFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseXMLFile() {    final File file = new File(this.xmlPath);    if (!file.exists()) {      throw new IllegalArgumentException(\"User xml file \" + this.xmlPath          + \" doesn't exist.\");    }    final HashMap<String, User> users = new HashMap<>();    final HashMap<String, String> userPassword = new HashMap<>();    final HashMap<String, Role> roles = new HashMap<>();    final HashMap<String, Set<String>> groupRoles =        new HashMap<>();    final HashMap<String, Set<String>> proxyUserMap =        new HashMap<>();    // Creating the document builder to parse xml.    final DocumentBuilderFactory docBuilderFactory =        DocumentBuilderFactory.newInstance();    DocumentBuilder builder = null;    try {      // FIXME\u00a0Prevent XML External Entity (XXE) attacks.      XmlResolveUtils.avoidXEE(docBuilderFactory);      builder = docBuilderFactory.newDocumentBuilder();    } catch (final ParserConfigurationException e) {      throw new IllegalArgumentException(          \"Exception while parsing user xml. Document builder not created.\", e);    }    Document doc = null;    try {      doc = builder.parse(file);    } catch (final SAXException e) {      throw new IllegalArgumentException(\"Exception while parsing \" + this.xmlPath          + \". Invalid XML.\", e);    } catch (final IOException e) {      throw new IllegalArgumentException(\"Exception while parsing \" + this.xmlPath          + \". Error reading file.\", e);    }    // Only look at first item, because we should only be seeing    // azkaban-users tag.    final NodeList tagList = doc.getChildNodes();    final Node azkabanUsers = tagList.item(0);    final NodeList azkabanUsersList = azkabanUsers.getChildNodes();    for (int i = 0; i < azkabanUsersList.getLength(); ++i) {      final Node node = azkabanUsersList.item(i);      if (node.getNodeType() == Node.ELEMENT_NODE) {        if (node.getNodeName().equals(USER_TAG)) {          parseUserTag(node, users, userPassword, proxyUserMap);        } else if (node.getNodeName().equals(ROLE_TAG)) {          parseRoleTag(node, roles);        } else if (node.getNodeName().equals(GROUP_TAG)) {          parseGroupRoleTag(node, groupRoles);        }      }    }    // Synchronize the swap. Similarly, the gets are synchronized to this.    synchronized (this) {      this.users = users;      this.userPassword = userPassword;      this.roles = roles;      this.proxyUserMap = proxyUserMap;      this.groupRoles = groupRoles;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "parseUserTag", "params": ["Node", "HashMap<String,User>", "HashMap<String,String>", "HashMap<String,Set>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseUserTag(final Node node, final HashMap<String, User> users,      final HashMap<String, String> userPassword,      final HashMap<String, Set<String>> proxyUserMap) {    final NamedNodeMap userAttrMap = node.getAttributes();    final Node userNameAttr = userAttrMap.getNamedItem(USERNAME_ATTR);    if (userNameAttr == null) {      throw new RuntimeException(\"Error loading user. The '\" + USERNAME_ATTR          + \"' attribute doesn't exist\");    }    final Node passwordAttr = userAttrMap.getNamedItem(PASSWORD_ATTR);    if (passwordAttr == null) {      throw new RuntimeException(\"Error loading user. The '\" + PASSWORD_ATTR          + \"' attribute doesn't exist\");    }    // Add user to the user/password map    final String username = userNameAttr.getNodeValue();    final String password = passwordAttr.getNodeValue();    userPassword.put(username, password);    // Add the user to the node    final User user = new User(userNameAttr.getNodeValue());    users.put(username, user);    logger.info(\"Loading user \" + user.getUserId());    final Node roles = userAttrMap.getNamedItem(ROLES_ATTR);    if (roles != null) {      final String value = roles.getNodeValue();      final String[] roleSplit = value.split(\"\\\\s*,\\\\s*\");      for (final String role : roleSplit) {        user.addRole(role);      }    }    final Node proxy = userAttrMap.getNamedItem(PROXY_ATTR);    if (proxy != null) {      final String value = proxy.getNodeValue();      final String[] proxySplit = value.split(\"\\\\s*,\\\\s*\");      for (final String proxyUser : proxySplit) {        Set<String> proxySet = proxyUserMap.get(username);        if (proxySet == null) {          proxySet = new HashSet<>();          proxyUserMap.put(username, proxySet);        }        proxySet.add(proxyUser);      }    }    final Node groups = userAttrMap.getNamedItem(GROUPS_ATTR);    if (groups != null) {      final String value = groups.getNodeValue();      final String[] groupSplit = value.split(\"\\\\s*,\\\\s*\");      for (final String group : groupSplit) {        user.addGroup(group);      }    }    final Node emailAttr = userAttrMap.getNamedItem(EMAIL_ATTR);    if (emailAttr != null) {      user.setEmail(emailAttr.getNodeValue());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "parseRoleTag", "params": ["Node", "HashMap<String,Role>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseRoleTag(final Node node, final HashMap<String, Role> roles) {    final NamedNodeMap roleAttrMap = node.getAttributes();    final Node roleNameAttr = roleAttrMap.getNamedItem(ROLENAME_ATTR);    if (roleNameAttr == null) {      throw new RuntimeException(          \"Error loading role. The role 'name' attribute doesn't exist\");    }    final Node permissionAttr = roleAttrMap.getNamedItem(ROLEPERMISSIONS_ATTR);    if (permissionAttr == null) {      throw new RuntimeException(          \"Error loading role. The role 'permissions' attribute doesn't exist\");    }    final String roleName = roleNameAttr.getNodeValue();    final String permissions = permissionAttr.getNodeValue();    final String[] permissionSplit = permissions.split(\"\\\\s*,\\\\s*\");    final Permission perm = new Permission();    for (final String permString : permissionSplit) {      try {        final Permission.Type type = Permission.Type.valueOf(permString);        perm.addPermission(type);      } catch (final IllegalArgumentException e) {        logger.error(\"Error adding type \" + permString            + \". Permission doesn't exist.\", e);      }    }    final Role role = new Role(roleName, perm);    roles.put(roleName, role);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getUser", "params": ["String", "String"], "throws": ["UserManagerException"], "modifiers": ["public"], "return_type": "User", "snippet": "  public User getUser(final String username, final String password)      throws UserManagerException {    if (username == null || username.trim().isEmpty()) {      throw new UserManagerException(\"Empty User Name.\");    } else if (password == null || password.trim().isEmpty()) {      throw new UserManagerException(\"Empty Password.\");    }    // Minimize the synchronization of the get. Shouldn't matter if it    // doesn't exist.    String foundPassword = null;    User user = null;    synchronized (this) {      foundPassword = this.userPassword.get(username);      if (foundPassword != null) {        user = this.users.get(username);      }    }    if (foundPassword == null || !foundPassword.equals(password)) {      throw new UserManagerException(\"Username/Password not found.\");    }    // Once it gets to this point, no exception has been thrown. User    // shoudn't be    // null, but adding this check for if user and user/password hash tables    // go    // out of sync.    if (user == null) {      throw new UserManagerException(\"Internal error: User not found.\");    }    // Add all the roles the group has to the user    resolveGroupRoles(user);    user.setPermissions(new UserPermissions() {      @Override      public boolean hasPermission(final String permission) {        return true;      }      @Override      public void addPermission(final String permission) {      }    });    return user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "resolveGroupRoles", "params": ["User"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void resolveGroupRoles(final User user) {    for (final String group : user.getGroups()) {      final Set<String> groupRoleSet = this.groupRoles.get(group);      if (groupRoleSet != null) {        for (final String role : groupRoleSet) {          user.addRole(role);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "parseGroupRoleTag", "params": ["Node", "HashMap<String,Set>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseGroupRoleTag(final Node node,      final HashMap<String, Set<String>> groupRoles) {    final NamedNodeMap groupAttrMap = node.getAttributes();    final Node groupNameAttr = groupAttrMap.getNamedItem(GROUPNAME_ATTR);    if (groupNameAttr == null) {      throw new RuntimeException(          \"Error loading role. The role 'name' attribute doesn't exist\");    }    final String groupName = groupNameAttr.getNodeValue();    final Set<String> roleSet = new HashSet<>();    final Node roles = groupAttrMap.getNamedItem(ROLES_ATTR);    if (roles != null) {      final String value = roles.getNodeValue();      final String[] roleSplit = value.split(\"\\\\s*,\\\\s*\");      for (final String role : roleSplit) {        roleSet.add(role);      }    }    groupRoles.put(groupName, roleSet);    logger.info(\"Group roles \" + groupName + \" added.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "validateUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validateUser(final String username) {    return this.users.containsKey(username);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getRole", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Role", "snippet": "  public Role getRole(final String roleName) {    return this.roles.get(roleName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "validateGroup", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validateGroup(final String group) {    // Return true. Validation should be added when groups are added to the xml.    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "validateProxyUser", "params": ["String", "User"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validateProxyUser(final String proxyUser, final User realUser) {    if (this.proxyUserMap.containsKey(realUser.getUserId())        && this.proxyUserMap.get(realUser.getUserId()).contains(proxyUser)) {      return true;    } else {      return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/XmlUserManager.java", "stars": "18", "class": {"name": "XmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "isFromBeforeTo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isFromBeforeTo() {        return from.isBefore(to);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/dto/leasing/CreatorLeasingDTO.java", "stars": "2", "class": {"name": "CreatorLeasingDTO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setTotalTime", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotalTime(int totalTime) {        this.mTotalSecond = totalTime;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/CountdownView.java", "stars": "1", "class": {"name": "CountdownView", "extends": "AppCompatTextView", "implements": ["Runnable"], "modifiers": ["public", "final"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        mRecordText = getText();        setEnabled(false);        mCurrentSecond = mTotalSecond;        post(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/CountdownView.java", "stars": "1", "class": {"name": "CountdownView", "extends": "AppCompatTextView", "implements": ["Runnable"], "modifiers": ["public", "final"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        setText(mRecordText);        setEnabled(true);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/CountdownView.java", "stars": "1", "class": {"name": "CountdownView", "extends": "AppCompatTextView", "implements": ["Runnable"], "modifiers": ["public", "final"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        // \u8bbe\u7f6e\u70b9\u51fb\u7684\u5c5e\u6027        setClickable(true);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/CountdownView.java", "stars": "1", "class": {"name": "CountdownView", "extends": "AppCompatTextView", "implements": ["Runnable"], "modifiers": ["public", "final"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        // \u79fb\u9664\u5ef6\u8fdf\u4efb\u52a1\uff0c\u907f\u514d\u5185\u5b58\u6cc4\u9732        removeCallbacks(this);        super.onDetachedFromWindow();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/CountdownView.java", "stars": "1", "class": {"name": "CountdownView", "extends": "AppCompatTextView", "implements": ["Runnable"], "modifiers": ["public", "final"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        if (mCurrentSecond == 0) {            stop();        } else {            mCurrentSecond--;            setText(mCurrentSecond + \" \" + TIME_UNIT);            postDelayed(this, 1000);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/CountdownView.java", "stars": "1", "class": {"name": "CountdownView", "extends": "AppCompatTextView", "implements": ["Runnable"], "modifiers": ["public", "final"]}}, {"method_name": "exists", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean exists(String key) {        return userMap.containsKey(key);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/OnlineUserService.java", "stars": "2", "class": {"name": "OnlineUserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processNewUserReady", "params": ["String"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean processNewUserReady(String username) {        if (userMap.containsKey(username)) {            return false;        }        UserBo userBo = removeInCache(username);        if (userBo == null) {            return false;        }        userMap.put(userBo.getUsername(), userBo);        log.info(\"user:{} add into userMap(count:{})\", username, userMap.size());        return true;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/OnlineUserService.java", "stars": "2", "class": {"name": "OnlineUserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addNewUserCache", "params": ["UserBo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addNewUserCache(UserBo userBo) {        if (newUserCache.containsKey(userBo.getUsername())) {            return;        }        newUserCache.put(userBo.getUsername(), userBo);        log.info(\"user:{} add into the cache(count:{})\", userBo.getUsername(), newUserCache.size());    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/OnlineUserService.java", "stars": "2", "class": {"name": "OnlineUserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "subscribeInUserCache", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void subscribeInUserCache(String username, String destination) {        if (!newUserCache.containsKey(username)) {            return;        }        UserBo userBo = newUserCache.get(username);        if (userBo.getSubscribeList().contains(destination)) {            return;        }        log.info(\"user:{} subscribe the path:{}\", username, destination);        userBo.getSubscribeList().add(destination);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/OnlineUserService.java", "stars": "2", "class": {"name": "OnlineUserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean remove(String key) {        removeInCache(key);        return removeInUserMap(key);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/OnlineUserService.java", "stars": "2", "class": {"name": "OnlineUserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": [], "return_type": "UserBo", "snippet": "    UserBo get(String key) {        return userMap.get(key);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/OnlineUserService.java", "stars": "2", "class": {"name": "OnlineUserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getUserList() {        List<String> users = new ArrayList<>();        userMap.forEach((key, value) -> users.add(key));        return users;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/OnlineUserService.java", "stars": "2", "class": {"name": "OnlineUserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeInCache", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "UserBo", "snippet": "    private UserBo removeInCache(String key) {        if (!newUserCache.containsKey(key)) {            return null;        }        UserBo userBo = newUserCache.get(key);        newUserCache.remove(key);        log.info(\"user:{} remove in cache(count:{})\", key, newUserCache.size());        return userBo;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/OnlineUserService.java", "stars": "2", "class": {"name": "OnlineUserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeInUserMap", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean removeInUserMap(String key) {        if (!userMap.containsKey(key)) {            return false;        }        userMap.remove(key);        log.info(\"user:{} remove in userMap(count:{})\", key, userMap.size());        return true;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/OnlineUserService.java", "stars": "2", "class": {"name": "OnlineUserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"SourceInfo{\" +                \"url='\" + url + '\\'' +                \", length=\" + length +                \", mime='\" + mime + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/SourceInfo.java", "stars": "2", "class": {"name": "SourceInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["Book"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void save(Book book) {\t\tEntityManager entityManager = entityManagerFactory.createEntityManager();\t\tif (entityManager == null)\t\t\tthrow new LibrarySystemException(\"Repository Exception: EntityManager is null!\");\t\ttry {\t\t\t\t\t\tentityManager.getTransaction().begin();\t\t\t\t\t\tentityManager.persist(book);\t\t\tentityManager.flush();\t\t\t\t\t\tentityManager.getTransaction().commit();\t\t}  catch (Exception e) {\t\t\t\t\t\tif (entityManager.isOpen())\t\t\t\tentityManager.getTransaction().rollback();\t\t\t\t\t\tthrow new LibrarySystemException(\"Repository Exception: \" + e.getMessage(), e);\t\t\t\t\t} finally {\t\t\tif (entityManager.isOpen()) \t\t\t\tentityManager.close();\t\t\t\t\t}\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/repository/BookRepository.java", "stars": "2", "class": {"name": "BookRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["Book"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void update(Book book) {\t\tEntityManager entityManager = entityManagerFactory.createEntityManager();\t\tif (entityManager == null)\t\t\tthrow new LibrarySystemException(\"Repository Exception: EntityManager is null!\");\t\ttry {\t\t\t\t\t\tentityManager.getTransaction().begin();\t\t\t\t\t\tentityManager.merge(book);\t\t\tentityManager.flush();\t\t\t\t\t\tentityManager.getTransaction().commit();\t\t} catch (Exception e) {\t\t\t\t\t\tif (entityManager.isOpen())\t\t\t\tentityManager.getTransaction().rollback();\t\t\t\t\t\tthrow new LibrarySystemException(\"Repository Exception: \" + e.getMessage(), e);\t\t\t\t\t} finally {\t\t\tif (entityManager.isOpen()) \t\t\t\tentityManager.close();\t\t\t\t\t}\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/repository/BookRepository.java", "stars": "2", "class": {"name": "BookRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Book"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void remove(Book book) {\t\t\t\tEntityManager entityManager = entityManagerFactory.createEntityManager();\t\tif (entityManager == null)\t\t\tthrow new LibrarySystemException(\"Repository Exception: EntityManager is null!\");\t\ttry {\t\t\t\t\t\tentityManager.getTransaction().begin();\t\t\t\t\t\tentityManager.remove(entityManager.getReference(Book.class, book.getId()));\t\t\t\t\t\tentityManager.getTransaction().commit();\t\t} catch (Exception e) {\t\t\t\t\t\tif (entityManager.isOpen())\t\t\t\tentityManager.getTransaction().rollback();\t\t\t\t\t\tthrow new LibrarySystemException(\"Repository Exception: \" + e.getMessage(), e);\t\t\t\t\t} finally {\t\t\tif (entityManager.isOpen()) \t\t\t\tentityManager.close();\t\t\t\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/repository/BookRepository.java", "stars": "2", "class": {"name": "BookRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Book>", "snippet": "\tpublic List<Book> findAll() {\t\tEntityManager entityManager = entityManagerFactory.createEntityManager();\t\tList<Book> retorno = null;\t\tif (entityManager == null)\t\t\tthrow new LibrarySystemException(\"Repository Exception: EntityManager is null!\");\t\ttry {\t\t\t\t\t\tretorno = entityManager.createQuery(\"select u from Book u\", Book.class).getResultList();\t\t} catch (Exception e) {\t\t\t\t\t\tthrow new LibrarySystemException(\"Repository Exception: \" + e.getMessage(), e);\t\t\t\t\t} finally {\t\t\tif (entityManager.isOpen()) \t\t\t\tentityManager.close();\t\t\t\t\t}\t\t\t\treturn retorno;\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/repository/BookRepository.java", "stars": "2", "class": {"name": "BookRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findById", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Book", "snippet": "\tpublic Book findById(Long id) {\t\tEntityManager entityManager = entityManagerFactory.createEntityManager();\t\tBook retorno = null;\t\tif (entityManager == null)\t\t\tthrow new LibrarySystemException(\"Repository Exception: EntityManager is null!\");\t\ttry {\t\t\t\t\t\tString query = \"select u from Book u where u.id = :id\";\t\t\t\t\t\tTypedQuery<Book> createQuery = entityManager.createQuery(query, Book.class);\t\t\t\t\t\tcreateQuery.setParameter(\"id\", id);\t\t\t\t\t\tretorno = createQuery.getSingleResult();\t\t} catch (Exception e) {\t\t\t\t\t\tthrow new LibrarySystemException(\"Repository Exception: \" + e.getMessage(), e);\t\t\t\t\t} finally {\t\t\tif (entityManager.isOpen()) \t\t\t\tentityManager.close();\t\t\t\t\t}\t\t\t\treturn retorno;\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/repository/BookRepository.java", "stars": "2", "class": {"name": "BookRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Date", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType)      throws SQLException {    ps.setTimestamp(i, new Timestamp(parameter.getTime()));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/DateTypeHandler.java", "stars": "15", "class": {"name": "DateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(ResultSet rs, String columnName)      throws SQLException {    Timestamp sqlTimestamp = rs.getTimestamp(columnName);    if (sqlTimestamp != null) {      return new Date(sqlTimestamp.getTime());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/DateTypeHandler.java", "stars": "15", "class": {"name": "DateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    Timestamp sqlTimestamp = rs.getTimestamp(columnIndex);    if (sqlTimestamp != null) {      return new Date(sqlTimestamp.getTime());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/DateTypeHandler.java", "stars": "15", "class": {"name": "DateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    Timestamp sqlTimestamp = cs.getTimestamp(columnIndex);    if (sqlTimestamp != null) {      return new Date(sqlTimestamp.getTime());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/DateTypeHandler.java", "stars": "15", "class": {"name": "DateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "determineUser", "params": ["ServerHttpRequest", "WebSocketHandler", "Map<String,Object>"], "throws": null, "modifiers": ["protected"], "return_type": "Principal", "snippet": "    protected Principal determineUser(ServerHttpRequest request, WebSocketHandler wsHandler, Map<String, Object> attributes) {        /*         * \u8fd9\u8fb9\u53ef\u4ee5\u6309\u4f60\u7684\u9700\u6c42\uff0c\u5982\u4f55\u83b7\u53d6\u552f\u4e00\u7684\u503c\uff0c\u65e2unicode         * \u5f97\u5230\u7684\u503c\uff0c\u4f1a\u5728\u76d1\u542c\u5904\u7406\u8fde\u63a5\u7684\u5c5e\u6027\u4e2d\uff0c\u65e2WebSocketSession.getPrincipal().getName()         * \u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0Principal()         */        if (request instanceof ServletServerHttpRequest) {            ServletServerHttpRequest servletServerHttpRequest = (ServletServerHttpRequest) request;            HttpServletRequest httpRequest = servletServerHttpRequest.getServletRequest();            //\u8fd9\u8fb9\u5c31\u83b7\u53d6\u4f60\u6700\u719f\u6089\u7684\u964c\u751f\u4eba,\u643a\u5e26\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5cookie\uff0c\u8bf7\u6c42\u5934\uff0c\u6216\u8005url\u643a\u5e26\uff0c\u8fd9\u8fb9\u6211\u91c7\u7528url\u643a\u5e26            final String name = httpRequest.getParameter(\"name\");            if (StringUtils.isEmpty(name)) {                log.warn(\"can not find name in remote:{}\", servletServerHttpRequest.getRemoteAddress());                return null;            }            return () -> name;        }        return null;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/handler/PrincipalHandshakeHandler.java", "stars": "2", "class": {"name": "PrincipalHandshakeHandler", "extends": "DefaultHandshakeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "putResource", "params": ["String", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void putResource(String resource, byte[] data) {\t\tresources.put(resource, data);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "alias", "params": ["String", "Identifier"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void alias(String location, Identifier to) {\t\taliases.put(location, to);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "putImage", "params": ["String", "BufferedImage"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void putImage(String location, BufferedImage image) {\t\tByteArrayOutputStream byteOut = new ByteArrayOutputStream();\t\ttry {\t\t\tImageIO.write(image, \"png\", byteOut);\t\t} catch (IOException e) {\t\t\tthrow new RuntimeException(\"IOException writing to bytearrayoutputstream!?\", e);\t\t}\t\tputResource(location, byteOut.toByteArray());\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "dynamicallyPutImage", "params": ["BufferedImage"], "throws": null, "modifiers": ["public"], "return_type": "Identifier", "snippet": "\tpublic Identifier dynamicallyPutImage(BufferedImage image) {\t\tString texPath = \"gen/\" + genCounter++;\t\tputImage(\"assets/connectedblocktextures/textures/\" + texPath + \".png\", image);\t\treturn new Identifier(\"connectedblocktextures\", texPath);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "dynamicallyPutTile", "params": ["Tile"], "throws": null, "modifiers": ["public"], "return_type": "Identifier", "snippet": "\tpublic Identifier dynamicallyPutTile(Tile tile) {\t\tString texPath = \"gen/\" + genCounter++;\t\tputTile(\"assets/connectedblocktextures/textures/\" + texPath + \".png\", tile);\t\treturn new Identifier(\"connectedblocktextures\", texPath);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "putTile", "params": ["String", "Tile"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void putTile(String location, Tile tile) {\t\tif(tile.hasResource()) {\t\t\talias(location, tile.getResource());\t\t} else {\t\t\tByteArrayOutputStream byteStream = new ByteArrayOutputStream();\t\t\ttry {\t\t\t\tImageIO.write(tile.getImage(), \"png\", byteStream);\t\t\t} catch (IOException e) {\t\t\t\tthrow new RuntimeException(\"IOException writing to byte array output stream!?\", e);\t\t\t}\t\t\tresources.put(location, byteStream.toByteArray());\t\t}\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void close() {}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "openRoot", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "\tpublic InputStream openRoot(String fileName) throws IOException {\t\tbyte[] data;\t\tIdentifier aliasOf;\t\tif((data = resources.get(fileName)) != null) {\t\t\treturn new ByteArrayInputStream(data);\t\t} else if((aliasOf = aliases.get(fileName)) != null) {\t\t\treturn manager.getResource(aliasOf).getInputStream();\t\t}\t\tthrow new IOException(\"generated resources pack has no data or alias for \" + fileName);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "open", "params": ["ResourceType", "Identifier"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "\tpublic InputStream open(ResourceType type, Identifier id) throws IOException {\t\tif(type == ResourceType.SERVER_DATA) throw new IOException(\"reading server data from connectedblocktextures client resource pack\");\t\treturn openRoot(type.getDirectory() + \"/\" + id.getNamespace() + \"/\" + id.getPath());\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "findResources", "params": ["ResourceType", "String", "String", "int", "Predicate<String>"], "throws": null, "modifiers": ["public"], "return_type": "Collection<Identifier>", "snippet": "\tpublic Collection<Identifier> findResources(ResourceType type, String namespace, String prefix, int maxDepth, Predicate<String> pathFilter) {\t\t//maxdepth not implemented.\t\tif(type == ResourceType.SERVER_DATA) return Collections.emptyList();\t\tString start = \"assets/\" + namespace + \"/\" + prefix;\t\treturn resources.keySet().stream().filter(s -> s.startsWith(start) && pathFilter.test(s)).map(CBTResourcePack::fromPath).collect(Collectors.toList());\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "contains", "params": ["ResourceType", "Identifier"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean contains(ResourceType type, Identifier id) {\t\tString path = type.getDirectory() + \"/\" + id.getNamespace() + \"/\" + id.getPath();\t\treturn resources.containsKey(path) || aliases.containsKey(path);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "getNamespaces", "params": ["ResourceType"], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "\tpublic Set<String> getNamespaces(ResourceType type) {\t\treturn NAMESPACES;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "parseMetadata", "params": ["ResourceMetadataReader<T>"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "T", "snippet": "\tpublic <T> T parseMetadata(ResourceMetadataReader<T> metaReader) throws IOException {\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn \"Connected Block Textures generated resources\";\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "fromPath", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "Identifier", "snippet": "\tprivate static Identifier fromPath(String path) {\t\tString[] split = path.split(\"/\", 2);\t\treturn new Identifier(split[0], split[1]);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/resource/CBTResourcePack.java", "stars": "3", "class": {"name": "CBTResourcePack", "extends": null, "implements": ["ResourcePack"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "Rotation", "snippet": "    public Rotation add(float yaw, float pitch) {        this.yaw += yaw;        this.pitch += pitch;        return this;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/Rotation.java", "stars": "12", "class": {"name": "Rotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "subtract", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "Rotation", "snippet": "    public Rotation subtract(float yaw, float pitch) {        this.yaw -= yaw;        this.pitch -= pitch;        return this;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/Rotation.java", "stars": "12", "class": {"name": "Rotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYaw", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getYaw() {        return yaw;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/Rotation.java", "stars": "12", "class": {"name": "Rotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setYaw", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "Rotation", "snippet": "    public Rotation setYaw(float yaw) {        active = true;        this.yaw = yaw;        return this;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/Rotation.java", "stars": "12", "class": {"name": "Rotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPitch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPitch() {        return pitch;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/Rotation.java", "stars": "12", "class": {"name": "Rotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPitch", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "Rotation", "snippet": "    public Rotation setPitch(float pitch) {        active = true;        this.pitch = pitch;        return this;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/Rotation.java", "stars": "12", "class": {"name": "Rotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isActive() {        return active;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/Rotation.java", "stars": "12", "class": {"name": "Rotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "instance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "GSYVideoADManager", "snippet": "    public static synchronized GSYVideoADManager instance() {        if (videoManager == null) {            videoManager = new GSYVideoADManager();        }        return videoManager;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoADManager.java", "stars": "2", "class": {"name": "GSYVideoADManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "backFromWindowFull", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean backFromWindowFull(Context context) {        boolean backFrom = false;        ViewGroup vp = (ViewGroup) (CommonUtil.scanForActivity(context)).findViewById(Window.ID_ANDROID_CONTENT);        View oldF = vp.findViewById(FULLSCREEN_ID);        if (oldF != null) {            backFrom = true;            hideNavKey(context);            if (GSYVideoADManager.instance().lastListener() != null) {                GSYVideoADManager.instance().lastListener().onBackFullscreen();            }        }        return backFrom;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoADManager.java", "stars": "2", "class": {"name": "GSYVideoADManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseAllVideos", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void releaseAllVideos() {        if (GSYVideoADManager.instance().listener() != null) {            GSYVideoADManager.instance().listener().onCompletion();        }        GSYVideoADManager.instance().releaseMediaPlayer();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoADManager.java", "stars": "2", "class": {"name": "GSYVideoADManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onPause() {        if (GSYVideoADManager.instance().listener() != null) {            GSYVideoADManager.instance().listener().onVideoPause();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoADManager.java", "stars": "2", "class": {"name": "GSYVideoADManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onResume() {        if (GSYVideoADManager.instance().listener() != null) {            GSYVideoADManager.instance().listener().onVideoResume();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoADManager.java", "stars": "2", "class": {"name": "GSYVideoADManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onResume(boolean seek) {        if (GSYVideoManager.instance().listener() != null) {            GSYVideoManager.instance().listener().onVideoResume(seek);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoADManager.java", "stars": "2", "class": {"name": "GSYVideoADManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "isFullState", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isFullState(Activity activity) {        ViewGroup vp = (ViewGroup) (CommonUtil.scanForActivity(activity)).findViewById(Window.ID_ANDROID_CONTENT);        final View full = vp.findViewById(FULLSCREEN_ID);        GSYVideoPlayer gsyVideoPlayer = null;        if (full != null) {            gsyVideoPlayer = (GSYVideoPlayer) full;        }        return gsyVideoPlayer != null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoADManager.java", "stars": "2", "class": {"name": "GSYVideoADManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenField", "params": ["GardenFieldDTO"], "throws": ["URISyntaxException", "BadRequestException"], "modifiers": ["public"], "return_type": "ResponseEntity<GardenFieldDTO>", "snippet": "    public ResponseEntity<GardenFieldDTO> createGardenField(        @ApiParam(value = \"Gardenfield object which will be saved\", required = true)        @Valid @RequestBody GardenFieldDTO gardenFieldDTO) throws URISyntaxException, BadRequestException {        log.debug(\"REST request to save GardenField : {}\", gardenFieldDTO);        if (gardenFieldDTO.getId() != null) {            throw new BadRequestException(GardleErrorKey.GARDENFIELD_ID_ALREADY_EXISTS);        }        GardenFieldDTO newGardenFieldDTO = gardenFieldService.createGardenField(gardenFieldDTO);        return ResponseEntity.created(new URI(\"/api/v1/gardenFields/\" + newGardenFieldDTO.getId()))            .body(newGardenFieldDTO);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldController.java", "stars": "2", "class": {"name": "GardenFieldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllGardenFields", "params": ["Pageable"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Page>", "snippet": "    public ResponseEntity<Page<GardenFieldDTO>> getAllGardenFields(Pageable pageable) {        final Page<GardenFieldDTO> page = gardenFieldService.getAllGardenFields(pageable);        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);        return new ResponseEntity<>(page, headers, HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldController.java", "stars": "2", "class": {"name": "GardenFieldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findOne", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<GardenFieldDTO>", "snippet": "    public ResponseEntity<GardenFieldDTO> findOne(@PathVariable long id) {        return new ResponseEntity<>(gardenFieldService.findOne(id), HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldController.java", "stars": "2", "class": {"name": "GardenFieldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateGardenField", "params": ["GardenFieldDTO"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<GardenFieldDTO>", "snippet": "    public ResponseEntity<GardenFieldDTO> updateGardenField(        @ApiParam(value = \"Gardenfield object which will be saved\", required = true)        @Valid @RequestBody GardenFieldDTO gardenFieldDTO) {        log.debug(\"REST request to update GardenField : {}\", gardenFieldDTO);        Optional<GardenFieldDTO> updatedGardenFieldDTO = gardenFieldService.updateGardenField(gardenFieldDTO);        return ResponseUtil.wrapOrNotFound(updatedGardenFieldDTO,            HeaderUtil.createAlert(applicationName, \"gardenFieldManagement.updated\", gardenFieldDTO.getId().toString()));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldController.java", "stars": "2", "class": {"name": "GardenFieldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteGardenField", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Void>", "snippet": "    public ResponseEntity<Void> deleteGardenField(        @ApiParam(value = \"Gardenfield Id from which gardenfield object will delete from system\", required = true)        @PathVariable Long id) {        log.debug(\"REST request to delete GardenField: {}\", id);        gardenFieldService.deleteGardenField(id);        return ResponseEntity.noContent().headers(            HeaderUtil.createAlert(applicationName, \"gardenFieldManagement.deleted\", id.toString())).build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldController.java", "stars": "2", "class": {"name": "GardenFieldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filterGardenFields", "params": ["Pageable", "Double", "Double", "Integer", "Double", "Double", "Double", "Double", "Boolean", "Instant", "Instant", "String", "Boolean", "Boolean", "Boolean", "Boolean"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Page>", "snippet": "    public ResponseEntity<Page<GardenFieldDTO>> filterGardenFields(Pageable pageable,                                                                   @RequestParam(required = false, value = \"latitude\") Double latitude,                                                                   @RequestParam(required = false, value = \"longitude\") Double longitude,                                                                   @RequestParam(required = false, value = \"radiusInKM\") Integer radiusInKM,                                                                   @RequestParam(required = false, value = \"minPrice\") Double minPricePerMonth,                                                                   @RequestParam(required = false, value = \"maxPrice\") Double maxPricePerMonth,                                                                   @RequestParam(required = false, value = \"sizeInM2LowerBound\") Double sizeInM2LowerBound,                                                                   @RequestParam(required = false, value = \"sizeInM2UpperBound\") Double sizeInM2UpperBound,                                                                   @RequestParam(required = false, value = \"roofed\") Boolean roofed,                                                                   @RequestParam(required = false, value = \"leasingTimeFrom\") Instant leasingTimeFrom,                                                                   @RequestParam(required = false, value = \"leasingTimeTo\") Instant leasingTimeTo,                                                                   @RequestParam(required = false, value = \"keywords\") String keywords,                                                                   @RequestParam(required = false, value = \"water\") Boolean water,                                                                   @RequestParam(required = false, value = \"electricity\") Boolean electricity,                                                                   @RequestParam(required = false, value = \"high\") Boolean high,                                                                   @RequestParam(required = false, value = \"glassHouse\") Boolean glassHouse) {        GardenFieldFilterCriteria gardenFieldFilterCriteria = new GardenFieldFilterCriteria(            new LocationFilterCriteria(latitude, longitude, radiusInKM), minPricePerMonth, maxPricePerMonth,            sizeInM2LowerBound, sizeInM2UpperBound, roofed, leasingTimeFrom, leasingTimeTo, keywords, water, electricity, high, glassHouse);        Page<GardenFieldDTO> resultPage = this.gardenFieldService.filterGardenFields(pageable, gardenFieldFilterCriteria);        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), resultPage);        return new ResponseEntity<>(resultPage, headers, HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldController.java", "stars": "2", "class": {"name": "GardenFieldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "autocomplete", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<List>", "snippet": "    public ResponseEntity<List<GardenFieldDTO>> autocomplete(@RequestParam(value = \"partialSearchString\") String partialSearchString) {        List<GardenFieldDTO> resultList = this.gardenFieldService.autocomplete(partialSearchString);        return new ResponseEntity<>(resultList, HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldController.java", "stars": "2", "class": {"name": "GardenFieldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasingsForGardenFields", "params": ["Pageable", "Long", "List<LeasingStatus>", "Instant", "Instant", "LeasingState"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Page>", "snippet": "    public ResponseEntity<Page<LeasingDTO>> getLeasingsForGardenFields(Pageable pageable, @PathVariable Long gardenFieldId,                                                                       @RequestParam(required = false, value = \"leasingStatus\") List<LeasingStatus> leasingStatusList,                                                                       @RequestParam(required = false) Instant from,                                                                       @RequestParam(required = false) Instant to,                                                                       @RequestParam(required = false) LeasingState state) {        Page<LeasingDTO> leasingPage = leasingService.findByGardenFieldId(pageable, gardenFieldId, leasingStatusList, from, to, state);        return ResponseEntity.ok().body(leasingPage);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldController.java", "stars": "2", "class": {"name": "GardenFieldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFilterBoundaries", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<FilterBoundariesDTO>", "snippet": "    public ResponseEntity<FilterBoundariesDTO> getFilterBoundaries() {        return new ResponseEntity<>(this.gardenFieldService.getFilterBoundaries(), HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldController.java", "stars": "2", "class": {"name": "GardenFieldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        switch (MeasureSpec.getMode(widthMeasureSpec)) {            case MeasureSpec.AT_MOST:            case MeasureSpec.UNSPECIFIED:                widthMeasureSpec = MeasureSpec.makeMeasureSpec((int) (TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 56, getResources().getDisplayMetrics())                        + getPaddingLeft() + getPaddingRight()), MeasureSpec.EXACTLY);                break;            case MeasureSpec.EXACTLY:            default:                break;        }        switch (MeasureSpec.getMode(heightMeasureSpec)) {            case MeasureSpec.AT_MOST:            case MeasureSpec.UNSPECIFIED:                heightMeasureSpec = MeasureSpec.makeMeasureSpec((int) (MeasureSpec.getSize(widthMeasureSpec) * mAspectRatio)                        + getPaddingTop() + getPaddingBottom(), MeasureSpec.EXACTLY);                break;            case MeasureSpec.EXACTLY:            default:                break;        }        setMeasuredDimension(widthMeasureSpec, heightMeasureSpec);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onSizeChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onSizeChanged(int w, int h, int oldw, int oldh) {        isCanVisibleDrawing = w > getPaddingLeft() + getPaddingRight() && h > getPaddingTop() + getPaddingBottom();        if (isCanVisibleDrawing) {            int actuallyDrawingAreaWidth = w - getPaddingLeft() - getPaddingRight();            int actuallyDrawingAreaHeight = h - getPaddingTop() - getPaddingBottom();            int actuallyDrawingAreaLeft;            int actuallyDrawingAreaRight;            int actuallyDrawingAreaTop;            int actuallyDrawingAreaBottom;            if (actuallyDrawingAreaWidth * mAspectRatio < actuallyDrawingAreaHeight) {                actuallyDrawingAreaLeft = getPaddingLeft();                actuallyDrawingAreaRight = w - getPaddingRight();                int heightExtraSize = (int) (actuallyDrawingAreaHeight - actuallyDrawingAreaWidth * mAspectRatio);                actuallyDrawingAreaTop = getPaddingTop() + heightExtraSize / 2;                actuallyDrawingAreaBottom = getHeight() - getPaddingBottom() - heightExtraSize / 2;            } else {                int widthExtraSize = (int) (actuallyDrawingAreaWidth - actuallyDrawingAreaHeight / mAspectRatio);                actuallyDrawingAreaLeft = getPaddingLeft() + widthExtraSize / 2;                actuallyDrawingAreaRight = getWidth() - getPaddingRight() - widthExtraSize / 2;                actuallyDrawingAreaTop = getPaddingTop();                actuallyDrawingAreaBottom = getHeight() - getPaddingBottom();            }            mShadowReservedHeight = (int) ((actuallyDrawingAreaBottom - actuallyDrawingAreaTop) * 0.07f);            float left = actuallyDrawingAreaLeft;            float top = actuallyDrawingAreaTop + mShadowReservedHeight;            mRight = actuallyDrawingAreaRight;            float bottom = actuallyDrawingAreaBottom - mShadowReservedHeight;            float sHeight = bottom - top;            mCenterX = (mRight + left) / 2;            mCenterY = (bottom + top) / 2;            mLeft = left;            mWidth = bottom - top;            bRight = left + mWidth;            // OfB            final float halfHeightOfS = mWidth / 2;            mRadius = halfHeightOfS * 0.95f;            // offset of switching            mOffset = mRadius * 0.2f;            mStrokeWidth = (halfHeightOfS - mRadius) * 2;            mOnLeftX = mRight - mWidth;            mOn2LeftX = mOnLeftX - mOffset;            mOffLeftX = left;            mOff2LeftX = mOffLeftX + mOffset;            mScale = 1 - mStrokeWidth / sHeight;            mBackgroundPath.reset();            RectF bound = new RectF();            bound.top = top;            bound.bottom = bottom;            bound.left = left;            bound.right = left + sHeight;            mBackgroundPath.arcTo(bound, 90, 180);            bound.left = mRight - sHeight;            bound.right = mRight;            mBackgroundPath.arcTo(bound, 270, 180);            mBackgroundPath.close();            mBound.left = mLeft;            mBound.right = bRight;            // bTop = sTop            mBound.top = top + mStrokeWidth / 2;            // bBottom = sBottom            mBound.bottom = bottom - mStrokeWidth / 2;            float bCenterX = (bRight + mLeft) / 2;            float bCenterY = (bottom + top) / 2;            int red = mShadowColor >> 16 & 0xFF;            int green = mShadowColor >> 8 & 0xFF;            int blue = mShadowColor & 0xFF;            mShadowGradient = new RadialGradient(bCenterX, bCenterY, mRadius, Color.argb(200, red, green, blue),                    Color.argb(25, red, green, blue), Shader.TileMode.CLAMP);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "calcBPath", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void calcBPath(float percent) {        mBarPath.reset();        mBound.left = mLeft + mStrokeWidth / 2;        mBound.right = bRight - mStrokeWidth / 2;        mBarPath.arcTo(mBound, 90, 180);        mBound.left = mLeft + percent * mOffset + mStrokeWidth / 2;        mBound.right = bRight + percent * mOffset - mStrokeWidth / 2;        mBarPath.arcTo(mBound, 270, 180);        mBarPath.close();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "calcBTranslate", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "float", "snippet": "    private float calcBTranslate(float percent) {        float result = 0;        switch (mCheckedState - mLastCheckedState) {            case 1:                if (mCheckedState == STATE_SWITCH_OFF2) {                    // off -> off2                    result = mOffLeftX;                } else if (mCheckedState == STATE_SWITCH_ON) {                    // on2 -> on                    result = mOnLeftX - (mOnLeftX - mOn2LeftX) * percent;                }                break;            case 2:                if (mCheckedState == STATE_SWITCH_ON) {                    // off2 -> on                    result = mOnLeftX - (mOnLeftX - mOffLeftX) * percent;                } else if (mCheckedState == STATE_SWITCH_ON2) {                    // off -> on2                    result = mOn2LeftX - (mOn2LeftX - mOffLeftX) * percent;                }                break;            case 3:                // off -> on                result = mOnLeftX - (mOnLeftX - mOffLeftX) * percent;                break;            case -1:                if (mCheckedState == STATE_SWITCH_ON2) {                    // on -> on2                    result = mOn2LeftX + (mOnLeftX - mOn2LeftX) * percent;                } else if (mCheckedState == STATE_SWITCH_OFF) {                    // off2 -> off                    result = mOffLeftX;                }                break;            case -2:                if (mCheckedState == STATE_SWITCH_OFF) {                    // on2 -> off                    result = mOffLeftX + (mOn2LeftX - mOffLeftX) * percent;                } else if (mCheckedState == STATE_SWITCH_OFF2) {                    // on -> off2                    result = mOff2LeftX + (mOnLeftX - mOff2LeftX) * percent;                }                break;            case -3:                // on -> off                result = mOffLeftX + (mOnLeftX - mOffLeftX) * percent;                break;            default: // init            case 0:                if (mCheckedState == STATE_SWITCH_OFF) {                    //  off -> off                    result = mOffLeftX;                } else if (mCheckedState == STATE_SWITCH_ON) {                    // on -> on                    result = mOnLeftX;                }                break;        }        return result - mOffLeftX;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        if (!isCanVisibleDrawing) {            return;        }        mPaint.setAntiAlias(true);        final boolean isOn = (mCheckedState == STATE_SWITCH_ON || mCheckedState == STATE_SWITCH_ON2);        // Draw background        mPaint.setStyle(Paint.Style.FILL);        mPaint.setColor(isOn ? mAccentColor : mOffColor);        canvas.drawPath(mBackgroundPath, mPaint);        mAnim1 = mAnim1 - mAnimationSpeed > 0 ? mAnim1 - mAnimationSpeed : 0;        mAnim2 = mAnim2 - mAnimationSpeed > 0 ? mAnim2 - mAnimationSpeed : 0;        final float dsAnim = mInterpolator.getInterpolation(mAnim1);        final float dbAnim = mInterpolator.getInterpolation(mAnim2);        // Draw background animation        final float scale = mScale * (isOn ? dsAnim : 1 - dsAnim);        final float scaleOffset = (mRight - mCenterX - mRadius) * (isOn ? 1 - dsAnim : dsAnim);        canvas.save();        canvas.scale(scale, scale, mCenterX + scaleOffset, mCenterY);        mPaint.setColor(0xFFFFFFFF);        canvas.drawPath(mBackgroundPath, mPaint);        canvas.restore();        // To prepare center bar path        canvas.save();        canvas.translate(calcBTranslate(dbAnim), mShadowReservedHeight);        final boolean isState2 = (mCheckedState == STATE_SWITCH_ON2 || mCheckedState == STATE_SWITCH_OFF2);        calcBPath(isState2 ? 1 - dbAnim : dbAnim);        // Use center bar path to draw shadow        if (isShadow) {            mPaint.setStyle(Paint.Style.FILL);            mPaint.setShader(mShadowGradient);            canvas.drawPath(mBarPath, mPaint);            mPaint.setShader(null);        }        canvas.translate(0, -mShadowReservedHeight);        // draw bar        canvas.scale(0.98f, 0.98f, mWidth / 2, mWidth / 2);        mPaint.setStyle(Paint.Style.FILL);        mPaint.setColor(0xFFFFFFFF);        canvas.drawPath(mBarPath, mPaint);        mPaint.setStyle(Paint.Style.STROKE);        mPaint.setStrokeWidth(mStrokeWidth * 0.5f);        mPaint.setColor(isOn ? mPrimaryDarkColor : mOffDarkColor);        canvas.drawPath(mBarPath, mPaint);        canvas.restore();        mPaint.reset();        if (mAnim1 > 0 || mAnim2 > 0) {            invalidate();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTouchEvent(MotionEvent event) {        super.onTouchEvent(event);        if (isEnabled()                && (mCheckedState == STATE_SWITCH_ON || mCheckedState == STATE_SWITCH_OFF)                && (mAnim1 * mAnim2 == 0)) {            switch (event.getAction()) {                case MotionEvent.ACTION_UP:                    mLastCheckedState = mCheckedState;                    mAnim2 = 1;                    switch (mCheckedState) {                        case STATE_SWITCH_OFF:                            setChecked(true, false);                            if (mListener != null) {                                mListener.onCheckedChanged(this, true);                            }                            break;                        case STATE_SWITCH_ON:                            setChecked(false, false);                            if (mListener != null) {                                mListener.onCheckedChanged(this, false);                            }                            break;                        default:                            break;                    }                    break;                case MotionEvent.ACTION_DOWN:                default:                    break;            }        }        return true;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onSaveInstanceState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Parcelable", "snippet": "    public Parcelable onSaveInstanceState() {        Parcelable superState = super.onSaveInstanceState();        SavedState state = new SavedState(superState);        state.checked = mChecked;        return state;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onRestoreInstanceState", "params": ["Parcelable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRestoreInstanceState(Parcelable state) {        SavedState savedState = (SavedState) state;        super.onRestoreInstanceState(savedState.getSuperState());        mChecked = savedState.checked;        mCheckedState = mChecked ? STATE_SWITCH_ON : STATE_SWITCH_OFF;        invalidate();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setColor", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setColor(int newColorPrimary, int newColorPrimaryDark) {        setColor(newColorPrimary, newColorPrimaryDark, mOffColor, mOffDarkColor);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setColor", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setColor(int newColorPrimary, int newColorPrimaryDark, int newColorOff, int newColorOffDark) {        setColor(newColorPrimary, newColorPrimaryDark, newColorOff, newColorOffDark, mShadowColor);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setColor", "params": ["int", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setColor(int newColorPrimary, int newColorPrimaryDark, int newColorOff, int newColorOffDark, int newColorShadow) {        mAccentColor = newColorPrimary;        mPrimaryDarkColor = newColorPrimaryDark;        mOffColor = newColorOff;        mOffDarkColor = newColorOffDark;        mShadowColor = newColorShadow;        invalidate();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setShadow", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setShadow(boolean shadow) {        isShadow = shadow;        invalidate();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isChecked", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isChecked() {        return mChecked;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setChecked", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setChecked(boolean checked) {        // \u56de\u8c03\u76d1\u542c\u5668        setChecked(checked, true);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setChecked", "params": ["boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setChecked(boolean checked, boolean callback) {        int newState = checked ? STATE_SWITCH_ON : STATE_SWITCH_OFF;        if (newState == mCheckedState) {            return;        }        if ((newState == STATE_SWITCH_ON && (mCheckedState == STATE_SWITCH_OFF || mCheckedState == STATE_SWITCH_OFF2))                || (newState == STATE_SWITCH_OFF && (mCheckedState == STATE_SWITCH_ON || mCheckedState == STATE_SWITCH_ON2))) {            mAnim1 = 1;        }        mAnim2 = 1;        if (!mChecked && newState == STATE_SWITCH_ON) {            mChecked = true;        } else if (mChecked && newState == STATE_SWITCH_OFF) {            mChecked = false;        }        mLastCheckedState = mCheckedState;        mCheckedState = newState;        postInvalidate();        if (callback && mListener != null) {            mListener.onCheckedChanged(this, checked);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setOnCheckedChangeListener", "params": ["OnCheckedChangeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnCheckedChangeListener(OnCheckedChangeListener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SwitchButton", "extends": "View", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "writeToParcel", "params": ["Parcel", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void writeToParcel(Parcel out, int flags) {            super.writeToParcel(out, flags);            out.writeInt(checked ? 1 : 0);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SavedState", "extends": "BaseSavedState", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "describeContents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int describeContents() {            return 0;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SwitchButton.java", "stars": "1", "class": {"name": "SavedState", "extends": "BaseSavedState", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "WBDataCheckerDao", "snippet": "\tpublic static WBDataCheckerDao getInstance() {\t\tif (instance == null) {\t\t\tsynchronized (WBDataCheckerDao.class) {\t\t\t\tif (instance == null) {\t\t\t\t\tinstance = new WBDataCheckerDao();\t\t\t\t}\t\t\t}\t\t}\t\treturn instance;\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeConnection", "params": ["Connection", "Logger"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void closeConnection(Connection conn, Logger log) {\t\tif (conn != null) {\t\t\ttry {\t\t\t\tconn.close();\t\t\t} catch (SQLException e) {\t\t\t\tlog.error(\"Error closing connection\", e);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeQueryRef", "params": ["ResultSet", "PreparedStatement", "Logger"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void closeQueryRef(ResultSet rs, PreparedStatement pstmt, Logger log) {\t\tif (rs != null) {\t\t\ttry {\t\t\t\trs.close();\t\t\t} catch (SQLException e) {\t\t\t\tlog.error(\"Error closing result set\", e);\t\t\t}\t\t}\t\tif (pstmt != null) {\t\t\ttry {\t\t\t\tpstmt.close();\t\t\t} catch (SQLException e) {\t\t\t\tlog.error(\"Error closing prepared statement\", e);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateTableStatusFunction", "params": ["Properties", "Logger"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean validateTableStatusFunction(Properties props, Logger log) {\t\tif (bdpDS == null) {\t\t\t//\u901a\u8fc7alibaba\u7684druid\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u83b7\u53d6BDP\u6570\u636e\u5e93\u8fde\u63a5\t\t\tbdpDS = WBDruidFactory.getBDPInstance(props, log);\t\t\tif (bdpDS == null) {\t\t\t\tlog.error(\"Error getting Druid DataSource instance\");\t\t\t\treturn false;\t\t\t}\t\t}\t\tif (jobDS == null) {\t\t\t//\u901a\u8fc7alibaba\u7684druid\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u83b7\u53d6JOB\u6570\u636e\u5e93\u8fde\u63a5\t\t\tjobDS = WBDruidFactory.getJobInstance(props, log);\t\t\tif (jobDS == null) {\t\t\t\tlog.error(\"Error getting Druid DataSource instance\");\t\t\t\treturn false;\t\t\t}\t\t}\t\tPreparedStatement pstmt = null;\t\tConnection jobConn = null;\t\tConnection bdpConn = null;\t\ttry {\t\t\tfor (Map.Entry<Object, Object> entry : props.entrySet()) {\t\t\t\tentry.setValue(entry.getValue().toString().replace(\" \", \"\").trim());\t\t\t}\t\t}catch (Exception e){\t\t\tthrow new RuntimeException(\"remove job space char failed\",e);\t\t}\t\tString singleDataObject = props.getProperty(DataChecker.DATA_OBJECT);\t\tif(singleDataObject!=null){\t\t\tsingleDataObject = singleDataObject.replace(\" \", \"\").trim();\t\t}\t\tlog.info(\"=============================Data Check Start==========================================\");\t\tlog.info(\"(datachecker info) database table partition Info : \" + singleDataObject);\t\t//\u7ec4\u88c5\u67e5\u8be2\u7684\u6570\u636e\u8d44\u6e90\u96c6\u5408\t\tList<Map<String, String>> dataObjectList = handleSeparationProperties(props);\t\tboolean[] flagList = new boolean[dataObjectList.size()];\t\tArrays.fill(flagList, false);\t\tLong startTime = System.currentTimeMillis();\t\tLong currentTime = startTime;\t\tLong waitTime = Long.valueOf(props.getProperty(DataChecker.WAIT_TIME, \"1\")) * 3600 * 1000;\t\tint queryFrequency = Integer.valueOf(props.getProperty(DataChecker.QUERY_FREQUENCY, \"5\"));\t\tString timeScape = props.getProperty(DataChecker.TIME_SCAPE, \"NULL\");\t\tlog.info(\"(datachecker info) wait time : \" + waitTime);\t\tlog.info(\"(datachecker info) quert frequency : \" + queryFrequency);\t\tlog.info(\"(datachecker info) time scape : \" + timeScape);\t\tLong sleepTime = waitTime / queryFrequency;\t\tboolean result = false;\t\twhile((currentTime - startTime) <= waitTime) {\t\t\tboolean flag = true;\t\t\tResultSet rs = null;\t\t\ttry {\t\t\t\tjobConn = jobDS.getConnection();\t\t\t\tbdpConn = bdpDS.getConnection();\t\t\t\tfor(int i = 0; i < dataObjectList.size(); i++) {\t\t\t\t\tif(flagList[i]) {\t\t\t\t\t\tcontinue;\t\t\t\t\t}\t\t\t\t\tMap<String, String> proObjectMap = dataObjectList.get(i);\t\t\t\t\tif(proObjectMap.containsKey(DataChecker.SOURCE_TYPE)){\t\t\t\t\t\trs = handleHaveSourceType(proObjectMap, pstmt, jobConn, bdpConn, rs, timeScape, log, props);\t\t\t\t\t}else{\t\t\t\t\t\trs = handleNotSourceType(proObjectMap, pstmt, jobConn, bdpConn, rs, timeScape, log, props);\t\t\t\t\t}\t\t\t\t\tint rowCount = 0;\t\t\t\t\tif(rs.last()) {\t\t\t\t\t\trowCount = rs.getRow();\t\t\t\t\t}\t\t\t\t\tif(rowCount >= 1){\t\t\t\t\t\tlog.info(\"(datachecker info) get maskdb result success\");\t\t\t\t\t}else{\t\t\t\t\t\tlog.info(\"(datachecker info) get maskdb result failed\");\t\t\t\t\t}\t\t\t\t\tif(rowCount >= 1 || \"success\".equals(proObjectMap.get(\"maskStatus\"))) {\t\t\t\t\t\tflagList[i] = true;\t\t\t\t\t}\t\t\t\t\tflag = flag & flagList[i];\t\t\t\t}\t\t\t} catch (SQLException e) {\t\t\t\tthrow new RuntimeException(\"get datachecker result failed\",e);\t\t\t} finally {\t\t\t\tcloseQueryRef(rs, pstmt, log);\t\t\t\tcloseConnection(jobConn, log);\t\t\t\tcloseConnection(bdpConn, log);\t\t\t\tlog.info(\"=============================Data Check End==========================================\");\t\t\t}\t\t\tif(flag) {\t\t\t\tresult = flag;\t\t\t\tbreak;\t\t\t}\t\t\ttry {\t\t\t\tThread.sleep(sleepTime);\t\t\t} catch (InterruptedException e) {\t\t\t\te.printStackTrace();\t\t\t}\t\t\tcurrentTime = System.currentTimeMillis();\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleSeparationProperties", "params": ["Properties"], "throws": null, "modifiers": ["private"], "return_type": "List<Map>", "snippet": "\tprivate List<Map<String, String>> handleSeparationProperties(Properties p){\t\t//source.type\u548cdata.object\u7684\u5206\u7ec4\u96c6\u5408\t\tList<Map<String, String>> proList = new ArrayList<>();\t\tfor(Object key : p.keySet()){\t\t\tMap<String, String> proMap = new HashMap<>();\t\t\tString skey = String.valueOf(key);\t\t\t//\u6839\u636edata.object\u7684\u4e2a\u6570\u53bb\u62fc\u88c5\u6570\u636e\t\t\tif(skey.contains(DataChecker.DATA_OBJECT)){\t\t\t\tString[] keyArr = skey.split(\"\\\\.\");\t\t\t\t//\u6709\u540e\u7f00\t\t\t\tif(keyArr.length == 3){\t\t\t\t\t//\u83b7\u53d6\u540e\u7f00\u6570\u5b57\t\t\t\t\tString keyNum = keyArr[2];\t\t\t\t\t//\u7ec4\u88c5\u6210\u5bf9\u7684Key\t\t\t\t\tString stKey = DataChecker.SOURCE_TYPE + \".\" + keyNum;\t\t\t\t\tString doKey = DataChecker.DATA_OBJECT + \".\" + keyNum;\t\t\t\t\t//source.type\u53ef\u80fd\u4f1a\u4e0d\u5b58\u5728\t\t\t\t\tif(null != p.get(stKey)){\t\t\t\t\t\tproMap.put(DataChecker.SOURCE_TYPE, String.valueOf(p.get(stKey)));\t\t\t\t\t}\t\t\t\t\tproMap.put(DataChecker.DATA_OBJECT, String.valueOf(p.get(doKey)));\t\t\t\t}else{//\u6ca1\u6709\u540e\u7f00\t\t\t\t\tString stKey = DataChecker.SOURCE_TYPE;\t\t\t\t\tString doKey = DataChecker.DATA_OBJECT;\t\t\t\t\t//source.type\u53ef\u80fd\u4f1a\u4e0d\u5b58\u5728\t\t\t\t\tif(null != p.get(stKey)){\t\t\t\t\t\tproMap.put(DataChecker.SOURCE_TYPE, String.valueOf(p.get(stKey)));\t\t\t\t\t}\t\t\t\t\tproMap.put(DataChecker.DATA_OBJECT, String.valueOf(p.get(doKey)));\t\t\t\t}\t\t\t\tproList.add(proMap);\t\t\t}\t\t}\t\treturn proList;\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleHaveSourceType", "params": ["Map<String,String>", "PreparedStatement", "Connection", "Connection", "ResultSet", "String", "Logger", "Properties"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "ResultSet", "snippet": "\tprivate ResultSet handleHaveSourceType(Map<String, String>  proObjectMap, PreparedStatement pstmt,\t\t\t\t\t\t\t\t\t\t   Connection jobConn, Connection bdpConn, ResultSet rs, String timeScape, Logger log, Properties props) throws SQLException{\t\tString sourceType = proObjectMap.get(DataChecker.SOURCE_TYPE);\t\tif(sourceType!=null){\t\t\tsourceType = sourceType.replace(\" \", \"\").trim();\t\t}\t\tString dataObject = proObjectMap.get(DataChecker.DATA_OBJECT);\t\tif(dataObject!=null){\t\t\tdataObject = dataObject.replace(\" \", \"\").trim();\t\t}\t\tString dataScape = \"Table\";\t\tif (dataObject.contains(\"{\")) {\t\t\tdataScape = \"Partition\";\t\t}\t\tString dbName = null;\t\tString tableName = null;\t\tString partitionName = null;\t\tPattern pattern = Pattern.compile(\"\\\\{([^\\\\}]+)\\\\}\");\t\tif(sourceType.toLowerCase().equals(\"job\")) {\t\t\tlog.info(\"-------------------------------------- search hive/spark/mr data \");\t\t\tlog.info(\"-------------------------------------- : \" + dataObject);\t\t\tdbName = dataObject.split(\"\\\\.\")[0];\t\t\ttableName = dataObject.split(\"\\\\.\")[1];\t\t\tif(dataScape.equals(\"Partition\")) {//\t    \t\tpartitionName = tableName.split(\"\\\\{\")[1];//\t    \t\tpartitionName = partitionName.substring(0, partitionName.length()-1).replace(\"\\'\", \"\").replace(\"\\\"\", \"\");\t\t\t\tMatcher matcher = pattern.matcher(dataObject);\t\t\t\tif(matcher.find()){\t\t\t\t\tpartitionName = matcher.group(1);\t\t\t\t}\t\t\t\t//\u5bb9\u9519\u4ee3\u7801 \u8fc7\u6ee4\u7528\u6237\u591a\u5199\u7684\u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7\t\t\t\tpartitionName = partitionName.replace(\"\\'\", \"\").replace(\"\\\"\", \"\");\t\t\t\ttableName = tableName.split(\"\\\\{\")[0];\t\t\t\tpstmt = jobConn.prepareCall(SQL_SOURCE_TYPE_JOB_PARTITION);\t\t\t\tpstmt.setString(1, dbName);\t\t\t\tpstmt.setString(2, tableName);\t\t\t\tpstmt.setString(3, partitionName);\t\t\t} else {\t\t\t\tpstmt = jobConn.prepareCall(SQL_SOURCE_TYPE_JOB_TABLE);\t\t\t\tpstmt.setString(1, dbName);\t\t\t\tpstmt.setString(2, tableName);\t\t\t}\t\t\trs = pstmt.executeQuery();\t\t} else if(sourceType.toLowerCase().equals(\"bdp\")) {\t\t\tlog.info(\"-------------------------------------- search bdp data \");\t\t\tlog.info(\"-------------------------------------- : \" + dataObject);\t\t\tdbName = dataObject.split(\"\\\\.\")[0];\t\t\ttableName = dataObject.split(\"\\\\.\")[1];\t\t\tpartitionName = \"\";\t\t\tif(dataScape.equals(\"Partition\")) {\t\t\t\tMatcher matcher = pattern.matcher(dataObject);\t\t\t\tif(matcher.find()){\t\t\t\t\tpartitionName = matcher.group(1);\t\t\t\t}\t\t\t\t//\u5bb9\u9519\u4ee3\u7801 \u8fc7\u6ee4\u7528\u6237\u591a\u5199\u7684\u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7\t\t\t\tpartitionName = partitionName.replace(\"\\'\", \"\").replace(\"\\\"\", \"\");\t\t\t\ttableName = tableName.split(\"\\\\{\")[0];\t\t\t}\t\t\tif (timeScape.equals(\"NULL\")) {\t\t\t\tpstmt = bdpConn.prepareCall(SQL_SOURCE_TYPE_BDP);\t\t\t} else {\t\t\t\tpstmt = bdpConn.prepareCall(SQL_SOURCE_TYPE_BDP_WITH_TIME_CONDITION);\t\t\t\tpstmt.setInt(4, Integer.valueOf(timeScape) * 3600);\t\t\t}\t\t\tpstmt.setString(1, dbName);\t\t\tpstmt.setString(2, tableName);\t\t\tpstmt.setString(3, partitionName);\t\t\trs = pstmt.executeQuery();\t\t\tfetchMaskCode(proObjectMap, dbName, tableName, partitionName, log, props);\t\t}\t\treturn rs;\t}\t//\u6ca1\u6709source.type\u7684\u5904\u7406\u65b9\u6cd5\tprivate ResultSet handleNotSourceType(Map<String, String>  proObjectMap, PreparedStatement pstmt,\t\t\t\t\t\t\t\t\t\t  Connection jobConn, Connection bdpConn, ResultSet rs, String timeScape, Logger log, Properties props) throws SQLException{\t\tString dataObject = proObjectMap.get(DataChecker.DATA_OBJECT);\t\tif(dataObject!=null){\t\t\tdataObject = dataObject.replace(\" \", \"\").trim();\t\t}\t\tString dataScape = \"Table\";\t\tif (dataObject.contains(\"{\")) {\t\t\tdataScape = \"Partition\";\t\t}\t\tString dbName = null;\t\tString tableName = null;\t\tString partitionName = null;\t\tPattern pattern = Pattern.compile(\"\\\\{([^\\\\}]+)\\\\}\");\t\tdbName = dataObject.split(\"\\\\.\")[0];\t\tif(!dbName.contains(\"_ods\")) {\t\t\tlog.info(\"-------------------------------------- search hive/spark/mr data \");\t\t\tlog.info(\"-------------------------------------- : \" + dataObject);\t\t\ttableName = dataObject.split(\"\\\\.\")[1];\t\t\tif(dataScape.equals(\"Partition\")) {\t\t\t\tMatcher matcher = pattern.matcher(dataObject);\t\t\t\tif(matcher.find()){\t\t\t\t\tpartitionName = matcher.group(1);\t\t\t\t}\t\t\t\t//\u5bb9\u9519\u4ee3\u7801 \u8fc7\u6ee4\u7528\u6237\u591a\u5199\u7684\u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7\t\t\t\tpartitionName = partitionName.replace(\"\\'\", \"\").replace(\"\\\"\", \"\");\t\t\t\ttableName = tableName.split(\"\\\\{\")[0];\t\t\t\tpstmt = jobConn.prepareCall(SQL_SOURCE_TYPE_JOB_PARTITION);\t\t\t\tpstmt.setString(1, dbName);\t\t\t\tpstmt.setString(2, tableName);\t\t\t\tpstmt.setString(3, partitionName);\t\t\t} else {\t\t\t\tpstmt = jobConn.prepareCall(SQL_SOURCE_TYPE_JOB_TABLE);\t\t\t\tpstmt.setString(1, dbName);\t\t\t\tpstmt.setString(2, tableName);\t\t\t}\t\t\trs = pstmt.executeQuery();\t\t} else if(dbName.contains(\"_ods\")) {\t\t\tlog.info(\"-------------------------------------- search bdp data \");\t\t\tlog.info(\"-------------------------------------- : \" + dataObject);\t\t\tdbName = dataObject.split(\"\\\\.\")[0];\t\t\ttableName = dataObject.split(\"\\\\.\")[1];\t\t\tpartitionName = \"\";\t\t\tif(dataScape.equals(\"Partition\")) {\t\t\t\tMatcher matcher = pattern.matcher(dataObject);\t\t\t\tif(matcher.find()){\t\t\t\t\tpartitionName = matcher.group(1);\t\t\t\t}\t\t\t\t//\u5bb9\u9519\u4ee3\u7801 \u8fc7\u6ee4\u7528\u6237\u591a\u5199\u7684\u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7\t\t\t\tpartitionName = partitionName.replace(\"\\'\", \"\").replace(\"\\\"\", \"\");\t\t\t\ttableName = tableName.split(\"\\\\{\")[0];\t\t\t}\t\t\tif (timeScape.equals(\"NULL\")) {\t\t\t\tpstmt = bdpConn.prepareCall(SQL_SOURCE_TYPE_BDP);\t\t\t} else {\t\t\t\tpstmt = bdpConn.prepareCall(SQL_SOURCE_TYPE_BDP_WITH_TIME_CONDITION);\t\t\t\tpstmt.setInt(4, Integer.valueOf(timeScape) * 3600);\t\t\t}\t\t\tpstmt.setString(1, dbName);\t\t\tpstmt.setString(2, tableName);\t\t\tpstmt.setString(3, partitionName);\t\t\trs = pstmt.executeQuery();\t\t\tfetchMaskCode(proObjectMap, dbName, tableName, partitionName, log, props);\t\t}\t\treturn rs;\t}\tpublic static void closeDruidDataSource(){\t\tDruidDataSource bdpDSObject = (DruidDataSource)bdpDS;\t\tDruidDataSource jobDSObject = (DruidDataSource)jobDS;\t\tif(bdpDSObject != null){\t\t\tbdpDSObject.close();\t\t}\t\tif(jobDSObject != null){\t\t\tjobDSObject.close();\t\t}\t}\tprivate void fetchMaskCode(Map<String, String> proObjectMap, String dbName, String tableName, String partitionName,\t\t\t\t\t\t\t   Logger log, Properties props) {\t\tlog.info(\"=============================\u8c03\u7528BDP MASK\u63a5\u53e3\u67e5\u8be2\u6570\u636e\u72b6\u6001==========================================\");\t\tMap resultMap = new HashMap();\t\tString maskUrl = props.getProperty(DataChecker.MASK_URL);\t\tString cluster = \"BDP\";\t\ttry {\t\t\tRequestBody requestBody = new FormBody.Builder()\t\t\t\t\t.add(\"targetDb\", dbName)\t\t\t\t\t.add(\"targetTable\", tableName)\t\t\t\t\t.add(\"partition\", partitionName)\t\t\t\t\t.build();\t\t\tMap<String, String> dataMap = HttpUtils.initSelectParams(props);\t\t\tlog.info(\"request body:dbName--\" + dbName + \" tableName--\" + tableName + \" partitionName--\" + partitionName);\t\t\tResponse response = HttpUtils.httpClientHandleBase(maskUrl, requestBody, dataMap);\t\t\thandleResponse(response, proObjectMap, log);\t\t} catch (IOException e) {\t\t\tlog.error(\"\u8bbf\u95ee BDP-MASK \u8fdc\u7a0b\u67e5\u8be2BDAP\u4e1a\u52a1\u8868\u6570\u636e\u5931\u8d25\uff01\");\t\t\tproObjectMap.put(\"maskStatus\", \"noPrepare\");\t\t} catch (MaskCheckNotExistException e) {\t\t\tString errorMessage = \"\u8bbf\u95ee BDP-MASK \u8fdc\u7a0b\u67e5\u8be2BDAP\u4e1a\u52a1\u8868\u6570\u636e\u5931\u8d25\uff01\" +\t\t\t\t\t\"\u8bf7\u68c0\u67e5\u4e1a\u52a1\u6570\u636e\u5e93: \" + dbName + \",\u4e1a\u52a1\u6570\u636e\u8868: \" + tableName + \"\u662f\u5426\u5b58\u5728\";\t\t\tlog.error(errorMessage);\t\t\tthrow new RuntimeException(errorMessage, e);\t\t}\t}\tprivate void handleResponse(Response response, Map<String, String> proObjectMap, Logger log)\t\t\tthrows IOException, MaskCheckNotExistException {\t\tint responseCode = response.code();\t\tResponseBody body = response.body();\t\tif (responseCode == 200) {\t\t\thandleResponseBody(body, proObjectMap, log);\t\t} else {\t\t\tproObjectMap.put(\"maskStatus\", \"noPrepare\");\t\t}\t}\tprivate void handleResponseBody(ResponseBody body, Map<String, String> proObjectMap, Logger log)\t\t\tthrows IOException, MaskCheckNotExistException {\t\tString bodyStr = body.string();\t\tlog.info(\"mask interface response body\uff1a\" + bodyStr);\t\tMap entityMap = HttpUtils.getReturnMap(bodyStr);\t\tString codeValue = (String) entityMap.get(\"code\");\t\tif (\"200\".equals(codeValue)) {\t\t\tproObjectMap.put(\"maskStatus\", \"success\");\t\t} else if (\"1011\".equals(codeValue)) {\t\t\tthrow new MaskCheckNotExistException(\"Mask check failed\");\t\t} else {\t\t\tproObjectMap.put(\"maskStatus\", \"noPrepare\");\t\t}\t}}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleNotSourceType", "params": ["Map<String,String>", "PreparedStatement", "Connection", "Connection", "ResultSet", "String", "Logger", "Properties"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "ResultSet", "snippet": "\tprivate ResultSet handleNotSourceType(Map<String, String>  proObjectMap, PreparedStatement pstmt,\t\t\t\t\t\t\t\t\t\t  Connection jobConn, Connection bdpConn, ResultSet rs, String timeScape, Logger log, Properties props) throws SQLException{\t\tString dataObject = proObjectMap.get(DataChecker.DATA_OBJECT);\t\tif(dataObject!=null){\t\t\tdataObject = dataObject.replace(\" \", \"\").trim();\t\t}\t\tString dataScape = \"Table\";\t\tif (dataObject.contains(\"{\")) {\t\t\tdataScape = \"Partition\";\t\t}\t\tString dbName = null;\t\tString tableName = null;\t\tString partitionName = null;\t\tPattern pattern = Pattern.compile(\"\\\\{([^\\\\}]+)\\\\}\");\t\tdbName = dataObject.split(\"\\\\.\")[0];\t\tif(!dbName.contains(\"_ods\")) {\t\t\tlog.info(\"-------------------------------------- search hive/spark/mr data \");\t\t\tlog.info(\"-------------------------------------- : \" + dataObject);\t\t\ttableName = dataObject.split(\"\\\\.\")[1];\t\t\tif(dataScape.equals(\"Partition\")) {\t\t\t\tMatcher matcher = pattern.matcher(dataObject);\t\t\t\tif(matcher.find()){\t\t\t\t\tpartitionName = matcher.group(1);\t\t\t\t}\t\t\t\t//\u5bb9\u9519\u4ee3\u7801 \u8fc7\u6ee4\u7528\u6237\u591a\u5199\u7684\u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7\t\t\t\tpartitionName = partitionName.replace(\"\\'\", \"\").replace(\"\\\"\", \"\");\t\t\t\ttableName = tableName.split(\"\\\\{\")[0];\t\t\t\tpstmt = jobConn.prepareCall(SQL_SOURCE_TYPE_JOB_PARTITION);\t\t\t\tpstmt.setString(1, dbName);\t\t\t\tpstmt.setString(2, tableName);\t\t\t\tpstmt.setString(3, partitionName);\t\t\t} else {\t\t\t\tpstmt = jobConn.prepareCall(SQL_SOURCE_TYPE_JOB_TABLE);\t\t\t\tpstmt.setString(1, dbName);\t\t\t\tpstmt.setString(2, tableName);\t\t\t}\t\t\trs = pstmt.executeQuery();\t\t} else if(dbName.contains(\"_ods\")) {\t\t\tlog.info(\"-------------------------------------- search bdp data \");\t\t\tlog.info(\"-------------------------------------- : \" + dataObject);\t\t\tdbName = dataObject.split(\"\\\\.\")[0];\t\t\ttableName = dataObject.split(\"\\\\.\")[1];\t\t\tpartitionName = \"\";\t\t\tif(dataScape.equals(\"Partition\")) {\t\t\t\tMatcher matcher = pattern.matcher(dataObject);\t\t\t\tif(matcher.find()){\t\t\t\t\tpartitionName = matcher.group(1);\t\t\t\t}\t\t\t\t//\u5bb9\u9519\u4ee3\u7801 \u8fc7\u6ee4\u7528\u6237\u591a\u5199\u7684\u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7\t\t\t\tpartitionName = partitionName.replace(\"\\'\", \"\").replace(\"\\\"\", \"\");\t\t\t\ttableName = tableName.split(\"\\\\{\")[0];\t\t\t}\t\t\tif (timeScape.equals(\"NULL\")) {\t\t\t\tpstmt = bdpConn.prepareCall(SQL_SOURCE_TYPE_BDP);\t\t\t} else {\t\t\t\tpstmt = bdpConn.prepareCall(SQL_SOURCE_TYPE_BDP_WITH_TIME_CONDITION);\t\t\t\tpstmt.setInt(4, Integer.valueOf(timeScape) * 3600);\t\t\t}\t\t\tpstmt.setString(1, dbName);\t\t\tpstmt.setString(2, tableName);\t\t\tpstmt.setString(3, partitionName);\t\t\trs = pstmt.executeQuery();\t\t\tfetchMaskCode(proObjectMap, dbName, tableName, partitionName, log, props);\t\t}\t\treturn rs;\t}\tpublic static void closeDruidDataSource(){\t\tDruidDataSource bdpDSObject = (DruidDataSource)bdpDS;\t\tDruidDataSource jobDSObject = (DruidDataSource)jobDS;\t\tif(bdpDSObject != null){\t\t\tbdpDSObject.close();\t\t}\t\tif(jobDSObject != null){\t\t\tjobDSObject.close();\t\t}\t}\tprivate void fetchMaskCode(Map<String, String> proObjectMap, String dbName, String tableName, String partitionName,\t\t\t\t\t\t\t   Logger log, Properties props) {\t\tlog.info(\"=============================\u8c03\u7528BDP MASK\u63a5\u53e3\u67e5\u8be2\u6570\u636e\u72b6\u6001==========================================\");\t\tMap resultMap = new HashMap();\t\tString maskUrl = props.getProperty(DataChecker.MASK_URL);\t\tString cluster = \"BDP\";\t\ttry {\t\t\tRequestBody requestBody = new FormBody.Builder()\t\t\t\t\t.add(\"targetDb\", dbName)\t\t\t\t\t.add(\"targetTable\", tableName)\t\t\t\t\t.add(\"partition\", partitionName)\t\t\t\t\t.build();\t\t\tMap<String, String> dataMap = HttpUtils.initSelectParams(props);\t\t\tlog.info(\"request body:dbName--\" + dbName + \" tableName--\" + tableName + \" partitionName--\" + partitionName);\t\t\tResponse response = HttpUtils.httpClientHandleBase(maskUrl, requestBody, dataMap);\t\t\thandleResponse(response, proObjectMap, log);\t\t} catch (IOException e) {\t\t\tlog.error(\"\u8bbf\u95ee BDP-MASK \u8fdc\u7a0b\u67e5\u8be2BDAP\u4e1a\u52a1\u8868\u6570\u636e\u5931\u8d25\uff01\");\t\t\tproObjectMap.put(\"maskStatus\", \"noPrepare\");\t\t} catch (MaskCheckNotExistException e) {\t\t\tString errorMessage = \"\u8bbf\u95ee BDP-MASK \u8fdc\u7a0b\u67e5\u8be2BDAP\u4e1a\u52a1\u8868\u6570\u636e\u5931\u8d25\uff01\" +\t\t\t\t\t\"\u8bf7\u68c0\u67e5\u4e1a\u52a1\u6570\u636e\u5e93: \" + dbName + \",\u4e1a\u52a1\u6570\u636e\u8868: \" + tableName + \"\u662f\u5426\u5b58\u5728\";\t\t\tlog.error(errorMessage);\t\t\tthrow new RuntimeException(errorMessage, e);\t\t}\t}\tprivate void handleResponse(Response response, Map<String, String> proObjectMap, Logger log)\t\t\tthrows IOException, MaskCheckNotExistException {\t\tint responseCode = response.code();\t\tResponseBody body = response.body();\t\tif (responseCode == 200) {\t\t\thandleResponseBody(body, proObjectMap, log);\t\t} else {\t\t\tproObjectMap.put(\"maskStatus\", \"noPrepare\");\t\t}\t}\tprivate void handleResponseBody(ResponseBody body, Map<String, String> proObjectMap, Logger log)\t\t\tthrows IOException, MaskCheckNotExistException {\t\tString bodyStr = body.string();\t\tlog.info(\"mask interface response body\uff1a\" + bodyStr);\t\tMap entityMap = HttpUtils.getReturnMap(bodyStr);\t\tString codeValue = (String) entityMap.get(\"code\");\t\tif (\"200\".equals(codeValue)) {\t\t\tproObjectMap.put(\"maskStatus\", \"success\");\t\t} else if (\"1011\".equals(codeValue)) {\t\t\tthrow new MaskCheckNotExistException(\"Mask check failed\");\t\t} else {\t\t\tproObjectMap.put(\"maskStatus\", \"noPrepare\");\t\t}\t}}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeDruidDataSource", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void closeDruidDataSource(){\t\tDruidDataSource bdpDSObject = (DruidDataSource)bdpDS;\t\tDruidDataSource jobDSObject = (DruidDataSource)jobDS;\t\tif(bdpDSObject != null){\t\t\tbdpDSObject.close();\t\t}\t\tif(jobDSObject != null){\t\t\tjobDSObject.close();\t\t}\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchMaskCode", "params": ["Map<String,String>", "String", "String", "String", "Logger", "Properties"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void fetchMaskCode(Map<String, String> proObjectMap, String dbName, String tableName, String partitionName,\t\t\t\t\t\t\t   Logger log, Properties props) {\t\tlog.info(\"=============================\u8c03\u7528BDP MASK\u63a5\u53e3\u67e5\u8be2\u6570\u636e\u72b6\u6001==========================================\");\t\tMap resultMap = new HashMap();\t\tString maskUrl = props.getProperty(DataChecker.MASK_URL);\t\tString cluster = \"BDP\";\t\ttry {\t\t\tRequestBody requestBody = new FormBody.Builder()\t\t\t\t\t.add(\"targetDb\", dbName)\t\t\t\t\t.add(\"targetTable\", tableName)\t\t\t\t\t.add(\"partition\", partitionName)\t\t\t\t\t.build();\t\t\tMap<String, String> dataMap = HttpUtils.initSelectParams(props);\t\t\tlog.info(\"request body:dbName--\" + dbName + \" tableName--\" + tableName + \" partitionName--\" + partitionName);\t\t\tResponse response = HttpUtils.httpClientHandleBase(maskUrl, requestBody, dataMap);\t\t\thandleResponse(response, proObjectMap, log);\t\t} catch (IOException e) {\t\t\tlog.error(\"\u8bbf\u95ee BDP-MASK \u8fdc\u7a0b\u67e5\u8be2BDAP\u4e1a\u52a1\u8868\u6570\u636e\u5931\u8d25\uff01\");\t\t\tproObjectMap.put(\"maskStatus\", \"noPrepare\");\t\t} catch (MaskCheckNotExistException e) {\t\t\tString errorMessage = \"\u8bbf\u95ee BDP-MASK \u8fdc\u7a0b\u67e5\u8be2BDAP\u4e1a\u52a1\u8868\u6570\u636e\u5931\u8d25\uff01\" +\t\t\t\t\t\"\u8bf7\u68c0\u67e5\u4e1a\u52a1\u6570\u636e\u5e93: \" + dbName + \",\u4e1a\u52a1\u6570\u636e\u8868: \" + tableName + \"\u662f\u5426\u5b58\u5728\";\t\t\tlog.error(errorMessage);\t\t\tthrow new RuntimeException(errorMessage, e);\t\t}\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleResponse", "params": ["Response", "Map<String,String>", "Logger"], "throws": ["IOException", "MaskCheckNotExistException"], "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void handleResponse(Response response, Map<String, String> proObjectMap, Logger log)\t\t\tthrows IOException, MaskCheckNotExistException {\t\tint responseCode = response.code();\t\tResponseBody body = response.body();\t\tif (responseCode == 200) {\t\t\thandleResponseBody(body, proObjectMap, log);\t\t} else {\t\t\tproObjectMap.put(\"maskStatus\", \"noPrepare\");\t\t}\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleResponseBody", "params": ["ResponseBody", "Map<String,String>", "Logger"], "throws": ["IOException", "MaskCheckNotExistException"], "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void handleResponseBody(ResponseBody body, Map<String, String> proObjectMap, Logger log)\t\t\tthrows IOException, MaskCheckNotExistException {\t\tString bodyStr = body.string();\t\tlog.info(\"mask interface response body\uff1a\" + bodyStr);\t\tMap entityMap = HttpUtils.getReturnMap(bodyStr);\t\tString codeValue = (String) entityMap.get(\"code\");\t\tif (\"200\".equals(codeValue)) {\t\t\tproObjectMap.put(\"maskStatus\", \"success\");\t\t} else if (\"1011\".equals(codeValue)) {\t\t\tthrow new MaskCheckNotExistException(\"Mask check failed\");\t\t} else {\t\t\tproObjectMap.put(\"maskStatus\", \"noPrepare\");\t\t}\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBDataCheckerDao.java", "stars": "18", "class": {"name": "WBDataCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(MallTinyMybatisGeneratorApplication.class, args);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/MallTinyMybatisGeneratorApplication.java", "stars": "2", "class": {"name": "MallTinyMybatisGeneratorApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRecyclerBaseAdapter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RecyclerView", "snippet": "    public RecyclerView.Adapter getRecyclerBaseAdapter() {        return recyclerBaseAdapter;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/holder/RecyclerItemBaseHolder.java", "stars": "2", "class": {"name": "RecyclerItemBaseHolder", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRecyclerBaseAdapter", "params": ["RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRecyclerBaseAdapter(RecyclerView.Adapter recyclerBaseAdapter) {        this.recyclerBaseAdapter = recyclerBaseAdapter;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/holder/RecyclerItemBaseHolder.java", "stars": "2", "class": {"name": "RecyclerItemBaseHolder", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        HashSet<String> set = new HashSet<>();        set.add(\"www\");        set.add(\"abc\");        set.add(\"abc\");        set.add(\"itcast\");        System.out.println(set);//[abc, www, itcast] \u65e0\u5e8f,\u4e0d\u5141\u8bb8\u91cd\u590d        LinkedHashSet<String> linked = new LinkedHashSet<>();        linked.add(\"www\");        linked.add(\"abc\");        linked.add(\"abc\");        linked.add(\"itcast\");        System.out.println(linked);//[www, abc, itcast] \u6709\u5e8f,\u4e0d\u5141\u8bb8\u91cd\u590d    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo02/Set/Demo04LinkedHashSet.java", "stars": "2", "class": {"name": "Demo04LinkedHashSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u83b7\u53d6\u4e00\u4e2aStream\u6d41        String[] arr = {\"\u7f8e\u7f8a\u7f8a\",\"\u559c\u6d0b\u6d0b\",\"\u61d2\u6d0b\u6d0b\",\"\u7070\u592a\u72fc\",\"\u7ea2\u592a\u72fc\"};        Stream<String> stream = Stream.of(arr);        //\u4f7f\u7528skip\u65b9\u6cd5\u8df3\u8fc7\u524d3\u4e2a\u5143\u7d20        Stream<String> stream2 = stream.skip(3);        //\u904d\u5386stream2\u6d41        stream2.forEach(name-> System.out.println(name));    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo02/Stream/Demo07Stream_skip.java", "stars": "2", "class": {"name": "Demo07Stream_skip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["Object", "ApplicationContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(Object t, ApplicationContext context) {        for (Field field : t.getClass().getDeclaredFields()) {            if (field.isAnnotationPresent(InjectByType.class)) {                field.setAccessible(true);                Object object = context.getObject(field.getType());                field.set(t, object);            }        }    }", "url": "https://raw.githubusercontent.com/Jeka1978/coronadesinfectorlifedemo/master/src/main/java/com/epam/InjectByTypeAnnotationObjectConfigurator.java", "stars": "60", "class": {"name": "InjectByTypeAnnotationObjectConfigurator", "extends": null, "implements": ["ObjectConfigurator"], "modifiers": ["public"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {        popCount = 0;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/AntiChainPop.java", "stars": "12", "class": {"name": "AntiChainPop", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (event.getType().equals(PacketEvent.Type.INCOMING)) {            if (event.getPacket() instanceof SPacketEntityStatus) {                SPacketEntityStatus packet = (SPacketEntityStatus) event.getPacket();                if (packet.getOpCode() == 35) {                    entity = packet.getEntity(mc.world);                    if (entity == mc.player) {                        popCount++;                        if (popCount >= pops) {                            if (!Mercury.INSTANCE.getModuleManager().find(Surround.class).isEnabled())                                Mercury.INSTANCE.getModuleManager().find(Surround.class).setEnabled(true);                            popCount = 0;                        }                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/AntiChainPop.java", "stars": "12", "class": {"name": "AntiChainPop", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "addConfigurationProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addConfigurationProperties(Properties properties) {        super.addConfigurationProperties(properties);        this.addRemarkComments = StringUtility.isTrue(properties.getProperty(\"addRemarkComments\"));    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/CommentGenerator.java", "stars": "2", "class": {"name": "CommentGenerator", "extends": "DefaultCommentGenerator", "implements": null, "modifiers": ["public"]}}, {"method_name": "addFieldComment", "params": ["Field", "IntrospectedTable", "IntrospectedColumn"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addFieldComment(Field field, IntrospectedTable introspectedTable,                                IntrospectedColumn introspectedColumn) {        String remarks = introspectedColumn.getRemarks();        //\u6839\u636e\u53c2\u6570\u548c\u5907\u6ce8\u4fe1\u606f\u5224\u65ad\u662f\u5426\u6dfb\u52a0\u5907\u6ce8\u4fe1\u606f        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {            //addFieldJavaDoc(field, remarks);            //\u6570\u636e\u5e93\u4e2d\u7279\u6b8a\u5b57\u7b26\u9700\u8981\u8f6c\u4e49            if(remarks.contains(\"\\\"\")){                remarks = remarks.replace(\"\\\"\",\"'\");            }            //\u7ed9model\u7684\u5b57\u6bb5\u6dfb\u52a0swagger\u6ce8\u89e3            field.addJavaDocLine(\"@ApiModelProperty(value = \\\"\"+remarks+\"\\\")\");        }    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/CommentGenerator.java", "stars": "2", "class": {"name": "CommentGenerator", "extends": "DefaultCommentGenerator", "implements": null, "modifiers": ["public"]}}, {"method_name": "addFieldJavaDoc", "params": ["Field", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addFieldJavaDoc(Field field, String remarks) {        //\u6587\u6863\u6ce8\u91ca\u5f00\u59cb        field.addJavaDocLine(\"/**\");        //\u83b7\u53d6\u6570\u636e\u5e93\u5b57\u6bb5\u7684\u5907\u6ce8\u4fe1\u606f        String[] remarkLines = remarks.split(System.getProperty(\"line.separator\"));        for (String remarkLine : remarkLines) {            field.addJavaDocLine(\" * \" + remarkLine);        }        addJavadocTag(field, false);        field.addJavaDocLine(\" */\");    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/CommentGenerator.java", "stars": "2", "class": {"name": "CommentGenerator", "extends": "DefaultCommentGenerator", "implements": null, "modifiers": ["public"]}}, {"method_name": "addJavaFileComment", "params": ["CompilationUnit"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addJavaFileComment(CompilationUnit compilationUnit) {        super.addJavaFileComment(compilationUnit);        //\u53ea\u5728model\u4e2d\u6dfb\u52a0swagger\u6ce8\u89e3\u7c7b\u7684\u5bfc\u5165        if(!compilationUnit.isJavaInterface()&&!compilationUnit.getType().getFullyQualifiedName().contains(EXAMPLE_SUFFIX)){            compilationUnit.addImportedType(new FullyQualifiedJavaType(API_MODEL_PROPERTY_FULL_CLASS_NAME));        }    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/CommentGenerator.java", "stars": "2", "class": {"name": "CommentGenerator", "extends": "DefaultCommentGenerator", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "passenger_form", "snippet": "    public static passenger_form newInstance(String param1, String param2) {        passenger_form fragment = new passenger_form();        Bundle args = new Bundle();        args.putString(ARG_PARAM1, param1);        args.putString(ARG_PARAM2, param2);        fragment.setArguments(args);        return fragment;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/passenger_form.java", "stars": "2", "class": {"name": "passenger_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            mParam1 = getArguments().getString(ARG_PARAM1);            mParam2 = getArguments().getString(ARG_PARAM2);            no_of_person=Integer.parseInt(mParam1);            b_id = Integer.parseInt(mParam2);        }    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/passenger_form.java", "stars": "2", "class": {"name": "passenger_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        final View view = inflater.inflate(R.layout.fragment_passenger_form, container, false);        pbar = view.findViewById(R.id.progress);        main_layout = view.findViewById(R.id.main_layout);        ((AppCompatActivity)getActivity()).getSupportActionBar().hide();        submit_btn=view.findViewById(R.id.add_btn);        for(int i=0;i<no_of_person;i++)        {            LinearLayout new_form = new LinearLayout(getContext());            new_form.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));            new_form.setOrientation(LinearLayout.VERTICAL);            new_form.setPadding(15,15,15,15);            EditText name= new EditText(getContext());            EditText age= new EditText(getContext());            EditText gender= new EditText(getContext());            TextView title = new TextView(getContext());            title.setText(\"Traveller \"+(i+1));            title.setGravity(Gravity.CENTER);            title.setPadding(5,50,5,50);            name.setTag(\"name_of_user\".concat(String.valueOf(i+1)));            name.setHint(\"Name of traveller \"+(i+1));            name.setPadding(5,50,5,50);            age.setTag(\"age_of_user\".concat(String.valueOf(i+1)));            age.setInputType(InputType.TYPE_CLASS_NUMBER);            age.setPadding(5,50,5,50);            age.setHint(\"Age of traveller \"+(i+1));            gender.setTag(\"gender_of_user\".concat(String.valueOf(i+1)));            gender.setPadding(5,50,5,50);            gender.setHint(\"Gender of traveller \"+(i+1));            new_form.addView(title);            new_form.addView(name);            new_form.addView(age);            new_form.addView(gender);            main_layout.addView(new_form);        }        values=\"\";        submit_btn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                int fl = 0;                for (int i = 0; i < no_of_person; i++) {                    EditText ed_name = new EditText(getContext());                    EditText ed_age = new EditText(getContext());                    EditText ed_gender = new EditText(getContext());                    ed_name = view.findViewWithTag(\"name_of_user\".concat(String.valueOf(i+1)));                    ed_age = view.findViewWithTag(\"age_of_user\".concat(String.valueOf(i+1)));                    ed_gender = view.findViewWithTag(\"gender_of_user\".concat(String.valueOf(i+1)));                    if (ed_name.getText().toString().isEmpty() || ed_age.getText().toString().isEmpty() || ed_gender.getText().toString().isEmpty() ) {                        Toast.makeText(getContext(), \"Fill all the Fields\", Toast.LENGTH_LONG).show();                        fl = 1;                        break;                    }                    if (!ed_age.getText().toString().isEmpty())                    {                        int age;                        age=Integer.parseInt(ed_age.getText().toString());                        if (age == 0 )                        {                            Toast.makeText(getContext(),\"Age cannot be 0 !!!\",Toast.LENGTH_LONG).show();                            fl=1;                            break;                        }                    }                    if (!\"M\".equalsIgnoreCase(ed_gender.getText().toString())) {                        if (!\"F\".equalsIgnoreCase(ed_gender.getText().toString())) {                            if (!\"O\".equalsIgnoreCase(ed_gender.getText().toString())) {                                Toast.makeText(getContext(), \"Gender needs to be M or F or O !!! , for traveller\"+ (i+2), Toast.LENGTH_LONG).show();                                fl = 1;                                break;                            }                        }                    }                }                pbar.setVisibility(View.VISIBLE);                if (fl == 0) {                    for (int i = 0; i < no_of_person; i++) {                        values += \"(\" + b_id + \",\";                        EditText ed_name = new EditText(getContext());                        EditText ed_age = new EditText(getContext());                        EditText ed_gender = new EditText(getContext());                        ed_name = view.findViewWithTag(\"name_of_user\".concat(String.valueOf(i+1)));                        ed_age = view.findViewWithTag(\"age_of_user\".concat(String.valueOf(i+1)));                        ed_gender = view.findViewWithTag(\"gender_of_user\".concat(String.valueOf(i+1)));                        values += \"'\" + ed_name.getText().toString() + \"',\" + ed_age.getText().toString() + \",'\" + ed_gender.getText().toString() + \"')\";                        if (i != no_of_person-1)                        {                            values+=\",\";                        }                    }                    if (!((MainActivity)getActivity()).isNetworkAvailable(getContext()))                    {                        Toast.makeText(getContext(),\"No Internet Connectivity\",Toast.LENGTH_LONG).show();                        getActivity().finish();                    }                    Retrofit retrofit = new Retrofit.Builder().baseUrl(APIUrl.BASE_URL).                            addConverterFactory(GsonConverterFactory.create()).build();                    final APIService service = retrofit.create(APIService.class);                    Call<Result_1> call = service.addpassenger(\"add_passenger\",values);                    call.enqueue(new Callback<Result_1>() {                        @Override                        public void onResponse(Call<Result_1> call, Response<Result_1> response) {                            result_1 =  response.body();                            InputMethodManager imm = (InputMethodManager) getContext().getSystemService(getContext().INPUT_METHOD_SERVICE);                            imm.hideSoftInputFromWindow(view.getWindowToken(),0);                            if (\"true\".equals(result_1.res))                            {                                ((AppCompatActivity)getActivity()).getSupportActionBar().show();                                Toast.makeText(getContext(),\"Booking complete , Enjoy the holidays \",Toast.LENGTH_LONG).show();                                getActivity().getSupportFragmentManager().beginTransaction().                                        replace(R.id.frame_layout,bookings_view.newInstance(),\"bookings_view\").                                        addToBackStack(\"multiple_package\").commit();                            }                            else                            {                                ((AppCompatActivity)getActivity()).getSupportActionBar().show();                                Toast.makeText(getContext(),\"Booking not Completed\",Toast.LENGTH_LONG).show();                                getActivity().getSupportFragmentManager().beginTransaction().                                        replace(R.id.frame_layout,bookings_view.newInstance(),\"bookings_view\").                                        addToBackStack(\"multiple_package\").commit();                            }                        }                        @Override                        public void onFailure(Call<Result_1> call, Throwable t) {                            Log.e(\"Error\", t.getMessage());                        }                    });                }            }        });        return  view;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/passenger_form.java", "stars": "2", "class": {"name": "passenger_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onButtonPressed", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onButtonPressed(Uri uri) {    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/passenger_form.java", "stars": "2", "class": {"name": "passenger_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/passenger_form.java", "stars": "2", "class": {"name": "passenger_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/passenger_form.java", "stars": "2", "class": {"name": "passenger_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void contextLoads() {    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/test/java/com/integration/socket/SocketApplicationTests.java", "stars": "2", "class": {"name": "SocketApplicationTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.drawText(text, 50, 200, paint);        // \u4f7f\u7528 Paint.getTextPath() \u6765\u83b7\u53d6\u6587\u5b57\u7684 Path        paint.getTextPath(text, 0, text.length(), 50, 400, textPath);        canvas.drawPath(textPath, pathPaint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice16TextPathView.java", "stars": "2", "class": {"name": "Practice16TextPathView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint n = 100;\t\t// TODO: sum = 1 + 2 + ... + n\t\tint sum = 0;\t\tfor(int i = 0; i <= n ; i++) {\t\t\tsum += i;\t\t}\t\tSystem.out.println(sum);\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part1/src/com/basic/javapractice/SumOfInteger.java", "stars": "2", "class": {"name": "SumOfInteger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/call_setters_on_nulls_again/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls_again/MyBatisTest.java", "stars": "15", "class": {"name": "MyBatisTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "test", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void test() {    try (SqlSession session = sqlSessionFactory.openSession()) {      ParentBean parentBean = session.selectOne(\"test\");      Assertions.assertEquals(\"p1\", parentBean.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls_again/MyBatisTest.java", "stars": "15", "class": {"name": "MyBatisTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/DatePickerRenderer.java", "stars": "2", "class": {"name": "DatePickerRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/DatePickerRenderer.java", "stars": "2", "class": {"name": "DatePickerRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "rabbitConnectionFactory", "params": ["RabbitProperties", "String"], "throws": null, "modifiers": ["public"], "return_type": "ConnectionFactory", "snippet": "    public ConnectionFactory rabbitConnectionFactory(RabbitProperties rabbitProperties, @Value(\"${spring.application.name}", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rabbitAdmin", "params": ["ConnectionFactory"], "throws": null, "modifiers": ["public"], "return_type": "RabbitAdmin", "snippet": "    public RabbitAdmin rabbitAdmin(ConnectionFactory connectionFactory) {        return new RabbitAdmin(connectionFactory);    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createConsumeQueue", "params": ["RabbitAdmin", "RabbitConfigurationProperties"], "throws": null, "modifiers": ["public"], "return_type": "Queue", "snippet": "    public Queue createConsumeQueue(RabbitAdmin rabbitAdmin, RabbitConfigurationProperties properties) {        Queue consumeQueue = QueueBuilder.durable(properties.getEvent().getQueue()).build();        consumeQueue.setAdminsThatShouldDeclare(rabbitAdmin);        return consumeQueue;    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createDelayedMessageQueue", "params": ["RabbitAdmin", "RabbitConfigurationProperties"], "throws": null, "modifiers": ["public"], "return_type": "Queue", "snippet": "    public Queue createDelayedMessageQueue(RabbitAdmin rabbitAdmin, RabbitConfigurationProperties properties) {        Queue delayedMessageQueue = QueueBuilder.durable(properties.getEvent().getDelayQueue())                .withArgument(\"x-dead-letter-exchange\", \"\")                .withArgument(\"x-dead-letter-routing-key\", properties.getEvent().getQueue())                .withArgument(\"x-queue-mode\", \"lazy\")                .build();        delayedMessageQueue.setAdminsThatShouldDeclare(rabbitAdmin);        return delayedMessageQueue;    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createConsumeExchange", "params": ["RabbitAdmin", "RabbitConfigurationProperties"], "throws": null, "modifiers": ["public"], "return_type": "TopicExchange", "snippet": "    public TopicExchange createConsumeExchange(RabbitAdmin rabbitAdmin, RabbitConfigurationProperties properties) {        TopicExchange exchange = new TopicExchange(properties.getEvent().getExchange());        exchange.setAdminsThatShouldDeclare(rabbitAdmin);        return exchange;    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createQueueExchangeBinding", "params": ["RabbitConfigurationProperties"], "throws": null, "modifiers": ["public"], "return_type": "Binding", "snippet": "    public Binding createQueueExchangeBinding(RabbitConfigurationProperties properties) {        return new Binding(properties.getEvent().getQueue(), Binding.DestinationType.QUEUE, properties.getEvent().getExchange(), \"#\", null);    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mqRetryInterceptor", "params": ["MessageRecoverer", "RabbitConfigurationProperties"], "throws": null, "modifiers": ["public"], "return_type": "RetryOperationsInterceptor", "snippet": "    public RetryOperationsInterceptor mqRetryInterceptor(MessageRecoverer messageRecoverer, RabbitConfigurationProperties configurationProperties) {        return RetryInterceptorBuilder.stateless()                .maxAttempts(configurationProperties.getRetryPolicy().getMaxAttempt())                .backOffOptions(configurationProperties.getRetryPolicy().getInitialInterval(),                        configurationProperties.getRetryPolicy().getMultiplier(),                        configurationProperties.getRetryPolicy().getMaxInterval())                .recoverer(messageRecoverer)                .build();    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jackson2JsonMessageConverter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Jackson2JsonMessageConverter", "snippet": "    public Jackson2JsonMessageConverter jackson2JsonMessageConverter() {        return new Jackson2JsonMessageConverter();    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rabbitTemplate", "params": ["RabbitAdmin", "Jackson2JsonMessageConverter"], "throws": null, "modifiers": ["public"], "return_type": "RabbitTemplate", "snippet": "    public RabbitTemplate rabbitTemplate(RabbitAdmin rabbitAdmin, Jackson2JsonMessageConverter jackson2JsonMessageConverter) {        RabbitTemplate rabbitTemplate = rabbitAdmin.getRabbitTemplate();        rabbitTemplate.setMessageConverter(jackson2JsonMessageConverter);        rabbitTemplate.setChannelTransacted(true);        return rabbitTemplate;    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rabbitListenerContainerFactory", "params": ["ConnectionFactory", "Jackson2JsonMessageConverter", "RetryOperationsInterceptor"], "throws": null, "modifiers": ["public"], "return_type": "RabbitListenerContainerFactory", "snippet": "    public RabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory rabbitConnectionFactory,                                                                         Jackson2JsonMessageConverter jackson2JsonMessageConverter,                                                                         RetryOperationsInterceptor mqRetryInterceptor) {        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();        factory.setConnectionFactory(rabbitConnectionFactory);        factory.setMessageConverter(jackson2JsonMessageConverter);        factory.setAdviceChain(mqRetryInterceptor);        return factory;    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/configuration/RabbitConfiguration.java", "stars": "2", "class": {"name": "RabbitConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onApplicationEvent", "params": ["ApplicationStartedEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onApplicationEvent(ApplicationStartedEvent event) {        this.printStartInfo();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/listener/StartedAwareListener.java", "stars": "1", "class": {"name": "StartedAwareListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "printStartInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void printStartInfo() {        String blogUrl = optionService.getBlogBaseUrl();        log.info(\"Beyond started at         {}\", blogUrl);        log.info(\"Beyond admin started at   {}/{}\", blogUrl, beyondProperties.getAdminPath());        log.info(\"Beyond has started successfully!\");    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/listener/StartedAwareListener.java", "stars": "1", "class": {"name": "StartedAwareListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "initThemes", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initThemes() {        // Whether the blog has initialized    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/listener/StartedAwareListener.java", "stars": "1", "class": {"name": "StartedAwareListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void init(Context context) {        logPath = getFilePath(context) + \"/Logs\";//\u83b7\u5f97\u6587\u4ef6\u50a8\u5b58\u8def\u5f84,\u5728\u540e\u9762\u52a0\"/Logs\"\u5efa\u7acb\u5b50\u6587\u4ef6\u5939    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/LogToFile.java", "stars": "2", "class": {"name": "LogToFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFilePath", "params": ["Context"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String getFilePath(Context context) {        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) || !Environment.isExternalStorageRemovable()) {            /**             * \u5982\u679c\u5916\u90e8\u50a8\u5b58\u53ef\u7528             *             * \u83b7\u5f97\u5916\u90e8\u5b58\u50a8\u8def\u5f84,\u9ed8\u8ba4\u8def\u5f84\u4e3a             * /storage/emulated/0/Android/data/com.waka.workspace.logtofile/files/Logs/log_2018-09-06_16-15-09.log             */            return context.getExternalFilesDir(null).getPath();        } else {            return context.getFilesDir().getPath();//\u76f4\u63a5\u5b58\u5728/data/data\u91cc\uff0c\u975eroot\u624b\u673a\u662f\u770b\u4e0d\u5230\u7684        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/LogToFile.java", "stars": "2", "class": {"name": "LogToFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "v", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void v(String tag, String msg) {        if (DEBUG_FLAG) {            writeToFile(VERBOSE, tag, msg);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/LogToFile.java", "stars": "2", "class": {"name": "LogToFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "d", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void d(String tag, String msg) {        if (DEBUG_FLAG) {            writeToFile(DEBUG, tag, msg);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/LogToFile.java", "stars": "2", "class": {"name": "LogToFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "i", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void i(String tag, String msg) {        if (DEBUG_FLAG) {            writeToFile(INFO, tag, msg);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/LogToFile.java", "stars": "2", "class": {"name": "LogToFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "w", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void w(String tag, String msg) {        if (DEBUG_FLAG) {            writeToFile(WARN, tag, msg);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/LogToFile.java", "stars": "2", "class": {"name": "LogToFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "e", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void e(String tag, String msg) {        if (DEBUG_FLAG) {            writeToFile(ERROR, tag, msg);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/LogToFile.java", "stars": "2", "class": {"name": "LogToFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeToFile", "params": ["char", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void writeToFile(char type, String tag, String msg) {        if (null == logPath) {            Log.e(TAG, \"logPath == null \uff0c\u672a\u521d\u59cb\u5316LogToFile\");            return;        }        //log\u65e5\u5fd7\u540d\uff0c\u4f7f\u7528\u65f6\u95f4\u547d\u540d\uff0c\u4fdd\u8bc1\u4e0d\u91cd\u590d        String fileName = logPath + \"/log_\" + dateFormat.format(new Date()) + \".log\";        //log\u65e5\u5fd7\u5185\u5bb9\uff0c\u53ef\u4ee5\u81ea\u884c\u5b9a\u5236        String log = dateFormat.format(date) + \" \" + type + \" \" + tag + \" \" + msg + \"\\n\";        //\u5982\u679c\u7236\u8def\u5f84\u4e0d\u5b58\u5728        File file = new File(logPath);        if (!file.exists()) {            file.mkdirs();//\u521b\u5efa\u7236\u8def\u5f84        }        FileOutputStream fos = null;        BufferedWriter bw = null;        try {            //\u8fd9\u91cc\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4ee3\u8868\u8ffd\u52a0\u8fd8\u662f\u8986\u76d6\uff0ctrue\u4e3a\u8ffd\u52a0\uff0cflase\u4e3a\u8986\u76d6            fos = new FileOutputStream(fileName, true);            bw = new BufferedWriter(new OutputStreamWriter(fos));            bw.write(log);        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                if (bw != null) {                    bw.close();                }            } catch (IOException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/LogToFile.java", "stars": "2", "class": {"name": "LogToFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        try(final BufferedReader reader = new BufferedReader(                new FileReader(new File(\"file.txt\")))) {            String s;            while ((s = reader.readLine()) != null)                System.out.println(s);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab6/src/test/java/InputStreamTest.java", "stars": "2", "class": {"name": "InputStreamTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "interpreter", "params": ["HashMap<String,Integer>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int interpreter(HashMap<String, Integer> var) {\t\treturn var.get(this.key);\t}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/interpreter/VarExpression.java", "stars": "2", "class": {"name": "VarExpression", "extends": null, "implements": ["Expression"], "modifiers": ["public"]}}, {"method_name": "shouldTestCacheKeysEqual", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldTestCacheKeysEqual() {    Date date = new Date();    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });    assertEquals(key1, key2);    assertEquals(key2, key1);    assertEquals(key1.hashCode(), key2.hashCode());    assertEquals(key1.toString(), key2.toString());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/CacheKeyTest.java", "stars": "15", "class": {"name": "CacheKeyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldTestCacheKeysNotEqualDueToDateDifference", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTestCacheKeysNotEqualDueToDateDifference() throws Exception {    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });    Thread.sleep(1000);    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });    assertNotEquals(key1, key2);    assertNotEquals(key2, key1);    assertNotEquals(key1.hashCode(), key2.hashCode());    assertNotEquals(key1.toString(), key2.toString());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/CacheKeyTest.java", "stars": "15", "class": {"name": "CacheKeyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldTestCacheKeysNotEqualDueToOrder", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTestCacheKeysNotEqualDueToOrder() throws Exception {    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null });    Thread.sleep(1000);    CacheKey key2 = new CacheKey(new Object[] { 1, null, \"hello\" });    assertNotEquals(key1, key2);    assertNotEquals(key2, key1);    assertNotEquals(key1.hashCode(), key2.hashCode());    assertNotEquals(key1.toString(), key2.toString());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/CacheKeyTest.java", "stars": "15", "class": {"name": "CacheKeyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldDemonstrateEmptyAndNullKeysAreEqual", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateEmptyAndNullKeysAreEqual() {    CacheKey key1 = new CacheKey();    CacheKey key2 = new CacheKey();    assertEquals(key1, key2);    assertEquals(key2, key1);    key1.update(null);    key2.update(null);    assertEquals(key1, key2);    assertEquals(key2, key1);    key1.update(null);    key2.update(null);    assertEquals(key1, key2);    assertEquals(key2, key1);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/CacheKeyTest.java", "stars": "15", "class": {"name": "CacheKeyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldTestCacheKeysWithBinaryArrays", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldTestCacheKeysWithBinaryArrays() {    byte[] array1 = new byte[] { 1 };    byte[] array2 = new byte[] { 1 };    CacheKey key1 = new CacheKey(new Object[] { array1 });    CacheKey key2 = new CacheKey(new Object[] { array2 });    assertEquals(key1, key2);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/CacheKeyTest.java", "stars": "15", "class": {"name": "CacheKeyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "serializationExceptionTest", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void serializationExceptionTest() {    CacheKey cacheKey = new CacheKey();    cacheKey.update(new Object());    Assertions.assertThrows(NotSerializableException.class, () -> {      serialize(cacheKey);    });  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/CacheKeyTest.java", "stars": "15", "class": {"name": "CacheKeyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "serializationTest", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void serializationTest() throws Exception {    CacheKey cacheKey = new CacheKey();    cacheKey.update(\"serializable\");    Assertions.assertEquals(cacheKey, serialize(cacheKey));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/CacheKeyTest.java", "stars": "15", "class": {"name": "CacheKeyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "serialize", "params": ["T"], "throws": ["Exception"], "modifiers": ["private", "static"], "return_type": "T", "snippet": "  private static <T> T serialize(T object) throws Exception {      ByteArrayOutputStream baos = new ByteArrayOutputStream();      new ObjectOutputStream(baos).writeObject(object);      ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());      return (T) new ObjectInputStream(bais).readObject();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/CacheKeyTest.java", "stars": "15", "class": {"name": "CacheKeyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(String s) {        this.value = s;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/StringTag.java", "stars": "2", "class": {"name": "StringTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/StringTag.java", "stars": "2", "class": {"name": "StringTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/StringTag.java", "stars": "2", "class": {"name": "StringTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/StringTag.java", "stars": "2", "class": {"name": "StringTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "writeData", "params": ["DataOutputStream"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeData(DataOutputStream dos) throws IOException {        // Indicates the string        dos.write(1);        //Create a new DataOutputStream        ByteArrayOutputStream os = new ByteArrayOutputStream();        CountingOutputStream cos = new CountingOutputStream(os);        DataOutputStream tempDos = new DataOutputStream(cos);        tempDos.writeShort(name.getBytes(StandardCharsets.UTF_8).length);        tempDos.write(name.getBytes(StandardCharsets.UTF_8));        tempDos.write(value.getBytes(StandardCharsets.UTF_8));        dos.writeInt(cos.getCount());        dos.write(os.toByteArray());        cos.close();        os.close();        tempDos.close();    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/StringTag.java", "stars": "2", "class": {"name": "StringTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "createFromData", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "Tag<String>", "snippet": "    public Tag<String> createFromData(byte[] value) {        this.value = new String(value, StandardCharsets.UTF_8);        return this;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/StringTag.java", "stars": "2", "class": {"name": "StringTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte getID() {        return 1;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/StringTag.java", "stars": "2", "class": {"name": "StringTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "simpleProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void simpleProperty() {    Map<String, String> result = new ParameterExpression(\"id\");    Assertions.assertEquals(1, result.size());    Assertions.assertEquals(\"id\", result.get(\"property\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "propertyWithSpacesInside", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void propertyWithSpacesInside() {    Map<String, String> result = new ParameterExpression(\" with spaces \");    Assertions.assertEquals(1, result.size());    Assertions.assertEquals(\"with spaces\", result.get(\"property\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "simplePropertyWithOldStyleJdbcType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void simplePropertyWithOldStyleJdbcType() {    Map<String, String> result = new ParameterExpression(\"id:VARCHAR\");    Assertions.assertEquals(2, result.size());    Assertions.assertEquals(\"id\", result.get(\"property\"));    Assertions.assertEquals(\"VARCHAR\", result.get(\"jdbcType\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "oldStyleJdbcTypeWithExtraWhitespaces", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void oldStyleJdbcTypeWithExtraWhitespaces() {    Map<String, String> result = new ParameterExpression(\" id :  VARCHAR \");    Assertions.assertEquals(2, result.size());    Assertions.assertEquals(\"id\", result.get(\"property\"));    Assertions.assertEquals(\"VARCHAR\", result.get(\"jdbcType\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "expressionWithOldStyleJdbcType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void expressionWithOldStyleJdbcType() {    Map<String, String> result = new ParameterExpression(\"(id.toString()):VARCHAR\");    Assertions.assertEquals(2, result.size());    Assertions.assertEquals(\"id.toString()\", result.get(\"expression\"));    Assertions.assertEquals(\"VARCHAR\", result.get(\"jdbcType\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "simplePropertyWithOneAttribute", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void simplePropertyWithOneAttribute() {    Map<String, String> result = new ParameterExpression(\"id,name=value\");    Assertions.assertEquals(2, result.size());    Assertions.assertEquals(\"id\", result.get(\"property\"));    Assertions.assertEquals(\"value\", result.get(\"name\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "expressionWithOneAttribute", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void expressionWithOneAttribute() {    Map<String, String> result = new ParameterExpression(\"(id.toString()),name=value\");    Assertions.assertEquals(2, result.size());    Assertions.assertEquals(\"id.toString()\", result.get(\"expression\"));    Assertions.assertEquals(\"value\", result.get(\"name\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "simplePropertyWithManyAttributes", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void simplePropertyWithManyAttributes() {    Map<String, String> result = new ParameterExpression(\"id, attr1=val1, attr2=val2, attr3=val3\");    Assertions.assertEquals(4, result.size());    Assertions.assertEquals(\"id\", result.get(\"property\"));    Assertions.assertEquals(\"val1\", result.get(\"attr1\"));    Assertions.assertEquals(\"val2\", result.get(\"attr2\"));    Assertions.assertEquals(\"val3\", result.get(\"attr3\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "expressionWithManyAttributes", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void expressionWithManyAttributes() {    Map<String, String> result = new ParameterExpression(\"(id.toString()), attr1=val1, attr2=val2, attr3=val3\");    Assertions.assertEquals(4, result.size());    Assertions.assertEquals(\"id.toString()\", result.get(\"expression\"));    Assertions.assertEquals(\"val1\", result.get(\"attr1\"));    Assertions.assertEquals(\"val2\", result.get(\"attr2\"));    Assertions.assertEquals(\"val3\", result.get(\"attr3\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "simplePropertyWithOldStyleJdbcTypeAndAttributes", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void simplePropertyWithOldStyleJdbcTypeAndAttributes() {    Map<String, String> result = new ParameterExpression(\"id:VARCHAR, attr1=val1, attr2=val2\");    Assertions.assertEquals(4, result.size());    Assertions.assertEquals(\"id\", result.get(\"property\"));    Assertions.assertEquals(\"VARCHAR\", result.get(\"jdbcType\"));    Assertions.assertEquals(\"val1\", result.get(\"attr1\"));    Assertions.assertEquals(\"val2\", result.get(\"attr2\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "simplePropertyWithSpaceAndManyAttributes", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void simplePropertyWithSpaceAndManyAttributes() {    Map<String, String> result = new ParameterExpression(\"user name, attr1=val1, attr2=val2, attr3=val3\");    Assertions.assertEquals(4, result.size());    Assertions.assertEquals(\"user name\", result.get(\"property\"));    Assertions.assertEquals(\"val1\", result.get(\"attr1\"));    Assertions.assertEquals(\"val2\", result.get(\"attr2\"));    Assertions.assertEquals(\"val3\", result.get(\"attr3\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldIgnoreLeadingAndTrailingSpaces", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldIgnoreLeadingAndTrailingSpaces() {    Map<String, String> result = new ParameterExpression(\" id , jdbcType =  VARCHAR,  attr1 = val1 ,  attr2 = val2 \");    Assertions.assertEquals(4, result.size());    Assertions.assertEquals(\"id\", result.get(\"property\"));    Assertions.assertEquals(\"VARCHAR\", result.get(\"jdbcType\"));    Assertions.assertEquals(\"val1\", result.get(\"attr1\"));    Assertions.assertEquals(\"val2\", result.get(\"attr2\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "invalidOldJdbcTypeFormat", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void invalidOldJdbcTypeFormat() {    try {      new ParameterExpression(\"id:\");      Assertions.fail();    } catch (BuilderException e) {      Assertions.assertTrue(e.getMessage().contains(\"Parsing error in {id:} in position 3\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "invalidJdbcTypeOptUsingExpression", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void invalidJdbcTypeOptUsingExpression() {    try {      new ParameterExpression(\"(expression)+\");      Assertions.fail();    } catch (BuilderException e) {      Assertions.assertTrue(e.getMessage().contains(\"Parsing error in {(expression)+} in position 12\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ParameterExpressionTest.java", "stars": "15", "class": {"name": "ParameterExpressionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPlayManager", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "IPlayerManager", "snippet": "    protected IPlayerManager getPlayManager() {        return new IjkPlayerManager();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "backFromWindowFull", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean backFromWindowFull(Context context, String key) {        boolean backFrom = false;        ViewGroup vp = (ViewGroup) (CommonUtil.scanForActivity(context)).findViewById(Window.ID_ANDROID_CONTENT);        View oldF = vp.findViewById(FULLSCREEN_ID);        if (oldF != null) {            backFrom = true;            hideNavKey(context);            if (getCustomManager(key).lastListener() != null) {                getCustomManager(key).lastListener().onBackFullscreen();            }        }        return backFrom;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseAllVideos", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void releaseAllVideos(String key) {        if (getCustomManager(key).listener() != null) {            getCustomManager(key).listener().onCompletion();        }        getCustomManager(key).releaseMediaPlayer();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause(String key) {        if (getCustomManager(key).listener() != null) {            getCustomManager(key).listener().onVideoPause();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume(String key) {        if (getCustomManager(key).listener() != null) {            getCustomManager(key).listener().onVideoResume();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume(String key, boolean seek) {        if (getCustomManager(key).listener() != null) {            getCustomManager(key).listener().onVideoResume(seek);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "instance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "Map<String,CustomManager>", "snippet": "    public static synchronized Map<String, CustomManager> instance() {        return sMap;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCustomManager", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "CustomManager", "snippet": "    public static synchronized CustomManager getCustomManager(String key) {        if (TextUtils.isEmpty(key)) {            throw new IllegalStateException(\"key not be empty\");        }        CustomManager customManager = sMap.get(key);        if (customManager == null) {            customManager = new CustomManager();            sMap.put(key, customManager);        }        return customManager;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPauseAll", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onPauseAll() {        if (sMap.size() > 0) {            for (Map.Entry<String, CustomManager> header : sMap.entrySet()) {                header.getValue().onPause(header.getKey());            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResumeAll", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onResumeAll() {        if (sMap.size() > 0) {            for (Map.Entry<String, CustomManager> header : sMap.entrySet()) {                header.getValue().onResume(header.getKey());            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResumeAll", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onResumeAll(boolean seek) {        if (sMap.size() > 0) {            for (Map.Entry<String, CustomManager> header : sMap.entrySet()) {                header.getValue().onResume(header.getKey(), seek);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "clearAllVideo", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void clearAllVideo() {        if (sMap.size() > 0) {            for (Map.Entry<String, CustomManager> header : sMap.entrySet()) {                CustomManager.releaseAllVideos(header.getKey());            }        }        sMap.clear();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeManager", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void removeManager(String key) {        sMap.remove(key);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "isFullState", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isFullState(Activity activity) {        ViewGroup vp = (ViewGroup) (CommonUtil.scanForActivity(activity)).findViewById(Window.ID_ANDROID_CONTENT);        final View full = vp.findViewById(FULLSCREEN_ID);        GSYVideoPlayer gsyVideoPlayer = null;        if (full != null) {            gsyVideoPlayer = (GSYVideoPlayer) full;        }        return gsyVideoPlayer != null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/manager/CustomManager.java", "stars": "2", "class": {"name": "CustomManager", "extends": "GSYVideoBaseManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDismiss", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDismiss (android.support.v7.widget.PopupMenu p0)\t{\t\tn_onDismiss (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/PopupMenu_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "PopupMenu_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDismiss", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDismiss (android.support.v7.widget.PopupMenu p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/PopupMenu_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "PopupMenu_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/PopupMenu_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "PopupMenu_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/PopupMenu_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "PopupMenu_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        View view = inflater.inflate(R.layout.fragment_show_timer, container, false);        croreDigit = view.findViewById(R.id.crore_digit);        tenLakhDigit = view.findViewById(R.id.ten_lakh_digit);        lakhDigit = view.findViewById(R.id.lakh_digit);        tenThousandDigit = view.findViewById(R.id.ten_thousand_digit);        thousandDigit = view.findViewById(R.id.thousand_digit);        hundredDigit = view.findViewById(R.id.hundred_digit);        tensDigit = view.findViewById(R.id.tens_digit);        onesDigit = view.findViewById(R.id.ones_digit);        minRemainingTextView = view.findViewById(R.id.min_remaining_text_view);        secRemainingTextView = view.findViewById(R.id.sec_remaining_text_view);        try {            pref = getActivity().getSharedPreferences(SHARED_PREFERENCE_NAME, 0);        } catch(Exception e){            Toast.makeText(getActivity(), \"Oops! Please restart the app\", Toast.LENGTH_SHORT).show();        }        Long destinationTime = pref.getLong(DESTINATION_TIME_KEY, 0);        startMinsSecTimer(destinationTime);        startHrsTimer(destinationTime);        return view;    }", "url": "https://raw.githubusercontent.com/LakshyaKhatri/Lifetime/master/app/src/main/java/com/compiletales/lifetime/ShowTimerFragment.java", "stars": "2", "class": {"name": "ShowTimerFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "startHrsTimer", "params": ["Long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startHrsTimer(final Long destinationTime){        final Handler handler = new Handler();        Runnable runnable = new Runnable() {            @Override            public void run() {                handler.postDelayed(this, 1000);                try{                    Long currentTime = new Date().getTime();                    Long remainingTime = destinationTime - currentTime;                    if(remainingTime > 0){                        Long forCalculatingTime = remainingTime;                        Long days = forCalculatingTime / (24 * 60 * 60 * 1000);                        forCalculatingTime -= days * (24 * 60 * 60 * 1000);                        Long hrs = forCalculatingTime / (60 * 60 * 1000);                        forCalculatingTime -= hrs * (60 * 60 * 1000);                        //we don't have to display days.                        //hence converting days to hrs/                        hrs = hrs + days * 24;                        String hrsString = hrs + \"\";                        int hrsStringLength = hrsString.length();                        switch(hrsStringLength){                            case 1:                                tensDigit.smoothScrollToPosition(0);                            case 2:                                hundredDigit.smoothScrollToPosition(0);                            case 3:                                thousandDigit.smoothScrollToPosition(0);                            case 4:                                tenThousandDigit.smoothScrollToPosition(0);                            case 5:                                lakhDigit.smoothScrollToPosition(0);                            case 6:                                tenLakhDigit.smoothScrollToPosition(0);                            case 7:                                croreDigit.smoothScrollToPosition(0);                        }                        switch(hrsStringLength) {                            case 8:                                croreDigit.smoothScrollToPosition(Character.getNumericValue(hrsString.charAt(hrsStringLength - 8)));                            case 7:                                tenLakhDigit.smoothScrollToPosition(Character.getNumericValue(hrsString.charAt(hrsStringLength - 7)));                            case 6:                                lakhDigit.smoothScrollToPosition(Character.getNumericValue(hrsString.charAt(hrsStringLength - 6)));                            case 5:                                tenThousandDigit.smoothScrollToPosition(Character.getNumericValue(hrsString.charAt(hrsStringLength - 5)));                            case 4:                                thousandDigit.smoothScrollToPosition(Character.getNumericValue(hrsString.charAt(hrsStringLength - 4)));                            case 3:                                hundredDigit.smoothScrollToPosition(Character.getNumericValue(hrsString.charAt(hrsStringLength - 3)));                            case 2:                                tensDigit.smoothScrollToPosition(Character.getNumericValue(hrsString.charAt(hrsStringLength - 2)));                            case 1:                                onesDigit.smoothScrollToPosition(Character.getNumericValue(hrsString.charAt(hrsStringLength - 1)));                        }                    }                } catch (Exception e){                    e.printStackTrace();                }            }        };        handler.postDelayed(runnable, 1 * 1000);    }", "url": "https://raw.githubusercontent.com/LakshyaKhatri/Lifetime/master/app/src/main/java/com/compiletales/lifetime/ShowTimerFragment.java", "stars": "2", "class": {"name": "ShowTimerFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "startMinsSecTimer", "params": ["Long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startMinsSecTimer(final Long destinationTime){        final Handler handler = new Handler();        Runnable runnable = new Runnable() {            @Override            public void run() {                handler.postDelayed(this, 1000);                try{                    Long currentTime = new Date().getTime();                    Long remainingTime = destinationTime - currentTime;                    if(remainingTime > 0){                        Long forCalculatingTime = remainingTime;                        Long days = forCalculatingTime / (24 * 60 * 60 * 1000);                        forCalculatingTime -= days * (24 * 60 * 60 * 1000);                        Long hrs = forCalculatingTime / (60 * 60 * 1000);                        forCalculatingTime -= hrs * (60 * 60 * 1000);                        Long min = forCalculatingTime / (60 * 1000);                        forCalculatingTime -= min * (60 * 1000);                        Long sec = forCalculatingTime / 1000;                        if (sec < 10){                            secRemainingTextView.setText(String.format(\"0%s\", sec));                        } else {                            secRemainingTextView.setText(String.format(\"%s\", sec));                        }                        if (min < 10) {                            minRemainingTextView.setText(String.format(\"0%s\", min));                        } else {                            minRemainingTextView.setText(String.format(\"%s\", min));                        }                    } else {                        Toast.makeText(getActivity(), \"Timer ended\", Toast.LENGTH_LONG).show();                        getActivity().getSupportFragmentManager().beginTransaction()                                .replace(R.id.fragment_container_frame_layout, new SetTimerFragment()).commit();                        pref.edit().putLong(DESTINATION_TIME_KEY, Long.parseLong(\"-1\")).apply();                        startActivity(new Intent(getActivity(), TimerEndActivity.class));                    }                } catch (Exception e){                    e.printStackTrace();                }            }        };        handler.postDelayed(runnable, 1 * 1000);    }", "url": "https://raw.githubusercontent.com/LakshyaKhatri/Lifetime/master/app/src/main/java/com/compiletales/lifetime/ShowTimerFragment.java", "stars": "2", "class": {"name": "ShowTimerFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSpriteForSide", "params": ["Direction", "BlockRenderView", "BlockState", "BlockPos", "Random"], "throws": null, "modifiers": ["public"], "return_type": "Sprite", "snippet": "\tpublic Sprite getSpriteForSide(Direction side, BlockRenderView view, BlockState state, BlockPos pos, Random random) {\t\tboolean left = testLeft(view, side, pos, state);\t\tboolean right = testRight(view, side, pos, state);\t\tboolean down = testDown(view, side, pos, state);\t\tboolean up = testUp(view, side, pos, state);\t\tif(left && right) {\t\t\treturn connects[1];\t\t} else if(left && !right) {\t\t\treturn connects[2];\t\t} else if(!left && right) {\t\t\treturn connects[0];\t\t} else if(down && up) {\t\t\treturn connects[5];\t\t} else if(down && !up) {\t\t\treturn connects[6];\t\t} else if(!down && up) {\t\t\treturn connects[4];\t\t} else {\t\t\treturn connects[3];\t\t}\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/sprite/HorizontalVerticalCTMSpriteProvider.java", "stars": "3", "class": {"name": "HorizontalVerticalCTMSpriteProvider", "extends": "ConnectingSpriteProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatabase", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDatabase() {\t\treturn database;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/conf/VManagerConfig.java", "stars": "29", "class": {"name": "VManagerConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDatabase", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDatabase(String database) {\t\tthis.database = database;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/conf/VManagerConfig.java", "stars": "29", "class": {"name": "VManagerConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCreate() {        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "RecommendationContentProvider", "extends": "ContentProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "openFile", "params": ["Uri", "String"], "throws": ["FileNotFoundException"], "modifiers": ["public"], "return_type": "ParcelFileDescriptor", "snippet": "    public ParcelFileDescriptor openFile(Uri uri, String mode)            throws FileNotFoundException {        ParcelFileDescriptor[] pipe = null;        String url = uri.getPath();        try {            String decodedUrl = URLDecoder.decode(url.replaceFirst(\"/\", \"\"),                    \"UTF-8\");            pipe = ParcelFileDescriptor.createPipe();            Request request = new Builder()                    .url(new URL(decodedUrl))                    .build();            Response response = getOkHttpClient().newCall(request)                    .execute();            new TransferThread(response.body().byteStream(),                    new ParcelFileDescriptor.AutoCloseOutputStream(pipe[1]))                    .start();        } catch (IOException e) {            Log.e(getClass().getSimpleName(), \"Exception opening pipe\", e);            throw new FileNotFoundException(\"Could not open pipe for: \"                    + uri.toString());        }        return (pipe[0]);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "RecommendationContentProvider", "extends": "ContentProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "query", "params": ["Uri", "String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Cursor", "snippet": "    public Cursor query(Uri uri, String[] projection, String selection,                        String[] selectionArgs, String sortOrder) {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "RecommendationContentProvider", "extends": "ContentProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType(Uri uri) {        return \"image/*\";    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "RecommendationContentProvider", "extends": "ContentProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "insert", "params": ["Uri", "ContentValues"], "throws": null, "modifiers": ["public"], "return_type": "Uri", "snippet": "    public Uri insert(Uri uri, ContentValues values) {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "RecommendationContentProvider", "extends": "ContentProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["Uri", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int delete(Uri uri, String selection, String[] selectionArgs) {        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "RecommendationContentProvider", "extends": "ContentProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["Uri", "ContentValues", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int update(Uri uri, ContentValues values, String selection,                      String[] selectionArgs) {        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "RecommendationContentProvider", "extends": "ContentProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOkHttpClient", "params": [], "throws": null, "modifiers": ["private"], "return_type": "OkHttpClient", "snippet": "    private OkHttpClient getOkHttpClient() {        init();        return client;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "RecommendationContentProvider", "extends": "ContentProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        if (!initialized) {            TVButterApplication.getAppContext()                    .getComponent()                    .inject(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "RecommendationContentProvider", "extends": "ContentProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            byte[] buf = new byte[8192];            int len;            try {                while ((len = in.read(buf)) > 0) {                    out.write(buf, 0, len);                }                in.close();                out.flush();                out.close();            } catch (IOException e) {                Log.e(getClass().getSimpleName(),                        \"Exception transferring file\", e);            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationContentProvider.java", "stars": "4", "class": {"name": "TransferThread", "extends": "Thread", "implements": null, "modifiers": ["static"]}}, {"method_name": "shouldGetUrlForResource", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUrlForResource() throws Exception {    URL url = Resources.getResourceURL(JPETSTORE_PROPERTIES);    assertTrue(url.toString().endsWith(\"jpetstore/jpetstore-hsqldb.properties\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetUrlAsProperties", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUrlAsProperties() throws Exception {    URL url = Resources.getResourceURL(CLASS_LOADER, JPETSTORE_PROPERTIES);    Properties props = Resources.getUrlAsProperties(url.toString());    assertNotNull(props.getProperty(\"driver\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResourceAsProperties", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetResourceAsProperties() throws Exception {    Properties props = Resources.getResourceAsProperties(CLASS_LOADER, JPETSTORE_PROPERTIES);    assertNotNull(props.getProperty(\"driver\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetUrlAsStream", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUrlAsStream() throws Exception {    URL url = Resources.getResourceURL(CLASS_LOADER, JPETSTORE_PROPERTIES);    try (InputStream in = Resources.getUrlAsStream(url.toString())) {      assertNotNull(in);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetUrlAsReader", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUrlAsReader() throws Exception {    URL url = Resources.getResourceURL(CLASS_LOADER, JPETSTORE_PROPERTIES);    try (Reader in = Resources.getUrlAsReader(url.toString())) {      assertNotNull(in);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResourceAsStream", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetResourceAsStream() throws Exception {    try (InputStream in = Resources.getResourceAsStream(CLASS_LOADER, JPETSTORE_PROPERTIES)) {      assertNotNull(in);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResourceAsReader", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetResourceAsReader() throws Exception {    try(Reader in = Resources.getResourceAsReader(CLASS_LOADER, JPETSTORE_PROPERTIES)) {      assertNotNull(in);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResourceAsFile", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetResourceAsFile() throws Exception {    File file = Resources.getResourceAsFile(JPETSTORE_PROPERTIES);    assertTrue(file.getAbsolutePath().replace('\\\\', '/').endsWith(\"jpetstore/jpetstore-hsqldb.properties\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResourceAsFileWithClassloader", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetResourceAsFileWithClassloader() throws Exception {    File file = Resources.getResourceAsFile(CLASS_LOADER, JPETSTORE_PROPERTIES);    assertTrue(file.getAbsolutePath().replace('\\\\', '/').endsWith(\"jpetstore/jpetstore-hsqldb.properties\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResourceAsPropertiesWithOutClassloader", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetResourceAsPropertiesWithOutClassloader() throws Exception {    Properties file = Resources.getResourceAsProperties(JPETSTORE_PROPERTIES);    assertNotNull(file);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResourceAsPropertiesWithClassloader", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetResourceAsPropertiesWithClassloader() throws Exception {    Properties file = Resources.getResourceAsProperties(CLASS_LOADER, JPETSTORE_PROPERTIES);    assertNotNull(file);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldAllowDefaultClassLoaderToBeSet", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAllowDefaultClassLoaderToBeSet() {    Resources.setDefaultClassLoader(this.getClass().getClassLoader());    assertEquals(this.getClass().getClassLoader(), Resources.getDefaultClassLoader());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldAllowDefaultCharsetToBeSet", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAllowDefaultCharsetToBeSet() {    Resources.setCharset(Charset.defaultCharset());    assertEquals(Charset.defaultCharset(), Resources.getCharset());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetClassForName", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetClassForName() throws Exception {    Class<?> clazz = Resources.classForName(ResourcesTest.class.getName());    assertNotNull(clazz);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldNotFindThisClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldNotFindThisClass() {    Assertions.assertThrows(ClassNotFoundException.class,        () -> Resources.classForName(\"some.random.class.that.does.not.Exist\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetReader", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetReader() throws IOException {    // save the value    Charset charset = Resources.getCharset();    // charset    Resources.setCharset(Charset.forName(\"US-ASCII\"));    assertNotNull(Resources.getResourceAsReader(JPETSTORE_PROPERTIES));    // no charset    Resources.setCharset(null);    assertNotNull(Resources.getResourceAsReader(JPETSTORE_PROPERTIES));    // clean up    Resources.setCharset(charset);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetReaderWithClassLoader", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetReaderWithClassLoader() throws IOException {    // save the value    Charset charset = Resources.getCharset();    // charset    Resources.setCharset(Charset.forName(\"US-ASCII\"));    assertNotNull(Resources.getResourceAsReader(getClass().getClassLoader(), JPETSTORE_PROPERTIES));    // no charset    Resources.setCharset(null);    assertNotNull(Resources.getResourceAsReader(getClass().getClassLoader(), JPETSTORE_PROPERTIES));    // clean up    Resources.setCharset(charset);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "stupidJustForCoverage", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void stupidJustForCoverage() {    assertNotNull(new Resources());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResourcesTest.java", "stars": "15", "class": {"name": "ResourcesTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldShowProgressiveErrorContextBuilding", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldShowProgressiveErrorContextBuilding() {    ErrorContext context = ErrorContext.instance();    context.resource(\"somefile.xml\").activity(\"some activity\").object(\"some object\").message(\"Here's more info.\");    context.toString().startsWith(\"### The error occurred in somefile.xml.\");    context.reset();    context.activity(\"some activity\").object(\"some object\").message(\"Here's more info.\");    context.toString().startsWith(\"### The error occurred while some activity.\");    context.reset();    context.object(\"some object\").message(\"Here's more info.\");    context.toString().startsWith(\"### Check some object.\");    context.reset();    context.message(\"Here's more info.\");    context.toString().startsWith(\"### Here's more info.\");    context.reset();    context.cause(new Exception(\"test\"));    context.toString().startsWith(\"### Cause: java.lang.Exception: test\");    context.reset();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ErrorContextTest.java", "stars": "15", "class": {"name": "ErrorContextTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "verifyStoreRecall", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void verifyStoreRecall() throws Exception {    ErrorContext outer = ErrorContext.instance();    ErrorContext inner = ErrorContext.instance().store();    assertEquals(inner, ErrorContext.instance());    ErrorContext recalled = ErrorContext.instance().recall();    assertEquals(outer, recalled);    assertEquals(outer, ErrorContext.instance());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ErrorContextTest.java", "stars": "15", "class": {"name": "ErrorContextTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHome", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHome() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tnew TestRestTemplate(\"user\", \"password\").getForEntity(\"http://localhost:\" + this.port, Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody().get(\"message\")).isEqualTo(\"Hello Phil\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMetrics", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testMetrics() {\t\ttestHome(); // makes sure some requests have been made\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(new TestRestTemplate()\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/actuator/metrics\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHealth", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHealth() {\t\tResponseEntity<String> entity = new TestRestTemplate().withBasicAuth(\"user\", \"password\")\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/actuator/health\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(\"\\\"status\\\":\\\"UP\\\"\");\t\tassertThat(entity.getBody()).contains(\"\\\"example\\\"\");\t\tassertThat(entity.getBody()).contains(\"\\\"counter\\\":42\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testErrorPage", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testErrorPage() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(new TestRestTemplate(\"user\", \"password\")\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/error\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody().get(\"status\")).isEqualTo(999);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asMapEntity", "params": ["ResponseEntity<Map>"], "throws": null, "modifiers": ["static"], "return_type": "ResponseEntity<Map>", "snippet": "\tstatic <K, V> ResponseEntity<Map<K, V>> asMapEntity(ResponseEntity<Map> entity) {\t\treturn (ResponseEntity) entity;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onLoadingStarted", "params": ["String", "View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLoadingStarted(String imageUri, View view) {\t\t// Empty implementation\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/SimpleImageLoadingListener.java", "stars": "74", "class": {"name": "SimpleImageLoadingListener", "extends": null, "implements": ["ImageLoadingListener"], "modifiers": ["public"]}}, {"method_name": "onLoadingFailed", "params": ["String", "View", "FailReason"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLoadingFailed(String imageUri, View view, FailReason failReason) {\t\t// Empty implementation\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/SimpleImageLoadingListener.java", "stars": "74", "class": {"name": "SimpleImageLoadingListener", "extends": null, "implements": ["ImageLoadingListener"], "modifiers": ["public"]}}, {"method_name": "onLoadingComplete", "params": ["String", "View", "Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\t\t// Empty implementation\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/SimpleImageLoadingListener.java", "stars": "74", "class": {"name": "SimpleImageLoadingListener", "extends": null, "implements": ["ImageLoadingListener"], "modifiers": ["public"]}}, {"method_name": "onLoadingCancelled", "params": ["String", "View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLoadingCancelled(String imageUri, View view) {\t\t// Empty implementation\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/SimpleImageLoadingListener.java", "stars": "74", "class": {"name": "SimpleImageLoadingListener", "extends": null, "implements": ["ImageLoadingListener"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/bringrags/SimpleChildObject.java", "stars": "15", "class": {"name": "SimpleChildObject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSimpleObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SimpleObject", "snippet": "  public SimpleObject getSimpleObject() {    return parentSimpleObject;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/bringrags/SimpleChildObject.java", "stars": "15", "class": {"name": "SimpleChildObject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "String", "snippet": "  protected abstract String getConfiguration();  @BeforeEach  void before() throws Exception {    // create a SqlSessionFactory   SqlSessionFactory sqlSessionFactory;    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/mybatis-config-\" + getConfiguration() + \".xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/CreateDB.sql\");    sqlSession = sqlSessionFactory.openSession();    mapper = sqlSession.getMapper(Mapper.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java", "stars": "15", "class": {"name": "AbstractLazyTest", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "before", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void before() throws Exception {    // create a SqlSessionFactory   SqlSessionFactory sqlSessionFactory;    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/mybatis-config-\" + getConfiguration() + \".xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/CreateDB.sql\");    sqlSession = sqlSessionFactory.openSession();    mapper = sqlSession.getMapper(Mapper.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java", "stars": "15", "class": {"name": "AbstractLazyTest", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "after", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void after() {    if (sqlSession != null) {      sqlSession.close();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java", "stars": "15", "class": {"name": "AbstractLazyTest", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "lazyLoadUserWithGetObjectWithInterface", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void lazyLoadUserWithGetObjectWithInterface() {    Assertions.assertNotNull(mapper.getUserWithGetObjectWithInterface(1).getOwner());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java", "stars": "15", "class": {"name": "AbstractLazyTest", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "lazyLoadUserWithGetObjectWithoutInterface", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void lazyLoadUserWithGetObjectWithoutInterface() {    Assertions.assertNotNull(mapper.getUserWithGetObjectWithoutInterface(1).getOwner());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java", "stars": "15", "class": {"name": "AbstractLazyTest", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "lazyLoadUserWithGetXxxWithInterface", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void lazyLoadUserWithGetXxxWithInterface() {    Assertions.assertNotNull(mapper.getUserWithGetXxxWithInterface(1).getOwner());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java", "stars": "15", "class": {"name": "AbstractLazyTest", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "lazyLoadUserWithGetXxxWithoutInterface", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void lazyLoadUserWithGetXxxWithoutInterface() {    Assertions.assertNotNull(mapper.getUserWithGetXxxWithoutInterface(1).getOwner());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java", "stars": "15", "class": {"name": "AbstractLazyTest", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "lazyLoadUserWithNothingWithInterface", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void lazyLoadUserWithNothingWithInterface() {    Assertions.assertNotNull(mapper.getUserWithNothingWithInterface(1).getOwner());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java", "stars": "15", "class": {"name": "AbstractLazyTest", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "lazyLoadUserWithNothingWithoutInterface", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void lazyLoadUserWithNothingWithoutInterface() {    Assertions.assertNotNull(mapper.getUserWithNothingWithoutInterface(1).getOwner());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java", "stars": "15", "class": {"name": "AbstractLazyTest", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "get", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "V", "snippet": "\tpublic V get(K key) {\t\tV result = null;\t\tReference<V> reference = softMap.get(key);\t\tif (reference != null) {\t\t\tresult = reference.get();\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java", "stars": "74", "class": {"name": "BaseMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public", "abstract"]}}, {"method_name": "put", "params": ["K", "V"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean put(K key, V value) {\t\tsoftMap.put(key, createReference(value));\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java", "stars": "74", "class": {"name": "BaseMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public", "abstract"]}}, {"method_name": "remove", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void remove(K key) {\t\tsoftMap.remove(key);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java", "stars": "74", "class": {"name": "BaseMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public", "abstract"]}}, {"method_name": "keys", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<K>", "snippet": "\tpublic Collection<K> keys() {\t\tsynchronized (softMap) {\t\t\treturn new HashSet<K>(softMap.keySet());\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java", "stars": "74", "class": {"name": "BaseMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public", "abstract"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\tsoftMap.clear();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java", "stars": "74", "class": {"name": "BaseMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public", "abstract"]}}, {"method_name": "createReference", "params": ["V"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "Reference<V>", "snippet": "\tprotected abstract Reference<V> createReference(V value);}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java", "stars": "74", "class": {"name": "BaseMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public", "abstract"]}}, {"method_name": "getInstance", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "IRoomInstance", "snippet": "    public IRoomInstance getInstance(int id) {        IRoomInstance instance = this.getActiveInstance(id);        if(instance != null) return instance;        return this.getOfflineInstance(id);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomManager.java", "stars": "2", "class": {"name": "RoomManager", "extends": null, "implements": ["IRoomManager", "IRoomInstanceContainer"], "modifiers": ["public"]}}, {"method_name": "getActiveInstance", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "IRoomInstance", "snippet": "    public IRoomInstance getActiveInstance(int id) {        return this.rooms.get(id);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomManager.java", "stars": "2", "class": {"name": "RoomManager", "extends": null, "implements": ["IRoomManager", "IRoomInstanceContainer"], "modifiers": ["public"]}}, {"method_name": "getOfflineInstance", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "IRoomInstance", "snippet": "    private IRoomInstance getOfflineInstance(int id) {        return this.addInstance(new RoomInstance(id, this));    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomManager.java", "stars": "2", "class": {"name": "RoomManager", "extends": null, "implements": ["IRoomManager", "IRoomInstanceContainer"], "modifiers": ["public"]}}, {"method_name": "addInstance", "params": ["IRoomInstance"], "throws": null, "modifiers": ["private"], "return_type": "IRoomInstance", "snippet": "    private IRoomInstance addInstance(IRoomInstance instance) {        IRoomInstance existing = this.getActiveInstance(instance.getId());        if(existing != null) {            if(instance != existing) instance.dispose();            return existing;        }        return this.rooms.put(instance.getId(), instance);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomManager.java", "stars": "2", "class": {"name": "RoomManager", "extends": null, "implements": ["IRoomManager", "IRoomInstanceContainer"], "modifiers": ["public"]}}, {"method_name": "removeInstance", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeInstance(int id) {        IRoomInstance instance = this.rooms.remove(id);        if(instance != null) instance.dispose();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomManager.java", "stars": "2", "class": {"name": "RoomManager", "extends": null, "implements": ["IRoomManager", "IRoomInstanceContainer"], "modifiers": ["public"]}}, {"method_name": "removeAllInstances", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeAllInstances() {        for(int id : this.rooms.keySet()) this.removeInstance(id);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomManager.java", "stars": "2", "class": {"name": "RoomManager", "extends": null, "implements": ["IRoomManager", "IRoomInstanceContainer"], "modifiers": ["public"]}}, {"method_name": "createRoomObjectManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IRoomObjectManager", "snippet": "    public IRoomObjectManager createRoomObjectManager() {        return new RoomObjectManager();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomManager.java", "stars": "2", "class": {"name": "RoomManager", "extends": null, "implements": ["IRoomManager", "IRoomInstanceContainer"], "modifiers": ["public"]}}, {"method_name": "read", "params": ["byte", "int", "int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int read(byte[] buffer, int offset, int count) throws IOException {        int total = 0;        while (total < count) {            int read = super.read(buffer, offset + total, count - total);            if (read == -1) {                return (total != 0) ? total : -1;            }            total += read;        }        return total;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BlockingFilterInputStream.java", "stars": "74", "class": {"name": "BlockingFilterInputStream", "extends": "FilterInputStream", "implements": null, "modifiers": []}}, {"method_name": "read", "params": ["byte"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int read(byte[] buffer) throws IOException {        int total = 0;        while (total < buffer.length) {            int offset = total;            int count = buffer.length - total;            int read = super.read(buffer, offset, count);            if (read == -1) {                return (total != 0) ? total : -1;            }            total += read;        }        return total;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BlockingFilterInputStream.java", "stars": "74", "class": {"name": "BlockingFilterInputStream", "extends": "FilterInputStream", "implements": null, "modifiers": []}}, {"method_name": "skip", "params": ["long"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "long", "snippet": "    public long skip(long count) throws IOException {        long total = 0L;        while (total < count) {            long skipped = super.skip(count - total);            if (skipped == 0L) {                int b = super.read();                if (b < 0) {                    break;                } else {                    skipped += 1;                }            }            total += skipped;        }        return total;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BlockingFilterInputStream.java", "stars": "74", "class": {"name": "BlockingFilterInputStream", "extends": "FilterInputStream", "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return ID;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "getServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpServer", "snippet": "  public HttpServer getServer() {    return server;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "activate", "params": ["Config"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void activate(Config config) {    this.config = config;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "modify", "params": ["Config"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void modify(Config config) {    this.config = config;    manager.reload(this);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "deactivate", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void deactivate() {    stop();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "initServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void initServer() {    stop();    if (config.logging()) {      server = (ActualHttpServer) httpServer(config.port(), ApiUtils.log(LOG::info));    } else {      server = (ActualHttpServer) httpServer(config.port());    }  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "startServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void startServer() {    LOG.info(\"Starting AEM Stubs Moco Server\");    runner = runner(server);    runner.start();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void stop() {    if (runner != null) {      LOG.info(\"Stopping AEM Stubs Moco Server\");      runner.stop();    }    runner = null;    server = null;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "runScript", "params": ["Resource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void runScript(Resource resource) {    final StubScript script = new StubScript(resource, manager, this);    script.getCompilerConfig().addCompilationCustomizers(new ImportCustomizer().addStaticStars(      MocoUtils.class.getName(),      Moco.class.getName()    ));    script.run();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "loadMapping", "params": ["Resource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void loadMapping(Resource file) {    Optional.ofNullable(file.getChild(JcrUtils.JCR_CONTENT))      .flatMap(fileContent -> Optional.of(fileContent)        .map(r -> r.adaptTo(InputStream.class))        .map(BufferedInputStream::new))      .ifPresent(input -> {        final ActualHttpServer configServer = (ActualHttpServer) new HttpServerParser().parseServer(          ImmutableList.of(input), Optional.of(config.port())        );        server = server.mergeServer(configServer);      });  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoStubs.java", "stars": "8", "class": {"name": "MocoStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "api", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Docket", "snippet": "    public Docket api() {        // \u6392\u9664\u7684url\u89c4\u5219        List<Predicate<String>> excludePath = new ArrayList<>();        swaggerProperties.getExcludePath().forEach(path -> excludePath.add(PathSelectors.ant(path)));        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())                .pathProvider(new RelativePathProvider(servletContext) {                    @Override                    public String getApplicationBasePath() {                        return \"/\";                    }                })                .select()                .paths(Predicates.and(Predicates.not(Predicates.or(excludePath))))                .build()                .securitySchemes(securitySchemes())                .securityContexts(securityContexts());    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/swagger/SwaggerAutoConfiguration.java", "stars": "6", "class": {"name": "SwaggerAutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "securitySchemes", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<ApiKey>", "snippet": "    private List<ApiKey> securitySchemes() {        return Collections.singletonList(new ApiKey(\"Authorization\", \"Authorization\", \"header\"));    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/swagger/SwaggerAutoConfiguration.java", "stars": "6", "class": {"name": "SwaggerAutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "securityContexts", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<SecurityContext>", "snippet": "    private List<SecurityContext> securityContexts() {        return Collections.singletonList(                SecurityContext.builder()                        .securityReferences(defaultAuth())                        .forPaths(PathSelectors.regex(\"/.*\"))                        .build()        );    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/swagger/SwaggerAutoConfiguration.java", "stars": "6", "class": {"name": "SwaggerAutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "defaultAuth", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<SecurityReference>", "snippet": "    private List<SecurityReference> defaultAuth() {        AuthorizationScope authorizationScope = new AuthorizationScope(\"global\", \"accessEverything\");        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];        authorizationScopes[0] = authorizationScope;        return Collections.singletonList(                new SecurityReference(\"Authorization\", authorizationScopes));    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/swagger/SwaggerAutoConfiguration.java", "stars": "6", "class": {"name": "SwaggerAutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "apiInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ApiInfo", "snippet": "    private ApiInfo apiInfo() {        return new ApiInfoBuilder()                .title(swaggerProperties.getName())                .version(swaggerProperties.getVersion())                .build();    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/swagger/SwaggerAutoConfiguration.java", "stars": "6", "class": {"name": "SwaggerAutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listar", "params": ["ModelMap"], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView listar(ModelMap model) {        model.addAttribute(\"tabelas\", tabelaService.recuperar());        return new ModelAndView(\"/tabela/list\", model);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/TabelaController.java", "stars": "2", "class": {"name": "TabelaController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preSalvar", "params": ["Tabela", "Cliente", "ModelMap"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String preSalvar(@ModelAttribute(\"tabela\") Tabela tabela, @ModelAttribute(\"clientecontrol\") Cliente cliente, ModelMap model) {        model.addAttribute(\"clientes\", clienteService.recuperar());        return \"/tabela/add\";    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/TabelaController.java", "stars": "2", "class": {"name": "TabelaController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": ["Tabela", "BindingResult", "RedirectAttributes"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String salvar(@Valid @ModelAttribute(\"tabela\") Tabela tabela, BindingResult result, RedirectAttributes attr) {        if (result.hasErrors()) {            return \"/tabela/add\";        }        tabela.setCliente(clienteService.recuperarPorId(tabela.getCliente().getId()));        tabelaService.salvar(tabela);        attr.addFlashAttribute(\"mensagem\", \"Tabela criada com sucesso.\");        return \"redirect:/tabelas/listar\";    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/TabelaController.java", "stars": "2", "class": {"name": "TabelaController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preAtualizar", "params": ["Integer", "ModelMap"], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView preAtualizar(@PathVariable(\"id\") Integer id, ModelMap model) {        Tabela tabela = tabelaService.recuperarPorId(id);        model.addAttribute(\"clientes\", clienteService.recuperar());        model.addAttribute(\"tabela\", tabela);        return new ModelAndView(\"/tabela/att\", model);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/TabelaController.java", "stars": "2", "class": {"name": "TabelaController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "atualizar", "params": ["Tabela", "BindingResult", "RedirectAttributes"], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView atualizar(@Valid @ModelAttribute(\"tabela\") Tabela tabela, BindingResult result, RedirectAttributes attr) {        if (result.hasErrors()) {            return new ModelAndView(\"/tabela/add\");        }        tabela.setCliente(tabela.getCliente());        tabelaService.atualizar(tabela);        attr.addFlashAttribute(\"mensagem\", \"Tabela atualizada com sucesso.\");        return new ModelAndView(\"redirect:/tabelas/listar\");    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/TabelaController.java", "stars": "2", "class": {"name": "TabelaController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remover", "params": ["Integer", "RedirectAttributes"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String remover(@PathVariable(\"id\") Integer id, RedirectAttributes attr) {        tabelaService.excluir(id);        attr.addFlashAttribute(\"mensagem\", \"Tabela exclu\u00edda com sucesso.\");        return \"redirect:/tabelas/listar\";    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/TabelaController.java", "stars": "2", "class": {"name": "TabelaController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addToQueue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addToQueue(String input) {        toSend.add(input);        if (!waiting) {            sendData();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/webos/WebOSTVKeyboardInput.java", "stars": "4", "class": {"name": "WebOSTVKeyboardInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendEnter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendEnter() {        toSend.add(ENTER);        if (!waiting) {            sendData();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/webos/WebOSTVKeyboardInput.java", "stars": "4", "class": {"name": "WebOSTVKeyboardInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendDel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendDel() {        if (toSend.size() == 0) {            toSend.add(DELETE);            if (!waiting) {                sendData();            }        }        else {            toSend.remove(toSend.size()-1);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/webos/WebOSTVKeyboardInput.java", "stars": "4", "class": {"name": "WebOSTVKeyboardInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendData() {        waiting = true;        String uri;        String typeTest = toSend.get(0);        JSONObject payload = new JSONObject();        if (typeTest.equals(ENTER)) {            toSend.remove(0);            uri = \"ssap://com.webos.service.ime/sendEnterKey\";        }        else if (typeTest.equals(DELETE)) {            uri = \"ssap://com.webos.service.ime/deleteCharacters\";            int count = 0;            while (toSend.size() > 0 && toSend.get(0).equals(DELETE)) {                toSend.remove(0);                count++;            }            try {                payload.put(\"count\", count);            } catch (JSONException e) {                e.printStackTrace();            }        }        else {            uri = \"ssap://com.webos.service.ime/insertText\";            StringBuilder sb = new StringBuilder();            while (toSend.size() > 0 && !(toSend.get(0).equals(DELETE) || toSend.get(0).equals(ENTER))) {                String text = toSend.get(0);                sb.append(text);                toSend.remove(0);            }            try {                payload.put(\"text\", sb.toString());                payload.put(\"replace\", 0);            } catch (JSONException e) {                e.printStackTrace();            }        }        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                waiting = false;                if (toSend.size() > 0)                     sendData();            }            @Override            public void onError(ServiceCommandError error) {                waiting = false;                if (toSend.size() > 0)                     sendData();            }        };        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(service, uri, payload, true, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/webos/WebOSTVKeyboardInput.java", "stars": "4", "class": {"name": "WebOSTVKeyboardInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["TextInputStatusListener"], "throws": null, "modifiers": ["public"], "return_type": "URLServiceSubscription<TextInputStatusListener>", "snippet": "    public URLServiceSubscription<TextInputStatusListener> connect(final TextInputStatusListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                JSONObject jsonObj = (JSONObject)response;                TextInputStatusInfo keyboard = parseRawKeyboardData(jsonObj);                Util.postSuccess(listener, keyboard);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        URLServiceSubscription<TextInputStatusListener> subscription = new URLServiceSubscription<TextInputStatusListener>(service, KEYBOARD_INPUT, null, true, responseListener);        subscription.send();        return subscription;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/webos/WebOSTVKeyboardInput.java", "stars": "4", "class": {"name": "WebOSTVKeyboardInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseRawKeyboardData", "params": ["JSONObject"], "throws": null, "modifiers": ["private"], "return_type": "TextInputStatusInfo", "snippet": "    private TextInputStatusInfo parseRawKeyboardData(JSONObject rawData) {        boolean focused = false;        String contentType = null;        boolean predictionEnabled = false;        boolean correctionEnabled = false;        boolean autoCapitalization = false;        boolean hiddenText = false;        boolean focusChanged = false;        TextInputStatusInfo keyboard = new TextInputStatusInfo();        keyboard.setRawData(rawData);        try {            if (rawData.has(\"currentWidget\")) {                JSONObject currentWidget = (JSONObject) rawData.get(\"currentWidget\");                focused = (Boolean) currentWidget.get(\"focus\");                if (currentWidget.has(\"contentType\")) {                    contentType = (String) currentWidget.get(\"contentType\");                }                if (currentWidget.has(\"predictionEnabled\")) {                    predictionEnabled = (Boolean) currentWidget.get(\"predictionEnabled\");                }                if (currentWidget.has(\"correctionEnabled\")) {                    correctionEnabled = (Boolean) currentWidget.get(\"correctionEnabled\");                }                if (currentWidget.has(\"autoCapitalization\")) {                    autoCapitalization = (Boolean) currentWidget.get(\"autoCapitalization\");                }                if (currentWidget.has(\"hiddenText\")) {                    hiddenText = (Boolean) currentWidget.get(\"hiddenText\");                }            }            if (rawData.has(\"focusChanged\"))                 focusChanged = (Boolean) rawData.get(\"focusChanged\");        } catch (JSONException e) {            e.printStackTrace();        }        keyboard.setFocused(focused);        keyboard.setContentType(contentType);        keyboard.setPredictionEnabled(predictionEnabled);        keyboard.setCorrectionEnabled(correctionEnabled);        keyboard.setAutoCapitalization(autoCapitalization);        keyboard.setHiddenText(hiddenText);        keyboard.setFocusChanged(focusChanged);        return keyboard;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/webos/WebOSTVKeyboardInput.java", "stars": "4", "class": {"name": "WebOSTVKeyboardInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "showErrorMessage", "params": ["Exception"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showErrorMessage(@NotNull final Exception exception) {        showErrorMessage(exception.getMessage());    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/AlertUtil.java", "stars": "2", "class": {"name": "AlertUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "showErrorMessage", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showErrorMessage(@NotNull final String error) {        alert(Alert.AlertType.ERROR, \"\u041f\u043e\u043c\u0438\u043b\u043a\u0430\", error, ButtonType.OK);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/AlertUtil.java", "stars": "2", "class": {"name": "AlertUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "showInfoMessage", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showInfoMessage(@NotNull final String header, @NotNull final String info) {        alert(Alert.AlertType.INFORMATION, header, info, ButtonType.OK);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/AlertUtil.java", "stars": "2", "class": {"name": "AlertUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "alert", "params": ["Alert", "String", "String", "ButtonType"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void alert(Alert.AlertType type, String header, String message, ButtonType... types) {        Alert alert = new Alert(type, message, types);        alert.setHeaderText(header);        alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);        alert.showAndWait();    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/AlertUtil.java", "stars": "2", "class": {"name": "AlertUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onBindViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1)\t{\t\tn_onBindViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SelectableItemsViewAdapter_2.java", "stars": "2", "class": {"name": "SelectableItemsViewAdapter_2", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onBindViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1);\tpublic void onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0)\t{\t\tn_onViewRecycled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SelectableItemsViewAdapter_2.java", "stars": "2", "class": {"name": "SelectableItemsViewAdapter_2", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onViewRecycled", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0)\t{\t\tn_onViewRecycled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SelectableItemsViewAdapter_2.java", "stars": "2", "class": {"name": "SelectableItemsViewAdapter_2", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onViewRecycled", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SelectableItemsViewAdapter_2.java", "stars": "2", "class": {"name": "SelectableItemsViewAdapter_2", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SelectableItemsViewAdapter_2.java", "stars": "2", "class": {"name": "SelectableItemsViewAdapter_2", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SelectableItemsViewAdapter_2.java", "stars": "2", "class": {"name": "SelectableItemsViewAdapter_2", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() throws Exception{    if(!checkArgs(p)){      throw new IllegalArgumentException(\"job's args is illegal.\");    }    logger.info(\"props :\" + p.toString());    getPid();    try {      exeCmd(genCommand(p));    }catch (Exception e){      logger.error(\"exec spark-submit command failed, \" + e);      throw e;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/HiveExport.java", "stars": "18", "class": {"name": "HiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancel() throws InterruptedException {    logger.info(\"this flow was killed.\");    throw new RuntimeException(\"cancel the flow.\");    //_job.119395.child-job02.log//    String azExecId = p.getProperty(CommonJobProperties.EXEC_ID);//    String jobId = p.getProperty(CommonJobProperties.JOB_ID);//    String workDir = p.getProperty(\"working.dir\");//    final String logFilePath = String.format(\"%s/_job.%s.%s.log\", workDir, azExecId, jobId);//    logger.info(\"log file path is: \" + logFilePath);//    HadoopJobUtils.killAllSpawnedHadoopJobs(logFilePath, logger);//    String killCmd = String.format(\"kill -9 %s\", getPid());//    logger.info(\"kill process by \" + killCmd);//    try {//      Runtime.getRuntime().exec(killCmd);//    } catch (Exception e){//      logger.error(e);//    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/HiveExport.java", "stars": "18", "class": {"name": "HiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPid", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getPid() {    // get name representing the running Java virtual machine.    String name = ManagementFactory.getRuntimeMXBean().getName();    // get pid    String pid = name.split(\"@\")[0];    logger.info(\"HiveExport Pid is:\" + pid);    return pid;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/HiveExport.java", "stars": "18", "class": {"name": "HiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkParamMap", "params": ["Properties", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean checkParamMap(Properties p, String key) {    return StringUtils.isEmpty(p.getProperty(key));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/HiveExport.java", "stars": "18", "class": {"name": "HiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkArgs", "params": ["Properties"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean checkArgs(Properties p) {    if (p == null) {      logger.info(\"args can't be null\");      return false;    }    if (checkParamMap(p, DATABASE_NAME) || !(p.getProperty(DATABASE_NAME).endsWith(\"work\") || p.getProperty(DATABASE_NAME).endsWith(\"ind\"))) {      logger.info(\"args: \" + DATABASE_NAME + \" can't be null ,and must be end with 'work' or 'ind'\");      return false;    }    if (checkParamMap(p, TABEL_NAME)) {      logger.info(\"args: \" + TABEL_NAME + \"  Illegal Argument\");      return false;    }    if (checkParamMap(p, EXPORT_FILE_PATH)) {      logger.info(\"args: \" + EXPORT_FILE_PATH + \"  Illegal Argument\");      return false;    }    if (checkParamMap(p, EXPORT_FILE_NAME)) {      logger.info(\"args: \" + EXPORT_FILE_PATH + \"  Illegal Argument\");      return false;    }    if(checkParamMap(p, QUEUE)){      logger.info(\"args: \" + QUEUE + \"  Illegal Argument\");      return false;    }    logger.info(\"args is ok.\");    logger.info(\"DATABASE_NAME: \" + p.getProperty(DATABASE_NAME) + \",TABEL_NAME: \" + p.getProperty(TABEL_NAME) + \",PARTITION_NAME: \" + p.getProperty(PARTITION_NAME)            + \",PARTITION_VALUE: \" + p.getProperty(PARTITION_VALUE) + \",EXPORT_FILE_PATH: \" + p.getProperty(EXPORT_FILE_PATH) + \",EXPORT_FILE_NAME: \"            + p.getProperty(EXPORT_FILE_NAME) + \",QUEUE: \" + p.getProperty(QUEUE));    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/HiveExport.java", "stars": "18", "class": {"name": "HiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "genCommand", "params": ["Properties"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String genCommand(Properties p){    List<String> tmp = new ArrayList<String>();    tmp.add(getValue(p, SPARK_HOME, DEFAULT_SPARK_HOME) + \"/bin/spark-submit\");    tmp.add(\"--class \" + getValue(p, MAIN_CLASS, DEFAULT_MAIN_CLASS));    tmp.add(\"--executor-cores \" + getValue(p, EXECUTOR_CORES, \"2\"));    tmp.add(\"--executor-memory \" + getValue(p, EXECUTOR_MEMORY, \"1G\"));    tmp.add(\"--driver-memory \" + getValue(p, DRIVER_MEMORY, \"1G\"));    tmp.add(\"--master \" + getValue(p, MASTER, DEFAULT_MASTER));    tmp.add(\"--deploy-mode \" + getValue(p, DEPLOY_MODE, DEFAULT_DEPLOY_MODE));    tmp.add(\"--queue \" + p.getProperty(\"queue\"));    tmp.add(getValue(p, EXECUTE_JAR, DEFAULT_JAR));    // args    tmp.add(p.getProperty(DATABASE_NAME));    tmp.add(p.getProperty(TABEL_NAME));    tmp.add(StringUtils.isEmpty(p.getProperty(PARTITION_NAME)) ? \"null\" : p.getProperty(PARTITION_NAME));    tmp.add(StringUtils.isEmpty(p.getProperty(PARTITION_VALUE)) ? \"null\" : p.getProperty(PARTITION_VALUE));    tmp.add(p.getProperty(EXPORT_FILE_PATH));    tmp.add(p.getProperty(EXPORT_FILE_NAME));    // args    String cmd = String.join(\" \", tmp);;    logger.info(\"execute cmd: \" + cmd);    return String.join(\" \", tmp);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/HiveExport.java", "stars": "18", "class": {"name": "HiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeHqlCommand", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String executeHqlCommand(String cmd) throws Exception {    logger.info(\"Start to run Hive shell script.\");    String result;    try {      result = Shell.execCommand(cmd);    }catch(Exception e){      logger.info(e);      throw new Exception(e);    }    logger.info(\"Run Hive shell script result\" + result);    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/HiveExport.java", "stars": "18", "class": {"name": "HiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": ["Properties", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getValue(Properties p, String key, String defaultValue){    if(StringUtils.isBlank(p.getProperty(key))){      return defaultValue;    }    return p.getProperty(key);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/HiveExport.java", "stars": "18", "class": {"name": "HiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exeCmd", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void exeCmd(String cmd) throws Exception {    logger.info(\"submit spark job ...\");    Process process = null;    try {      process = Runtime.getRuntime().exec(cmd);      final LogGobbler outputGobbler =              new LogGobbler(                      new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8),                      logger, Level.INFO, 30);      final LogGobbler errorGobbler =              new LogGobbler(                      new InputStreamReader(process.getErrorStream(), StandardCharsets.UTF_8),                      logger, Level.ERROR, 30);      outputGobbler.start();      errorGobbler.start();      int exitCode = -1;      try {        exitCode = process.waitFor();      } catch (final InterruptedException e) {        logger.error(\"Process interrupted. Exit code is \" + exitCode);        throw new InterruptedException();      }      // try to wait for everything to get logged out before exiting      outputGobbler.awaitCompletion(5000);      errorGobbler.awaitCompletion(5000);      if (exitCode != 0) {        logger.error(\"execute spark job failed, exitcode : \" + exitCode);        final String output =                new StringBuilder().append(\"Stdout:\\n\")                        .append(outputGobbler.getRecentLog()).append(\"\\n\\n\")                        .append(\"Stderr:\\n\").append(errorGobbler.getRecentLog())                        .append(\"\\n\").toString();        throw new RuntimeException(\"execute spark job failed, exitcode: \" + exitCode);      }      logger.info(\"execute spark job success.\");    } finally {      IOUtils.closeQuietly(process.getInputStream());      IOUtils.closeQuietly(process.getOutputStream());      IOUtils.closeQuietly(process.getErrorStream());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/HiveExport.java", "stars": "18", "class": {"name": "HiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\t/*\u4f7f\u7528\u9759\u6001\u7684valueOf\u65b9\u6cd5\u53ef\u4ee5\u5c06\u666e\u901a\u7684\u6570\u503c\u8f6c\u5316\u4e3a\u5927\u6570\u503c*/\t\tBigInteger a = BigInteger.valueOf(100);\t\tBigInteger b = BigInteger.valueOf(11);\t\t/*\u4e0d\u80fd\u4f7f\u7528+\uff0c*\uff0c\u7b49\u7b97\u6570\u8fd0\u7b97\u7b26\u5904\u7406\u5927\u6570\u503c\uff0c\t\t * \u800c\u8981\u7528\u5927\u6570\u503c\u7c7b\u4e2d\u7684add\u548cmultiply\u7b49\u65b9\u6cd5\u3002\t\t */\t\tBigInteger c = a.add(b);\t\tBigInteger d = c.multiply(b.add(BigInteger.valueOf(2)));\t\tSystem.out.println(c);\t\tSystem.out.println(d);\t\t\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/DashuzhiDamo.java", "stars": "2", "class": {"name": "DashuzhiDamo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "minDistance", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int minDistance(String word1, String word2) {        int[][] dp = new int[word1.length() + 1][word2.length() + 1];        for(int i = 0; i < dp.length; i ++) {            for(int j = 0; j < dp[0].length; j ++) {                if(i == 0) {                    dp[0][j] = j;                } else if(j == 0) {                    dp[i][0] = i;                } else if(word1.charAt(i - 1) == word2.charAt(j - 1)) {                    dp[i][j] = dp[i - 1][j - 1];                } else {                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;                }            }        }        return dp[dp.length - 1][dp[0].length - 1];    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/EditDistance.java", "stars": "1", "class": {"name": "EditDistance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "with", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "    public static Builder with(Activity activity) {        return new Builder(activity);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "addViews", "params": ["List<TextView>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addViews(List<TextView> views) {        if (views == null) {            return;        }        if (mViewSet == null) {            mViewSet = views;        } else {            mViewSet.addAll(views);        }        for (TextView view : views) {            view.addTextChangedListener(this);        }        // \u89e6\u53d1\u4e00\u6b21\u76d1\u542c        notifyChanged();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "addViews", "params": ["TextView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addViews(TextView... views) {        if (views == null) {            return;        }        if (mViewSet == null) {            mViewSet = new ArrayList<>(views.length);        }        for (TextView view : views) {            // \u907f\u514d\u91cd\u590d\u6dfb\u52a0            if (!mViewSet.contains(view)) {                view.addTextChangedListener(this);                mViewSet.add(view);            }        }        // \u89e6\u53d1\u4e00\u6b21\u76d1\u542c        notifyChanged();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "removeViews", "params": ["TextView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeViews(TextView... views) {        if (mViewSet != null && mViewSet.size() > 0) {            for (TextView view : views) {                view.removeTextChangedListener(this);                mViewSet.remove(view);            }            // \u89e6\u53d1\u4e00\u6b21\u76d1\u542c            notifyChanged();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "removeAllViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeAllViews() {        if (mViewSet == null) {            return;        }        for (TextView view : mViewSet) {            view.removeTextChangedListener(this);        }        mViewSet.clear();        mViewSet = null;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "setListener", "params": ["OnInputTextListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(OnInputTextListener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "beforeTextChanged", "params": ["CharSequence", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void beforeTextChanged(CharSequence s, int start, int count, int after) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onTextChanged", "params": ["CharSequence", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTextChanged(CharSequence s, int start, int before, int count) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "afterTextChanged", "params": ["Editable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterTextChanged(Editable s) {        notifyChanged();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "notifyChanged", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void notifyChanged() {        if (mViewSet == null) {            return;        }        // \u91cd\u65b0\u904d\u5386\u6240\u6709\u7684\u8f93\u5165        for (TextView view : mViewSet) {            if (\"\".equals(view.getText().toString())) {                setEnabled(false);                return;            }        }        if (mListener != null) {            setEnabled(mListener.onInputChange(this));        } else {            setEnabled(true);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "setEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnabled(boolean enabled) {        if (enabled == mView.isEnabled()) {            return;        }        if (enabled) {            //\u542f\u7528View\u7684\u4e8b\u4ef6            mView.setEnabled(true);            if (isAlpha) {                //\u8bbe\u7f6e\u4e0d\u900f\u660e                mView.setAlpha(1f);            }        } else {            //\u7981\u7528View\u7684\u4e8b\u4ef6            mView.setEnabled(false);            if (isAlpha) {                //\u8bbe\u7f6e\u534a\u900f\u660e                mView.setAlpha(0.5f);            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "InputTextHelper", "extends": null, "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "addView", "params": ["TextView"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder addView(TextView view) {            mViewSet.add(view);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setMain", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMain(View view) {            mView = view;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setAlpha", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setAlpha(boolean alpha) {            isAlpha = alpha;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["OnInputTextListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnInputTextListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "InputTextHelper", "snippet": "        public InputTextHelper build(){            /** \u6587\u672c\u8f93\u5165\u8f85\u52a9\u7c7b */            InputTextHelper helper = new InputTextHelper(mView, isAlpha);            helper.addViews(mViewSet);            helper.setListener(mListener);            mActivity.getApplication().registerActivityLifecycleCallbacks(new TextInputLifecycle(mActivity, helper));            return helper;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "onActivityCreated", "params": ["Activity", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onActivityCreated(@NonNull Activity activity, Bundle savedInstanceState) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "TextInputLifecycle", "extends": null, "implements": ["Application"], "modifiers": ["private", "static"]}}, {"method_name": "onActivityStarted", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onActivityStarted(@NonNull Activity activity) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "TextInputLifecycle", "extends": null, "implements": ["Application"], "modifiers": ["private", "static"]}}, {"method_name": "onActivityResumed", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onActivityResumed(@NonNull Activity activity) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "TextInputLifecycle", "extends": null, "implements": ["Application"], "modifiers": ["private", "static"]}}, {"method_name": "onActivityPaused", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onActivityPaused(@NonNull Activity activity) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "TextInputLifecycle", "extends": null, "implements": ["Application"], "modifiers": ["private", "static"]}}, {"method_name": "onActivityStopped", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onActivityStopped(@NonNull Activity activity) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "TextInputLifecycle", "extends": null, "implements": ["Application"], "modifiers": ["private", "static"]}}, {"method_name": "onActivitySaveInstanceState", "params": ["Activity", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onActivitySaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "TextInputLifecycle", "extends": null, "implements": ["Application"], "modifiers": ["private", "static"]}}, {"method_name": "onActivityDestroyed", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onActivityDestroyed(@NonNull Activity activity) {            if (mActivity != null && mActivity == activity) {                mTextHelper.removeAllViews();                mActivity.getApplication().registerActivityLifecycleCallbacks(this);                mTextHelper = null;                mActivity = null;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/InputTextHelper.java", "stars": "1", "class": {"name": "TextInputLifecycle", "extends": null, "implements": ["Application"], "modifiers": ["private", "static"]}}, {"method_name": "create", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ChannelFactory", "snippet": "    public static ChannelFactory create() {        return new ChannelFactory();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/ChannelFactory.java", "stars": "3", "class": {"name": "ChannelFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createChannel", "params": ["HostAndPort"], "throws": null, "modifiers": ["public"], "return_type": "Channel", "snippet": "    public Channel createChannel(HostAndPort endpoint) {        NettyChannelBuilder nettyChannelBuilder = createChannelBuilder(endpoint);        return nettyChannelBuilder.build();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/ChannelFactory.java", "stars": "3", "class": {"name": "ChannelFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createChannelBuilder", "params": ["HostAndPort"], "throws": null, "modifiers": ["private"], "return_type": "NettyChannelBuilder", "snippet": "    private NettyChannelBuilder createChannelBuilder(HostAndPort endpoint) {        return NettyChannelBuilder.forAddress(endpoint.getHost(), endpoint.getPort())                .negotiationType(NegotiationType.PLAINTEXT)                .intercept(metadataInterceptor());    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/ChannelFactory.java", "stars": "3", "class": {"name": "ChannelFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "metadataInterceptor", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ClientInterceptor", "snippet": "    private ClientInterceptor metadataInterceptor() {        ClientInterceptor interceptor = new ClientInterceptor() {            @Override            public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(                    final io.grpc.MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, final Channel next) {                return new ClientInterceptors.CheckedForwardingClientCall<ReqT, RespT>(next.newCall(method, callOptions)) {                    @Override                    protected void checkedStart(Listener<RespT> responseListener, Metadata headers)                            throws StatusException {                        for (String entry : new LinkedList<>(Collections.singletonList(\"a\"))) {                            Metadata.Key<String> key = Metadata.Key.of(\"x\", Metadata.ASCII_STRING_MARSHALLER);                            headers.put(key, \"abc\");                        }                        delegate().start(responseListener, headers);                    }                };            }        };        return interceptor;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/ChannelFactory.java", "stars": "3", "class": {"name": "ChannelFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "esc", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String esc(final String s) {        return s.replace(\"'\", \"''\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql/CustomUtil.java", "stars": "15", "class": {"name": "CustomUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["ServletConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(ServletConfig config) throws ServletException {\t\t// \uc774 \ud568\uc218\ub294 \uc11c\ubc84\uac00 \uae30\ub3d9\ub41c \uc774\ud6c4\t\t// \uc694\uccad\ub0b4\uc6a9\uc774 .cls\ub85c \ub05d\ub098\ub294 \uc694\uccad\uc774 \uc654\uc744 \uacbd\uc6b0 \ucc98\uc74c \ub531 \ud55c\ubc88\ub9cc \uc2e4\ud589\ub418\ub294 \ud568\uc218\uc774\ub2e4.\t\t// \ucd5c\ucd08\ub85c \uc774 \uc11c\ube14\ub9bf\uc774 \uc2dc\uc791\ub418\uba74 \uc900\ube44\ub41c properties \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c\t\t// \uc774\uac83\uc744 \uc774\uc6a9\ud574\uc11c \uc2e4\uc81c \uc2e4\ud589\uac00\ub2a5\ud55c \ud074\ub798\uc2a4\ub85c \uc694\uccad\ub0b4\uc6a9\uacfc \ud074\ub798\uc2a4\uac1d\uccb4\ub97c \ub9f5\ud551\uc744 \ud574\ub193\uc544\uc57c \ud55c\ub2e4.\t\t\t\t// \ud30c\uc77c\uc5d0\uc11c \uc9c1\uc811 \uc77d\uc5b4\uc11c Map\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc57c \ud558\ubbc0\ub85c\t\t// properties\ub77c\ub294 \ud074\ub798\uc2a4\ub97c \uc789\uc694\ud574\uc11c \uc791\uc5c5\ud558\uc790.\t\tProperties prop = new Properties();\t\tFileInputStream fin = null;\t\ttry {\t\t\tString path = this.getClass().getResource(\"\").getPath();\t\t\t\t\t\t// \ud30c\uc77c\uc744 \uc2a4\ud2b8\ub9bc\uc73c\ub85c \ub9cc\ub4e4\uace0\t\t\tfin = new FileInputStream(path + \"../resource/cls.properties\");\t\t\tprop.load(fin);\t\t} catch(Exception e) {\t\t\te.printStackTrace();\t\t} finally {\t\t\ttry {\t\t\t\tfin.close();\t\t\t}catch(Exception e) {}\t\t}\t\t\t\tmap = new HashMap<String, ClsController>();\t\t\t\t// \uba3c\uc800 \ud0a4\uac12\ub9cc \ubf51\uc544\uc628\ub2e4.\t\tSet keys = prop.keySet();\t\t// \ud0a4\uac12\uc744 \uc54c\uc544\ub0c8\uc73c\ub2c8 \uc774\uc81c \uc2e4\uc81c \uc2e4\ud589\ud574\uc57c\ud560 \ud074\ub798\uc2a4\uc758 \uacbd\ub85c\ub97c \uc54c\uc544\ub0bc \uc218 \uc788\ub2e4.\t\t// \ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \uacbd\ub85c\ub97c \uc2e4\uc81c \uc2e4\ud589\uac00\ub2a5\ud55c \ud074\ub798\uc2a4\ub85c \ubcc0\uacbd\ud574\uc900\ub2e4.\t\t\t\tArrayList<String> list = new ArrayList<String>(keys);\t\t\t\tfor(int i = 0 ; i < list.size(); i++ ) {\t\t\tString key = list.get(i);\t\t\tString sclass = (String) prop.get(key);\t\t\t// \uc774\uc81c \uc2e4\ud589\uac00\ub2a5\ud55c \ud074\ub798\uc2a4\ub85c \ubcc0\ud658\ud55c\ub2e4.\t\t\ttry {\t\t\t\tClass tmp = Class.forName(sclass);\t\t\t\tClsController cls = (ClsController) tmp.newInstance();\t\t\t\t\t\t\t\tmap.put(key, cls);\t\t\t} catch(Exception e) {\t\t\t\te.printStackTrace();\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/dispatch/Dispatch.java", "stars": "2", "class": {"name": "Dispatch", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "service", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\t\t// \ud560\uc77c\t\t// 1. \uc694\uccad\ub0b4\uc6a9\uc744 \uc54c\uc544\ub0b8\ub2e4.\t\tString full = req.getRequestURI();\t\t// 2. http://localhost/clsProj/member/login.cls \uc5d0\uc11c \ub3c4\uba54\uc778\uc744 \uc54c\uc544\ub0b8\ub2e4.\t\tString domain = req.getContextPath();\t\t// 3. \uc2e4\uc81c \uc694\uccad\ub0b4\uc6a9\uc744 \uc54c\uc544\ub0b8\ub2e4.\t\tString realPath = full.substring(domain.length());//\t\tSystem.out.println(\"######### realPath : \" + realPath);\t\t\t\t// 4. \uc694\uccad\ub0b4\uc6a9\uc744 \uc54c\uc544\ub0c8\uc73c\ub2c8 \uc2e4\uc81c \uc2e4\ud589\ud560 \ud074\ub798\uc2a4\ub97c \uac00\uc838\uc628\ub2e4.\t\tClsController cls = map.get(realPath);\t\treq.setAttribute(\"isRedirect\", false);\t\tString view = cls.exec(req, resp);\t\tboolean bool = (boolean) req.getAttribute(\"isRedirect\");\t\tif(bool) {\t\t/*\t\tString last = view.substring(view.lastIndexOf(\".\") + 1);\t\tif(last.equals(\"cls\")) {\t\t\t\t\t*/\t\t\tresp.sendRedirect(view);\t\t} else {\t\t\ttry {\t\t\t\tRequestDispatcher rd = req.getRequestDispatcher(view);\t\t\t\trd.forward(req, resp);\t\t\t} catch(Exception e) {\t\t\t\te.printStackTrace();\t\t\t}\t\t}\t}}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/dispatch/Dispatch.java", "stars": "2", "class": {"name": "Dispatch", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getLayoutId(String type) {        return LayoutType.valueOf(type).layoutId;    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/util/LayoutIdUtil.java", "stars": "2", "class": {"name": "LayoutIdUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_ClickListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_ClickListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_ClickListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_ClickListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_ClickListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_ClickListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_ClickListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_ClickListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws SQLException {        //1\u3001\u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\u6c60        DataSource ds = new ComboPooledDataSource();        //2\u3001\u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61        Connection conn = ds.getConnection();        //3\u3001\u6253\u5370        System.out.println(conn);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/c3p0/C3P0Demo1.java", "stars": "2", "class": {"name": "C3P0Demo1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initalizeLayout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\tpublic View initalizeLayout() {  \t\tinflater = LayoutInflater.from(activity);\t\tView rowView =inflater.inflate(R.layout.custom_dialog, null);\t\t   \t\tmTitleTextView=(TextView)rowView.findViewById(R.id.dailog_title);\t\tdailogCloseImage=(ImageView)rowView.findViewById(R.id.dailog_close_image);\t\tmFirstButton=(Button)rowView.findViewById(R.id.first_btn);\t\tmMiddleButton=(Button)rowView.findViewById(R.id.middle_btn);\t\tmLastButton=(Button)rowView.findViewById(R.id.last_btn);\t\tmMiddleLayout=(LinearLayout)rowView.findViewById(R.id.middle_layout);\t\tmBottomLayout=(LinearLayout)rowView.findViewById(R.id.bottom_layout);\t\t//set values...\t\tmTitleTextView.setText(mTitle);\t\treturn rowView;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void show(){\t\tdialog.show();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dismiss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void dismiss(){\t\tdialog.dismiss();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void addView(View view){\t\tmMiddleLayout.addView(view);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContentView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\tpublic View setContentView(int resourceId){\t\tView view =inflater.inflate(resourceId, null);\t\taddView(view);\t\treturn view;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContentView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setContentView(View view){\t\taddView(view);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDailogCloseImage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDailogCloseImage(int resourceId){\t\tdailogCloseImage.setImageResource(resourceId);//\t\tmDailogButton.setBackgroundResource(R.drawable.invite_button);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFirstButton", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setFirstButton(String name){\t\tmBottomLayout.setVisibility(View.VISIBLE);\t\tmFirstButton.setVisibility(View.VISIBLE);\t\tmFirstButton.setText(name);\t\tLinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\t\t\t\tLinearLayout.LayoutParams.MATCH_PARENT,\t\t\t\tLinearLayout.LayoutParams.MATCH_PARENT);\t\tparams.weight=100;\t\tmFirstButton.setLayoutParams(params);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMiddleButton", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setMiddleButton(String name){\t\tmMiddleButton.setVisibility(View.VISIBLE);\t\tmMiddleButton.setText(name);\t\tLinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\t\t\t\tLinearLayout.LayoutParams.MATCH_PARENT,\t\t\t\tLinearLayout.LayoutParams.MATCH_PARENT);\t\tparams.weight=50;\t\tmFirstButton.setLayoutParams(params);\t\tmMiddleButton.setLayoutParams(params);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastButton", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setLastButton(String name){\t\tmLastButton.setVisibility(View.VISIBLE);\t\tmLastButton.setText(name);\t\tLinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\t\t\t\tLinearLayout.LayoutParams.MATCH_PARENT,\t\t\t\tLinearLayout.LayoutParams.MATCH_PARENT);\t\tparams.weight=33;\t\tmFirstButton.setLayoutParams(params);\t\tmMiddleButton.setLayoutParams(params);\t\tmLastButton.setLayoutParams(params);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFirstButtonOnClickListener", "params": ["OnClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setFirstButtonOnClickListener(OnClickListener onClickListener) {\t\tmFirstButton.setOnClickListener(onClickListener);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMiddleButtonOnClickListener", "params": ["OnClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setMiddleButtonOnClickListener(OnClickListener onClickListener) {\t\tmMiddleButton.setOnClickListener(onClickListener);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setThirdButtonOnClickListener", "params": ["OnClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setThirdButtonOnClickListener(OnClickListener onClickListener) {\t\tmLastButton.setOnClickListener(onClickListener);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDailogCloseImageOnClickListener", "params": ["OnClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDailogCloseImageOnClickListener(OnClickListener onClickListener) {\t\tdailogCloseImage.setOnClickListener(onClickListener);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCancelable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCancelable(boolean flag) {\t\tdialog.setCancelable(flag);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/mypopup/src/com/example/mypopup/CustomDialog.java", "stars": "74", "class": {"name": "CustomDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configTxGen", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean configTxGen(InitConfigEntity initConfig) {        Map<Object, Object> configTxEntity = this.loadTemplate(CONFIGTX);        if (CollectionUtils.isEmpty(configTxEntity)) {            return false;        }        Map<Object, Object> ordererOrg = null;        Map<Object, Object> org1 = null;        List<Map<Object, Object>> organizations = (List<Map<Object, Object>>) configTxEntity.get(\"Organizations\");        for (Map<Object, Object> item : organizations) {            if (\"OrdererOrg\".equals(item.get(\"Name\"))) {                item.put(\"MSPDir\", String.format(\"crypto-config/ordererOrganizations/%s/msp\", initConfig.getOrdererDomain()));                ordererOrg = item;            } else {                org1 = item;                item.put(\"Name\", initConfig.getOrgMSPID());                item.put(\"ID\", initConfig.getOrgMSPID());                item.put(\"MSPDir\", String.format(\"crypto-config/peerOrganizations/%s/msp\", initConfig.getPeerDomain()));                Map<Object, Object> policies = (Map<Object, Object>) item.get(\"Policies\");                Map<Object, Object> config = (Map<Object, Object>) policies.get(\"Readers\");                config.put(\"Rule\", String.format(\"OR('%s.admin','%s.peer','%s.client')\", initConfig.getOrgMSPID(), initConfig.getOrgMSPID(), initConfig.getOrgMSPID()));                config = (Map<Object, Object>) policies.get(\"Writers\");                config.put(\"Rule\", String.format(\"OR('%s.admin','%s.client')\", initConfig.getOrgMSPID(), initConfig.getOrgMSPID()));                config = (Map<Object, Object>) policies.get(\"Admins\");                config.put(\"Rule\", String.format(\"OR('%s.admin')\", initConfig.getOrgMSPID()));                String peerHost = initConfig.getPeerHostConfig().keySet().iterator().next();                String peerIp = initConfig.getPeerHostConfig().get(peerHost);                int index = peerIp.lastIndexOf(\":\");                List<Map<Object, Object>> anchorPeers = (List<Map<Object, Object>>) item.get(\"AnchorPeers\");                anchorPeers.get(0).put(\"Host\", peerHost);                anchorPeers.get(0).put(\"Port\", Integer.parseInt(peerIp.substring(index + 1)));            }        }        String firstOrdererHost = initConfig.getOrdererHostConfig().keySet().iterator().next();        String firstOrdererIp = initConfig.getOrdererHostConfig().get(firstOrdererHost);        int index = firstOrdererIp.lastIndexOf(\":\");        // Orderer        Map<Object, Object> orderer = (Map<Object, Object>) configTxEntity.get(\"Orderer\");        List<String> orderAddresses = (List<String>) orderer.get(\"Addresses\");        orderAddresses.clear();        orderAddresses.add(String.format(firstOrdererHost + firstOrdererIp.substring(index)));        // SampleMultiNodeEtcdRaft        Map<Object, Object> profile = (Map<Object, Object>) ((Map<Object, Object>) configTxEntity.get(\"Profiles\")).get(\"SampleMultiNodeEtcdRaft\");        Map<Object, Object> orderConfig = (Map<Object, Object>) profile.get(\"Orderer\");        Map<String, Object> etcdRaftConfig = (Map<String, Object>) orderConfig.get(\"EtcdRaft\");        List<Map<String, Object>> consenters = (List<Map<String, Object>>) (etcdRaftConfig).get(\"Consenters\");        consenters.clear();        consenters.addAll(this.generateOrdersConfig(initConfig));        organizations = (List<Map<Object, Object>>) orderConfig.get(\"Organizations\");        organizations.clear();        organizations.add(ordererOrg);        Map<Object, Object> capabilities = (Map<Object, Object>) orderConfig.get(\"Capabilities\");        orderAddresses = (List<String>) orderConfig.get(\"Addresses\");        orderAddresses.clear();        for (String host : initConfig.getOrdererHostConfig().keySet()) {            String ip = initConfig.getOrdererHostConfig().get(host);            orderAddresses.add(host + ip.substring(ip.lastIndexOf(\":\")));        }        orderConfig.clear();        orderConfig.putAll(orderer);        orderConfig.put(\"OrdererType\", \"etcdraft\");        orderConfig.put(\"EtcdRaft\", etcdRaftConfig);        orderConfig.put(\"Addresses\", orderAddresses);        orderConfig.put(\"Organizations\", organizations);        orderConfig.put(\"Capabilities\", capabilities);        Map<Object, Object> application = (Map<Object, Object>) profile.get(\"Application\");        organizations = (List<Map<Object, Object>>) application.get(\"Organizations\");        organizations.clear();        organizations.add(ordererOrg);        Map<Object, Object> sampleConsortium = (Map<Object, Object>) ((Map<Object, Object>) profile.get(\"Consortiums\")).get(\"SampleConsortium\");        organizations = (List<Map<Object, Object>>) sampleConsortium.get(\"Organizations\");        organizations.clear();        organizations.add(org1);        // PrivateChannel        profile = (Map<Object, Object>) ((Map<Object, Object>) configTxEntity.get(\"Profiles\")).get(\"PrivateChannel\");        application = (Map<Object, Object>) profile.get(\"Application\");        organizations = (List<Map<Object, Object>>) application.get(\"Organizations\");        organizations.clear();        organizations.add(org1);        // OneOrgChannel        profile = (Map<Object, Object>) ((Map<Object, Object>) configTxEntity.get(\"Profiles\")).get(\"OneOrgChannel\");        application = (Map<Object, Object>) profile.get(\"Application\");        organizations = (List<Map<Object, Object>>) application.get(\"Organizations\");        organizations.clear();        organizations.add(org1);        return writeYamlFile(configTxEntity, CONFIGTX);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/config/configGenImpl/FabricConfigGenImpl.java", "stars": "7", "class": {"name": "FabricConfigGenImpl", "extends": null, "implements": ["FabricConfigGen"], "modifiers": ["public"]}}, {"method_name": "writeYamlFile", "params": ["Map<Object,Object>", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean writeYamlFile(Map<Object, Object> configTxEntity, String fileName) {        String yamlFile = null;        if (fileName.equals(CONFIGTX)) {            yamlFile = modeService.getInitDir() + \"fabric-net/cryptoAndConfig/configtx.yaml\";        }        if (fileName.equals(CRYPTO)) {            yamlFile = modeService.getInitDir() + \"fabric-net/cryptoAndConfig/crypto-config.yaml\";        }        if (StringUtils.isEmpty(yamlFile)) {            return false;        }        return yamlFileService.writeObjectToYamlFile(configTxEntity, yamlFile);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/config/configGenImpl/FabricConfigGenImpl.java", "stars": "7", "class": {"name": "FabricConfigGenImpl", "extends": null, "implements": ["FabricConfigGen"], "modifiers": ["public"]}}, {"method_name": "loadTemplate", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Map<Object,Object>", "snippet": "    private Map<Object, Object> loadTemplate(String fileName) {        String txTempFile = null;        if (fileName.equals(CONFIGTX)) {            txTempFile = modeService.getInitDir() + \"template/configtx.yaml\";        }        if (fileName.equals(CRYPTO)) {            txTempFile = modeService.getInitDir() + \"template/crypto-config.yaml\";        }        if (StringUtils.isEmpty(txTempFile) || StringUtils.isEmpty(fileName)) {            return null;        }        Map<Object, Object> result = null;        try {            result = yamlFileService.loadYamlFile(txTempFile);        } catch (FileNotFoundException e) {            // log.error(\"\u627e\u4e0d\u5230\u6307\u5b9a\u6587\u4ef6,\u6587\u4ef6\u8def\u5f84:\" + txTempFile);            log.error(\"Cannot find the specified file, file path:\" + txTempFile);            e.printStackTrace();        }        return result;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/config/configGenImpl/FabricConfigGenImpl.java", "stars": "7", "class": {"name": "FabricConfigGenImpl", "extends": null, "implements": ["FabricConfigGen"], "modifiers": ["public"]}}, {"method_name": "generateOrdersConfig", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "List<Map>", "snippet": "    private List<Map<String, Object>> generateOrdersConfig(InitConfigEntity configEntity) {        String tlsFormat = \"crypto-config/ordererOrganizations/%s/orderers/%s/tls/server.crt\";        List<Map<String, Object>> config = new ArrayList<>();        for (String host : configEntity.getOrdererHostConfig().keySet()) {            String ip = configEntity.getOrdererHostConfig().get(host);            int index = ip.lastIndexOf(\":\");            Map<String, Object> orderConfig = new HashMap<>();            orderConfig.put(\"Host\", host);            orderConfig.put(\"Port\", Integer.parseInt(ip.substring(index + 1)));            String tls = String.format(tlsFormat, configEntity.getOrdererDomain(), host);            orderConfig.put(\"ClientTLSCert\", tls);            orderConfig.put(\"ServerTLSCert\", tls);            config.add(orderConfig);        }        return config;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/config/configGenImpl/FabricConfigGenImpl.java", "stars": "7", "class": {"name": "FabricConfigGenImpl", "extends": null, "implements": ["FabricConfigGen"], "modifiers": ["public"]}}, {"method_name": "cryptoGen", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean cryptoGen(InitConfigEntity initConfig) {        Map<Object, Object> cryptoConfig = this.loadTemplate(CRYPTO);        List<Map<Object, Object>> ordererOrgs = (List<Map<Object, Object>>) cryptoConfig.get(\"OrdererOrgs\");        ordererOrgs.get(0).put(\"Domain\", initConfig.getOrdererDomain());        List<Map<Object, Object>> specs = (List<Map<Object, Object>>) ordererOrgs.get(0).get(\"Specs\");        specs.clear();        for (String orderHost : initConfig.getOrdererHostConfig().keySet()) {            int index = orderHost.indexOf(\".\");            specs.add(new HashMap<Object, Object>() {{                put(\"Hostname\", orderHost.substring(0, index));            }});        }        List<Map<Object, Object>> peerOrgs = (List<Map<Object, Object>>) cryptoConfig.get(\"PeerOrgs\");        peerOrgs.get(0).put(\"Name\", initConfig.getOrgMSPID().replace(\"MSP\", \"\"));        peerOrgs.get(0).put(\"Domain\", initConfig.getPeerDomain());        List<Map<Object, Object>> peerSpecs = (List<Map<Object, Object>>) peerOrgs.get(0).get(\"Specs\");        peerSpecs.clear();        for (String peerHost : initConfig.getPeerHostConfig().keySet()) {            String peerHostName = peerHost.split(\".\" + initConfig.getPeerDomain())[0];            peerSpecs.add(new HashMap<Object, Object>() {{                put(\"Hostname\", peerHostName);            }});        }        return writeYamlFile(cryptoConfig, CRYPTO);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/config/configGenImpl/FabricConfigGenImpl.java", "stars": "7", "class": {"name": "FabricConfigGenImpl", "extends": null, "implements": ["FabricConfigGen"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCount ()\t{\t\treturn n_getCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getCount ();\tpublic boolean hasStableIds ()\t{\t\treturn n_hasStableIds ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "hasStableIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean hasStableIds ()\t{\t\treturn n_hasStableIds ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_hasStableIds", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_hasStableIds ();\tpublic java.lang.Object getItem (int p0)\t{\t\treturn n_getItem (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "\tpublic java.lang.Object getItem (int p0)\t{\t\treturn n_getItem (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItem", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "java", "snippet": "\tprivate native java.lang.Object n_getItem (int p0);\tpublic int getViewTypeCount ()\t{\t\treturn n_getViewTypeCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getViewTypeCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getViewTypeCount ()\t{\t\treturn n_getViewTypeCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getViewTypeCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getViewTypeCount ();\tpublic boolean areAllItemsEnabled ()\t{\t\treturn n_areAllItemsEnabled ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "areAllItemsEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean areAllItemsEnabled ()\t{\t\treturn n_areAllItemsEnabled ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_areAllItemsEnabled", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_areAllItemsEnabled ();\tpublic long getItemId (int p0)\t{\t\treturn n_getItemId (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long getItemId (int p0)\t{\t\treturn n_getItemId (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemId", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "long", "snippet": "\tprivate native long n_getItemId (int p0);\tpublic int getItemViewType (int p0)\t{\t\treturn n_getItemViewType (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getItemViewType (int p0)\t{\t\treturn n_getItemViewType (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemViewType", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getItemViewType (int p0);\tpublic android.view.View getView (int p0, android.view.View p1, android.view.ViewGroup p2)\t{\t\treturn n_getView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View getView (int p0, android.view.View p1, android.view.ViewGroup p2)\t{\t\treturn n_getView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getView", "params": ["int", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_getView (int p0, android.view.View p1, android.view.ViewGroup p2);\tpublic boolean isEnabled (int p0)\t{\t\treturn n_isEnabled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "isEnabled", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isEnabled (int p0)\t{\t\treturn n_isEnabled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_isEnabled", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_isEnabled (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewAdapter.java", "stars": "2", "class": {"name": "ListViewAdapter", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getOptionSyntax", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOptionSyntax() {        return \"[port|debug]\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/ServerCommand.java", "stars": "2", "class": {"name": "ServerCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "displayOptionUsage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayOptionUsage() {        println(\"  port  <portNumber>   \u542f\u52a8\u670d\u52a1\u5668\u5e76\u6307\u5b9a\u7aef\u53e3\u53f7\");        println(\"  debug   \u542f\u7528debug\u6a21\u5f0f\");    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/ServerCommand.java", "stars": "2", "class": {"name": "ServerCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return \"server\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/ServerCommand.java", "stars": "2", "class": {"name": "ServerCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return \"Start server default port 8000\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/ServerCommand.java", "stars": "2", "class": {"name": "ServerCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["Deque<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(Deque<String> options) {        count++;        ensureMaxArgumentCount(options, 3);        ensureMinArgumentCount(options, 0);        if(options.isEmpty()){            BoredServer.start(port);            return;        }        String command = options.remove();        String portStr = StrUtil.EMPTY;        switch (command) {            case \"debug\":                LogManager.getRootLogger().setLevel(Level.DEBUG);                break;            case \"port\":                try {                    if (options.isEmpty()) {                        printlnError(\"Port number must be number,but the input is empty\");                        nonError = false;                        return;                    }                    portStr = options.remove();                    port = Integer.parseInt(portStr);                } catch (Exception e) {                    printlnError(\"Port number must be number,but the input is '{}'\", portStr);                    nonError = false;                }                break;            default:                printlnError(\"Unknown server option {}\", command);                nonError = false;        }        if (!options.isEmpty()) {            this.execute(options);        }        if ((count == 2 || options.isEmpty()) && nonError) {            BoredServer.start(port);        }    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/ServerCommand.java", "stars": "2", "class": {"name": "ServerCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\tprotected Substring getInstance() {\t\treturn new RightMaximalSubstring(alphabetLength,log2alphabetLength,bitsToEncodeAlphabetLength,bwtLength,log2BWTLength,bitsToEncodeBWTLength);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RightMaximalSubstring.java", "stars": "2", "class": {"name": "RightMaximalSubstring", "extends": "Substring", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEpsilon", "params": ["long"], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\tprotected Substring getEpsilon(long[] C) {\t\tRightMaximalSubstring out = (RightMaximalSubstring)getInstance();\t\t// $bwtIntervals$\t\tout.nIntervals=alphabetLength+1;\t\tout.bwtIntervals[0][0]=0;  // $#$\t\tout.bwtIntervals[0][1]=0;\t\tfor (int i=0; i<alphabetLength-1; i++) {  // Other characters\t\t\tout.bwtIntervals[i+1][0]=C[i];\t\t\tout.bwtIntervals[i+1][1]=C[i+1]-1;\t\t}\t\tout.bwtIntervals[alphabetLength][0]=C[alphabetLength-1];\t\tout.bwtIntervals[alphabetLength][1]=bwtLength-1;\t\t// Other variables\t\tout.address=-1;\t\tout.log2address=-1;\t\tout.previousAddress=-1;\t\tout.length=0;\t\tout.log2length=-1;\t\tout.bitsToEncodeLength=1;\t\tout.firstCharacter=-1;\t\tout.hasBeenExtended=false;\t\tout.hasBeenStolen=false;\t\tout.computeRightContext();\t\treturn out;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RightMaximalSubstring.java", "stars": "2", "class": {"name": "RightMaximalSubstring", "extends": "Substring", "implements": null, "modifiers": ["public"]}}, {"method_name": "computeRightContext", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "void", "snippet": "\tprotected final void computeRightContext() {\t\trightContext=0;\t\tfor (int c=0; c<nIntervals; c++) {\t\t\tif (bwtIntervals[c][1]>=bwtIntervals[c][0]) rightContext++;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RightMaximalSubstring.java", "stars": "2", "class": {"name": "RightMaximalSubstring", "extends": "Substring", "implements": null, "modifiers": ["public"]}}, {"method_name": "initAfterExtending", "params": ["Substring", "int", "RigidStream", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void initAfterExtending(Substring suffix, int firstCharacter, RigidStream characterStack, int[] buffer) {\t\tsuper.initAfterExtending(suffix,firstCharacter,characterStack,buffer);\t\tcomputeRightContext();\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RightMaximalSubstring.java", "stars": "2", "class": {"name": "RightMaximalSubstring", "extends": "Substring", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldBeExtendedLeft", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean shouldBeExtendedLeft() {\t\treturn rightContext>1;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RightMaximalSubstring.java", "stars": "2", "class": {"name": "RightMaximalSubstring", "extends": "Substring", "implements": null, "modifiers": ["public"]}}, {"method_name": "frequency", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "long", "snippet": "\tprotected long frequency() {\t\treturn bwtIntervals[alphabetLength][1]>=bwtIntervals[0][0]?bwtIntervals[alphabetLength][1]-bwtIntervals[0][0]+1:0;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RightMaximalSubstring.java", "stars": "2", "class": {"name": "RightMaximalSubstring", "extends": "Substring", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\tString out = super.toString()+\" | \";\t\tout+=\"rightContext=\"+rightContext+\" \";\t\treturn out;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RightMaximalSubstring.java", "stars": "2", "class": {"name": "RightMaximalSubstring", "extends": "Substring", "implements": null, "modifiers": ["public"]}}, {"method_name": "getKind", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getKind() {        return kind;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/GamepadButtonEvent.java", "stars": "4", "class": {"name": "GamepadButtonEvent", "extends": "GamepadEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "getButtonNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getButtonNumber() {        return buttonNumber;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/GamepadButtonEvent.java", "stars": "4", "class": {"name": "GamepadButtonEvent", "extends": "GamepadEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, 100L, null);    verify(ps).setLong(1, 100L);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LongTypeHandlerTest.java", "stars": "15", "class": {"name": "LongTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getLong(\"column\")).thenReturn(100L);    assertEquals(Long.valueOf(100L), TYPE_HANDLER.getResult(rs, \"column\"));    when(rs.getLong(\"column\")).thenReturn(0L);    assertEquals(Long.valueOf(0L), TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LongTypeHandlerTest.java", "stars": "15", "class": {"name": "LongTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getLong(\"column\")).thenReturn(0L);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LongTypeHandlerTest.java", "stars": "15", "class": {"name": "LongTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getLong(1)).thenReturn(100L);    assertEquals(Long.valueOf(100L), TYPE_HANDLER.getResult(rs, 1));    when(rs.getLong(1)).thenReturn(0L);    assertEquals(Long.valueOf(0L), TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LongTypeHandlerTest.java", "stars": "15", "class": {"name": "LongTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getLong(1)).thenReturn(0L);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LongTypeHandlerTest.java", "stars": "15", "class": {"name": "LongTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getLong(1)).thenReturn(100L);    assertEquals(Long.valueOf(100L), TYPE_HANDLER.getResult(cs, 1));    when(cs.getLong(1)).thenReturn(0L);    assertEquals(Long.valueOf(0L), TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LongTypeHandlerTest.java", "stars": "15", "class": {"name": "LongTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getLong(1)).thenReturn(0L);    when(cs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LongTypeHandlerTest.java", "stars": "15", "class": {"name": "LongTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "onApplyWindowInsets", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.support.v4.view.WindowInsetsCompat onApplyWindowInsets (android.view.View p0, android.support.v4.view.WindowInsetsCompat p1)\t{\t\treturn n_onApplyWindowInsets (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/OnApplyWindowInsetsListenerImplementor.java", "stars": "2", "class": {"name": "OnApplyWindowInsetsListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onApplyWindowInsets", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.support.v4.view.WindowInsetsCompat n_onApplyWindowInsets (android.view.View p0, android.support.v4.view.WindowInsetsCompat p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/OnApplyWindowInsetsListenerImplementor.java", "stars": "2", "class": {"name": "OnApplyWindowInsetsListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/OnApplyWindowInsetsListenerImplementor.java", "stars": "2", "class": {"name": "OnApplyWindowInsetsListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/OnApplyWindowInsetsListenerImplementor.java", "stars": "2", "class": {"name": "OnApplyWindowInsetsListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onScrollChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onScrollChanged(final int l, final int t, final int oldl,                                   final int oldt) {        super.onScrollChanged(l, t, oldl, oldt);        if (mOnScrollListener != null) {            mOnScrollListener.onScroll(l, t, oldl, oldt);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/ScrollWebView.java", "stars": "2", "class": {"name": "ScrollWebView", "extends": "WebView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOnScrollListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "OnScrollListener", "snippet": "    public OnScrollListener getOnScrollListener() {        return mOnScrollListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/ScrollWebView.java", "stars": "2", "class": {"name": "ScrollWebView", "extends": "WebView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnScrollListener", "params": ["OnScrollListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnScrollListener(final OnScrollListener onScrollChangedCallback) {        mOnScrollListener = onScrollChangedCallback;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/ScrollWebView.java", "stars": "2", "class": {"name": "ScrollWebView", "extends": "WebView", "implements": null, "modifiers": ["public"]}}, {"method_name": "calculate", "params": ["double", "double", "double", "int", "DoubleUnaryOperator"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String calculate(double searched, double start, double end, int n, DoubleUnaryOperator function) throws Exception {        validate(searched, start, end, n);        var points = arrayPoints(start, end, n, function);        var xs = points.getKey();        var ys = points.getValue();        int length = xs.length;        double sumX = Arrays.stream(xs).sum();        double sumX2 = Arrays.stream(xs).map(x -> Math.pow(x, 2)).sum();        double sumY = Arrays.stream(ys).map(Math::log).sum();        double sumXY = 0.00;        for (int i = 0; i < length; i++)            sumXY = sumXY + (xs[i] * (Math.log(ys[i])));        double b = ((length * sumXY) - (sumX * sumY)) / (length * sumX2 - (sumX * sumX));        double a = Math.pow(Math.E, (sumY - (b * sumX)) / length);        DoubleUnaryOperator y = (double x) -> a * (Math.pow(Math.E, b * x));        return \"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \" + y.applyAsDouble(searched);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/nmlab6/regression/ExponentialRegression.java", "stars": "2", "class": {"name": "ExponentialRegression", "extends": null, "implements": ["Regression"], "modifiers": ["public"]}}, {"method_name": "handleEntidadeNaoEncontrada", "params": ["NegocioException", "WebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Object>", "snippet": "\tpublic ResponseEntity<Object> handleEntidadeNaoEncontrada(NegocioException ex, WebRequest request) {\t\tvar status = HttpStatus.NOT_FOUND;\t\tvar problema = new Problema();\t\tproblema.setStatus(status.value());\t\tproblema.setTitulo(ex.getMessage());\t\tproblema.setDataHora(OffsetDateTime.now());\t\treturn handleExceptionInternal(ex, problema, new HttpHeaders(), status, request);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/ApiExceptionHandler.java", "stars": "2", "class": {"name": "ApiExceptionHandler", "extends": "ResponseEntityExceptionHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleNegocio", "params": ["NegocioException", "WebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Object>", "snippet": "\tpublic ResponseEntity<Object> handleNegocio(NegocioException ex, WebRequest request) {\t\tvar status = HttpStatus.BAD_REQUEST;\t\tvar problema = new Problema();\t\tproblema.setStatus(status.value());\t\tproblema.setTitulo(ex.getMessage());\t\tproblema.setDataHora(OffsetDateTime.now());\t\treturn handleExceptionInternal(ex, problema, new HttpHeaders(), status, request);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/ApiExceptionHandler.java", "stars": "2", "class": {"name": "ApiExceptionHandler", "extends": "ResponseEntityExceptionHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleMethodArgumentNotValid", "params": ["MethodArgumentNotValidException", "HttpHeaders", "HttpStatus", "WebRequest"], "throws": null, "modifiers": ["protected"], "return_type": "ResponseEntity<Object>", "snippet": "\tprotected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,\t\t\tHttpHeaders headers, HttpStatus status, WebRequest request) {\t\tvar campos = new ArrayList<Problema.Campo>();\t\tfor (ObjectError error : ex.getBindingResult().getAllErrors()) {\t\t\tString nome = ((FieldError) error).getField();\t\t\t// Aqui vai usar a mensagem traduzida no message.properties\t\t\tString mensagem = messageSource.getMessage(error, LocaleContextHolder.getLocale());\t\t\tcampos.add(new Problema.Campo(nome, mensagem));\t\t}\t\tvar problema = new Problema();\t\tproblema.setStatus(status.value());\t\tproblema.setTitulo(\"Um ou mais campos est\u00e3o inv\u00e1lidos. \" + \"Fa\u00e7a o preenchimento correto e tente novamente\");\t\tproblema.setDataHora(OffsetDateTime.now());\t\tproblema.setCampos(campos);\t\treturn super.handleExceptionInternal(ex, problema, headers, status, request);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/ApiExceptionHandler.java", "stars": "2", "class": {"name": "ApiExceptionHandler", "extends": "ResponseEntityExceptionHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "ok", "params": ["String", "T"], "throws": null, "modifiers": ["public", "static"], "return_type": "BaseResponse<T>", "snippet": "    public static <T> BaseResponse<T> ok(@Nullable String message, @Nullable T data) {        return new BaseResponse<>(HttpStatus.OK.value(), message, data);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/BaseResponse.java", "stars": "1", "class": {"name": "BaseResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ok", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "BaseResponse<T>", "snippet": "    public static <T> BaseResponse<T> ok(@Nullable String message) {        return ok(message, null);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/BaseResponse.java", "stars": "1", "class": {"name": "BaseResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ok", "params": ["T"], "throws": null, "modifiers": ["public", "static"], "return_type": "BaseResponse<T>", "snippet": "    public static <T> BaseResponse<T> ok(@NonNull T data) {        return new BaseResponse<>(HttpStatus.OK.value(), HttpStatus.OK.getReasonPhrase(), data);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/BaseResponse.java", "stars": "1", "class": {"name": "BaseResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnknownFields", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "com", "snippet": "  public final com.google.protobuf.UnknownFieldSet  getUnknownFields() {    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDescriptor", "params": [], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "com", "snippet": "  public static final com.google.protobuf.Descriptors.Descriptor      getDescriptor() {    return generated.xn.services.ex.api.grpcstream.protos.SegmentProtos.internal_static_data_services_seg_SegmentReq_descriptor;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "internalGetFieldAccessorTable", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "com", "snippet": "  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable      internalGetFieldAccessorTable() {    return generated.xn.services.ex.api.grpcstream.protos.SegmentProtos.internal_static_data_services_seg_SegmentReq_fieldAccessorTable        .ensureFieldAccessorsInitialized(            generated.xn.services.ex.api.grpcstream.protos.SegmentReq.class, generated.xn.services.ex.api.grpcstream.protos.SegmentReq.Builder.class);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "  public java.lang.String getId() {    java.lang.Object ref = id_;    if (ref instanceof java.lang.String) {      return (java.lang.String) ref;    } else {      com.google.protobuf.ByteString bs =           (com.google.protobuf.ByteString) ref;      java.lang.String s = bs.toStringUtf8();      id_ = s;      return s;    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getIdBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "  public com.google.protobuf.ByteString      getIdBytes() {    java.lang.Object ref = id_;    if (ref instanceof java.lang.String) {      com.google.protobuf.ByteString b =           com.google.protobuf.ByteString.copyFromUtf8(              (java.lang.String) ref);      id_ = b;      return b;    } else {      return (com.google.protobuf.ByteString) ref;    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getSegment", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSegment() {    return segment_;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getMac", "params": [], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "  public java.lang.String getMac() {    java.lang.Object ref = mac_;    if (ref instanceof java.lang.String) {      return (java.lang.String) ref;    } else {      com.google.protobuf.ByteString bs =           (com.google.protobuf.ByteString) ref;      java.lang.String s = bs.toStringUtf8();      mac_ = s;      return s;    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getMacBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "  public com.google.protobuf.ByteString      getMacBytes() {    java.lang.Object ref = mac_;    if (ref instanceof java.lang.String) {      com.google.protobuf.ByteString b =           com.google.protobuf.ByteString.copyFromUtf8(              (java.lang.String) ref);      mac_ = b;      return b;    } else {      return (com.google.protobuf.ByteString) ref;    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getClient", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getClient() {    return client_;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getReqdate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getReqdate() {    return reqdate_;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "  public final boolean isInitialized() {    byte isInitialized = memoizedIsInitialized;    if (isInitialized == 1) return true;    if (isInitialized == 0) return false;    memoizedIsInitialized = 1;    return true;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "writeTo", "params": ["com"], "throws": ["java.io.IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void writeTo(com.google.protobuf.CodedOutputStream output)                      throws java.io.IOException {    if (!getIdBytes().isEmpty()) {      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);    }    if (segment_ != 0) {      output.writeInt32(2, segment_);    }    if (!getMacBytes().isEmpty()) {      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, mac_);    }    if (client_ != 0) {      output.writeInt32(4, client_);    }    if (reqdate_ != 0L) {      output.writeInt64(5, reqdate_);    }  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getSerializedSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSerializedSize() {    int size = memoizedSize;    if (size != -1) return size;    size = 0;    if (!getIdBytes().isEmpty()) {      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);    }    if (segment_ != 0) {      size += com.google.protobuf.CodedOutputStream        .computeInt32Size(2, segment_);    }    if (!getMacBytes().isEmpty()) {      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, mac_);    }    if (client_ != 0) {      size += com.google.protobuf.CodedOutputStream        .computeInt32Size(4, client_);    }    if (reqdate_ != 0L) {      size += com.google.protobuf.CodedOutputStream        .computeInt64Size(5, reqdate_);    }    memoizedSize = size;    return size;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "equals", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(final java.lang.Object obj) {    if (obj == this) {     return true;    }    if (!(obj instanceof generated.xn.services.ex.api.grpcstream.protos.SegmentReq)) {      return super.equals(obj);    }    generated.xn.services.ex.api.grpcstream.protos.SegmentReq other = (generated.xn.services.ex.api.grpcstream.protos.SegmentReq) obj;    boolean result = true;    result = result && getId()        .equals(other.getId());    result = result && (getSegment()        == other.getSegment());    result = result && getMac()        .equals(other.getMac());    result = result && (getClient()        == other.getClient());    result = result && (getReqdate()        == other.getReqdate());    return result;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    if (memoizedHashCode != 0) {      return memoizedHashCode;    }    int hash = 41;    hash = (19 * hash) + getDescriptorForType().hashCode();    hash = (37 * hash) + ID_FIELD_NUMBER;    hash = (53 * hash) + getId().hashCode();    hash = (37 * hash) + SEGMENT_FIELD_NUMBER;    hash = (53 * hash) + getSegment();    hash = (37 * hash) + MAC_FIELD_NUMBER;    hash = (53 * hash) + getMac().hashCode();    hash = (37 * hash) + CLIENT_FIELD_NUMBER;    hash = (53 * hash) + getClient();    hash = (37 * hash) + REQDATE_FIELD_NUMBER;    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(        getReqdate());    hash = (29 * hash) + unknownFields.hashCode();    memoizedHashCode = hash;    return hash;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseFrom(      com.google.protobuf.ByteString data)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com", "com"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseFrom(      com.google.protobuf.ByteString data,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["byte"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseFrom(byte[] data)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["byte", "com"], "throws": ["com.google.protobuf.InvalidProtocolBufferException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseFrom(      byte[] data,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws com.google.protobuf.InvalidProtocolBufferException {    return PARSER.parseFrom(data, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["java"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseFrom(java.io.InputStream input)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["java", "com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseFrom(      java.io.InputStream input,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseDelimitedFrom", "params": ["java"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseDelimitedFrom(java.io.InputStream input)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseDelimitedWithIOException(PARSER, input);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseDelimitedFrom", "params": ["java", "com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseDelimitedFrom(      java.io.InputStream input,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseFrom(      com.google.protobuf.CodedInputStream input)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parseFrom", "params": ["com", "com"], "throws": ["java.io.IOException"], "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq parseFrom(      com.google.protobuf.CodedInputStream input,      com.google.protobuf.ExtensionRegistryLite extensionRegistry)      throws java.io.IOException {    return com.google.protobuf.GeneratedMessageV3        .parseWithIOException(PARSER, input, extensionRegistry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilderForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "  public Builder newBuilderForType() { return newBuilder(); }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilder", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "  public static Builder newBuilder() {    return DEFAULT_INSTANCE.toBuilder();  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilder", "params": ["generated"], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "  public static Builder newBuilder(generated.xn.services.ex.api.grpcstream.protos.SegmentReq prototype) {    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "toBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "  public Builder toBuilder() {    return this == DEFAULT_INSTANCE        ? new Builder() : new Builder().mergeFrom(this);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "newBuilderForType", "params": ["com"], "throws": null, "modifiers": ["protected"], "return_type": "Builder", "snippet": "  protected Builder newBuilderForType(      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {    Builder builder = new Builder(parent);    return builder;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDefaultInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "generated", "snippet": "  public static generated.xn.services.ex.api.grpcstream.protos.SegmentReq getDefaultInstance() {    return DEFAULT_INSTANCE;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "parser", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "com", "snippet": "  public static com.google.protobuf.Parser<SegmentReq> parser() {    return PARSER;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getParserForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "  public com.google.protobuf.Parser<SegmentReq> getParserForType() {    return PARSER;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDefaultInstanceForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "  public generated.xn.services.ex.api.grpcstream.protos.SegmentReq getDefaultInstanceForType() {    return DEFAULT_INSTANCE;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "SegmentReq", "extends": "com", "implements": ["SegmentReqOrBuilder"], "modifiers": ["public", "final"]}}, {"method_name": "getDescriptor", "params": [], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "com", "snippet": "    public static final com.google.protobuf.Descriptors.Descriptor        getDescriptor() {      return generated.xn.services.ex.api.grpcstream.protos.SegmentProtos.internal_static_data_services_seg_SegmentReq_descriptor;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "internalGetFieldAccessorTable", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "com", "snippet": "    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable        internalGetFieldAccessorTable() {      return generated.xn.services.ex.api.grpcstream.protos.SegmentProtos.internal_static_data_services_seg_SegmentReq_fieldAccessorTable          .ensureFieldAccessorsInitialized(              generated.xn.services.ex.api.grpcstream.protos.SegmentReq.class, generated.xn.services.ex.api.grpcstream.protos.SegmentReq.Builder.class);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "maybeForceBuilderInitialization", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void maybeForceBuilderInitialization() {      if (com.google.protobuf.GeneratedMessageV3              .alwaysUseFieldBuilders) {      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clear() {      super.clear();      id_ = \"\";      segment_ = 0;      mac_ = \"\";      client_ = 0;      reqdate_ = 0L;      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getDescriptorForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.Descriptors.Descriptor        getDescriptorForType() {      return generated.xn.services.ex.api.grpcstream.protos.SegmentProtos.internal_static_data_services_seg_SegmentReq_descriptor;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getDefaultInstanceForType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.xn.services.ex.api.grpcstream.protos.SegmentReq getDefaultInstanceForType() {      return generated.xn.services.ex.api.grpcstream.protos.SegmentReq.getDefaultInstance();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.xn.services.ex.api.grpcstream.protos.SegmentReq build() {      generated.xn.services.ex.api.grpcstream.protos.SegmentReq result = buildPartial();      if (!result.isInitialized()) {        throw newUninitializedMessageException(result);      }      return result;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "buildPartial", "params": [], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.xn.services.ex.api.grpcstream.protos.SegmentReq buildPartial() {      generated.xn.services.ex.api.grpcstream.protos.SegmentReq result = new generated.xn.services.ex.api.grpcstream.protos.SegmentReq(this);      result.id_ = id_;      result.segment_ = segment_;      result.mac_ = mac_;      result.client_ = client_;      result.reqdate_ = reqdate_;      onBuilt();      return result;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clone() {      return (Builder) super.clone();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setField", "params": ["com", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setField(        com.google.protobuf.Descriptors.FieldDescriptor field,        Object value) {      return (Builder) super.setField(field, value);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearField", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearField(        com.google.protobuf.Descriptors.FieldDescriptor field) {      return (Builder) super.clearField(field);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearOneof", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearOneof(        com.google.protobuf.Descriptors.OneofDescriptor oneof) {      return (Builder) super.clearOneof(oneof);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setRepeatedField", "params": ["com", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setRepeatedField(        com.google.protobuf.Descriptors.FieldDescriptor field,        int index, Object value) {      return (Builder) super.setRepeatedField(field, index, value);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "addRepeatedField", "params": ["com", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder addRepeatedField(        com.google.protobuf.Descriptors.FieldDescriptor field,        Object value) {      return (Builder) super.addRepeatedField(field, value);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeFrom", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder mergeFrom(com.google.protobuf.Message other) {      if (other instanceof generated.xn.services.ex.api.grpcstream.protos.SegmentReq) {        return mergeFrom((generated.xn.services.ex.api.grpcstream.protos.SegmentReq)other);      } else {        super.mergeFrom(other);        return this;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeFrom", "params": ["generated"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder mergeFrom(generated.xn.services.ex.api.grpcstream.protos.SegmentReq other) {      if (other == generated.xn.services.ex.api.grpcstream.protos.SegmentReq.getDefaultInstance()) return this;      if (!other.getId().isEmpty()) {        id_ = other.id_;        onChanged();      }      if (other.getSegment() != 0) {        setSegment(other.getSegment());      }      if (!other.getMac().isEmpty()) {        mac_ = other.mac_;        onChanged();      }      if (other.getClient() != 0) {        setClient(other.getClient());      }      if (other.getReqdate() != 0L) {        setReqdate(other.getReqdate());      }      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "    public final boolean isInitialized() {      return true;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeFrom", "params": ["com", "com"], "throws": ["java.io.IOException"], "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder mergeFrom(        com.google.protobuf.CodedInputStream input,        com.google.protobuf.ExtensionRegistryLite extensionRegistry)        throws java.io.IOException {      generated.xn.services.ex.api.grpcstream.protos.SegmentReq parsedMessage = null;      try {        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);      } catch (com.google.protobuf.InvalidProtocolBufferException e) {        parsedMessage = (generated.xn.services.ex.api.grpcstream.protos.SegmentReq) e.getUnfinishedMessage();        throw e.unwrapIOException();      } finally {        if (parsedMessage != null) {          mergeFrom(parsedMessage);        }      }      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "    public java.lang.String getId() {      java.lang.Object ref = id_;      if (!(ref instanceof java.lang.String)) {        com.google.protobuf.ByteString bs =            (com.google.protobuf.ByteString) ref;        java.lang.String s = bs.toStringUtf8();        id_ = s;        return s;      } else {        return (java.lang.String) ref;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getIdBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.ByteString        getIdBytes() {      java.lang.Object ref = id_;      if (ref instanceof String) {        com.google.protobuf.ByteString b =             com.google.protobuf.ByteString.copyFromUtf8(                (java.lang.String) ref);        id_ = b;        return b;      } else {        return (com.google.protobuf.ByteString) ref;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setId", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setId(        java.lang.String value) {      if (value == null) {    throw new NullPointerException();  }        id_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearId() {            id_ = getDefaultInstance().getId();      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setIdBytes", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setIdBytes(        com.google.protobuf.ByteString value) {      if (value == null) {    throw new NullPointerException();  }  checkByteStringIsUtf8(value);            id_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getSegment", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSegment() {      return segment_;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setSegment", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setSegment(int value) {            segment_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearSegment", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearSegment() {            segment_ = 0;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getMac", "params": [], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "    public java.lang.String getMac() {      java.lang.Object ref = mac_;      if (!(ref instanceof java.lang.String)) {        com.google.protobuf.ByteString bs =            (com.google.protobuf.ByteString) ref;        java.lang.String s = bs.toStringUtf8();        mac_ = s;        return s;      } else {        return (java.lang.String) ref;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getMacBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.ByteString        getMacBytes() {      java.lang.Object ref = mac_;      if (ref instanceof String) {        com.google.protobuf.ByteString b =             com.google.protobuf.ByteString.copyFromUtf8(                (java.lang.String) ref);        mac_ = b;        return b;      } else {        return (com.google.protobuf.ByteString) ref;      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMac", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setMac(        java.lang.String value) {      if (value == null) {    throw new NullPointerException();  }        mac_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearMac", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearMac() {            mac_ = getDefaultInstance().getMac();      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMacBytes", "params": ["com"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setMacBytes(        com.google.protobuf.ByteString value) {      if (value == null) {    throw new NullPointerException();  }  checkByteStringIsUtf8(value);            mac_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getClient", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getClient() {      return client_;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setClient", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setClient(int value) {            client_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearClient", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearClient() {            client_ = 0;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getReqdate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getReqdate() {      return reqdate_;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setReqdate", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setReqdate(long value) {            reqdate_ = value;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "clearReqdate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder clearReqdate() {            reqdate_ = 0L;      onChanged();      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setUnknownFields", "params": ["com"], "throws": null, "modifiers": ["public", "final"], "return_type": "Builder", "snippet": "    public final Builder setUnknownFields(        final com.google.protobuf.UnknownFieldSet unknownFields) {      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "mergeUnknownFields", "params": ["com"], "throws": null, "modifiers": ["public", "final"], "return_type": "Builder", "snippet": "    public final Builder mergeUnknownFields(        final com.google.protobuf.UnknownFieldSet unknownFields) {      return this;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentReq.java", "stars": "3", "class": {"name": "Builder", "extends": "com", "implements": ["generated"], "modifiers": ["public", "final", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Connection conn = null;        Statement stmt = null;        try {            //1\u3001\u6ce8\u518c\u9a71\u52a8            Class.forName(\"com.mysql.cj.jdbc.Driver\");            //2\u3001\u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61            conn = DriverManager.getConnection(\"jdbc:mysql:///db1\", \"root\", \"\");            //3\u3001\u5b9a\u4e49 sql            String sql = \"update student set sex = 8\";            //4\u3001\u83b7\u53d6\u6267\u884c sql \u5bf9\u8c61            stmt = conn.createStatement();            //5\u3001\u6267\u884c sql            int count = stmt.executeUpdate(sql);            System.out.println(count);            if (count > 0) {                System.out.println(\"\u4fee\u6539\u6210\u529f\uff01\");            }else{                System.out.println(\"\u4fee\u6539\u5931\u8d25\uff01\");            }        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (SQLException throwables) {            throwables.printStackTrace();        } finally {            if(stmt != null){                try {                    stmt.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }            if(conn != null){                try {                    conn.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Demo/JdbcDemo3.java", "stars": "2", "class": {"name": "JdbcDemo3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "count", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int count(int jobId) {        // cache clear        if (System.currentTimeMillis() > CACHE_VALID_TIME) {            routeCountEachJob.clear();            CACHE_VALID_TIME = System.currentTimeMillis() + 1000*60*60*24;        }        // count++        Integer count = routeCountEachJob.get(jobId);        count = (count==null || count>1000000)?(new Random().nextInt(100)):++count;  // \u521d\u59cb\u5316\u65f6\u4e3b\u52a8Random\u4e00\u6b21\uff0c\u7f13\u89e3\u9996\u6b21\u538b\u529b        routeCountEachJob.put(jobId, count);        return count;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteRound.java", "stars": "1", "class": {"name": "ExecutorRouteRound", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "route", "params": ["TriggerParam", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> route(TriggerParam triggerParam, List<String> addressList) {        String address = addressList.get(count(triggerParam.getJobId())%addressList.size());        return new ReturnT<String>(address);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteRound.java", "stars": "1", "class": {"name": "ExecutorRouteRound", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "send", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void send() {\t\tthis.rabbitTemplate.convertAndSend(\"foo\", \"hello\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-amqp/src/main/java/smoketest/amqp/Sender.java", "stars": "47572", "class": {"name": "Sender", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateAuthCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult", "snippet": "    public CommonResult generateAuthCode(String telephone) {        StringBuilder sb = new StringBuilder();        Random random = new Random();        for (int i = 0; i < 6; i++) {            sb.append(random.nextInt(10));        }        //\u9a8c\u8bc1\u7801\u7ed1\u5b9a\u624b\u673a\u53f7\u5e76\u5b58\u50a8\u5230redis        redisService.set(REDIS_KEY_PREFIX_AUTH_CODE + telephone, sb.toString());        redisService.expire(REDIS_KEY_PREFIX_AUTH_CODE + telephone, AUTH_CODE_EXPIRE_SECONDS);        return CommonResult.success(sb.toString(), \"\u83b7\u53d6\u9a8c\u8bc1\u7801\u6210\u529f\");    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/service/impl/UmsMemberServiceImpl.java", "stars": "2", "class": {"name": "UmsMemberServiceImpl", "extends": null, "implements": ["UmsMemberService"], "modifiers": ["public"]}}, {"method_name": "verifyAuthCode", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult", "snippet": "    public CommonResult verifyAuthCode(String telephone, String authCode) {        if (StringUtils.isEmpty(authCode)) {            return CommonResult.failed(\"\u8bf7\u8f93\u5165\u9a8c\u8bc1\u7801\");        }        String realAuthCode = redisService.get(REDIS_KEY_PREFIX_AUTH_CODE + telephone);        boolean result = authCode.equals(realAuthCode);        if (result) {            return CommonResult.success(null, \"\u9a8c\u8bc1\u7801\u6821\u9a8c\u6210\u529f\");        } else {            return CommonResult.failed(\"\u9a8c\u8bc1\u7801\u4e0d\u6b63\u786e\");        }    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/service/impl/UmsMemberServiceImpl.java", "stars": "2", "class": {"name": "UmsMemberServiceImpl", "extends": null, "implements": ["UmsMemberService"], "modifiers": ["public"]}}, {"method_name": "toAssemble", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void toAssemble(String datos){        //Convertir el texto normal a ensamblador, se muestran las palabras reservadas        this.dataAss = datos;    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/Conversor.java", "stars": "2", "class": {"name": "Conversor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toBinary", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void toBinary(String datos){        //Covertir el texto que estara en ensamblador a binario, si hay palabras reservadas        this.dataBi = datos;    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/Conversor.java", "stars": "2", "class": {"name": "Conversor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataAss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDataAss() {        return dataAss;    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/Conversor.java", "stars": "2", "class": {"name": "Conversor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataBi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDataBi() {        return dataBi;    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/Conversor.java", "stars": "2", "class": {"name": "Conversor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "supports", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean supports(Class<?> clazz) {\t\treturn NovoPagamentoForm.class.isAssignableFrom(clazz);\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/CCSoEhValidoParaCartaoOnlineValidator.java", "stars": "9", "class": {"name": "CCSoEhValidoParaCartaoOnlineValidator", "extends": null, "implements": ["Validator"], "modifiers": ["public"]}}, {"method_name": "validate", "params": ["Object", "Errors"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void validate(Object target, Errors errors) {\t\tNovoPagamentoForm form = (NovoPagamentoForm) target;\t\tform.validaCc(errors);\t\t\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/CCSoEhValidoParaCartaoOnlineValidator.java", "stars": "9", "class": {"name": "CCSoEhValidoParaCartaoOnlineValidator", "extends": null, "implements": ["Validator"], "modifiers": ["public"]}}, {"method_name": "doPretreatment", "params": ["Configuration", "DataBaseType"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void doPretreatment(Configuration originalConfig, DataBaseType dataBaseType) {        // \u68c0\u67e5 username/password \u914d\u7f6e\uff08\u5fc5\u586b\uff09        originalConfig.getNecessaryValue(Key.USERNAME, DBUtilErrorCode.REQUIRED_VALUE);        originalConfig.getNecessaryValue(Key.PASSWORD, DBUtilErrorCode.REQUIRED_VALUE);        doCheckBatchSize(originalConfig);        simplifyConf(originalConfig);        dealColumnConf(originalConfig);        dealWriteMode(originalConfig, dataBaseType);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/util/OriginalConfPretreatmentUtil.java", "stars": "23", "class": {"name": "OriginalConfPretreatmentUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "doCheckBatchSize", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void doCheckBatchSize(Configuration originalConfig) {        // \u68c0\u67e5batchSize \u914d\u7f6e\uff08\u9009\u586b\uff0c\u5982\u679c\u672a\u586b\u5199\uff0c\u5219\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u503c\uff09        int batchSize = originalConfig.getInt(Key.BATCH_SIZE, Constant.DEFAULT_BATCH_SIZE);        if (batchSize < 1) {            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_VALUE, String.format(                    \"\u60a8\u7684batchSize\u914d\u7f6e\u6709\u8bef. \u60a8\u6240\u914d\u7f6e\u7684\u5199\u5165\u6570\u636e\u5e93\u8868\u7684 batchSize:%s \u4e0d\u80fd\u5c0f\u4e8e1. \u63a8\u8350\u914d\u7f6e\u8303\u56f4\u4e3a\uff1a[100-1000], \u8be5\u503c\u8d8a\u5927, \u5185\u5b58\u6ea2\u51fa\u53ef\u80fd\u6027\u8d8a\u5927. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\",                    batchSize));        }        originalConfig.set(Key.BATCH_SIZE, batchSize);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/util/OriginalConfPretreatmentUtil.java", "stars": "23", "class": {"name": "OriginalConfPretreatmentUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "simplifyConf", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void simplifyConf(Configuration originalConfig) {        List<Object> connections = originalConfig.getList(Constant.CONN_MARK,                Object.class);        int tableNum = 0;        for (int i = 0, len = connections.size(); i < len; i++) {            Configuration connConf = Configuration.from(connections.get(i).toString());            String jdbcUrl = \"\";            if(DATABASE_TYPE.equals(DataBaseType.MySql)){                Map<String,Object> map = connConf.getMap(Key.JDBC_URL);                String parameter = \"\";                for(String key : map.keySet()){                    if (key.equals(Key.CONNPARM)){                        Map<String, Object> obj2Map = (Map<String, Object>) map.get(key);                        parameter = obj2Map.entrySet().stream().map(                                e->String.join(\"=\", e.getKey(), String.valueOf(e.getValue()))                        ).collect(Collectors.joining(\"&\"));                    }                 }                jdbcUrl = Key.JDBCTEM + map.get(Key.HOST).toString() + \":\" + map.get(Key.PORT).toString() + \"/\" + map.get(Key.DATABASE).toString();                if(parameter != null && parameter.length() != 0){                    jdbcUrl = Key.JDBCTEM + map.get(Key.HOST).toString() + \":\" + map.get(Key.PORT).toString() + \"/\" + map.get(Key.DATABASE).toString() + \"?\" + parameter;                }            }else {                jdbcUrl = connConf.getString(Key.JDBC_URL);            }            if (StringUtils.isBlank(jdbcUrl)) {                throw DataXException.asDataXException(DBUtilErrorCode.REQUIRED_VALUE, \"\u60a8\u672a\u914d\u7f6e\u7684\u5199\u5165\u6570\u636e\u5e93\u8868\u7684 jdbcUrl.\");            }            jdbcUrl = DATABASE_TYPE.appendJDBCSuffixForReader(jdbcUrl);            originalConfig.set(String.format(\"%s[%d].%s\", Constant.CONN_MARK, i, Key.JDBC_URL),                    jdbcUrl);            List<String> tables = connConf.getList(Key.TABLE, String.class);            if (null == tables || tables.isEmpty()) {                throw DataXException.asDataXException(DBUtilErrorCode.REQUIRED_VALUE,                        \"\u60a8\u672a\u914d\u7f6e\u5199\u5165\u6570\u636e\u5e93\u8868\u7684\u8868\u540d\u79f0. \u6839\u636e\u914d\u7f6eDataX\u627e\u4e0d\u5230\u60a8\u914d\u7f6e\u7684\u8868. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\");            }            // \u5bf9\u6bcf\u4e00\u4e2aconnection \u4e0a\u914d\u7f6e\u7684table \u9879\u8fdb\u884c\u89e3\u6790            List<String> expandedTables = TableExpandUtil                    .expandTableConf(DATABASE_TYPE, tables);            if (null == expandedTables || expandedTables.isEmpty()) {                throw DataXException.asDataXException(DBUtilErrorCode.CONF_ERROR,                        \"\u60a8\u914d\u7f6e\u7684\u5199\u5165\u6570\u636e\u5e93\u8868\u540d\u79f0\u9519\u8bef. DataX\u627e\u4e0d\u5230\u60a8\u914d\u7f6e\u7684\u8868\uff0c\u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\");            }            tableNum += expandedTables.size();            originalConfig.set(String.format(\"%s[%d].%s\", Constant.CONN_MARK,                    i, Key.TABLE), expandedTables);        }        originalConfig.set(Constant.TABLE_NUMBER_MARK, tableNum);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/util/OriginalConfPretreatmentUtil.java", "stars": "23", "class": {"name": "OriginalConfPretreatmentUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "dealColumnConf", "params": ["Configuration", "ConnectionFactory", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void dealColumnConf(Configuration originalConfig, ConnectionFactory connectionFactory, String oneTable) {        List<String> userConfiguredColumns = originalConfig.getList(Key.COLUMN, String.class);        if (null == userConfiguredColumns || userConfiguredColumns.isEmpty()) {            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_VALUE,                    \"\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5217\u914d\u7f6e\u4fe1\u606f\u6709\u8bef. \u56e0\u4e3a\u60a8\u672a\u914d\u7f6e\u5199\u5165\u6570\u636e\u5e93\u8868\u7684\u5217\u540d\u79f0\uff0cDataX\u83b7\u53d6\u4e0d\u5230\u5217\u4fe1\u606f. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\");        } else {            boolean isPreCheck = originalConfig.getBool(Key.DRYRUN, false);            List<String> allColumns;            if (isPreCheck) {                allColumns = DBUtil.getTableColumnsByConn(DATABASE_TYPE, connectionFactory.getConnecttionWithoutRetry(), oneTable, connectionFactory.getConnectionInfo());            } else {                allColumns = DBUtil.getTableColumnsByConn(DATABASE_TYPE, connectionFactory.getConnecttion(), oneTable, connectionFactory.getConnectionInfo());            }            LOG.info(\"table:[{}] all columns:[\\n{}\\n].\", oneTable,                    StringUtils.join(allColumns, \",\"));            if (1 == userConfiguredColumns.size() && \"*\".equals(userConfiguredColumns.get(0))) {                LOG.warn(\"\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5217\u914d\u7f6e\u4fe1\u606f\u5b58\u5728\u98ce\u9669. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u5199\u5165\u6570\u636e\u5e93\u8868\u7684\u5217\u4e3a*\uff0c\u5f53\u60a8\u7684\u8868\u5b57\u6bb5\u4e2a\u6570\u3001\u7c7b\u578b\u6709\u53d8\u52a8\u65f6\uff0c\u53ef\u80fd\u5f71\u54cd\u4efb\u52a1\u6b63\u786e\u6027\u751a\u81f3\u4f1a\u8fd0\u884c\u51fa\u9519\u3002\u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\");                // \u56de\u586b\u5176\u503c\uff0c\u9700\u8981\u4ee5 String \u7684\u65b9\u5f0f\u8f6c\u4ea4\u540e\u7eed\u5904\u7406                originalConfig.set(Key.COLUMN, allColumns);            } else if (userConfiguredColumns.size() > allColumns.size()) {                throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_VALUE,                        String.format(\"\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5217\u914d\u7f6e\u4fe1\u606f\u6709\u8bef. \u56e0\u4e3a\u60a8\u6240\u914d\u7f6e\u7684\u5199\u5165\u6570\u636e\u5e93\u8868\u7684\u5b57\u6bb5\u4e2a\u6570:%s \u5927\u4e8e\u76ee\u7684\u8868\u7684\u603b\u5b57\u6bb5\u603b\u4e2a\u6570:%s. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\",                                userConfiguredColumns.size(), allColumns.size()));            } else {                // \u786e\u4fdd\u7528\u6237\u914d\u7f6e\u7684 column \u4e0d\u91cd\u590d                ListUtil.makeSureNoValueDuplicate(userConfiguredColumns, false);                // \u68c0\u67e5\u5217\u662f\u5426\u90fd\u4e3a\u6570\u636e\u5e93\u8868\u4e2d\u6b63\u786e\u7684\u5217\uff08\u901a\u8fc7\u6267\u884c\u4e00\u6b21 select column from table \u8fdb\u884c\u5224\u65ad\uff09                DBUtil.getColumnMetaData(connectionFactory.getConnecttion(), oneTable, StringUtils.join(userConfiguredColumns, \",\"));            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/util/OriginalConfPretreatmentUtil.java", "stars": "23", "class": {"name": "OriginalConfPretreatmentUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "dealColumnConf", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void dealColumnConf(Configuration originalConfig) {        String jdbcUrl = originalConfig.getString(String.format(\"%s[0].%s\",                Constant.CONN_MARK, Key.JDBC_URL));        String username = originalConfig.getString(Key.USERNAME);        String password = originalConfig.getString(Key.PASSWORD);        String proxyHost = originalConfig.getString(Key.PROXY_HOST, DEFAULT_PROXY_SOCKS_HOST);        int proxyPort = originalConfig.getInt(Key.PROXY_PORT, DEFAULT_PROXY_SOCKS_PORT);        if(StringUtils.isNotBlank(password)){            try {                password = (String) CryptoUtils.string2Object(password);            } catch (Exception e) {                throw DataXException.asDataXException(DBUtilErrorCode.CONF_ERROR, \"decrypt password failed\");            }        }        String oneTable = originalConfig.getString(String.format(                \"%s[0].%s[0]\", Constant.CONN_MARK, Key.TABLE));        JdbcConnectionFactory jdbcConnectionFactory = new JdbcConnectionFactory(DATABASE_TYPE, jdbcUrl, username, password, proxyHost, proxyPort);        dealColumnConf(originalConfig, jdbcConnectionFactory, oneTable);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/util/OriginalConfPretreatmentUtil.java", "stars": "23", "class": {"name": "OriginalConfPretreatmentUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "dealWriteMode", "params": ["Configuration", "DataBaseType"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void dealWriteMode(Configuration originalConfig, DataBaseType dataBaseType) {        List<String> columns = originalConfig.getList(Key.COLUMN, String.class);        String jdbcUrl = originalConfig.getString(String.format(\"%s[0].%s\",                Constant.CONN_MARK, Key.JDBC_URL, String.class));        // \u9ed8\u8ba4\u4e3a\uff1ainsert \u65b9\u5f0f        String writeMode = originalConfig.getString(Key.WRITE_MODE, \"INSERT\");        List<String> valueHolders = new ArrayList<String>(columns.size());        for (int i = 0; i < columns.size(); i++) {            valueHolders.add(\"?\");        }        boolean forceUseUpdate = false;        //ob10\u7684\u5904\u7406        if (dataBaseType == DataBaseType.MySql && isOB10(jdbcUrl)) {            forceUseUpdate = true;        }        String writeDataSqlTemplate = WriterUtil.getWriteTemplate(columns, valueHolders, writeMode, dataBaseType, forceUseUpdate);        LOG.info(\"Write domain [\\n{}\\n], which jdbcUrl like:[{}]\", writeDataSqlTemplate, jdbcUrl);        originalConfig.set(Constant.INSERT_OR_REPLACE_TEMPLATE_MARK, writeDataSqlTemplate);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/util/OriginalConfPretreatmentUtil.java", "stars": "23", "class": {"name": "OriginalConfPretreatmentUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isOB10", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isOB10(String jdbcUrl) {        //ob10\u7684\u5904\u7406        if (jdbcUrl.startsWith(Constant.OB10_SPLIT_STRING)) {            String[] ss = jdbcUrl.split(Constant.OB10_SPLIT_STRING_PATTERN);            if (ss.length != 3) {                throw DataXException                        .asDataXException(                                DBUtilErrorCode.JDBC_OB10_ADDRESS_ERROR, \"JDBC OB10\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u8054\u7cfbaskdatax\");            }            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/util/OriginalConfPretreatmentUtil.java", "stars": "23", "class": {"name": "OriginalConfPretreatmentUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void actionPerformed(ActionEvent e) {\t\tif (e.getSource() == findConnection) {\t\t\tresults.setText(\"Collecting results, please wait...\");\t\t\tThread t = new Thread() {\t\t\t\t@Override\t\t\t\tpublic void run() {\t\t\t\t\tString result = null;\t\t\t\t\tif (!(firstPerson.getText().equals(\"\") || secondPerson.getText().equals(\"\"))) {\t\t\t\t\t\tString exclusion = ((excludePerson.getText().trim().equals(\"\")) ? null\t\t\t\t\t\t\t\t: excludePerson.getText().toLowerCase().trim());\t\t\t\t\t\tresult = searchManager.doSearch(firstPerson.getText(), secondPerson.getText(), exclusion);\t\t\t\t\t} else {\t\t\t\t\t\tresult = \"Please enter two actors to find a connection.\";\t\t\t\t\t}\t\t\t\t\tresults.setText(result);\t\t\t\t}\t\t\t};\t\t\tt.start();\t\t}\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/KevinBacon.java", "stars": "1", "class": {"name": "KevinBacon", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "shouldParseMapWithIntegerJdbcType", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldParseMapWithIntegerJdbcType() throws Exception {    String resource = \"org/apache/ibatis/submitted/integer_enum/MapperConfig.xml\";    Reader reader = Resources.getResourceAsReader(resource);    SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();    builder.build(reader);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/integer_enum/IntegerEnumTest.java", "stars": "15", "class": {"name": "IntegerEnumTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return list.size();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/adapter/SimpleListVideoModeAdapter.java", "stars": "2", "class": {"name": "SimpleListVideoModeAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getItem(int position) {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/adapter/SimpleListVideoModeAdapter.java", "stars": "2", "class": {"name": "SimpleListVideoModeAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/adapter/SimpleListVideoModeAdapter.java", "stars": "2", "class": {"name": "SimpleListVideoModeAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(final int position, View convertView, ViewGroup parent) {        final ViewHolder holder;        if (convertView == null) {            holder = new ViewHolder();            convertView = inflater.inflate(R.layout.list_video_simple_mode1, null);            holder.gsyVideoPlayer = (SampleCoverVideo) convertView.findViewById(R.id.video_item_player);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        final String urlH = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        final String urlV = \"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\";        final String url = (position % 2 == 0) ? urlH : urlV;        if (position % 2 == 0) {            holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx1);        } else {            holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx2);        }        holder.gsyVideoPlayer.setUpLazy(url, true, null, null, \"\u8fd9\u662ftitle\");        //\u589e\u52a0title        holder.gsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);        //\u8bbe\u7f6e\u8fd4\u56de\u952e        holder.gsyVideoPlayer.getBackButton().setVisibility(View.GONE);        //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd        holder.gsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                holder.gsyVideoPlayer.startWindowFullscreen(context, false, true);            }        });        //\u9632\u6b62\u9519\u4f4d\u8bbe\u7f6e        holder.gsyVideoPlayer.setPlayTag(TAG);        holder.gsyVideoPlayer.setPlayPosition(position);        //\u662f\u5426\u6839\u636e\u89c6\u9891\u5c3a\u5bf8\uff0c\u81ea\u52a8\u9009\u62e9\u7ad6\u5c4f\u5168\u5c4f\u6216\u8005\u6a2a\u5c4f\u5168\u5c4f        holder.gsyVideoPlayer.setAutoFullWithSize(true);        //\u97f3\u9891\u7126\u70b9\u51b2\u7a81\u65f6\u662f\u5426\u91ca\u653e        holder.gsyVideoPlayer.setReleaseWhenLossAudio(false);        //\u5168\u5c4f\u52a8\u753b        holder.gsyVideoPlayer.setShowFullAnimation(true);        //\u5c0f\u5c4f\u65f6\u4e0d\u89e6\u6478\u6ed1\u52a8        holder.gsyVideoPlayer.setIsTouchWiget(false);        //\u5168\u5c4f\u662f\u5426\u9700\u8981lock\u529f\u80fd        return convertView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/adapter/SimpleListVideoModeAdapter.java", "stars": "2", "class": {"name": "SimpleListVideoModeAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "loaderForFactory", "params": ["SpriteProviderFactory<MainTextureConnectingCTMConfig>"], "throws": null, "modifiers": ["public", "static"], "return_type": "CTMConfig", "snippet": "\tpublic static CTMConfig.Loader<MainTextureConnectingCTMConfig> loaderForFactory(SpriteProviderFactory<MainTextureConnectingCTMConfig> factory) {\t\treturn (p, l, m, n) -> new MainTextureConnectingCTMConfig(p, l, m, factory, n);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/config/MainTextureConnectingCTMConfig.java", "stars": "3", "class": {"name": "MainTextureConnectingCTMConfig", "extends": "ConnectingCTMConfig", "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnectionMatcher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BiPredicate<BlockState,BlockState>", "snippet": "\tpublic BiPredicate<BlockState, BlockState> getConnectionMatcher() {\t\treturn connectionMatcher;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/config/MainTextureConnectingCTMConfig.java", "stars": "3", "class": {"name": "MainTextureConnectingCTMConfig", "extends": "ConnectingCTMConfig", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSelf", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "MainTextureConnectingCTMConfig", "snippet": "\tprotected MainTextureConnectingCTMConfig getSelf() {\t\treturn this;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/config/MainTextureConnectingCTMConfig.java", "stars": "3", "class": {"name": "MainTextureConnectingCTMConfig", "extends": "ConnectingCTMConfig", "implements": null, "modifiers": ["public"]}}, {"method_name": "getResultSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResultSet", "snippet": "  public ResultSet getResultSet() {    return resultSet;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColumnNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getColumnNames() {    return this.columnNames;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getClassNames() {    return Collections.unmodifiableList(classNames);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJdbcTypes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<JdbcType>", "snippet": "  public List<JdbcType> getJdbcTypes() {    return jdbcTypes;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJdbcType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JdbcType", "snippet": "  public JdbcType getJdbcType(String columnName) {    for (int i = 0 ; i < columnNames.size(); i++) {      if (columnNames.get(i).equalsIgnoreCase(columnName)) {        return jdbcTypes.get(i);      }    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTypeHandler", "params": ["Class<?>", "String"], "throws": null, "modifiers": ["public"], "return_type": "TypeHandler<?>", "snippet": "  public TypeHandler<?> getTypeHandler(Class<?> propertyType, String columnName) {    TypeHandler<?> handler = null;    Map<Class<?>, TypeHandler<?>> columnHandlers = typeHandlerMap.get(columnName);    if (columnHandlers == null) {      columnHandlers = new HashMap<>();      typeHandlerMap.put(columnName, columnHandlers);    } else {      handler = columnHandlers.get(propertyType);    }    if (handler == null) {      JdbcType jdbcType = getJdbcType(columnName);      handler = typeHandlerRegistry.getTypeHandler(propertyType, jdbcType);      // Replicate logic of UnknownTypeHandler#resolveTypeHandler      // See issue #59 comment 10      if (handler == null || handler instanceof UnknownTypeHandler) {        final int index = columnNames.indexOf(columnName);        final Class<?> javaType = resolveClass(classNames.get(index));        if (javaType != null && jdbcType != null) {          handler = typeHandlerRegistry.getTypeHandler(javaType, jdbcType);        } else if (javaType != null) {          handler = typeHandlerRegistry.getTypeHandler(javaType);        } else if (jdbcType != null) {          handler = typeHandlerRegistry.getTypeHandler(jdbcType);        }      }      if (handler == null || handler instanceof UnknownTypeHandler) {        handler = new ObjectTypeHandler();      }      columnHandlers.put(propertyType, handler);    }    return handler;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveClass", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Class<?>", "snippet": "  private Class<?> resolveClass(String className) {    try {      // #699 className could be null      if (className != null) {        return Resources.classForName(className);      }    } catch (ClassNotFoundException e) {      // ignore    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadMappedAndUnmappedColumnNames", "params": ["ResultMap", "String"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadMappedAndUnmappedColumnNames(ResultMap resultMap, String columnPrefix) throws SQLException {    List<String> mappedColumnNames = new ArrayList<>();    List<String> unmappedColumnNames = new ArrayList<>();    final String upperColumnPrefix = columnPrefix == null ? null : columnPrefix.toUpperCase(Locale.ENGLISH);    final Set<String> mappedColumns = prependPrefixes(resultMap.getMappedColumns(), upperColumnPrefix);    for (String columnName : columnNames) {      final String upperColumnName = columnName.toUpperCase(Locale.ENGLISH);      if (mappedColumns.contains(upperColumnName)) {        mappedColumnNames.add(upperColumnName);      } else {        unmappedColumnNames.add(columnName);      }    }    mappedColumnNamesMap.put(getMapKey(resultMap, columnPrefix), mappedColumnNames);    unMappedColumnNamesMap.put(getMapKey(resultMap, columnPrefix), unmappedColumnNames);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMappedColumnNames", "params": ["ResultMap", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getMappedColumnNames(ResultMap resultMap, String columnPrefix) throws SQLException {    List<String> mappedColumnNames = mappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));    if (mappedColumnNames == null) {      loadMappedAndUnmappedColumnNames(resultMap, columnPrefix);      mappedColumnNames = mappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));    }    return mappedColumnNames;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnmappedColumnNames", "params": ["ResultMap", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getUnmappedColumnNames(ResultMap resultMap, String columnPrefix) throws SQLException {    List<String> unMappedColumnNames = unMappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));    if (unMappedColumnNames == null) {      loadMappedAndUnmappedColumnNames(resultMap, columnPrefix);      unMappedColumnNames = unMappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));    }    return unMappedColumnNames;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMapKey", "params": ["ResultMap", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getMapKey(ResultMap resultMap, String columnPrefix) {    return resultMap.getId() + \":\" + columnPrefix;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prependPrefixes", "params": ["Set<String>", "String"], "throws": null, "modifiers": ["private"], "return_type": "Set<String>", "snippet": "  private Set<String> prependPrefixes(Set<String> columnNames, String prefix) {    if (columnNames == null || columnNames.isEmpty() || prefix == null || prefix.length() == 0) {      return columnNames;    }    final Set<String> prefixed = new HashSet<>();    for (String columnName : columnNames) {      prefixed.add(prefix + columnName);    }    return prefixed;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java", "stars": "15", "class": {"name": "ResultSetWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldDemonstrateObjectsBeingCollectedAsNeeded", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateObjectsBeingCollectedAsNeeded() {    final int N = 3000000;    SoftCache cache = new SoftCache(new PerpetualCache(\"default\"));    for (int i = 0; i < N; i++) {      byte[] array = new byte[5001]; //waste a bunch of memory      array[5000] = 1;      cache.putObject(i, array);      Object value = cache.getObject(i);      if (cache.getSize() < i + 1) {        //System.out.println(\"Cache exceeded with \" + (i + 1) + \" entries.\");        break;      }    }    assertTrue(cache.getSize() < N);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/SoftCacheTest.java", "stars": "15", "class": {"name": "SoftCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldDemonstrateCopiesAreEqual", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateCopiesAreEqual() {    Cache cache = new SoftCache(new PerpetualCache(\"default\"));    cache = new SerializedCache(cache);    for (int i = 0; i < 1000; i++) {      cache.putObject(i, i);      Object value = cache.getObject(i);      assertTrue(value == null || value.equals(i));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/SoftCacheTest.java", "stars": "15", "class": {"name": "SoftCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRemoveItemOnDemand", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRemoveItemOnDemand() {    Cache cache = new SoftCache(new PerpetualCache(\"default\"));    cache.putObject(0, 0);    assertNotNull(cache.getObject(0));    cache.removeObject(0);    assertNull(cache.getObject(0));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/SoftCacheTest.java", "stars": "15", "class": {"name": "SoftCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFlushAllItemsOnDemand", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFlushAllItemsOnDemand() {    Cache cache = new SoftCache(new PerpetualCache(\"default\"));    for (int i = 0; i < 5; i++) {      cache.putObject(i, i);    }    assertNotNull(cache.getObject(0));    assertNotNull(cache.getObject(4));    cache.clear();    assertNull(cache.getObject(0));    assertNull(cache.getObject(4));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/SoftCacheTest.java", "stars": "15", "class": {"name": "SoftCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "PmsProductAttributeCategoryExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNull() {            addCriterion(\"name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNotNull() {            addCriterion(\"name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameEqualTo(String value) {            addCriterion(\"name =\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotEqualTo(String value) {            addCriterion(\"name <>\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThan(String value) {            addCriterion(\"name >\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThanOrEqualTo(String value) {            addCriterion(\"name >=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThan(String value) {            addCriterion(\"name <\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThanOrEqualTo(String value) {            addCriterion(\"name <=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLike(String value) {            addCriterion(\"name like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotLike(String value) {            addCriterion(\"name not like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIn(List<String> values) {            addCriterion(\"name in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotIn(List<String> values) {            addCriterion(\"name not in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameBetween(String value1, String value2) {            addCriterion(\"name between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotBetween(String value1, String value2) {            addCriterion(\"name not between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountIsNull() {            addCriterion(\"attribute_count is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountIsNotNull() {            addCriterion(\"attribute_count is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountEqualTo(Integer value) {            addCriterion(\"attribute_count =\", value, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountNotEqualTo(Integer value) {            addCriterion(\"attribute_count <>\", value, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountGreaterThan(Integer value) {            addCriterion(\"attribute_count >\", value, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountGreaterThanOrEqualTo(Integer value) {            addCriterion(\"attribute_count >=\", value, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountLessThan(Integer value) {            addCriterion(\"attribute_count <\", value, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountLessThanOrEqualTo(Integer value) {            addCriterion(\"attribute_count <=\", value, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountIn(List<Integer> values) {            addCriterion(\"attribute_count in\", values, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountNotIn(List<Integer> values) {            addCriterion(\"attribute_count not in\", values, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountBetween(Integer value1, Integer value2) {            addCriterion(\"attribute_count between\", value1, value2, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAttributeCountNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAttributeCountNotBetween(Integer value1, Integer value2) {            addCriterion(\"attribute_count not between\", value1, value2, \"attributeCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountIsNull() {            addCriterion(\"param_count is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountIsNotNull() {            addCriterion(\"param_count is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountEqualTo(Integer value) {            addCriterion(\"param_count =\", value, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountNotEqualTo(Integer value) {            addCriterion(\"param_count <>\", value, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountGreaterThan(Integer value) {            addCriterion(\"param_count >\", value, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountGreaterThanOrEqualTo(Integer value) {            addCriterion(\"param_count >=\", value, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountLessThan(Integer value) {            addCriterion(\"param_count <\", value, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountLessThanOrEqualTo(Integer value) {            addCriterion(\"param_count <=\", value, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountIn(List<Integer> values) {            addCriterion(\"param_count in\", values, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountNotIn(List<Integer> values) {            addCriterion(\"param_count not in\", values, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountBetween(Integer value1, Integer value2) {            addCriterion(\"param_count between\", value1, value2, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andParamCountNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andParamCountNotBetween(Integer value1, Integer value2) {            addCriterion(\"param_count not between\", value1, value2, \"paramCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategoryExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "HasPermission", "params": ["List<String>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean HasPermission(List<String> menus, String uri) {        if (uri.indexOf(\"?\") > 0) {            uri = uri.substring(0, uri.indexOf(\"?\"));        }        final String u = uri;        if (menus == null) {            return false;        }        return menus.parallelStream().anyMatch(menu ->                menu.equals(u)        );    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/main/java/com/cgb/bcpinstall/main/interceptor/UserInterceptor.java", "stars": "7", "class": {"name": "UserInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        return true;        // \u5982\u679c\u4e0d\u662f\u6620\u5c04\u5230\u65b9\u6cd5\u76f4\u63a5\u901a\u8fc7//        if (!(handler instanceof HandlerMethod)) {//            return true;//        }////        // \u6839\u636etoken\u83b7\u53d6\u7528\u6237 \u4fdd\u5b58ThreadLocal//        String accessToken = request.getHeader(LoginConstant.ACCESS_TOKEN);////        if (StringUtils.isNotBlank(accessToken)) {//            accessToken = URLDecoder.decode(accessToken, \"UTF-8\");//            /*SysUserDO usertemp = new SysUserDO();//            usertemp.setUpdId((long) 0);//            usertemp.setId((long) 1);//            redisValueService.set(LoginConstant.LOGIN_TOKENS + token, usertemp, 100000);*/////            System.out.println(\"UserInterceptor->preHandle:\" + accessToken);//            //\u4ece\u672c\u5730\u7f13\u5b58\u8bfb\u53d6token\u5bf9\u5e94\u7528\u6237\u4fe1\u606f////            RequestContextHandler.setCurrentUserToken(accessToken);//            logger.info(\"--> token \u6821\u9a8c\u6210\u529f\");//            return true;////        } else {//            logger.info(\"---> interceptor token is null\");//            resultInfo(response, ResponseCode.NO_TOKEN);//            return false;//        }//    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/main/java/com/cgb/bcpinstall/main/interceptor/UserInterceptor.java", "stars": "7", "class": {"name": "UserInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "postHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object", "ModelAndView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) {        RequestContextHandler.remove();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/main/java/com/cgb/bcpinstall/main/interceptor/UserInterceptor.java", "stars": "7", "class": {"name": "UserInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "afterCompletion", "params": ["HttpServletRequest", "HttpServletResponse", "Object", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {        RequestContextHandler.remove();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/main/java/com/cgb/bcpinstall/main/interceptor/UserInterceptor.java", "stars": "7", "class": {"name": "UserInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "resultInfo", "params": ["HttpServletResponse", "ResponseCode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void resultInfo(HttpServletResponse response, ResponseCode code) throws Exception {        BaseResponse resp = new BaseResponse();        resp.setCode(code);        response.setContentType(\"application/json;charset=UTF-8\");        PrintWriter writer = response.getWriter();        writer.write(JSONObject.toJSONString(resp, SerializerFeature.WriteEnumUsingToString));        writer.flush();        writer.close();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/main/java/com/cgb/bcpinstall/main/interceptor/UserInterceptor.java", "stars": "7", "class": {"name": "UserInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["Show", "Episode"], "throws": null, "modifiers": ["public", "static"], "return_type": "EpisodeDialogFragment", "snippet": "    public static EpisodeDialogFragment newInstance(Show show, Episode episode) {        EpisodeDialogFragment frag = new EpisodeDialogFragment();        Bundle args = new Bundle();        args.putParcelable(EXTRA_SHOW, show);        args.putParcelable(EXTRA_EPISODE, episode);        frag.setArguments(args);        return frag;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        View v = LayoutInflater.from(new ContextThemeWrapper(getActivity(), R.style.Theme_Butter)).inflate(R.layout.fragment_dialog_episode, container, false);        ButterKnife.bind(this, v);        if (!VersionUtils.isJellyBean()) {            mPlayButton.setBackground(PixelUtils.changeDrawableColor(mPlayButton.getContext(), R.drawable.play_button_circle, mShow.color));        } else {            mPlayButton.setBackground(PixelUtils.changeDrawableColor(mPlayButton.getContext(), R.drawable.play_button_circle, mShow.color));        }        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) mPlaceholder.getLayoutParams();        layoutParams.height = PixelUtils.getScreenHeight(mActivity);        mPlaceholder.setLayoutParams(layoutParams);        return v;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);        setStyle(STYLE_NO_FRAME, R.style.Theme_Dialog_Episode);        setCancelable(false);        mActivity = getActivity();        mThreshold = PixelUtils.getPixelsFromDp(mActivity, 220);        mBottom = PixelUtils.getPixelsFromDp(mActivity, 33);        mShow = getArguments().getParcelable(EXTRA_SHOW);        mEpisode = getArguments().getParcelable(EXTRA_EPISODE);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        Dialog dialog = super.onCreateDialog(savedInstanceState);        dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {            @Override            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {                if (keyCode == KeyEvent.KEYCODE_BACK) {                    smoothDismiss();                }                return true;            }        });        return dialog;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "smoothDismiss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void smoothDismiss() {        mOpened = false;        if (mScrollView.getScrollY() <= mBottom) {            dismiss();            return;        }        mScrollView.animateScrollTo(0, ANIM_SPEED);        mScrollView.postDelayed(new Runnable() {            @Override            public void run() {                try {                    dismiss();                } catch (Exception e) {                    e.printStackTrace();                }            }        }, ANIM_SPEED);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDismiss", "params": ["DialogInterface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDismiss(DialogInterface dialog) {        super.onDismiss(dialog);        if (providerManager.hasCurrentSubsProvider())            providerManager.getCurrentSubsProvider().cancel();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        mScrollView.postDelayed(new Runnable() {            @Override            public void run() {                //mMaxHeight = PixelUtils.getScreenHeight(mActivity) - PixelUtils.getPixelsFromDp(mActivity, 50);                int screenHeight = PixelUtils.getScreenHeight(mActivity);                int scroll = (screenHeight / 3) * 2;                mScrollView.animateScrollTo(scroll, ANIM_SPEED);                mScrollView.postDelayed(new Runnable() {                    @Override                    public void run() {                        mOpened = true;                    }                }, ANIM_SPEED);            }        }, 250);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        if (!TextUtils.isEmpty(mEpisode.title)) {            mTitle.setText(mEpisode.title);            mHeaderImage.setContentDescription(mEpisode.title);        } else {            mTitle.setText(R.string.no_title_available);            mHeaderImage.setContentDescription(getString(R.string.no_title_available));        }        mAired.setVisibility(mEpisode.aired > 0 ? View.VISIBLE : View.GONE);        Date airedDate = new Date((long) mEpisode.aired * 1000);        mAired.setText(String.format(getString(R.string.aired), new SimpleDateFormat(\"MMMM dd, yyyy\", LocaleUtils.getCurrent()).format(airedDate)));        if (!TextUtils.isEmpty(mEpisode.overview))            mSynopsis.setText(mEpisode.overview);        else            mSynopsis.setText(R.string.no_synopsis_available);        String seasonStr = Integer.toString(mEpisode.season);        if (seasonStr.length() < 2) seasonStr = \"0\" + seasonStr;        String episodeStr = Integer.toString(mEpisode.episode);        if (episodeStr.length() < 2) episodeStr = \"0\" + episodeStr;        mInfo.setText(\"S\" + seasonStr + \"E\" + episodeStr);        mSubtitles.setFragmentManager(getFragmentManager());        mQuality.setFragmentManager(getFragmentManager());        mSubtitles.setTitle(R.string.subtitles);        mQuality.setTitle(R.string.quality);        final String[] qualities = mEpisode.torrents.keySet().toArray(new String[mEpisode.torrents.size()]);        SortUtils.sortQualities(qualities);        mQuality.setData(qualities);        String quality = DefaultQuality.get(mActivity, Arrays.asList(qualities));        int qualityIndex = Arrays.asList(qualities).indexOf(quality);        mSelectedQuality = quality;        mQuality.setText(mSelectedQuality);        mQuality.setDefault(qualityIndex);        updateMagnet();        mQuality.setListener(new OptionSelector.SelectorListener() {            @Override            public void onSelectionChanged(int position, String value) {                mSelectedQuality = value;                updateMagnet();            }        });        mSubtitles.setText(R.string.loading_subs);        mSubtitles.setClickable(false);        if (providerManager.hasCurrentSubsProvider()) {            providerManager.getCurrentSubsProvider().getList(mEpisode, new SubsProvider.Callback() {                @Override                public void onSuccess(Map<String, String> subtitles) {                    if (FragmentUtil.isNotAdded(EpisodeDialogFragment.this)) return;                    mEpisode.subtitles = subtitles;                    String[] languages = subtitles.keySet().toArray(new String[subtitles.size()]);                    Arrays.sort(languages);                    final String[] adapterLanguages = new String[languages.length + 1];                    adapterLanguages[0] = \"no-subs\";                    System.arraycopy(languages, 0, adapterLanguages, 1, languages.length);                    String[] readableNames = new String[adapterLanguages.length];                    for (int i = 0; i < readableNames.length; i++) {                        String language = adapterLanguages[i];                        if (language.equals(\"no-subs\")) {                            readableNames[i] = getString(R.string.no_subs);                        } else {                            Locale locale = LocaleUtils.toLocale(language);                            readableNames[i] = locale.getDisplayName(locale);                        }                    }                    mSubtitles.setListener(new OptionSelector.SelectorListener() {                        @Override                        public void onSelectionChanged(int position, String value) {                            onSubtitleLanguageSelected(adapterLanguages[position]);                        }                    });                    mSubtitles.setData(readableNames);                    ThreadUtils.runOnUiThread(new Runnable() {                        @Override                        public void run() {                            mSubtitles.setClickable(true);                        }                    });                    String defaultSubtitle = PrefUtils.get(mSubtitles.getContext(), Prefs.SUBTITLE_DEFAULT, null);                    if (subtitles.containsKey(defaultSubtitle)) {                        onSubtitleLanguageSelected(defaultSubtitle);                        mSubtitles.setDefault(Arrays.asList(adapterLanguages).indexOf(defaultSubtitle));                    } else {                        onSubtitleLanguageSelected(\"no-subs\");                        mSubtitles.setDefault(Arrays.asList(adapterLanguages).indexOf(\"no-subs\"));                    }                }                @Override                public void onFailure(Exception e) {                    mSubtitles.setData(new String[0]);                    ThreadUtils.runOnUiThread(() -> {                        mSubtitles.setError(\"Could not load subtitles!\", e.getMessage());                        mSubtitles.setClickable(false);                    });                }            });        } else {            mSubtitles.setText(R.string.no_subs_available);        }        mScrollView.setListener(new BottomSheetScrollView.Listener() {            @Override            public void onScroll(int scrollY, BottomSheetScrollView.Direction direction) {            }            @Override            public void onTouch(boolean touching) {                mTouching = touching;                int scrollY = mScrollView.getScrollY();                if (!mTouching && mOpened && scrollY <= mThreshold) {                    smoothDismiss();                }            }            @Override            public void onScrollStart() {            }            @Override            public void onScrollEnd() {                if (!mTouching && mOpened && mScrollView.getScrollY() <= mThreshold) {                    smoothDismiss();                }            }        });        Picasso.get().load(mEpisode.headerImage).into(mHeaderImage);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context activity) {        super.onAttach(activity);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateMagnet", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateMagnet() {        if (mOpenMagnet == null) return;        if (mMagnet == null) {            mMagnet = new Magnet(mActivity, mEpisode.torrents.get(mSelectedQuality).getUrl());        }        mMagnet.setUrl(mEpisode.torrents.get(mSelectedQuality).getUrl());        if (!mMagnet.canOpen()) {            mOpenMagnet.setVisibility(View.GONE);        } else {            mOpenMagnet.setVisibility(View.VISIBLE);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "readMoreClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readMoreClick(View v) {        if (getFragmentManager().findFragmentByTag(\"overlay_fragment\") != null)            return;        SynopsisDialogFragment synopsisDialogFragment = new SynopsisDialogFragment();        Bundle b = new Bundle();        b.putString(\"text\", mEpisode.overview);        synopsisDialogFragment.setArguments(b);        synopsisDialogFragment.show(getFragmentManager(), \"overlay_fragment\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "playClick", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playClick() {        smoothDismiss();        Media.Torrent torrent = mEpisode.torrents.get(mSelectedQuality);        StreamInfo streamInfo = new StreamInfo(mEpisode, mShow, torrent.getUrl(), mSelectedSubtitleLanguage, mSelectedQuality);        ((MediaDetailActivity) getActivity()).playStream(streamInfo);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "openMagnet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openMagnet() {        mMagnet.open(mActivity);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "outsideClick", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void outsideClick() {        smoothDismiss();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSubtitleLanguageSelected", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onSubtitleLanguageSelected(String language) {        mSelectedSubtitleLanguage = language;        if (!language.equals(\"no-subs\")) {            final Locale locale = LocaleUtils.toLocale(language);            ThreadUtils.runOnUiThread(new Runnable() {                @Override                public void run() {                    mSubtitles.setText(StringUtils.uppercaseFirst(locale.getDisplayName(locale)));                }            });        } else {            ThreadUtils.runOnUiThread(new Runnable() {                @Override                public void run() {                    mSubtitles.setText(R.string.no_subs);                }            });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/EpisodeDialogFragment.java", "stars": "4", "class": {"name": "EpisodeDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "UUID", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, UUID parameter, JdbcType jdbcType) throws SQLException {    ps.setString(i, parameter.toString());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/uuid_test/UUIDTypeHandler.java", "stars": "15", "class": {"name": "UUIDTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "UUID", "snippet": "  public UUID getNullableResult(ResultSet rs, String columnName) throws SQLException {    String value = rs.getString(columnName);    if (value != null) {      return UUID.fromString(value);    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/uuid_test/UUIDTypeHandler.java", "stars": "15", "class": {"name": "UUIDTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "UUID", "snippet": "  public UUID getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    String value = rs.getString(columnIndex);    if (value != null) {      return UUID.fromString(value);    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/uuid_test/UUIDTypeHandler.java", "stars": "15", "class": {"name": "UUIDTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "UUID", "snippet": "  public UUID getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    String value = cs.getString(columnIndex);    if (value != null) {      return UUID.fromString(value);    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/uuid_test/UUIDTypeHandler.java", "stars": "15", "class": {"name": "UUIDTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {        resetStatus = true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "halt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void halt() {        haltStatus = true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "nmi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void nmi() {        nmiStatus = true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "irq", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void irq() {        irqStatus = true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "load8_dir", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte load8_dir(byte address) {        return m.load8(address & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "load8_ext", "params": ["short"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte load8_ext(short address) {        return m.load8(address & 0xffff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "load8_ind", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte load8_ind(byte offset) {        return m.load8((IX & 0xffff) + (offset & 0xff));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "store8_ind", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void store8_ind(byte offset, byte value) {        m.store8((IX & 0xffff) + (offset & 0xff), value);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "store8_ext", "params": ["short", "byte"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void store8_ext(short address, byte value) {        m.store8(address & 0xffff, value);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "load16_dir", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "short", "snippet": "    private short load16_dir(byte address) {        return m.load16(address & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "load16_ext", "params": ["short"], "throws": null, "modifiers": ["private"], "return_type": "short", "snippet": "    private short load16_ext(short address) {        return m.load16(address & 0xffff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "load16_ind", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "short", "snippet": "    private short load16_ind(byte offset) {        return m.load16((IX & 0xffff) + (offset & 0xff));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "store16_ext", "params": ["short", "short"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void store16_ext(short address, short value) {        m.store16(address & 0xffff, value);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "add", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte add(byte x, byte y) {        int t = (x & 0xff) + (y & 0xff);        byte tt = (byte) t;        CH = ((x & 0x0f) + (y & 0x0f)) > 0x0f;        CN = tt < 0;        CZ = tt == 0;        CV = (x > 0) & (y > 0) & CN || (x < 0) & (y < 0) & !CN;        CC = (t & 0x100) != 0;        return tt;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "add16", "params": ["short", "short"], "throws": null, "modifiers": ["private"], "return_type": "short", "snippet": "    private short add16(short x, short y) {        int t = (x & 0xffff) + (y & 0xffff);        short tt = (short) t;        // \u3053\u306e\u95a2\u6570(ADX\u547d\u4ee4\u306b\u5bfe\u5fdc)\u306e\u30d5\u30e9\u30b0\u5909\u5316\u306f\u4e88\u60f3\u306b\u3088\u308b\u3002        // CH = ???;        CN = tt < 0;        CZ = tt == 0;        CV = (x > 0) & (y > 0) & CN || (x < 0) & (y < 0) & !CN;        CC = (t & 0x10000) != 0;        return tt;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "adc", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte adc(byte x, byte y) {        int t = (x & 0xff) + (y & 0xff) + (CC ? 1 : 0);        byte tt = (byte) t;        CH = ((x & 0x0f) + (y & 0x0f)) > 0x0f;        CN = tt < 0;        CZ = tt == 0;        CV = (x > 0) & (y > 0) & CN || (x < 0) & (y < 0) & !CN;        CC = (t & 0x100) != 0;        return tt;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "and", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte and(byte x, byte y) {        int t = x & y;        CN = (t & 0x80) != 0;        CZ = t == 0;        CV = false;        return (byte) (t & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "nim", "params": ["byte", "byte"], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte nim(byte x, byte y) {        int t = x & y;        CZ = t == 0;        CN = !CZ;        CV = false;        return (byte) (t & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "asl", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte asl(byte x) {        int t = ((x & 0xff) << 1);        CN = (byte) t < 0;        CZ = (byte) t == 0;        CC = t > 0xff;        CV = CN != CC;        return (byte) (t & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "asr", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte asr(byte x) {        int t = ((x & 0xff) >> 1) | (x & 0x80);        CN = (byte) t < 0;        CZ = t == 0;        CC = (x & 0x01) != 0;        CV = CN != CC;        return (byte) (t & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "bit", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void bit(byte x, byte y) {        int t = x & y;        CN = (byte) t < 0;        CZ = t == 0;        CV = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "tmm", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tmm(byte x, byte y) {        if (x == 0 | y == 0) {            CN = false;            CZ = true;            CV = false;        }        else if (y == (byte) 0xff) {            CN = false;            CZ = false;            CV = true;        }        else {            CN = true;            CZ = false;            CV = false;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "cmp", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cmp(byte x, byte y) {        int t = (x & 0xff) - (y & 0xff);        byte tt = (byte) (t);        CN = tt < 0;        CZ = tt == 0;        CV = (x > 0) & (y < 0) & CN || (x < 0) & (y > 0) & !CN;        CC = (t & 0x100) != 0;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "clr", "params": [], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte clr() {        CN = false;        CZ = true;        CV = false;        CC = false;        return 0x00;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "com", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte com(byte x) {        byte t = (byte) (0xff - (x & 0xff));        CN = t < 0;        CZ = t == 0;        CV = false;        CC = true;        return t;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "daa", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void daa() {        int t = A & 0xff;        if ((t & 0x0f) >= 0x0a || CH) {            t += 0x06;        }        if ((t & 0xf0) >= 0xa0) {            t += 0x60;        }        byte tt = (byte) t;        CN = tt < 0;        CZ = tt == 0;        CV = (A > 0) & CN || (A < 0) & !CN;        CC = ((A & 0xf0) >= 0xa0) || CC;        A = tt;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "dec", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte dec(byte x) {        int t = (x - 1) & 0xff;        CN = (byte) t < 0;        CZ = t == 0;        CV = x == (byte) 0x80;        return (byte) t;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "eor", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte eor(byte x, byte y) {        int t = (x & 0xff) ^ (y & 0xff);        CN = (byte) t < 0;        CZ = t == 0;        CV = false;        return (byte) t;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "xim", "params": ["byte", "byte"], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte xim(byte x, byte y) {        int t = x ^ y;        CZ = t == 0;        CN = !CZ;        return (byte) (t & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "inc", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte inc(byte x) {        int t = (x + 1) & 0xff;        CN = (byte) t < 0;        CZ = t == 0;        CV = x == (byte) 0x7f;        return (byte) t;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "lda", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte lda(byte x) {        CN = x < 0;        CZ = x == 0;        CV = false;        return x;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "lsr", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte lsr(byte x) {        int t = (x & 0xff) >> 1;        CN = false;        CZ = t == 0;        CC = (x & 0x1) != 0;        CV = CN != CC;        return (byte) t;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "neg", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte neg(byte x) {        int t = 0 - (x & 0xff);        CN = (byte) t < 0;        CZ = t == 0;        CV = (byte) t == 0x80;        CC = (byte) t == 0x00;        return (byte) t;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "ora", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte ora(byte x, byte y) {        int t = x | y;        CN = (byte) t < 0;        CZ = t == 0;        CV = false;        return (byte) t;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "oim", "params": ["byte", "byte"], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte oim(byte x, byte y) {        int t = x | y;        CZ = t == 0;        CN = !CZ;        CV = false;        return (byte) (t & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "psh", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void psh(byte x) {        store8_ext(SP, x);        SP--;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "pul", "params": [], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte pul() {        SP++;        return load8_ext(SP);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "rol", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte rol(byte x) {        int t = (x & 0xff) << 1;        t |= CC ? 0x01 : 0;        CN = (byte) t < 0;        CZ = t == 0;        CC = t > 0xff;        CV = CN != CC;        return (byte) t;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "ror", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte ror(byte x) {        int t = (x & 0xff) >> 1;        t |= CC ? 0x80 : 0;        CN = (byte) t < 0;        CZ = (byte) t == 0;        CC = (x & 0x01) != 0;        CV = CN != CC;        return (byte) t;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "sta", "params": ["short", "byte"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sta(short a, byte x) {        CN = x < 0;        CZ = x == 0;        CV = false;        store8_ext(a, x);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "sub", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte sub(byte x, byte y) {        int t = (x & 0xff) - (y & 0xff);        byte tt = (byte) t;        CN = tt < 0;        CZ = tt == 0;        CV = (x > 0) & (y < 0) & CN || (x < 0) & (y > 0) & !CN;        CC = (t & 0x100) != 0;        return tt;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "sbc", "params": ["byte", "byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte sbc(byte x, byte y) {        int t = (x & 0xff) - (y & 0xff) - (CC ? 0x01 : 0x00);        byte tt = (byte) t;        CN = tt < 0;        CZ = tt == 0;        CV = (x > 0) & (y < 0) & CN || (x < 0) & (y > 0) & !CN;        CC = (t & 0x100) != 0;        return tt;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "tab", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tab() {        B = A;        CN = B < 0;        CZ = B == 0;        CV = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "tba", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tba() {        A = B;        CN = A < 0;        CZ = A == 0;        CV = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "tst", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tst(byte x) {        CN = x < 0;        CZ = x == 0;        CV = false;        CC = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "cpx", "params": ["short"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cpx(short x) {        int t = (IX & 0xffff) - (x & 0xffff);        CN = (short) t < 0;        CZ = (short) t == 0;        CV = (IX > 0) & (x < 0) & CN || (IX < 0) & (x > 0) & !CN;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "dex", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dex() {        IX--;        CZ = IX == 0;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "des", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void des() {        SP--;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "inx", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void inx() {        IX++;        CZ = IX == 0;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "ins", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ins() {        SP++;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "ldx", "params": ["short"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ldx(short a) {        IX = a;        CN = IX < 0;        CZ = IX == 0;        CV = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "lds", "params": ["short"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void lds(short a) {        SP = a;        CN = (short) SP < 0;        CZ = (short) SP == 0;        CV = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "stx", "params": ["short"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void stx(short a) {        store16_ext(a, IX);        CN = IX < 0;        CZ = IX == 0;        CV = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "sts", "params": ["short"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sts(short a) {        store16_ext(a, SP);        CN = IX < 0;        CZ = IX == 0;        CV = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "txs", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void txs() {        SP = (short) (IX - 1);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "tsx", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tsx() {        IX = (short) (SP + 1);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "branch", "params": ["byte", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void branch(byte offset, boolean condition) {        if (condition) {            PC = (short) (PC + offset);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "bsr", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void bsr(byte offset) {        SP = (short) (SP - 2);        store16_ext((short) (SP + 1), PC);        PC = (short) (PC + offset);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "jump", "params": ["short"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jump(short a) {        PC = a;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "jsr", "params": ["short"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jsr(short a) {        SP = (short) (SP - 2);        store16_ext((short) (SP + 1), PC);        PC = a;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "nop", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void nop() {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "pushAllRegisters", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void pushAllRegisters() {        int ccr = 0xc0;        if (CH) {            ccr |= 0x20;        }        if (CI) {            ccr |= 0x10;        }        if (CN) {            ccr |= 0x08;        }        if (CZ) {            ccr |= 0x04;        }        if (CV) {            ccr |= 0x02;        }        if (CC) {            ccr |= 0x01;        }        store16_ext((short) (SP - 1), PC);        store16_ext((short) (SP - 3), IX);        store8_ext((short) (SP - 4), A);        store8_ext((short) (SP - 5), B);        store8_ext((short) (SP - 6), (byte) ccr);        SP = (short) (SP - 7);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "popAllRegisters", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void popAllRegisters() {        SP = (short) (SP + 7);        int ccr = (int) load8_ext((short) (SP - 6));        CH = (ccr & 0x20) != 0;        CI = (ccr & 0x10) != 0;        CN = (ccr & 0x08) != 0;        CZ = (ccr & 0x04) != 0;        CV = (ccr & 0x02) != 0;        CC = (ccr & 0x01) != 0;        B = load8_ext((short) (SP - 5));        A = load8_ext((short) (SP - 4));        IX = load16_ext((short) (SP - 3));        PC = load16_ext((short) (SP - 1));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "rti", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void rti() {        popAllRegisters();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "rts", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void rts() {        SP = (short) (SP + 2);        PC = load16_ext((short) (SP - 1));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "swi", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void swi() {        PC = (short) (PC + 1);        pushAllRegisters();        CI = true;        PC = load16_ext(VECTOR_SWI);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "wai", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void wai() {        fetchWai = true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "clc", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void clc() {        CC = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "cli", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cli() {        CI = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "clv", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void clv() {        CV = false;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "sec", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sec() {        CC = true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "sei", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sei() {        CI = true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "sev", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sev() {        CV = true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "tap", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tap() {        CH = (A & 0x20) != 0;        CI = (A & 0x10) != 0;        CN = (A & 0x08) != 0;        CZ = (A & 0x04) != 0;        CV = (A & 0x02) != 0;        CC = (A & 0x01) != 0;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "tpa", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tpa() {        A = (byte) 0xc0;        if (CH) {            A |= 0x20;        }        if (CI) {            A |= 0x10;        }        if (CN) {            A |= 0x08;        }        if (CZ) {            A |= 0x04;        }        if (CV) {            A |= 0x02;        }        if (CC) {            A |= 0x01;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "fetchOp", "params": [], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte fetchOp() {        return load8_ext(PC++);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "fetchOperand1", "params": [], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte fetchOperand1() {        return load8_ext(PC++);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "fetchOperand2", "params": [], "throws": null, "modifiers": ["private"], "return_type": "short", "snippet": "    private short fetchOperand2() {        int op1 = fetchOperand1() & 0xff;        int op2 = fetchOperand1() & 0xff;        return (short) ((op1 << 8) + op2);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "execute", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long execute(long clocks) {        long initial_clock;        initial_clock = computer.clockCount;        while (computer.clockCount < initial_clock + clocks) {            byte offset;            byte value;            short addr;            if (resetStatus) {                resetStatus = false;                fetchWai = false;                PC = load16_ext(VECTOR_RESTART);                computer.clockCount = 0;                return 0;            }            if (haltStatus) {                haltProcessed = true;                continue;            }            if (haltProcessed) {                haltProcessed = false;            }            else {                if (fetchWai) {                    if (nmiStatus) {                        nmiStatus = false;                        fetchWai = false;                        pushAllRegisters();                        PC = m.load16(VECTOR_NMI);                        computer.clockCount += 12;                    }                    if (irqStatus && !CI) {                        irqStatus = false;                        fetchWai = false;                        pushAllRegisters();                        PC = m.load16(VECTOR_IRQ);                        computer.clockCount += 12;                    }                    computer.clockCount++;                    continue;                }                else {                    if (nmiStatus) {                        nmiStatus = false;                        pushAllRegisters();                        PC = m.load16(VECTOR_NMI);                        computer.clockCount += 12;                        continue;                    }                    if (irqStatus && !CI) {                        irqStatus = false;                        pushAllRegisters();                        PC = m.load16(VECTOR_IRQ);                        computer.clockCount += 12;                        continue;                    }                }            }            switch (fetchOp()) {            case OP_ABA_IMP:                A = add(A, B);                computer.clockCount += 2;                break;            case OP_ADDA_IMM:                A = add(A, fetchOperand1());                computer.clockCount += 2;                break;            case OP_ADDA_DIR:                A = add(A, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_ADDA_IND:                A = add(A, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_ADDA_EXT:                A = add(A, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_ADDB_IMM:                B = add(B, fetchOperand1());                computer.clockCount += 2;                break;            case OP_ADDB_DIR:                B = add(B, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_ADDB_IND:                B = add(B, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_ADDB_EXT:                B = add(B, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_ADCA_IMM:                A = adc(A, fetchOperand1());                computer.clockCount += 2;                break;            case OP_ADCA_DIR:                A = adc(A, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_ADCA_IND:                A = adc(A, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_ADCA_EXT:                A = adc(A, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_ADCB_IMM:                B = adc(B, fetchOperand1());                computer.clockCount += 2;                break;            case OP_ADCB_DIR:                B = adc(B, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_ADCB_IND:                B = adc(B, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_ADCB_EXT:                B = adc(B, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_ANDA_IMM:                A = and(A, fetchOperand1());                computer.clockCount += 2;                break;            case OP_ANDA_DIR:                A = and(A, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_ANDA_IND:                A = and(A, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_ANDA_EXT:                A = and(A, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_ANDB_IMM:                B = and(B, fetchOperand1());                computer.clockCount += 2;                break;            case OP_ANDB_DIR:                B = and(B, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_ANDB_IND:                B = and(B, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_ANDB_EXT:                B = and(B, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_ASLA_IMP:                A = asl(A);                computer.clockCount += 2;                break;            case OP_ASLB_IMP:                B = asl(B);                computer.clockCount += 2;                break;            case OP_ASRA_IMP:                A = asr(A);                computer.clockCount += 2;                break;            case OP_ASRB_IMP:                B = asr(B);                computer.clockCount += 2;                break;            case OP_BITA_IMM:                bit(A, fetchOperand1());                computer.clockCount += 2;                break;            case OP_BITA_DIR:                bit(A, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_BITA_IND:                bit(A, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_BITA_EXT:                bit(A, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_BITB_IMM:                bit(B, fetchOperand1());                computer.clockCount += 2;                break;            case OP_BITB_DIR:                bit(B, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_BITB_IND:                bit(B, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_BITB_EXT:                bit(B, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_CBA_IMP:                cmp(A, B);                computer.clockCount += 2;                break;            case OP_CLRA_IMP:                A = clr();                computer.clockCount += 2;                break;            case OP_CLRB_IMP:                B = clr();                computer.clockCount += 2;                break;            case OP_CMPA_IMM:                cmp(A, fetchOperand1());                computer.clockCount += 2;                break;            case OP_CMPA_DIR:                cmp(A, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_CMPA_IND:                cmp(A, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_CMPA_EXT:                cmp(A, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_CMPB_IMM:                cmp(B, fetchOperand1());                computer.clockCount += 2;                break;            case OP_CMPB_DIR:                cmp(B, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_CMPB_IND:                cmp(B, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_CMPB_EXT:                cmp(B, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_COMA_IMP:                A = com(A);                computer.clockCount += 2;                break;            case OP_COMB_IMP:                B = com(B);                computer.clockCount += 2;                break;            case OP_DAA_IMP:                daa();                computer.clockCount += 2;                break;            case OP_DECA_IMP:                A = dec(A);                computer.clockCount += 2;                break;            case OP_DECB_IMP:                B = dec(B);                computer.clockCount += 2;                break;            case OP_EORA_IMM:                A = eor(A, fetchOperand1());                computer.clockCount += 2;                break;            case OP_EORA_DIR:                A = eor(A, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_EORA_IND:                A = eor(A, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_EORA_EXT:                A = eor(A, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_EORB_IMM:                B = eor(B, fetchOperand1());                computer.clockCount += 2;                break;            case OP_EORB_DIR:                B = eor(B, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_EORB_IND:                B = eor(B, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_EORB_EXT:                B = eor(B, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_INCA_IMP:                A = inc(A);                computer.clockCount += 2;                break;            case OP_INCB_IMP:                B = inc(B);                computer.clockCount += 2;                break;            case OP_LDAA_IMM:                A = lda(fetchOperand1());                computer.clockCount += 2;                break;            case OP_LDAA_DIR:                A = lda(load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_LDAA_IND:                A = lda(load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_LDAA_EXT:                A = lda(load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_LDAB_IMM:                B = lda(fetchOperand1());                computer.clockCount += 2;                break;            case OP_LDAB_DIR:                B = lda(load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_LDAB_IND:                B = lda(load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_LDAB_EXT:                B = lda(load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_LSRA_IMP:                A = lsr(A);                computer.clockCount += 2;                break;            case OP_LSRB_IMP:                B = lsr(B);                computer.clockCount += 2;                break;            case OP_NEGA_IMP:                A = neg(A);                computer.clockCount += 2;                break;            case OP_NEGB_IMP:                B = neg(B);                computer.clockCount += 2;                break;            case OP_ORAA_IMM:                A = ora(A, fetchOperand1());                computer.clockCount += 2;                break;            case OP_ORAA_DIR:                A = ora(A, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_ORAA_IND:                A = ora(A, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_ORAA_EXT:                A = ora(A, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_ORAB_IMM:                B = ora(B, fetchOperand1());                computer.clockCount += 2;                break;            case OP_ORAB_DIR:                B = ora(B, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_ORAB_IND:                B = ora(B, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_ORAB_EXT:                B = add(B, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_PSHA_IMP:                psh(A);                computer.clockCount += 4;                break;            case OP_PSHB_IMP:                psh(B);                computer.clockCount += 4;                break;            case OP_PULA_IMP:                A = pul();                computer.clockCount += 4;                break;            case OP_PULB_IMP:                B = pul();                computer.clockCount += 4;                break;            case OP_ROLA_IMP:                A = rol(A);                computer.clockCount += 2;                break;            case OP_ROLB_IMP:                B = rol(B);                computer.clockCount += 2;                break;            case OP_RORA_IMP:                A = ror(A);                computer.clockCount += 2;                break;            case OP_RORB_IMP:                B = ror(B);                computer.clockCount += 2;                break;            case OP_STAA_DIR:                sta((short) (fetchOperand1() & 0xff), A);                computer.clockCount += 4;                break;            case OP_STAA_IND:                sta((short) ((IX & 0xffff) + (fetchOperand1() & 0xff)), A);                computer.clockCount += 6;                break;            case OP_STAA_EXT:                sta(fetchOperand2(), A);                computer.clockCount += 5;                break;            case OP_STAB_DIR:                sta((short) (fetchOperand1() & 0xff), B);                computer.clockCount += 4;                break;            case OP_STAB_IND:                sta((short) ((IX & 0xffff) + (fetchOperand1() & 0xff)), B);                computer.clockCount += 6;                break;            case OP_STAB_EXT:                sta(fetchOperand2(), B);                computer.clockCount += 5;                break;            case OP_SBA_IMP:                A = sub(A, B);                computer.clockCount += 2;                break;            case OP_SUBA_IMM:                A = sub(A, fetchOperand1());                computer.clockCount += 2;                break;            case OP_SUBA_DIR:                A = sub(A, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_SUBA_IND:                A = sub(A, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_SUBA_EXT:                A = sub(A, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_SUBB_IMM:                B = sub(B, fetchOperand1());                computer.clockCount += 2;                break;            case OP_SUBB_DIR:                B = sub(B, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_SUBB_IND:                B = sub(B, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_SUBB_EXT:                B = sub(B, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_SBCA_IMM:                A = sbc(A, fetchOperand1());                computer.clockCount += 2;                break;            case OP_SBCA_DIR:                A = sbc(A, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_SBCA_IND:                A = sbc(A, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_SBCA_EXT:                A = sbc(A, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_SBCB_IMM:                B = sbc(B, fetchOperand1());                computer.clockCount += 2;                break;            case OP_SBCB_DIR:                B = sbc(B, load8_dir(fetchOperand1()));                computer.clockCount += 3;                break;            case OP_SBCB_IND:                B = sbc(B, load8_ind(fetchOperand1()));                computer.clockCount += 5;                break;            case OP_SBCB_EXT:                B = sbc(B, load8_ext(fetchOperand2()));                computer.clockCount += 4;                break;            case OP_TAB_IMP:                tab();                computer.clockCount += 2;                break;            case OP_TBA_IMP:                tba();                computer.clockCount += 2;                break;            case OP_TSTA_IMP:                tst(A);                computer.clockCount += 2;                break;            case OP_TSTB_IMP:                tst(B);                computer.clockCount += 2;                break;            case OP_CPX_IMM:                cpx(fetchOperand2());                computer.clockCount += 3;                break;            case OP_CPX_DIR:                cpx(load16_dir(fetchOperand1()));                computer.clockCount += 4;                break;            case OP_CPX_IND:                cpx(load16_ind(fetchOperand1()));                computer.clockCount += 6;                break;            case OP_CPX_EXT:                cpx(load16_ext(fetchOperand2()));                computer.clockCount += 5;                break;            case OP_DEX_IMP:                dex();                computer.clockCount += 4;                break;            case OP_DES_IMP:                des();                computer.clockCount += 4;                break;            case OP_INX_IMP:                inx();                computer.clockCount += 4;                break;            case OP_INS_IMP:                ins();                computer.clockCount += 4;                break;            case OP_LDX_IMM:                ldx(fetchOperand2());                computer.clockCount += 3;                break;            case OP_LDX_DIR:                ldx(load16_dir(fetchOperand1()));                computer.clockCount += 4;                break;            case OP_LDX_IND:                ldx(load16_ind(fetchOperand1()));                computer.clockCount += 6;                break;            case OP_LDX_EXT:                ldx(load16_ext(fetchOperand2()));                computer.clockCount += 5;                break;            case OP_LDS_IMM:                lds(fetchOperand2());                computer.clockCount += 3;                break;            case OP_LDS_DIR:                lds(load16_dir(fetchOperand1()));                computer.clockCount += 4;                break;            case OP_LDS_IND:                lds(load16_ind(fetchOperand1()));                computer.clockCount += 6;                break;            case OP_LDS_EXT:                lds(load16_ext(fetchOperand2()));                computer.clockCount += 5;                break;            case OP_STX_DIR:                stx((short) (fetchOperand1() & 0xff));                computer.clockCount += 5;                break;            case OP_STX_IND:                stx((short) ((IX & 0xffff) + (fetchOperand1() & 0xff)));                computer.clockCount += 7;                break;            case OP_STX_EXT:                stx(fetchOperand2());                computer.clockCount += 6;                break;            case OP_STS_DIR:                sts((short) (fetchOperand1() & 0xff));                computer.clockCount += 5;                break;            case OP_STS_IND:                sts((short) ((IX & 0xffff) + (fetchOperand1() & 0xff)));                computer.clockCount += 7;                break;            case OP_STS_EXT:                sts(fetchOperand2());                computer.clockCount += 6;                break;            case OP_TXS_IMP:                txs();                computer.clockCount += 4;                break;            case OP_TSX_IMP:                tsx();                computer.clockCount += 4;                break;            case OP_ASL_IND:                offset = fetchOperand1();                store8_ind(offset, asl(load8_ind(offset)));                computer.clockCount += 7;                break;            case OP_ASL_EXT:                addr = fetchOperand2();                store8_ext(addr, asl(load8_ext(addr)));                computer.clockCount += 6;                break;            case OP_ASR_IND:                offset = fetchOperand1();                store8_ind(offset, asr(load8_ind(offset)));                computer.clockCount += 7;                break;            case OP_ASR_EXT:                addr = fetchOperand2();                store8_ext(addr, asr(load8_ext(addr)));                computer.clockCount += 6;                break;            case OP_CLR_IND:                store8_ind(fetchOperand1(), clr());                computer.clockCount += 7;                break;            case OP_CLR_EXT:                store8_ext(fetchOperand2(), clr());                computer.clockCount += 6;                break;            case OP_COM_IND:                offset = fetchOperand1();                store8_ind(offset, com(load8_ind(offset)));                computer.clockCount += 7;                break;            case OP_COM_EXT:                addr = fetchOperand2();                store8_ext(addr, com(load8_ext(addr)));                computer.clockCount += 6;                break;            case OP_DEC_IND:                offset = fetchOperand1();                store8_ind(offset, dec(load8_ind(offset)));                computer.clockCount += 7;                break;            case OP_DEC_EXT:                addr = fetchOperand2();                store8_ext(addr, dec(load8_ext(addr)));                computer.clockCount += 6;                break;            case OP_INC_IND:                offset = fetchOperand1();                store8_ind(offset, inc(load8_ind(offset)));                computer.clockCount += 7;                break;            case OP_INC_EXT:                addr = fetchOperand2();                store8_ext(addr, inc(load8_ext(addr)));                computer.clockCount += 6;                break;            case OP_LSR_IND:                offset = fetchOperand1();                store8_ind(offset, lsr(load8_ind(offset)));                computer.clockCount += 7;                break;            case OP_LSR_EXT:                addr = fetchOperand2();                store8_ext(addr, lsr(load8_ext(addr)));                computer.clockCount += 6;                break;            case OP_NEG_IND:                offset = fetchOperand1();                store8_ind(offset, neg(load8_ind(offset)));                computer.clockCount += 7;                break;            case OP_NEG_EXT:                addr = fetchOperand2();                store8_ext(addr, neg(load8_ext(addr)));                computer.clockCount += 6;                break;            case OP_ROL_IND:                offset = fetchOperand1();                store8_ind(offset, rol(load8_ind(offset)));                computer.clockCount += 7;                break;            case OP_ROL_EXT:                addr = fetchOperand2();                store8_ext(addr, rol(load8_ext(addr)));                computer.clockCount += 6;                break;            case OP_ROR_IND:                offset = fetchOperand1();                store8_ind(offset, ror(load8_ind(offset)));                computer.clockCount += 7;                break;            case OP_ROR_EXT:                addr = fetchOperand2();                store8_ext(addr, ror(load8_ext(addr)));                computer.clockCount += 6;                break;            case OP_TST_IND:                tst(load8_ind(fetchOperand1()));                computer.clockCount += 7;                break;            case OP_TST_EXT:                tst(load8_ext(fetchOperand2()));                computer.clockCount += 6;                break;            case OP_BRA_REL:                branch(fetchOperand1(), true);                computer.clockCount += 4;                break;            case OP_BCC_REL:                branch(fetchOperand1(), !CC);                computer.clockCount += 4;                break;            case OP_BCS_REL:                branch(fetchOperand1(), CC);                computer.clockCount += 4;                break;            case OP_BEQ_REL:                branch(fetchOperand1(), CZ);                computer.clockCount += 4;                break;            case OP_BGE_REL:                branch(fetchOperand1(), !(CN ^ CV));                computer.clockCount += 4;                break;            case OP_BGT_REL:                branch(fetchOperand1(), !(CZ | (CN ^ CV)));                computer.clockCount += 4;                break;            case OP_BHI_REL:                branch(fetchOperand1(), !(CC | CZ));                computer.clockCount += 4;                break;            case OP_BLE_REL:                branch(fetchOperand1(), CZ | (CN ^ CV));                computer.clockCount += 4;                break;            case OP_BLS_REL:                branch(fetchOperand1(), CC | CZ);                computer.clockCount += 4;                break;            case OP_BLT_REL:                branch(fetchOperand1(), CN ^ CV);                computer.clockCount += 4;                break;            case OP_BMI_REL:                branch(fetchOperand1(), CN);                computer.clockCount += 4;                break;            case OP_BNE_REL:                branch(fetchOperand1(), !CZ);                computer.clockCount += 4;                break;            case OP_BVC_REL:                branch(fetchOperand1(), !CV);                computer.clockCount += 4;                break;            case OP_BVS_REL:                branch(fetchOperand1(), CV);                computer.clockCount += 4;                break;            case OP_BPL_REL:                branch(fetchOperand1(), !CN);                computer.clockCount += 4;                break;            case OP_BSR_REL:                bsr(fetchOperand1());                computer.clockCount += 8;                break;            case OP_JMP_IND:                jump((short) ((IX & 0xffff) + (fetchOperand1() & 0xff)));                computer.clockCount += 4;                break;            case OP_JMP_EXT:                jump(fetchOperand2());                computer.clockCount += 3;                break;            case OP_JSR_IND:                jsr((short) ((IX & 0xffff) + (fetchOperand1() & 0xff)));                computer.clockCount += 8;                break;            case OP_JSR_EXT:                jsr(fetchOperand2());                computer.clockCount += 9;                break;            case OP_NOP_IMP:                computer.clockCount += 2;                break;            case OP_RTI_IMP:                rti();                computer.clockCount += 10;                break;            case OP_RTS_IMP:                rts();                computer.clockCount += 5;                break;            case OP_SWI_IMP:                swi();                computer.clockCount += 12;                break;            case OP_WAI_IMP:                wai();                computer.clockCount += 9;                break;            case OP_CLC_IMP:                clc();                computer.clockCount += 2;                break;            case OP_CLI_IMP:                cli();                computer.clockCount += 2;                break;            case OP_CLV_IMP:                clv();                computer.clockCount += 2;                break;            case OP_SEC_IMP:                sec();                computer.clockCount += 2;                break;            case OP_SEI_IMP:                sei();                computer.clockCount += 2;                break;            case OP_SEV_IMP:                sev();                computer.clockCount += 2;                break;            case OP_TAP_IMP:                tap();                computer.clockCount += 2;                break;            case OP_TPA_IMP:                tpa();                computer.clockCount += 2;                break;            // \u4ee5\u4e0bMB8861\u306e\u62e1\u5f35\u547d\u4ee4            case OP_NIM_IND:                value = fetchOperand1();                offset = fetchOperand1();                store8_ind(offset, nim(value, load8_ind(offset)));                computer.clockCount += 8;                break;            case OP_OIM_IND:                value = fetchOperand1();                offset = fetchOperand1();                store8_ind(offset, oim(value, load8_ind(offset)));                computer.clockCount += 8;                break;            case OP_XIM_IND:                value = fetchOperand1();                offset = fetchOperand1();                store8_ind(offset, xim(value, load8_ind(offset)));                computer.clockCount += 8;                break;            case OP_TMM_IND:                tmm(fetchOperand1(), load8_ind(fetchOperand1()));                computer.clockCount += 7;                break;            case OP_ADX_IMM:                IX = add16(IX, (short) (fetchOperand1() & 0xff));                computer.clockCount += 3;                break;            case OP_ADX_EXT:                IX = add16(IX, load16_ext(fetchOperand2()));                computer.clockCount += 7;                break;            default:                nop();                computer.clockCount += 1;                break;            }        }        return computer.clockCount - (initial_clock + clocks);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "saveState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveState(StateSet ss) {        ss.set(\"MB8861.A\", A);        ss.set(\"MB8861.B\", B);        ss.set(\"MB8861.IX\", IX);        ss.set(\"MB8861.SP\", SP);        ss.set(\"MB8861.PC\", PC);        ss.set(\"MB8861.CH\", CH);        ss.set(\"MB8861.CI\", CI);        ss.set(\"MB8861.CN\", CN);        ss.set(\"MB8861.CZ\", CZ);        ss.set(\"MB8861.CV\", CV);        ss.set(\"MB8861.CC\", CC);        ss.set(\"MB8861.resetStatus\", resetStatus);        ss.set(\"MB8861.nmiStatus\", nmiStatus);        ss.set(\"MB8861.irqStatus\", irqStatus);        ss.set(\"MB8861.haltStatus\", haltStatus);        ss.set(\"MB8861.haltProcessed\", haltProcessed);        ss.set(\"MB8861.fetchWai\", fetchWai);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "loadState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadState(StateSet ss) {        A = (Byte)ss.get(\"MB8861.A\");        B = (Byte)ss.get(\"MB8861.B\");        IX = (Short)ss.get(\"MB8861.IX\");        SP = (Short)ss.get(\"MB8861.SP\");        PC = (Short)ss.get(\"MB8861.PC\");        CH = (Boolean)ss.get(\"MB8861.CH\");        CI = (Boolean)ss.get(\"MB8861.CI\");        CN = (Boolean)ss.get(\"MB8861.CN\");        CZ = (Boolean)ss.get(\"MB8861.CZ\");        CV = (Boolean)ss.get(\"MB8861.CV\");        CC = (Boolean)ss.get(\"MB8861.CC\");        resetStatus = (Boolean)ss.get(\"MB8861.resetStatus\");        nmiStatus = (Boolean)ss.get(\"MB8861.nmiStatus\");        irqStatus = (Boolean)ss.get(\"MB8861.irqStatus\");        haltStatus = (Boolean)ss.get(\"MB8861.haltStatus\");        haltProcessed = (Boolean)ss.get(\"MB8861.haltProcessed\");        fetchWai = (Boolean)ss.get(\"MB8861.fetchWai\");    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/MB8861.java", "stars": "4", "class": {"name": "MB8861", "extends": "CPU", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "helloWorldInternationalized", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String helloWorldInternationalized() {        return \"Good morning\";    }", "url": "https://raw.githubusercontent.com/joneconsulting/springbootproject/master/src/main/java/com/example/demo/controller/HelloWorldController.java", "stars": "2", "class": {"name": "HelloWorldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "helloWorld", "params": ["Locale"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String helloWorld(            @RequestHeader(name=\"Accept-Language\", required = false)            Locale locale) {        return messageSource.getMessage(                \"greeting.message\", null, locale);    }", "url": "https://raw.githubusercontent.com/joneconsulting/springbootproject/master/src/main/java/com/example/demo/controller/HelloWorldController.java", "stars": "2", "class": {"name": "HelloWorldController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testFieldTypes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testFieldTypes() {        for (int i = 0; i < BOOK_ENTRY_FIELD_NAMES.length; i++) {            FieldTestUtils.checkFieldType(testBook, BOOK_ENTRY_FIELD_TYPES[i], BOOK_ENTRY_FIELD_NAMES[i]);        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testCtorFieldInitialisation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCtorFieldInitialisation() {        BookEntryTestUtils.checkBookFieldValues(testBook, BOOK_ENTRY_FIELD_NAMES, BOOK_ENTRY_FIELD_VALUES);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetTitle() {        String fieldName = TITLE_FIELD_NAME;        String expected = \"Test Title\";        FieldTestUtils.setPrivateField(testBook, testBook.getClass(), fieldName, expected);        String actual = testBook.getTitle();        assertEquals(\"Unexpected \" + fieldName + \" returned by getter.\", expected, actual);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetAuthors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetAuthors() {        String fieldName = AUTHORS_FIELD_NAME;        String[] expected = { \"Test Author A\", \"Test Author B\" };        FieldTestUtils.setPrivateField(testBook, testBook.getClass(), fieldName, expected);        String[] actual = testBook.getAuthors();        assertArrayEquals(\"Unexpected \" + fieldName + \" returned by getter.\", expected, actual);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetRating", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetRating() {        String fieldName = RATING_FIELD_NAME;        float expected = 2.3f;        FieldTestUtils.setPrivateField(testBook, testBook.getClass(), fieldName, expected);        float actual = testBook.getRating();        assertEquals(\"Unexpected \" + fieldName + \" returned by getter.\", expected, actual, CMP_DELTA);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetISBN", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetISBN() {        String fieldName = ISBN_FIELD_NAME;        String expected = \"158234681X\";        FieldTestUtils.setPrivateField(testBook, testBook.getClass(), fieldName, expected);        String actual = testBook.getISBN();        assertEquals(\"Unexpected \" + fieldName + \" returned by getter.\", expected, actual);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetPages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetPages() {        String fieldName = PAGES_FIELD_NAME;        int expected = 123;        FieldTestUtils.setPrivateField(testBook, testBook.getClass(), fieldName, expected);        int actual = testBook.getPages();        assertEquals(\"Unexpected \" + fieldName + \" returned by getter.\", expected, actual);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkEquality", "params": ["BookEntry", "BookEntry", "String", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkEquality(BookEntry bookA, BookEntry bookB, String field, boolean expected) {        if (expected) {            assertTrue(\"True return value expected for same fields.\", bookA.equals(bookB) && bookB.equals(bookA));            assertEquals(\"Hashcode expected to be the same for objects with the same state.\", bookA.hashCode(), bookB.hashCode());        } else {            assertTrue(\"False return value expected for different \" + field + \".\", !bookA.equals(bookB) && !bookB.equals(bookA));            assertNotEquals(\"Hashcode should be different for objects with different state.\", bookA.hashCode(), bookB.hashCode());        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testEqualsAndHashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testEqualsAndHashCode() {        BookEntry bookA = new BookEntry(DEFAULT_TITLE, DEFAULT_AUTHORS, DEFAULT_RATING, DEFAULT_ISBN, DEFAULT_PAGES);        BookEntry bookB = new BookEntry(DEFAULT_TITLE, DEFAULT_AUTHORS, DEFAULT_RATING, DEFAULT_ISBN, DEFAULT_PAGES);        assertTrue(\"True return value expected for same book instance.\", bookA.equals(bookA) && bookB.equals(bookB));        assertEquals(\"Hashcode expected to be the same for same instance.\", bookA.hashCode(), bookA.hashCode());        assertFalse(\"False return value expected if compared to different object type.\", bookA.equals(\"test\"));        assertFalse(\"False return value expected if compared to null.\", bookA.equals(null));        checkEquality(bookA, bookB, TITLE_FIELD_NAME, true);        bookA = new BookEntry(\"Title A\", DEFAULT_AUTHORS, DEFAULT_RATING, DEFAULT_ISBN, DEFAULT_PAGES);        bookB = new BookEntry(\"Title B\", DEFAULT_AUTHORS, DEFAULT_RATING, DEFAULT_ISBN, DEFAULT_PAGES);        checkEquality(bookA, bookB, TITLE_FIELD_NAME, false);        bookA = new BookEntry(DEFAULT_TITLE, new String[]{\"Author A\"}, DEFAULT_RATING, DEFAULT_ISBN, DEFAULT_PAGES);        bookB = new BookEntry(DEFAULT_TITLE, new String[]{\"Author B\"}, DEFAULT_RATING, DEFAULT_ISBN, DEFAULT_PAGES);        checkEquality(bookA, bookB, AUTHORS_FIELD_NAME, false);        bookA = new BookEntry(DEFAULT_TITLE, new String[]{\"Author A\"}, DEFAULT_RATING, DEFAULT_ISBN, DEFAULT_PAGES);        bookB = new BookEntry(DEFAULT_TITLE, new String[]{\"Author A\", \"Author B\"}, DEFAULT_RATING, DEFAULT_ISBN, DEFAULT_PAGES);        checkEquality(bookA, bookB, AUTHORS_FIELD_NAME, false);        bookA = new BookEntry(DEFAULT_TITLE, DEFAULT_AUTHORS, 2f, DEFAULT_ISBN, DEFAULT_PAGES);        bookB = new BookEntry(DEFAULT_TITLE, DEFAULT_AUTHORS, 3f, DEFAULT_ISBN, DEFAULT_PAGES);        checkEquality(bookA, bookB, RATING_FIELD_NAME, false);        bookA = new BookEntry(DEFAULT_TITLE, DEFAULT_AUTHORS, DEFAULT_RATING, \"1400054036\", DEFAULT_PAGES);        bookB = new BookEntry(DEFAULT_TITLE, DEFAULT_AUTHORS, DEFAULT_RATING, \"439554896\", DEFAULT_PAGES);        checkEquality(bookA, bookB, ISBN_FIELD_NAME, false);        bookA = new BookEntry(DEFAULT_TITLE, DEFAULT_AUTHORS, DEFAULT_RATING, DEFAULT_ISBN, 300);        bookB = new BookEntry(DEFAULT_TITLE, DEFAULT_AUTHORS, DEFAULT_RATING, DEFAULT_ISBN, 400);        checkEquality(bookA, bookB, PAGES_FIELD_NAME, false);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testToStringReturnValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testToStringReturnValue() {        String expectedResult = DEFAULT_TOSTRING_RESULT;        String actualResult = testBook.toString();        // ignore leading and trailing white spaces        // and correct for potential Windows line endings        assertEquals(\"ToString result not as expected.\", expectedResult.replaceAll(\"\\r\", \"\").trim(),                actualResult.replaceAll(\"\\r\", \"\").trim());    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryBasicTest.java", "stars": "6", "class": {"name": "BookEntryBasicTest", "extends": "BookEntryTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAnimationCancel", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationCancel (android.view.View p0)\t{\t\tn_onAnimationCancel (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationCancel", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationCancel (android.view.View p0);\tpublic void onAnimationEnd (android.view.View p0)\t{\t\tn_onAnimationEnd (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onAnimationEnd", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationEnd (android.view.View p0)\t{\t\tn_onAnimationEnd (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationEnd", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationEnd (android.view.View p0);\tpublic void onAnimationStart (android.view.View p0)\t{\t\tn_onAnimationStart (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onAnimationStart", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationStart (android.view.View p0)\t{\t\tn_onAnimationStart (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationStart", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationStart (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getAttr1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAttr1() {        return attr1;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/MyClass1.java", "stars": "1", "class": {"name": "MyClass1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAttr1", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAttr1(String attr1) {        this.attr1 = attr1;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/MyClass1.java", "stars": "1", "class": {"name": "MyClass1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAttr2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MyClass2", "snippet": "    public MyClass2 getAttr2() {        return attr2;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/MyClass1.java", "stars": "1", "class": {"name": "MyClass1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAttr2", "params": ["MyClass2"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAttr2(MyClass2 attr2) {        this.attr2 = attr2;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/MyClass1.java", "stars": "1", "class": {"name": "MyClass1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "totalPossibleWords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int totalPossibleWords() {\t\treturn listMots.size();\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/permutationSearch.java", "stars": "4", "class": {"name": "permutationSearch", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "possibleWord", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Mot", "snippet": "\tpublic Mot possibleWord(int index) {\t\treturn listMots.get(index);\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/permutationSearch.java", "stars": "4", "class": {"name": "permutationSearch", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "combinationFinder", "params": ["String", "String", "ArrayList<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void combinationFinder(String str, String base, ArrayList<String> permutationsTrouve) {\t\t// Ne faites ce processus que s'il y a 4 lettres dans le mot (car nous allons en\t\t// supprimer une \u00e0 la fois et elle ne peut pas \u00eatre inf\u00e9rieure \u00e0 3)\t\tif ((base.length() >= 3 && str.length() > 0) || (base.length() >= 2 && str.length() > 1)\t\t\t\t|| (base.length() >= 1 && str.length() > 2) || (base.length() >= 0 && str.length() > 3)) {\t\t\t// Supprimer et ajouter \u00e0 nouveau chaque lettre autant de fois qu'il y a de lettres dans la cha\u00eene\t\t\tfor (int i = 0; i < str.length(); ++i) {\t\t\t\t// Enregistrez la lettre avant de la supprimer\t\t\t\tchar aux = str.charAt(i);\t\t\t\t// Utilisez StringBuilder pour tout simplifier\t\t\t\tStringBuilder newStr = new StringBuilder(str);\t\t\t\t// Supprime le caract\u00e8re de la cha\u00eene \u00e0 la position \"i\"\t\t\t\tnewStr.deleteCharAt(i);\t\t\t\t// C'est un nouveau mot! Enregistrez dans la base de donn\u00e9es la nouvelle\t\t\t\t// permutation avec les lettres n\u00e9cessaires du tableau\t\t\t\tpermutationsTrouve.add(base + newStr.toString());\t\t\t\t// Rappelle cette fonction mais sans la lettre que l'on vient de supprimer\t\t\t\tcombinationFinder(newStr.toString(), base, permutationsTrouve);\t\t\t\t// Ins\u00e8re la lettre que nous avons utilis\u00e9e et passe \u00e0 une autre it\u00e9ration de la\t\t\t\t// fonction\t\t\t\tnewStr.insert(i, aux);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/permutationSearch.java", "stars": "4", "class": {"name": "permutationSearch", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "creerPermutations", "params": ["ArrayList<Integer>", "int", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void creerPermutations(ArrayList<Integer> lettresDePlat, int xPos, int yPos, boolean horizontal) {\t\tArrayList<String> permutationsTrouve = new ArrayList<String>();\t\tString lettresMain = \"\";\t\tString motPlateau = \"\";\t\tfor (int i = 0; i < lettresDePlat.size(); ++i)\t\t\tmotPlateau += (char) (int) lettresDePlat.get(i);\t\tfor (int i = 0; i < 7; ++i) {\t\t\tif (main[i] != 0)\t\t\t\tlettresMain += (char) main[i];\t\t}\t\t// Actuellement, letterMain n'a que les lettres de la main du joueur. Nous\t\t// ajoutons les lettres du tableau plus tard (car le cant me modifi\u00e9 ou\t\t// supprim\u00e9)\t\t// V\u00e9rification de toutes les combinaisons possibles\t\tpermutationsTrouve.add(motPlateau + lettresMain);\t\tcombinationFinder(lettresMain, motPlateau, permutationsTrouve);\t\tint index = 0;\t\twhile (index < permutationsTrouve.size()) {\t\t\tif ((!permutationsTrouve.get(index).contains(motPlateau))\t\t\t\t\t|| (listAnagram.contains(permutationsTrouve.get(index)))\t\t\t\t\t|| (Collections.frequency(permutationsTrouve, permutationsTrouve.get(index)) > 1)\t\t\t\t\t|| (aDico.contains('\"' + permutationsTrouve.get(index) + '\"') == null)) {\t\t\t\tpermutationsTrouve.remove(index);\t\t\t} else {\t\t\t\tindex++;\t\t\t}\t\t}\t\t// Jusqu'\u00e0 ici, le seul processus est de trouver toutes les permutations\t\t// existantes\t\t// Maintenant, le reste du code mettra \u00e0 jour la sortie de l'algorithme\t\tString auxStr = \"\";\t\tArrayList<String> realWordList = new ArrayList<String>();\t\t// \u00c9changez l'anagramme avec de vrais mots\t\tfor (int indexMotList = 0; indexMotList < permutationsTrouve.size(); ++indexMotList) {\t\t\tList<String> dicoTranslator = aDico.contains('\"' + permutationsTrouve.get(indexMotList) + '\"');\t\t\tfor (int indexMotDico = 0; indexMotDico < dicoTranslator.size(); ++indexMotDico) {\t\t\t\t// Lecture de chaque mot de chaque entit\u00e9 dans le dictionnaire dont nous avons\t\t\t\t// trouv\u00e9 les r\u00e9sultats\t\t\t\tauxStr = dicoTranslator.get(indexMotDico);\t\t\t\t// (supprimer le \"dans les deux extr\u00eames)\t\t\t\tauxStr = auxStr.substring(1, auxStr.length() - 1);\t\t\t\t// Ins\u00e9rer un mot dans wordList\t\t\t\trealWordList.add(auxStr);\t\t\t}\t\t}\t\t// V\u00e9rifie s'il essaie d'ins\u00e9rer un mot qui a d\u00e9j\u00e0 \u00e9t\u00e9 ins\u00e9r\u00e9 avant\t\tindex = 0;\t\twhile (index < realWordList.size()) {\t\t\tif ((Collections.frequency(realWordList, realWordList.get(index)) > 1)\t\t\t\t\t|| (Collections.frequency(usedMots, realWordList.get(index)) == 1))\t\t\t\trealWordList.remove(index);\t\t\telse\t\t\t\tindex++;\t\t}\t\t// V\u00e9rifier si le mot peut r\u00e9ellement \u00eatre plac\u00e9 dans le tableau\t\tint[] scoreLettre = { 1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 10, 1, 2, 1, 1, 3, 8, 1, 1, 1, 1, 4, 10, 10, 10, 10 };\t\tint sum = -1;\t\tindex = 0;\t\tboolean delete = false;\t\tint letterCount = 1;\t\tArrayList<Integer> mannequinSet = new ArrayList<Integer>(Arrays.asList(0,0,0,0,0,0,0));\t\tJoueur mannequin = new Joueur(\"-\", mannequinSet);\t\tif (horizontal) {\t\t\t// Faites simplement d\u00e9filer le y\t\t\twhile (index < realWordList.size()) {\t\t\t\tdelete = false;\t\t\t\tint start = yPos - realWordList.get(index).indexOf(motPlateau);\t\t\t\tint startWord = yPos;\t\t\t\tint endWord = (motPlateau.length() == 0) ? yPos : yPos + motPlateau.length() - 1;\t\t\t\tint end = start + realWordList.get(index).length() - 1;\t\t\t\tsum = 0;\t\t\t\tint subX = 0;\t\t\t\tint topX = 0;\t\t\t\tif (realWordList.get(index).indexOf(motPlateau) == -1)\t\t\t\t\tdelete = true;\t\t\t\tif (start >= 0 && end <= 14 && !delete) {\t\t\t\t\t//\t\t\t\t\t// Tout v\u00e9rifier avant le mot trouv\u00e9 dans le tableau\t\t\t\t\t//\t\t\t\t\tif(plat.returnBoite(xPos, start-1) > 5 || plat.returnBoite(xPos, end+1) > 5 ) {\t\t\t\t\t\tdelete = true;\t\t\t\t\t}\t\t\t\t\tfor (int itY = start; itY < startWord && !delete; ++itY) {\t\t\t\t\t\tif (plat.returnBoite(xPos, itY) > 5)\t\t\t\t\t\t\tdelete = true;\t\t\t\t\t\telse {\t\t\t\t\t\t\t// V\u00e9rifier verticalement s'il forme involontairement un nouveau mot valide\t\t\t\t\t\t\tletterCount = 1;\t\t\t\t\t\t\tsubX = xPos;\t\t\t\t\t\t\twhile (plat.returnBoite(subX - 1, itY) >= 5) {\t\t\t\t\t\t\t\tletterCount++;\t\t\t\t\t\t\t\tsubX--;\t\t\t\t\t\t\t}\t\t\t\t\t\t\t// Je v\u00e9rifie sous la ligne de lettres\t\t\t\t\t\t\ttopX = xPos;\t\t\t\t\t\t\twhile (plat.returnBoite(topX + 1, itY) >= 5) {\t\t\t\t\t\t\t\tletterCount++;\t\t\t\t\t\t\t\ttopX++;\t\t\t\t\t\t\t}\t\t\t\t\t\t\t// La lettre initiale est compt\u00e9e deux fois, donc le compteur doit avoir une\t\t\t\t\t\t\t// valeur sup\u00e9rieure \u00e0 2 pour \u00eatre admis\t\t\t\t\t\t\tif (letterCount >= 2) {\t\t\t\t\t\t\t\t// Une s\u00e9quence de lettres a \u00e9t\u00e9 trouv\u00e9e, elle doit \u00eatre calcul\u00e9e s'il s'agit\t\t\t\t\t\t\t\t// d'un mot reconnaissable\t\t\t\t\t\t\t\tString possibleMot = \"\";\t\t\t\t\t\t\t\tfor (int j = subX; j <= topX; ++j) { //\t\t\t\t\t\t\t\t\tif (j == xPos) {\t\t\t\t\t\t\t\t\t\tpossibleMot += realWordList.get(index).charAt(itY - start);\t\t\t\t\t\t\t\t\t}else\t\t\t\t\t\t\t\t\t\tpossibleMot += Character.toString((char) plat.returnBoite(j, itY));\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\tif (dico.contains('\"' + possibleMot + '\"') && (Collections.frequency(usedMots, possibleMot) == 0)) {\t\t\t\t\t\t\t\t\t// Le mot trouv\u00e9 a \u00e9t\u00e9 reconnu dans le dictionnaire !!!!!\t\t\t\t\t\t\t\t\tint[] wordChar = new int[possibleMot.length()];\t\t\t\t\t\t\t\t\tfor (int letterIndex = 0; letterIndex < possibleMot.length(); ++letterIndex)\t\t\t\t\t\t\t\t\t\twordChar[letterIndex] = (int) possibleMot.charAt(letterIndex);\t\t\t\t\t\t\t\t\tsum += mannequin.calculerScore(wordChar, subX, itY, true, plat);\t\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\t\tdelete = true;\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\t//\t\t\t\t\t// Tout v\u00e9rifier apr\u00e8s le mot trouv\u00e9 d\u00e9j\u00e0 positionn\u00e9 dans le tableau\t\t\t\t\tfor (int itY = endWord + 1; itY <= end && delete != true; ++itY) {\t\t\t\t\t\tif (plat.returnBoite(xPos, itY) > 5)\t\t\t\t\t\t\tdelete = true;\t\t\t\t\t\telse {\t\t\t\t\t\t\t// V\u00e9rifier verticalement s'il forme involontairement un nouveau mot valide\t\t\t\t\t\t\tletterCount = 1;\t\t\t\t\t\t\tsubX = xPos;\t\t\t\t\t\t\twhile (plat.returnBoite(subX - 1, itY) >= 5) {\t\t\t\t\t\t\t\tletterCount++;\t\t\t\t\t\t\t\tsubX--;\t\t\t\t\t\t\t}\t\t\t\t\t\t\t// Je v\u00e9rifie sous la ligne de lettres\t\t\t\t\t\t\ttopX = xPos;\t\t\t\t\t\t\twhile (plat.returnBoite(topX + 1, itY) >= 5) {\t\t\t\t\t\t\t\tletterCount++;\t\t\t\t\t\t\t\ttopX++;\t\t\t\t\t\t\t}\t\t\t\t\t\t\t// La lettre initiale est compt\u00e9e deux fois, donc le compteur doit avoir une\t\t\t\t\t\t\t// valeur sup\u00e9rieure \u00e0 2 pour \u00eatre admis\t\t\t\t\t\t\tif (letterCount >= 2) {\t\t\t\t\t\t\t\t// Une s\u00e9quence de lettres a \u00e9t\u00e9 trouv\u00e9e, elle doit \u00eatre calcul\u00e9e s'il s'agit d'un mot reconnaissable\t\t\t\t\t\t\t\tString possibleMot = \"\";\t\t\t\t\t\t\t\tfor (int j = subX; j <= topX; ++j) { //\t\t\t\t\t\t\t\t\tif (j == xPos) {\t\t\t\t\t\t\t\t\t\tpossibleMot += realWordList.get(index).charAt(itY - start);\t\t\t\t\t\t\t\t\t} else\t\t\t\t\t\t\t\t\t\tpossibleMot += Character.toString((char) plat.returnBoite(j, itY));\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\tif (dico.contains('\"' + possibleMot + '\"') && (Collections.frequency(usedMots, possibleMot) == 0)) {\t\t\t\t\t\t\t\t\t// Le mot trouv\u00e9 a \u00e9t\u00e9 reconnu dans le dictionnaire !!!!!\t\t\t\t\t\t\t\t\tint[] wordChar = new int[possibleMot.length()];\t\t\t\t\t\t\t\t\tfor (int letterIndex = 0; letterIndex < possibleMot.length(); ++letterIndex)\t\t\t\t\t\t\t\t\t\twordChar[letterIndex] = (int) possibleMot.charAt(letterIndex);\t\t\t\t\t\t\t\t\tsum += mannequin.calculerScore(wordChar, subX, itY, true, plat);\t\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\t\tdelete = true;\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t} else\t\t\t\t\tdelete = true;\t\t\t\tif (delete == true) {\t\t\t\t\trealWordList.remove(index);\t\t\t\t} else {\t\t\t\t\t// Le mot peut \u00eatre plac\u00e9 dans le tableau et suit toutes les directives \u00e0\t\t\t\t\t// ins\u00e9rer dans le tableau, ins\u00e9rez-le\t\t\t\t\tint[] wordChar = new int[realWordList.get(index).length()];\t\t\t\t\tfor (int letterIndex = 0; letterIndex < realWordList.get(index).length(); ++letterIndex)\t\t\t\t\t\twordChar[letterIndex] = (int) realWordList.get(index).charAt(letterIndex);\t\t\t\t\tsum += mannequin.calculerScore(wordChar, xPos, start, true, plat);\t\t\t\t\tMot auxMotVariable = new Mot(realWordList.get(index), xPos, start, true, sum);\t\t\t\t\tlistMots.add(auxMotVariable);\t\t\t\t\trealWordList.remove(index);\t\t\t\t}\t\t\t}\t\t} else {\t\t\t// Faites simplement d\u00e9filer le x\t\t\twhile (index < realWordList.size()) {\t\t\t\tdelete = false;\t\t\t\tint start = xPos - realWordList.get(index).indexOf(motPlateau);\t\t\t\tint startWord = xPos;\t\t\t\tint endWord = xPos + motPlateau.length() - 1;\t\t\t\tint end = start + realWordList.get(index).length() - 1;\t\t\t\tsum = 0;\t\t\t\tint subY = 0;\t\t\t\tint topY = 0;\t\t\t\tif (realWordList.get(index).indexOf(motPlateau) == -1)\t\t\t\t\tdelete = true;\t\t\t\tif(plat.returnBoite(start - 1, yPos) > 5 || plat.returnBoite(end+1, yPos) > 5 ) {\t\t\t\t\tdelete = true;\t\t\t\t}\t\t\t\tif (start >= 0 && end <= 14 && !delete) {\t\t\t\t\tfor (int itX = start; itX < startWord && delete != true; ++itX) {\t\t\t\t\t\tif (plat.returnBoite(itX, yPos) > 5)\t\t\t\t\t\t\tdelete = true;\t\t\t\t\t\telse {\t\t\t\t\t\t\t// V\u00e9rifier horizontalement s'il forme involontairement un nouveau mot valide\t\t\t\t\t\t\tletterCount = 1;\t\t\t\t\t\t\tsubY = yPos;\t\t\t\t\t\t\twhile (plat.returnBoite(itX, subY - 1) >= 5) {\t\t\t\t\t\t\t\tletterCount++;\t\t\t\t\t\t\t\tsubY--;\t\t\t\t\t\t\t}\t\t\t\t\t\t\t// Je v\u00e9rifie sous la ligne de lettres\t\t\t\t\t\t\ttopY = yPos;\t\t\t\t\t\t\twhile (plat.returnBoite(itX, topY + 1) >= 5) {\t\t\t\t\t\t\t\tletterCount++;\t\t\t\t\t\t\t\ttopY++;\t\t\t\t\t\t\t}\t\t\t\t\t\t\t// La lettre initiale est compt\u00e9e deux fois, donc le compteur doit avoir une\t\t\t\t\t\t\t// valeur sup\u00e9rieure \u00e0 2 pour \u00eatre admis\t\t\t\t\t\t\tif (letterCount >= 2) {\t\t\t\t\t\t\t\t// Une s\u00e9quence de lettres a \u00e9t\u00e9 trouv\u00e9e, elle doit \u00eatre calcul\u00e9e s'il s'agit\t\t\t\t\t\t\t\t// d'un mot reconnaissable\t\t\t\t\t\t\t\tString possibleMot = \"\";\t\t\t\t\t\t\t\tfor (int j = subY; j <= topY; ++j) { //\t\t\t\t\t\t\t\t\tif (j == yPos) {\t\t\t\t\t\t\t\t\t\tpossibleMot += realWordList.get(index).charAt(itX - start);\t\t\t\t\t\t\t\t\t} else\t\t\t\t\t\t\t\t\t\tpossibleMot += Character.toString((char) plat.returnBoite(itX, j));\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\tif (dico.contains('\"' + possibleMot + '\"') && (Collections.frequency(usedMots, possibleMot) == 0)) {\t\t\t\t\t\t\t\t\t// Le mot trouv\u00e9 a \u00e9t\u00e9 reconnu dans le dictionnaire !!!!!\t\t\t\t\t\t\t\t\tint[] wordChar = new int[possibleMot.length()];\t\t\t\t\t\t\t\t\tfor (int letterIndex = 0; letterIndex < possibleMot.length(); ++letterIndex)\t\t\t\t\t\t\t\t\t\twordChar[letterIndex] = (int) possibleMot.charAt(letterIndex);\t\t\t\t\t\t\t\t\tsum += mannequin.calculerScore(wordChar, itX, subY, false, plat);\t\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\t\tdelete = true;\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tfor (int itX = endWord + 1; itX <= end && delete != true; ++itX) {\t\t\t\t\t\tif (plat.returnBoite(itX, yPos) > 5)\t\t\t\t\t\t\tdelete = true;\t\t\t\t\t\telse {\t\t\t\t\t\t\t// V\u00e9rifier horizontalement s'il forme involontairement un nouveau mot valide\t\t\t\t\t\t\tletterCount = 1;\t\t\t\t\t\t\tsubY = yPos;\t\t\t\t\t\t\twhile (plat.returnBoite(itX, subY - 1) >= 5) {\t\t\t\t\t\t\t\tletterCount++;\t\t\t\t\t\t\t\tsubY--;\t\t\t\t\t\t\t}\t\t\t\t\t\t\t// Je v\u00e9rifie sous la ligne de lettres\t\t\t\t\t\t\ttopY = yPos;\t\t\t\t\t\t\twhile (plat.returnBoite(itX, topY + 1) >= 5) {\t\t\t\t\t\t\t\tletterCount++;\t\t\t\t\t\t\t\ttopY++;\t\t\t\t\t\t\t}\t\t\t\t\t\t\t// La lettre initiale est compt\u00e9e deux fois, donc le compteur doit avoir une\t\t\t\t\t\t\t// valeur sup\u00e9rieure \u00e0 2 pour \u00eatre admis\t\t\t\t\t\t\tif (letterCount >= 2) {\t\t\t\t\t\t\t\t// Une s\u00e9quence de lettres a \u00e9t\u00e9 trouv\u00e9e, elle doit \u00eatre calcul\u00e9e s'il s'agit\t\t\t\t\t\t\t\t// d'un mot reconnaissable\t\t\t\t\t\t\t\tString possibleMot = \"\";\t\t\t\t\t\t\t\tfor (int j = subY; j <= topY; ++j) { //\t\t\t\t\t\t\t\t\tif (j == yPos) {\t\t\t\t\t\t\t\t\t\tpossibleMot += realWordList.get(index).charAt(itX - start);\t\t\t\t\t\t\t\t\t} else\t\t\t\t\t\t\t\t\t\tpossibleMot += Character.toString((char) plat.returnBoite(itX, j));\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\tif (dico.contains('\"' + possibleMot + '\"') && (Collections.frequency(usedMots, possibleMot) == 0)) {\t\t\t\t\t\t\t\t\t// Le mot trouv\u00e9 a \u00e9t\u00e9 reconnu dans le dictionnaire !!!!!\t\t\t\t\t\t\t\t\tint[] wordChar = new int[possibleMot.length()];\t\t\t\t\t\t\t\t\tfor (int letterIndex = 0; letterIndex < possibleMot.length(); ++letterIndex)\t\t\t\t\t\t\t\t\t\twordChar[letterIndex] = (int) possibleMot.charAt(letterIndex);\t\t\t\t\t\t\t\t\tsum += mannequin.calculerScore(wordChar, itX, subY, false, plat);\t\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\t\tdelete = true;\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t} else\t\t\t\t\tdelete = true;\t\t\t\tif (delete == true) {\t\t\t\t\trealWordList.remove(index);\t\t\t\t} else {\t\t\t\t\t// Le mot peut \u00eatre plac\u00e9 dans le tableau et suit toutes les directives \u00e0\t\t\t\t\t// ins\u00e9rer dans le tableau, ins\u00e9rez-le\t\t\t\t\tint[] wordChar = new int[realWordList.get(index).length()];\t\t\t\t\tfor (int letterIndex = 0; letterIndex < realWordList.get(index).length(); ++letterIndex)\t\t\t\t\t\twordChar[letterIndex] = (int) realWordList.get(index).charAt(letterIndex);\t\t\t\t\tsum += mannequin.calculerScore(wordChar, start, yPos, false, plat);\t\t\t\t\tMot auxMotVariable = new Mot(realWordList.get(index), start, yPos, false, sum);\t\t\t\t\tlistMots.add(auxMotVariable);\t\t\t\t\tindex++;\t\t\t\t}\t\t\t}\t\t}\t\t// Ordre bas\u00e9 sur des points plus \u00e9lev\u00e9s par mot en premier\t\t// Fabriqu\u00e9 de mani\u00e8re \u00e0 ce que les deux listes (mot et points) effectuent les\t\t// m\u00eames mouvements de commande\t\tfor (int i = 0; i < totalPossibleWords(); i++) {\t\t\tfor (int j = i + 1; j < totalPossibleWords(); j++) {\t\t\t\tif (possibleWord(i).verifierPoints() < possibleWord(j).verifierPoints()) {\t\t\t\t\tCollections.swap(listMots, i, j);\t\t\t\t}\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/permutationSearch.java", "stars": "4", "class": {"name": "permutationSearch", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "suggestionMots", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void suggestionMots() {\t\tArrayList<Integer> lettresDePlat = new ArrayList<Integer>();\t\tlistMots.clear();\t\t// Tout d'abord, je vais v\u00e9rifier s'il y a des mots dans le tableau pour gagner\t\t// du temps d'ex\u00e9cution\t\tif (plat.returnBoite(7, 7) == 3) {\t\t\t// Il n'y a pas de mots dans le tableau\t\t\t// La seule permutation que nous pouvons trouver est celle avec les lettres dans\t\t\t// notre main\t\t\tcreerPermutations(lettresDePlat, 7, 7, true);\t\t} else {\t\t\t// Regardant horizontalement\t\t\tfor (int i = 0; i < 15; ++i) {\t\t\t\tfor (int j = 0; j < 15; ++j) {\t\t\t\t\t// Rechercher la table horizontalement\t\t\t\t\tif ((plat.returnBoite(i, j) > 5) && (j == 0 || plat.returnBoite(i, j - 1) <= 5)) {\t\t\t\t\t\tlettresDePlat.clear();\t\t\t\t\t\tlettresDePlat.add(plat.returnBoite(i, j));\t\t\t\t\t\t// Lettre trouv\u00e9e\t\t\t\t\t\tint indexJ = j;\t\t\t\t\t\twhile (plat.returnBoite(i, indexJ + 1) > 5) {\t\t\t\t\t\t\tindexJ++;\t\t\t\t\t\t\tlettresDePlat.add(plat.returnBoite(i, indexJ));\t\t\t\t\t\t}\t\t\t\t\t\t// Termin\u00e9 avec la succession de lettres ensemble\t\t\t\t\t\tcreerPermutations(lettresDePlat, i, j, true);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\t// Regardant verticalement\t\t\tfor (int i = 0; i < 15; ++i) {\t\t\t\tfor (int j = 0; j < 15; ++j) {\t\t\t\t\t// Recherche de table verticalement\t\t\t\t\tif ((plat.returnBoite(i, j) > 5) && (i == 0 || plat.returnBoite(i - 1, j) <= 5)) {\t\t\t\t\t\tlettresDePlat.clear();\t\t\t\t\t\tlettresDePlat.add(plat.returnBoite(i, j));\t\t\t\t\t\t// Lettre trouv\u00e9e\t\t\t\t\t\tint indexI = i;\t\t\t\t\t\twhile (plat.returnBoite(indexI + 1, j) > 5) {\t\t\t\t\t\t\tindexI++;\t\t\t\t\t\t\tlettresDePlat.add(plat.returnBoite(indexI, j));\t\t\t\t\t\t}\t\t\t\t\t\t// Termin\u00e9 avec la succession de lettres ensemble\t\t\t\t\t\tcreerPermutations(lettresDePlat, i, j, false);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t} // Fin si -> Dans le cas o\u00f9 il y a d\u00e9j\u00e0 des mots sur la table\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/permutationSearch.java", "stars": "4", "class": {"name": "permutationSearch", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws IOException {\t\tanagramDictionnaire aD = new anagramDictionnaire(\"dico.txt\");\t\tDictionnaire d = new Dictionnaire(\"dico.txt\");\t\tPlateau p = new Plateau();\t\tint[] m = { 100, 101, 102, 112, 108, 117, 115 };\t\tArrayList<String> uM = new ArrayList<String>();\t\tpermutationSearch pS = new permutationSearch(aD, d, p, m, uM);\t\tSystem.out.println(pS.totalPossibleWords() + \" r\u00e9sultats trouv\u00e9s! \\n\");\t\tfor (int i = 0; i < pS.totalPossibleWords(); ++i)\t\t\tSystem.out.println(\"Mots: \" + pS.possibleWord(i).verifierNom() + \" pour un total de \"\t\t\t\t\t+ pS.possibleWord(i).verifierPoints() + \" points! (PosX:\" + pS.possibleWord(i).verifierX()\t\t\t\t\t+ \"|PosY:\" + pS.possibleWord(i).verifierY() + \")\");\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/permutationSearch.java", "stars": "4", "class": {"name": "permutationSearch", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["AbstractFile"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void add(AbstractFile file);    public abstract void remove(AbstractFile file);    public abstract AbstractFile getChild(int i);    public abstract void killVirus();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/AbstractFile.java", "stars": "2", "class": {"name": "AbstractFile", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "remove", "params": ["AbstractFile"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void remove(AbstractFile file);    public abstract AbstractFile getChild(int i);    public abstract void killVirus();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/AbstractFile.java", "stars": "2", "class": {"name": "AbstractFile", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getChild", "params": ["int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "AbstractFile", "snippet": "    public abstract AbstractFile getChild(int i);    public abstract void killVirus();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/AbstractFile.java", "stars": "2", "class": {"name": "AbstractFile", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "killVirus", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void killVirus();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/AbstractFile.java", "stars": "2", "class": {"name": "AbstractFile", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "trigger", "params": ["int", "TriggerTypeEnum", "int", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void trigger(int jobId, TriggerTypeEnum triggerType, int failRetryCount, String executorShardingParam, String executorParam) {        // load data        XxlJobInfo jobInfo = XxlJobAdminConfig.getAdminConfig().getXxlJobInfoDao().loadById(jobId);        if (jobInfo == null) {            logger.warn(\">>>>>>>>>>>> trigger fail, jobId invalid\uff0cjobId={}\", jobId);            return;        }        if (executorParam != null) {            jobInfo.setExecutorParam(executorParam);        }        int finalFailRetryCount = failRetryCount>=0?failRetryCount:jobInfo.getExecutorFailRetryCount();        XxlJobGroup group = XxlJobAdminConfig.getAdminConfig().getXxlJobGroupDao().load(jobInfo.getJobGroup());        // sharding param        int[] shardingParam = null;        if (executorShardingParam!=null){            String[] shardingArr = executorShardingParam.split(\"/\");            if (shardingArr.length==2 && isNumeric(shardingArr[0]) && isNumeric(shardingArr[1])) {                shardingParam = new int[2];                shardingParam[0] = Integer.valueOf(shardingArr[0]);                shardingParam[1] = Integer.valueOf(shardingArr[1]);            }        }        if (ExecutorRouteStrategyEnum.SHARDING_BROADCAST==ExecutorRouteStrategyEnum.match(jobInfo.getExecutorRouteStrategy(), null)                && group.getRegistryList()!=null && !group.getRegistryList().isEmpty()                && shardingParam==null) {            for (int i = 0; i < group.getRegistryList().size(); i++) {                processTrigger(group, jobInfo, finalFailRetryCount, triggerType, i, group.getRegistryList().size());            }        } else {            if (shardingParam == null) {                shardingParam = new int[]{0, 1};            }            processTrigger(group, jobInfo, finalFailRetryCount, triggerType, shardingParam[0], shardingParam[1]);        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/trigger/XxlJobTrigger.java", "stars": "1", "class": {"name": "XxlJobTrigger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isNumeric", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isNumeric(String str){        try {            int result = Integer.valueOf(str);            return true;        } catch (NumberFormatException e) {            return false;        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/trigger/XxlJobTrigger.java", "stars": "1", "class": {"name": "XxlJobTrigger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processTrigger", "params": ["XxlJobGroup", "XxlJobInfo", "int", "TriggerTypeEnum", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void processTrigger(XxlJobGroup group, XxlJobInfo jobInfo, int finalFailRetryCount, TriggerTypeEnum triggerType, int index, int total){        // param        ExecutorBlockStrategyEnum blockStrategy = ExecutorBlockStrategyEnum.match(jobInfo.getExecutorBlockStrategy(), ExecutorBlockStrategyEnum.SERIAL_EXECUTION);  // block strategy        ExecutorRouteStrategyEnum executorRouteStrategyEnum = ExecutorRouteStrategyEnum.match(jobInfo.getExecutorRouteStrategy(), null);    // route strategy        String shardingParam = (ExecutorRouteStrategyEnum.SHARDING_BROADCAST==executorRouteStrategyEnum)?String.valueOf(index).concat(\"/\").concat(String.valueOf(total)):null;        // 1\u3001save log-id        XxlJobLog jobLog = new XxlJobLog();        jobLog.setJobGroup(jobInfo.getJobGroup());        jobLog.setJobId(jobInfo.getId());        jobLog.setTriggerTime(new Date());        XxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().save(jobLog);        logger.debug(\">>>>>>>>>>> xxl-job trigger start, jobId:{}\", jobLog.getId());        // 2\u3001init trigger-param        TriggerParam triggerParam = new TriggerParam();        triggerParam.setJobId(jobInfo.getId());        triggerParam.setExecutorHandler(jobInfo.getExecutorHandler());        triggerParam.setExecutorParams(jobInfo.getExecutorParam());        triggerParam.setExecutorBlockStrategy(jobInfo.getExecutorBlockStrategy());        triggerParam.setExecutorTimeout(jobInfo.getExecutorTimeout());        triggerParam.setLogId(jobLog.getId());        triggerParam.setLogDateTime(jobLog.getTriggerTime().getTime());        triggerParam.setGlueType(jobInfo.getGlueType());        triggerParam.setGlueSource(jobInfo.getGlueSource());        triggerParam.setGlueUpdatetime(jobInfo.getGlueUpdatetime().getTime());        triggerParam.setBroadcastIndex(index);        triggerParam.setBroadcastTotal(total);        // 3\u3001init address        String address = null;        ReturnT<String> routeAddressResult = null;        if (group.getRegistryList()!=null && !group.getRegistryList().isEmpty()) {            if (ExecutorRouteStrategyEnum.SHARDING_BROADCAST == executorRouteStrategyEnum) {                if (index < group.getRegistryList().size()) {                    address = group.getRegistryList().get(index);                } else {                    address = group.getRegistryList().get(0);                }            } else {                routeAddressResult = executorRouteStrategyEnum.getRouter().route(triggerParam, group.getRegistryList());                if (routeAddressResult.getCode() == ReturnT.SUCCESS_CODE) {                    address = routeAddressResult.getContent();                }            }        } else {            routeAddressResult = new ReturnT<String>(ReturnT.FAIL_CODE, I18nUtil.getString(\"jobconf_trigger_address_empty\"));        }        // 4\u3001trigger remote executor        ReturnT<String> triggerResult = null;        if (address != null) {            triggerResult = runExecutor(triggerParam, address);        } else {            triggerResult = new ReturnT<String>(ReturnT.FAIL_CODE, null);        }        // 5\u3001collection trigger info        StringBuffer triggerMsgSb = new StringBuffer();        triggerMsgSb.append(I18nUtil.getString(\"jobconf_trigger_type\")).append(\"\uff1a\").append(triggerType.getTitle());        triggerMsgSb.append(\"<br>\").append(I18nUtil.getString(\"jobconf_trigger_admin_adress\")).append(\"\uff1a\").append(IpUtil.getIp());        triggerMsgSb.append(\"<br>\").append(I18nUtil.getString(\"jobconf_trigger_exe_regtype\")).append(\"\uff1a\")                .append( (group.getAddressType() == 0)?I18nUtil.getString(\"jobgroup_field_addressType_0\"):I18nUtil.getString(\"jobgroup_field_addressType_1\") );        triggerMsgSb.append(\"<br>\").append(I18nUtil.getString(\"jobconf_trigger_exe_regaddress\")).append(\"\uff1a\").append(group.getRegistryList());        triggerMsgSb.append(\"<br>\").append(I18nUtil.getString(\"jobinfo_field_executorRouteStrategy\")).append(\"\uff1a\").append(executorRouteStrategyEnum.getTitle());        if (shardingParam != null) {            triggerMsgSb.append(\"(\"+shardingParam+\")\");        }        triggerMsgSb.append(\"<br>\").append(I18nUtil.getString(\"jobinfo_field_executorBlockStrategy\")).append(\"\uff1a\").append(blockStrategy.getTitle());        triggerMsgSb.append(\"<br>\").append(I18nUtil.getString(\"jobinfo_field_timeout\")).append(\"\uff1a\").append(jobInfo.getExecutorTimeout());        triggerMsgSb.append(\"<br>\").append(I18nUtil.getString(\"jobinfo_field_executorFailRetryCount\")).append(\"\uff1a\").append(finalFailRetryCount);        triggerMsgSb.append(\"<br><br><span style=\\\"color:#00c0ef;\\\" > >>>>>>>>>>>\"+ I18nUtil.getString(\"jobconf_trigger_run\") +\"<<<<<<<<<<< </span><br>\")                .append((routeAddressResult!=null&&routeAddressResult.getMsg()!=null)?routeAddressResult.getMsg()+\"<br><br>\":\"\").append(triggerResult.getMsg()!=null?triggerResult.getMsg():\"\");        // 6\u3001save log trigger-info        jobLog.setExecutorAddress(address);        jobLog.setExecutorHandler(jobInfo.getExecutorHandler());        jobLog.setExecutorParam(jobInfo.getExecutorParam());        jobLog.setExecutorShardingParam(shardingParam);        jobLog.setExecutorFailRetryCount(finalFailRetryCount);        //jobLog.setTriggerTime();        jobLog.setTriggerCode(triggerResult.getCode());        jobLog.setTriggerMsg(triggerMsgSb.toString());        XxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().updateTriggerInfo(jobLog);        logger.debug(\">>>>>>>>>>> xxl-job trigger end, jobId:{}\", jobLog.getId());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/trigger/XxlJobTrigger.java", "stars": "1", "class": {"name": "XxlJobTrigger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runExecutor", "params": ["TriggerParam", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ReturnT<String>", "snippet": "    public static ReturnT<String> runExecutor(TriggerParam triggerParam, String address){        ReturnT<String> runResult = null;        try {            ExecutorBiz executorBiz = XxlJobScheduler.getExecutorBiz(address);            runResult = executorBiz.run(triggerParam);        } catch (Exception e) {            logger.error(\">>>>>>>>>>> xxl-job trigger error, please check if the executor[{}] is running.\", address, e);            runResult = new ReturnT<String>(ReturnT.FAIL_CODE, ThrowableUtil.toString(e));        }        StringBuffer runResultSB = new StringBuffer(I18nUtil.getString(\"jobconf_trigger_run\") + \"\uff1a\");        runResultSB.append(\"<br>address\uff1a\").append(address);        runResultSB.append(\"<br>code\uff1a\").append(runResult.getCode());        runResultSB.append(\"<br>msg\uff1a\").append(runResult.getMsg());        runResult.setMsg(runResultSB.toString());        return runResult;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/trigger/XxlJobTrigger.java", "stars": "1", "class": {"name": "XxlJobTrigger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        demo02();        StringBuilder sb = new StringBuilder();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo05/System/Demo01System.java", "stars": "2", "class": {"name": "Demo01System", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "demo02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void demo02() {        //\u5b9a\u4e49\u6e90\u6570\u7ec4        int[] src = {1,2,3,4,5};        //\u5b9a\u4e49\u76ee\u6807\u6570\u7ec4        int[] dest = {6,7,8,9,10};        System.out.println(\"\u590d\u5236\u524d:\"+ Arrays.toString(dest));        //\u4f7f\u7528System\u7c7b\u4e2d\u7684arraycopy\u628a\u6e90\u6570\u7ec4\u7684\u524d3\u4e2a\u5143\u7d20\u590d\u5236\u5230\u76ee\u6807\u6570\u7ec4\u7684\u524d3\u4e2a\u4f4d\u7f6e\u4e0a        System.arraycopy(src,0,dest,0,3);        System.out.println(\"\u590d\u5236\u540e:\"+ Arrays.toString(dest));    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo05/System/Demo01System.java", "stars": "2", "class": {"name": "Demo01System", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "demo01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void demo01() {        //\u7a0b\u5e8f\u6267\u884c\u524d,\u83b7\u53d6\u4e00\u6b21\u6beb\u79d2\u503c        long s = System.currentTimeMillis();        //\u6267\u884cfor\u5faa\u73af        for (int i = 1; i <=9999 ; i++) {            System.out.println(i);        }        //\u7a0b\u5e8f\u6267\u884c\u540e,\u83b7\u53d6\u4e00\u6b21\u6beb\u79d2\u503c        long e = System.currentTimeMillis();        System.out.println(\"\u7a0b\u5e8f\u5171\u8017\u65f6:\"+(e-s)+\"\u6beb\u79d2\");//\u7a0b\u5e8f\u5171\u8017\u65f6:106\u6beb\u79d2    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo05/System/Demo01System.java", "stars": "2", "class": {"name": "Demo01System", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configureTasks", "params": ["ScheduledTaskRegistrar"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {        scheduledTaskRegistrar.setScheduler(Executors.newScheduledThreadPool(1));    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/configuration/ScheduleConfiguration.java", "stars": "2", "class": {"name": "ScheduleConfiguration", "extends": null, "implements": ["SchedulingConfigurer"], "modifiers": ["public"]}}, {"method_name": "clear", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear(boolean deallocate) {\t\tif (deallocate) regions = new long[1][LONGS_PER_REGION];\t\ttopRegion=0; topCell=0; topOffset=0;\t\tnBits=0;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deallocate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void deallocate() {\t\tint nRegions = regions.length;\t\tfor (int i=0; i<nRegions; i++) regions[i]=null;\t\tregions=null;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nBits", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long nBits() {\t\treturn nBits;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "push", "params": ["long", "int"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void push(long bits, int n) {\t\tfinal long lBits = bits&Utils.shiftOnesRight[64-n];\t\tint tmp = 64-topOffset;\t\tfinal int nRegions;\t\tlong[] array = regions[topRegion];\t\tarray[topCell]&=Utils.shiftOnesLeft[tmp];\t\tif (tmp>n) {\t\t\tarray[topCell]|=lBits<<(tmp-n);\t\t\ttopOffset+=n;\t\t}\t\telse {\t\t\ttmp=n-tmp;\t\t\tarray[topCell]|=lBits>>>tmp;\t\t\tif (topCell+1<array.length) topCell++;\t\t\telse {\t\t\t\tnRegions=regions.length;\t\t\t\tif (topRegion+1==nRegions) {\t\t\t\t\tlong[][] newRegions = new long[nRegions<<1][0];\t\t\t\t\tSystem.arraycopy(regions,0,newRegions,0,nRegions);\t\t\t\t\tregions=newRegions;\t\t\t\t}\t\t\t\ttopRegion++;\t\t\t\tregions[topRegion] = new long[LONGS_PER_REGION];\t\t\t\tarray=regions[topRegion];\t\t\t\ttopCell=0;\t\t\t}\t\t\tarray[topCell]=0L;\t\t\tarray[topCell]|=lBits<<(64-tmp);\t\t\ttopOffset=tmp;\t\t}\t\tnBits+=n;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pop", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void pop(long n) {\t\tnBits-=n;\t\tint newTopRegion = (int)(nBits>>>(LOG2_LONGS_PER_REGION+6));\t\tfor (int i=newTopRegion+1; i<=topRegion; i++) regions[i]=null;\t\ttopRegion=newTopRegion;\t\ttopCell=(int)((nBits>>>6)-(topRegion<<LOG2_LONGS_PER_REGION));\t\ttopOffset=(int)(nBits&Utils.LAST_6_BITS_LONG);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPosition", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void setPosition(long bit) {\t\tpointerOffset=(int)(bit&Utils.shiftOnesRight[64-6]);\t\tbit>>>=6;\t\tpointerCell=(int)(bit&Utils.shiftOnesRight[SIXTYFOUR_MINUS_LOG2_LONGS_PER_REGION]);\t\tbit>>>=LOG2_LONGS_PER_REGION;\t\tpointerRegion=(int)bit;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPosition", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private", "final"], "return_type": "void", "snippet": "\tprivate final void setPosition(int region, int cell, int offset) {\t\tpointerRegion=region;\t\tpointerCell=cell;\t\tpointerOffset=offset;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPosition", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long getPosition() {\t\tfinal long lPointerRegion = pointerRegion<<LOG2_LONGS_PER_REGION_PLUS_SIX;\t\tfinal long lPointerCell = pointerCell<<6;\t\treturn lPointerRegion|lPointerCell|pointerOffset;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "read", "params": ["int"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long read(int n) {\t\tint tmp = 64-pointerOffset;\t\tfinal int SIXTYFOUR_MINUS_N = 64-n;\t\tlong out;\t\tlong[] array = regions[pointerRegion];\t\tif (n<tmp) {\t\t\tout=array[pointerCell]>>>(tmp-n);\t\t\tpointerOffset+=n;\t\t}\t\telse if (n==tmp) {\t\t\tout=array[pointerCell];\t\t\tif (pointerCell+1<array.length) pointerCell++;\t\t\telse {\t\t\t\tpointerRegion++;\t\t\t\tarray=regions[pointerRegion];\t\t\t\tpointerCell=0;\t\t\t}\t\t\tpointerOffset=0;\t\t}\t\telse {\t\t\ttmp=n-tmp;\t\t\tout=array[pointerCell]<<tmp;\t\t\tif (pointerCell+1<array.length) pointerCell++;\t\t\telse {\t\t\t\tpointerRegion++;\t\t\t\tarray=regions[pointerRegion];\t\t\t\tpointerCell=0;\t\t\t}\t\t\tout|=array[pointerCell]>>>(64-tmp);\t\t\tpointerOffset=tmp;\t\t}\t\treturn out&Utils.shiftOnesRight[SIXTYFOUR_MINUS_N];\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBit", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void setBit(long address) {\t\tsetPosition(address);\t\tregions[pointerRegion][pointerCell]|=Utils.oneSelectors1[64-pointerOffset-1];\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\tString out = \"\";\t\tString str;\t\tint i, j;\t\tfor (i=0; i<topRegion; i++) {\t\t\tfor (j=0; j<LONGS_PER_REGION; j++) {\t\t\t\tstr=Long.toBinaryString(regions[i][j]);\t\t\t\twhile (str.length()<64) str=\"0\"+str;\t\t\t\tout+=str;\t\t\t}\t\t}\t\tfor (j=0; j<topCell; j++) {\t\t\tstr=Long.toBinaryString(regions[topRegion][j]);\t\t\twhile (str.length()<64) str=\"0\"+str;\t\t\tout+=str;\t\t}\t\tstr=Long.toBinaryString(regions[topRegion][topCell]);\t\twhile (str.length()<64) str=\"0\"+str;\t\tstr=str.substring(0,topOffset);\t\tout+=str;\t\treturn out;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Stream.java", "stars": "2", "class": {"name": "Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.activity_ptr_viewpager);\t\tmPullToRefreshViewPager = (PullToRefreshViewPager) findViewById(R.id.pull_refresh_viewpager);\t\tmPullToRefreshViewPager.setOnRefreshListener(this);\t\tViewPager vp = mPullToRefreshViewPager.getRefreshableView();\t\tvp.setAdapter(new SamplePagerAdapter());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/sample/src/com/handmark/pulltorefresh/samples/PullToRefreshViewPagerActivity.java", "stars": "74", "class": {"name": "PullToRefreshViewPagerActivity", "extends": "Activity", "implements": ["OnRefreshListener"], "modifiers": ["public"]}}, {"method_name": "onRefresh", "params": ["PullToRefreshBase<ViewPager>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onRefresh(PullToRefreshBase<ViewPager> refreshView) {\t\tnew GetDataTask().execute();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/sample/src/com/handmark/pulltorefresh/samples/PullToRefreshViewPagerActivity.java", "stars": "74", "class": {"name": "PullToRefreshViewPagerActivity", "extends": "Activity", "implements": ["OnRefreshListener"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn sDrawables.length;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/sample/src/com/handmark/pulltorefresh/samples/PullToRefreshViewPagerActivity.java", "stars": "74", "class": {"name": "SamplePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["static"]}}, {"method_name": "instantiateItem", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View instantiateItem(ViewGroup container, int position) {\t\t\tImageView imageView = new ImageView(container.getContext());\t\t\timageView.setImageResource(sDrawables[position]);\t\t\t// Now just add ImageView to ViewPager and return it\t\t\tcontainer.addView(imageView, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);\t\t\treturn imageView;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/sample/src/com/handmark/pulltorefresh/samples/PullToRefreshViewPagerActivity.java", "stars": "74", "class": {"name": "SamplePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["static"]}}, {"method_name": "destroyItem", "params": ["ViewGroup", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void destroyItem(ViewGroup container, int position, Object object) {\t\t\tcontainer.removeView((View) object);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/sample/src/com/handmark/pulltorefresh/samples/PullToRefreshViewPagerActivity.java", "stars": "74", "class": {"name": "SamplePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["static"]}}, {"method_name": "isViewFromObject", "params": ["View", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isViewFromObject(View view, Object object) {\t\t\treturn view == object;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/sample/src/com/handmark/pulltorefresh/samples/PullToRefreshViewPagerActivity.java", "stars": "74", "class": {"name": "SamplePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["static"]}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "Void", "snippet": "\t\tprotected Void doInBackground(Void... params) {\t\t\t// Simulates a background job.\t\t\ttry {\t\t\t\tThread.sleep(4000);\t\t\t} catch (InterruptedException e) {\t\t\t}\t\t\treturn null;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/sample/src/com/handmark/pulltorefresh/samples/PullToRefreshViewPagerActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPostExecute(Void result) {\t\t\tmPullToRefreshViewPager.onRefreshComplete();\t\t\tsuper.onPostExecute(result);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/sample/src/com/handmark/pulltorefresh/samples/PullToRefreshViewPagerActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onInflateFinished", "params": ["android", "int", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onInflateFinished (android.view.View p0, int p1, android.view.ViewGroup p2)\t{\t\tn_onInflateFinished (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/AsyncLayoutInflater_OnInflateFinishedListenerImplementor.java", "stars": "2", "class": {"name": "AsyncLayoutInflater_OnInflateFinishedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onInflateFinished", "params": ["android", "int", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onInflateFinished (android.view.View p0, int p1, android.view.ViewGroup p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/AsyncLayoutInflater_OnInflateFinishedListenerImplementor.java", "stars": "2", "class": {"name": "AsyncLayoutInflater_OnInflateFinishedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/AsyncLayoutInflater_OnInflateFinishedListenerImplementor.java", "stars": "2", "class": {"name": "AsyncLayoutInflater_OnInflateFinishedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/AsyncLayoutInflater_OnInflateFinishedListenerImplementor.java", "stars": "2", "class": {"name": "AsyncLayoutInflater_OnInflateFinishedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getCpuUsage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "  public double getCpuUsage() {    return this.cpuUsage;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "setCpuUpsage", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCpuUpsage(final double value) {    this.cpuUsage = value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getRemainingMemoryPercent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "  public double getRemainingMemoryPercent() {    return this.remainingMemoryPercent;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "setRemainingMemoryPercent", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRemainingMemoryPercent(final double value) {    this.remainingMemoryPercent = value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getRemainingMemoryInMB", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getRemainingMemoryInMB() {    return this.remainingMemoryInMB;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "setRemainingMemoryInMB", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRemainingMemoryInMB(final long value) {    this.remainingMemoryInMB = value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getRemainingFlowCapacity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getRemainingFlowCapacity() {    return this.remainingFlowCapacity;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "setRemainingFlowCapacity", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRemainingFlowCapacity(final int value) {    this.remainingFlowCapacity = value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getLastDispatchedTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastDispatchedTime() {    return this.lastDispatchedTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "setLastDispatchedTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLastDispatchedTime(final long value) {    this.lastDispatchedTime = value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getNumberOfAssignedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumberOfAssignedFlows() {    return this.numberOfAssignedFlows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "setNumberOfAssignedFlows", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNumberOfAssignedFlows(final int value) {    this.numberOfAssignedFlows = value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    int result;    long temp;    temp = Double.doubleToLongBits(this.remainingMemoryPercent);    result = (int) (temp ^ (temp >>> 32));    result = 31 * result + (int) (this.remainingMemoryInMB ^ (this.remainingMemoryInMB >>> 32));    result = 31 * result + this.remainingFlowCapacity;    result = 31 * result + this.numberOfAssignedFlows;    result = 31 * result + (int) (this.lastDispatchedTime ^ (this.lastDispatchedTime >>> 32));    temp = Double.doubleToLongBits(this.cpuUsage);    result = 31 * result + (int) (temp ^ (temp >>> 32));    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(final Object obj) {    if (obj instanceof ExecutorInfo) {      boolean result = true;      final ExecutorInfo stat = (ExecutorInfo) obj;      result &= this.remainingMemoryInMB == stat.remainingMemoryInMB;      result &= this.cpuUsage == stat.cpuUsage;      result &= this.remainingFlowCapacity == stat.remainingFlowCapacity;      result &= this.remainingMemoryPercent == stat.remainingMemoryPercent;      result &= this.numberOfAssignedFlows == stat.numberOfAssignedFlows;      result &= this.lastDispatchedTime == stat.lastDispatchedTime;      return result;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"ExecutorInfo{\" +        \"remainingMemoryPercent=\" + this.remainingMemoryPercent +        \", remainingMemoryInMB=\" + this.remainingMemoryInMB +        \", remainingFlowCapacity=\" + this.remainingFlowCapacity +        \", numberOfAssignedFlows=\" + this.numberOfAssignedFlows +        \", lastDispatchedTime=\" + this.lastDispatchedTime +        \", cpuUsage=\" + this.cpuUsage +        '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorInfo.java", "stars": "18", "class": {"name": "ExecutorInfo", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getTarget", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Instruction", "snippet": "    public Instruction getTarget() {        return target;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/BranchInstruction.java", "stars": "4", "class": {"name": "BranchInstruction", "extends": "Instruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTarget", "params": ["Instruction"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTarget(Instruction target) {        this.target = target;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/BranchInstruction.java", "stars": "4", "class": {"name": "BranchInstruction", "extends": "Instruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "isBranch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isBranch() {        return true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/BranchInstruction.java", "stars": "4", "class": {"name": "BranchInstruction", "extends": "Instruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOperandString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOperandString() {        if (target != null && target.getLabel() != null) {            return target.getLabel().toString();        }        switch (mode) {        case MODE_RELATIVE:            return String.format(\"PC+0x%02X\", (byte)operand);        case MODE_INDEXED:            return String.format(\"X+0x%02X\", (byte)operand);        case MODE_EXTENDED:            return String.format(\"0x%04X\", (short)operand);        default:            return \"???\";        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/BranchInstruction.java", "stars": "4", "class": {"name": "BranchInstruction", "extends": "Instruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTargetAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTargetAddress() {        switch (mode) {        case MODE_IMMEDIATE:            return operand;        case MODE_EXTENDED:            return operand;        case MODE_RELATIVE:            return address + (byte)operand + 2;        default:            return -1;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/BranchInstruction.java", "stars": "4", "class": {"name": "BranchInstruction", "extends": "Instruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDao", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "IBaseDao<DataSource>", "snippet": "    protected IBaseDao<DataSource> getDao() {        return dataSourceDao;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "update", "params": ["DataSource"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean update(DataSource dataSource) {        DataSource oldDs = dataSourceDao.selectOneAndLock(dataSource.getId());        Object oldDsAuthCreden = null;        if(null == dataSource.getAuthCreden()){            dataSource.setAuthCreden(oldDs.getAuthCreden());        }else {            oldDsAuthCreden = oldDs.getAuthCreden();            if(!isUrl(dataSource.getAuthCreden())){                dataSource.setAuthCreden(encodeBase64(dataSource.getAuthCreden()));            }        }        List<String> authScopes = dataSource.getAuthScopes();        if(null != authScopes){            permissionDao.update(new DataSourcePermission(dataSource.getId(), authScopes));        }        boolean result = super.update(dataSource);        if(result && oldDsAuthCreden != null &&                isUrl(String.valueOf(oldDsAuthCreden))) {            try {                AppUtil.removeFile(String.valueOf(oldDsAuthCreden));            }catch(Exception e){                LOG.error(\"Remove authentication file Error: \" + e.getMessage());            }        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["DataSource"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(DataSource dataSource) {        String authCreden = dataSource.getAuthCreden();        if(StringUtils.isNotBlank(authCreden) && !isUrl(authCreden)){            dataSource.setAuthCreden(encodeBase64(dataSource.getAuthCreden()));        }        List<String> authScopes = dataSource.getAuthScopes();        boolean result = super.add(dataSource);        if(result){            //Add permissions            DataSourcePermission permission =  null == authScopes ? new DataSourcePermission(dataSource.getId())                    : new DataSourcePermission(dataSource.getId(), authScopes);            permissionDao.insertOne(permission);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "delete", "params": ["List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean delete(List<Object> ids) {        boolean result = true;        if(!ids.isEmpty()) {            List<String> associatedFiles = new ArrayList<>();            for (Object id : ids) {                DataSource dataSource = dataSourceDao.selectOneAndLock(id);                if (null != dataSource) {                    String authCreden = dataSource.getAuthCreden();                    if (StringUtils.isNotBlank(authCreden) && isUrl(authCreden)) {                        associatedFiles.add(authCreden);                    }                }            }            result = super.delete(ids) && (permissionDao.deleteBatch(ids) > 0);            if (result && !associatedFiles.isEmpty()) {                associatedFiles.forEach(filePath -> {                    try {                        AppUtil.removeFile(filePath);                    } catch (Exception e) {                        LOG.error(\"Remove authentication file Error: \" + e.getMessage());                    }                });            }        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "getDetail", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "DataSource", "snippet": "    public DataSource getDetail(Object id){        DataSource dataSource = getDao().selectOne(id);        if(null != dataSource) {            fillDataSourceWithModel(dataSource, dataSource.getModelId());            dataSource.setParameter(Json.toJson(dataSource.getParameterMap(), null));        }        return dataSource;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "getDecryptedSimpleOne", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "DataSource", "snippet": "    public DataSource getDecryptedSimpleOne(Object id) {        DataSource dataSource = getDao().selectOne(id);        if(null != dataSource && StringUtils.isNotBlank(dataSource.getAuthCreden()) &&                !isUrl(dataSource.getAuthCreden())){            dataSource.setAuthCreden(decodeBase64(dataSource.getAuthCreden()));        }        return dataSource;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "store", "params": ["MultipartFile", "String", "boolean"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "File", "snippet": "    public File store(MultipartFile authFile, String authType, boolean disposable) throws IOException{        String newName = (disposable? PERSIST_DISPOSABLE_PREFIX : \"\") +                AppUtil.newFileName(authFile.getOriginalFilename());        File storeFile = new File(conf.getStorePersist(authType) + newName);        new File(conf.getStorePersist(authType)).mkdirs();        if (storeFile.createNewFile()) {            FileUtils.copyInputStreamToFile(authFile.getInputStream(), storeFile);        }else{            throw new RuntimeException(\"Cannot create new file:\"+storeFile.getPath()+\", check if the system have \" +                    \"the right permission\");        }        return storeFile;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "store", "params": ["MultipartFile", "String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "File", "snippet": "    public File store(MultipartFile authFile, String authType) throws IOException {        return store(authFile, authType, false);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "addDataSourceModelParamsToMap", "params": ["Map<String,Object>", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDataSourceModelParamsToMap(Map<String, Object> map, String authEntity, String authCreden, String modelName){        DataSourceModel modelAssembly = modelDao.selectOneByName(modelName);        addDataSourceModelParamsToMap(map, authEntity, authCreden,modelAssembly);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "addDataSourceModelParamsToMap", "params": ["Map<String,Object>", "String", "String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDataSourceModelParamsToMap(Map<String, Object> map,                                              String authEntity, String authCreden, Integer modelId){        DataSourceModel modelAssembly = modelDao.selectOne(modelId);        addDataSourceModelParamsToMap(map, authEntity, authCreden,modelAssembly);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "addDataSourceModelParamsToMap", "params": ["Map<String,Object>", "String", "String", "DataSourceModel"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addDataSourceModelParamsToMap(Map<String, Object> map,                                               String authEntity, String authCreden, DataSourceModel modelAssembly){        if(null != modelAssembly) {            Map<String, Object> params = modelAssembly.resolveParams();            if (params.containsKey(Constants.PARAM_AUTH_TYPE)) {                String authType = String.valueOf(params.get(Constants.PARAM_AUTH_TYPE));                String authEntityKey = null;                String authCredenKey = null;                String authEntityValue = authEntity;                switch (authType) {                    case AuthType.KERBERS:                        authCredenKey = Constants.PARAM_KB_FILE_PATH;                        authEntityKey = Constants.PARAM_KERBEROS_FILE_PRINCILE;                        if(StringUtils.isNotBlank(                                String.valueOf(params.getOrDefault(Constants.PARAM_KERBEROS_HOST_NAME, \"\")))){                            authEntityValue = authEntity + IOUtils.DIR_SEPARATOR +                                    params.getOrDefault(Constants.PARAM_KERBEROS_HOST_NAME, \"\");                        }                        authEntityValue +=  \"@\" +                                params.getOrDefault(Constants.PARAM_KERBEROS_REALM_INFO, \"\");                        params.put(Constants.PARAM_KERBEROS_BOOLEAN, true);                        break;                    case AuthType.LDAP:                        authEntityKey = Constants.PARAM_LADP_USERNAME;                        authCredenKey = Constants.PARAM_LADP_PASSWORD;                        break;                    case AuthType.KEYFILE:                        authCredenKey = Constants.PARAM_KEY_FILE_PATH;                        authEntityKey = Constants.PARAM_DEFAULT_USERNAME;                        break;                    case AuthType.DEFAULT:                        authEntityKey = Constants.PARAM_DEFAULT_USERNAME;                        authCredenKey = Constants.PARAM_DEFAULT_PASSWORD;                        break;                    default:                        break;                }                if(StringUtils.isNotBlank(authEntity) && StringUtils.isNotBlank(authEntityKey)){                    params.put(authEntityKey, authEntityValue);                }                if(StringUtils.isNotBlank(authCreden) && StringUtils.isNotBlank(authCredenKey)){                    params.put(authCredenKey, authCreden);                }            }            map.putAll(params);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "fillDataSourceWithModel", "params": ["DataSource", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fillDataSourceWithModel(DataSource dataSource, Integer modelId){        Map<String, Object> mergedParams = dataSource.resolveParams();        Map<String, Object> params = new HashMap<>();        addDataSourceModelParamsToMap(params, dataSource.getAuthEntity(), dataSource.getAuthCreden(), modelId);        mergedParams = Stream.of(mergedParams, params)                .flatMap(map -> map.entrySet().stream())                .collect(Collectors.toMap(                        Map.Entry::getKey,                        entry ->{                           Object value = entry.getValue();                           return value != null? value : \"\";                        },                        (v1, v2) -> v1                ));        //Set parameter map        dataSource.setParameterMap(mergedParams);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "getPermission", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "List<DataAuthScope>", "snippet": "    public List<DataAuthScope> getPermission(Long id) {        DataSourcePermission permission = permissionDao.getPermission(id);        if(null != permission){            return permission.toDataAuthScopes();        }        return Collections.singletonList(DataAuthScope.ALL);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "bindDataSourceToProject", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void bindDataSourceToProject(Long projectId, Long... dataSourceIds) {        if(projectId != null && projectId > 0){            for (Long dataSourceId : dataSourceIds) {                if(null != dataSourceId && dataSourceId > 0){                    DataSource dataSource = dataSourceDao.selectOneAndLock(dataSourceId);                    bindDataSourceToProject(projectId, dataSource, false);                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "bindDataSourceToProject", "params": ["Long", "DataSource", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void bindDataSourceToProject(Long projectId, DataSource dataSource, boolean force){        Long existProjectId = dataSource.getProjectId();        if(existProjectId != null && existProjectId > 0){            if(projectId.equals(existProjectId)){                return;            }            if(!force){                throw new EndPointException(\"exchange.data_source.project.unbind.not\", null, dataSource.getSourceName());            }        }else {            dataSourceDao.bindProject(dataSource.getId(), projectId);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "encodeBase64", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String encodeBase64(String ldapPwd){        try {            return CryptoUtils.object2String(ldapPwd);        } catch (Exception e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "decodeBase64", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String decodeBase64(String ldapPwd){        try{            return (String) CryptoUtils.string2Object(ldapPwd);        } catch(Exception e){            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "isUseKb", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isUseKb(Map<String, Object> params){        boolean useKb = false;        Object v = params.get(PARAM_KERBEROS_BOOLEAN);        if(null != v){            String isUseKb = String.valueOf(v);            useKb = \"true\".equals(isUseKb);        }        return useKb;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "queryFilter", "params": ["DataSource"], "throws": null, "modifiers": ["protected"], "return_type": "DataSource", "snippet": "    protected DataSource queryFilter(DataSource dataSource) {        if(null != dataSource) {            String authCreden = dataSource.getAuthCreden();            if (StringUtils.isBlank(authCreden) || !isUrl(authCreden)) {                dataSource.setAuthCreden(null);            }        }        return dataSource;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "isUrl", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isUrl(String input){        return input.startsWith(URL_PROTOCOL);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceServiceImpl.java", "stars": "23", "class": {"name": "DataSourceServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceService"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState, int layoutId) {\t\tsuper.onCreate(savedInstanceState, layoutId);\t\tif(!VersionUtils.isUsingCorrectBuild()) {\t\t\tnew AlertDialog.Builder(this)\t\t\t\t\t.setMessage(butter.droid.base.R.string.wrong_abi)\t\t\t\t\t.setCancelable(false)\t\t\t\t\t.show();\t\t\tupdateManager.setListener(new ButterUpdateManager.Listener() {\t\t\t\t@Override\t\t\t\tpublic void updateAvailable(String updateFile) {\t\t\t\t\tIntent installIntent = new Intent(Intent.ACTION_VIEW);\t\t\t\t\tinstallIntent.setDataAndType(Uri.parse(\"file://\" + updateFile), ButterUpdateManager.ANDROID_PACKAGE);\t\t\t\t\tinstallIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\t\t\t\t\tstartActivity(installIntent);\t\t\t\t}\t\t\t});\t\t\tupdateManager.checkUpdatesManually();\t\t}\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVBaseActivity.java", "stars": "4", "class": {"name": "TVBaseActivity", "extends": "TVTorrentBaseActivity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onSearchRequested", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onSearchRequested() {\t\tTVSearchActivity.startActivity(this);\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVBaseActivity.java", "stars": "4", "class": {"name": "TVBaseActivity", "extends": "TVTorrentBaseActivity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "GetWsUrl", "params": ["List<HostServer>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String GetWsUrl(List<HostServer> hostServers) {\t\tfinal StringBuilder stringBuilder = new StringBuilder();\t\tString wsUrl= null;\t\tif(hostServers.size()>0) {\t\t\tHostServer hostServer = hostServers.get((int)Math.random()*hostServers.size());\t\t\tstringBuilder.append(\"wss://\");\t\t\tstringBuilder.append(hostServer.getHost());//\t\t\tstringBuilder.append(\":\");//\t\t\tstringBuilder.append(hostServer.getWss_port());\t\t\tstringBuilder.append(\"/sub\");\t\t\twsUrl = stringBuilder.toString();\t\t\tLOGGER.debug(\"\u83b7\u53d6\u7834\u7ad9websocket\u5730\u5740\uff1a\"+wsUrl);\t\t}\t\treturn wsUrl;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/common/CommonTools.java", "stars": "3", "class": {"name": "CommonTools", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void start() throws FlowTriggerDependencyPluginException {    this.triggerPluginManager.loadAllPlugins();    this.recoverIncompleteTriggerInstances();    this.cleaner.start();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createDepContext", "params": ["FlowTriggerDependency", "long", "String"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "DependencyInstanceContext", "snippet": "  private DependencyInstanceContext createDepContext(final FlowTriggerDependency dep, final long      startTimeInMills, final String triggerInstId) throws Exception {    final DependencyCheck dependencyCheck = this.triggerPluginManager        .getDependencyCheck(dep.getType());    final DependencyInstanceCallback callback = new DependencyInstanceCallbackImpl(this);    final Map<String, String> depInstConfig = new HashMap<>();    depInstConfig.putAll(dep.getProps());    depInstConfig.put(FlowTriggerProps.DEP_NAME, dep.getName());    final DependencyInstanceConfigImpl config = new DependencyInstanceConfigImpl(depInstConfig);    final DependencyInstanceRuntimeProps runtimeProps = new DependencyInstanceRuntimePropsImpl        (ImmutableMap            .of(FlowTriggerProps.START_TIME, String.valueOf(startTimeInMills), FlowTriggerProps                .TRIGGER_INSTANCE_ID, triggerInstId));    return dependencyCheck.run(config, runtimeProps, callback);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createTriggerInstance", "params": ["FlowTrigger", "String", "int", "String", "Project"], "throws": null, "modifiers": ["private"], "return_type": "TriggerInstance", "snippet": "  private TriggerInstance createTriggerInstance(final FlowTrigger flowTrigger, final String flowId,      final int flowVersion, final String submitUser, final Project project) {    final String triggerInstId = generateId();    final long startTime = System.currentTimeMillis();    // create a list of dependency instances    final List<DependencyInstance> depInstList = new ArrayList<>();    for (final FlowTriggerDependency dep : flowTrigger.getDependencies()) {      final String depName = dep.getName();      DependencyInstanceContext context = null;      try {        context = createDepContext(dep, startTime, triggerInstId);      } catch (final Exception ex) {        logger.error(\"unable to create dependency context for trigger instance[id = {}]\",            triggerInstId, ex);      }      // if dependency instance context fails to be created, then its status is cancelled and      // cause is failure      final Status status = context == null ? Status.CANCELLED : Status.RUNNING;      final CancellationCause cause =          context == null ? CancellationCause.FAILURE : CancellationCause.NONE;      final long endTime = context == null ? System.currentTimeMillis() : 0;      final DependencyInstance depInst = new DependencyInstance(depName, startTime, endTime,          context, status, cause);      depInstList.add(depInst);    }    final TriggerInstance triggerInstance = new TriggerInstance(triggerInstId, flowTrigger,        flowId, flowVersion, submitUser, depInstList, Constants.UNASSIGNED_EXEC_ID, project);    return triggerInstance;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateId", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String generateId() {    return UUID.randomUUID().toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scheduleKill", "params": ["TriggerInstance", "Duration", "CancellationCause"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void scheduleKill(final TriggerInstance triggerInst, final Duration duration, final  CancellationCause cause) {    logger        .debug(\"cancel trigger instance {} in {} secs\", triggerInst.getId(), duration            .getSeconds());    this.timeoutService.schedule(() -> {      cancelTriggerInstance(triggerInst, cause);    }, duration.toMillis(), TimeUnit.MILLISECONDS);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRunningTriggers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<TriggerInstance>", "snippet": "  public Collection<TriggerInstance> getRunningTriggers() {    return this.flowTriggerInstanceLoader.getRunning();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRecentlyFinished", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<TriggerInstance>", "snippet": "  public Collection<TriggerInstance> getRecentlyFinished() {    return this.flowTriggerInstanceLoader.getRecentlyFinished(RECENTLY_FINISHED_TRIGGER_LIMIT);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findTriggerInstanceById", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "TriggerInstance", "snippet": "  public TriggerInstance findTriggerInstanceById(final String triggerInstanceId) {    return this.flowTriggerInstanceLoader.getTriggerInstanceById(triggerInstanceId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findTriggerInstanceByExecId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "TriggerInstance", "snippet": "  public TriggerInstance findTriggerInstanceByExecId(final int flowExecId) {    return this.flowTriggerInstanceLoader.getTriggerInstanceByFlowExecId(flowExecId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDoneButFlowNotExecuted", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isDoneButFlowNotExecuted(final TriggerInstance triggerInstance) {    return triggerInstance.getStatus() == Status.SUCCEEDED && triggerInstance.getFlowExecId() ==        Constants.UNASSIGNED_EXEC_ID;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recoverRunningOrCancelling", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void recoverRunningOrCancelling(final TriggerInstance triggerInstance) {    final FlowTrigger flowTrigger = triggerInstance.getFlowTrigger();    for (final DependencyInstance depInst : triggerInstance.getDepInstances()) {      if (depInst.getStatus() == Status.RUNNING || depInst.getStatus() == Status.CANCELLING) {        final FlowTriggerDependency dependency = flowTrigger            .getDependencyByName(depInst.getDepName());        DependencyInstanceContext context = null;        try {          //recreate dependency instance context          context = createDepContext(dependency, depInst.getStartTime(), depInst              .getTriggerInstance().getId());        } catch (final Exception ex) {          logger              .error(                  \"unable to create dependency context for trigger instance[id =\"                      + \" {}]\", triggerInstance.getId(), ex);        }        depInst.setDependencyInstanceContext(context);        if (context == null) {          depInst.setStatus(Status.CANCELLED);          depInst.setCancellationCause(CancellationCause.FAILURE);        }      }    }    if (triggerInstance.getStatus() == Status.CANCELLING) {      addToRunningListAndCancel(triggerInstance);    } else if (triggerInstance.getStatus() == Status.RUNNING) {      final long remainingTime = remainingTimeBeforeTimeout(triggerInstance);      addToRunningListAndScheduleKill(triggerInstance, Duration.ofMillis(remainingTime).plus          (CANCELLING_GRACE_PERIOD_AFTER_RESTART), CancellationCause.TIMEOUT);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recoverTriggerInstance", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void recoverTriggerInstance(final TriggerInstance triggerInstance) {    this.flowTriggerExecutorService.submit(() -> recover(triggerInstance));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recover", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void recover(final TriggerInstance triggerInstance) {    logger.info(\"recovering pending trigger instance {}\", triggerInstance.getId());    if (isDoneButFlowNotExecuted(triggerInstance)) {      // if trigger instance succeeds but the associated flow hasn't been started yet, then start      // the flow      this.triggerProcessor.processSucceed(triggerInstance);    } else {      recoverRunningOrCancelling(triggerInstance);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recoverIncompleteTriggerInstances", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void recoverIncompleteTriggerInstances() {    final Collection<TriggerInstance> unfinishedTriggerInstances = this.flowTriggerInstanceLoader        .getIncompleteTriggerInstances();    for (final TriggerInstance triggerInstance : unfinishedTriggerInstances) {      if (triggerInstance.getFlowTrigger() != null) {        recoverTriggerInstance(triggerInstance);      } else {        logger.error(\"cannot recover the trigger instance {}, flow trigger is null,\"            + \" cancelling it \", triggerInstance.getId());        //finalize unrecoverable trigger instances        // the following situation would cause trigger instances unrecoverable:        // 1. project A with flow A associated with flow trigger A is uploaded        // 2. flow trigger A starts to run        // 3. project A with flow B without any flow trigger is uploaded        // 4. web server restarts        // in this case, flow trigger instance of flow trigger A will be equipped with latest        // project, thus failing to find the flow trigger since new project doesn't contain flow        // trigger at all        if (isDoneButFlowNotExecuted(triggerInstance)) {          triggerInstance.setFlowExecId(Constants.FAILED_EXEC_ID);          this.flowTriggerInstanceLoader.updateAssociatedFlowExecId(triggerInstance);        } else {          for (final DependencyInstance depInst : triggerInstance.getDepInstances()) {            if (!Status.isDone(depInst.getStatus())) {              processStatusAndCancelCauseUpdate(depInst, Status.CANCELLED,                  CancellationCause.FAILURE);              this.triggerProcessor.processTermination(depInst.getTriggerInstance());            }          }        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addToRunningListAndScheduleKill", "params": ["TriggerInstance", "Duration", "CancellationCause"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addToRunningListAndScheduleKill(final TriggerInstance triggerInst, final  Duration durationBeforeKill, final CancellationCause cause) {    // if trigger instance is already done    if (!Status.isDone(triggerInst.getStatus())) {      this.runningTriggers.add(triggerInst);      scheduleKill(triggerInst, durationBeforeKill, cause);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCancelleationCause", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "CancellationCause", "snippet": "  private CancellationCause getCancelleationCause(final TriggerInstance triggerInst) {    final Set<CancellationCause> causes = triggerInst.getDepInstances().stream()        .map(DependencyInstance::getCancellationCause).collect(Collectors.toSet());    if (causes.contains(CancellationCause.FAILURE) || causes        .contains(CancellationCause.CASCADING)) {      return CancellationCause.CASCADING;    } else if (causes.contains(CancellationCause.TIMEOUT)) {      return CancellationCause.TIMEOUT;    } else if (causes.contains(CancellationCause.MANUAL)) {      return CancellationCause.MANUAL;    } else {      return CancellationCause.NONE;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelTriggerInstance", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void cancelTriggerInstance(final TriggerInstance triggerInst) {    logger.debug(\"cancelling trigger instance of exec id\" + triggerInst.getId());    final CancellationCause cause = getCancelleationCause(triggerInst);    for (final DependencyInstance depInst : triggerInst.getDepInstances()) {      if (depInst.getStatus() == Status.CANCELLING) {        cancelContextAsync(depInst.getContext());      } else if (depInst.getStatus() == Status.RUNNING) {        // sometimes dependency instances of trigger instance in cancelling status can be running.        // e.x. dep inst1: failure, dep inst2: running -> trigger inst is in killing        this.processStatusAndCancelCauseUpdate(depInst, Status.CANCELLING, cause);        cancelContextAsync(depInst.getContext());      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addToRunningListAndCancel", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addToRunningListAndCancel(final TriggerInstance triggerInst) {    this.runningTriggers.add(triggerInst);    cancelTriggerInstance(triggerInst);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDepInstStatus", "params": ["DependencyInstance", "Status"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateDepInstStatus(final DependencyInstance depInst, final Status newStatus) {    depInst.setStatus(newStatus);    if (Status.isDone(depInst.getStatus())) {      depInst.setEndTime(System.currentTimeMillis());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processStatusUpdate", "params": ["DependencyInstance", "Status"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void processStatusUpdate(final DependencyInstance depInst, final Status newStatus) {    logger.debug(\"process status update for \" + depInst);    updateDepInstStatus(depInst, newStatus);    this.dependencyProcessor.processStatusUpdate(depInst);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processStatusAndCancelCauseUpdate", "params": ["DependencyInstance", "Status", "CancellationCause"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void processStatusAndCancelCauseUpdate(final DependencyInstance depInst, final Status      newStatus, final CancellationCause cause) {    depInst.setCancellationCause(cause);    updateDepInstStatus(depInst, newStatus);    this.dependencyProcessor.processStatusUpdate(depInst);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remainingTimeBeforeTimeout", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "  private long remainingTimeBeforeTimeout(final TriggerInstance triggerInst) {    final long now = System.currentTimeMillis();    return Math.max(0,        triggerInst.getFlowTrigger().getMaxWaitDuration().get().toMillis() - (now - triggerInst            .getStartTime()));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startTrigger", "params": ["FlowTrigger", "String", "int", "String", "Project"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void startTrigger(final FlowTrigger flowTrigger, final String flowId,      final int flowVersion, final String submitUser, final Project project) {    final TriggerInstance triggerInst = createTriggerInstance(flowTrigger, flowId, flowVersion,        submitUser, project);    this.flowTriggerExecutorService.submit(() -> {      logger.info(\"Starting the flow trigger [trigger instance id: {}] by {}\",          triggerInst.getId(), submitUser);      start(triggerInst);    });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void start(final TriggerInstance triggerInst) {    this.triggerProcessor.processNewInstance(triggerInst);    if (triggerInst.getStatus() == Status.CANCELLED) {      // all dependency instances failed      logger.info(          \"Trigger instance[id: {}] is cancelled since all dependency instances fail to be created\",          triggerInst.getId());      this.triggerProcessor.processTermination(triggerInst);    } else if (triggerInst.getStatus() == Status.CANCELLING) {      // some of the dependency instances failed      logger.info(          \"Trigger instance[id: {}] is being cancelled since some dependency instances fail to be created\",          triggerInst.getId());      addToRunningListAndCancel(triggerInst);    } else if (triggerInst.getStatus() == Status.SUCCEEDED) {      this.triggerProcessor.processSucceed(triggerInst);    } else {      // todo chengren311: it's possible web server restarts before the db update, then      // new instance will not be recoverable from db.      addToRunningListAndScheduleKill(triggerInst, triggerInst.getFlowTrigger()          .getMaxWaitDuration().get(), CancellationCause.TIMEOUT);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findRunningTriggerInstById", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "TriggerInstance", "snippet": "  public TriggerInstance findRunningTriggerInstById(final String triggerInstId) {    final Future<TriggerInstance> future = this.flowTriggerExecutorService.submit(        () -> getTriggerInstanceById(triggerInstId)    );    try {      return future.get();    } catch (final Exception e) {      logger.error(\"exception when finding trigger instance by id\" + triggerInstId, e);      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTriggerInstanceById", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "TriggerInstance", "snippet": "  private TriggerInstance getTriggerInstanceById(final String triggerInstId) {    return this.runningTriggers.stream()        .filter(triggerInst -> triggerInst.getId().equals(triggerInstId)).findFirst()        .orElse(null);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelContextAsync", "params": ["DependencyInstanceContext"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void cancelContextAsync(final DependencyInstanceContext context) {    this.cancelExecutorService.submit(() -> context.cancel());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelTriggerInstance", "params": ["TriggerInstance", "CancellationCause"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelTriggerInstance(final TriggerInstance triggerInst,      final CancellationCause cause) {    if (triggerInst.getStatus() == Status.RUNNING) {      this.flowTriggerExecutorService.submit(() -> cancel(triggerInst, cause));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancel", "params": ["TriggerInstance", "CancellationCause"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void cancel(final TriggerInstance triggerInst, final CancellationCause cause) {    logger.info(\"cancelling trigger instance with id {}\", triggerInst.getId());    if (triggerInst != null) {      for (final DependencyInstance depInst : triggerInst.getDepInstances()) {        // cancel running dependencies only, no need to cancel a killed/successful dependency        // instance        if (depInst.getStatus() == Status.RUNNING) {          this.processStatusAndCancelCauseUpdate(depInst, Status.CANCELLING, cause);          cancelContextAsync(depInst.getContext());        }      }    } else {      logger.debug(\"unable to cancel a trigger instance in non-running state with id {}\",          triggerInst.getId());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findDependencyInstanceByContext", "params": ["DependencyInstanceContext"], "throws": null, "modifiers": ["private"], "return_type": "DependencyInstance", "snippet": "  private DependencyInstance findDependencyInstanceByContext(      final DependencyInstanceContext context) {    return this.runningTriggers.stream()        .flatMap(triggerInst -> triggerInst.getDepInstances().stream()).filter(            depInst -> depInst.getContext() != null && depInst.getContext() == context)        .findFirst().orElse(null);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markDependencySuccess", "params": ["DependencyInstanceContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void markDependencySuccess(final DependencyInstanceContext context) {    this.flowTriggerExecutorService.submit(() -> markSuccess(context));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markSuccess", "params": ["DependencyInstanceContext"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void markSuccess(final DependencyInstanceContext context) {    final DependencyInstance depInst = findDependencyInstanceByContext(context);    if (depInst != null) {      if (Status.isDone(depInst.getStatus())) {        logger.warn(\"OnSuccess of dependency instance[id: {}, name: {}] is ignored\",            depInst.getTriggerInstance().getId(), depInst.getDepName());        return;      }      // if the status transits from cancelling to succeeded, then cancellation cause was set,      // we need to unset cancellation cause.      this.processStatusAndCancelCauseUpdate(depInst, Status.SUCCEEDED, CancellationCause.NONE);      // if associated trigger instance becomes success, then remove it from running list      if (depInst.getTriggerInstance().getStatus() == Status.SUCCEEDED) {        logger.info(\"trigger instance[id: {}] succeeded\", depInst.getTriggerInstance().getId());        this.triggerProcessor.processSucceed(depInst.getTriggerInstance());        this.runningTriggers.remove(depInst.getTriggerInstance());      }    } else {      logger.debug(\"unable to find trigger instance with context {} when marking it success\",          context);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelledByAzkaban", "params": ["DependencyInstance"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean cancelledByAzkaban(final DependencyInstance depInst) {    return depInst.getStatus() == Status.CANCELLING;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelledByDependencyPlugin", "params": ["DependencyInstance"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean cancelledByDependencyPlugin(final DependencyInstance depInst) {    // When onKill is called by the dependency plugin not through flowTriggerService, we treat it    // as cancelled by dependency due to failure on dependency side. In this case, cancel cause    // remains unset.    return depInst.getStatus() == Status.RUNNING;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markDependencyCancelled", "params": ["DependencyInstanceContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void markDependencyCancelled(final DependencyInstanceContext context) {    this.flowTriggerExecutorService.submit(() -> {      markCancelled(context);    });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markCancelled", "params": ["DependencyInstanceContext"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void markCancelled(final DependencyInstanceContext context) {    final DependencyInstance depInst = findDependencyInstanceByContext(context);    if (depInst != null) {      if (cancelledByDependencyPlugin(depInst)) {        processStatusAndCancelCauseUpdate(depInst, Status.CANCELLED, CancellationCause.FAILURE);        cancelTriggerInstance(depInst.getTriggerInstance());      } else if (cancelledByAzkaban(depInst)) {        processStatusUpdate(depInst, Status.CANCELLED);      } else {        logger.warn(\"OnCancel of dependency instance[id: {}, name: {}] is ignored\",            depInst.getTriggerInstance().getId(), depInst.getDepName());        return;      }      if (depInst.getTriggerInstance().getStatus() == Status.CANCELLED) {        logger.info(\"trigger instance with execId {} is cancelled\",            depInst.getTriggerInstance().getId());        this.triggerProcessor.processTermination(depInst.getTriggerInstance());        this.runningTriggers.remove(depInst.getTriggerInstance());      }    } else {      logger.warn(\"unable to find trigger instance with context {} when marking \"          + \"it cancelled\", context);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    this.flowTriggerExecutorService.shutdown();    this.cancelExecutorService.shutdown();    this.timeoutService.shutdown();    this.flowTriggerExecutorService.shutdownNow();    this.cancelExecutorService.shutdownNow();    this.timeoutService.shutdownNow();    this.triggerProcessor.shutdown();    this.triggerPluginManager.shutdown();    this.cleaner.shutdown();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTriggerInstances", "params": ["int", "String", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Collection<TriggerInstance>", "snippet": "  public Collection<TriggerInstance> getTriggerInstances(final int projectId, final String flowId,      final int from, final int length) {    return this.flowTriggerInstanceLoader.getTriggerInstances(projectId, flowId, from, length);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerService.java", "stars": "18", "class": {"name": "FlowTriggerService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "globalStats", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Country", "snippet": "    public Country globalStats(){       return covidTarget.path(\"all\").request(MediaType.APPLICATION_JSON)               .get(Country.class);    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/rest/CovidAPI.java", "stars": "3", "class": {"name": "CovidAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "countryStats", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Country", "snippet": "    public Country countryStats(String country){        return apiCall(\"countries/\" + country, Country.class);    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/rest/CovidAPI.java", "stars": "3", "class": {"name": "CovidAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "allCountryStats", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Country>", "snippet": "    public List<Country> allCountryStats(){        return apiCall(\"countries\", new GenericType<List<Country>>() {});    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/rest/CovidAPI.java", "stars": "3", "class": {"name": "CovidAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "history", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "History", "snippet": "    public History history( String country){        return this.apiCall(\"historical/\" + country, History.class);    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/rest/CovidAPI.java", "stars": "3", "class": {"name": "CovidAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "apiCall", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["private"], "return_type": "T", "snippet": "    private <T> T apiCall(String path, Class<T> tClass){        try {            return covidTarget.path(path).request(MediaType.APPLICATION_JSON)                    .get(tClass);        }catch (ClientErrorException cex){            System.out.printf(\"Something happened in our side: %s\", cex.getMessage());        }catch (ServerErrorException sex){            System.out.printf(\"Something happened in server side: %s\", sex.getMessage());        }        return null;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/rest/CovidAPI.java", "stars": "3", "class": {"name": "CovidAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "apiCall", "params": ["String", "GenericType<T>"], "throws": null, "modifiers": ["private"], "return_type": "T", "snippet": "    private <T> T apiCall(String path, GenericType<T> tClass){        try {            return covidTarget.path(path).request(MediaType.APPLICATION_JSON)                    .get(tClass);        }catch (ClientErrorException cex){            System.out.printf(\"Something happened in our side: %s\", cex.getMessage());        }catch (ServerErrorException sex){            System.out.printf(\"Something happened in server side: %s\", sex.getMessage());        }        return null;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/rest/CovidAPI.java", "stars": "3", "class": {"name": "CovidAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getA", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getA() {    return a;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extendresultmap/TestModel.java", "stars": "15", "class": {"name": "TestModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setA", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setA(String a) {    this.a = a;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extendresultmap/TestModel.java", "stars": "15", "class": {"name": "TestModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getB", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getB() {    return b;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extendresultmap/TestModel.java", "stars": "15", "class": {"name": "TestModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setB", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setB(String b) {    this.b = b;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extendresultmap/TestModel.java", "stars": "15", "class": {"name": "TestModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    final int prime = 31;    int result = 1;    result = prime * result + ((a == null) ? 0 : a.hashCode());    result = prime * result + ((b == null) ? 0 : b.hashCode());    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extendresultmap/TestModel.java", "stars": "15", "class": {"name": "TestModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object obj) {    if (this == obj)      return true;    if (obj == null)      return false;    if (getClass() != obj.getClass())      return false;    TestModel other = (TestModel) obj;    if (a == null) {      if (other.a != null)        return false;    } else if (!a.equals(other.a))      return false;    if (b == null) {      if (other.b != null)        return false;    } else if (!b.equals(other.b))      return false;    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extendresultmap/TestModel.java", "stars": "15", "class": {"name": "TestModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"TestModel [a=\" + a + \", b=\" + b + \"]\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extendresultmap/TestModel.java", "stars": "15", "class": {"name": "TestModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["URLConnection", "org"], "throws": ["IOException"], "modifiers": ["final", "protected"], "return_type": "void", "snippet": "    protected final void parse(URLConnection connection, org.xml.sax.ContentHandler contentHandler)            throws IOException {        InputStream in = ContentHandlerUtils.getUncompressedInputStream(connection);        try {            String encoding = ContentHandlerUtils.getCharSet(connection);            try {                Xml.Encoding e = Xml.findEncodingByName(encoding);                Xml.parse(in, e, contentHandler);            } catch (SAXException e) {                // Re-throw SAXException as IOException                IOException ioe = new IOException();                ioe.initCause(e);                throw ioe;            }        } finally {            in.close();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/XmlContentHandler.java", "stars": "74", "class": {"name": "XmlContentHandler", "extends": "ContentHandler", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getBookData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<BookEntry>", "snippet": "    public List<BookEntry> getBookData() {        return books;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/LibraryData.java", "stars": "6", "class": {"name": "LibraryData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadData", "params": ["Path"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean loadData(Path libraryFile) {        Objects.requireNonNull(libraryFile, \"Given file path must not be null.\");                       LibraryFileLoader loader = new LibraryFileLoader();        boolean success = loader.loadFileContent(libraryFile);        if (success) {            List<BookEntry> loaded = loader.parseFileContent();            int added = mergeEntries(loaded);            System.out.println(added + \" new book entries added.\");        } else {            System.err.println(\"ERROR: Loading book data failed for file: \" + libraryFile);        }        return success;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/LibraryData.java", "stars": "6", "class": {"name": "LibraryData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mergeEntries", "params": ["List<BookEntry>"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int mergeEntries(List<BookEntry> loaded) {        int count = 0;        for (BookEntry entry : loaded) {            if (!books.contains(entry)) {                books.add(entry);                count++;            } else {                System.out.println(\"Duplicate entry found for book: \" + entry);            }        }        return count;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/LibraryData.java", "stars": "6", "class": {"name": "LibraryData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["Show", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "ShowDetailSeasonFragment", "snippet": "    public static ShowDetailSeasonFragment newInstance(Show show, int season) {        sShow = show;        Bundle b = new Bundle();        b.putInt(SEASON, season);        b.putInt(COLOR, show.color);        ShowDetailSeasonFragment showDetailFragment = new ShowDetailSeasonFragment();        showDetailFragment.setArguments(b);        return showDetailFragment;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailSeasonFragment.java", "stars": "4", "class": {"name": "ShowDetailSeasonFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        int season = getArguments().getInt(SEASON);        if(sShow == null) return;        for (Episode episode : sShow.episodes) {            if (episode.season == season) {                mEpisodes.add(episode);            }        }        Collections.sort(mEpisodes, new Comparator<Episode>() {            @Override            public int compare(Episode lhs, Episode rhs) {                if (lhs.episode < rhs.episode) {                    return -1;                } else if (lhs.episode > rhs.episode) {                    return 1;                }                return 0;            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailSeasonFragment.java", "stars": "4", "class": {"name": "ShowDetailSeasonFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSeasonNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSeasonNumber() {        return getArguments().getInt(SEASON);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailSeasonFragment.java", "stars": "4", "class": {"name": "ShowDetailSeasonFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mRoot = inflater.inflate(R.layout.fragment_showdetail_season, container, false);        if (VersionUtils.isJellyBean() && container != null) {            mRoot.setMinimumHeight(container.getMinimumHeight());        }        int color = getResources().getColor(R.color.primary);        if(getArguments().containsKey(COLOR)) {            color = getArguments().getInt(COLOR, color);        }        EpisodeListAdapter adapter = new EpisodeListAdapter(inflater, mEpisodes, color);        LinearList linearList = (LinearList) mRoot;        linearList.setOnItemClickListener(mOnClickListener);        linearList.setAdapter(adapter);        return mRoot;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailSeasonFragment.java", "stars": "4", "class": {"name": "ShowDetailSeasonFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "enable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enable() {        vipTypeFolder = plugin.getFileLifecycle().getVipTypeFolder();        plugin.log(\"Loading vip types...\");        loadVipTypes();        plugin.log(vipTypeCache.getVipTypes().size() + \" vip types loaded.\");    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/VipTypeLifecycle.java", "stars": "2", "class": {"name": "VipTypeLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadVipTypes", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadVipTypes() {        File[] files = vipTypeFolder.listFiles();        for (File file : files) {            VipType type = adapter.adapt(file, File.class, VipType.class);            if (type != null) vipTypeCache.insert(type.getIdentifier(), type);        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/VipTypeLifecycle.java", "stars": "2", "class": {"name": "VipTypeLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "validateStackSequences", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean validateStackSequences(int[] pushed, int[] popped) {                int N = pushed.length;        Stack<Integer> stack = new Stack();                int j = 0;        for (int x: pushed) {            stack.push(x);            while (!stack.isEmpty() && j < N && stack.peek() == popped[j]) {                //\u961f\u5934\u5143\u7d20\u51fa\u961f\uff0c\u6808\u9876\u5143\u7d20\u51fa\u6808                stack.pop();                j++;            }        }        if (!stack.isEmpty()){            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/MisterBooo/LeetCodeAnimation/master/0946--validate-stack-sequences/Code/1.java", "stars": "53778", "class": {"name": "Solution", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "aceita", "params": ["TentativaPagamento"], "throws": null, "modifiers": ["public"], "return_type": "Optional<Pagador>", "snippet": "\tpublic Optional<Pagador> aceita(TentativaPagamento tentativaPagamento) {\t\tTipoPagamento tipoPagamento = tentativaPagamento.getTipoPagamento();\t\tif (tipoPagamento.aceitaOnline\t\t\t\t&& !tipoPagamento.equals(TipoPagamento.hipercard)) {\t\t\treturn Optional.of(new GatewayCielo(autorizador,tentativaPagamento));\t\t}\t\treturn Optional.empty();\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/processadores/ProcessadorCielo.java", "stars": "9", "class": {"name": "ProcessadorCielo", "extends": null, "implements": ["ProcessadorPagamento"], "modifiers": ["public"]}}, {"method_name": "onTimeSet", "params": ["android", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onTimeSet (android.widget.TimePicker p0, int p1, int p2)\t{\t\tn_onTimeSet (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TimePickerRendererBase_1.java", "stars": "2", "class": {"name": "TimePickerRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onTimeSet", "params": ["android", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onTimeSet (android.widget.TimePicker p0, int p1, int p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TimePickerRendererBase_1.java", "stars": "2", "class": {"name": "TimePickerRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TimePickerRendererBase_1.java", "stars": "2", "class": {"name": "TimePickerRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TimePickerRendererBase_1.java", "stars": "2", "class": {"name": "TimePickerRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "load", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean load(String fullClassName, String javaCode, String classpath) {        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();        DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<>();        CustomFileManager customFileManager = new CustomFileManager(compiler.getStandardFileManager(diagnostics, null, null));        List<JavaFileObject> javaFiles = new ArrayList<>();        javaFiles.add(new JavaMemoryFileObject(fullClassName, javaCode));        List<String> options = new ArrayList<>();        options.add(CLASS_PATH_PARAMS);        options.add(classpath);        JavaCompiler.CompilationTask task = compiler.getTask(null, customFileManager, diagnostics, options, null, javaFiles);        boolean success = task.call();        if(success){            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();            if(classLoader instanceof JarLoader){                JavaMemoryClassObject classObject = customFileManager.getClassObject();                ((JarLoader)classLoader).loadClass(fullClassName, classObject.getBytes());            }        }else{            //logger error            diagnostics.getDiagnostics().forEach( diagnostic -> {                String res = (\"Code:[\" + diagnostic.getCode() + \"]\\n\") +                        \"Kind:[\" + diagnostic.getKind() + \"]\\n\" +                        \"Position:[\" + diagnostic.getPosition() + \"]\\n\" +                        \"Start Position:[\" + diagnostic.getStartPosition() + \"]\\n\" +                        \"End Position:[\" + diagnostic.getEndPosition() + \"]\\n\" +                        \"Source:[\" + diagnostic.getSource() + \"]\\n\" +                        \"Message:[\" + diagnostic.getMessage(null) + \"]\\n\" +                        \"LineNumber:[\" + diagnostic.getLineNumber() + \"]\\n\" +                        \"ColumnNumber:[\" + diagnostic.getColumnNumber() + \"]\\n\";                logger.error(res);            });        }        return success;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/processor/loader/plugin/DefaultPluginProcessorLoader.java", "stars": "23", "class": {"name": "DefaultPluginProcessorLoader", "extends": null, "implements": ["PluginProcessorLoader"], "modifiers": ["public"]}}, {"method_name": "load", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean load(String fullClassName, String javaCode) {        StringBuilder builder = new StringBuilder();        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();        try {            Class<?> foundClass = Class.forName(fullClassName, false, classLoader);            if(null != foundClass){                //The class has been loaded                return true;            }        } catch (ClassNotFoundException e) {            //Ignore try to load class        }        while(classLoader instanceof URLClassLoader){            URLClassLoader urlClassLoader = (URLClassLoader)classLoader;            for (URL url : urlClassLoader.getURLs()) {                builder.append(url.getFile()).append(File.pathSeparator);            }            classLoader = classLoader.getParent();        }        return load(fullClassName, javaCode, builder.toString());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/processor/loader/plugin/DefaultPluginProcessorLoader.java", "stars": "23", "class": {"name": "DefaultPluginProcessorLoader", "extends": null, "implements": ["PluginProcessorLoader"], "modifiers": ["public"]}}, {"method_name": "getJavaFileForOutput", "params": ["Location", "String", "JavaFileObject", "FileObject"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "JavaFileObject", "snippet": "        public JavaFileObject getJavaFileForOutput(Location location, String className, JavaFileObject.Kind kind, FileObject sibling) throws IOException {            if(null == memoryClassObject){                memoryClassObject = new JavaMemoryClassObject(className, kind);            }            return memoryClassObject;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/processor/loader/plugin/DefaultPluginProcessorLoader.java", "stars": "23", "class": {"name": "CustomFileManager", "extends": "ForwardingJavaFileManager", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getClassObject", "params": [], "throws": null, "modifiers": [], "return_type": "JavaMemoryClassObject", "snippet": "        JavaMemoryClassObject getClassObject(){            return memoryClassObject;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/processor/loader/plugin/DefaultPluginProcessorLoader.java", "stars": "23", "class": {"name": "CustomFileManager", "extends": "ForwardingJavaFileManager", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getApp", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "AzkabanExecutorServer", "snippet": "  public static AzkabanExecutorServer getApp() {    return app;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(final String[] args) throws Exception {    // Redirect all std out and err messages into log4j    StdOutErrRedirect.redirectOutAndErrToLog();    logger.info(\"Starting Jetty Azkaban Executor...\");    if (System.getSecurityManager() == null) {      Policy.setPolicy(new Policy() {        @Override        public boolean implies(final ProtectionDomain domain, final Permission permission) {          return true; // allow all        }      });      System.setSecurityManager(new SecurityManager());    }    final Props props = AzkabanServer.loadProps(args);    if (props == null) {      logger.error(\"Azkaban Properties not loaded.\");      logger.error(\"Exiting Azkaban Executor Server...\");      return;    }    /* Initialize Guice Injector */    final Injector injector = Guice.createInjector(        new AzkabanCommonModule(props),        new AzkabanExecServerModule()    );    SERVICE_PROVIDER.setInjector(injector);    launch(injector.getInstance(AzkabanExecutorServer.class));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "launch", "params": ["AzkabanExecutorServer"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void launch(final AzkabanExecutorServer azkabanExecutorServer) throws Exception {    azkabanExecutorServer.start();    setupTimeZone(azkabanExecutorServer.getAzkabanProps());    app = azkabanExecutorServer;    Runtime.getRuntime().addShutdownHook(new Thread() {      @Override      public void run() {        try {          logTopMemoryConsumers();        } catch (final Exception e) {          AzkabanExecutorServer.logger.info((\"Exception when logging top memory consumers\"), e);        }        final String host = AzkabanExecutorServer.app.getHost();        final int port = AzkabanExecutorServer.app.getPort();        AzkabanExecutorServer.logger.warn(\"Shutting down executor...\");        try {          AzkabanExecutorServer.app.shutdownNow();          AzkabanExecutorServer.app.getFlowRunnerManager().deleteExecutionDirectory();        } catch (final Exception e) {          AzkabanExecutorServer.logger.error(\"Error while shutting down http server.\", e);        }        // FIXME\u00a0Logic optimization, close the executor thread pool first, and then delete the executor information.        try {          AzkabanExecutorServer.logger.info(String              .format(\"Removing executor(host: %s, port: %s) entry from database...\", host, port));          AzkabanExecutorServer.app.getExecutorLoader().removeExecutor(host, port);        } catch (final ExecutorManagerException ex) {          AzkabanExecutorServer.logger.error(              String.format(\"Exception when removing executor(host: %s, port: %s)\", host, port),              ex);        }      }      public void logTopMemoryConsumers() throws Exception, IOException {        if (new File(\"/bin/bash\").exists() && new File(\"/bin/ps\").exists()            && new File(\"/usr/bin/head\").exists()) {          AzkabanExecutorServer.logger.info(\"logging top memory consumer\");          final java.lang.ProcessBuilder processBuilder =              new java.lang.ProcessBuilder(\"/bin/bash\", \"-c\",                  \"/bin/ps aux --sort -rss | /usr/bin/head\");          final Process p = processBuilder.start();          p.waitFor();          final InputStream is = p.getInputStream();          final java.io.BufferedReader reader =              new java.io.BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));          String line = null;          while ((line = reader.readLine()) != null) {            AzkabanExecutorServer.logger.info(line);          }          is.close();        }      }    });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setupTimeZone", "params": ["Props"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void setupTimeZone(final Props azkabanSettings) {    if (azkabanSettings.containsKey(DEFAULT_TIMEZONE_ID)) {      final String timezone = azkabanSettings.getString(DEFAULT_TIMEZONE_ID);      System.setProperty(\"user.timezone\", timezone);      TimeZone.setDefault(TimeZone.getTimeZone(timezone));      DateTimeZone.setDefault(DateTimeZone.forID(timezone));      logger.info(\"Setting timezone to \" + timezone);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void start() throws Exception {    this.root.setAttribute(Constants.AZKABAN_SERVLET_CONTEXT_KEY, this);    JmxJobMBeanManager.getInstance().initialize(this.props);    // make sure this happens before    configureJobCallback(this.props);    configureMBeanServer();    configureMetricReports();    loadCustomJMXAttributeProcessor(this.props);    try {      this.server.start();    } catch (final Exception e) {      logger.error(e);      Utils.croak(e.getMessage(), 1);    }    insertExecutorEntryIntoDB();    dumpPortToFile();    logger.info(\"Started Executor Server on \" + getExecutorHostPort());    if (this.props.getBoolean(ConfigurationKeys.IS_METRICS_ENABLED, false)) {      startExecMetrics();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startExecMetrics", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void startExecMetrics() throws Exception {    this.execMetrics.addFlowRunnerManagerMetrics(getFlowRunnerManager());    logger.info(\"starting reporting Executor Metrics\");    this.metricsManager.startReporting(\"AZ-EXEC\", this.props);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "insertExecutorEntryIntoDB", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void insertExecutorEntryIntoDB() throws ExecutorManagerException {    try {      final String host = requireNonNull(getHost());      final int port = getPort();      checkState(port != -1);      final Executor executor = this.executionLoader.fetchExecutor(host, port);      // FIXME\u00a0executorId changed from self-incrementing to configurable.      final int id = Integer.valueOf(this.props.get(EXECUTOR_SERVER_ID));      if (executor == null) {//\u5411\u6570\u636e\u5e93\u63d2\u5165executor\u8282\u70b9\u6570\u636e        //this.executionLoader.addExecutor(host, port);        logger.info(\"This executor wasn't found in the DB. Adding self.\");        this.executionLoader.addExecutorFixed(id, host, port);      } else {        logger.info(\"This executor is already in the DB. Found: \" + executor);      }      // If executor already exists, ignore it    } catch (final ExecutorManagerException e) {      logger.error(\"Error inserting executor entry into DB\", e);      throw e;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dumpPortToFile", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void dumpPortToFile() throws IOException {    // By default this should write to the working directory    final String portFileName = this.props        .getString(ConfigurationKeys.EXECUTOR_PORT_FILE, DEFAULT_EXECUTOR_PORT_FILE);    FileIOUtils.dumpNumberToFile(Paths.get(portFileName), getPort());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configureJobCallback", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void configureJobCallback(final Props props) {    final boolean jobCallbackEnabled =        props.getBoolean(\"azkaban.executor.jobcallback.enabled\", true);    logger.info(\"Job callback enabled? \" + jobCallbackEnabled);    if (jobCallbackEnabled) {      JobCallbackManager.initialize(props);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configureMetricReports", "params": [], "throws": ["MetricException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void configureMetricReports() throws MetricException {    final Props props = getAzkabanProps();    if (props != null && props.getBoolean(\"executor.metric.reports\", false)) {      logger.info(\"Starting to configure Metric Reports\");      final MetricReportManager metricManager = MetricReportManager.getInstance();      final IMetricEmitter metricEmitter = new InMemoryMetricEmitter(props);      metricManager.addMetricEmitter(metricEmitter);      logger.info(\"Adding number of failed flow metric\");      metricManager.addMetric(new NumFailedFlowMetric(metricManager, props          .getInt(METRIC_INTERVAL                  + NumFailedFlowMetric.NUM_FAILED_FLOW_METRIC_NAME,              props.getInt(METRIC_INTERVAL + \"default\"))));      logger.info(\"Adding number of failed jobs metric\");      metricManager.addMetric(new NumFailedJobMetric(metricManager, props          .getInt(METRIC_INTERVAL                  + NumFailedJobMetric.NUM_FAILED_JOB_METRIC_NAME,              props.getInt(METRIC_INTERVAL + \"default\"))));      logger.info(\"Adding number of running Jobs metric\");      metricManager.addMetric(new NumRunningJobMetric(metricManager, props          .getInt(METRIC_INTERVAL                  + NumRunningJobMetric.NUM_RUNNING_JOB_METRIC_NAME,              props.getInt(METRIC_INTERVAL + \"default\"))));      logger.info(\"Adding number of running flows metric\");      metricManager.addMetric(new NumRunningFlowMetric(this.runnerManager,          metricManager, props.getInt(METRIC_INTERVAL              + NumRunningFlowMetric.NUM_RUNNING_FLOW_METRIC_NAME,          props.getInt(METRIC_INTERVAL + \"default\"))));      logger.info(\"Adding number of queued flows metric\");      metricManager.addMetric(new NumQueuedFlowMetric(this.runnerManager,          metricManager, props.getInt(METRIC_INTERVAL              + NumQueuedFlowMetric.NUM_QUEUED_FLOW_METRIC_NAME,          props.getInt(METRIC_INTERVAL + \"default\"))));      logger.info(\"Completed configuring Metric Reports\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadCustomJMXAttributeProcessor", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadCustomJMXAttributeProcessor(final Props props) {    final String jmxAttributeEmitter =        props.get(CUSTOM_JMX_ATTRIBUTE_PROCESSOR_PROPERTY);    if (jmxAttributeEmitter != null) {      try {        logger.info(\"jmxAttributeEmitter: \" + jmxAttributeEmitter);        final Constructor<Props>[] constructors =            (Constructor<Props>[]) Class.forName(jmxAttributeEmitter)                .getConstructors();        constructors[0].newInstance(props.toProperties());      } catch (final Exception e) {        logger.error(\"Encountered error while loading and instantiating \"            + jmxAttributeEmitter, e);        throw new IllegalStateException(            \"Encountered error while loading and instantiating \"                + jmxAttributeEmitter, e);      }    } else {      logger.info(\"No value for property: \"          + CUSTOM_JMX_ATTRIBUTE_PROCESSOR_PROPERTY + \" was found\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorLoader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecutorLoader", "snippet": "  public ExecutorLoader getExecutorLoader() {    return this.executionLoader;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAzkabanProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getAzkabanProps() {    return this.props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowRunnerManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FlowRunnerManager", "snippet": "  public FlowRunnerManager getFlowRunnerManager() {    return this.runnerManager;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configureMBeanServer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void configureMBeanServer() {    logger.info(\"Registering MBeans...\");    this.mbeanServer = ManagementFactory.getPlatformMBeanServer();    registerMbean(\"executorJetty\", new JmxJettyServer(this.server));    registerMbean(\"flowRunnerManager\", new JmxFlowRunnerManager(this.runnerManager));    registerMbean(\"jobJMXMBean\", JmxJobMBeanManager.getInstance());    if (JobCallbackManager.isInitialized()) {      final JobCallbackManager jobCallbackMgr = JobCallbackManager.getInstance();      registerMbean(\"jobCallbackJMXMBean\",          jobCallbackMgr.getJmxJobCallbackMBean());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void close() {    try {      for (final ObjectName name : this.registeredMBeans) {        this.mbeanServer.unregisterMBean(name);        logger.info(\"Jmx MBean \" + name.getCanonicalName() + \" unregistered.\");      }    } catch (final Exception e) {      logger.error(\"Failed to cleanup MBeanServer\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerMbean", "params": ["String", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void registerMbean(final String name, final Object mbean) {    final Class<?> mbeanClass = mbean.getClass();    final ObjectName mbeanName;    try {      mbeanName = new ObjectName(mbeanClass.getName() + \":name=\" + name);      this.mbeanServer.registerMBean(mbean, mbeanName);      logger.info(\"Bean \" + mbeanClass.getCanonicalName() + \" registered.\");      this.registeredMBeans.add(mbeanName);    } catch (final Exception e) {      logger.error(\"Error registering mbean \" + mbeanClass.getCanonicalName(),          e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMbeanNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ObjectName>", "snippet": "  public List<ObjectName> getMbeanNames() {    return this.registeredMBeans;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMBeanInfo", "params": ["ObjectName"], "throws": null, "modifiers": ["public"], "return_type": "MBeanInfo", "snippet": "  public MBeanInfo getMBeanInfo(final ObjectName name) {    try {      return this.mbeanServer.getMBeanInfo(name);    } catch (final Exception e) {      logger.error(e);      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMBeanAttribute", "params": ["ObjectName", "String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getMBeanAttribute(final ObjectName name, final String attribute) {    try {      return this.mbeanServer.getAttribute(name, attribute);    } catch (final Exception e) {      logger.error(e);      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getHost() {    if (this.props.containsKey(ConfigurationKeys.AZKABAN_SERVER_HOST_NAME)) {      final String hostName = this.props          .getString(Constants.ConfigurationKeys.AZKABAN_SERVER_HOST_NAME);      if (!StringUtils.isEmpty(hostName)) {        return hostName;      }    }    String host = \"unkownHost\";    try {      host = InetAddress.getLocalHost().getCanonicalHostName();    } catch (final Exception e) {      logger.error(\"Failed to fetch LocalHostName\");    }    return host;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorHostPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getExecutorHostPort() {    return getHost() + \":\" + getPort();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sleep", "params": ["Duration"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void sleep(final Duration duration) {    try {      Thread.sleep(duration.toMillis());    } catch (final InterruptedException e) {      logger.error(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    logger.warn(\"Shutting down AzkabanExecutorServer...\");    new Thread(() -> {      // Hack: Sleep for a little time to allow API calls to complete      sleep(Duration.ofSeconds(2));      shutdownInternal();    }, \"shutdown\").start();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdownInternal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void shutdownInternal() {    getFlowRunnerManager().shutdown();    // Sleep for an hour to wait for web server updater thread    // {@link azkaban.executor.RunningExecutionsUpdaterThread#updateExecutions} to finalize updating    sleep(Duration.ofHours(1));    // trigger shutdown hook    System.exit(0);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdownNow", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdownNow() throws Exception {    this.server.stop();    this.server.destroy();    getFlowRunnerManager().shutdownNow();    close();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getPort() {    final Connector[] connectors = this.server.getConnectors();    checkState(connectors.length >= 1, \"Server must have at least 1 connector\");    // The first connector is created upon initializing the server. That's the one that has the port.    ServerConnector serverConnector;    if(( server.getConnectors()[0] instanceof ServerConnector)){      //serverConnector = server.getConnectors()[0].getBean(ServerConnector.class);      serverConnector = (ServerConnector)server.getConnectors()[0];    }else {      serverConnector = new ServerConnector(server);    }    return serverConnector.getLocalPort();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java", "stars": "18", "class": {"name": "AzkabanExecutorServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/includes/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/includes/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/includes/IncludeTest.java", "stars": "15", "class": {"name": "IncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testIncludes", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testIncludes()  {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final Integer result = sqlSession.selectOne(\"org.apache.ibatis.submitted.includes.mapper.selectWithProperty\");      Assertions.assertEquals(Integer.valueOf(1), result);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/includes/IncludeTest.java", "stars": "15", "class": {"name": "IncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParametrizedIncludes", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testParametrizedIncludes() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final Map<String, Object> result = sqlSession.selectOne(\"org.apache.ibatis.submitted.includes.mapper.select\");      // Assertions.assertEquals(Integer.valueOf(1), result);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/includes/IncludeTest.java", "stars": "15", "class": {"name": "IncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configure", "params": ["HttpSecurity"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void configure(HttpSecurity http) throws Exception {\t\thttp.authorizeRequests(ae -> ae //\t\t\t\t.mvcMatchers(this.properties.getLoginUrl()).permitAll() //\t\t\t\t.anyRequest().authenticated() //\t\t)//\t\t\t\t.addFilter(this.jwtAuthenticationFilter()) //\t\t\t\t.addFilter(this.jwtAuthorizationFilter());\t}", "url": "https://raw.githubusercontent.com/joshlong/security-jwt-fun/master/jwt-servlet/src/main/java/com/joshlong/jwt/JwtAutoConfiguration.java", "stars": "4", "class": {"name": "JwtAutoConfiguration", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "jwtAuthenticationFilter", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "JwtAuthenticationFilter", "snippet": "\tJwtAuthenticationFilter jwtAuthenticationFilter() throws Exception {\t\treturn new JwtAuthenticationFilter(this.authenticationManager(), this.properties.getAudience(),\t\t\t\tthis.properties.getIssuer(), this.properties.getSecret(), this.properties.getType(),\t\t\t\tthis.properties.getLoginUrl());\t}", "url": "https://raw.githubusercontent.com/joshlong/security-jwt-fun/master/jwt-servlet/src/main/java/com/joshlong/jwt/JwtAutoConfiguration.java", "stars": "4", "class": {"name": "JwtAutoConfiguration", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "jwtAuthorizationFilter", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "JwtAuthorizationFilter", "snippet": "\tJwtAuthorizationFilter jwtAuthorizationFilter() throws Exception {\t\treturn new JwtAuthorizationFilter(this.authenticationManager(), this.properties.getSecret());\t}", "url": "https://raw.githubusercontent.com/joshlong/security-jwt-fun/master/jwt-servlet/src/main/java/com/joshlong/jwt/JwtAutoConfiguration.java", "stars": "4", "class": {"name": "JwtAutoConfiguration", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getQuantidade", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getQuantidade() {        return quantidade;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setQuantidade", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setQuantidade(Integer quantidade) {        this.quantidade = quantidade;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getValorVenda", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getValorVenda() {        return valorVenda;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setValorVenda", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValorVenda(BigDecimal valorVenda) {        this.valorVenda = valorVenda;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPeriodo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPeriodo() {        return periodo;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPeriodo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPeriodo(String periodo) {        this.periodo = periodo;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCliente", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "    public Cliente getCliente() {        return cliente;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCliente", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCliente(Cliente cliente) {        this.cliente = cliente;    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/domain/Tabela.java", "stars": "2", "class": {"name": "Tabela", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "process", "params": ["Message", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean process(Message message, Throwable cause) {        return cause.getCause() instanceof DelayException;    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/recover/strategy/impl/DelayedMessageRabbitStrategy.java", "stars": "2", "class": {"name": "DelayedMessageRabbitStrategy", "extends": null, "implements": ["RabbitStrategy"], "modifiers": ["public"]}}, {"method_name": "recover", "params": ["Message", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void recover(Message message, Throwable cause) {        addCustomHeader(message, cause);        publish(message);    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/recover/strategy/impl/DelayedMessageRabbitStrategy.java", "stars": "2", "class": {"name": "DelayedMessageRabbitStrategy", "extends": null, "implements": ["RabbitStrategy"], "modifiers": ["public"]}}, {"method_name": "addCustomHeader", "params": ["Message", "Throwable"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addCustomHeader(Message message, Throwable cause) {        String errorResponseModel = cause.getCause().getMessage();        //Custom Header For Show Exception Message        message.getMessageProperties().getHeaders().put(\"x-delay-message\", errorResponseModel);        message.getMessageProperties().getHeaders().put(\"x-delay-message-publish-date\", new Date());    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/recover/strategy/impl/DelayedMessageRabbitStrategy.java", "stars": "2", "class": {"name": "DelayedMessageRabbitStrategy", "extends": null, "implements": ["RabbitStrategy"], "modifiers": ["public"]}}, {"method_name": "publish", "params": ["Message"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void publish(Message message) {        //Delay Queue Routing Key        String delayRoutingKey = message.getMessageProperties().getConsumerQueue() + configurationProperties.getRecover().getDelayedMessageQueuePostfix();        //Set TTL to Message        message.getMessageProperties().setExpiration(configurationProperties.getRecover().getDelayMillisecond());        this.errorTemplate.send(delayRoutingKey, message);    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/recover/strategy/impl/DelayedMessageRabbitStrategy.java", "stars": "2", "class": {"name": "DelayedMessageRabbitStrategy", "extends": null, "implements": ["RabbitStrategy"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        videoPlayer = new FloatingVideo(getContext());        LayoutParams layoutParams = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);        layoutParams.gravity = Gravity.CENTER;        addView(videoPlayer, layoutParams);        String source1 = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        videoPlayer.setUp(source1, true, \"\u6d4b\u8bd5\u89c6\u9891\");        //\u589e\u52a0\u5c01\u9762        /*ImageView imageView = new ImageView(getContext());        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        videoPlayer.setThumbImageView(imageView);*/        //\u662f\u5426\u53ef\u4ee5\u6ed1\u52a8\u8c03\u6574        videoPlayer.setIsTouchWiget(false);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/FloatPlayerView.java", "stars": "2", "class": {"name": "FloatPlayerView", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        videoPlayer.getCurrentPlayer().onVideoPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/FloatPlayerView.java", "stars": "2", "class": {"name": "FloatPlayerView", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        videoPlayer.getCurrentPlayer().onVideoResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/FloatPlayerView.java", "stars": "2", "class": {"name": "FloatPlayerView", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSizeChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onSizeChanged(int w, int h, int oldw, int oldh) {        super.onSizeChanged(w, h, oldw, oldh);        mWidth = w;        mHeight = h;        mCenterX = mWidth / 2;        mCenterY = mHeight / 2;        mCircleRadius = mWidth * 5 / 12;        mBaseLength = mCircleRadius / 3;        mBaseRippleLength = 4.4f * mBaseLength / 12;        mCurrentRippleX = mCenterX - mBaseRippleLength * 10;        mRectF = new RectF(mCenterX - mCircleRadius, mCenterY - mCircleRadius, mCenterX + mCircleRadius, mCenterY + mCircleRadius);        mClipRectF = new RectF(mCenterX - 6 * mBaseRippleLength, 0, mCenterX + 6 * mBaseRippleLength, mHeight);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        switch (mCurrentState) {            case STATE_PRE:                if (mFraction <= 0.4) {                    canvas.drawCircle(mCenterX, mCenterY, mCircleRadius, mBgPaint);                    canvas.drawLine(mCenterX - mBaseLength, mCenterY, mCenterX, mCenterY + mBaseLength, mPaint);                    canvas.drawLine(mCenterX, mCenterY + mBaseLength, mCenterX + mBaseLength, mCenterY, mPaint);                    canvas.drawLine(mCenterX, mCenterY + mBaseLength - 1.3f * mBaseLength / 0.4f * mFraction,                            mCenterX, mCenterY - 1.6f * mBaseLength + 1.3f * mBaseLength / 0.4f * mFraction, mPaint);                } else if (mFraction <= 0.6) {                    canvas.drawCircle(mCenterX, mCenterY, mCircleRadius, mBgPaint);                    canvas.drawCircle(mCenterX, mCenterY - 0.3f * mBaseLength, 2, mPaint);                    canvas.drawLine(mCenterX - mBaseLength - mBaseLength * 1.2f / 0.2f * (mFraction - 0.4f), mCenterY, mCenterX, mCenterY + mBaseLength - mBaseLength / 0.2f * (mFraction - 0.4f), mPaint);                    canvas.drawLine(mCenterX, mCenterY + mBaseLength - mBaseLength / 0.2f * (mFraction - 0.4f), mCenterX + mBaseLength + mBaseLength * 1.2f / 0.2f * (mFraction - 0.4f), mCenterY, mPaint);                } else if (mFraction <= 1) {                    canvas.drawCircle(mCenterX, mCenterY, mCircleRadius, mBgPaint);                    canvas.drawCircle(mCenterX, mCenterY - 0.3f * mBaseLength - (mCircleRadius - 0.3f * mBaseLength) / 0.4f * (mFraction - 0.6f), 2, mPaint);                    canvas.drawLine(mCenterX - mBaseLength * 2.2f, mCenterY, mCenterX + mBaseLength * 2.2f, mCenterY, mPaint);                } else {                    canvas.drawCircle(mCenterX, mCenterY, mCircleRadius, mBgPaint);                    canvas.drawCircle(mCenterX, mCenterY - mCircleRadius - mBaseLength * 3 * (mFraction - 1), 3, mPaint);                    canvas.drawLine(mCenterX - mBaseLength * 2.2f, mCenterY, mCenterX + mBaseLength * 2.2f, mCenterY, mPaint);                }                break;            case STATE_DOWNLOADING:                if (mFraction <= 0.2) {                    mTextPaint.setTextSize(mTextSize / 0.2f * mFraction);                }                canvas.drawCircle(mCenterX, mCenterY, mCircleRadius, mBgPaint);                canvas.drawArc(mRectF, -90, 359.99f * mFraction, false, mPaint);                mPath.reset();                mCurrentRippleX += DEFAULT_RIPPLE_SPEED;                if (mCurrentRippleX > mCenterX - mBaseRippleLength * 6)                    mCurrentRippleX = mCenterX - mBaseRippleLength * 10;                mPath.moveTo(mCurrentRippleX, mCenterY);                for (int i = 0; i < 4; i++) {                    mPath.rQuadTo(mBaseRippleLength, -(1 - mFraction) * mBaseRippleLength, mBaseRippleLength * 2, 0);                    mPath.rQuadTo(mBaseRippleLength, (1 - mFraction) * mBaseRippleLength, mBaseRippleLength * 2, 0);                }                canvas.save();                canvas.clipRect(mClipRectF);                canvas.drawPath(mPath, mPaint);                canvas.restore();                if (mUnit != DownloadUnit.NONE && mCurrentSize > 0) {                    //canvas.drawText(String.format(\"%.2f\", mCurrentSize) + getUnitStr(mUnit), mCenterX , mCenterY + 1.4f * mBaseLength , mTextPaint);                }                break;            case STATE_END:                canvas.drawCircle(mCenterX, mCenterY, mCircleRadius, mPaint);                if (mFraction <= 0.5) {                    mTextPaint.setTextSize(mTextSize - mTextSize / 0.2f * mFraction);                } else {                    mTextPaint.setTextSize(0);                }                if (mUnit != DownloadUnit.NONE && mCurrentSize > 0) {                    canvas.drawText(String.format(\"%.2f\", mCurrentSize) + getUnitStr(mUnit), mCenterX, mCenterY + 1.4f * mBaseLength, mTextPaint);                }                canvas.drawLine(mCenterX - mBaseLength * 2.2f + mBaseLength * 1.2f * mFraction, mCenterY,                        mCenterX - mBaseLength * 0.5f, mCenterY + mBaseLength * 0.5f * mFraction * 1.3f, mPaint);                canvas.drawLine(mCenterX - mBaseLength * 0.5f, mCenterY + mBaseLength * 0.5f * mFraction * 1.3f,                        mCenterX + mBaseLength * 2.2f - mBaseLength * mFraction, mCenterY - mBaseLength * mFraction * 1.3f, mPaint);                break;            case STATE_RESET:                canvas.drawCircle(mCenterX, mCenterY, mCircleRadius, mBgPaint);                canvas.drawLine(mCenterX - mBaseLength, mCenterY,                        mCenterX - mBaseLength * 0.5f + mBaseLength * 0.5f * mFraction, mCenterY + mBaseLength * 0.65f + mBaseLength * 0.35f * mFraction, mPaint);                canvas.drawLine(mCenterX - mBaseLength * 0.5f + mBaseLength * 0.5f * mFraction, mCenterY + mBaseLength * 0.65f + mBaseLength * 0.35f * mFraction,                        mCenterX + mBaseLength * 1.2f - mBaseLength * 0.2f * mFraction, mCenterY - 1.3f * mBaseLength + 1.3f * mBaseLength * mFraction, mPaint);                canvas.drawLine(mCenterX - mBaseLength * 0.5f + mBaseLength * 0.5f * mFraction, mCenterY + mBaseLength * 0.65f + mBaseLength * 0.35f * mFraction,                        mCenterX - mBaseLength * 0.5f + mBaseLength * 0.5f * mFraction,                        mCenterY + mBaseLength * 0.65f - mBaseLength * 2.25f * mFraction, mPaint);                break;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        if (mValueAnimator != null) {            mValueAnimator.removeAllListeners();            mValueAnimator.removeAllUpdateListeners();            if (mValueAnimator.isRunning())                mValueAnimator.cancel();            mValueAnimator = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        if (mValueAnimator != null) {            mValueAnimator.removeAllListeners();            mValueAnimator.removeAllUpdateListeners();            if (mValueAnimator.isRunning())                mValueAnimator.cancel();            mValueAnimator = null;        }        mCurrentState = STATE_DOWNLOADING;        mValueAnimator = ValueAnimator.ofFloat(1.f, 100.f);        mValueAnimator.setDuration(1500);        mValueAnimator.setInterpolator(new OvershootInterpolator());        mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator valueAnimator) {                mFraction = valueAnimator.getAnimatedFraction();                invalidate();            }        });        mValueAnimator.addListener(new AnimatorListenerAdapter() {            @Override            public void onAnimationEnd(Animator animation) {                mCurrentState = STATE_DOWNLOADING;                downloadAnim();            }        });        mValueAnimator.start();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "downloadAnim", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void downloadAnim() {        if (mValueAnimator != null) {            mValueAnimator.removeAllListeners();            mValueAnimator.removeAllUpdateListeners();            if (mValueAnimator.isRunning())                mValueAnimator.cancel();            mValueAnimator = null;        }        if (mCurrentState != STATE_DOWNLOADING) {            return;        }        mValueAnimator = ValueAnimator.ofFloat(1.f, 100.f);        mValueAnimator.setDuration(mDownloadTime);        mValueAnimator.setInterpolator(new LinearInterpolator());        mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator valueAnimator) {                mFraction = valueAnimator.getAnimatedFraction();                if (mUnit != DownloadUnit.NONE && mTotalSize > 0)                    mCurrentSize = mFraction * mTotalSize;                invalidate();            }        });        mValueAnimator.addListener(new AnimatorListenerAdapter() {            @Override            public void onAnimationEnd(Animator animation) {                mCurrentState = STATE_DOWNLOADING;                downloadAnim();            }        });        mValueAnimator.start();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "endAnim", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void endAnim() {        if (mValueAnimator != null) {            mValueAnimator.removeAllListeners();            mValueAnimator.removeAllUpdateListeners();            if (mValueAnimator.isRunning())                mValueAnimator.cancel();            mValueAnimator = null;        }        mValueAnimator= ValueAnimator.ofFloat(1.f, 100.f);        mValueAnimator.setDuration(700);        mValueAnimator.setInterpolator(new OvershootInterpolator());        mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator valueAnimator) {                mFraction = valueAnimator.getAnimatedFraction();                invalidate();            }        });        mValueAnimator.addListener(new AnimatorListenerAdapter() {            @Override            public void onAnimationEnd(Animator animation) {                mFraction = 0;                mCurrentState = STATE_RESET;                if (onDownloadStateListener != null) {                    onDownloadStateListener.onDownloadFinish();                }            }        });        mValueAnimator.start();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {        mFraction = 0;        mCurrentState = STATE_PRE;        if (mValueAnimator != null) {            mValueAnimator.removeAllListeners();            mValueAnimator.removeAllUpdateListeners();            if (mValueAnimator.isRunning())                mValueAnimator.cancel();            mValueAnimator = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnitStr", "params": ["DownloadUnit"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUnitStr(DownloadUnit unit) {        switch (unit) {            case GB:                return \" gb\";            case MB:                return \" mb\";            case KB:                return \" kb\";            case B:                return \" b\";        }        return \" b\";    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDownloadConfig", "params": ["int", "double", "DownloadUnit"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDownloadConfig(int downloadTime, double downloadFileSize, DownloadUnit unit) {        mDownloadTime = downloadTime;        mTotalSize = downloadFileSize;        mUnit = unit;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentState() {        return mCurrentState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnDownloadStateListener", "params": ["OnDownloadStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnDownloadStateListener(OnDownloadStateListener onDownloadStateListener) {        this.onDownloadStateListener = onDownloadStateListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENDownloadView.java", "stars": "2", "class": {"name": "ENDownloadView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "doFilterInternal", "params": ["HttpServletRequest", "HttpServletResponse", "FilterChain"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doFilterInternal(HttpServletRequest req, HttpServletResponse res, FilterChain fc)            throws ServletException, IOException {        SecurityContext context = SecurityContextHolder.getContext();        if (context.getAuthentication() != null && context.getAuthentication().isAuthenticated()) {            // do nothing        } else {            String token = req.getHeader(TOKEN_HEADER);            if(StringUtils.isNotEmpty(token)){                //\u89e3\u6790Token\u65f6\u5c06\u201cBearer \u201d\u524d\u7f00\u53bb\u6389                token = StringUtils.trim(token).replace(TOKEN_PREFIX, \"\");            }            if(StringUtils.isBlank(token)){                token = req.getParameter(\"token\");            }            // \u5982\u679c\u8bf7\u6c42\u5934\u4e2d\u6709token,\u5219\u751f\u6210Authentication\u51ed\u8bc1            if (StringUtils.isNotBlank(token)) {                Authentication auth = new TokenAuthentication(token);                SecurityContextHolder.getContext().setAuthentication(auth);            }        }        fc.doFilter(req, res);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthenticationFilter.java", "stars": "3", "class": {"name": "TokenAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public"]}}, {"method_name": "provideHiveConf", "params": [], "throws": null, "modifiers": [], "return_type": "HiveConf", "snippet": "  HiveConf provideHiveConf() {    if (this.hiveConf != null) {      return this.hiveConf;    } else {      this.hiveConf = new HiveConf(SessionState.class);    }    troublesomeConfig(HIVEHISTORYFILELOC, hiveConf);    troublesomeConfig(SCRATCHDIR, hiveConf);    if (System.getenv(HADOOP_TOKEN_FILE_LOCATION) != null) {      System.out.println(\"Setting hadoop tokens ... \");      hiveConf.set(MAPREDUCE_JOB_CREDENTIALS_BINARY,          System.getenv(HADOOP_TOKEN_FILE_LOCATION));      System.setProperty(MAPREDUCE_JOB_CREDENTIALS_BINARY,          System.getenv(HADOOP_TOKEN_FILE_LOCATION));    }    return hiveConf;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveQueryExecutorModule.java", "stars": "18", "class": {"name": "HiveQueryExecutorModule", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "troublesomeConfig", "params": ["HiveConf", "HiveConf"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void troublesomeConfig(HiveConf.ConfVars value, HiveConf hc) {    System.out.println(\"Troublesome config \" + value + \" = \"        + HiveConf.getVar(hc, value));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveQueryExecutorModule.java", "stars": "18", "class": {"name": "HiveQueryExecutorModule", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "provideCliSessionState", "params": [], "throws": null, "modifiers": [], "return_type": "CliSessionState", "snippet": "  CliSessionState provideCliSessionState() {    if (ss != null) {      return ss;    }    ss = new CliSessionState(provideHiveConf());    SessionState.start(ss);    return ss;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveQueryExecutorModule.java", "stars": "18", "class": {"name": "HiveQueryExecutorModule", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configure", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void configure() {    /** Nothing to do **/  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveQueryExecutorModule.java", "stars": "18", "class": {"name": "HiveQueryExecutorModule", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughSandstoneSlabBlock.java", "stars": "2", "class": {"name": "RoughSandstoneSlabBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughSandstoneSlabBlock.java", "stars": "2", "class": {"name": "RoughSandstoneSlabBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughSandstoneSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughSandstoneSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(RoughSandstoneSlabBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughSandstoneSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughSandstoneSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSourceName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSourceName() {        return sourceName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSourceName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSourceName(String sourceName) {        this.sourceName = sourceName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSourceType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSourceType() {        return sourceType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSourceType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSourceType(String sourceType) {        this.sourceType = sourceType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOwner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOwner() {        return owner;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOwner", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOwner(String owner) {        this.owner = owner;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTimeBegin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTimeBegin() {        return createTimeBegin;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTimeBegin", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTimeBegin(Date createTimeBegin) {        this.createTimeBegin = createTimeBegin;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTimeEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTimeEnd() {        return createTimeEnd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTimeEnd", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTimeEnd(Date createTimeEnd) {        this.createTimeEnd = createTimeEnd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCreateUser() {        return createUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateUser(String createUser) {        this.createUser = createUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getModelId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getModelId() {        return modelId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setModelId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModelId(Integer modelId) {        this.modelId = modelId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProjectIds() {        return projectIds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectIds", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProjectIds(String projectIds) {        this.projectIds = projectIds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserDataAuth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "    public Set<String> getUserDataAuth() {        if(StringUtils.isNotBlank(projectIds)){            return null;        }        return userDataAuth;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectIdList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getProjectIdList() {        if(StringUtils.isNotBlank(projectIds)){            List<String> projectIdList = new ArrayList<>(this.projectIdList);            String[] ids = projectIds.split(\",\");            for(String id : ids){                if(null == userDataAuth || userDataAuth.contains(id)){                    projectIdList.add(id);                }            }            return projectIdList;        }        return projectIdList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserDataAuth", "params": ["Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserDataAuth(Set<String> userDataAuth) {        this.userDataAuth = userDataAuth;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceQuery.java", "stars": "23", "class": {"name": "DataSourceQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "testHome", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHome() {\t\tResponseEntity<String> entity = this.restTemplate.getForEntity(\"/\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).isEqualTo(\"Hello World\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jetty/src/test/java/smoketest/jetty/SampleJettyApplicationTests.java", "stars": "47572", "class": {"name": "SampleJettyApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCompression", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid testCompression() throws Exception {\t\tHttpHeaders requestHeaders = new HttpHeaders();\t\trequestHeaders.set(\"Accept-Encoding\", \"gzip\");\t\tHttpEntity<?> requestEntity = new HttpEntity<>(requestHeaders);\t\tResponseEntity<byte[]> entity = this.restTemplate.exchange(\"/\", HttpMethod.GET, requestEntity, byte[].class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\ttry (GZIPInputStream inflater = new GZIPInputStream(new ByteArrayInputStream(entity.getBody()))) {\t\t\tassertThat(StreamUtils.copyToString(inflater, StandardCharsets.UTF_8)).isEqualTo(\"Hello World\");\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jetty/src/test/java/smoketest/jetty/SampleJettyApplicationTests.java", "stars": "47572", "class": {"name": "SampleJettyApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemContentView.java", "stars": "2", "class": {"name": "ItemContentView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemContentView.java", "stars": "2", "class": {"name": "ItemContentView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemContentView.java", "stars": "2", "class": {"name": "ItemContentView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onMeasure (int p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemContentView.java", "stars": "2", "class": {"name": "ItemContentView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemContentView.java", "stars": "2", "class": {"name": "ItemContentView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemContentView.java", "stars": "2", "class": {"name": "ItemContentView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(String type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimeZone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimeZone(String timezone) {        this.timezone = timezone;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFormat", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFormat(String format) {        this.format = format;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimezone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTimezone() {        return timezone;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFormat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFormat() {        return format;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimezone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimezone(String timezone) {        this.timezone = timezone;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean isArray() {        return array;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setArray", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setArray(Boolean array) {        this.array = array;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean getArray() {        return array;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESColumn.java", "stars": "23", "class": {"name": "ESColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["HttpSecurity"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void configure(HttpSecurity http) throws Exception {\t\thttp.csrf().disable().exceptionHandling()\t\t\t.authenticationEntryPoint((request, response, authException)-> response.sendError(HttpServletResponse.SC_UNAUTHORIZED))\t\t\t.and()\t\t\t.authorizeRequests()\t\t\t.anyRequest().authenticated()\t\t\t.and()\t\t\t.httpBasic();\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-user-service/src/main/java/com/iiht/stock/conf/ResourceServerConfig.java", "stars": "2", "class": {"name": "ResourceServerConfig", "extends": "ResourceServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "E", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {    if (jdbcType == null) {      ps.setString(i, parameter.name());    } else {      ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE); // see r3589    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/EnumTypeHandler.java", "stars": "15", "class": {"name": "EnumTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "E", "snippet": "  public E getNullableResult(ResultSet rs, String columnName) throws SQLException {    String s = rs.getString(columnName);    return s == null ? null : Enum.valueOf(type, s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/EnumTypeHandler.java", "stars": "15", "class": {"name": "EnumTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "E", "snippet": "  public E getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    String s = rs.getString(columnIndex);    return s == null ? null : Enum.valueOf(type, s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/EnumTypeHandler.java", "stars": "15", "class": {"name": "EnumTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "E", "snippet": "  public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    String s = cs.getString(columnIndex);    return s == null ? null : Enum.valueOf(type, s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/EnumTypeHandler.java", "stars": "15", "class": {"name": "EnumTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Question{\" +                \"id=\" + id +                \", question='\" + question + '\\'' +                \", answer='\" + answer + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/entity/Question.java", "stars": "2", "class": {"name": "Question", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/entity/Question.java", "stars": "2", "class": {"name": "Question", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/entity/Question.java", "stars": "2", "class": {"name": "Question", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getQuestion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getQuestion() {        return question;    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/entity/Question.java", "stars": "2", "class": {"name": "Question", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setQuestion", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setQuestion(String question) {        this.question = question;    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/entity/Question.java", "stars": "2", "class": {"name": "Question", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAnswer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAnswer() {        return answer;    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/entity/Question.java", "stars": "2", "class": {"name": "Question", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAnswer", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAnswer(String answer) {        this.answer = answer;    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/entity/Question.java", "stars": "2", "class": {"name": "Question", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String execute(){        return role.authority();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/strategy/RoleContext.java", "stars": "2", "class": {"name": "RoleContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLatch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CountDownLatch", "snippet": "    public CountDownLatch getLatch(){        return latch;    }", "url": "https://raw.githubusercontent.com/camelya58/kafka-sample/master/kafka-consumer/src/main/java/com/example/kafka/kafkaconsumer/service/ReceiverService.java", "stars": "2", "class": {"name": "ReceiverService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "receiveAndSave", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void receiveAndSave(String payload){        log.info(\"Receive message= '{}' \", payload);        latch.countDown();    }", "url": "https://raw.githubusercontent.com/camelya58/kafka-sample/master/kafka-consumer/src/main/java/com/example/kafka/kafkaconsumer/service/ReceiverService.java", "stars": "2", "class": {"name": "ReceiverService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() {    for (int i = 0; i < 2_000_000; i++) {      synchronized(this) {        value++;      }    }  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/runnables/Counter.java", "stars": "3", "class": {"name": "GoodValue", "extends": null, "implements": ["Runnable"], "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": ["Throwable"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) throws Throwable {    GoodValue v = new GoodValue();    Thread t1 = new Thread(v);    t1.start();    Thread t2 = new Thread(v);    t2.start();    t1.join();    t2.join();    System.out.println(\"Value of v.value is \" + v.value);  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/runnables/Counter.java", "stars": "3", "class": {"name": "Counter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recordinfo", "params": ["String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "DeferredResult<ResponseEntity>", "snippet": "\tpublic DeferredResult<ResponseEntity<RecordInfo>> recordinfo(@PathVariable String deviceId, String channelId, String startTime,  String endTime){\t\t\t\tif (logger.isDebugEnabled()) {\t\t\tlogger.debug(String.format(\"\u5f55\u50cf\u4fe1\u606f API\u8c03\u7528\uff0cdeviceId\uff1a%s \uff0cstartTime\uff1a%s\uff0c startTime\uff1a%s\",deviceId, startTime, endTime));\t\t}\t\t\t\tDevice device = storager.queryVideoDevice(deviceId);\t\tcmder.recordInfoQuery(device, channelId, startTime, endTime);\t\tDeferredResult<ResponseEntity<RecordInfo>> result = new DeferredResult<ResponseEntity<RecordInfo>>();\t\t// \u5f55\u50cf\u67e5\u8be2\u4ee5channelId\u4f5c\u4e3adeviceId\u67e5\u8be2\t\tresultHolder.put(DeferredResultHolder.CALLBACK_CMD_RECORDINFO+channelId, result);        return result;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/vmanager/record/RecordController.java", "stars": "29", "class": {"name": "RecordController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/ihoneymon/rest-template-of-spring/master/client/src/test/java/io/honeymon/study/resttemplate/client/ClientApplicationTests.java", "stars": "4", "class": {"name": "ClientApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/cacheorder/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/cacheorder/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cacheorder/CacheOrderTest.java", "stars": "15", "class": {"name": "CacheOrderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveACacheRefNotYetRead", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveACacheRefNotYetRead() {    MappedStatement ms = sqlSessionFactory.getConfiguration().getMappedStatement(\"getUser\");    Cache cache = ms.getCache();    assertEquals(\"org.apache.ibatis.submitted.cacheorder.Mapper2\", cache.getId());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cacheorder/CacheOrderTest.java", "stars": "15", "class": {"name": "CacheOrderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "handle", "params": ["WxMpXmlMessage", "Map<String,Object>", "WxMpService", "WxSessionManager"], "throws": null, "modifiers": ["public"], "return_type": "WxMpXmlOutMessage", "snippet": "  public WxMpXmlOutMessage handle(WxMpXmlMessage wxMessage,                                  Map<String, Object> context, WxMpService wxMpService,                                  WxSessionManager sessionManager) {    return null;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/handler/NullHandler.java", "stars": "2", "class": {"name": "NullHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "createFromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "SlaChecker", "snippet": "  public static SlaChecker createFromJson(final Object obj) throws Exception {    return createFromJson((HashMap<String, Object>) obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "createFromJson", "params": ["HashMap<String,Object>"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "SlaChecker", "snippet": "  public static SlaChecker createFromJson(final HashMap<String, Object> obj)      throws Exception {    final Map<String, Object> jsonObj = (HashMap<String, Object>) obj;    if (!jsonObj.get(\"type\").equals(type)) {      throw new Exception(\"Cannot create checker of \" + type + \" from \"          + jsonObj.get(\"type\"));    }    final String id = (String) jsonObj.get(\"id\");    final SlaOption slaOption = SlaOption.fromObject(jsonObj.get(\"slaOption\"));    final int execId = Integer.valueOf((String) jsonObj.get(\"execId\"));    return new SlaChecker(id, slaOption, execId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isSlaMissed", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "Boolean", "snippet": "  private Boolean isSlaMissed(final ExecutableFlow flow) {    final String type = this.slaOption.getType();    if (flow.getStartTime() < 0) {      return Boolean.FALSE;    }    final Status status;    if (type.equals(SlaOption.TYPE_FLOW_FINISH)) {      if (this.checkTime < flow.getStartTime()) {        final ReadablePeriod duration =            Utils.parsePeriodString((String) this.slaOption.getInfo().get(                SlaOption.INFO_DURATION));        final DateTime startTime = new DateTime(flow.getStartTime());        final DateTime nextCheckTime = startTime.plus(duration);        this.checkTime = nextCheckTime.getMillis();      }      status = flow.getStatus();      if (this.checkTime < DateTime.now().getMillis()) {        return !isFlowFinished(status);      }    } else if (type.equals(SlaOption.TYPE_FLOW_SUCCEED)) {      if (this.checkTime < flow.getStartTime()) {        final ReadablePeriod duration =            Utils.parsePeriodString((String) this.slaOption.getInfo().get(                SlaOption.INFO_DURATION));        final DateTime startTime = new DateTime(flow.getStartTime());        final DateTime nextCheckTime = startTime.plus(duration);        this.checkTime = nextCheckTime.getMillis();      }      status = flow.getStatus();      if (this.checkTime < DateTime.now().getMillis()) {        return !isFlowSucceeded(status);      } else {        return status.equals(Status.FAILED) || status.equals(Status.KILLED);      }    } else if (type.equals(SlaOption.TYPE_JOB_FINISH)) {      final String jobName =          (String) this.slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);\t  // FIXME\u00a0The node path is used to obtain node information instead. The purpose is to solve the problem that subflow and subflow jobs cannot be alerted.      final ExecutableNode node = flow.getExecutableNodePath(jobName);      if (node.getStartTime() < 0) {        return Boolean.FALSE;      }      if (this.checkTime < node.getStartTime()) {        final ReadablePeriod duration =            Utils.parsePeriodString((String) this.slaOption.getInfo().get(                SlaOption.INFO_DURATION));        final DateTime startTime = new DateTime(node.getStartTime());        final DateTime nextCheckTime = startTime.plus(duration);        this.checkTime = nextCheckTime.getMillis();      }      status = node.getStatus();      if (this.checkTime < DateTime.now().getMillis()) {        return !isJobFinished(status);      }    } else if (type.equals(SlaOption.TYPE_JOB_SUCCEED)) {      final String jobName =          (String) this.slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);\t  // FIXME\u00a0The node path is used to obtain node information instead. The purpose is to solve the problem that subflow and subflow jobs cannot be alerted.      final ExecutableNode node = flow.getExecutableNodePath(jobName);      if (node.getStartTime() < 0) {        return Boolean.FALSE;      }      if (this.checkTime < node.getStartTime()) {        final ReadablePeriod duration =            Utils.parsePeriodString((String) this.slaOption.getInfo().get(                SlaOption.INFO_DURATION));        final DateTime startTime = new DateTime(node.getStartTime());        final DateTime nextCheckTime = startTime.plus(duration);        this.checkTime = nextCheckTime.getMillis();      }      status = node.getStatus();      if (this.checkTime < DateTime.now().getMillis()) {        return !isJobFinished(status);      } else {        return status.equals(Status.FAILED) || status.equals(Status.KILLED);      }    }    return Boolean.FALSE;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isSlaGood", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "Boolean", "snippet": "  private Boolean isSlaGood(final ExecutableFlow flow) {    final String type = this.slaOption.getType();    if (flow.getStartTime() < 0) {      return Boolean.FALSE;    }    final Status status;    if (type.equals(SlaOption.TYPE_FLOW_FINISH)) {      if (this.checkTime < flow.getStartTime()) {        final ReadablePeriod duration =            Utils.parsePeriodString((String) this.slaOption.getInfo().get(                SlaOption.INFO_DURATION));        final DateTime startTime = new DateTime(flow.getStartTime());        final DateTime nextCheckTime = startTime.plus(duration);        this.checkTime = nextCheckTime.getMillis();      }      status = flow.getStatus();      return isFlowFinished(status);    } else if (type.equals(SlaOption.TYPE_FLOW_SUCCEED)) {      if (this.checkTime < flow.getStartTime()) {        final ReadablePeriod duration =            Utils.parsePeriodString((String) this.slaOption.getInfo().get(                SlaOption.INFO_DURATION));        final DateTime startTime = new DateTime(flow.getStartTime());        final DateTime nextCheckTime = startTime.plus(duration);        this.checkTime = nextCheckTime.getMillis();      }      status = flow.getStatus();      return isFlowSucceeded(status);    } else if (type.equals(SlaOption.TYPE_JOB_FINISH)) {      final String jobName =          (String) this.slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);\t  // FIXME\u00a0The node path is used to obtain node information instead. The purpose is to solve the problem that subflow and subflow jobs cannot be alerted.      final ExecutableNode node = flow.getExecutableNodePath(jobName);      if (node.getStartTime() < 0) {        return Boolean.FALSE;      }      if (this.checkTime < node.getStartTime()) {        final ReadablePeriod duration =            Utils.parsePeriodString((String) this.slaOption.getInfo().get(                SlaOption.INFO_DURATION));        final DateTime startTime = new DateTime(node.getStartTime());        final DateTime nextCheckTime = startTime.plus(duration);        this.checkTime = nextCheckTime.getMillis();      }      status = node.getStatus();      return isJobFinished(status);    } else if (type.equals(SlaOption.TYPE_JOB_SUCCEED)) {      final String jobName =          (String) this.slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);\t  // FIXME\u00a0The node path is used to obtain node information instead. The purpose is to solve the problem that subflow and subflow jobs cannot be alerted.      final ExecutableNode node = flow.getExecutableNodePath(jobName);      if (node.getStartTime() < 0) {        return Boolean.FALSE;      }      if (this.checkTime < node.getStartTime()) {        final ReadablePeriod duration =            Utils.parsePeriodString((String) this.slaOption.getInfo().get(                SlaOption.INFO_DURATION));        final DateTime startTime = new DateTime(node.getStartTime());        final DateTime nextCheckTime = startTime.plus(duration);        this.checkTime = nextCheckTime.getMillis();      }      status = node.getStatus();      return isJobSucceeded(status);    }    return Boolean.FALSE;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "eval", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object eval() {    logger.info(\"Checking sla for execution \" + this.execId);    final ExecutableFlow flow;    try {      flow = this.executorLoader.fetchExecutableFlow(this.execId);    } catch (final ExecutorManagerException e) {      logger.error(\"Can't get executable flow.\", e);      e.printStackTrace();      // something wrong, send out alerts      return Boolean.TRUE;    }    return isSlaMissed(flow);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isSlaFailed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object isSlaFailed() {    final ExecutableFlow flow;    try {      flow = this.executorLoader.fetchExecutableFlow(this.execId);    } catch (final ExecutorManagerException e) {      logger.error(\"Can't get executable flow.\", e);      // something wrong, send out alerts      return Boolean.TRUE;    }    return isSlaMissed(flow);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isSlaPassed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object isSlaPassed() {    final ExecutableFlow flow;    try {      flow = this.executorLoader.fetchExecutableFlow(this.execId);    } catch (final ExecutorManagerException e) {      logger.error(\"Can't get executable flow.\", e);      // something wrong, send out alerts      return Boolean.TRUE;    }    return isSlaGood(flow);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNum() {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void reset() {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.id;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "fromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "ConditionChecker", "snippet": "  public ConditionChecker fromJson(final Object obj) throws Exception {    return createFromJson(obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "toJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toJson() {    final Map<String, Object> jsonObj = new HashMap<>();    jsonObj.put(\"type\", type);    jsonObj.put(\"id\", this.id);    jsonObj.put(\"slaOption\", this.slaOption.toObject());    jsonObj.put(\"execId\", String.valueOf(this.execId));    return jsonObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "stopChecker", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void stopChecker() {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "setContext", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setContext(final Map<String, Object> context) {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getNextCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNextCheckTime() {    return this.checkTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isFlowFinished", "params": ["Status"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isFlowFinished(final Status status) {    if (status.equals(Status.FAILED) || status.equals(Status.KILLED)        || status.equals(Status.SUCCEEDED)) {      return Boolean.TRUE;    } else {      return Boolean.FALSE;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isFlowSucceeded", "params": ["Status"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isFlowSucceeded(final Status status) {    return status.equals(Status.SUCCEEDED);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isJobFinished", "params": ["Status"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isJobFinished(final Status status) {  \t// FIXME \u00a0The FAILED_WAITING status is completed. The completion alarm is also triggered when the task status is FAILED_WAITING.    if (status.equals(Status.FAILED) || status.equals(Status.KILLED)        || Status.isSucceeded(status) || status.equals(Status.FAILED_WAITING)) {      return Boolean.TRUE;    } else {      return Boolean.FALSE;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isJobSucceeded", "params": ["Status"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isJobSucceeded(final Status status) {    return Status.isSucceeded(status);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaChecker.java", "stars": "18", "class": {"name": "SlaChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getApi() {        return \"user/refound\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RefoundApi.java", "stars": "1", "class": {"name": "RefoundApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setAccount", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RefoundApi", "snippet": "    public RefoundApi setAccount(String account) {        this.account = account;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RefoundApi.java", "stars": "1", "class": {"name": "RefoundApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setNewPwd", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RefoundApi", "snippet": "    public RefoundApi setNewPwd(String pwd_new) {        this.pwd_new = pwd_new;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RefoundApi.java", "stars": "1", "class": {"name": "RefoundApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setRepeatNewPwd", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RefoundApi", "snippet": "    public RefoundApi setRepeatNewPwd(String pwd_new_repeat) {        this.account = pwd_new_repeat;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RefoundApi.java", "stars": "1", "class": {"name": "RefoundApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RefoundApi", "snippet": "    public RefoundApi setCode(String code) {        this.code = code;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RefoundApi.java", "stars": "1", "class": {"name": "RefoundApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws Exception {\t\tApplicationContext context = SpringApplication.run(SampleAtomikosApplication.class, args);\t\tAccountService service = context.getBean(AccountService.class);\t\tAccountRepository repository = context.getBean(AccountRepository.class);\t\tservice.createAccountAndNotify(\"josh\");\t\tSystem.out.println(\"Count is \" + repository.count());\t\ttry {\t\t\tservice.createAccountAndNotify(\"error\");\t\t}\t\tcatch (Exception ex) {\t\t\tSystem.out.println(ex.getMessage());\t\t}\t\tSystem.out.println(\"Count is \" + repository.count());\t\tThread.sleep(100);\t\t((Closeable) context).close();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jta-atomikos/src/main/java/smoketest/atomikos/SampleAtomikosApplication.java", "stars": "47572", "class": {"name": "SampleAtomikosApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t//create an instance of the game (constructor initializes the game)\t\tnew JMines(args.length == 0 || !args[0].equalsIgnoreCase(\"cli\"));\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/JMines.java", "stars": "1", "class": {"name": "JMines", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reveal", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "GameState", "snippet": "\tprivate GameState reveal(int x, int y) {\t\tCell[][] board = state.getBoard();\t\t\t\t// reveal\t\treveal(x, y, board);\t\t\t\t// check if game is won\t\tif (!state.isLost()) {\t\t\tboolean won = true;\t\t\tfor (int y1 = 0; y1 < board.length; y1++) {\t\t\t\tfor (int x1 = 0; x1 < board[y1].length; x1++) {\t\t\t\t\tif (!board[x1][y1].isRevealed() && !board[x1][y1].isMine()) {\t\t\t\t\t\twon = false;\t\t\t\t\t\tbreak;\t\t\t\t\t} \t\t\t\t}\t\t\t}\t\t\tstate.setWon(won);\t\t}\t\t\t\treturn state;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/JMines.java", "stars": "1", "class": {"name": "JMines", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reveal", "params": ["int", "int", "Cell"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void reveal(int x, int y, Cell[][] board) {\t\tif (!board[x][y].isRevealed()) {\t\t\tboard[x][y].setRevealed(true);\t\t\tif (board[x][y].isMine()) {\t\t\t\tstate.setLost();\t\t\t} else if (board[x][y].getNumber() == 0) {\t\t\t\t//reveal all neighbors\t\t\t\tfor (int y1 = Math.max(y-1, 0); y1 <= Math.min(y+1, board.length-1); y1++) {\t\t\t\t\tfor (int x1 = Math.max(x-1, 0); x1 <= Math.min(x+1, board[y].length-1); x1++) {\t\t\t\t\t\treveal(x1, y1); //reveal neighbor\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/JMines.java", "stars": "1", "class": {"name": "JMines", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mark", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "GameState", "snippet": "\tprivate GameState mark(int x, int y) {\t\tstate.getBoard()[x][y].setMarked(!state.getBoard()[x][y].isMarked());\t\treturn state;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/JMines.java", "stars": "1", "class": {"name": "JMines", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newGame", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "GameState", "snippet": "\tprivate GameState newGame(int dimensions, int difficulty) {\t\tstate = new GameState(dimensions, difficulty);\t\treturn state;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/JMines.java", "stars": "1", "class": {"name": "JMines", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getZoom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getZoom() {        return zoom;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isInvisibleTo", "params": ["PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isInvisibleTo(PlayerEntity player) {        return false;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "collides", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean collides() {        return true;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isLive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLive() {        return isLive;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLive", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLive(boolean live) {        isLive = live;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isInvisible", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isInvisible() {        return true;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setZoom", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setZoom(int zoom) {        this.zoom = zoom;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSneaking", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSneaking(boolean sneaking) {    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String text){        this.name = new LiteralText(text);        DevolaySender devolaySender = new DevolaySender(\"MC - \" + text);        FabricNDI.instance.cameraControls.get(getUuid()).updateSender(devolaySender);        FabricNDI.instance.cameras.get(getUuid()).updateSender(devolaySender);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDisplayName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Text", "snippet": "    public Text getDisplayName() {        return name;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldRender", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean shouldRender(double distance) {        if(MinecraftClient.getInstance().getCameraEntity() instanceof CameraEntity){            return false;        }        return super.shouldRender(distance);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSneaking", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSneaking() {        return false;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "adjustMovementForSneaking", "params": ["Vec3d", "MovementType"], "throws": null, "modifiers": ["protected"], "return_type": "Vec3d", "snippet": "    protected Vec3d adjustMovementForSneaking(Vec3d movement, MovementType type) {        return movement;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isInSneakingPose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isInSneakingPose() {        return false;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void remove() {        super.remove();        FabricNDI.instance.cameraControls.get(getUuid()).end();        FabricNDI.instance.cameras.get(getUuid()).end();        FabricNDI.instance.cameras.remove(getUuid());        FabricNDI.instance.cameraEntities.remove(this);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "interact", "params": ["PlayerEntity", "Hand"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean interact(PlayerEntity player, Hand hand) {       MinecraftClient.getInstance().openScreen(new NameScreen(this));       return true;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/CameraEntity.java", "stars": "5", "class": {"name": "CameraEntity", "extends": "OtherClientPlayerEntity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Person p1 = new Person(\"\u5c0f\u5f3a\");        p1.run();        System.out.println(0/0);//ArithmeticException: / by zero        Person p2 = new Person(\"\u65fa\u8d22\");        p2.run();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo05/Thread/Demo01MainThread.java", "stars": "2", "class": {"name": "Demo01MainThread", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startAllTaskGroup", "params": ["List<Configuration>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startAllTaskGroup(List<Configuration> configurations) {        this.taskGroupContainerExecutorService = Executors                .newFixedThreadPool(configurations.size());        for (Configuration taskGroupConfiguration : configurations) {            TaskGroupContainerRunner taskGroupContainerRunner = newTaskGroupContainerRunner(taskGroupConfiguration);            //store task group containers            taskGroupContainers.add(taskGroupContainerRunner.getTaskGroupContainer());            this.taskGroupContainerExecutorService.execute(taskGroupContainerRunner);        }        this.taskGroupContainerExecutorService.shutdown();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/processinner/ProcessInnerScheduler.java", "stars": "23", "class": {"name": "ProcessInnerScheduler", "extends": "AbstractScheduler", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "dealFailedStat", "params": ["AbstractContainerCommunicator", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dealFailedStat(AbstractContainerCommunicator frameworkCollector, Throwable throwable) {        this.taskGroupContainerExecutorService.shutdownNow();        throw DataXException.asDataXException(                FrameworkErrorCode.PLUGIN_RUNTIME_ERROR, throwable);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/processinner/ProcessInnerScheduler.java", "stars": "23", "class": {"name": "ProcessInnerScheduler", "extends": "AbstractScheduler", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "dealKillingStat", "params": ["AbstractContainerCommunicator", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dealKillingStat(AbstractContainerCommunicator frameworkCollector, int totalTasks) {        this.taskGroupContainerExecutorService.shutdownNow();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/processinner/ProcessInnerScheduler.java", "stars": "23", "class": {"name": "ProcessInnerScheduler", "extends": "AbstractScheduler", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cancelAllTaskGroup", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cancelAllTaskGroup() {        //shutdown each task group container        taskGroupContainers.forEach(TaskGroupContainer::shutdown);        //then to close the thread pool        this.taskGroupContainerExecutorService.shutdownNow();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/processinner/ProcessInnerScheduler.java", "stars": "23", "class": {"name": "ProcessInnerScheduler", "extends": "AbstractScheduler", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "adjustTaskGroupSpeed", "params": ["long", "long"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void adjustTaskGroupSpeed(long byteSpeed, long recordSpeed) {        taskGroupContainers.forEach(taskGroupContainer -> taskGroupContainer.adjustSpeed(byteSpeed, recordSpeed));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/processinner/ProcessInnerScheduler.java", "stars": "23", "class": {"name": "ProcessInnerScheduler", "extends": "AbstractScheduler", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "newTaskGroupContainerRunner", "params": ["Configuration"], "throws": null, "modifiers": ["private"], "return_type": "TaskGroupContainerRunner", "snippet": "    private TaskGroupContainerRunner newTaskGroupContainerRunner(            Configuration configuration) {        TaskGroupContainer taskGroupContainer = new TaskGroupContainer(configuration);        return new TaskGroupContainerRunner(taskGroupContainer);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/processinner/ProcessInnerScheduler.java", "stars": "23", "class": {"name": "ProcessInnerScheduler", "extends": "AbstractScheduler", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isValid", "params": ["CreatorLeasingDTO", "ConstraintValidatorContext"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isValid(CreatorLeasingDTO creatorLeasingDTO, ConstraintValidatorContext constraintValidatorContext) {        boolean res = true;        List<String> violations = new ArrayList<>();        LOG.debug(\"Validating CreatorLeasingDTO {}\", creatorLeasingDTO);        if (creatorLeasingDTO == null) {            LOG.debug(\"creatorLeasingDTO is null\");            return false;        }        if (creatorLeasingDTO.getTo() != null && creatorLeasingDTO.getFrom() != null) {            checkFromAndToDate(creatorLeasingDTO, violations);            checkOverlappings(creatorLeasingDTO, violations);        } else {            LOG.debug(\"from or to null\");            violations.add(\"{from or to null}\");        }        checkGardenFieldName(creatorLeasingDTO, violations);        if (!violations.isEmpty()) {            res = false;            buildConstraintViolationContext(violations, constraintValidatorContext);        }        return res;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/validator/LeasingDataValidator.java", "stars": "2", "class": {"name": "LeasingDataValidator", "extends": null, "implements": ["ConstraintValidator"], "modifiers": ["public"]}}, {"method_name": "checkGardenFieldName", "params": ["CreatorLeasingDTO", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkGardenFieldName(CreatorLeasingDTO creatorLeasingDTO, List<String> violations) {        if (StringUtils.isEmpty(creatorLeasingDTO.getGardenFieldName())) {            violations.add(\"{gardenField name is emtpy}\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/validator/LeasingDataValidator.java", "stars": "2", "class": {"name": "LeasingDataValidator", "extends": null, "implements": ["ConstraintValidator"], "modifiers": ["public"]}}, {"method_name": "checkOverlappings", "params": ["CreatorLeasingDTO", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkOverlappings(final CreatorLeasingDTO creatorLeasingDTO, final List<String> violations) {        if (creatorLeasingDTO.getGardenFieldId() == null) {            violations.add(\"{gardenfieldId is null}\");            return;        }        List<Leasing> overlappings = leasingService.getOverLappingLeasingsForGardenfieldAndUserInInterval(            creatorLeasingDTO.getGardenFieldId(),            creatorLeasingDTO.getFrom(),            creatorLeasingDTO.getTo()        );        if (!overlappings.isEmpty()) {            LOG.debug(\"overlappings detected: {}\", overlappings);            violations.add(\"{leasing overlaps with other leasings}\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/validator/LeasingDataValidator.java", "stars": "2", "class": {"name": "LeasingDataValidator", "extends": null, "implements": ["ConstraintValidator"], "modifiers": ["public"]}}, {"method_name": "checkFromAndToDate", "params": ["CreatorLeasingDTO", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkFromAndToDate(CreatorLeasingDTO creatorLeasingDTO, List<String> violations) {        if (!creatorLeasingDTO.getFrom().isBefore(creatorLeasingDTO.getTo())) {            LOG.debug(\"from is before to\");            violations.add(\"{from date is before to date}\");        }        if (!creatorLeasingDTO.getFrom().isAfter(Instant.now().plus(AMOUNT, UNIT))) {            LOG.debug(\"from is in less than two weeks from now - not possible\");            violations.add(\"{from is in less than two weeks from now - not possible}\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/validator/LeasingDataValidator.java", "stars": "2", "class": {"name": "LeasingDataValidator", "extends": null, "implements": ["ConstraintValidator"], "modifiers": ["public"]}}, {"method_name": "buildConstraintViolationContext", "params": ["List<String>", "ConstraintValidatorContext"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void buildConstraintViolationContext(List<String> msgs, ConstraintValidatorContext constraintValidatorContext) {        if (msgs.isEmpty()) {            return;        }        constraintValidatorContext.disableDefaultConstraintViolation();        for (String violation : msgs) {            constraintValidatorContext.buildConstraintViolationWithTemplate(violation).addConstraintViolation();        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/validator/LeasingDataValidator.java", "stars": "2", "class": {"name": "LeasingDataValidator", "extends": null, "implements": ["ConstraintValidator"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageContainer.java", "stars": "2", "class": {"name": "PageContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageContainer.java", "stars": "2", "class": {"name": "PageContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageContainer.java", "stars": "2", "class": {"name": "PageContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onMeasure (int p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageContainer.java", "stars": "2", "class": {"name": "PageContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageContainer.java", "stars": "2", "class": {"name": "PageContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageContainer.java", "stars": "2", "class": {"name": "PageContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException", "ClassNotFoundException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException, ClassNotFoundException {        ler();        menu_Principal();    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "escrever", "params": [], "throws": ["IOException", "ClassNotFoundException", "FileNotFoundException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void escrever() throws IOException, ClassNotFoundException, FileNotFoundException {        FileOutputStream arq = null;        //Produtos        try {            arq = new FileOutputStream(\"Produtos.txt\");            ObjectOutputStream obj = new ObjectOutputStream(arq);            for (Produto p : lista_Produtos) {                obj.writeObject(p);            }        } catch (FileNotFoundException erro) {            erro.printStackTrace();            System.out.println(\"Tentativa de abrir o arquivo indicado para escrita falhou!\");        } catch (IOException erro) {            erro.printStackTrace();            System.out.println(\"Algo ocorreu mal!\");        } finally {            arq.close();        }        //Clientes        try {            arq = new FileOutputStream(\"Clientes.txt\");            ObjectOutputStream obj = new ObjectOutputStream(arq);            for (Cliente c : lista_Clientes) {                obj.writeObject(c);            }        } catch (FileNotFoundException erro) {            erro.printStackTrace();            System.out.println(\"Tentativa de abrir o arquivo indicado para escrita falhou!\");        } catch (IOException erro) {            erro.printStackTrace();            System.out.println(\"Algo ocorreu mal!\");        } finally {            arq.close();        }        //Encomendas        try {            arq = new FileOutputStream(\"Encomendas.txt\");            ObjectOutputStream obj = new ObjectOutputStream(arq);            for (Encomenda e : lista_Encomendas) {                obj.writeObject(e);            }        } catch (FileNotFoundException erro) {            erro.printStackTrace();            System.out.println(\"Tentativa de abrir o arquivo indicado para escrita falhou!\");        } catch (IOException erro) {            erro.printStackTrace();            System.out.println(\"Algo ocorreu mal!\");        } finally {            arq.close();        }        //Promocoes        try {            arq = new FileOutputStream(\"Promocoes.txt\");            ObjectOutputStream obj = new ObjectOutputStream(arq);            for (Promocao pro : lista_Promocoes) {                obj.writeObject(pro);            }        } catch (FileNotFoundException erro) {            erro.printStackTrace();            System.out.println(\"Tentativa de abrir o arquivo indicado para escrita falhou!\");        } catch (IOException erro) {            erro.printStackTrace();            System.out.println(\"Algo ocorreu mal!\");        } finally {            arq.close();        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "ler", "params": [], "throws": ["FileNotFoundException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void ler() throws FileNotFoundException {        //try and catch        //O Programa tenta executar o bloco do codigo try        FileInputStream arq = null;        //Produtos        try {            File file = new File(\"Produtos.txt\");            if (file.exists()) {                arq = new FileInputStream(file);                ObjectInputStream obj = new ObjectInputStream(arq);                while (arq.available() > 0) {                    lista_Produtos.add((Produto) obj.readObject());                }            } else {                file.createNewFile();            }        } catch (FileNotFoundException erro) {            erro.printStackTrace();            System.out.println(\"Tentativa de abrir o arquivo indicado para Leitura falhou!\");        } catch (IOException erro) {            erro.printStackTrace();            System.out.println(\"Algo ocorreu mal!\");        } catch (ClassNotFoundException ex) {            Logger.getLogger(ExLoja.class.getName()).log(Level.SEVERE, null, ex);        }        //Clientes        try {            File file = new File(\"Clientes.txt\");            if (file.exists()) {                arq = new FileInputStream(file);                ObjectInputStream obj = new ObjectInputStream(arq);                while (arq.available() > 0) {                    lista_Produtos.add((Produto) obj.readObject());                }            } else {                file.createNewFile();            }        } catch (FileNotFoundException erro) {            erro.printStackTrace();            System.out.println(\"Tentativa de abrir o arquivo indicado para Leitura falhou!\");        } catch (IOException erro) {            erro.printStackTrace();            System.out.println(\"Algo ocorreu mal!\");        } catch (ClassNotFoundException ex) {            Logger.getLogger(ExLoja.class.getName()).log(Level.SEVERE, null, ex);        }        //Encomendas        try {            File file = new File(\"Encomendas.txt\");            if (file.exists()) {                arq = new FileInputStream(file);                ObjectInputStream obj = new ObjectInputStream(arq);                while (arq.available() > 0) {                    lista_Produtos.add((Produto) obj.readObject());                }            } else {                file.createNewFile();            }        } catch (FileNotFoundException erro) {            erro.printStackTrace();            System.out.println(\"Tentativa de abrir o arquivo indicado para Leitura falhou!\");        } catch (IOException erro) {            erro.printStackTrace();            System.out.println(\"Algo ocorreu mal!\");        } catch (ClassNotFoundException ex) {            Logger.getLogger(ExLoja.class.getName()).log(Level.SEVERE, null, ex);        }        //Promo\u00e7\u00f5es        try {            File file = new File(\"Promocoes.txt\");            if (file.exists()) {                arq = new FileInputStream(file);                ObjectInputStream obj = new ObjectInputStream(arq);                while (arq.available() > 0) {                    lista_Produtos.add((Produto) obj.readObject());                }            } else {                file.createNewFile();            }                    } catch (FileNotFoundException erro) {            erro.printStackTrace();            System.out.println(\"Tentativa de abrir o arquivo indicado para Leitura falhou!\");        } catch (IOException erro) {            erro.printStackTrace();            System.out.println(\"Algo ocorreu mal!\");        } catch (ClassNotFoundException ex) {            Logger.getLogger(ExLoja.class.getName()).log(Level.SEVERE, null, ex);        }        //Se algo de errado acontecer, Imprime a mansagem de erro        //Evitando que o pragrama feche caso ocorrer algum erro.    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "menu_Principal", "params": [], "throws": ["IOException", "ClassNotFoundException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void menu_Principal() throws IOException, ClassNotFoundException {        Scanner s = new Scanner(System.in);        int op = 0;        while (op != 5) {            System.out.println(\"============================ Menu Principal =================================\");            System.out.println(\"Escolhe uma op\u00e7\u00e3o\");            System.out.println(\"1 - Gerir Produtos\");            System.out.println(\"2 - Gerir Encomendas\");            System.out.println(\"3 - Gerir Clientes\");            System.out.println(\"4 - Gerir Promo\u00e7\u00f5es\");            System.out.println(\"5 - Sair\");            op = s.nextInt();            switch (op) {                case 1: {                    gerirProdutos();                    break;                }                case 2: {                    gerirEncomendas();                    break;                }                case 3: {                    gerirClientes();                    break;                }                case 4: {                    gerirPromocoes();                    break;                }                case 5: {                    System.out.println(\"A sair .......\");                    escrever();                    break;                }                default: {                    System.out.println(\"Op\u00e7\u00e3o inv\u00e1lida!\");                }            }        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "gerirProdutos", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void gerirProdutos() {        Scanner s = new Scanner(System.in);        int op = 0;        while (op != 4) {            System.out.println(\"============================ Gest\u00e3o de Produtos =============================\");            System.out.println(\"Escolhe uma op\u00e7\u00e3o\");            System.out.println(\"1 - Ver Produtos\");            System.out.println(\"2 - Adicionar Produto\");            System.out.println(\"3 - Remover Produto\");            System.out.println(\"4 - Voltar ao Menu Principal\");            op = s.nextInt();            switch (op) {                case 1: {                    if (!lista_Produtos.isEmpty()) {                        System.out.println(\"\\n__________________________________________\");                        System.out.println(\"|   C\u00d3DIGO  |    NOME    |   PRE\u00c7O(ECV)  |\");                        System.out.println(\"|-----------+------------+---------------|\");                        for (Produto p : lista_Produtos) {                            p.imprimir();                        }                        System.out.println(\"|========================================|\\n\");                    } else {                        System.out.println(\"Lita vazia!\");                    }                    break;                }                case 2: {                    adicionarProdutoNaLoja();                    break;                }                case 3: {                    if (!lista_Produtos.isEmpty()) {                        removerProdutoDaLoja();                    } else {                        System.out.println(\"Lita vazia!\");                    }                    break;                }                default: {                    System.out.println(\"Op\u00e7\u00e3o inv\u00e1lida!\");                }            }        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "adicionarProdutoNaLoja", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void adicionarProdutoNaLoja() {        Scanner s = new Scanner(System.in);        System.out.println(\"Insere o c\u00f3digo do Produto\");        int co = s.nextInt();        System.out.println(\"Insere a designa\u00e7\u00e3o do Produto\");        String de = s.next();        System.out.println(\"Insere o pre\u00e7o do Produto\");        double pr = s.nextDouble();        Produto p = new Produto(co, de, pr);        lista_Produtos.add(p);    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "removerProdutoDaLoja", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void removerProdutoDaLoja() {        Scanner s = new Scanner(System.in);        System.out.println(\"Insere o c\u00f3digo do Produto para que seja removido\");        int cod = s.nextInt();        for (Produto p : lista_Produtos) {            if (p.getCodigo() == cod) {                lista_Produtos.remove(p);                break;            }        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "gerirEncomendas", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void gerirEncomendas() {        Scanner s = new Scanner(System.in);        int op = 0;        while (op != 5) {            System.out.println(\"========================== Gest\u00e3o de Encomendas =============================\");            System.out.println(\"Escolhe uma op\u00e7\u00e3o\");            System.out.println(\"1 - Ver Encomendas\");            System.out.println(\"2 - Adicionar Encomenda\");            System.out.println(\"3 - Remover Encomenda\");            System.out.println(\"4 - Gerir uma Encomenda\");            System.out.println(\"5 - Voltar ao Menu Principal\");            op = s.nextInt();            switch (op) {                case 1: {                    if (!lista_Encomendas.isEmpty()) {                        for (Encomenda e : lista_Encomendas) {                            e.verEncomenda();                            //ver desconto da encomenda                            double total = e.totalEncomenda();                            System.out.println(\"O total da encomenda \u00e9 \" + total);                            double desconto = descontoEncomenda(e.getProdutos(), lista_Promocoes);                            System.out.println(\"O desconto \u00e9 \" + desconto);                            double totalComDesc = total - desconto;                            System.out.println(\"O total com desconto \u00e9 \" + totalComDesc);                            System.out.println(\"=============================================================================\");                        }                    } else {                        System.out.println(\"Lista vazia!!\");                    }                    break;                }                case 2: {                    adicionarEncomendaNaLoja();                    break;                }                case 3: {                    if (!lista_Encomendas.isEmpty()) {                        System.out.println(\"Insere o N\u00famero da Encomenda\");                        int numero = s.nextInt();                        removerEncomendaDaLoja(numero);                    } else {                        System.out.println(\"Lista vazia!!\");                    }                    break;                }                case 4: {                    if (!lista_Encomendas.isEmpty()) {                        System.out.println(\"Insere o N\u00famero da Encomenda\");                        int numero = s.nextInt();                        Encomenda e = obtemEncomenda(numero);                        gerir_Encomenda(e);                    } else {                        System.out.println(\"Lista vazia!!\");                    }                    break;                }            }        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "gerir_Encomenda", "params": ["Encomenda"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void gerir_Encomenda(Encomenda e1) {        if (e1 != null) {            Scanner s = new Scanner(System.in);            int op = 0;            while (op != 5) {                System.out.println(\"Escolhe uma op\u00e7\u00e3o\");                System.out.println(\"1 - Ver Encomenda\");                System.out.println(\"2 - Adicionar Produto\");                System.out.println(\"3 - Remover Produto\");                System.out.println(\"4 - Ver Total da Encomenda\");                System.out.println(\"5 - Voltar ao Menu Encomendas\");                op = s.nextInt();                switch (op) {                    case 1: {                        e1.verEncomenda();                        //ver desconto da encomenda                        double total = e1.totalEncomenda();                        System.out.println(\"O total da encomenda \u00e9 \" + total);                        double desconto = descontoEncomenda(e1.getProdutos(), lista_Promocoes);                        System.out.println(\"O desconto \u00e9 \" + desconto);                        double totalComDesc = total - desconto;                        System.out.println(\"O total com desconto \u00e9 \" + totalComDesc);                        break;                    }                    case 2: {                        System.out.println(\"Insere o c\u00f3digo do produto:\");                        int cod = s.nextInt();                        adicionarProdutoEncomenda(e1, cod);                        break;                    }                    case 3: {                        System.out.println(\"Insere o Codigo do produto a remover\");                        int c = s.nextInt();                        e1.removerProdutoEncomenda(c);                        break;                    }                    case 4: {                        System.out.println(\"O total da encomenda \u00e9 \" + e1.totalEncomenda());                        break;                    }                    case 5: {                        System.out.println(\"A sair da Encomenda.......\");                        break;                    }                    default: {                        System.out.println(\"Op\u00e7\u00e3o inv\u00e1lida!\");                    }                }            }        } else {            System.out.println(\"N\u00e3o existe encomenda com este numero\");        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "obtemEncomenda", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Encomenda", "snippet": "    public static Encomenda obtemEncomenda(int n) {        Encomenda e1 = null;        for (Encomenda e : lista_Encomendas) {            if (e.getNumero() == n) {                return e;            }        }        return e1;    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "adicionarProdutoEncomenda", "params": ["Encomenda", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void adicionarProdutoEncomenda(Encomenda e, int cod) {        Scanner s = new Scanner(System.in);        Produto pp = null;        for (Produto p : lista_Produtos) {            if (p.getCodigo() == cod) {                pp = p;                break;            }        }        if (pp != null) {            e.adicionarProduto(pp);        } else {            System.out.println(\"N\u00e3o existe produto com este c\u00f3digo\");        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "adicionarEncomendaNaLoja", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void adicionarEncomendaNaLoja() {        Scanner s = new Scanner(System.in);        System.out.println(\"Insere o Numero da encomenda\");        int numero = s.nextInt();        System.out.println(\"Insere o codigo do cliente\");        int cod_cliente = s.nextInt();        Encomenda e = new Encomenda(numero, new ArrayList<>(), cod_cliente);        gerir_Encomenda(e);    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "removerEncomendaDaLoja", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void removerEncomendaDaLoja(int numero) {        for (Encomenda e : lista_Encomendas) {            if (e.getNumero() == numero) {                lista_Encomendas.remove(e);                break;            }        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "gerirClientes", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void gerirClientes() {        Scanner s = new Scanner(System.in);        int op = 0;        while (op != 4) {            System.out.println(\"============================ Gest\u00e3o de Clientes =============================\");            System.out.println(\"Escolhe uma op\u00e7\u00e3o\");            System.out.println(\"1 - Ver Clientes\");            System.out.println(\"2 - Adicionar Cliente\");            System.out.println(\"3 - Remover Cliente\");            System.out.println(\"4 - Voltar ao Menu Principal\");            op = s.nextInt();            switch (op) {                case 1: {                    if (!lista_Clientes.isEmpty()) {                        System.out.println(\"\\n________________________________________________________________________________________\");                        System.out.println(\"|  CODIGO  |    NOME    |  TELEFONE  |               EMAIL              |    MORADA    |\");                        System.out.println(\"|----------+------------+------------+----------------------------------+--------------|\");                        for (Cliente c : lista_Clientes) {                            c.imprimir();                        }                        System.out.println(\"|======================================================================================|\\n\");                    } else {                        System.out.println(\"\\nLista vazia!!\");                    }                    break;                }                case 2: {                    adicionarClienteNaLoja();                    break;                }                case 3: {                    if (!lista_Clientes.isEmpty()) {                        removerClienteDaLoja();                    } else {                        System.out.println(\"Lista vazia!!\");                    }                    break;                }                default: {                    System.out.println(\"Op\u00e7\u00e3o inv\u00e1lida!\");                }            }        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "adicionarClienteNaLoja", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void adicionarClienteNaLoja() {        Scanner s = new Scanner(System.in);        System.out.println(\"Insere nome do Cliente\");        String no = s.next();        System.out.println(\"Insere o c\u00f3digo do Cliente\");        int co = s.nextInt();        System.out.println(\"Insere a morada do Cliente\");        String mo = s.next();        System.out.println(\"Insere o email do Cliente\");        String em = s.next();        System.out.println(\"Insere o telefone do Cliente\");        String tl = s.next();        Cliente c = new Cliente(co, no, em, mo, tl);        lista_Clientes.add(c);    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "removerClienteDaLoja", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void removerClienteDaLoja() {        Scanner s = new Scanner(System.in);        System.out.println(\"Insere o c\u00f3digo do Cliente para que seja removido\");        int cod = s.nextInt();        for (Cliente c : lista_Clientes) {            if (c.getCodigo() == cod) {                lista_Clientes.remove(c);                break;            }        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "gerirPromocoes", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void gerirPromocoes() {        Scanner s = new Scanner(System.in);        int op = 0;        while (op != 4) {            System.out.println(\"============================ Gest\u00e3o de Promo\u00e7\u00f5es =============================\");            System.out.println(\"Escolhe uma op\u00e7\u00e3o\");            System.out.println(\"1 - Ver Promo\u00e7\u00e3o\");            System.out.println(\"2 - Adicionar Promo\u00e7\u00e3o\");            System.out.println(\"3 - Remover Promo\u00e7\u00e3o\");            System.out.println(\"4 - Voltar ao Menu Principal\");            op = s.nextInt();            switch (op) {                case 1: {                    if (!lista_Promocoes.isEmpty()) {                        for (Promocao pm : lista_Promocoes) {                            pm.imprimir();                        }                    } else {                        System.out.println(\"Lista vazia!!\");                    }                    break;                }                case 2: {                    adicionarPromocaoNaLoja();                    break;                }                case 3: {                    if (!lista_Promocoes.isEmpty()) {                        removerPromocaoDaLoja();                    } else {                        System.out.println(\"Lista vazia!!\");                    }                    break;                }                default: {                    System.out.println(\"Op\u00e7\u00e3o inv\u00e1lida!\");                }            }        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "adicionarPromocaoNaLoja", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void adicionarPromocaoNaLoja() {        Scanner s = new Scanner(System.in);        System.out.println(\"Insere o c\u00f3digo do Produto\");        int co = s.nextInt();        System.out.println(\"Insere o valor de desconto\");        double de = s.nextDouble();        Promocao pm = new Promocao(co, de);        lista_Promocoes.add(pm);    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "removerPromocaoDaLoja", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void removerPromocaoDaLoja() {        Scanner s = new Scanner(System.in);        System.out.println(\"Insere o c\u00f3digo do Produto para que seja removido a promo\u00e7\u00e3o\");        int cod = s.nextInt();        for (Promocao pm : lista_Promocoes) {            if (pm.getCodigo_produto() == cod) {                lista_Promocoes.remove(pm);                break;            }        }    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "descontoEncomenda", "params": ["ArrayList<Produto>", "ArrayList<Promocao>"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double descontoEncomenda(ArrayList<Produto> lpe, ArrayList<Promocao> lpm) {        double totalDesc = 0;        for (Produto p : lpe) {            for (Promocao pm : lpm) {                if (p.getCodigo() == pm.getCodigo_produto()) {                    totalDesc += p.desconto(pm.getDesconto());                }            }        }        return totalDesc;    }", "url": "https://raw.githubusercontent.com/Denilson-Semedo/ExeLoja/master/src/exloja/ExLoja.java", "stars": "1", "class": {"name": "ExLoja", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getConnectionMatcher", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "BiPredicate<BlockState,BlockState>", "snippet": "\tpublic abstract BiPredicate<BlockState, BlockState> getConnectionMatcher();}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/config/ConnectingCTMConfig.java", "stars": "3", "class": {"name": "ConnectingCTMConfig", "extends": "BaseCTMConfig", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void init() {        if (Minecraft.getMinecraft().getResourceManager() instanceof SimpleReloadableResourceManager) {            ((SimpleReloadableResourceManager) Minecraft.getMinecraft().getResourceManager()).registerReloadListener(                    manager -> {                        ShaderHelper.deleteShader(MISTUNE_SHADER);                        MISTUNE_SHADER = 0;                        ShaderHelper.deleteShader(GAUSS_SHADER);                        GAUSS_SHADER = 0;                        load();                    }            );        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/ShaderLib.java", "stars": "2", "class": {"name": "ShaderLib", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void load() {        MISTUNE_SHADER = ShaderHelper.createProgram(FRAG_MISTUNE, null);        GAUSS_SHADER = ShaderHelper.createProgram(FRAG_GAUSS, null);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/ShaderLib.java", "stars": "2", "class": {"name": "ShaderLib", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLeft", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Padding", "snippet": "    public Padding setLeft(int left) {        this.left = left;        return this;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/utils/Padding.java", "stars": "15", "class": {"name": "Padding", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRight", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Padding", "snippet": "    public Padding setRight(int right) {        this.right = right;        return this;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/utils/Padding.java", "stars": "15", "class": {"name": "Padding", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTop", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Padding", "snippet": "    public Padding setTop(int top) {        this.top = top;        return this;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/utils/Padding.java", "stars": "15", "class": {"name": "Padding", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBottom", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Padding", "snippet": "    public Padding setBottom(int bottom) {        this.bottom = bottom;        return this;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/utils/Padding.java", "stars": "15", "class": {"name": "Padding", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(int id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getModelName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModelName() {        return modelName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setModelName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModelName(String modelName) {        this.modelName = modelName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSourceType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSourceType() {        return sourceType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSourceType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSourceType(String sourceType) {        this.sourceType = sourceType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTimeBegin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTimeBegin() {        return createTimeBegin;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTimeBegin", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTimeBegin(Date createTimeBegin) {        this.createTimeBegin = createTimeBegin;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTimeEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTimeEnd() {        return createTimeEnd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTimeEnd", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTimeEnd(Date createTimeEnd) {        this.createTimeEnd = createTimeEnd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCreateUser() {        if(StringUtils.isNotBlank(createOwner)){            return null;        }        return createUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateOwner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCreateOwner() {        return createOwner;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateOwner", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateOwner(String createOwner) {        this.createOwner = createOwner;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateUser(String createUser) {        this.createUser = createUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserDataAuth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "    public Set<String> getUserDataAuth() {        if(StringUtils.isNotBlank(createOwner)){            HashSet<String> dataAuthSet = new HashSet<>();            dataAuthSet.add(\"\");            dataAuthSet.add(createOwner);            return dataAuthSet;        }        return userDataAuth;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserDataAuth", "params": ["Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserDataAuth(Set<String> userDataAuth) {        this.userDataAuth = userDataAuth;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getModelExactName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModelExactName() {        return modelExactName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setModelExactName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModelExactName(String modelExactName) {        this.modelExactName = modelExactName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/query/DataSourceModelQuery.java", "stars": "23", "class": {"name": "DataSourceModelQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "upload", "params": ["MusicEntity", "String"], "throws": ["UploadFailedException"], "modifiers": ["public"], "return_type": "MusicEntity", "snippet": "\t@Override public MusicEntity upload(MusicEntity musicEntity, String authorizationToken)\t\t\tthrows UploadFailedException {\t\tUserAuthTokenEntity userAuthTokenEntity = musicDao.getUserAuthToken(authorizationToken);\t\tif (userAuthTokenEntity == null) {\t\t\tthrow new UploadFailedException(\"UP-001\", \"User is not Signed in, sign in to upload music\");\t\t}\t\tmusicEntity.setUser(userAuthTokenEntity.getUser());\t\treturn musicDao.createMusic(musicEntity);\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/MusicUploadServiceImpl.java", "stars": "2", "class": {"name": "MusicUploadServiceImpl", "extends": null, "implements": ["MusicUploadService"], "modifiers": ["public"]}}, {"method_name": "isValid", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isValid(String url) {\t\t/* Try creating a valid URL */\t\ttry {\t\t\tnew URL(url).toURI();\t\t\treturn true;\t\t}\t\t// If there was an Exception\t\t// while creating URL object\t\tcatch (Exception e) {\t\t\treturn false;\t\t}\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/MusicUploadServiceImpl.java", "stars": "2", "class": {"name": "MusicUploadServiceImpl", "extends": null, "implements": ["MusicUploadService"], "modifiers": ["public"]}}, {"method_name": "adapt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Commands", "snippet": "    public Commands adapt(String[] strings) {        Commands commands = new Commands();        if (strings.length != 0)            commands.setSection(Arrays.asList(strings));        return commands;    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/adapter/StringArrayToCommandsAdapter.java", "stars": "2", "class": {"name": "StringArrayToCommandsAdapter", "extends": null, "implements": ["ObjectAdapter"], "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "TestFragmentA", "snippet": "    public static TestFragmentA newInstance() {        return new TestFragmentA();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentA.java", "stars": "1", "class": {"name": "TestFragmentA", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout", "View"], "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.fragment_fortune;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentA.java", "stars": "1", "class": {"name": "TestFragmentA", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout", "View"], "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {//        // \u7ed9\u8fd9\u4e2a ToolBar \u8bbe\u7f6e\u9876\u90e8\u5185\u8fb9\u8ddd\uff0c\u624d\u80fd\u548c TitleBar \u8fdb\u884c\u5bf9\u9f50//        ImmersionBar.setTitleBar(getAttachActivity(), mToolbar);////        //\u8bbe\u7f6e\u6e10\u53d8\u76d1\u542c//        mCollapsingToolbarLayout.setOnScrimsListener(this);        mLLayoutFrance = findViewById(R.id.id_llayout_france);        mLLayoutDeal = findViewById(R.id.id_llayout_deal);        selectedTextColor = getResources().getColor(R.color.selectedTextColor);        unselectedTextColor = getResources().getColor(R.color.unselectedTextColor);        mIvFrance = findViewById(R.id.id_iv_france_arrow);        mIvDeal = findViewById(R.id.id_iv_deal_arrow);        rvRecord = findViewById(R.id.id_rv_record);        mTvChargeBit = findViewById(R.id.id_tv_charge_bit);        mTvGetBit = findViewById(R.id.id_tv_get_bit);        mLLayoutTransfer = findViewById(R.id.id_llayout_transfer);        List<String> mList = new ArrayList<String>();        mList.add(\"\u5145\u503c\");        mList.add(\"\u6cd5\u5e01\u8d26\u6237\u5212\u8f6c\u8d44\u91d1\u5230\u5408\u7ea6\u8d26\u6237\");        mList.add(\"\u5145\u503c\");        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());        rvRecord.setLayoutManager(layoutManager);        FortuneRecordAdapter adapter = new FortuneRecordAdapter(getActivity(), mList);        rvRecord.setAdapter(adapter);        mLLayoutFrance.setOnClickListener(this);        mLLayoutDeal.setOnClickListener(this);        mTvChargeBit.setOnClickListener(this);        mTvGetBit.setOnClickListener(this);        mLLayoutTransfer.setOnClickListener(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentA.java", "stars": "1", "class": {"name": "TestFragmentA", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout", "View"], "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentA.java", "stars": "1", "class": {"name": "TestFragmentA", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout", "View"], "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.id_llayout_france:                //\u6cd5\u5e01\u8d26\u6237                mLLayoutFrance.setBackgroundResource(R.drawable.selected_fortune_bg);                ((TextView) mLLayoutFrance.getChildAt(0)).setTextColor(selectedTextColor);                ((TextView) mLLayoutFrance.getChildAt(1)).setTextColor(selectedTextColor);                mLLayoutDeal.setBackgroundResource(R.drawable.unselected_fortune_bg);                ((TextView) mLLayoutDeal.getChildAt(0)).setTextColor(unselectedTextColor);                ((TextView) mLLayoutDeal.getChildAt(1)).setTextColor(unselectedTextColor);                mIvFrance.setVisibility(View.VISIBLE);                mIvDeal.setVisibility(View.INVISIBLE);                break;            case R.id.id_llayout_deal:                //\u5408\u7ea6\u8d26\u6237                mLLayoutFrance.setBackgroundResource(R.drawable.unselected_fortune_bg);                ((TextView) mLLayoutFrance.getChildAt(0)).setTextColor(unselectedTextColor);                ((TextView) mLLayoutFrance.getChildAt(1)).setTextColor(unselectedTextColor);                mLLayoutDeal.setBackgroundResource(R.drawable.selected_fortune_bg);                ((TextView) mLLayoutDeal.getChildAt(0)).setTextColor(selectedTextColor);                ((TextView) mLLayoutDeal.getChildAt(1)).setTextColor(selectedTextColor);                mIvFrance.setVisibility(View.INVISIBLE);                mIvDeal.setVisibility(View.VISIBLE);                break;            case R.id.id_tv_charge_bit:                //\u5145\u5e01                Intent intent = new Intent(getActivity(), ChargeBitActivity.class);                startActivity(intent);                break;            case R.id.id_tv_get_bit:                //\u63d0\u5e01                Intent intent2 = new Intent(getActivity(), GetBitActivity.class);                startActivity(intent2);                break;            case R.id.id_llayout_transfer:                //\u8d44\u4ea7\u5212\u8f6c                Intent intent3 = new Intent(getActivity(), TransferActivity.class);                startActivity(intent3);                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentA.java", "stars": "1", "class": {"name": "TestFragmentA", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout", "View"], "modifiers": ["public", "final"]}}, {"method_name": "isStatusBarEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isStatusBarEnabled() {        // \u4f7f\u7528\u6c89\u6d78\u5f0f\u72b6\u6001\u680f        return !super.isStatusBarEnabled();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentA.java", "stars": "1", "class": {"name": "TestFragmentA", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout", "View"], "modifiers": ["public", "final"]}}, {"method_name": "statusBarDarkFont", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean statusBarDarkFont() {//        return mCollapsingToolbarLayout.isScrimsShown();        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentA.java", "stars": "1", "class": {"name": "TestFragmentA", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout", "View"], "modifiers": ["public", "final"]}}, {"method_name": "onScrimsStateChange", "params": ["XCollapsingToolbarLayout", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onScrimsStateChange(XCollapsingToolbarLayout layout, boolean shown) {//        if (shown) {//            mAddressView.setTextColor(ContextCompat.getColor(getAttachActivity(), R.color.black));//            mHintView.setBackgroundResource(R.drawable.bg_home_search_bar_gray);//            mHintView.setTextColor(ContextCompat.getColor(getAttachActivity(), R.color.black60));//            mSearchView.setImageResource(R.drawable.ic_search_black);//            getStatusBarConfig().statusBarDarkFont(true).init();//        } else {//            mAddressView.setTextColor(ContextCompat.getColor(getAttachActivity(), R.color.white));//            mHintView.setBackgroundResource(R.drawable.bg_home_search_bar_transparent);//            mHintView.setTextColor(ContextCompat.getColor(getAttachActivity(), R.color.white60));//            mSearchView.setImageResource(R.drawable.ic_search_white);//            getStatusBarConfig().statusBarDarkFont(false).init();//        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentA.java", "stars": "1", "class": {"name": "TestFragmentA", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout", "View"], "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_charge_bit;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ChargeBitActivity.java", "stars": "1", "class": {"name": "ChargeBitActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        ImageView ivQR = findViewById(R.id.id_iv_qr);        Bitmap bitmap = QRCodeUtil.createQRCode(\"663536qeuu7463847hfoodjt733401\");        Drawable drawable = new BitmapDrawable(bitmap);        ivQR.setImageDrawable(drawable);        Spinner spinner = (Spinner) findViewById(R.id.spinner1);        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view,                                       int pos, long id) {                String[] chargeType = getResources().getStringArray(R.array.charge_type);                Toast.makeText(ChargeBitActivity.this, \"\u4f60\u70b9\u51fb\u7684\u662f:\"+chargeType[pos], Toast.LENGTH_SHORT).show();            }            @Override            public void onNothingSelected(AdapterView<?> parent) {                // Another interface callback            }        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ChargeBitActivity.java", "stars": "1", "class": {"name": "ChargeBitActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ChargeBitActivity.java", "stars": "1", "class": {"name": "ChargeBitActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_charge_bit);        ImageView ivQR = findViewById(R.id.id_iv_qr);        Bitmap bitmap = QRCodeUtil.createQRCode(\"663536qeuu7463847hfoodjt733401\");        Drawable drawable = new BitmapDrawable(bitmap);        ivQR.setImageDrawable(drawable);        Spinner spinner = (Spinner) findViewById(R.id.spinner1);        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view,                                       int pos, long id) {                String[] chargeType = getResources().getStringArray(R.array.charge_type);                Toast.makeText(ChargeBitActivity.this, \"\u4f60\u70b9\u51fb\u7684\u662f:\"+chargeType[pos], Toast.LENGTH_SHORT).show();            }            @Override            public void onNothingSelected(AdapterView<?> parent) {                // Another interface callback            }        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ChargeBitActivity.java", "stars": "1", "class": {"name": "ChargeBitActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPeople", "params": ["String", "String", "Integer", "Integer", "Integer", "Integer", "Boolean"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ArrayList<Person>", "snippet": "\tpublic ArrayList<Person> getPeople(String name, String profession, Integer minBirthYear, Integer maxBirthYear,\t\t\tInteger minDeathYear, Integer maxDeathYear, Boolean unique) throws SQLException {\t\tArrayList<Person> return_val = new ArrayList<Person>();\t\tif (name == null)\t\t\treturn return_val;\t\tname = name.trim();\t\tif (name.equalsIgnoreCase(\"\"))\t\t\treturn return_val;\t\t// Add extra filters to query if applicable\t\tString extraFilters = \"\";\t\textraFilters += (profession == null) ? \"\" : \" AND LOWER(professions) like ?\";\t\textraFilters += (minBirthYear == null) ? \"\" : \" AND birthYear >= ?\";\t\textraFilters += (maxBirthYear == null) ? \"\" : \" AND birthYear <= ?\";\t\textraFilters += (minDeathYear == null) ? \"\" : \" AND deathYear >= ?\";\t\textraFilters += (maxDeathYear == null) ? \"\" : \" AND deathYear <= ?\";\t\tif (unique) {\t\t\textraFilters += \" limit 1\";\t\t}\t\ttry {\t\t\t// Create a prepared statement object\t\t\tPreparedStatement stmt = conn.prepareStatement(\"SELECT * FROM People where LOWER(name) = ?\" + extraFilters);\t\t\t// Fill in information including any applicable filters\t\t\tInteger currentIndex = 1;\t\t\tstmt.setString(currentIndex++, name.toLowerCase());\t\t\tif (profession != null)\t\t\t\tstmt.setString(currentIndex++, \"%\" + profession.toLowerCase() + \"%\");\t\t\tif (minBirthYear != null)\t\t\t\tstmt.setInt(currentIndex++, minBirthYear);\t\t\tif (maxBirthYear != null)\t\t\t\tstmt.setInt(currentIndex++, maxBirthYear);\t\t\tif (minDeathYear != null)\t\t\t\tstmt.setInt(currentIndex++, minDeathYear);\t\t\tif (maxDeathYear != null)\t\t\t\tstmt.setInt(currentIndex++, maxDeathYear);\t\t\t// Send statement to DBMS\t\t\tResultSet result = stmt.executeQuery();\t\t\t// Collect output\t\t\twhile (result.next()) {\t\t\t\tString[] professions = null;\t\t\t\tif (result.getString(\"professions\") != null)\t\t\t\t\tprofessions = result.getString(\"professions\").split(\",\");\t\t\t\tString[] knownFor = null;\t\t\t\tif (result.getString(\"knownFor\") != null)\t\t\t\t\tknownFor = result.getString(\"knownFor\").split(\",\");\t\t\t\treturn_val.add(new Person(result.getString(\"personID\"), result.getString(\"name\"),\t\t\t\t\t\tresult.getInt(\"birthYear\"), result.getInt(\"deathYear\"), professions, knownFor));\t\t\t}\t\t} catch (SQLException e) {\t\t\tthrow e;\t\t}\t\treturn return_val;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/dao/impl/PersonDaoImpl.java", "stars": "1", "class": {"name": "PersonDaoImpl", "extends": null, "implements": ["PersonDao"], "modifiers": ["public"]}}, {"method_name": "getPersonByID", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Person", "snippet": "\tpublic Person getPersonByID(String ID) throws SQLException {\t\tPerson return_val = null;\t\ttry {\t\t\t// Create a prepared statement object\t\t\tPreparedStatement stmt = conn.prepareStatement(\"SELECT * FROM People where personID = ? LIMIT 1\");\t\t\t// Fill in information\t\t\tstmt.setString(1, ID);\t\t\t// Send statement to DBMS\t\t\tResultSet result = stmt.executeQuery();\t\t\t// Collect output\t\t\tif (result.next()) {\t\t\t\tString[] professions = null;\t\t\t\tif (result.getString(\"professions\") != null)\t\t\t\t\tprofessions = result.getString(\"professions\").split(\",\");\t\t\t\tString[] knownFor = null;\t\t\t\tif (result.getString(\"knownFor\") != null)\t\t\t\t\tknownFor = result.getString(\"knownFor\").split(\",\");\t\t\t\treturn_val = new Person(result.getString(\"personID\"), result.getString(\"name\"),\t\t\t\t\t\tresult.getInt(\"birthYear\"), result.getInt(\"deathYear\"), professions, knownFor);\t\t\t}\t\t} catch (SQLException e) {\t\t\tthrow e;\t\t}\t\treturn return_val;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/dao/impl/PersonDaoImpl.java", "stars": "1", "class": {"name": "PersonDaoImpl", "extends": null, "implements": ["PersonDao"], "modifiers": ["public"]}}, {"method_name": "getAllJobs", "params": ["Person", "String", "String", "String", "Integer", "Integer", "Integer", "Integer", "Integer", "Integer", "Double", "Double", "Boolean", "String", "String", "Boolean"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ArrayList<Job>", "snippet": "\tpublic ArrayList<Job> getAllJobs(Person person, String title, String type, String genre, Integer minStartYear,\t\t\tInteger maxStartYear, Integer minEndYear, Integer maxEndYear, Integer minRuntime, Integer maxRuntime,\t\t\tDouble minRating, Double maxRating, Boolean adult, String job, String character, Boolean unique) throws SQLException {\t\tArrayList<Job> jobs = new ArrayList<Job>();\t\t// Add extra filters to query if applicable\t\tString extraFilters = \"\";\t\textraFilters += (title == null) ? \"\" : \" AND LOWER(t.title) = ?\";\t\textraFilters += (type == null) ? \"\" : \" AND LOWER(t.type) = ?\";\t\textraFilters += (genre == null) ? \"\" : \" AND LOWER(t.genres) like ?\";\t\textraFilters += (minStartYear == null) ? \"\" : \" AND t.startYear >= ?\";\t\textraFilters += (maxStartYear == null) ? \"\" : \" AND t.startYear <= ?\";\t\textraFilters += (minEndYear == null) ? \"\" : \" AND t.endYear >= ?\";\t\textraFilters += (maxEndYear == null) ? \"\" : \" AND t.endYear <= ?\";\t\textraFilters += (minRuntime == null) ? \"\" : \" AND t.runtime >= ?\";\t\textraFilters += (maxRuntime == null) ? \"\" : \" AND t.runtime <= ?\";\t\textraFilters += (minRating == null) ? \"\" : \" AND t.rating >= ?\";\t\textraFilters += (maxRating == null) ? \"\" : \" AND t.rating <= ?\";\t\textraFilters += (job == null) ? \"\" : \" AND LOWER(j.category) = ?\";\t\textraFilters += (character == null) ? \"\" : \" AND LOWER(j.characters) like ?\";\t\tif (adult != null) {\t\t\tif (adult) {\t\t\t\textraFilters += \" AND t.adult IS true\";\t\t\t} else {\t\t\t\textraFilters += \" AND t.adult IS false\";\t\t\t}\t\t}\t\t\t\tif (unique) {\t\t\textraFilters += \" LIMIT 1\";\t\t}\t\ttry {\t\t\t// Create a prepared statement object\t\t\tPreparedStatement stmt = conn.prepareStatement(\t\t\t\t\t\"SELECT * FROM Jobs j, Titles t WHERE t.titleID = j.titleID AND t.type <> 'tvEpisode' AND j.personID = ?\"\t\t\t\t\t\t\t+ extraFilters);\t\t\tInteger currentIndex = 1;\t\t\t// Fill in information\t\t\tstmt.setString(currentIndex++, person.getPersonID());\t\t\tif (title != null)\t\t\t\tstmt.setString(currentIndex++, title.toLowerCase());\t\t\tif (type != null)\t\t\t\tstmt.setString(currentIndex++, type.toLowerCase().replaceAll(\" \", \"\"));\t\t\tif (genre != null)\t\t\t\tstmt.setString(currentIndex++, \"%\" + genre.toLowerCase() + \"%\");\t\t\tif (minStartYear != null)\t\t\t\tstmt.setInt(currentIndex++, minStartYear);\t\t\tif (maxStartYear != null)\t\t\t\tstmt.setInt(currentIndex++, maxStartYear);\t\t\tif (minEndYear != null)\t\t\t\tstmt.setInt(currentIndex++, minEndYear);\t\t\tif (maxEndYear != null)\t\t\t\tstmt.setInt(currentIndex++, maxEndYear);\t\t\tif (minRuntime != null)\t\t\t\tstmt.setInt(currentIndex++, minRuntime);\t\t\tif (maxRuntime != null)\t\t\t\tstmt.setInt(currentIndex++, maxRuntime);\t\t\tif (minRating != null)\t\t\t\tstmt.setDouble(currentIndex++, minRating);\t\t\tif (maxRating != null)\t\t\t\tstmt.setDouble(currentIndex++, maxRating);\t\t\tif (job != null)\t\t\t\tstmt.setString(currentIndex++, job.toLowerCase());\t\t\tif (character != null)\t\t\t\tstmt.setString(currentIndex++, \"%\" + character.toLowerCase() + \"%\");\t\t\t// Send statement to DBMS\t\t\tResultSet result = stmt.executeQuery();\t\t\t// Collect output\t\t\tTitleDao tDao = new TitleDaoImpl(conn);\t\t\twhile (result.next()) {\t\t\t\tString[] characters = null;\t\t\t\tif (result.getString(\"characters\") != null) {\t\t\t\t\tcharacters = result.getString(\"characters\").split(\"\\\",\\\"\");\t\t\t\t\tfor (Integer i = 0; i < characters.length; i++) {\t\t\t\t\t\tcharacters[i] = characters[i].replaceAll(\"[\\\"\\\\[\\\\]]\", \"\");\t\t\t\t\t}\t\t\t\t}\t\t\t\tjobs.add(new Job(tDao.getTitleByID(result.getString(\"titleID\")), person, result.getString(\"category\"),\t\t\t\t\t\tresult.getString(\"job\"), characters));\t\t\t}\t\t} catch (SQLException e) {\t\t\tthrow e;\t\t}\t\treturn jobs;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/dao/impl/PersonDaoImpl.java", "stars": "1", "class": {"name": "PersonDaoImpl", "extends": null, "implements": ["PersonDao"], "modifiers": ["public"]}}, {"method_name": "getJobs", "params": ["Person", "Title"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ArrayList<Job>", "snippet": "\tpublic ArrayList<Job> getJobs(Person person, Title title) throws SQLException {\t\tArrayList<Job> jobs = new ArrayList<Job>();\t\ttry {\t\t\t// Create a prepared statement object\t\t\tPreparedStatement stmt = conn.prepareStatement(\"SELECT * FROM Jobs WHERE personID = ? AND titleID = ?\");\t\t\t// Fill in information\t\t\tstmt.setString(1, person.getPersonID());\t\t\tstmt.setString(2, title.getTitleID());\t\t\t// Send statement to DBMS\t\t\tResultSet result = stmt.executeQuery();\t\t\t// Collect output\t\t\twhile (result.next()) {\t\t\t\tString[] characters = null;\t\t\t\tif (result.getString(\"characters\") != null) {\t\t\t\t\tcharacters = result.getString(\"characters\").split(\"\\\",\\\"\");\t\t\t\t\tfor (Integer i = 0; i < characters.length; i++) {\t\t\t\t\t\tcharacters[i] = characters[i].replaceAll(\"[\\\"\\\\[\\\\]]\", \"\");\t\t\t\t\t}\t\t\t\t}\t\t\t\tjobs.add(new Job(title, person, result.getString(\"category\"), result.getString(\"job\"), characters));\t\t\t}\t\t} catch (SQLException e) {\t\t\tthrow e;\t\t}\t\treturn jobs;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/dao/impl/PersonDaoImpl.java", "stars": "1", "class": {"name": "PersonDaoImpl", "extends": null, "implements": ["PersonDao"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettsBlock.java", "stars": "2", "class": {"name": "SettsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getAuthCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult", "snippet": "    public CommonResult getAuthCode(@RequestParam String telephone) {        return memberService.generateAuthCode(telephone);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/controller/UmsMemberController.java", "stars": "2", "class": {"name": "UmsMemberController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updatePassword", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult", "snippet": "    public CommonResult updatePassword(@RequestParam String telephone,                                 @RequestParam String authCode) {        return memberService.verifyAuthCode(telephone,authCode);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/controller/UmsMemberController.java", "stars": "2", "class": {"name": "UmsMemberController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listAllBrand", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<PmsBrand>", "snippet": "    public List<PmsBrand> listAllBrand() {        return brandMapper.selectByExample(new PmsBrandExample());    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/service/impl/PmsBrandServiceImpl.java", "stars": "2", "class": {"name": "PmsBrandServiceImpl", "extends": null, "implements": ["PmsBrandService"], "modifiers": ["public"]}}, {"method_name": "createBrand", "params": ["PmsBrand"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int createBrand(PmsBrand brand) {        return brandMapper.insertSelective(brand);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/service/impl/PmsBrandServiceImpl.java", "stars": "2", "class": {"name": "PmsBrandServiceImpl", "extends": null, "implements": ["PmsBrandService"], "modifiers": ["public"]}}, {"method_name": "updateBrand", "params": ["Long", "PmsBrand"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateBrand(Long id, PmsBrand brand) {        brand.setId(id);        return brandMapper.updateByPrimaryKeySelective(brand);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/service/impl/PmsBrandServiceImpl.java", "stars": "2", "class": {"name": "PmsBrandServiceImpl", "extends": null, "implements": ["PmsBrandService"], "modifiers": ["public"]}}, {"method_name": "deleteBrand", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int deleteBrand(Long id) {        return brandMapper.deleteByPrimaryKey(id);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/service/impl/PmsBrandServiceImpl.java", "stars": "2", "class": {"name": "PmsBrandServiceImpl", "extends": null, "implements": ["PmsBrandService"], "modifiers": ["public"]}}, {"method_name": "listBrand", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<PmsBrand>", "snippet": "    public List<PmsBrand> listBrand(int pageNum, int pageSize) {        PageHelper.startPage(pageNum, pageSize);        return brandMapper.selectByExample(new PmsBrandExample());    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/service/impl/PmsBrandServiceImpl.java", "stars": "2", "class": {"name": "PmsBrandServiceImpl", "extends": null, "implements": ["PmsBrandService"], "modifiers": ["public"]}}, {"method_name": "getBrand", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "PmsBrand", "snippet": "    public PmsBrand getBrand(Long id) {        return brandMapper.selectByPrimaryKey(id);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/service/impl/PmsBrandServiceImpl.java", "stars": "2", "class": {"name": "PmsBrandServiceImpl", "extends": null, "implements": ["PmsBrandService"], "modifiers": ["public"]}}, {"method_name": "getReportCommunication", "params": ["Communication", "Communication", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Communication", "snippet": "    public static Communication getReportCommunication(Communication now, Communication old, int totalStage) {        Validate.isTrue(now != null && old != null,                \"\u4e3a\u6c47\u62a5\u51c6\u5907\u7684\u65b0\u65e7metric\u4e0d\u80fd\u4e3anull\");        long totalReadRecords = getTotalReadRecords(now);        long totalReadBytes = getTotalReadBytes(now);        now.setLongCounter(TOTAL_READ_RECORDS, totalReadRecords);        now.setLongCounter(TOTAL_READ_BYTES, totalReadBytes);        now.setLongCounter(TOTAL_ERROR_RECORDS, getTotalErrorRecords(now));        now.setLongCounter(TOTAL_ERROR_BYTES, getTotalErrorBytes(now));        now.setLongCounter(WRITE_SUCCEED_RECORDS, getWriteSucceedRecords(now));        now.setLongCounter(WRITE_SUCCEED_BYTES, getWriteSucceedBytes(now));        long timeInterval = now.getTimestamp() - old.getTimestamp();        long sec = timeInterval <= 1000 ? 1 : timeInterval / 1000;        long bytesSpeed = (totalReadBytes                - getTotalReadBytes(old)) / sec;        long recordsSpeed = (totalReadRecords                - getTotalReadRecords(old)) / sec;        now.setLongCounter(BYTE_SPEED, bytesSpeed < 0 ? 0 : bytesSpeed);        now.setLongCounter(RECORD_SPEED, recordsSpeed < 0 ? 0 : recordsSpeed);        now.setDoubleCounter(PERCENTAGE, now.getLongCounter(STAGE) / (double) totalStage);        if (old.getThrowable() != null) {            now.setThrowable(old.getThrowable());        }        return now;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "CommunicationTool", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getTotalReadRecords", "params": ["Communication"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getTotalReadRecords(final Communication communication) {        return communication.getLongCounter(READ_SUCCEED_RECORDS) +                communication.getLongCounter(READ_FAILED_RECORDS);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "CommunicationTool", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getTotalReadBytes", "params": ["Communication"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getTotalReadBytes(final Communication communication) {        return communication.getLongCounter(READ_SUCCEED_BYTES) +                communication.getLongCounter(READ_FAILED_BYTES);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "CommunicationTool", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getTotalErrorRecords", "params": ["Communication"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getTotalErrorRecords(final Communication communication) {        return communication.getLongCounter(READ_FAILED_RECORDS) +                communication.getLongCounter(WRITE_FAILED_RECORDS);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "CommunicationTool", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getTotalErrorBytes", "params": ["Communication"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getTotalErrorBytes(final Communication communication) {        return communication.getLongCounter(READ_FAILED_BYTES) +                communication.getLongCounter(WRITE_FAILED_BYTES);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "CommunicationTool", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getWriteSucceedRecords", "params": ["Communication"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getWriteSucceedRecords(final Communication communication) {        return communication.getLongCounter(WRITE_RECEIVED_RECORDS) -                communication.getLongCounter(WRITE_FAILED_RECORDS);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "CommunicationTool", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getWriteSucceedBytes", "params": ["Communication"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getWriteSucceedBytes(final Communication communication) {        return communication.getLongCounter(WRITE_RECEIVED_BYTES) -                communication.getLongCounter(WRITE_FAILED_BYTES);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "CommunicationTool", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getSnapshot", "params": ["Communication"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "        public static String getSnapshot(final Communication communication) {            StringBuilder sb = new StringBuilder();            sb.append(\"Total \");            sb.append(getTotal(communication));            sb.append(\" | \");            sb.append(\"Speed \");            sb.append(getSpeed(communication));            sb.append(\" | \");            sb.append(\"Error \");            sb.append(getError(communication));            sb.append(\" | \");            sb.append(\" All task WaitWriterTime \");            sb.append(PerfTrace.unitTime(communication.getLongCounter(WAIT_WRITER_TIME)));            sb.append(\" | \");            sb.append(\" All task WaitReaderTime \");            sb.append(PerfTrace.unitTime(communication.getLongCounter(WAIT_READER_TIME)));            sb.append(\" | \");            if (communication.getLongCounter(CommunicationTool.TRANSFORMER_USED_TIME) > 0                    || communication.getLongCounter(CommunicationTool.TRANSFORMER_SUCCEED_RECORDS) > 0                    || communication.getLongCounter(CommunicationTool.TRANSFORMER_FAILED_RECORDS) > 0                    || communication.getLongCounter(CommunicationTool.TRANSFORMER_FILTER_RECORDS) > 0) {                sb.append(\"Transfermor Success \");                sb.append(String.format(\"%d records\", communication.getLongCounter(CommunicationTool.TRANSFORMER_SUCCEED_RECORDS)));                sb.append(\" | \");                sb.append(\"Transformer Error \");                sb.append(String.format(\"%d records\", communication.getLongCounter(CommunicationTool.TRANSFORMER_FAILED_RECORDS)));                sb.append(\" | \");                sb.append(\"Transformer Filter \");                sb.append(String.format(\"%d records\", communication.getLongCounter(CommunicationTool.TRANSFORMER_FILTER_RECORDS)));                sb.append(\" | \");                sb.append(\"Transformer usedTime \");                sb.append(PerfTrace.unitTime(communication.getLongCounter(CommunicationTool.TRANSFORMER_USED_TIME)));                sb.append(\" | \");            }            sb.append(\"Percentage \");            sb.append(getPercentage(communication));            return sb.toString();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Stringify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTotal", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "        private static String getTotal(final Communication communication) {            return String.format(\"%d records, %d bytes\",                    communication.getLongCounter(TOTAL_READ_RECORDS),                    communication.getLongCounter(TOTAL_READ_BYTES));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Stringify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSpeed", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "        private static String getSpeed(final Communication communication) {            return String.format(\"%s/s, %d records/s\",                    StrUtil.stringify(communication.getLongCounter(BYTE_SPEED)),                    communication.getLongCounter(RECORD_SPEED));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Stringify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getError", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "        private static String getError(final Communication communication) {            return String.format(\"%d records, %d bytes\",                    communication.getLongCounter(TOTAL_ERROR_RECORDS),                    communication.getLongCounter(TOTAL_ERROR_BYTES));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Stringify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPercentage", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "        private static String getPercentage(final Communication communication) {            return df.format(communication.getDoubleCounter(PERCENTAGE) * 100) + \"%\";        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Stringify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSnapshot", "params": ["Communication"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "        public static String getSnapshot(Communication communication) {            Validate.notNull(communication);            Map<String, Object> state = new HashMap<String, Object>();            Pair pair = getTotalBytes(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getTotalRecords(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getSpeedRecord(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getSpeedByte(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getStage(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getErrorRecords(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getErrorBytes(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getErrorMessage(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getPercentage(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getWaitReaderTime(communication);            state.put((String) pair.getKey(), pair.getValue());            pair = getWaitWriterTime(communication);            state.put((String) pair.getKey(), pair.getValue());            return JSON.toJSONString(state);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTotalBytes", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Long>", "snippet": "        private static Pair<String, Long> getTotalBytes(final Communication communication) {            return new Pair<String, Long>(\"totalBytes\", communication.getLongCounter(TOTAL_READ_BYTES));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTotalRecords", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Long>", "snippet": "        private static Pair<String, Long> getTotalRecords(final Communication communication) {            return new Pair<String, Long>(\"totalRecords\", communication.getLongCounter(TOTAL_READ_RECORDS));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSpeedByte", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Long>", "snippet": "        private static Pair<String, Long> getSpeedByte(final Communication communication) {            return new Pair<String, Long>(\"speedBytes\", communication.getLongCounter(BYTE_SPEED));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSpeedRecord", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Long>", "snippet": "        private static Pair<String, Long> getSpeedRecord(final Communication communication) {            return new Pair<String, Long>(\"speedRecords\", communication.getLongCounter(RECORD_SPEED));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getErrorRecords", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Long>", "snippet": "        private static Pair<String, Long> getErrorRecords(final Communication communication) {            return new Pair<String, Long>(\"errorRecords\", communication.getLongCounter(TOTAL_ERROR_RECORDS));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getErrorBytes", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Long>", "snippet": "        private static Pair<String, Long> getErrorBytes(final Communication communication) {            return new Pair<String, Long>(\"errorBytes\", communication.getLongCounter(TOTAL_ERROR_BYTES));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getStage", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Long>", "snippet": "        private static Pair<String, Long> getStage(final Communication communication) {            return new Pair<String, Long>(\"stage\", communication.getLongCounter(STAGE));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPercentage", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Double>", "snippet": "        private static Pair<String, Double> getPercentage(final Communication communication) {            return new Pair<String, Double>(\"percentage\", communication.getDoubleCounter(PERCENTAGE));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getErrorMessage", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,String>", "snippet": "        private static Pair<String, String> getErrorMessage(final Communication communication) {            return new Pair<String, String>(\"errorMessage\", communication.getThrowableMessage());        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getWaitReaderTime", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Long>", "snippet": "        private static Pair<String, Long> getWaitReaderTime(final Communication communication) {            return new Pair<String, Long>(\"waitReaderTime\", communication.getLongCounter(CommunicationTool.WAIT_READER_TIME));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getWaitWriterTime", "params": ["Communication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<String,Long>", "snippet": "        private static Pair<String, Long> getWaitWriterTime(final Communication communication) {            return new Pair<String, Long>(\"waitWriterTime\", communication.getLongCounter(CommunicationTool.WAIT_WRITER_TIME));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Jsonify", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "K", "snippet": "            public K getKey() {                return key;            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Pair", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "V", "snippet": "            public V getValue() {                return value;            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/CommunicationTool.java", "stars": "23", "class": {"name": "Pair", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "create", "params": ["Connection", "String", "Exception"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String create(Connection connection, String taskId, Exception e) {        try (PreparedStatement ps = connection.prepareStatement(INSERT_INCIDENT)) {            String id = UUID.randomUUID().toString();            ps.setString(1, id);            ps.setString(2, e.getMessage());            ps.setString(3, e.getStackTrace().toString());            ps.setString(4, taskId);            ps.setTimestamp(5, Timestamp.valueOf(systemClock.now()));            ps.setTimestamp(6, Timestamp.valueOf(systemClock.now()));            int insertedRows = ps.executeUpdate();            if (insertedRows != 1) {                throw new RuntimeException(\"Insertion failure\");            }            return id;        } catch (SQLException sqlException) {            throw new RuntimeException(sqlException);        }    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/Incidents.java", "stars": "2", "class": {"name": "Incidents", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildTransformerInfo", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<TransformerExecution>", "snippet": "    public static List<TransformerExecution> buildTransformerInfo(Configuration taskConfig) {        List<Configuration> tfConfigs = taskConfig.getListConfiguration(CoreConstant.JOB_TRANSFORMER);        if (tfConfigs == null || tfConfigs.size() == 0) {            return null;        }        List<TransformerExecution> result = new ArrayList<TransformerExecution>();        List<String> functionNames = new ArrayList<String>();        for (Configuration configuration : tfConfigs) {            String functionName = configuration.getString(\"name\");            if (StringUtils.isEmpty(functionName)) {                throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_CONFIGURATION_ERROR, \"config=\" + configuration.toJSON());            }            if (functionName.equals(\"dx_groovy\") && functionNames.contains(\"dx_groovy\")) {                throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_CONFIGURATION_ERROR, \"dx_groovy can be invoke once only.\");            }            functionNames.add(functionName);        }        /**         * \u5ef6\u8fdfload \u7b2c\u4e09\u65b9\u63d2\u4ef6\u7684function\uff0c\u5e76\u6309\u9700load         */        LOG.info(String.format(\" user config tranformers [%s], loading...\", functionNames));        TransformerRegistry.loadTransformerFromLocalStorage(functionNames);        int i = 0;        for (Configuration configuration : tfConfigs) {            String functionName = configuration.getString(\"name\");            TransformerInfo transformerInfo = TransformerRegistry.getTransformer(functionName);            if (transformerInfo == null) {                throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_NOTFOUND_ERROR, \"name=\" + functionName);            }            /**             * \u5177\u4f53\u7684UDF\u5bf9\u5e94\u4e00\u4e2aparas             */            TransformerExecutionParas transformerExecutionParas = new TransformerExecutionParas();            /**             * groovy function\u4ec5\u4ec5\u53ea\u6709code             */            if (!functionName.equals(\"dx_groovy\") && !functionName.equals(\"dx_fackGroovy\")) {                Integer columnIndex = configuration.getInt(CoreConstant.TRANSFORMER_PARAMETER_COLUMNINDEX);                if (columnIndex == null) {                    throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_ILLEGAL_PARAMETER, \"columnIndex must be set by UDF:name=\" + functionName);                }                transformerExecutionParas.setColumnIndex(columnIndex);                List<String> paras = configuration.getList(CoreConstant.TRANSFORMER_PARAMETER_PARAS, String.class);                if (paras != null && paras.size() > 0) {                    transformerExecutionParas.setParas(paras.toArray(new String[0]));                }            } else {                String code = configuration.getString(CoreConstant.TRANSFORMER_PARAMETER_CODE);                if (StringUtils.isEmpty(code)) {                    throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_ILLEGAL_PARAMETER, \"groovy code must be set by UDF:name=\" + functionName);                }                transformerExecutionParas.setCode(code);                List<String> extraPackage = configuration.getList(CoreConstant.TRANSFORMER_PARAMETER_EXTRAPACKAGE, String.class);                if (extraPackage != null && extraPackage.size() > 0) {                    transformerExecutionParas.setExtraPackage(extraPackage);                }            }            transformerExecutionParas.settContext(configuration.getMap(CoreConstant.TRANSFORMER_PARAMETER_CONTEXT));            TransformerExecution transformerExecution = new TransformerExecution(transformerInfo, transformerExecutionParas);            transformerExecution.genFinalParas();            result.add(transformerExecution);            i++;            LOG.info(String.format(\" %s of transformer init success. name=%s, isNative=%s parameter = %s\"                    , i, transformerInfo.getTransformer().getTransformerName()                    , transformerInfo.isNative(), configuration.getConfiguration(\"parameter\")));        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/TransformerUtil.java", "stars": "23", "class": {"name": "TransformerUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": ["JPanel", "JButton", "JButton"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup(@NotNull final JPanel contentPane,               @NotNull final JButton buttonOK,               @NotNull final JButton buttonCancel) {        this.contentPane = contentPane;        this.buttonOK = buttonOK;        this.buttonCancel = buttonCancel;        setContentPane(contentPane);        setModal(true);        getRootPane().setDefaultButton(buttonOK);        buttonOK.addActionListener(e -> onOK());        buttonCancel.addActionListener(e -> onCancel());        // call onCancel() when cross is clicked        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);        addWindowListener(new WindowAdapter() {            public void windowClosing(WindowEvent e) {                onCancel();            }        });        // call onCancel() on ESCAPE        contentPane.registerKeyboardAction(e -> onCancel(),                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT        );        setSize(300, 200);        setLocationRelativeTo(null);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/Dlg.java", "stars": "2", "class": {"name": "Dlg", "extends": "JDialog", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onOK", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onOK() {        ok = true;        setVisible(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/Dlg.java", "stars": "2", "class": {"name": "Dlg", "extends": "JDialog", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCancel", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCancel() {        ok = false;        setVisible(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/Dlg.java", "stars": "2", "class": {"name": "Dlg", "extends": "JDialog", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createData", "params": [], "throws": ["Exception"], "modifiers": ["public", "abstract"], "return_type": "AnyData", "snippet": "    public abstract AnyData createData() throws Exception;    public void setEditable(boolean editable) {        buttonOK.setVisible(editable);        if (editable)            buttonCancel.setText(\"Cancel\");        else            buttonCancel.setText(\"Exit\");        for (Component component : contentPane.getComponents())            component.setEnabled(editable);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/Dlg.java", "stars": "2", "class": {"name": "Dlg", "extends": "JDialog", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setEditable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEditable(boolean editable) {        buttonOK.setVisible(editable);        if (editable)            buttonCancel.setText(\"Cancel\");        else            buttonCancel.setText(\"Exit\");        for (Component component : contentPane.getComponents())            component.setEnabled(editable);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/Dlg.java", "stars": "2", "class": {"name": "Dlg", "extends": "JDialog", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isOk", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isOk() {        return ok;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/Dlg.java", "stars": "2", "class": {"name": "Dlg", "extends": "JDialog", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDetachedFromWindow ();\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onDrawerClosed (android.view.View p0)\t{\t\tn_onDrawerClosed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerClosed (android.view.View p0)\t{\t\tn_onDrawerClosed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerClosed (android.view.View p0);\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerOpened (android.view.View p0);\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerSlide (android.view.View p0, float p1);\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerStateChanged (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailPageRenderer.java", "stars": "2", "class": {"name": "MasterDetailPageRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessage(String message) {        this.message = message;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/observer/WeChatSubscription.java", "stars": "2", "class": {"name": "WeChatSubscription", "extends": null, "implements": ["Observerable"], "modifiers": ["public"]}}, {"method_name": "addObserver", "params": ["Observer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addObserver(Observer o) {        list.add(o);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/observer/WeChatSubscription.java", "stars": "2", "class": {"name": "WeChatSubscription", "extends": null, "implements": ["Observerable"], "modifiers": ["public"]}}, {"method_name": "delObserver", "params": ["Observer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void delObserver(Observer o) {        if (!list.isEmpty()) {            list.remove(o);        }    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/observer/WeChatSubscription.java", "stars": "2", "class": {"name": "WeChatSubscription", "extends": null, "implements": ["Observerable"], "modifiers": ["public"]}}, {"method_name": "notifyObserver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void notifyObserver() {        for(int i = 0; i < list.size(); i++) {            Observer observer = list.get(i);            observer.update(message);        }    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/observer/WeChatSubscription.java", "stars": "2", "class": {"name": "WeChatSubscription", "extends": null, "implements": ["Observerable"], "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "byte", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, byte[] parameter, JdbcType jdbcType)      throws SQLException {    ps.setBytes(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteArrayTypeHandler.java", "stars": "15", "class": {"name": "ByteArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "byte", "snippet": "  public byte[] getNullableResult(ResultSet rs, String columnName)      throws SQLException {    return rs.getBytes(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteArrayTypeHandler.java", "stars": "15", "class": {"name": "ByteArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "byte", "snippet": "  public byte[] getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    return rs.getBytes(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteArrayTypeHandler.java", "stars": "15", "class": {"name": "ByteArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "byte", "snippet": "  public byte[] getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    return cs.getBytes(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteArrayTypeHandler.java", "stars": "15", "class": {"name": "ByteArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBoundSql", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "BoundSql", "snippet": "  public BoundSql getBoundSql(Object parameterObject) {    SqlSource sqlSource = createSqlSource(parameterObject);    return sqlSource.getBoundSql(parameterObject);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java", "stars": "15", "class": {"name": "ProviderSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "createSqlSource", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "SqlSource", "snippet": "  private SqlSource createSqlSource(Object parameterObject) {    try {      String sql;      if (parameterObject instanceof Map) {        int bindParameterCount = providerMethodParameterTypes.length - (providerContext == null ? 0 : 1);        if (bindParameterCount == 1 &&          (providerMethodParameterTypes[Integer.valueOf(0).equals(providerContextIndex) ? 1 : 0].isAssignableFrom(parameterObject.getClass()))) {          sql = invokeProviderMethod(extractProviderMethodArguments(parameterObject));        } else {          @SuppressWarnings(\"unchecked\")          Map<String, Object> params = (Map<String, Object>) parameterObject;          sql = invokeProviderMethod(extractProviderMethodArguments(params, providerMethodArgumentNames));        }      } else if (providerMethodParameterTypes.length == 0) {        sql = invokeProviderMethod();      } else if (providerMethodParameterTypes.length == 1) {        if (providerContext == null) {          sql = invokeProviderMethod(parameterObject);        } else {          sql = invokeProviderMethod(providerContext);        }      } else if (providerMethodParameterTypes.length == 2) {        sql = invokeProviderMethod(extractProviderMethodArguments(parameterObject));      } else {        throw new BuilderException(\"Cannot invoke SqlProvider method '\" + providerMethod          + \"' with specify parameter '\" + (parameterObject == null ? null : parameterObject.getClass())          + \"' because SqlProvider method arguments for '\" + mapperMethod + \"' is an invalid combination.\");      }      Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();      return languageDriver.createSqlSource(configuration, sql, parameterType);    } catch (BuilderException e) {      throw e;    } catch (Exception e) {      throw new BuilderException(\"Error invoking SqlProvider method '\" + providerMethod          + \"' with specify parameter '\" + (parameterObject == null ? null : parameterObject.getClass()) + \"'.  Cause: \" + extractRootCause(e), e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java", "stars": "15", "class": {"name": "ProviderSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "extractRootCause", "params": ["Exception"], "throws": null, "modifiers": ["private"], "return_type": "Throwable", "snippet": "  private Throwable extractRootCause(Exception e) {    Throwable cause = e;    while(cause.getCause() != null) {      cause = cause.getCause();    }    return cause;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java", "stars": "15", "class": {"name": "ProviderSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "extractProviderMethodArguments", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "  private Object[] extractProviderMethodArguments(Object parameterObject) {    if (providerContext != null) {      Object[] args = new Object[2];      args[providerContextIndex == 0 ? 1 : 0] = parameterObject;      args[providerContextIndex] = providerContext;      return args;    } else {      return new Object[] { parameterObject };    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java", "stars": "15", "class": {"name": "ProviderSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "extractProviderMethodArguments", "params": ["Map<String,Object>", "String"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "  private Object[] extractProviderMethodArguments(Map<String, Object> params, String[] argumentNames) {    Object[] args = new Object[argumentNames.length];    for (int i = 0; i < args.length; i++) {      if (providerContextIndex != null && providerContextIndex == i) {        args[i] = providerContext;      } else {        args[i] = params.get(argumentNames[i]);      }    }    return args;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java", "stars": "15", "class": {"name": "ProviderSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "invokeProviderMethod", "params": ["Object"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "String", "snippet": "  private String invokeProviderMethod(Object... args) throws Exception {    Object targetObject = null;    if (!Modifier.isStatic(providerMethod.getModifiers())) {      targetObject = providerType.getDeclaredConstructor().newInstance();    }    CharSequence sql = (CharSequence) providerMethod.invoke(targetObject, args);    return sql != null ? sql.toString() : null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java", "stars": "15", "class": {"name": "ProviderSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "getProviderType", "params": ["Annotation", "Method"], "throws": ["NoSuchMethodException", "InvocationTargetException", "IllegalAccessException"], "modifiers": ["private"], "return_type": "Class<?>", "snippet": "  private Class<?> getProviderType(Annotation providerAnnotation, Method mapperMethod)      throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {    Class<?> type = (Class<?>) providerAnnotation.annotationType().getMethod(\"type\").invoke(providerAnnotation);    Class<?> value = (Class<?>) providerAnnotation.annotationType().getMethod(\"value\").invoke(providerAnnotation);    if (value == void.class && type == void.class) {      throw new BuilderException(\"Please specify either 'value' or 'type' attribute of @\"          + providerAnnotation.annotationType().getSimpleName()          + \" at the '\" + mapperMethod.toString() + \"'.\");    }    if (value != void.class && type != void.class && value != type) {      throw new BuilderException(\"Cannot specify different class on 'value' and 'type' attribute of @\"          + providerAnnotation.annotationType().getSimpleName()          + \" at the '\" + mapperMethod.toString() + \"'.\");    }    return value == void.class ? type : value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java", "stars": "15", "class": {"name": "ProviderSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "getSql", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSql(){    return \"\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java", "stars": "15", "class": {"name": "ProviderSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["ExistsId"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initialize(ExistsId params) {\t\tdomainAttribute = params.domainAttribute();\t\tklass = params.klass();\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/ExistsIdValidator.java", "stars": "9", "class": {"name": "ExistsIdValidator", "extends": null, "implements": ["ConstraintValidator"], "modifiers": ["public"]}}, {"method_name": "isValid", "params": ["Long", "ConstraintValidatorContext"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isValid(Long value, ConstraintValidatorContext context) {\t\tQuery query = manager.createQuery(\"select 1 from \"+klass.getName()+\" where \"+domainAttribute+\"=:value\");\t\tquery.setParameter(\"value\", value);\t\treturn !query.getResultList().isEmpty();\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/ExistsIdValidator.java", "stars": "9", "class": {"name": "ExistsIdValidator", "extends": null, "implements": ["ConstraintValidator"], "modifiers": ["public"]}}, {"method_name": "onDismiss", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDismiss (android.view.View p0)\t{\t\tn_onDismiss (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/SwipeDismissBehavior_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "SwipeDismissBehavior_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDismiss", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDismiss (android.view.View p0);\tpublic void onDragStateChanged (int p0)\t{\t\tn_onDragStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/SwipeDismissBehavior_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "SwipeDismissBehavior_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDragStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDragStateChanged (int p0)\t{\t\tn_onDragStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/SwipeDismissBehavior_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "SwipeDismissBehavior_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDragStateChanged", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDragStateChanged (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/SwipeDismissBehavior_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "SwipeDismissBehavior_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/SwipeDismissBehavior_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "SwipeDismissBehavior_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/SwipeDismissBehavior_OnDismissListenerImplementor.java", "stars": "2", "class": {"name": "SwipeDismissBehavior_OnDismissListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "aliCallback", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String aliCallback(HttpServletRequest request, HttpServletResponse response) {        // \u89e3\u6790\u56de\u8c03\u4fe1\u606f, \u8f6cmap        Map<String, String> params = new HashMap<String, String>();        Map<String, String[]> requestParams = request.getParameterMap();        for (Iterator<String> iter = requestParams.keySet().iterator(); iter.hasNext(); ) {            String name = iter.next();            String[] values = requestParams.get(name);            String valueStr = \"\";            for (int i = 0; i < values.length; i++) {                valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + \",\";            }            params.put(name, valueStr);        }        // \u53bb\u91cd        String tradeNO = params.get(PayProperties.AliPayApiConfig.TRADE_NO_KEY);        int count = payNotifyRecordService.count(Wrappers.<PayNotifyRecord>lambdaQuery()                .eq(PayNotifyRecord::getOrderNo, tradeNO));        if (count > 0) {            return \"success\";        }        // \u9a8c\u7b7e        String callReq = MapUtil.join(params, StrUtil.DASHED, StrUtil.DASHED);        AlipaySignature.rsaCheckV1(params, payProperties.getAli().getPublicKey(), CharsetUtil.UTF_8, \"RSA2\");        log.info(\"\u652f\u4ed8\u5b9d\u53d1\u8d77\u56de\u8c03: {}\", params);        // \u89e3\u6790        String orderNo = params.get(PayProperties.AliPayApiConfig.TRADE_NO_KEY);        PayTradeOrder tradeOrder = payTradeOrderService.getOne(                Wrappers.<PayTradeOrder>lambdaQuery()                        .eq(PayTradeOrder::getOrderId, orderNo));        String tradeStatus = params.get(PayProperties.AliPayApiConfig.TRADE_STATUS);        if (\"TRADE_SUCCESS\".equals(tradeStatus)) {            tradeOrder.setOrderStatus(PayTradeStatusEnum.SUCCESS.getStatus());        }        tradeOrder.setOrderPaySuccessTime(MapUtil.getStr(params, \"gmt_payment\"));        tradeOrder.setChannelType(BrowserUAEnum.ALIPAY.getName());        tradeOrder.setChannelOrderNo(params.get(\"trade_no\"));        payTradeOrderService.updateById(tradeOrder);        // \u8bb0\u5f55        PayNotifyRecord payNotifyRecord = new PayNotifyRecord();        payNotifyRecord.setNotifyId(params.get(\"notify_id\"));        payNotifyRecord.setOrderNo(orderNo);        payNotifyRecord.setRequest(MapUtil.join(params, StrUtil.DASHED, StrUtil.DASHED));        payNotifyRecord.setResponse(callReq);        payNotifyRecordService.save(payNotifyRecord);        return \"success\";    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/pay/PayNotifyEndpoint.java", "stars": "6", "class": {"name": "PayNotifyEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "wxCallback", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String wxCallback(HttpServletRequest request) {        // \u89e3\u6790        String xmlMsg = HttpKit.readData(request);        log.info(\"\u5fae\u4fe1\u8ba2\u5355\u56de\u8c03\u4fe1\u606f:{}\", xmlMsg);        Map<String, String> params = PayKit.xmlToMap(xmlMsg);        // \u53bb\u91cd        String tradeNO = params.get(PayProperties.WxPayApiConfig.TRADE_NO_KEY);        int count = payNotifyRecordService.count(Wrappers.<PayNotifyRecord>lambdaQuery()                .eq(PayNotifyRecord::getOrderNo, tradeNO));        if (count > 0) {            return null;        }        // \u9a8c\u7b7e        if (!WxPayKit.verifyNotify(params, payProperties.getWx().getPartnerKey())) {            log.warn(\"\u5fae\u4fe1\u652f\u4ed8\u56de\u8c03\u9a8c\u7b7e\u5931\u8d25 {}\", params);            return \"success\";        }        // \u89e3\u6790        String tradeStatus = EnumUtil.fromString(PayTradeStatusEnum.class, params.get(PayProperties.WxPayApiConfig.RESULT_CODE)).getStatus();        String orderNo = params.get(PayProperties.WxPayApiConfig.TRADE_NO_KEY);        PayTradeOrder tradeOrder = payTradeOrderService.getOne(Wrappers.<PayTradeOrder>lambdaQuery().eq(PayTradeOrder::getOrderId, orderNo));        if (tradeOrder == null) {            return \"success\";        }        tradeOrder.setOrderStatus(tradeStatus);        Date date = new SimpleDateFormat(\"yyyyMMddHHmmss\").parse(MapUtil.getStr(params, \"time_end\"));        tradeOrder.setOrderPaySuccessTime(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(date));        tradeOrder.setChannelOrderNo(params.get(\"transaction_id\"));        tradeOrder.setChannelErrMsg(params.get(\"err_code_des\"));        tradeOrder.setChannelErrCode(params.get(\"err_code\"));        payTradeOrderService.updateById(tradeOrder);        // \u8bb0\u5f55        PayNotifyRecord payNotifyRecord = new PayNotifyRecord();        payNotifyRecord.setNotifyId(params.get(\"transaction_id\"));        payNotifyRecord.setOrderNo(orderNo);        payNotifyRecord.setRequest(MapUtil.join(params, StrUtil.DASHED, StrUtil.DASHED));        payNotifyRecord.setResponse(tradeStatus);        payNotifyRecordService.save(payNotifyRecord);        return \"success\";    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/pay/PayNotifyEndpoint.java", "stars": "6", "class": {"name": "PayNotifyEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "aliRefundCallback", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String aliRefundCallback(HttpServletRequest request, HttpServletResponse response) {        return \"success\";    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/pay/PayNotifyEndpoint.java", "stars": "6", "class": {"name": "PayNotifyEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "wxRefundCallback", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String wxRefundCallback(HttpServletRequest request, HttpServletResponse response) {        return \"success\";    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/pay/PayNotifyEndpoint.java", "stars": "6", "class": {"name": "PayNotifyEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "SpatialJoinQuery", "params": ["DataStream<Point>", "DataStream<Point>", "double", "int", "int", "UniformGrid"], "throws": null, "modifiers": ["public", "static"], "return_type": "DataStream<Tuple2>", "snippet": "    public static DataStream<Tuple2<String, String>> SpatialJoinQuery(DataStream<Point> ordinaryPointStream, DataStream<Point> queryPointStream, double queryRadius, int windowSize, int slideStep, UniformGrid uGrid){        DataStream<Point> replicatedQueryStream = JoinQuery.getReplicatedQueryStream(queryPointStream, queryRadius, uGrid);        DataStream<Tuple2<String, String>> joinOutput = ordinaryPointStream.join(replicatedQueryStream)                .where(new KeySelector<Point, String>() {                    @Override                    public String getKey(Point p) throws Exception {                        return p.gridID;                    }                }).equalTo(new KeySelector<Point, String>() {                    @Override                    public String getKey(Point q) throws Exception {                        return q.gridID;                    }                }).window(SlidingProcessingTimeWindows.of(Time.seconds(windowSize), Time.seconds(slideStep)))                .apply(new JoinFunction<Point, Point, Tuple2<String,String>>() {                    @Override                    public Tuple2<String, String> join(Point p, Point q) {                        if (HelperClass.computeEuclideanDistance(p.point.getX(), p.point.getY(), q.point.getX(), q.point.getY()) <= queryRadius) {                            return Tuple2.of(p.gridID, q.gridID);                        } else {                            return Tuple2.of(null, null);                        }                    }                });        return joinOutput.filter(new FilterFunction<Tuple2<String, String>>() {            @Override            public boolean filter(Tuple2<String, String> value) throws Exception {                return value.f1 != null;            }        });    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialOperators/JoinQuery.java", "stars": "2", "class": {"name": "JoinQuery", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getReplicatedQueryStream", "params": ["DataStream<Point>", "double", "UniformGrid"], "throws": null, "modifiers": ["public", "static"], "return_type": "DataStream<Point>", "snippet": "    public static DataStream<Point> getReplicatedQueryStream(DataStream<Point> queryPoints, double queryRadius, UniformGrid uGrid){        return queryPoints.flatMap(new FlatMapFunction<Point, Point>() {            @Override            public void flatMap(Point queryPoint, Collector<Point> out) throws Exception {                // Neighboring cells contain all the cells including Candidate cells, Guaranteed Cells and the query point cell itself                HashSet<String> neighboringCells = uGrid.getNeighboringCells(queryRadius, queryPoint);                // Create duplicated query points                for (String gridID: neighboringCells) {                    Point p = new Point(queryPoint.point.getX(), queryPoint.point.getY(), gridID);                    out.collect(p);                }            }        });    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialOperators/JoinQuery.java", "stars": "2", "class": {"name": "JoinQuery", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "WBEventCheckerDao", "snippet": "    public static WBEventCheckerDao getInstance() {        if (instance == null) {            synchronized (WBEventCheckerDao.class) {                if (instance == null) {                    instance = new WBEventCheckerDao();                }            }        }        return instance;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBEventCheckerDao.java", "stars": "18", "class": {"name": "WBEventCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMsg", "params": ["int", "Properties", "Logger"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean sendMsg(int jobId, Properties props, Logger log) {        if(props!=null){            return new EventCheckSender(props).sendMsg(jobId,props,log);        }else{            log.error(\"create EventCheckSender failed {}\");            return false;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBEventCheckerDao.java", "stars": "18", "class": {"name": "WBEventCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reciveMsg", "params": ["int", "Properties", "Logger"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean reciveMsg(int jobId, Properties props, Logger log) {        if(props!=null){            return new DefaultEventcheckReceiver(props).reciveMsg(jobId,props,log);        }else{            log.error(\"create EventCheckSender failed {}\");            return false;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/connectors/druid/WBEventCheckerDao.java", "stars": "18", "class": {"name": "WBEventCheckerDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        System.out.println(\"\u5965\u8fea\u5728\u516c\u8def\u4e0a\u884c\u9a76\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/simplefactory/Audi.java", "stars": "2", "class": {"name": "Audi", "extends": "Car", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        measureHelper = new MeasureHelper(this, this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        measureHelper.prepareMeasure(widthMeasureSpec, heightMeasureSpec, (int) getRotation());        setMeasuredDimension(measureHelper.getMeasuredWidth(), measureHelper.getMeasuredHeight());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "surfaceCreated", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceCreated(SurfaceHolder holder) {        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceAvailable(holder.getSurface());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "surfaceChanged", "params": ["SurfaceHolder", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceSizeChanged(holder.getSurface(), width, height);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "surfaceDestroyed", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceDestroyed(SurfaceHolder holder) {        //\u6e05\u7a7a\u91ca\u653e        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceDestroyed(holder.getSurface());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "surfaceRedrawNeeded", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceRedrawNeeded(SurfaceHolder holder) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getIGSYSurfaceListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IGSYSurfaceListener", "snippet": "    public IGSYSurfaceListener getIGSYSurfaceListener() {        return mIGSYSurfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setIGSYSurfaceListener", "params": ["IGSYSurfaceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIGSYSurfaceListener(IGSYSurfaceListener surfaceListener) {        getHolder().addCallback(this);        this.mIGSYSurfaceListener = surfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeH() {        return getHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeW() {        return getWidth();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCover", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCover() {        Debuger.printfLog(getClass().getSimpleName() + \" not support initCover now\");        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCoverHigh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCoverHigh() {        Debuger.printfLog(getClass().getSimpleName() + \" not support initCoverHigh now\");        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "taskShotPic", "params": ["GSYVideoShotListener", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void taskShotPic(GSYVideoShotListener gsyVideoShotListener, boolean shotHigh) {        Debuger.printfLog(getClass().getSimpleName() + \" not support taskShotPic now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "saveFrame", "params": ["File", "boolean", "GSYVideoShotSaveListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveFrame(final File file, final boolean high, final GSYVideoShotSaveListener gsyVideoShotSaveListener) {        Debuger.printfLog(getClass().getSimpleName() + \" not support saveFrame now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getRenderView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getRenderView() {        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderResume() {        Debuger.printfLog(getClass().getSimpleName() + \" not support onRenderResume now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderPause() {        Debuger.printfLog(getClass().getSimpleName() + \" not support onRenderPause now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "releaseRenderAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseRenderAll() {        Debuger.printfLog(getClass().getSimpleName() + \" not support releaseRenderAll now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderMode(int mode) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setRenderMode now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderTransform", "params": ["Matrix"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderTransform(Matrix transform) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setRenderTransform now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLRenderer", "params": ["GSYVideoGLViewBaseRender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLRenderer(GSYVideoGLViewBaseRender renderer) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setGLRenderer now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLMVPMatrix", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLMVPMatrix(float[] MVPMatrix) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setGLMVPMatrix now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLEffectFilter", "params": ["GSYVideoGLView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLEffectFilter(GSYVideoGLView.ShaderInterface effectFilter) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setGLEffectFilter now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setVideoParamsListener", "params": ["MeasureHelper"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoParamsListener(MeasureHelper.MeasureFormVideoParamsListener listener) {        mVideoParamsListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoWidth() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoWidth();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoHeight() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoHeight();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarNum() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarNum();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarDen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarDen() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarDen();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "addSurfaceView", "params": ["Context", "ViewGroup", "int", "IGSYSurfaceListener", "MeasureHelper"], "throws": null, "modifiers": ["public", "static"], "return_type": "GSYSurfaceView", "snippet": "    public static GSYSurfaceView addSurfaceView(Context context, ViewGroup textureViewContainer, int rotate,                                                final IGSYSurfaceListener gsySurfaceListener,                                                final MeasureHelper.MeasureFormVideoParamsListener videoParamsListener) {        if (textureViewContainer.getChildCount() > 0) {            textureViewContainer.removeAllViews();        }        GSYSurfaceView showSurfaceView = new GSYSurfaceView(context);        showSurfaceView.setIGSYSurfaceListener(gsySurfaceListener);        showSurfaceView.setVideoParamsListener(videoParamsListener);        showSurfaceView.setRotation(rotate);        GSYRenderView.addToParent(textureViewContainer, showSurfaceView);        return showSurfaceView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYSurfaceView.java", "stars": "2", "class": {"name": "GSYSurfaceView", "extends": "SurfaceView", "implements": ["SurfaceHolder", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        super.init(context);        mCoverImage = (ImageView) findViewById(R.id.thumbImage);        if (mThumbImageViewLayout != null &&                (mCurrentState == -1 || mCurrentState == CURRENT_STATE_NORMAL || mCurrentState == CURRENT_STATE_ERROR)) {            mThumbImageViewLayout.setVisibility(VISIBLE);        }        onAudioFocusChangeListener = new AudioManager.OnAudioFocusChangeListener() {            @Override            public void onAudioFocusChange(int focusChange) {                switch (focusChange) {                    case AudioManager.AUDIOFOCUS_GAIN:                        break;                    case AudioManager.AUDIOFOCUS_LOSS:                        //todo \u5224\u65ad\u5982\u679c\u4e0d\u662f\u5916\u754c\u9020\u6210\u7684\u5c31\u4e0d\u5904\u7406                        break;                    case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:                        //todo \u5224\u65ad\u5982\u679c\u4e0d\u662f\u5916\u754c\u9020\u6210\u7684\u5c31\u4e0d\u5904\u7406                        break;                    case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:                        break;                }            }        };    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoViewBridge", "snippet": "    public GSYVideoViewBridge getGSYVideoManager() {        CustomManager.getCustomManager(getKey()).initContext(getContext().getApplicationContext());        return CustomManager.getCustomManager(getKey());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "backFromFull", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean backFromFull(Context context) {        return CustomManager.backFromWindowFull(context, getKey());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseVideos", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void releaseVideos() {        CustomManager.releaseAllVideos(getKey());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFullId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getFullId() {        return CustomManager.FULLSCREEN_ID;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSmallId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getSmallId() {        return CustomManager.SMALL_ID;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId() {        return R.layout.video_layout_cover;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadCoverImage", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadCoverImage(String url, int res) {        mCoverOriginUrl = url;        mDefaultRes = res;        Glide.with(getContext().getApplicationContext())                .setDefaultRequestOptions(                        new RequestOptions()                                .frame(1000000)                                .centerCrop()                                .error(res)                                .placeholder(res))                .load(url)                .into(mCoverImage);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startWindowFullscreen", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer startWindowFullscreen(Context context, boolean actionBar, boolean statusBar) {        GSYBaseVideoPlayer gsyBaseVideoPlayer = super.startWindowFullscreen(context, actionBar, statusBar);        MultiSampleVideo multiSampleVideo = (MultiSampleVideo) gsyBaseVideoPlayer;        multiSampleVideo.loadCoverImage(mCoverOriginUrl, mDefaultRes);        return multiSampleVideo;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "showSmallVideo", "params": ["Point", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer showSmallVideo(Point size, boolean actionBar, boolean statusBar) {        //\u4e0b\u9762\u8fd9\u91cc\u66ff\u6362\u6210\u4f60\u81ea\u5df1\u7684\u5f3a\u5236\u8f6c\u5316        MultiSampleVideo multiSampleVideo = (MultiSampleVideo) super.showSmallVideo(size, actionBar, statusBar);        multiSampleVideo.mStartButton.setVisibility(GONE);        multiSampleVideo.mStartButton = null;        return multiSampleVideo;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getKey() {        if (mPlayPosition == -22) {            Debuger.printfError(getClass().getSimpleName() + \" used getKey() \" + \"******* PlayPosition never set. ********\");        }        if (TextUtils.isEmpty(mPlayTag)) {            Debuger.printfError(getClass().getSimpleName() + \" used getKey() \" + \"******* PlayTag never set. ********\");        }        return TAG + mPlayPosition + mPlayTag;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/MultiSampleVideo.java", "stars": "2", "class": {"name": "MultiSampleVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.activity_ptr_list);\t\tmPullRefreshListView = (PullToRefreshListView) findViewById(R.id.pull_refresh_list);\t\t// Set a listener to be invoked when the list should be refreshed.\t\tmPullRefreshListView.setOnRefreshListener(new OnRefreshListener<ListView>() {\t\t\t@Override\t\t\tpublic void onRefresh(PullToRefreshBase<ListView> refreshView) {\t\t\t\tString label = DateUtils.formatDateTime(getApplicationContext(), System.currentTimeMillis(),\t\t\t\t\t\tDateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_ABBREV_ALL);\t\t\t\t// Update the LastUpdatedLabel\t\t\t\trefreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);\t\t\t\t// Do work to refresh the list here.\t\t\t\tnew GetDataTask().execute();\t\t\t}\t\t});\t\t// Add an end-of-list listener\t\tmPullRefreshListView.setOnLastItemVisibleListener(new OnLastItemVisibleListener() {\t\t\t@Override\t\t\tpublic void onLastItemVisible() {\t\t\t\tToast.makeText(PullToRefreshListActivity.this, \"End of List!\", Toast.LENGTH_SHORT).show();\t\t\t}\t\t});\t\tListView actualListView = mPullRefreshListView.getRefreshableView();\t\t// Need to use the Actual ListView when registering for Context Menu\t\tregisterForContextMenu(actualListView);\t\tmListItems = new LinkedList<String>();\t\tmListItems.addAll(Arrays.asList(mStrings));\t\tmAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, mListItems);\t\t/**\t\t * Add Sound Event Listener\t\t */\t\tSoundPullEventListener<ListView> soundListener = new SoundPullEventListener<ListView>(this);\t\tsoundListener.addSoundEvent(State.PULL_TO_REFRESH, R.raw.pull_event);\t\tsoundListener.addSoundEvent(State.RESET, R.raw.reset_sound);\t\tsoundListener.addSoundEvent(State.REFRESHING, R.raw.refreshing_sound);\t\tmPullRefreshListView.setOnPullEventListener(soundListener);\t\t// You can also just use setListAdapter(mAdapter) or\t\t// mPullRefreshListView.setAdapter(mAdapter)\t\tactualListView.setAdapter(mAdapter);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshListActivity.java", "stars": "74", "class": {"name": "PullToRefreshListActivity", "extends": "ListActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onCreateOptionsMenu(Menu menu) {\t\tmenu.add(0, MENU_MANUAL_REFRESH, 0, \"Manual Refresh\");\t\tmenu.add(0, MENU_DISABLE_SCROLL, 1,\t\t\t\tmPullRefreshListView.isScrollingWhileRefreshingEnabled() ? \"Disable Scrolling while Refreshing\"\t\t\t\t\t\t: \"Enable Scrolling while Refreshing\");\t\tmenu.add(0, MENU_SET_MODE, 0, mPullRefreshListView.getMode() == Mode.BOTH ? \"Change to MODE_PULL_DOWN\"\t\t\t\t: \"Change to MODE_PULL_BOTH\");\t\tmenu.add(0, MENU_DEMO, 0, \"Demo\");\t\treturn super.onCreateOptionsMenu(menu);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshListActivity.java", "stars": "74", "class": {"name": "PullToRefreshListActivity", "extends": "ListActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onCreateContextMenu", "params": ["ContextMenu", "View", "ContextMenuInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\t\tAdapterContextMenuInfo info = (AdapterContextMenuInfo) menuInfo;\t\tmenu.setHeaderTitle(\"Item: \" + getListView().getItemAtPosition(info.position));\t\tmenu.add(\"Item 1\");\t\tmenu.add(\"Item 2\");\t\tmenu.add(\"Item 3\");\t\tmenu.add(\"Item 4\");\t\tsuper.onCreateContextMenu(menu, v, menuInfo);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshListActivity.java", "stars": "74", "class": {"name": "PullToRefreshListActivity", "extends": "ListActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onPrepareOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onPrepareOptionsMenu(Menu menu) {\t\tMenuItem disableItem = menu.findItem(MENU_DISABLE_SCROLL);\t\tdisableItem\t\t\t\t.setTitle(mPullRefreshListView.isScrollingWhileRefreshingEnabled() ? \"Disable Scrolling while Refreshing\"\t\t\t\t\t\t: \"Enable Scrolling while Refreshing\");\t\tMenuItem setModeItem = menu.findItem(MENU_SET_MODE);\t\tsetModeItem.setTitle(mPullRefreshListView.getMode() == Mode.BOTH ? \"Change to MODE_FROM_START\"\t\t\t\t: \"Change to MODE_PULL_BOTH\");\t\treturn super.onPrepareOptionsMenu(menu);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshListActivity.java", "stars": "74", "class": {"name": "PullToRefreshListActivity", "extends": "ListActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onOptionsItemSelected(MenuItem item) {\t\tswitch (item.getItemId()) {\t\t\tcase MENU_MANUAL_REFRESH:\t\t\t\tnew GetDataTask().execute();\t\t\t\tmPullRefreshListView.setRefreshing(false);\t\t\t\tbreak;\t\t\tcase MENU_DISABLE_SCROLL:\t\t\t\tmPullRefreshListView.setScrollingWhileRefreshingEnabled(!mPullRefreshListView\t\t\t\t\t\t.isScrollingWhileRefreshingEnabled());\t\t\t\tbreak;\t\t\tcase MENU_SET_MODE:\t\t\t\tmPullRefreshListView.setMode(mPullRefreshListView.getMode() == Mode.BOTH ? Mode.PULL_FROM_START\t\t\t\t\t\t: Mode.BOTH);\t\t\t\tbreak;\t\t\tcase MENU_DEMO:\t\t\t\tmPullRefreshListView.demo();\t\t\t\tbreak;\t\t}\t\treturn super.onOptionsItemSelected(item);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshListActivity.java", "stars": "74", "class": {"name": "PullToRefreshListActivity", "extends": "ListActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\t\tprotected String[] doInBackground(Void... params) {\t\t\t// Simulates a background job.\t\t\ttry {\t\t\t\tThread.sleep(4000);\t\t\t} catch (InterruptedException e) {\t\t\t}\t\t\treturn mStrings;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshListActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPostExecute(String[] result) {\t\t\tmListItems.addFirst(\"Added after refresh...\");\t\t\tmAdapter.notifyDataSetChanged();\t\t\t// Call onRefreshComplete when the list has been refreshed.\t\t\tmPullRefreshListView.onRefreshComplete();\t\t\tsuper.onPostExecute(result);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshListActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "readHeaders", "params": ["DataInput"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "Map<String,List>", "snippet": "    private static Map<String, List<String>> readHeaders(DataInput din) throws IOException {        int keyCount = din.readInt();        Map<String, List<String>> headers = new HashMap<String, List<String>>(keyCount);        for (int i = 0; i < keyCount; i++) {            String key = din.readUTF();            int valueCount = din.readInt();            List<String> values = new ArrayList<String>(valueCount);            for (int j = 0; j < valueCount; j++) {                String value = din.readUTF();                values.add(value);            }            // All keys must be lower-case because            // HttpURLConnection#getHeaderField(String key)            // is implemented as: headers.get(key.toLowerCase())            key = key.toLowerCase();            if (key.equalsIgnoreCase(\"transfer-encoding\")) {                // Remove the transfer encoding because                // the cached response is already decoded.            } else {                headers.put(key, values);            }        }        return headers;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheResponse.java", "stars": "74", "class": {"name": "FileCacheResponse", "extends": "CacheResponse", "implements": null, "modifiers": []}}, {"method_name": "getHeaders", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Map<String,List>", "snippet": "    public Map<String, List<String>> getHeaders() throws IOException {        if (mHeaders == null) {            if (mInputStream != null) {                // It should not be possible to set mInputStream                // without settings mHeaders as well.                throw new IllegalStateException();            }            InputStream input = new FileInputStream(mFile);            try {                input = new BufferedInputStream(input, BUFFER_SIZE);                DataInputStream din = new DataInputStream(input);                mHeaders = readHeaders(din);                // TODO: Have an HTTP expert verify that these                // headers are being used correctly.                long ageMillis = System.currentTimeMillis() - mFile.lastModified();                long ageSeconds = ageMillis / DateUtils.SECOND_IN_MILLIS;                mHeaders.put(\"age\", Arrays.asList(String.valueOf(ageSeconds)));                // Add localhost to Via header                List<String> via = mHeaders.get(\"via\");                if (via != null) {                    via.add(\"1.1 localhost\");                } else {                    mHeaders.put(\"via\", Arrays.asList(\"1.1 localhost\"));                }                mInputStream = din;                return mHeaders;            } finally {                if (mInputStream == null) {                    mHeaders = null;                    input.close();                }            }        } else {            return mHeaders;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheResponse.java", "stars": "74", "class": {"name": "FileCacheResponse", "extends": "CacheResponse", "implements": null, "modifiers": []}}, {"method_name": "getBody", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "    public InputStream getBody() throws IOException {        if (mInputStream != null) {            return mInputStream;        } else {            // Calling getHeaders() has the side-effect of setting mInputStream            getHeaders();            if (mInputStream == null) {                // The method getHeaders() must throw an IOException                // if it does not set mInputStream.                throw new IllegalStateException();            }            return mInputStream;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheResponse.java", "stars": "74", "class": {"name": "FileCacheResponse", "extends": "CacheResponse", "implements": null, "modifiers": []}}, {"method_name": "openAccount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Account", "snippet": "    public Account openAccount() {        System.out.println(\"\u6253\u5f00\u4e00\u4e2a\u6d3b\u671f\u5b58\u6b3e\u7684\u8d26\u6237\");        return new CurrentAccount();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/bridge/CurrentAccount.java", "stars": "2", "class": {"name": "CurrentAccount", "extends": null, "implements": ["Account"], "modifiers": ["public"]}}, {"method_name": "showAccountType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showAccountType() {        System.out.println(\"\u8fd9\u662f\u4e00\u4e2a\u6d3b\u671f\u8d26\u53f7\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/bridge/CurrentAccount.java", "stars": "2", "class": {"name": "CurrentAccount", "extends": null, "implements": ["Account"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E getName() {        return name;    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/GenericClass.java", "stars": "2", "class": {"name": "GenericClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["E"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(E name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/GenericClass.java", "stars": "2", "class": {"name": "GenericClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState)\t{\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.buttons);\t\tprogressBar = (ProgressBar) findViewById(R.id.progressBar1);\t\ttextViewDisplaying = (TextView) findViewById(R.id.displaying);\t\tfirst = (Button) findViewById(R.id.buttonfirst);\t\tprev = (Button) findViewById(R.id.buttonprev);\t\tnext = (Button) findViewById(R.id.buttonnext);\t\tlast = (Button) findViewById(R.id.buttonlast);\t\tdatasource = Datasource.getInstance();\t\tsetListAdapter(new CustomArrayAdapter(this, new ArrayList<String>()));\t\t(new LoadNextPage()).execute();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "PagingButtonsListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDisplayingTextView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void updateDisplayingTextView()\t{\t\tString text = getString(R.string.displayshort);\t\ttext = String.format(text, Math.min(datasource.getSize(), offset + 1), Math.min(offset + PAGESIZE, datasource.getSize()), datasource.getSize());\t\ttextViewDisplaying.setText(text);\t\tupdateButtons();\t\tprogressBar.setVisibility(View.INVISIBLE);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "PagingButtonsListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateButtons", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void updateButtons()\t{\t\tif (getCurrentPage() > 1)\t\t{\t\t\tfirst.setEnabled(true);\t\t\tprev.setEnabled(true);\t\t}\t\telse\t\t{\t\t\tfirst.setEnabled(false);\t\t\tprev.setEnabled(false);\t\t}\t\tif (getCurrentPage() < getLastPage())\t\t{\t\t\tnext.setEnabled(true);\t\t\tlast.setEnabled(true);\t\t}\t\telse\t\t{\t\t\tnext.setEnabled(false);\t\t\tlast.setEnabled(false);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "PagingButtonsListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastPage", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int getLastPage()\t{\t\treturn (int) (Math.ceil((float) datasource.getSize() / PAGESIZE));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "PagingButtonsListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentPage", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int getCurrentPage()\t{\t\treturn (int) (Math.ceil((float) (offset + 1) / PAGESIZE));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "PagingButtonsListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "first", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void first(View v)\t{\t\tif (!loading)\t\t{\t\t\toffset = 0;\t\t\t(new LoadNextPage()).execute();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "PagingButtonsListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "next", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void next(View v)\t{\t\tif (!loading)\t\t{\t\t\toffset = getCurrentPage() * PAGESIZE;\t\t\t(new LoadNextPage()).execute();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "PagingButtonsListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "previous", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void previous(View v)\t{\t\tif (!loading)\t\t{\t\t\toffset = (getCurrentPage() - 2) * PAGESIZE;\t\t\t(new LoadNextPage()).execute();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "PagingButtonsListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "last", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void last(View v)\t{\t\tif (!loading)\t\t{\t\t\toffset = (getLastPage() - 1) * PAGESIZE;\t\t\t(new LoadNextPage()).execute();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "PagingButtonsListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPreExecute", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPreExecute()\t\t{\t\t\tprogressBar.setVisibility(View.VISIBLE);\t\t\tloading = true;\t\t\tsuper.onPreExecute();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "LoadNextPage", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "doInBackground", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\t\tprotected String doInBackground(String... arg0)\t\t{\t\t\t// para que de tiempo a ver la animaci\u00f3n\t\t\ttry\t\t\t{\t\t\t\tThread.sleep(1000);\t\t\t}\t\t\tcatch (InterruptedException e)\t\t\t{\t\t\t\tLog.e(\"PagingButtons\", e.getMessage());\t\t\t}\t\t\tnewData = datasource.getData(offset, PAGESIZE);\t\t\treturn null;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "LoadNextPage", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPostExecute(String result)\t\t{\t\t\tCustomArrayAdapter customArrayAdapter = ((CustomArrayAdapter) getListAdapter());\t\t\tcustomArrayAdapter.clear();\t\t\tfor (String value : newData)\t\t\t{\t\t\t\tcustomArrayAdapter.add(value);\t\t\t}\t\t\tcustomArrayAdapter.notifyDataSetChanged();\t\t\tupdateDisplayingTextView();\t\t\tloading = false;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/PagingButtonsListViewActivity.java", "stars": "74", "class": {"name": "LoadNextPage", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "initComponents", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initComponents() {        jToolBar1 = new javax.swing.JToolBar();        convert = new javax.swing.JToggleButton();        jPanel1 = new javax.swing.JPanel();        editorScroll = new javax.swing.JScrollPane();        editor = new javax.swing.JTextPane();        jPanel3 = new javax.swing.JPanel();        jLabel1 = new javax.swing.JLabel();        seleccionado = new javax.swing.JTextField();        jMenuBar1 = new javax.swing.JMenuBar();        jMenu1 = new javax.swing.JMenu();        abrir = new javax.swing.JMenuItem();        guardar = new javax.swing.JMenuItem();        guardarNormal = new javax.swing.JMenuItem();        reset = new javax.swing.JMenuItem();        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);        setTitle(\"Decodificador\");        setBounds(new java.awt.Rectangle(0, 0, 0, 0));        setMinimumSize(new java.awt.Dimension(640, 480));        jToolBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));        jToolBar1.setFloatable(false);        jToolBar1.setOpaque(false);        convert.setText(\"Convertir\");        convert.setBorderPainted(false);        convert.setFocusable(false);        convert.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        convert.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        convert.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                convertActionPerformed(evt);            }        });        jToolBar1.add(convert);        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));        editorScroll.setViewportView(editor);        jLabel1.setText(\"Archivo Seleccionado:\");        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);        jPanel3.setLayout(jPanel3Layout);        jPanel3Layout.setHorizontalGroup(            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(jPanel3Layout.createSequentialGroup()                .addContainerGap()                .addComponent(jLabel1)                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)                .addComponent(seleccionado, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)                .addContainerGap())        );        jPanel3Layout.setVerticalGroup(            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(jPanel3Layout.createSequentialGroup()                .addContainerGap()                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)                    .addComponent(jLabel1)                    .addComponent(seleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);        jPanel1.setLayout(jPanel1Layout);        jPanel1Layout.setHorizontalGroup(            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(jPanel1Layout.createSequentialGroup()                .addContainerGap()                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)                    .addComponent(editorScroll)                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                .addContainerGap())        );        jPanel1Layout.setVerticalGroup(            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(jPanel1Layout.createSequentialGroup()                .addContainerGap()                .addComponent(editorScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))        );        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));        jMenuBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));        jMenu1.setText(\"Archivo\");        abrir.setText(\"Abrir\");        abrir.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                abrirActionPerformed(evt);            }        });        jMenu1.add(abrir);        guardar.setText(\"Guardar como\");        guardar.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                guardarActionPerformed(evt);            }        });        jMenu1.add(guardar);        guardarNormal.setText(\"Guardar\");        guardarNormal.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                guardarNormalActionPerformed(evt);            }        });        jMenu1.add(guardarNormal);        reset.setText(\"Reset\");        reset.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                resetActionPerformed(evt);            }        });        jMenu1.add(reset);        jMenuBar1.add(jMenu1);        setJMenuBar(jMenuBar1);        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());        getContentPane().setLayout(layout);        layout.setHorizontalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)        );        layout.setVerticalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(layout.createSequentialGroup()                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)                .addGap(0, 0, 0)                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        jToolBar1.getAccessibleContext().setAccessibleName(\"\");        pack();    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/TextEditor.java", "stars": "2", "class": {"name": "TextEditor", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "guardarActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed                //Si ese boton esta seleccionado significa que el texto esta convertido        if(convert.isSelected()){            //Por lo tanto se debera dejar nornal para guardarlo de forma normal, metodo toBinary (Dejarlo normal)            conversor.toBinary(editor.getText());//Metodo no terminado            //Se muestra la ventana para seleccionar el nombre del archivo y se le pasa por parametros los datos            sn = new SelectName(conversor.getDataBi());            //Configuracion de la ventana            sn.setLocationRelativeTo(null);            sn.setVisible(true);            dispose();        }else{//Si el boton no esta seleccionado significa que el texto esta nornal            //Se muestra la ventana para seleccionar el nombre del archivo y se le pasa por parametros los datos            sn = new SelectName(editor.getText());            sn.setLocationRelativeTo(null);            sn.setVisible(true);            dispose();        }        }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/TextEditor.java", "stars": "2", "class": {"name": "TextEditor", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "guardarNormalActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void guardarNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarNormalActionPerformed        //Si ese boton esta seleccionado significa que el texto esta convertido        if(convert.isSelected()){            //Por lo tanto se debera dejar nornal para guardarlo de forma normal, metodo toBinary (Dejarlo normal)            conversor.toBinary(editor.getText());//Metodo no terminado            //Se le pasa por parametros los datos y la ruta que ya estaria definida, ahi se realiza el guardado de cambios            controlArchivo.crear(conversor.getDataBi(), rutaSeleccionada);            System.out.println(\"archivo guardado\");         }else{            //Se le pasa por parametros los datos normales y la ruta para guardarlos en el mismo archivo            controlArchivo.crear(editor.getText(), rutaSeleccionada);            System.out.println(\"archivo guardado\");        }          }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/TextEditor.java", "stars": "2", "class": {"name": "TextEditor", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "resetActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed        reset();    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/TextEditor.java", "stars": "2", "class": {"name": "TextEditor", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset(){        seleccionado.setText(\"\");        editor.setText(\"\");        guardar.setEnabled(true);        guardarNormal.setEnabled(false);        convert.setSelected(false);        rutaSeleccionada = \"\";        datos = \"\";    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/TextEditor.java", "stars": "2", "class": {"name": "TextEditor", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "abrirActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed                //Se utiliza la clase para crear la ruta en donde se abrira el archivo        gr = new GenerarRuta(null, JFileChooser.FILES_ONLY);                //Comprobar si la ruta no esta vacia        if(!gr.getRutaArchivo().equals(\"\")){            //Se escribe la ruta en el campo \"seleccionado\"            seleccionado.setText(gr.getRutaArchivo());            //Se llama al metodo para desactivar ciertos botones            comprobarSeleccionado();                        //Se utiliza el objeto de la clase \"AbrirArchivo\", se utiliza su metodo \"leer\" y se le manda la ruta del archivo            leer.leer(gr.getRutaArchivo());            //Se establece el editor con los datos obtenidos de la lectura            editor.setText(leer.getData());            //Se guarda la ruta en la cadena, (Era para evitar un error que no recuerdo exactamente cual era :b)            rutaSeleccionada = gr.getRutaArchivo();            leer.datos = \"\";        }            }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/TextEditor.java", "stars": "2", "class": {"name": "TextEditor", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "convertActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/TextEditor.java", "stars": "2", "class": {"name": "TextEditor", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "comprobarSeleccionado", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void comprobarSeleccionado(){                if(seleccionado.getText().equals(\"\")){            guardar.setEnabled(true);            guardarNormal.setEnabled(false);        }else{            guardar.setEnabled(true);            guardarNormal.setEnabled(true);         }    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/TextEditor.java", "stars": "2", "class": {"name": "TextEditor", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["SpringApplicationBuilder"], "throws": null, "modifiers": ["protected"], "return_type": "SpringApplicationBuilder", "snippet": "\tprotected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\t\treturn application.sources(SampleJndiApplication.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jta-jndi/src/main/java/smoketest/jndi/SampleJndiInitializer.java", "stars": "47572", "class": {"name": "SampleJndiInitializer", "extends": "SpringBootServletInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstallData", "params": ["String", "HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getInstallData(@PathVariable(\"os\") String osType, HttpServletRequest request, HttpServletResponse response) {        String remoteAddr = request.getRemoteAddr();        // log.info(String.format(\"\u4ece\u8282\u70b9 %s \u5f00\u59cb\u4e0b\u8f7d\u5b89\u88c5\u5305\", remoteAddr));        log.info(String.format(\"The slave node %s starts to download the installation package\", remoteAddr));        BaseResponse downloadResponse = new BaseResponse();        OSEnum osEnum = null;        try {            osEnum = OSEnum.valueOf(osType);        } catch (Exception e) {            // log.error(\"\u89e3\u6790\u7cfb\u7edf\u7c7b\u578b\u5f02\u5e38\", e);            log.error(\"Parsing os type exception\", e);            e.printStackTrace();        }        if (osEnum == null) {            // log.error(String.format(\"\u4ece\u8282\u70b9\u7cfb\u7edf\u7c7b\u578b\u9519\u8bef: %s\", osType));            downloadResponse.setCode(ResponseCode.Fail);            // downloadResponse.setMsg(\"\u4e0d\u652f\u6301\u6307\u5b9a\u7684\u7cfb\u7edf\u7c7b\u578b: \" + osType);            downloadResponse.setMsg(\"Unsupport the os type : \" + osType);            setErrorResult(response, downloadResponse);            return;        }        List<RoleEnum> roleList = rolesBiz.getRole(remoteAddr);        // \u6839\u636e\u89d2\u8272\u51c6\u5907\u4e0d\u540c\u7684\u538b\u7f29\u5305        String filePath = fileService.packInstallFiles(remoteAddr, roleList, null);        if (StringUtils.isEmpty(filePath)) {            downloadResponse.setCode(ResponseCode.Fail);            // downloadResponse.setMsg(\"\u6253\u5305\u5b89\u88c5\u6587\u4ef6\u5931\u8d25\");            downloadResponse.setMsg(\"Fail to install the package exception\");            setErrorResult(response, downloadResponse);            return;        }        File downloadFile = new File(filePath);        FileInputStream is = null;        OutputStream os = null;        try {            // \u914d\u7f6e\u6587\u4ef6\u4e0b\u8f7d            response.setHeader(\"content-type\", \"application/octet-stream\");            response.setContentType(\"application/octet-stream\");            // \u4e0b\u8f7d\u6587\u4ef6\u80fd\u6b63\u5e38\u663e\u793a\u4e2d\u6587            response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + URLEncoder.encode(\"InstallPackage.tar.gz\", \"UTF-8\"));            is = new FileInputStream(downloadFile);            os = response.getOutputStream();            IOUtils.copy(is, os);            // \u4fee\u6539\u670d\u52a1\u5668\u5bf9\u5e94\u7684\u72b6\u6001            // log.info(String.format(\"\u8bbe\u7f6e\u4ece\u8282\u70b9 %s \u72b6\u6001\u4e3a\u4e0b\u8f7d\u5b8c\u6210\", remoteAddr));            log.info(String.format(\"slave node %s download complete\", remoteAddr));            this.rolesBiz.setServerStatus(remoteAddr, InstallStatusEnum.DOWNLOADED);        } catch (FileNotFoundException e) {            // log.error(\"\u4e0b\u8f7d\u6587\u4ef6\u4e0d\u5b58\u5728\", e);            log.error(\"File Not Exist Exception\", e);            e.printStackTrace();            downloadResponse.setCode(ResponseCode.Fail);            // downloadResponse.setMsg(\"\u4e0b\u8f7d\u6587\u4ef6\u4e0d\u5b58\u5728\");            downloadResponse.setMsg(\"File Not Exist Exception\");            setErrorResult(response, downloadResponse);        } catch (IOException e) {            // log.error(\"\u83b7\u53d6HttpServletResponse\u8f93\u51fa\u6d41\u53d1\u751f\u5f02\u5e38\", e);            log.error(\"Writting HttpServletResponse IO exception\", e);            e.printStackTrace();            downloadResponse.setCode(ResponseCode.Fail);            // downloadResponse.setMsg(\"\u83b7\u53d6HttpServletResponse\u8f93\u51fa\u6d41\u53d1\u751f\u5f02\u5e38\");            downloadResponse.setMsg(\"Writting HttpServletResponse IO exception\");            setErrorResult(response, downloadResponse);        } finally {            IOUtils.closeQuietly(is);            IOUtils.closeQuietly(os);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-api/src/main/java/com/cgb/bcpinstall/api/controller/InstallController.java", "stars": "7", "class": {"name": "InstallController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pushInstallPackage", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "HttpInstallResponse", "snippet": "    public HttpInstallResponse pushInstallPackage(HttpServletRequest request) {        // log.info(\"\u51c6\u5907\u63a5\u6536\u4e3b\u8282\u70b9\u63a8\u9001\u7684\u5b89\u88c5\u5305\");        log.info(\"Prepare to receive the  package from the master node\");        this.installBiz.setMasterServer(\"http://\" + request.getRemoteAddr() + \":8080\");        HttpInstallResponse response = new HttpInstallResponse();        try {            String filePath = this.installBiz.getInstallPackageFilePath();            Part part = request.getPart(\"file\");            part.write(filePath);            this.installBiz.installPackageReady();        } catch (Exception e) {            // log.error(\"\u63a5\u6536\u5b89\u88c5\u5305\u5f02\u5e38\", e);            log.error(\"Exception when receive the package and Abort!\", e);            response.setCode(ResponseCode.Fail.getCode());            e.printStackTrace();        }        return response;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-api/src/main/java/com/cgb/bcpinstall/api/controller/InstallController.java", "stars": "7", "class": {"name": "InstallController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setErrorResult", "params": ["HttpServletResponse", "BaseResponse"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setErrorResult(HttpServletResponse httpServletResponse, BaseResponse res) {        httpServletResponse.setContentType(\"application/json; charset=utf-8\");        httpServletResponse.setStatus(HttpServletResponse.SC_OK);        try {            PrintWriter writer = httpServletResponse.getWriter();            writer.print(JSONObject.toJSONString(res));            writer.close();            httpServletResponse.flushBuffer();        } catch (IOException ie) {            ie.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-api/src/main/java/com/cgb/bcpinstall/api/controller/InstallController.java", "stars": "7", "class": {"name": "InstallController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doInstall", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "HttpInstallResponse", "snippet": "    public HttpInstallResponse doInstall(HttpServletRequest request) {        HttpInstallResponse response = new HttpInstallResponse();        // log.info(\"\u4ece\u8282\u70b9\u6536\u5230\u5b89\u88c5\u6307\u4ee4\");        log.info(\"The slave node receives the installation instruction\");        try {            //\u83b7\u53d6\u5b89\u88c5\u6307\u4ee4\u5b9e\u4f8b            Part contentPart = request.getPart(\"content\");            ByteArrayOutputStream os = new ByteArrayOutputStream();            IOUtils.copy(contentPart == null ? request.getInputStream() : contentPart.getInputStream(), os);            String content = os.toString();            InstallCmd installCmd = JSONObject.parseObject(content, InstallCmd.class);            this.installBiz.setMasterServer(\"http://\" + request.getRemoteAddr() + \":8080\");            this.installBiz.slaveInstall(installCmd.getRole(), installCmd.getRolePorts(), installCmd.getHosts(), installCmd.getRoleFolderName());        } catch (Exception e) {            e.printStackTrace();            response.setCode(ResponseCode.Fail.getCode());        }        return response;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-api/src/main/java/com/cgb/bcpinstall/api/controller/InstallController.java", "stars": "7", "class": {"name": "InstallController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkBackendStatus", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "HttpInstallResponse", "snippet": "    public HttpInstallResponse checkBackendStatus(HttpServletRequest request) {        HttpInstallResponse response = new HttpInstallResponse();        String filePath = modeService.getInstallPath() + \"fetchBackendInit.sh\";        try {            Part part = request.getPart(\"file\");            part.write(filePath);        } catch (IOException | ServletException e) {            e.printStackTrace();            response.setCode(ResponseCode.Fail.getCode());            return response;        }        if (modeService.checkBackendInitFinished(null, filePath)) {            response.setCode(ResponseCode.SUCCESS.getCode());        } else {            response.setCode(ResponseCode.BOOTING.getCode());        }        return response;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-api/src/main/java/com/cgb/bcpinstall/api/controller/InstallController.java", "stars": "7", "class": {"name": "InstallController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doRemove", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "HttpInstallResponse", "snippet": "    public HttpInstallResponse doRemove(HttpServletRequest request) {        HttpInstallResponse response = new HttpInstallResponse();        try {            Part contentPart = request.getPart(\"content\");            ByteArrayOutputStream os = new ByteArrayOutputStream();            IOUtils.copy(contentPart == null ? request.getInputStream() : contentPart.getInputStream(), os);            String content = os.toString();            RemoveCmd removeCmd = JSONObject.parseObject(content, RemoveCmd.class);            String filePath = modeService.getInstallPath();            if (!filePath.endsWith(File.separator)) {                filePath = filePath + File.separator;            }            if (removeCmd.getRole() == RoleEnum.PEER || removeCmd.getRole() == RoleEnum.ORDER) {                filePath = filePath + \"stopNode.sh\";                Part part = request.getPart(\"file\");                part.write(filePath);            }            // log.info(\"\u4ece\u8282\u70b9\u6536\u5230\u79fb\u9664\u6307\u4ee4\");            log.info(\"The slave node received the removal instruction\");            String domain = removeCmd.getRole() == RoleEnum.ORDER ? removeCmd.getOrdererDomain() : removeCmd.getPeerDomain();            updateService.removeNode(removeCmd.getRole(), domain, removeCmd.getHostNames(), removeCmd.getPorts());        } catch (Exception e) {            e.printStackTrace();            response.setCode(ResponseCode.Fail.getCode());        }        return new HttpInstallResponse();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-api/src/main/java/com/cgb/bcpinstall/api/controller/InstallController.java", "stars": "7", "class": {"name": "InstallController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doUpdate", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "HttpInstallResponse", "snippet": "    public HttpInstallResponse doUpdate(HttpServletRequest request) {        HttpInstallResponse response = new HttpInstallResponse();        try {            Part contentPart = request.getPart(\"content\");            ByteArrayOutputStream os = new ByteArrayOutputStream();            IOUtils.copy(contentPart == null ? request.getInputStream() : contentPart.getInputStream(), os);            String content = os.toString();            UpdateCmd cmd = JSONObject.parseObject(content, UpdateCmd.class);            Part part = request.getPart(\"file\");            installBiz.handleUpdate(cmd, part);        } catch (Exception e) {            // log.error(\"\u63a5\u6536\u66f4\u65b0\u6307\u4ee4\u5f02\u5e38\", e);            log.error(\"Receive update instruction exception\", e);            response.setCode(ResponseCode.Fail.getCode());            e.printStackTrace();        }        return response;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-api/src/main/java/com/cgb/bcpinstall/api/controller/InstallController.java", "stars": "7", "class": {"name": "InstallController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "installFinished", "params": ["InstallResult", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "HttpInstallResponse", "snippet": "    public HttpInstallResponse installFinished(@RequestBody InstallResult result, HttpServletRequest request) {        // log.info(String.format(\"\u4ece\u8282\u70b9 %s \u5b8c\u6210\u5b89\u88c5\", request.getRemoteAddr()));        log.info(String.format(\"Slave node %s completes the installation\", request.getRemoteAddr()));        modeService.updateInstallResult(request.getRemoteAddr(), result, null);        return new HttpInstallResponse();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-api/src/main/java/com/cgb/bcpinstall/api/controller/InstallController.java", "stars": "7", "class": {"name": "InstallController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "endInstall", "params": ["EndCmd"], "throws": null, "modifiers": ["public"], "return_type": "HttpInstallResponse", "snippet": "    public HttpInstallResponse endInstall(@RequestBody EndCmd result) {        // log.info(\"\u4ece\u8282\u70b9\u6536\u5230\u7ed3\u675f\u5b89\u88c5\u6307\u4ee4\");        log.info(\"The master node receives the end installation instruction\");        this.installBiz.doEnd();        return new HttpInstallResponse();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-api/src/main/java/com/cgb/bcpinstall/api/controller/InstallController.java", "stars": "7", "class": {"name": "InstallController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/nestedresulthandler_multiple_association/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/nestedresulthandler_multiple_association/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/NestedResultHandlerMultipleAssociationTest.java", "stars": "15", "class": {"name": "NestedResultHandlerMultipleAssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "failure", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void failure() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      // Parents have child going from somewhere to somewhere, they are stored in      // a Binome object      // In this test we have 2 parents:      // Parent1 is going from Child1 to Child2      // Parent2 is going from Child2 to Child3 and from Child1 to Child2      // You'll see a NULL entry in the list instead of the Binome Child1/Child2      List<ParentBean> list = sqlSession.selectList(\"selectParentBeans\");      for (ParentBean pb : list) {        for (Binome<ChildBean, ChildBean> childs : pb.getChilds()) {          Assertions.assertNotNull(childs);          Assertions.assertNotNull(childs.getOne());          Assertions.assertNotNull(childs.getTwo());        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/NestedResultHandlerMultipleAssociationTest.java", "stars": "15", "class": {"name": "NestedResultHandlerMultipleAssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "success", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void success() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      ParentBean parent = sqlSession.selectOne(\"selectParentBeanById\", 2);      // If you only select the Parent2 it works      for (Binome<ChildBean, ChildBean> childs : parent.getChilds()) {        Assertions.assertNotNull(childs);        Assertions.assertNotNull(childs.getOne());        Assertions.assertNotNull(childs.getTwo());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/NestedResultHandlerMultipleAssociationTest.java", "stars": "15", "class": {"name": "NestedResultHandlerMultipleAssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPropertyOfD3dUsed", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean getPropertyOfD3dUsed() {        String s = Application.getProperties().getProperty(PROPERTY_USE_D3D);        if (s == null) {            s = System.getProperty(\"sun.java2d.d3d\");        }        if (s == null) {            return false;        }        else {            return Boolean.parseBoolean(s);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setPropertyOfD3dUsed", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPropertyOfD3dUsed(boolean value) {        Application.getProperties().setProperty(PROPERTY_USE_D3D, Boolean.toString(value));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start() {        try {            // \u521d\u671f\u5316            app = new JR100Application();            app.setComputer(new JR100(app, romfilename));            app.createGui(                \"JR-100\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\",                Toolkit.getDefaultToolkit().getImage(app.getClass().getResource(\"/jr100emuicon.png\")));            new Thread(app.getComputer()).start();        }        catch (Throwable e) {            getLogger().log(Level.SEVERE, \"\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\", e);            System.exit(0);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createMenuBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JMenuBar", "snippet": "    public JMenuBar createMenuBar() {        if (MB_menubar == null) {            MB_menubar = new JMenuBar();            MB_menubar.add(getFileMenu());            MB_menubar.add(getToolMenu());            MB_menubar.add(getConfigurationMenu());            MB_menubar.add(getHelpMenu());        }        return MB_menubar;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getFileMenu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenu", "snippet": "    private JMenu getFileMenu() {        if (M_file == null) {            M_file = new JMenu(\"\u30d5\u30a1\u30a4\u30eb\");            M_file.add(getOpenMenuItem());            M_file.add(getSaveMenuItem());            M_file.add(getExitMenuItem());        }        return M_file;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getOpenMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getOpenMenuItem() {        if (MI_open == null) {            MI_open = new JMenuItem(\"\u958b\u304f\");            MI_open.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    FileOpenHooker f = new FileOpenHooker(getComputer(), JR100Application.this);                    f.openDialog();                }            });        }        return MI_open;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getSaveMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getSaveMenuItem() {        if (MI_save == null) {            MI_save = new JMenuItem(\"\u4fdd\u5b58\");            MI_save.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    FileSaveDialog d = new FileSaveDialog(getComputer(), JR100Application.this);                    d.setVisible(true);                    // FileExportDialog d = new FileExportDialog(getComputer(), JR100Application.this);                    // d.setVisible(true);                }            });        }        return MI_save ;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getExitMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getExitMenuItem() {        if (MI_exit == null) {            MI_exit = new JMenuItem(\"\u7d42\u4e86\");            MI_exit.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    System.exit(0);                }            });        }        return MI_exit;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getToolMenu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenu", "snippet": "    private JMenu getToolMenu() {        if (M_tool == null) {            M_tool = new JMenu(\"\u30c4\u30fc\u30eb\");            M_tool.add(getDisassembleMenuItem());            M_tool.addSeparator();            M_tool.add(getPauseMenuItem());            M_tool.add(getResetMenuItem());            M_tool.add(getPowerMenu());            M_tool.add(getSnapshotMenu());        }        return M_tool;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDisassembleMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getDisassembleMenuItem() {        if (MI_disassemble == null) {            MI_disassemble = new JMenuItem(\"\u9006\u30a2\u30bb\u30f3\u30d6\u30eb\");            MI_disassemble.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    DisassembleDialog d = new DisassembleDialog(getComputer(), JR100Application.this);                    d.setVisible(true);                }            });        }        return MI_disassemble;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "changePowerMenuComponents", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void changePowerMenuComponents(int new_status) {        if (new_status == Computer.STATUS_PAUSED) {            MI_powerOn.setSelected(true);            MI_powerOff.setSelected(false);            MI_pause.setSelected(true);            MI_pause.setEnabled(true);            MI_reset.setEnabled(true);            BT_powerOff.setEnabled(true);            BT_pause.setEnabled(false);            BT_resume.setEnabled(true);        }        else if (new_status == Computer.STATUS_STOPPED) {            MI_powerOn.setSelected(false);            MI_powerOff.setSelected(true);            MI_pause.setSelected(false);            MI_pause.setEnabled(false);            MI_reset.setEnabled(false);            BT_powerOff.setEnabled(false);            BT_pause.setEnabled(false);            BT_resume.setEnabled(true);        }        else if (new_status == Computer.STATUS_RUNNING) {            MI_powerOn.setSelected(true);            MI_powerOff.setSelected(false);            MI_pause.setSelected(false);            MI_pause.setEnabled(true);            MI_reset.setEnabled(true);            BT_powerOff.setEnabled(true);            BT_pause.setEnabled(true);            BT_resume.setEnabled(false);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPauseMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JCheckBoxMenuItem", "snippet": "    private JCheckBoxMenuItem getPauseMenuItem() {        if (MI_pause == null) {            MI_pause = new JCheckBoxMenuItem(\"\u4e00\u6642\u505c\u6b62\");            MI_pause.setSelected(getComputer().getRunningStatus() == Computer.STATUS_PAUSED);            MI_pause.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    if (MI_pause.isSelected()) {                        getComputer().pause();                        changePowerMenuComponents(Computer.STATUS_PAUSED);                    }                    else {                        getComputer().resume();                        changePowerMenuComponents(Computer.STATUS_RUNNING);                    }                }            });        }        return MI_pause;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getResetMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getResetMenuItem() {        if (MI_reset == null) {            MI_reset = new JMenuItem(\"\u30ea\u30bb\u30c3\u30c8\");            MI_reset.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().reset();                    changePowerMenuComponents(Computer.STATUS_RUNNING);                }            });        }        return MI_reset;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPowerMenu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getPowerMenu() {        if (MI_power == null) {            MI_power = (JMenuItem)new JMenu(\"\u96fb\u6e90\");            ((JMenu)MI_power).add(getPowerOnMenuItem());            ((JMenu)MI_power).add(getPowerOffMenuItem());            ButtonGroup g = new ButtonGroup();            g.add(MI_powerOn);            g.add(MI_powerOff);            if (getComputer().getRunningStatus() == Computer.STATUS_RUNNING ||                    getComputer().getRunningStatus() == Computer.STATUS_PAUSED) {                MI_powerOn.setSelected(true);            }            else {                MI_powerOff.setSelected(true);            }        }        return MI_power;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPowerOnMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButtonMenuItem", "snippet": "    private JRadioButtonMenuItem getPowerOnMenuItem() {        if (MI_powerOn == null) {            MI_powerOn = new JRadioButtonMenuItem(\"On\");            MI_powerOn.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    if (getComputer().getRunningStatus() == Computer.STATUS_STOPPED) {                        synchronized(getComputer()) {                            getComputer().notify();                        }                        changePowerMenuComponents(Computer.STATUS_RUNNING);                    }                }            });        }        return MI_powerOn;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPowerOffMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButtonMenuItem", "snippet": "    private JRadioButtonMenuItem getPowerOffMenuItem() {        if (MI_powerOff == null) {            MI_powerOff = new JRadioButtonMenuItem(\"Off\");            MI_powerOff.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    if (getComputer().getRunningStatus() != Computer.STATUS_STOPPED) {                        getComputer().powerOff();                    }                    changePowerMenuComponents(Computer.STATUS_STOPPED);                }            });        }        return MI_powerOff ;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getSnapshotMenu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenu", "snippet": "    private JMenu getSnapshotMenu() {        if (M_snapshot == null) {            M_snapshot = new JMenu(\"\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\");            M_snapshot.add(getTakeSnapshotMenuItem());            M_snapshot.add(getRevertSnapshotMenuItem());        }        return M_snapshot;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getTakeSnapshotMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getTakeSnapshotMenuItem() {        if (MI_takeSnapshot == null) {            MI_takeSnapshot = new JMenuItem(\"\u63a1\u53d6\");            MI_takeSnapshot.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    TakeSnapshotDialog d = new TakeSnapshotDialog(getComputer(), JR100Application.this);                    d.setVisible(true);                }            });        }        return MI_takeSnapshot;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getRevertSnapshotMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getRevertSnapshotMenuItem() {        if (MI_revertSnapshot == null) {            MI_revertSnapshot = new JMenuItem(\"\u5fa9\u5143\");            MI_revertSnapshot.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    RevertSnapshotDialog d = new RevertSnapshotDialog(getComputer(), JR100Application.this);                    d.setVisible(true);                }            });        }        return MI_revertSnapshot;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getConfigurationMenu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenu", "snippet": "    private JMenu getConfigurationMenu() {        if (M_configuration == null) {            M_configuration = new JMenu(\"\u8a2d\u5b9a\");            M_configuration.add(getCPUMenuItem());            M_configuration.add(getDisplayMenu());            M_configuration.add(getSoundMenuItem());            M_configuration.add(setInputDeviceMenuItem());            M_configuration.add(getPropertyMenuItem());            M_configuration.add(getSaveConfigurationMenuItem());        }        return M_configuration;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCPUMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getCPUMenuItem() {        if (MI_cpu == null) {            MI_cpu = new JMenuItem(\"CPU...\");            MI_cpu.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    CpuConfigurationDialog d = new CpuConfigurationDialog(getComputer(), JR100Application.this);                    d.setVisible(true);                }            });        }        return MI_cpu;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDisplayMenu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenu", "snippet": "    private JMenu getDisplayMenu() {        if (M_display == null) {            M_display = new JMenu(\"\u753b\u9762\");            M_display.add(getDisplayColorMenu());            M_display.add(getDisplayScaling());        }        return M_display;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDisplayColorMenu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenu", "snippet": "    private JMenu getDisplayColorMenu() {        if (M_displayColor == null) {            M_displayColor = new JMenu(\"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\");            M_displayColor.add(getMonochromeMenuItem());            M_displayColor.add(getGreenMenuItem());            M_displayColor.add(getOrangeMenuItem());            M_displayColor.add(getColor8MenuItem());            ButtonGroup g = new ButtonGroup();            g.add(getMonochromeMenuItem());            g.add(getGreenMenuItem());            g.add(getOrangeMenuItem());            g.add(getColor8MenuItem());            switch (getComputer().getHardware().getDisplay().getPropertyOfDisplayType()) {            case JR100Display.DISPLAYTYPE_MONOCHROME:                getMonochromeMenuItem().setSelected(true);                break;            case JR100Display.DISPLAYTYPE_GREEN:                getGreenMenuItem().setSelected(true);                break;            case JR100Display.DISPLAYTYPE_AMBER:                getOrangeMenuItem().setSelected(true);                break;            case JR100Display.DISPLAYTYPE_COLOR:                getColor8MenuItem().setSelected(true);                break;            default:                break;            }        }        return M_displayColor;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getMonochromeMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButtonMenuItem", "snippet": "    private JRadioButtonMenuItem getMonochromeMenuItem() {        if (MI_monochrome == null) {            MI_monochrome = new JRadioButtonMenuItem(\"\u767d\u9ed2\");            MI_monochrome.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().setPropertyOfDisplayType(JR100Display.DISPLAYTYPE_MONOCHROME);                }            });        }        return MI_monochrome;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getGreenMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButtonMenuItem", "snippet": "    private JRadioButtonMenuItem getGreenMenuItem() {        if (MI_green == null) {            MI_green = new JRadioButtonMenuItem(\"\u30b0\u30ea\u30fc\u30f3\");            MI_green.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().setPropertyOfDisplayType(JR100Display.DISPLAYTYPE_GREEN);                }            });        }        return MI_green;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getOrangeMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButtonMenuItem", "snippet": "    private JRadioButtonMenuItem getOrangeMenuItem() {        if (MI_orange == null) {            MI_orange = new JRadioButtonMenuItem(\"\u30a2\u30f3\u30d0\u30fc\");            MI_orange.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().setPropertyOfDisplayType(JR100Display.DISPLAYTYPE_AMBER);                }            });        }        return MI_orange;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getColor8MenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButtonMenuItem", "snippet": "    private JRadioButtonMenuItem getColor8MenuItem() {        if (MI_color8 == null) {            MI_color8 = new JRadioButtonMenuItem(\"\u30ab\u30e9\u30fc\");            MI_color8.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().setPropertyOfDisplayType(JR100Display.DISPLAYTYPE_COLOR);                }            });        }        return MI_color8;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDisplayScaling", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenu", "snippet": "    private JMenu getDisplayScaling() {        if (M_displayScaling == null) {            M_displayScaling = new JMenu(\"\u62e1\u5927\u7387\");            M_displayScaling.add(getX1MenuItem());            M_displayScaling.add(getX2MenuItem());            switch (getComputer().getHardware().getDisplay().getPropertyOfDisplayScaling()) {            case 1:                getX1MenuItem().setSelected(true);                break;            case 2:                getX2MenuItem().setSelected(true);                break;            default:                break;            }            ButtonGroup g = new ButtonGroup();            g.add(getX1MenuItem());            g.add(getX2MenuItem());        }        return M_displayScaling;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getX1MenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButtonMenuItem", "snippet": "    private JRadioButtonMenuItem getX1MenuItem() {        if (MI_x1 == null) {            MI_x1 = new JRadioButtonMenuItem(\"x1\");            MI_x1.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().setPropertyOfDisplayScaling(1);                }            });        }        return MI_x1;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getX2MenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButtonMenuItem", "snippet": "    private JRadioButtonMenuItem getX2MenuItem() {        if (MI_x2 == null) {            MI_x2 = new JRadioButtonMenuItem(\"x2\");            MI_x2.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().setPropertyOfDisplayScaling(2);                }            });        }        return MI_x2;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getSoundMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getSoundMenuItem() {        if (MI_sound == null) {            MI_sound = new JMenuItem(\"\u97f3...\");            MI_sound.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    VolumeDialog d = new VolumeDialog(getComputer(), JR100Application.this);                    d.setVisible(true);                }            });        }        return MI_sound;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setInputDeviceMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem setInputDeviceMenuItem() {        if (MI_inputDevice == null) {            MI_inputDevice = new JMenuItem(\"\u5165\u529b\u30c7\u30d0\u30a4\u30b9...\");            MI_inputDevice.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    InputDeviceConfigurationDialog d = new InputDeviceConfigurationDialog(getComputer(), JR100Application.this);                    d.setVisible(true);                }            });        }        return MI_inputDevice;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPropertyMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getPropertyMenuItem() {        if (MI_property == null) {            MI_property = new JMenuItem(\"\u30d7\u30ed\u30d1\u30c6\u30a3...\");            MI_property.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    PropertyDialog d = new PropertyDialog(getComputer(), JR100Application.this);                    d.setVisible(true);                }            });        }        return MI_property;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getSaveConfigurationMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getSaveConfigurationMenuItem() {        if (MI_saveConfiguration == null) {            MI_saveConfiguration = new JMenuItem(\"\u8a2d\u5b9a\u306e\u4fdd\u5b58\");            MI_saveConfiguration.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    saveProperties(PROPERTIES_FILENAME);                }            });        }        return MI_saveConfiguration;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getHelpMenu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenu", "snippet": "    private JMenu getHelpMenu() {        if (M_help == null) {            M_help = new JMenu(\"\u30d8\u30eb\u30d7\");            M_help.add(getHelpTOC());            M_help.add(getAboutMenuItem());        }        return M_help;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getHelpTOC", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getHelpTOC() {        if (MI_helpTOC == null) {            MI_helpTOC = new JMenuItem(\"\u30d8\u30eb\u30d7\u76ee\u6b21\");            HelpSet helpset = null;            HelpBroker broker = null;            ClassLoader cl = JR100Application.class.getClassLoader();            try {                URL url = HelpSet.findHelpSet(cl, \"ug.hs\");                helpset = new HelpSet(null, url);            }            catch (Throwable e) {                getLogger().log(Level.SEVERE, \"\u30d8\u30eb\u30d7\u30bb\u30c3\u30c8\u306e\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);                return MI_helpTOC;            }            CSH.setHelpIDString(MI_helpTOC, \"top\");            broker = helpset.createHelpBroker();            MI_helpTOC.addActionListener(new CSH.DisplayHelpFromSource(broker));        }        return MI_helpTOC;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getAboutMenuItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JMenuItem", "snippet": "    private JMenuItem getAboutMenuItem() {        if (MI_about == null) {            MI_about = new JMenuItem(\"JR-100\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\");            MI_about.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    AboutDialog d = new AboutDialog(JR100Application.this);                    d.setVisible(true);                }            });        }        return MI_about;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createStatusBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JPanel", "snippet": "    public JPanel createStatusBar() {        if (P_statusBar == null) {            P_statusBar = new JPanel();            P_statusBar.setLayout(new BoxLayout(P_statusBar, BoxLayout.LINE_AXIS));            P_statusBar.add(createPowerOffButton());            P_statusBar.add(createPauseButton());            P_statusBar.add(createResumeButton());            P_statusBar.add(Box.createRigidArea(new Dimension(16, 16)));            P_statusBar.add(createTakeSnapshotButton());            P_statusBar.add(createRevertSnapshotButton());            P_statusBar.add(Box.createHorizontalGlue());        }        return P_statusBar;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createPowerOffButton", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton createPowerOffButton() {        if (BT_powerOff == null) {            BT_powerOff = new JButton();            BT_powerOff.setPreferredSize(new Dimension(16, 16));            BT_powerOff.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().getImage(app.getClass().getResource(\"/power.png\"))));            BT_powerOff.setToolTipText(\"\u96fb\u6e90OFF\");            if (getComputer().getRunningStatus() == Computer.STATUS_RUNNING ||                    getComputer().getRunningStatus() == Computer.STATUS_PAUSED) {                BT_powerOff.setEnabled(true);            }            else {                BT_powerOff.setEnabled(false);            }            BT_powerOff.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    if (getComputer().getRunningStatus() != Computer.STATUS_STOPPED) {                        getComputer().powerOff();                    }                    changePowerMenuComponents(Computer.STATUS_STOPPED);                }            });        }        return BT_powerOff;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createPauseButton", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton createPauseButton() {        if (BT_pause == null) {            BT_pause = new JButton();            BT_pause.setPreferredSize(new Dimension(16, 16));            BT_pause.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().getImage(app.getClass().getResource(\"/pause.png\"))));            BT_pause.setToolTipText(\"\u4e00\u6642\u505c\u6b62\");            BT_pause.setEnabled(true);            BT_pause.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().requestFocusInWindow();                    getComputer().pause();                    changePowerMenuComponents(Computer.STATUS_PAUSED);                }            });        }        return BT_pause;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createResumeButton", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton createResumeButton() {        if (BT_resume == null) {            BT_resume = new JButton();            BT_resume.setPreferredSize(new Dimension(16, 16));            BT_resume.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().getImage(app.getClass().getResource(\"/resume.png\"))));            BT_resume.setToolTipText(\"\u518d\u958b/\u96fb\u6e90ON\");            if (getComputer().getRunningStatus() == Computer.STATUS_RUNNING ||                    getComputer().getRunningStatus() == Computer.STATUS_PAUSED) {                BT_resume.setEnabled(false);            }            else {                BT_resume.setEnabled(true);            }            BT_resume.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().requestFocusInWindow();                    if (getComputer().getRunningStatus() == Computer.STATUS_STOPPED) {                        synchronized(getComputer()) {                            getComputer().notify();                        }                    }                    else if (getComputer().getRunningStatus() == Computer.STATUS_PAUSED) {                        getComputer().resume();                    }                    changePowerMenuComponents(Computer.STATUS_RUNNING);                }            });        }        return BT_resume;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createTakeSnapshotButton", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton createTakeSnapshotButton() {        if (BT_takeSnapshot == null) {            BT_takeSnapshot = new JButton();            BT_takeSnapshot.setPreferredSize(new Dimension(16, 16));            BT_takeSnapshot.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().getImage(app.getClass().getResource(\"/take_snapshot.png\"))));            BT_takeSnapshot.setToolTipText(\"\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u63a1\u53d6\");            BT_takeSnapshot.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().requestFocusInWindow();                    try {                        getComputer().pause();                        changePowerMenuComponents(Computer.STATUS_PAUSED);                        saveState();                    }                    catch (FileNotFoundException ex) {                        JOptionPane.showMessageDialog(                            null,                            ex.getMessage(),                            \"ERROR\",                            JOptionPane.ERROR_MESSAGE);                            return ;                    }                    catch (IOException ex) {                        JOptionPane.showMessageDialog(                            null,                            ex.getMessage(),                            \"ERROR\",                            JOptionPane.ERROR_MESSAGE);                        return ;                    }                    finally {                        getComputer().resume();                        changePowerMenuComponents(Computer.STATUS_RUNNING);                    }                }            });        }        return BT_takeSnapshot;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createRevertSnapshotButton", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton createRevertSnapshotButton() {        if (BT_revertSnapshot == null) {            BT_revertSnapshot = new JButton();            BT_revertSnapshot.setPreferredSize(new Dimension(16, 16));            BT_revertSnapshot.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().getImage(app.getClass().getResource(\"/revert_snapshot.png\"))));            BT_revertSnapshot.setToolTipText(\"\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u5fa9\u5143\");            BT_revertSnapshot.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    getComputer().getHardware().getDisplay().requestFocusInWindow();                    try {                        getComputer().pause();                        changePowerMenuComponents(Computer.STATUS_PAUSED);                        loadState();                    }                    catch (FileNotFoundException ex) {                        JOptionPane.showMessageDialog(                            null,                            ex.getMessage(),                            \"ERROR\",                            JOptionPane.ERROR_MESSAGE);                            return ;                    }                    catch (IOException ex) {                        JOptionPane.showMessageDialog(                            null,                            ex.getMessage(),                            \"ERROR\",                            JOptionPane.ERROR_MESSAGE);                        return ;                    }                    finally {                        getComputer().resume();                        changePowerMenuComponents(Computer.STATUS_RUNNING);                    }                }            });        }        return BT_revertSnapshot;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        loadProperties(PROPERTIES_FILENAME);        initializeLogger(\"JR-100 Emulator Logger\", LOGFILE_NAME);        // \u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u8a2d\u5b9a        System.setProperty(\"sun.java2d.d3d\", Boolean.toString(getPropertyOfD3dUsed()));        if (args.length == 0) {            romfilename = DEFAULT_ROM_FILE_NAME;        }        else {            romfilename = args[0];        }        SwingUtilities.invokeLater(new Runnable() {            public void run() {                start();            }        });    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Application.java", "stars": "4", "class": {"name": "JR100Application", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoads() {\t}", "url": "https://raw.githubusercontent.com/WhiteFerrari666/Medication/develop/src/test/java/com/Medication/Medication/MedicationApplicationTests.java", "stars": "2", "class": {"name": "MedicationApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getVersion() {\t\treturn determineSpringBootVersion();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java", "stars": "47572", "class": {"name": "SpringBootVersion", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "determineSpringBootVersion", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "\tprivate static String determineSpringBootVersion() {\t\tString implementationVersion = SpringBootVersion.class.getPackage().getImplementationVersion();\t\tif (implementationVersion != null) {\t\t\treturn implementationVersion;\t\t}\t\tCodeSource codeSource = SpringBootVersion.class.getProtectionDomain().getCodeSource();\t\tif (codeSource == null) {\t\t\treturn null;\t\t}\t\tURL codeSourceLocation = codeSource.getLocation();\t\ttry {\t\t\tURLConnection connection = codeSourceLocation.openConnection();\t\t\tif (connection instanceof JarURLConnection) {\t\t\t\treturn getImplementationVersion(((JarURLConnection) connection).getJarFile());\t\t\t}\t\t\ttry (JarFile jarFile = new JarFile(new File(codeSourceLocation.toURI()))) {\t\t\t\treturn getImplementationVersion(jarFile);\t\t\t}\t\t}\t\tcatch (Exception ex) {\t\t\treturn null;\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java", "stars": "47572", "class": {"name": "SpringBootVersion", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getImplementationVersion", "params": ["JarFile"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "String", "snippet": "\tprivate static String getImplementationVersion(JarFile jarFile) throws IOException {\t\treturn jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.IMPLEMENTATION_VERSION);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java", "stars": "47572", "class": {"name": "SpringBootVersion", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "execute", "params": ["LibraryData"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(LibraryData data) {               System.out.println(helpOutput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/HelpCmd.java", "stars": "6", "class": {"name": "HelpCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildHelpOutput", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String buildHelpOutput() {        final String padding = \"\\n  \";        StringBuilder bld = new StringBuilder(\"The following commands are available:\");        bld.append(padding).append(CommandType.HELP);        bld.append(padding).append(CommandType.EXIT);        bld.append(padding).append(CommandType.ADD).append(\" path/to/book/data.csv\");        bld.append(padding).append(CommandType.LIST).append(\" [short|long]\");        bld.append(padding).append(CommandType.SEARCH).append(\" <value>\");        bld.append(padding).append(CommandType.REMOVE).append(\" TITLE|AUTHOR <value>\");        bld.append(padding).append(CommandType.GROUP).append(\" TITLE|AUTHOR\");        return bld.toString();    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/HelpCmd.java", "stars": "6", "class": {"name": "HelpCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyObjectFoo.java", "stars": "15", "class": {"name": "LazyObjectFoo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyObjectFoo.java", "stars": "15", "class": {"name": "LazyObjectFoo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLazyObjectBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LazyObjectBar", "snippet": "  public LazyObjectBar getLazyObjectBar() {    return this.lazyObjectBar;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyObjectFoo.java", "stars": "15", "class": {"name": "LazyObjectFoo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLazyObjectBar", "params": ["LazyObjectBar"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLazyObjectBar(final LazyObjectBar lazyObjectBar) {    this.lazyObjectBar = lazyObjectBar;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyObjectFoo.java", "stars": "15", "class": {"name": "LazyObjectFoo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMessage(@StringRes int id) {            return setMessage(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/WaitDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setMessage", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMessage(CharSequence text) {            mMessageView.setText(text);            mMessageView.setVisibility(text == null ? View.GONE : View.VISIBLE);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/WaitDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tint[] a = new int[10];\t\tfor(int i = 0; i < 10; i++)\t\t\ta[i] = i;\t\tSystem.out.println(Arrays.toString(a));    \t\t/*\u6570\u7ec4\u8f93\u51fa\u7684\u65f6\u5019\u7528Arrays\u7c7b\u4e2d\u7684toString\u65b9\u6cd5\u6548\u679c\u66f4\u4f73\t\t * \u4e14\u53ef\u4ee5\u907f\u514d\u51fa\u73b0[I@50cbc42f\u7684\u60c5\u51b5\uff08\u6b64\u4e3a\u6570\u7ec4\u7b2c\u4e00\u5143\u7d20\u7684\u5730\u5740\uff09\t\t * */\t\t\t\tfor(int i = 0; i < a.length; i++)    /*\u5faa\u73afa\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20*/\t\t\tSystem.out.println(a[i]);\t\tSystem.out.print(\"\\n\");\t\t\t\tfor(int element : a)    /*for each\u5faa\u73af\uff0c\u5faa\u73afa\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\t\t                          \u4f18\u70b9\u662f\u4e0d\u7528\u4e3a\u4e0b\u6807\u7684\u8d77\u59cb\u503c\u548c\u7ec8\u6b62\u503c\u64cd\u5fc3\uff0c\u4e0d\u6613\u51fa\u9519*/\t\t\tSystem.out.println(element);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Shuzu.java", "stars": "2", "class": {"name": "Shuzu", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["Record", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Record", "snippet": "    public Record evaluate(Record record, Object... paras) {        int columnIndex;        String code;        String value;        try {            if (paras.length != 3) {                throw new RuntimeException(\"dx_filter paras must be 3\");            }            columnIndex = (Integer) paras[0];            code = (String) paras[1];            value = (String) paras[2];            if (StringUtils.isEmpty(value)) {                throw new RuntimeException(\"dx_filter para 2 can't be null\");            }        } catch (Exception e) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_ILLEGAL_PARAMETER, \"paras:\" + Arrays.asList(paras).toString() + \" => \" + e.getMessage());        }        Column column = record.getColumn(columnIndex);        try {            if (code.equalsIgnoreCase(\"not like\")) {                return doLike(record, value, column);            } else if (code.equalsIgnoreCase(\"like\")) {                return doNotLike(record, value, column);            } else if (code.equalsIgnoreCase(\"<=\")) {                return doGreat(record, value, column, false);            } else if (code.equalsIgnoreCase(\">=\")) {                return doLess(record, value, column, false);            } else if (code.equalsIgnoreCase(\"!=\") ) {                return doEqual(record, value, column);            } else if (code.equalsIgnoreCase(\"=\") || code.equalsIgnoreCase(\"==\")) {                return doNotEqual(record, value, column);            } else if (code.equalsIgnoreCase(\"<\")) {                return doGreat(record, value, column, true);            } else if (code.equalsIgnoreCase(\">\")) {                return doLess(record, value, column, true);            } else {                throw new RuntimeException(\"dx_filter can't suport code:\" + code);            }        } catch (Exception e) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_RUN_EXCEPTION, e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/FilterTransformer.java", "stars": "23", "class": {"name": "FilterTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doGreat", "params": ["Record", "String", "Column", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "Record", "snippet": "    private Record doGreat(Record record, String value, Column column, boolean hasEqual) {        //\u5982\u679c\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u76f4\u63a5\u4e0d\u53c2\u4e0e\u6bd4\u8f83\u3002\u5373\u7a7a\u4e5f\u5c5e\u4e8e\u65e0\u7a77\u5c0f        if (column.getRawData() == null) {            return record;        }        if (column instanceof DoubleColumn) {            Double ori = column.asDouble();            double val = Double.parseDouble(value);            if (hasEqual) {                if (ori >= val) {                    return null;                } else {                    return record;                }            } else {                if (ori > val) {                    return null;                } else {                    return record;                }            }        } else if (column instanceof LongColumn || column instanceof DateColumn) {            Long ori = column.asLong();            long val = Long.parseLong(value);            if (hasEqual) {                if (ori >= val) {                    return null;                } else {                    return record;                }            } else {                if (ori > val) {                    return null;                } else {                    return record;                }            }        } else if (column instanceof StringColumn || column instanceof BytesColumn || column instanceof BoolColumn) {            String ori = column.asString();            if (hasEqual) {                if (ori.compareTo(value) >= 0) {                    return null;                } else {                    return record;                }            } else {                if (ori.compareTo(value) > 0) {                    return null;                } else {                    return record;                }            }        } else {            throw new RuntimeException(\">=,> can't support this columnType:\" + column.getClass().getSimpleName());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/FilterTransformer.java", "stars": "23", "class": {"name": "FilterTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doLess", "params": ["Record", "String", "Column", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "Record", "snippet": "    private Record doLess(Record record, String value, Column column, boolean hasEqual) {        //\u5982\u679c\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u76f4\u63a5\u4e0d\u53c2\u4e0e\u6bd4\u8f83\u3002\u5373\u7a7a\u4e5f\u5c5e\u4e8e\u65e0\u7a77\u5927        if (column.getRawData() == null) {            return record;        }        if (column instanceof DoubleColumn) {            Double ori = column.asDouble();            double val = Double.parseDouble(value);            if (hasEqual) {                if (ori <= val) {                    return null;                } else {                    return record;                }            } else {                if (ori < val) {                    return null;                } else {                    return record;                }            }        } else if (column instanceof LongColumn || column instanceof DateColumn) {            Long ori = column.asLong();            long val = Long.parseLong(value);            if (hasEqual) {                if (ori <= val) {                    return null;                } else {                    return record;                }            } else {                if (ori < val) {                    return null;                } else {                    return record;                }            }        } else if (column instanceof StringColumn || column instanceof BytesColumn || column instanceof BoolColumn) {            String ori = column.asString();            if (hasEqual) {                if (ori.compareTo(value) <= 0) {                    return null;                } else {                    return record;                }            } else {                if (ori.compareTo(value) < 0) {                    return null;                } else {                    return record;                }            }        } else {            throw new RuntimeException(\"<=,< can't support this columnType:\" + column.getClass().getSimpleName());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/FilterTransformer.java", "stars": "23", "class": {"name": "FilterTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doEqual", "params": ["Record", "String", "Column"], "throws": null, "modifiers": ["private"], "return_type": "Record", "snippet": "    private Record doEqual(Record record, String value, Column column) {        //\u5982\u679c\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ea\u6bd4\u8f83\u76ee\u6807\u5b57\u6bb5\u4e3a\"null\"\uff0c\u5426\u5219null\u5b57\u6bb5\u5747\u4e0d\u8fc7\u6ee4        if (column.getRawData() == null) {            if (value.equalsIgnoreCase(\"null\")) {                return null;            } else {                return record;            }        }        if (column instanceof DoubleColumn) {            Double ori = column.asDouble();            double val = Double.parseDouble(value);            if (ori == val) {                return null;            } else {                return record;            }        } else if (column instanceof LongColumn || column instanceof DateColumn) {            Long ori = column.asLong();            long val = Long.parseLong(value);            if (ori == val) {                return null;            } else {                return record;            }        } else if (column instanceof StringColumn || column instanceof BytesColumn || column instanceof BoolColumn) {            String ori = column.asString();            if (ori.compareTo(value) == 0) {                return null;            } else {                return record;            }        } else {            throw new RuntimeException(\"== can't support this columnType:\" + column.getClass().getSimpleName());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/FilterTransformer.java", "stars": "23", "class": {"name": "FilterTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doNotEqual", "params": ["Record", "String", "Column"], "throws": null, "modifiers": ["private"], "return_type": "Record", "snippet": "    private Record doNotEqual(Record record, String value, Column column) {        //\u5982\u679c\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ea\u6bd4\u8f83\u76ee\u6807\u5b57\u6bb5\u4e3a\"null\", \u5426\u5219null\u5b57\u6bb5\u5747\u8fc7\u6ee4\u3002        if (column.getRawData() == null) {            if (value.equalsIgnoreCase(\"null\")) {                return record;            } else {                return null;            }        }        if (column instanceof DoubleColumn) {            Double ori = column.asDouble();            double val = Double.parseDouble(value);            if (ori != val) {                return null;            } else {                return record;            }        } else if (column instanceof LongColumn || column instanceof DateColumn) {            Long ori = column.asLong();            long val = Long.parseLong(value);            if (ori != val) {                return null;            } else {                return record;            }        } else if (column instanceof StringColumn || column instanceof BytesColumn || column instanceof BoolColumn) {            String ori = column.asString();            if (ori.compareTo(value) != 0) {                return null;            } else {                return record;            }        } else {            throw new RuntimeException(\"== can't support this columnType:\" + column.getClass().getSimpleName());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/FilterTransformer.java", "stars": "23", "class": {"name": "FilterTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doLike", "params": ["Record", "String", "Column"], "throws": null, "modifiers": ["private"], "return_type": "Record", "snippet": "    private Record doLike(Record record, String value, Column column) {        String orivalue = column.asString();        if (orivalue != null && orivalue.matches(value)) {            return null;        } else {            return record;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/FilterTransformer.java", "stars": "23", "class": {"name": "FilterTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doNotLike", "params": ["Record", "String", "Column"], "throws": null, "modifiers": ["private"], "return_type": "Record", "snippet": "    private Record doNotLike(Record record, String value, Column column) {        String orivalue = column.asString();        if (orivalue != null && orivalue.matches(value)) {            return record;        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/FilterTransformer.java", "stars": "23", "class": {"name": "FilterTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "addParent", "params": ["NodeBuilder"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addParent(final NodeBuilder builder) {    checkBuildersBelongToSameDag(builder);    // Add the relationship to the data structure internal to the builder instead of changing    // the associated node directly. This is done to prevent users of this method to change the    // structure of the dag after the DagBuilder::build method is called.    this.parents.add(builder);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/dag/NodeBuilder.java", "stars": "18", "class": {"name": "NodeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkBuildersBelongToSameDag", "params": ["NodeBuilder"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkBuildersBelongToSameDag(final NodeBuilder builder) {    if (builder.dagBuilder != this.dagBuilder) {      throw new DagException(String.format(\"Can't add a dependency from %s to %s since they \"          + \"belong to different DagBuilders.\", builder, this));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/dag/NodeBuilder.java", "stars": "18", "class": {"name": "NodeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addParents", "params": ["NodeBuilder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addParents(final NodeBuilder... builders) {    for (final NodeBuilder builder : builders) {      addParent(builder);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/dag/NodeBuilder.java", "stars": "18", "class": {"name": "NodeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addChildren", "params": ["NodeBuilder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addChildren(final NodeBuilder... builders) {    for (final NodeBuilder builder : builders) {      builder.addParent(this);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/dag/NodeBuilder.java", "stars": "18", "class": {"name": "NodeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParents", "params": [], "throws": null, "modifiers": [], "return_type": "Set<NodeBuilder>", "snippet": "  Set<NodeBuilder> getParents() {    return this.parents;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/dag/NodeBuilder.java", "stars": "18", "class": {"name": "NodeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return String.format(\"NodeBuilder (%s) in %s\", this.name, this.dagBuilder);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/dag/NodeBuilder.java", "stars": "18", "class": {"name": "NodeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "  String getName() {    return this.name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/dag/NodeBuilder.java", "stars": "18", "class": {"name": "NodeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["Dag"], "throws": null, "modifiers": ["public"], "return_type": "Node", "snippet": "  public Node build(final Dag dag) {    final Node node = new Node(this.name, this.nodeProcessor, dag);    dag.addNode(node);    return node;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/dag/NodeBuilder.java", "stars": "18", "class": {"name": "NodeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return count;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/MetaDto.java", "stars": "2", "class": {"name": "MetaDto", "extends": "MetaDomain", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCount(int count) {        this.count = count;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/MetaDto.java", "stars": "2", "class": {"name": "MetaDto", "extends": "MetaDomain", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPartialTicks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPartialTicks() {        return partialTicks;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/Render2DEvent.java", "stars": "12", "class": {"name": "Render2DEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\ttry{\t\t\tProperties properties = new Properties();\t\t\tInputStream is = Object.class.getResourceAsStream(configFile);\t\t\tproperties.load(is);\t\t\tif (is != null) {\t\t\t\tis.close();\t\t\t}\t\t\t\t\t\tfinal XServer xServer = new XServer(properties);\t\t\t\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(){\t\t\t\t@Override\t\t\t\tpublic void run() {\t\t\t\t\txServer.stop();\t\t\t\t}\t\t\t});\t\t\t\t\t\txServer.start();\t\t\t\t\t}catch(Exception e){\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/XStarter.java", "stars": "2", "class": {"name": "XStarter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onScrolled", "params": ["android", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onScrolled (android.support.v7.widget.RecyclerView p0, int p1, int p2)\t{\t\tn_onScrolled (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc6414252951f3f66c67/RecyclerViewScrollListener_2.java", "stars": "2", "class": {"name": "RecyclerViewScrollListener_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onScrolled", "params": ["android", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onScrolled (android.support.v7.widget.RecyclerView p0, int p1, int p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc6414252951f3f66c67/RecyclerViewScrollListener_2.java", "stars": "2", "class": {"name": "RecyclerViewScrollListener_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc6414252951f3f66c67/RecyclerViewScrollListener_2.java", "stars": "2", "class": {"name": "RecyclerViewScrollListener_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc6414252951f3f66c67/RecyclerViewScrollListener_2.java", "stars": "2", "class": {"name": "RecyclerViewScrollListener_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/design/widget/Snackbar_SnackbarActionClickImplementor.java", "stars": "2", "class": {"name": "Snackbar_SnackbarActionClickImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/design/widget/Snackbar_SnackbarActionClickImplementor.java", "stars": "2", "class": {"name": "Snackbar_SnackbarActionClickImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/design/widget/Snackbar_SnackbarActionClickImplementor.java", "stars": "2", "class": {"name": "Snackbar_SnackbarActionClickImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/design/widget/Snackbar_SnackbarActionClickImplementor.java", "stars": "2", "class": {"name": "Snackbar_SnackbarActionClickImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        // print first 5 natural numbers//        for (int i = 1; i <= 5; i++) {//            System.out.println(i);//        }        // while loop : when you dont know how many times loop will run//        int i = 1;//        while(i <= 5){//            System.out.println(i);//            i++; // i = i + 1;//        }        // arrays//        int[] arr = {4,3,5,7,8};//        for(int j=0; j < arr.length; j++){//            System.out.print(arr[j] + \" \");//        }        // <, >, ==        int a = 100;        if (a > 10){            System.out.println(\"a is more than 10\");        } else if(a < 10){            System.out.println(\"a is less than 10\");        } else{            System.out.println(\"a is equal to 10\");        }    }", "url": "https://raw.githubusercontent.com/kunal-kushwaha/Progate-Java-101/master/src/com/kunal/LoopsAndConditionals.java", "stars": "1", "class": {"name": "LoopsAndConditionals", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createStream", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "OutputStream", "snippet": "    public OutputStream createStream() throws IOException{        return createStream(\"\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createStream", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "OutputStream", "snippet": "    public OutputStream createStream(String name) throws IOException {        if(StringUtils.isBlank(name)){            name = \"1\";        }        StreamMeta streamMeta = new StreamMeta();        streamMeta.setName(name);        return createStream(streamMeta, DEFAULT_ENCODING);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createStream", "params": ["StreamMeta", "String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "OutputStream", "snippet": "    public OutputStream createStream(StreamMeta meta, String encoding) throws IOException{        if(StringUtils.isBlank(encoding)){            encoding = DEFAULT_ENCODING;        }        String metaJson = JSON.toJSONString(meta);        return createStream(metaJson.getBytes(encoding));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createStream", "params": ["byte"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "OutputStream", "snippet": "    private OutputStream createStream(byte[] metaData) throws IOException {        if(shutdown){            return null;        }        if(null != stream){            stream.close();            flush0();            streamChannel.push(ByteBlock.SEPARATOR);        }        this.streamMeta = metaData;        write0(this.streamMeta, 0, this.streamMeta.length);        flush0();        streamChannel.push(ByteBlock.SEPARATOR);        stream = new ChannelOutputStream();        return stream;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown(){        shutdown = true;        streamChannel.clear();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close(){        flush0();        streamChannel.close();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "write0", "params": ["byte", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void write0(byte[] b,  int off , int len){        while(len > 0){            pushToChannel();            int rest = byteBuffer.remaining();            if(rest > len){                byteBuffer.put(b, off, len);                break;            }else{                byteBuffer.put(b, off, rest);                off += rest;                len -= rest;            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "flush0", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void flush0(){        byteBuffer.flip();        if(byteBuffer.remaining() > 0){            streamChannel.push(new ByteBlock(byteBuffer));        }        byteBuffer = ByteBuffer.allocate(Math.toIntExact(blockSize));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pushToChannel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void pushToChannel(){        if(byteBuffer.remaining() <= 0){            byteBuffer.flip();            streamChannel.push(new ByteBlock(byteBuffer));            byteBuffer = ByteBuffer.allocate(Math.toIntExact(blockSize));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "write", "params": ["int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void write(int b) throws IOException {            if(isClosed){                throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"channel output stream has been closed\");            }            pushToChannel();            byteBuffer.put((byte)(b & 0xff));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutputStream", "extends": "OutputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "write", "params": ["byte", "int", "int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void write(byte[] b, int off, int len) throws IOException {            if(isClosed){                throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"channel output stream has been closed\");            }            if(b == null){                throw new NullPointerException();            }else if((off < 0) || (off > b.length) || (len < 0) ||                    ((off + len) > b.length) || ((off + len) < 0)){                throw new IndexOutOfBoundsException();            }else if (len == 0){                return;            }            write0(b, off ,len);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutputStream", "extends": "OutputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "flush", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void flush() throws IOException {            flush0();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutputStream", "extends": "OutputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void close() throws IOException {            flush();            isClosed = true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelOutput.java", "stars": "23", "class": {"name": "ChannelOutputStream", "extends": "OutputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "setThumb", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThumb(Drawable thumb) {        super.setThumb(thumb);        mThumb = thumb;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ButterSeekBar.java", "stars": "4", "class": {"name": "ButterSeekBar", "extends": "android", "implements": null, "modifiers": ["public"]}}, {"method_name": "getThumbDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "    public Drawable getThumbDrawable() {        return mThumb;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ButterSeekBar.java", "stars": "4", "class": {"name": "ButterSeekBar", "extends": "android", "implements": null, "modifiers": ["public"]}}, {"method_name": "handles", "params": ["GlideUrl"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean handles(@NonNull GlideUrl url) {        return true;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpLoader.java", "stars": "1", "class": {"name": "OkHttpLoader", "extends": null, "implements": ["ModelLoader"], "modifiers": ["public"]}}, {"method_name": "buildLoadData", "params": ["GlideUrl", "int", "int", "Options"], "throws": null, "modifiers": ["public"], "return_type": "LoadData<InputStream>", "snippet": "    public LoadData<InputStream> buildLoadData(@NonNull GlideUrl model, int width, int height,                                               @NonNull Options options) {        return new LoadData<>(model, new OkHttpFetcher(mFactory, model));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpLoader.java", "stars": "1", "class": {"name": "OkHttpLoader", "extends": null, "implements": ["ModelLoader"], "modifiers": ["public"]}}, {"method_name": "build", "params": ["MultiModelLoaderFactory"], "throws": null, "modifiers": ["public"], "return_type": "ModelLoader<GlideUrl,InputStream>", "snippet": "        public ModelLoader<GlideUrl, InputStream> build(@NonNull MultiModelLoaderFactory multiFactory) {            return new OkHttpLoader(mFactory);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpLoader.java", "stars": "1", "class": {"name": "Factory", "extends": null, "implements": ["ModelLoaderFactory"], "modifiers": ["public", "static"]}}, {"method_name": "teardown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void teardown() {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpLoader.java", "stars": "1", "class": {"name": "Factory", "extends": null, "implements": ["ModelLoaderFactory"], "modifiers": ["public", "static"]}}, {"method_name": "fromIndex", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "LeagueRules", "snippet": "    public static LeagueRules fromIndex(int index) {        LeagueRules rules = new LeagueRules();                if (index == 1) {            rules.minPacsPerPlayer = 1;            rules.maxPacsPerPlayer = 1;        }        if (index <= 2) {            rules.forOfWar = false;            rules.speedAbilityAvailable = false;            rules.switchAbilityAvailable = false;        }        if (index <= 3) {            rules.provideDeadPacs = false;        }        return rules;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/LeagueRules.java", "stars": "15", "class": {"name": "LeagueRules", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-test/src/test/java/com/yyj/securitytest/SecurityTestApplicationTests.java", "stars": "2", "class": {"name": "SecurityTestApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "init", "params": [], "throws": ["SecurityException"], "modifiers": [], "return_type": "void", "snippet": "\tvoid init() throws SecurityException {\t\tthis.defaultLocale = Locale.getDefault();\t\tLocale.setDefault(Locale.ENGLISH);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-liquibase/src/test/java/smoketest/liquibase/SampleLiquibaseApplicationTests.java", "stars": "47572", "class": {"name": "SampleLiquibaseApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "restoreLocale", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid restoreLocale() {\t\tLocale.setDefault(this.defaultLocale);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-liquibase/src/test/java/smoketest/liquibase/SampleLiquibaseApplicationTests.java", "stars": "47572", "class": {"name": "SampleLiquibaseApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testDefaultSettings", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid testDefaultSettings(CapturedOutput output) throws Exception {\t\ttry {\t\t\tSampleLiquibaseApplication.main(new String[] { \"--server.port=0\" });\t\t}\t\tcatch (IllegalStateException ex) {\t\t\tif (serverNotRunning(ex)) {\t\t\t\treturn;\t\t\t}\t\t}\t\tassertThat(output).contains(\"Successfully acquired change log lock\")\t\t\t\t.contains(\"Creating database history table with name: PUBLIC.DATABASECHANGELOG\")\t\t\t\t.contains(\"Table person created\")\t\t\t\t.contains(\"ChangeSet classpath:/db/changelog/db.changelog-master.yaml::1::\"\t\t\t\t\t\t+ \"marceloverdijk ran successfully\")\t\t\t\t.contains(\"New row inserted into person\")\t\t\t\t.contains(\"ChangeSet classpath:/db/changelog/\"\t\t\t\t\t\t+ \"db.changelog-master.yaml::2::marceloverdijk ran successfully\")\t\t\t\t.contains(\"Successfully released change log lock\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-liquibase/src/test/java/smoketest/liquibase/SampleLiquibaseApplicationTests.java", "stars": "47572", "class": {"name": "SampleLiquibaseApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "serverNotRunning", "params": ["IllegalStateException"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean serverNotRunning(IllegalStateException ex) {\t\tNestedCheckedException nested = new NestedCheckedException(\"failed\", ex) {\t\t};\t\tif (nested.contains(ConnectException.class)) {\t\t\tThrowable root = nested.getRootCause();\t\t\tif (root.getMessage().contains(\"Connection refused\")) {\t\t\t\treturn true;\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-liquibase/src/test/java/smoketest/liquibase/SampleLiquibaseApplicationTests.java", "stars": "47572", "class": {"name": "SampleLiquibaseApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/iterator/College.java", "stars": "2", "class": {"name": "College", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recupererInfosDemandeur_devrait_rediriger_vers_la_page_d_accueil_de_l_application_quand_le_cookie_code_postal_n_est_pas_present", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void recupererInfosDemandeur_devrait_rediriger_vers_la_page_d_accueil_de_l_application_quand_le_cookie_code_postal_n_est_pas_present() throws Exception {        // Given        Cookie cookieTypeRemettant = new Cookie(NOM_COOKIE_TYPE_REMETTANT, TYPE_REMETTANT);        // When Then        mockMvc.perform(MockMvcRequestBuilders.post(\"/saisie-distribution-masques\")                .cookie(cookieTypeRemettant))                .andExpect(view().name(\"redirect:/\"))                .andExpect(status().is3xxRedirection());    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/RecuperationInfosDemandeurControllerTest.java", "stars": "5", "class": {"name": "RecuperationInfosDemandeurControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "recupererInfosDemandeur_devrait_rediriger_vers_la_page_d_accueil_de_l_application_quand_le_cookie_type_remettant_n_est_pas_present", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void recupererInfosDemandeur_devrait_rediriger_vers_la_page_d_accueil_de_l_application_quand_le_cookie_type_remettant_n_est_pas_present() throws Exception {        // Given        Cookie cookieCodePostal = new Cookie(NOM_COOKIE_CODE_POSTAL_REMETTANT, CODE_POSTAL);        // When Then        mockMvc.perform(MockMvcRequestBuilders.post(\"/saisie-distribution-masques\")                .cookie(cookieCodePostal))                .andExpect(view().name(\"redirect:/\"))                .andExpect(status().is3xxRedirection());    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/RecuperationInfosDemandeurControllerTest.java", "stars": "5", "class": {"name": "RecuperationInfosDemandeurControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "recupererInfosDemandeur_devrait_retourner_la_page_de_saisie_de_distribution_de_masques_quand_les_cookies_sont_presents", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void recupererInfosDemandeur_devrait_retourner_la_page_de_saisie_de_distribution_de_masques_quand_les_cookies_sont_presents() throws Exception {        // Given        String hashIdentite = \"4ed6o/Jcn8puliRsyKswvY8/afhZ4RpVQJwsPjIWxsSinWEzBAO6UAmpA1GEOLUBRx0rArLaVFtCM4Fk/ZX8ig==\";        String nombreMineurs = \"2\";        String modeSaisie = SCAN.name();        Cookie cookieCodePostal = new Cookie(NOM_COOKIE_CODE_POSTAL_REMETTANT, CODE_POSTAL);        Cookie cookieTypeRemettant = new Cookie(NOM_COOKIE_TYPE_REMETTANT, TYPE_REMETTANT);        Map<TypeMasque, Integer> distributionMasques = new HashMap<>();        distributionMasques.put(TypeMasque.ADULTE_REUTILISABLE, 2);        distributionMasques.put(TypeMasque.ADULTE_USAGE_UNIQUE, 3);        distributionMasques.put(TypeMasque.ENFANT_REUTILISABLE, 10);        distributionMasques.put(TypeMasque.ENFANT_USAGE_UNIQUE, 8);        when(recupererDistributionsMasques.verifier(hashIdentite)).thenReturn(distributionMasques);        InfosDemandeurUI infosDemandeurUI = InfosDemandeurUIFixture.aInfosDemandeurUI();        when(infosDemandeurUIMapper.toInfosDemandeurUI(eq(distributionMasques), any(IdentiteDemandeurUI.class)))                .thenReturn(infosDemandeurUI);        // When Then        mockMvc.perform(MockMvcRequestBuilders.post(\"/saisie-distribution-masques\")                .cookie(cookieCodePostal)                .cookie(cookieTypeRemettant)                .param(\"hashIdentite\", hashIdentite)                .param(\"nombreMineurs\", nombreMineurs)                .param(\"modeSaisie\", modeSaisie))                .andExpect(model().attribute(\"infosDemandeur\", equalTo(infosDemandeurUI)))                .andExpect(view().name(\"distribution-masques\"))                .andExpect(status().isOk())                .andExpect(content().string(containsString(\"Proc\u00e9der \u00e0 une remise de masques\")));    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/RecuperationInfosDemandeurControllerTest.java", "stars": "5", "class": {"name": "RecuperationInfosDemandeurControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "recupererInfosDemandeur_ne_devrait_pas_fonctionner_si_le_hash_nest_pas_de_la_bonne_longueur", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void recupererInfosDemandeur_ne_devrait_pas_fonctionner_si_le_hash_nest_pas_de_la_bonne_longueur() throws Exception {        // Given        String hashIdentite = \"4ed6o/Jcn8puliRsyKswvY8/afhZ4RpVQJwsPjIWxsSinWEzBAO6UAmpA1GEOL\";        String nombreMineurs = \"2\";        String modeSaisie = SCAN.name();        Cookie cookieCodePostal = new Cookie(NOM_COOKIE_CODE_POSTAL_REMETTANT, CODE_POSTAL);        Cookie cookieTypeRemettant = new Cookie(NOM_COOKIE_TYPE_REMETTANT, TYPE_REMETTANT);        Map<TypeMasque, Integer> distributionMasques = new HashMap<>();        distributionMasques.put(TypeMasque.ADULTE_REUTILISABLE, 2);        distributionMasques.put(TypeMasque.ADULTE_USAGE_UNIQUE, 3);        distributionMasques.put(TypeMasque.ENFANT_REUTILISABLE, 10);        distributionMasques.put(TypeMasque.ENFANT_USAGE_UNIQUE, 8);        when(recupererDistributionsMasques.verifier(hashIdentite)).thenReturn(distributionMasques);        InfosDemandeurUI infosDemandeurUI = InfosDemandeurUIFixture.aInfosDemandeurUI();        when(infosDemandeurUIMapper.toInfosDemandeurUI(eq(distributionMasques), any(IdentiteDemandeurUI.class)))                .thenReturn(infosDemandeurUI);        // When Then        mockMvc.perform(MockMvcRequestBuilders.post(\"/saisie-distribution-masques\")                .cookie(cookieCodePostal)                .cookie(cookieTypeRemettant)                .param(\"hashIdentite\", hashIdentite)                .param(\"nombreMineurs\", nombreMineurs)                .param(\"modeSaisie\", modeSaisie))                .andExpect(view().name(\"erreur-400\"))                .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/RecuperationInfosDemandeurControllerTest.java", "stars": "5", "class": {"name": "RecuperationInfosDemandeurControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "recupererInfosDemandeur_ne_devrait_pas_fonctionner_si_le_hash_nest_pas_un_base64_valide", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void recupererInfosDemandeur_ne_devrait_pas_fonctionner_si_le_hash_nest_pas_un_base64_valide() throws Exception {        // Given        String hashIdentite = \"\u00e9\u00e9\u00e9\u00e9\u00e9/Jcn8puliRsyKswvY8/afhZ4RpVQJwsPjIWxsSinWEzBAO6UAmpA1GEOLUBRx0rArLaVFtCM4Fk/ZX8ig==\";        String nombreMineurs = \"2\";        String modeSaisie = SCAN.name();        Cookie cookieCodePostal = new Cookie(NOM_COOKIE_CODE_POSTAL_REMETTANT, CODE_POSTAL);        Cookie cookieTypeRemettant = new Cookie(NOM_COOKIE_TYPE_REMETTANT, TYPE_REMETTANT);        Map<TypeMasque, Integer> distributionMasques = new HashMap<>();        distributionMasques.put(TypeMasque.ADULTE_REUTILISABLE, 2);        distributionMasques.put(TypeMasque.ADULTE_USAGE_UNIQUE, 3);        distributionMasques.put(TypeMasque.ENFANT_REUTILISABLE, 10);        distributionMasques.put(TypeMasque.ENFANT_USAGE_UNIQUE, 8);        when(recupererDistributionsMasques.verifier(hashIdentite)).thenReturn(distributionMasques);        InfosDemandeurUI infosDemandeurUI = InfosDemandeurUIFixture.aInfosDemandeurUI();        when(infosDemandeurUIMapper.toInfosDemandeurUI(eq(distributionMasques), any(IdentiteDemandeurUI.class)))                .thenReturn(infosDemandeurUI);        // When Then        mockMvc.perform(MockMvcRequestBuilders.post(\"/saisie-distribution-masques\")                .cookie(cookieCodePostal)                .cookie(cookieTypeRemettant)                .param(\"hashIdentite\", hashIdentite)                .param(\"nombreMineurs\", nombreMineurs)                .param(\"modeSaisie\", modeSaisie))                .andExpect(view().name(\"erreur-400\"))                .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/RecuperationInfosDemandeurControllerTest.java", "stars": "5", "class": {"name": "RecuperationInfosDemandeurControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "UmsAdminRoleRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdIsNull() {            addCriterion(\"admin_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdIsNotNull() {            addCriterion(\"admin_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdEqualTo(Long value) {            addCriterion(\"admin_id =\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdNotEqualTo(Long value) {            addCriterion(\"admin_id <>\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdGreaterThan(Long value) {            addCriterion(\"admin_id >\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"admin_id >=\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdLessThan(Long value) {            addCriterion(\"admin_id <\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdLessThanOrEqualTo(Long value) {            addCriterion(\"admin_id <=\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdIn(List<Long> values) {            addCriterion(\"admin_id in\", values, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdNotIn(List<Long> values) {            addCriterion(\"admin_id not in\", values, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdBetween(Long value1, Long value2) {            addCriterion(\"admin_id between\", value1, value2, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdNotBetween(Long value1, Long value2) {            addCriterion(\"admin_id not between\", value1, value2, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdIsNull() {            addCriterion(\"role_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdIsNotNull() {            addCriterion(\"role_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdEqualTo(Long value) {            addCriterion(\"role_id =\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdNotEqualTo(Long value) {            addCriterion(\"role_id <>\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdGreaterThan(Long value) {            addCriterion(\"role_id >\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"role_id >=\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdLessThan(Long value) {            addCriterion(\"role_id <\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdLessThanOrEqualTo(Long value) {            addCriterion(\"role_id <=\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdIn(List<Long> values) {            addCriterion(\"role_id in\", values, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdNotIn(List<Long> values) {            addCriterion(\"role_id not in\", values, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdBetween(Long value1, Long value2) {            addCriterion(\"role_id between\", value1, value2, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdNotBetween(Long value1, Long value2) {            addCriterion(\"role_id not between\", value1, value2, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startThread", "params": ["Runnable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void startThread(Runnable run){        //\u5f00\u542f\u591a\u7ebf\u7a0b        new Thread(run).start();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo03/LambdaTest/Demo01Runnable.java", "stars": "2", "class": {"name": "Demo01Runnable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u8c03\u7528startThread\u65b9\u6cd5,\u65b9\u6cd5\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u53e3,\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u8fd9\u4e2a\u63a5\u53e3\u7684\u533f\u540d\u5185\u90e8\u7c7b        startThread(new Runnable() {            @Override            public void run() {                System.out.println(Thread.currentThread().getName()+\"-->\"+\"\u7ebf\u7a0b\u542f\u52a8\u4e86\");            }        });        //\u8c03\u7528startThread\u65b9\u6cd5,\u65b9\u6cd5\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3,\u6240\u4ee5\u53ef\u4ee5\u4f20\u9012Lambda\u8868\u8fbe\u5f0f        startThread(()->{            System.out.println(Thread.currentThread().getName()+\"-->\"+\"\u7ebf\u7a0b\u542f\u52a8\u4e86\");        });        //\u4f18\u5316Lambda\u8868\u8fbe\u5f0f        startThread(()->System.out.println(Thread.currentThread().getName()+\"-->\"+\"\u7ebf\u7a0b\u542f\u52a8\u4e86\"));    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo03/LambdaTest/Demo01Runnable.java", "stars": "2", "class": {"name": "Demo01Runnable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSpriteForSide", "params": ["Direction", "BlockRenderView", "BlockState", "BlockPos", "Random"], "throws": null, "modifiers": ["public"], "return_type": "Sprite", "snippet": "\tpublic Sprite getSpriteForSide(Direction side, BlockRenderView view, BlockState state, BlockPos pos, Random random) {\t\tboolean left = testLeft(view, side, pos, state);\t\tboolean right = testRight(view, side, pos, state);\t\tif(left && right) {\t\t\treturn connects[1];\t\t} else if(left && !right) {\t\t\treturn connects[2];\t\t} else if(!left && right) {\t\t\treturn connects[0];\t\t} else {\t\t\treturn connects[3];\t\t}\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/sprite/HorizontalCTMSpriteProvider.java", "stars": "3", "class": {"name": "HorizontalCTMSpriteProvider", "extends": "ConnectingSpriteProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "setupGardenAndUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setupGardenAndUser() {        User user = new User();        user.setLogin(DEFAULT_LOGIN);        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        user.setFirstName(DEFAULT_FIRSTNAME);        user.setLastName(DEFAULT_LASTNAME);        user.setBankAccountIBAN(DEFAULT_IBAN);        gardenField = new GardenField();        gardenField.setOwner(userRepository.save(user));        gardenField.setName(GARDEN_NAME);        gardenField.setSizeInM2(SIZE_IN_M2);        gardenField.setPricePerM2(PRICE_PER_M2);        gardenField.setLatitude(LATITUDE);        gardenField.setLongitude(LONGITUDE);        gardenField.setCity(CITY);        gardenFieldRepository.saveAndFlush(gardenField);        gardenFieldPath = Paths.get(imageStorageProperties.getImageDir()).resolve(gardenField.getId().toString());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() throws IOException {        GardenFieldImageController gardenFieldImageController = new GardenFieldImageController(imageStorageService);        this.restFileMockMvc = MockMvcBuilders.standaloneSetup(gardenFieldImageController)            .setCustomArgumentResolvers(pageableArgumentResolver)            .setControllerAdvice(exceptionTranslator)            .setMessageConverters(jacksonMessageConverter, resourceHttpMessageConverter)            .build();        FileUtils.deleteDirectory(Paths.get(imageStorageProperties.getImageDir()).toFile());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadImage", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void uploadImage() throws Exception {        String imageName = uploadImageSuccessfully();        File imageTest = gardenFieldPath.resolve(imageName).toFile();        assertThat(imageTest.exists()).isTrue();        assertThat(imageTest.delete()).isTrue();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadImageWithoutAuthority", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void uploadImageWithoutAuthority() throws Exception {        File file = new File(Objects.requireNonNull(getClass().getClassLoader().getResource(\"images/logo.png\")).getFile());        MockMultipartFile image = new MockMultipartFile(\"image\", \"logo.png\", \"image/png\", FileUtils.readFileToByteArray(file));        restFileMockMvc.perform(MockMvcRequestBuilders.multipart(\"/api/v1/gardenfields/\" + gardenField.getId() + \"/uploadImage\")            .file(image))            .andExpect(status().isUnauthorized())            .andExpect(jsonPath(\"$.imageName\").doesNotExist());        assertThat(gardenFieldPath.toFile().exists()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadImageToNotExistingGardenField", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void uploadImageToNotExistingGardenField() throws Exception {        File file = new File(Objects.requireNonNull(getClass().getClassLoader().getResource(\"images/logo.png\")).getFile());        MockMultipartFile image = new MockMultipartFile(\"image\", \"logo.png\", \"image/png\", FileUtils.readFileToByteArray(file));        restFileMockMvc.perform(MockMvcRequestBuilders.multipart(\"/api/v1/gardenfields/\" + (gardenField.getId() + 1) + \"/uploadImage\")            .file(image))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isConflict())            .andExpect(jsonPath(\"$.imageName\").doesNotExist());        assertThat(gardenFieldPath.toFile().exists()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadImageWithNotSupportedFileFormat", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void uploadImageWithNotSupportedFileFormat() throws Exception {        File file = new File(Objects.requireNonNull(getClass().getClassLoader().getResource(\"images/test.txt\")).getFile());        MockMultipartFile textFile = new MockMultipartFile(\"image\", \"test.txt\", \"text/plain\", FileUtils.readFileToByteArray(file));        restFileMockMvc.perform(MockMvcRequestBuilders.multipart(\"/api/v1/gardenfields/\" + gardenField.getId() + \"/uploadImage\")            .file(textFile))            .andExpect(status().isBadRequest());        assertThat(gardenFieldPath.toFile().exists()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "downloadImage", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void downloadImage() throws Exception {        String fileName = uploadImageSuccessfully();        File imageTest = gardenFieldPath.resolve(fileName).toFile();        assertThat(imageTest.exists()).isTrue();        restFileMockMvc.perform(MockMvcRequestBuilders.get(\"/api/v1/gardenfields/\" + gardenField.getId() + \"/downloadImage/\" + fileName))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllImageNames_WithoutImages", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllImageNames_WithoutImages() throws Exception {        restFileMockMvc.perform(MockMvcRequestBuilders.get(\"/api/v1/gardenfields/\" + gardenField.getId() + \"/downloadImages\"))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(jsonPath(\"$\").isArray())            .andExpect(jsonPath(\"$\").isEmpty());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllImageNames_WithImages", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllImageNames_WithImages() throws Exception {        String fileName = uploadImageSuccessfully();        String fileName2 = uploadImageSuccessfully();        restFileMockMvc.perform(MockMvcRequestBuilders.get(\"/api/v1/gardenfields/\" + gardenField.getId() + \"/downloadImages\"))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(jsonPath(\"$\").isArray())            .andExpect(jsonPath(\"$\").isNotEmpty())            .andExpect(jsonPath(\"$\").value(containsInAnyOrder(fileName, fileName2)));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteImage", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteImage() throws Exception {        String fileName = uploadImageSuccessfully();        File imageTest = gardenFieldPath.resolve(fileName).toFile();        File thumbnailTest = gardenFieldPath.resolve(\"thumbnails\").resolve(fileName).toFile();        assertThat(imageTest.exists()).isTrue();        assertThat(thumbnailTest.exists()).isTrue();        restFileMockMvc.perform(MockMvcRequestBuilders.delete(\"/api/v1/gardenfields/\" + gardenField.getId() + \"/\" + fileName))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isNoContent());        assertThat(imageTest.exists()).isFalse();        assertThat(thumbnailTest.exists()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadImageSuccessfully", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String uploadImageSuccessfully() throws Exception {        File file = new File(Objects.requireNonNull(getClass().getClassLoader().getResource(\"images/logo.png\")).getFile());        MockMultipartFile image = new MockMultipartFile(\"image\", \"logo.png\", \"image/png\", FileUtils.readFileToByteArray(file));        MvcResult mvcResult = restFileMockMvc.perform(MockMvcRequestBuilders.multipart(\"/api/v1/gardenfields/\" + gardenField.getId() + \"/uploadImage\")            .file(image))            .andExpect(status().isCreated())            .andExpect(jsonPath(\"$.imageName\").value(containsString(\".png\")))            .andExpect(jsonPath(\"$.imageDownloadUri\").value(containsString(\"/api/v1/gardenfields/\" + gardenField.getId() + \"/downloadImage/\")))            .andExpect(jsonPath(\"$.thumbnailDownloadUri\").value(containsString(\"/api/v1/gardenfields/\" + gardenField.getId() + \"/downloadThumbnail/\")))            .andExpect(jsonPath(\"$.imageType\").value(is(\"image/png\")))            .andReturn();        String fileName = JsonPath.parse(mvcResult.getResponse().getContentAsString()).read(\"$.imageName\").toString();        assertThat(gardenFieldPath.resolve(fileName).toFile().exists()).isTrue();        assertThat(gardenFieldPath.resolve(\"thumbnails\").resolve(fileName).toFile().exists()).isTrue();        return fileName;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldImageControllerIT.java", "stars": "2", "class": {"name": "GardenFieldImageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "interpret", "params": ["ExpressionTemplate", "ExpressionTemplateContext"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "\tpublic static Object interpret (ExpressionTemplate template, ExpressionTemplateContext context) {\t\ttry {\t\t\treturn interpretNodeList(template.getNodes(), template, context);\t\t} catch (Throwable t) {\t\t\tif (t instanceof TemplateException) {                throw (TemplateException)t;            } else {\t\t\t\tExpressionError.error(\"\u6267\u884c\u8868\u8fbe\u5f0f\u51fa\u9519 \" + t.getMessage(), template.getNodes().get(0).getSpan(),t);\t\t\t\treturn null; // never reached\t\t\t}\t\t} \t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AstInterpreter.java", "stars": "13", "class": {"name": "AstInterpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "interpretNodeList", "params": ["List<Node>", "ExpressionTemplate", "ExpressionTemplateContext"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Object", "snippet": "\tpublic static Object interpretNodeList (List<Node> nodes, ExpressionTemplate template, ExpressionTemplateContext context) throws IOException {\t\tString result = \"\";\t\tfor (int i = 0, n = nodes.size(); i < n; i++) {\t\t\tNode node = nodes.get(i);\t\t\tObject value = node.evaluate(template, context);\t\t\tif(node instanceof Text){\t\t\t\tresult += node.getSpan().getText();\t\t\t}else if(value == null){\t\t\t\tif(i ==\t 0 && i + 1 == n){\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\tresult += \"null\";\t\t\t}else {\t\t\t\tif(i ==0 && i + 1 ==n){\t\t\t\t\treturn value;\t\t\t\t}\t\t\t\tresult += value;\t\t\t}\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/AstInterpreter.java", "stars": "13", "class": {"name": "AstInterpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "replaceToVariableValue", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void replaceToVariableValue() {    Properties props = new Properties();    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\");    props.setProperty(\"key\", \"value\");    props.setProperty(\"tableName\", \"members\");    props.setProperty(\"orderColumn\", \"member_id\");    props.setProperty(\"a:b\", \"c\");    Assertions.assertThat(PropertyParser.parse(\"${key}\", props)).isEqualTo(\"value\");    Assertions.assertThat(PropertyParser.parse(\"${key:aaaa}\", props)).isEqualTo(\"value\");    Assertions.assertThat(PropertyParser.parse(\"SELECT * FROM ${tableName:users} ORDER BY ${orderColumn:id}\", props)).isEqualTo(\"SELECT * FROM members ORDER BY member_id\");    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"false\");    Assertions.assertThat(PropertyParser.parse(\"${a:b}\", props)).isEqualTo(\"c\");    props.remove(PropertyParser.KEY_ENABLE_DEFAULT_VALUE);    Assertions.assertThat(PropertyParser.parse(\"${a:b}\", props)).isEqualTo(\"c\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/parsing/PropertyParserTest.java", "stars": "15", "class": {"name": "PropertyParserTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "notReplace", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void notReplace() {    Properties props = new Properties();    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\");    Assertions.assertThat(PropertyParser.parse(\"${key}\", props)).isEqualTo(\"${key}\");    Assertions.assertThat(PropertyParser.parse(\"${key}\", null)).isEqualTo(\"${key}\");    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"false\");    Assertions.assertThat(PropertyParser.parse(\"${a:b}\", props)).isEqualTo(\"${a:b}\");    props.remove(PropertyParser.KEY_ENABLE_DEFAULT_VALUE);    Assertions.assertThat(PropertyParser.parse(\"${a:b}\", props)).isEqualTo(\"${a:b}\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/parsing/PropertyParserTest.java", "stars": "15", "class": {"name": "PropertyParserTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applyDefaultValue", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void applyDefaultValue() {    Properties props = new Properties();    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\");    Assertions.assertThat(PropertyParser.parse(\"${key:default}\", props)).isEqualTo(\"default\");    Assertions.assertThat(PropertyParser.parse(\"SELECT * FROM ${tableName:users} ORDER BY ${orderColumn:id}\", props)).isEqualTo(\"SELECT * FROM users ORDER BY id\");    Assertions.assertThat(PropertyParser.parse(\"${key:}\", props)).isEmpty();    Assertions.assertThat(PropertyParser.parse(\"${key: }\", props)).isEqualTo(\" \");    Assertions.assertThat(PropertyParser.parse(\"${key::}\", props)).isEqualTo(\":\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/parsing/PropertyParserTest.java", "stars": "15", "class": {"name": "PropertyParserTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applyCustomSeparator", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void applyCustomSeparator() {    Properties props = new Properties();    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\");    props.setProperty(PropertyParser.KEY_DEFAULT_VALUE_SEPARATOR, \"?:\");    Assertions.assertThat(PropertyParser.parse(\"${key?:default}\", props)).isEqualTo(\"default\");    Assertions.assertThat(PropertyParser.parse(\"SELECT * FROM ${schema?:prod}.${tableName == null ? 'users' : tableName} ORDER BY ${orderColumn}\", props)).isEqualTo(\"SELECT * FROM prod.${tableName == null ? 'users' : tableName} ORDER BY ${orderColumn}\");    Assertions.assertThat(PropertyParser.parse(\"${key?:}\", props)).isEmpty();    Assertions.assertThat(PropertyParser.parse(\"${key?: }\", props)).isEqualTo(\" \");    Assertions.assertThat(PropertyParser.parse(\"${key?::}\", props)).isEqualTo(\":\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/parsing/PropertyParserTest.java", "stars": "15", "class": {"name": "PropertyParserTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "handleGet", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handleGet(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws ServletException, IOException {    resp.sendRedirect(this.defaultServletPath);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/IndexRedirectServlet.java", "stars": "18", "class": {"name": "IndexRedirectServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePost", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handlePost(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws ServletException, IOException {    resp.sendRedirect(this.defaultServletPath);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/IndexRedirectServlet.java", "stars": "18", "class": {"name": "IndexRedirectServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOptionSyntax", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOptionSyntax() {        return \"[<command>]\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/VersionCommand.java", "stars": "2", "class": {"name": "VersionCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "displayOptionUsage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayOptionUsage() {        println(\"  <command>   Display Bored version\");    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/VersionCommand.java", "stars": "2", "class": {"name": "VersionCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return \"version\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/VersionCommand.java", "stars": "2", "class": {"name": "VersionCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return \"Display Bored version\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/VersionCommand.java", "stars": "2", "class": {"name": "VersionCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["Deque<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(Deque<String> options) {        ensureMaxArgumentCount(options, 0);        ensureMinArgumentCount(options, 0);        println(\"Bored runtime version v0.1.2020.4.8\");    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/VersionCommand.java", "stars": "2", "class": {"name": "VersionCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["URL", "ResourceBundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(URL location, ResourceBundle resources) {        try {            random = new Random();            log = sample.utils.Logger.getLogger();            log.info(\"Initializing...\");        } catch (IOException e) {            e.printStackTrace();        }        combobox_devices.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {            log.info(\"\u5f53\u524d\u8bbe\u5907\u53f7\uff1a\" + newValue);            selected_serial = newValue;            try {                int port = random.nextInt(1000);                engine = new Engine(\"127.0.0.1\", 53001 + port, selected_serial);                Engine.engine = engine;            } catch (IOException e) {                e.printStackTrace();            }        });        treeView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {            // \u663e\u793a\u5168\u8def\u5f84            Node node = newValue.getValue();            textfield_fullpath.setText(node.fullpath);            Clipboard clipboard = Clipboard.getSystemClipboard();            HashMap<DataFormat, Object> map = new HashMap<>();            map.put(DataFormat.PLAIN_TEXT, node.fullpath);            clipboard.setContent(map);            // \u7ea2\u6846\u6807\u8bb0            sample.utils.Element e = null;            try {                e = node.getElement();                signImageWithRectangle(originalImage, e.getElementBound());            } catch (Exception exception) {                exception.printStackTrace();            }            // \u663e\u793a\u4fe1\u606f            ObservableList<TableItem> data = FXCollections.observableArrayList();            data.add(new TableItem(\"name\", node.name));            data.add(new TableItem(\"components\", node.attrsInfo().replace(\"|\", \";  \")));            try {                data.add(new TableItem(\"location\", node.getElement().getElementBound().getLocationInfo()));                data.add(new TableItem(\"bounds\", node.getElement().getElementBound().getBounds()));            } catch (Exception exception) {                exception.printStackTrace();            }            col_key.setCellValueFactory(new PropertyValueFactory<>(\"key\"));            col_value.setCellValueFactory(new PropertyValueFactory<>(\"value\"));            tableView.setItems(data);        });        imageView.setOnMouseMoved(e -> {            if (originalImage == null) return;            int x = (int) e.getX();            int y = (int) e.getY();//            log.info(\"y=\"+y+\",\"+e.getSceneY()+\",\"+e.getScreenY());            double imageWidth = originalImage.getWidth();            double imageHeight = originalImage.getHeight();            x = (int) (x * (imageWidth / imageView.getFitWidth()));            y = (int) (y * (imageHeight / imageView.getFitHeight()));            StringBuilder sb = new StringBuilder();            label_coordination.setText(sb.append(x).append(\",  \").append(y).toString());        });        imageView.setOnMouseClicked(e -> {            int x = (int) e.getX();            int y = (int) e.getY();            double imageWidth = originalImage.getWidth();            double imageHeight = originalImage.getHeight();            x = (int) (x * (imageWidth / imageView.getFitWidth()));            y = (int) (y * (imageHeight / imageView.getFitHeight()));            log.info(\"\u70b9\u51fb\u4e86:(\" + x + \",\" + y + \")\");            for (sample.utils.Element element : touchableElements) {                ElementBound eb = null;                try {                    eb = element.getElementBound();                } catch (Exception exception) {                    exception.printStackTrace();                    continue;                }                log.info(\"\u662f\u5426\u5728\u8fd9\u91cc\u9762\uff1a(\" + (eb.x - eb.width / 2) + \",\" + (eb.y - eb.height / 2) + \") (\" + eb.width + \",\" + eb.height + \")\");                if (eb.ifCoordinationInBound(x, y)) {                    log.info(\"\u5728\uff01\uff01\uff01\");                    signImageWithRectangle(originalImage, eb);                    boolean ret = focusOnElement(treeView.getRoot(), element);                    log.info(\"\u662f\u5426\u5b9a\u4f4d\u5230\u4e86\u5143\u7d20\uff1a\" + ret);                    break;                }            }        });        textfield_pattern.setOnKeyPressed(e -> {            if (e.getCode() == KeyCode.ENTER) {                searchNodeHandler();            }        });    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "focusOnElement", "params": ["TreeItem<Node>", "sample"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean focusOnElement(TreeItem<Node> treeItem, sample.utils.Element element) {        if (treeItem.getValue().fullpath.equals(element.objectName)) {            treeView.getSelectionModel().select(treeItem);            int index = treeView.getSelectionModel().getSelectedIndex();            treeView.scrollTo(index);            return true;        }        ObservableList<TreeItem<Node>> children = treeItem.getChildren();        for (TreeItem<Node> child : children) {            boolean ret = focusOnElement(child, element);            if (ret) {                return true;            }        }        return false;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "signImageWithRectangle", "params": ["Image", "ElementBound"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void signImageWithRectangle(Image image, ElementBound eb) {        if (image == null || eb == null) {            log.warning(\"image or elementbound is null\");            return;        }        signImageWithRectangle(image, (int) (eb.x + eb.width / 2), (int) (eb.y + eb.height / 2), (int) eb.width, (int) eb.height);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "signImageWithRectangle", "params": ["Image", "int", "int", "int", "int"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void signImageWithRectangle(Image image, int x, int y, int recWidth, int recHeight) {        int width = (int) image.getWidth();        int height = (int) image.getHeight();        x = x - recWidth / 2;        y = y - recHeight / 2;        WritableImage newImage = new WritableImage(width, height);        PixelReader pixelReader = image.getPixelReader();        PixelWriter pixelWriter = newImage.getPixelWriter();        for (int j = 0; j < height; j++) {            for (int i = 0; i < width; i++) {                if (((i == x || i == x + recWidth) && (j >= y && j <= y + recHeight)) || ((j == y || j == y + recHeight) && (i >= x && i <= x + recWidth))                        || ((i == x + 1 || i == x + recWidth - 1) && (j >= y + 1 && j <= y + recHeight - 1)) || ((j == y + 1 || j == y - 1 + recHeight) && (i >= x + 1 && i <= x - 1 + recWidth))                        || ((i == x + 2 || i == x + recWidth - 2) && (j >= y + 2 && j <= y + recHeight - 2)) || ((j == y + 2 || j == y - 2 + recHeight) && (i >= x + 2 && i <= x - 2 + recWidth))) {                    pixelWriter.setColor(i, j, Color.RED);                    continue;                }                Color color = pixelReader.getColor(i, j);                pixelWriter.setColor(i, j, color);            }        }        imageView.setImage(newImage);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "refreshDevices", "params": ["ActionEvent"], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "    void refreshDevices(ActionEvent actionEvent) throws IOException {        rootAnchorPane.setMouseTransparent(true);        String cmd = \"devices -l\";        String ret = ShellUtils.execAdb(cmd, \"\");        log.info(ret);        devices = FXCollections.observableArrayList();        String[] lines = ret.split(\"\\n\");        for (String line : lines) {            if (line.contains(\"device product\") && !line.contains(\"offline\")) {                System.out.println(line);                String device_serial = line.split(\" \", -1)[0];                devices.add(device_serial);            }        }        if (devices.size() == 0) {            MessageWindow.display(\"\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u53ef\u7528\u7684\u8bbe\u5907\\n\u8bf7\u5c1d\u8bd5\u91cd\u542fadb\");            return;        }        combobox_devices.setItems(devices);        combobox_devices.getSelectionModel().select(0);        selected_serial = combobox_devices.getSelectionModel().getSelectedItem();        rootAnchorPane.setMouseTransparent(false);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "syncGameState", "params": ["ActionEvent"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void syncGameState(ActionEvent actionEvent) throws Exception {        rootAnchorPane.setMouseTransparent(true);        progressIndicator.setProgress(0);        progressIndicator.setVisible(true);        new Thread(new Runnable() {            @Override            public void run() {                String xmlStr;                try {                    xmlStr = engine.getDumpTree();                    updateProgress(0.3);                    // \u6784\u5efa\u63a7\u4ef6\u6811                    rootNode = new Node();                    Document document = DocumentHelper.parseText(xmlStr);                    Element root = document.getRootElement();                    rootNode.name = root.getName();                    rootNode.fullpath = \"\";                    log.info(\"root element: \" + root.getName());                    traverseXML(root, rootNode);                    updateProgress(0.5);                    buildTreeView();                    Device.screenshot(selected_serial);                    Image image = new Image(\"file:///D:/pictures/screenshot.png\");                    Platform.runLater(new Runnable() {                        @Override                        public void run() {                            // \u5f00\u59cb\u622a\u5c4f                            log.info(\"\u5f00\u59cb\u622a\u5c4f...\");                            try {                                imageView.setImage(image);                                imageView.setPreserveRatio(true);                                imageView.setFitHeight(image.getHeight() * (imageView.getFitWidth() / image.getWidth()));                                originalImage = image;                            } catch (Exception e) {                                e.printStackTrace();                            }                        }                    });                    updateProgress(0.6);                    // \u83b7\u53d6\u5f53\u524d\u754c\u9762\u6240\u6709\u53ef\u70b9\u51fb\u7684\u5217\u8868                    touchableElements = new ArrayList<>();                    ArrayList<sample.utils.Element> elements = engine.getTouchableElements();                    for (sample.utils.Element e : elements) {                        engine.getElementBound(e);                        touchableElements.add(e);                    }                    updateProgress(1.0);                } catch (Exception e) {                    e.printStackTrace();                    Platform.runLater(new Runnable() {                        @Override                        public void run() {                            MessageWindow.display(\"\u540c\u6b65\u6e38\u620f\u72b6\u6001\u5931\u8d25\\n\u8bf7\u5c1d\u8bd5\u91cd\u65b0\u83b7\u53d6\u8bbe\u5907\u5217\u8868\\n\u68c0\u67e5\u6e38\u620f\u662f\u5426\u542f\u52a8\\nGA sdk\u662f\u5426\u6210\u529f\u542f\u52a8\");                        }                    });                }            }        }).start();        rootAnchorPane.setMouseTransparent(false);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "updateProgress", "params": ["double"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void updateProgress(double progress) {        log.info(\"\u8bbe\u7f6e\u8fdb\u5ea6\" + progress);        Platform.runLater(new Runnable() {            @Override            public void run() {                if(progress >= 1.0)                {                    progressIndicator.setVisible(false);                    return;                }                progressIndicator.setProgress(progress);            }        });    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "traverseXML", "params": ["Element", "Node"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void traverseXML(Element root, Node node) {        Iterator<Element> iterator = root.elementIterator();        if (iterator.hasNext()) node.children = new ArrayList<Node>();        while (iterator.hasNext()) {            Node childNode = new Node();            childNode.attrs = new HashMap<String, String>();            Element child = iterator.next();            List<Attribute> attrs = child.attributes();            for (Attribute attr : attrs) {                String name = attr.getName();                if (attr.getName().equals(\"name\")) childNode.name = attr.getValue();                else {                    String value = attr.getValue();                    value = attr.getStringValue();                    childNode.attrs.put(attr.getName(), attr.getValue());                }            }            childNode.fullpath = node.fullpath + \"/\" + childNode.name;            node.children.add(childNode);            traverseXML(child, childNode);        }    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "buildTreeView", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void buildTreeView() {        TreeItem<Node> rootItem = new TreeItem<>();        rootItem.setValue(rootNode);        buildTreeItem(rootItem, rootNode);        Platform.runLater(new Runnable() {            @Override            public void run() {                treeView.setRoot(rootItem);            }        });    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "buildTreeItem", "params": ["TreeItem<Node>", "Node"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void buildTreeItem(TreeItem<Node> treeItem, Node node) {        if (node.children == null) return;        for (Node childNode : node.children) {            TreeItem<Node> childTreeItem = new TreeItem<Node>(childNode);            buildTreeItem(childTreeItem, childNode);            treeItem.getChildren().add(childTreeItem);        }    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "searchNode", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void searchNode(ActionEvent actionEvent) {        searchNodeHandler();    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "searchNodeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void searchNodeHandler() {        TreeItem<Node> treeItem = treeView.getRoot();        String pattern = textfield_pattern.getText();        searchedTreeItems = new ArrayList<>();        searchTreeItem(treeItem, pattern.toLowerCase());        if (searchedTreeItems.size() > 0) treeView.getSelectionModel().select(searchedTreeItems.get(0));    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "searchTreeItem", "params": ["TreeItem<Node>", "String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void searchTreeItem(TreeItem<Node> treeItem, String pattern) {        Node node = treeItem.getValue();        if (node.name.toLowerCase().contains(pattern) || node.attrsInfo().toLowerCase().contains(pattern)) {            searchedTreeItems.add(treeItem);            if (!node.name.toLowerCase().contains(pattern)) {                log.info(\"\u6ca1\u6709\u5728name\u4e2d\u627e\u5230\uff0c\u5c5e\u6027\u4e3a\uff1a\" + node.attrsInfo());            }        }        ObservableList<TreeItem<Node>> children = treeItem.getChildren();        for (TreeItem<Node> child : children) {            searchTreeItem(child, pattern);        }    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "onButtonTestClick", "params": ["ActionEvent"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void onButtonTestClick(ActionEvent actionEvent) throws Exception {        sample.utils.Element e = engine.findElement(\"/UIRoot/UIHang/LoginWindow(Clone)/Center/AccountGroup.GO/Account.InputField\");        ElementBound eb = engine.getElementBound(e);        log.info(eb.toString());        int y = 4;        int height = 5;        float ret = y / (float) height;        log.info(String.valueOf(ret));    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Controller.java", "stars": "2", "class": {"name": "Controller", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "isPlaying", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPlaying() {        return isPlaying;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/events/UpdatePlaybackStateEvent.java", "stars": "4", "class": {"name": "UpdatePlaybackStateEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String index(HttpServletRequest request){        List<MetaDto> categories = metaService.getMetaList(Types.CATEGORY.getType(), null, WebConst.MAX_POSTS);        List<MetaDto> tags = metaService.getMetaList(Types.TAG.getType(), null, WebConst.MAX_POSTS);        request.setAttribute(\"categories\", categories);        request.setAttribute(\"tags\", tags);        return \"admin/category\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/CategoryController.java", "stars": "2", "class": {"name": "CategoryController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "addCategory", "params": ["String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "APIResponse", "snippet": "    public APIResponse addCategory(            @ApiParam(name = \"cname\", value = \"\u5206\u7c7b\u540d\", required = true)            @RequestParam(name = \"cname\", required = true)            String cname,            @ApiParam(name = \"mid\", value = \"meta\u7f16\u53f7\", required = false)            @RequestParam(name = \"mid\", required = false)            Integer mid    ){        try {            metaService.saveMeta(Types.CATEGORY.getType(),cname,mid);        } catch (Exception e) {            e.printStackTrace();            String msg = \"\u5206\u7c7b\u4fdd\u5b58\u5931\u8d25\";            if (e instanceof BusinessException){                BusinessException ex = (BusinessException) e;                msg = ex.getErrorCode();            }            LOGGER.error(msg, e);            return APIResponse.fail(msg);        }        return APIResponse.success();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/CategoryController.java", "stars": "2", "class": {"name": "CategoryController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "APIResponse", "snippet": "    public APIResponse delete(            @ApiParam(name = \"mid\", value = \"\u4e3b\u952e\", required = true)            @RequestParam(name = \"mid\", required = true)            Integer mid    ){        try {            metaService.deleteMetaById(mid);        } catch (Exception e) {            e.printStackTrace();            LOGGER.error(e.getMessage());            return APIResponse.fail(e.getMessage());        }        return  APIResponse.success();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/CategoryController.java", "stars": "2", "class": {"name": "CategoryController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "statPush", "params": ["Communication", "long"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void statPush(Communication currentCommunication, long dataSize) {        currentCommunication.increaseCounter(CommunicationTool.READ_SUCCEED_RECORDS, dataSize);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/RecordChannel.java", "stars": "23", "class": {"name": "RecordChannel", "extends": "AbstractChannel", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "statPull", "params": ["Communication", "long"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void statPull(Communication currentCommunication, long dataSize) {        currentCommunication.increaseCounter(CommunicationTool.WRITE_RECEIVED_RECORDS, dataSize);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/RecordChannel.java", "stars": "23", "class": {"name": "RecordChannel", "extends": "AbstractChannel", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "currentDataSpeed", "params": ["Communication", "Communication", "long"], "throws": null, "modifiers": ["protected"], "return_type": "long", "snippet": "    protected long currentDataSpeed(Communication currentCommunication, Communication lastCommunication    , long interval) {        return (CommunicationTool.getTotalReadRecords(currentCommunication) -            CommunicationTool.getTotalReadRecords(lastCommunication)) * 1000/ interval;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/RecordChannel.java", "stars": "23", "class": {"name": "RecordChannel", "extends": "AbstractChannel", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "updateCounter", "params": ["Communication", "Communication"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateCounter(Communication currentCommunication, Communication lastCommunication) {        lastCommunication.setLongCounter(CommunicationTool.READ_SUCCEED_RECORDS,                currentCommunication.getLongCounter(CommunicationTool.READ_SUCCEED_RECORDS));        lastCommunication.setLongCounter(CommunicationTool.READ_FAILED_RECORDS,                currentCommunication.getLongCounter(CommunicationTool.READ_FAILED_RECORDS));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/RecordChannel.java", "stars": "23", "class": {"name": "RecordChannel", "extends": "AbstractChannel", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "firstPrint", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void firstPrint() {        long dataSpeed = configuration.getLong(                CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_RECORD, 10000);        LOG.info(\"RecordChannel set byte_speed_limit to \" + getByteSpeed() +                (getByteSpeed() <= 0 ? \", No bps activated.\" : \".\"));        LOG.info(\"RecordChannel set record_speed_limit to \" + dataSpeed            + (dataSpeed <= 0 ? \", No tps activated.\" : \".\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/RecordChannel.java", "stars": "23", "class": {"name": "RecordChannel", "extends": "AbstractChannel", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void show();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/abstractfactory/Note.java", "stars": "2", "class": {"name": "Note", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "newTransaction", "params": ["Connection"], "throws": null, "modifiers": ["public"], "return_type": "Transaction", "snippet": "  public Transaction newTransaction(Connection conn) {    return new JdbcTransaction(conn);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransactionFactory.java", "stars": "15", "class": {"name": "JdbcTransactionFactory", "extends": null, "implements": ["TransactionFactory"], "modifiers": ["public"]}}, {"method_name": "newTransaction", "params": ["DataSource", "TransactionIsolationLevel", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "Transaction", "snippet": "  public Transaction newTransaction(DataSource ds, TransactionIsolationLevel level, boolean autoCommit) {    return new JdbcTransaction(ds, level, autoCommit);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransactionFactory.java", "stars": "15", "class": {"name": "JdbcTransactionFactory", "extends": null, "implements": ["TransactionFactory"], "modifiers": ["public"]}}, {"method_name": "getFid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getFid() {        return fid;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFid", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFid(long fid) {        this.fid = fid;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBaseProduct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBaseProduct() {        return baseProduct;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBaseProduct", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBaseProduct(int baseProduct) {        this.baseProduct = baseProduct;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProduct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getProduct() {        return product;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProduct", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProduct(int product) {        this.product = product;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPackageName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPackageName() {        return packageName;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPackageName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPackageName(String packageName) {        this.packageName = packageName;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getVersion() {        return version;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVersion", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVersion(String version) {        this.version = version;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersionCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVersionCode() {        return versionCode;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVersionCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVersionCode(int versionCode) {        this.versionCode = versionCode;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRelease", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRelease() {        return release;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRelease", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRelease(String release) {        this.release = release;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPid() {        return pid;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPid", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPid(String pid) {        this.pid = pid;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImsi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImsi() {        return imsi;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImsi", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImsi(String imsi) {        this.imsi = imsi;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlatform", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPlatform() {        return platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlatform", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlatform(int platform) {        this.platform = platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSystemVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSystemVersion() {        return systemVersion;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSystemVersion", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSystemVersion(String systemVersion) {        this.systemVersion = systemVersion;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getW() {        return w;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setW", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setW(int w) {        this.w = w;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getH() {        return h;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setH", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setH(int h) {        this.h = h;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNetType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNetType() {        return netType;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNetType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNetType(int netType) {        this.netType = netType;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCountry() {        return country;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountry", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountry(String country) {        this.country = country;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLanguage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLanguage() {        return language;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLanguage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLanguage(String language) {        this.language = language;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPhonetype", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPhonetype() {        return phonetype;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPhonetype", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPhonetype(String phonetype) {        this.phonetype = phonetype;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOperator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOperator() {        return operator;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOperator", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOperator(String operator) {        this.operator = operator;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOaid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOaid() {        return oaid;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOaid", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOaid(String oaid) {        this.oaid = oaid;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Platform{\" +                \"fid=\" + fid +                \", baseProduct=\" + baseProduct +                \", product=\" + product +                \", packageName='\" + packageName + '\\'' +                \", version='\" + version + '\\'' +                \", versionCode=\" + versionCode +                \", release='\" + release + '\\'' +                \", pid='\" + pid + '\\'' +                \", imsi='\" + imsi + '\\'' +                \", platform=\" + platform +                \", systemVersion='\" + systemVersion + '\\'' +                \", w=\" + w +                \", h=\" + h +                \", netType=\" + netType +                \", country='\" + country + '\\'' +                \", language='\" + language + '\\'' +                \", phonetype='\" + phonetype + '\\'' +                \", operator='\" + operator + '\\'' +                \", oaid='\" + oaid + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Platform.java", "stars": "1", "class": {"name": "Platform", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getByteSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getByteSize() {        return byteStored != null? byteStored.remaining() : 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ByteBlock.java", "stars": "23", "class": {"name": "ByteBlock", "extends": null, "implements": ["ChannelElement"], "modifiers": ["public"]}}, {"method_name": "getMemorySize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMemorySize() {        return ClassSize.REFERENCE + ClassSize.ByteBufferHead +                (byteStored != null? byteStored.remaining() : 0);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ByteBlock.java", "stars": "23", "class": {"name": "ByteBlock", "extends": null, "implements": ["ChannelElement"], "modifiers": ["public"]}}, {"method_name": "getByteStored", "params": [], "throws": null, "modifiers": [], "return_type": "ByteBuffer", "snippet": "    ByteBuffer getByteStored(){        return byteStored;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ByteBlock.java", "stars": "23", "class": {"name": "ByteBlock", "extends": null, "implements": ["ChannelElement"], "modifiers": ["public"]}}, {"method_name": "copyElement", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T>T copyElement() {        if(this.equals(SEPARATOR) || this.equals(TERMINATE)){            return (T)this;        }        ByteBuffer buffer = null;        if(null != byteStored) {            byte[] stored = byteStored.array();            buffer = ByteBuffer.wrap(stored);            buffer.position(0);            buffer.limit(byteStored.limit());        }        return (T) new ByteBlock(buffer);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ByteBlock.java", "stars": "23", "class": {"name": "ByteBlock", "extends": null, "implements": ["ChannelElement"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleJpaApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jpa/src/main/java/smoketest/jpa/SampleJpaApplication.java", "stars": "47572", "class": {"name": "SampleJpaApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onInterceptTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onInterceptTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onInterceptTouchEvent (android.view.MotionEvent p0);\tpublic boolean dispatchTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_dispatchTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "dispatchTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean dispatchTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_dispatchTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_dispatchTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_dispatchTouchEvent (android.view.MotionEvent p0);\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onMeasure (int p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewCellRenderer_ViewCellContainer.java", "stars": "2", "class": {"name": "ViewCellRenderer_ViewCellContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "hasDataAuth", "params": ["Class<T>", "DataAuthScope", "HttpServletRequest", "T"], "throws": null, "modifiers": ["final", "protected"], "return_type": "boolean", "snippet": "    protected final <T>boolean hasDataAuth(Class<T> dataClass, DataAuthScope authScope, HttpServletRequest request,                                           T... dataEntities){        return hasDataAuth(dataClass, authScope, request, null, dataEntities);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractDataAuthController.java", "stars": "23", "class": {"name": "AbstractDataAuthController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasDataAuth", "params": ["Class<T>", "DataAuthScope", "String", "T"], "throws": null, "modifiers": ["final", "protected"], "return_type": "boolean", "snippet": "    protected final <T>boolean hasDataAuth(Class<T> dataClass, DataAuthScope authScope, String operator, T... dataEntities){        return hasDataAuth(dataClass, authScope, null, operator, dataEntities);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractDataAuthController.java", "stars": "23", "class": {"name": "AbstractDataAuthController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasDataAuth", "params": ["Class<T>", "DataAuthScope", "HttpServletRequest", "String", "T"], "throws": null, "modifiers": ["final", "protected"], "return_type": "boolean", "snippet": "    protected final <T>boolean hasDataAuth(Class<T> dataClass, DataAuthScope authScope, HttpServletRequest request,                                           String operator, T... dataEntities){        try {            String userName = null != request ? security.getUserName(request) : operator;            List<String> userDataAuthSet = new ArrayList<>();            boolean userDataInit = false;            if (StringUtils.isNotBlank(userName)) {                for (int i = 0; i < dataEntities.length; i++) {                    T dataEntity = dataEntities[i];                    //If is data's owner                    if (userName.equals(security.getUserName(dataEntity))) {                        continue;                    }                    if (!userDataInit) {                        Object authStoredInReq = null;                        if(null != request){                            authStoredInReq = request.getAttribute(userName + USER_DATA_AUTH_ATTRIBUTE_KEY + dataClass.getSimpleName());                        }                        if(null != authStoredInReq){                            try {                                userDataAuthSet = (List<String>) authStoredInReq;                            }catch(Exception e){                                //Ignore                            }                        }else {                            userDataAuthSet = security.userExternalDataAuthGetter(dataClass).get(userName);                            if(null != request) {                                request.setAttribute(userName + USER_DATA_AUTH_ATTRIBUTE_KEY + dataClass.getSimpleName(), userDataAuthSet);                            }                        }                        userDataInit = true;                    }                    if (null == userDataAuthSet) {                        //Means that the user has all authorities                        return true;                    } else if (userDataAuthSet.size() > 0) {                        if(null == dataEntity){                            continue;                        }                        List<String> dataAuthSet = security.externalDataAuthGetter(dataClass).get(dataEntity);                        if (null == dataAuthSet || dataAuthSet.size() <= 0) {                            continue;                        }                        if (userDataAuthSet.containsAll(dataAuthSet)) {                            List<DataAuthScope> authScopes = security.externalDataAuthScopeGetter(dataClass).get(dataEntity);                            boolean hasAuth = false;                            if (!authScopes.isEmpty()) {                                for (DataAuthScope scope : authScopes) {                                    if (scope.equals(DataAuthScope.ALL) || scope.equals(authScope)) {                                        hasAuth = true;                                        break;                                    }                                }                            }                            if (hasAuth) {                                continue;                            }                        }                    }                    //Means that the user has no authority                    return false;                }                return true;            }            //UnLogin        }catch(Exception e){            //Ignore        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractDataAuthController.java", "stars": "23", "class": {"name": "AbstractDataAuthController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity", "StreamInfo"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "\tpublic static Intent startActivity(Activity activity, StreamInfo info) {\t\tIntent i = new Intent(activity, TVStreamLoadingActivity.class);\t\ti.putExtra(EXTRA_STREAM_INFO, info);\t\tactivity.startActivity(i);\t\treturn i;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVStreamLoadingActivity.java", "stars": "4", "class": {"name": "TVStreamLoadingActivity", "extends": "TVBaseActivity", "implements": ["BaseStreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity", "StreamInfo", "Show"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "\tpublic static Intent startActivity(Activity activity, StreamInfo info, Show show) {\t\tIntent i = new Intent(activity, TVStreamLoadingActivity.class);\t\ti.putExtra(EXTRA_STREAM_INFO, info);\t\ti.putExtra(EXTRA_SHOW_INFO, show);\t\tactivity.startActivity(i);\t\treturn i;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVStreamLoadingActivity.java", "stars": "4", "class": {"name": "TVStreamLoadingActivity", "extends": "TVBaseActivity", "implements": ["BaseStreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity", "StreamInfo", "Pair<View,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "\tpublic static Intent startActivity(Activity activity, StreamInfo info, Pair<View, String>... elements) {\t\tIntent i = new Intent(activity, TVStreamLoadingActivity.class);\t\ti.putExtra(EXTRA_STREAM_INFO, info);\t\tActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(\t\t\tactivity, elements);\t\tActivityCompat.startActivity(activity, i, options.toBundle());\t\treturn i;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVStreamLoadingActivity.java", "stars": "4", "class": {"name": "TVStreamLoadingActivity", "extends": "TVBaseActivity", "implements": ["BaseStreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tTVButterApplication.getAppContext()\t\t\t\t.getComponent()\t\t\t\t.inject(this);\t\tsuper.onCreate(savedInstanceState, R.layout.activity_streamloading);\t\tif (!getIntent().hasExtra(EXTRA_STREAM_INFO)) finish();\t\tmInfo = getIntent().getParcelableExtra(EXTRA_STREAM_INFO);\t\tmFragment = (BaseStreamLoadingFragment) getSupportFragmentManager().findFragmentById(R.id.fragment);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVStreamLoadingActivity.java", "stars": "4", "class": {"name": "TVStreamLoadingActivity", "extends": "TVBaseActivity", "implements": ["BaseStreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "getStreamInformation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StreamInfo", "snippet": "\tpublic StreamInfo getStreamInformation() {\t\treturn mInfo;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVStreamLoadingActivity.java", "stars": "4", "class": {"name": "TVStreamLoadingActivity", "extends": "TVBaseActivity", "implements": ["BaseStreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBackPressed() {\t\tsuper.onBackPressed();\t\tmFragment.cancelStream();\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVStreamLoadingActivity.java", "stars": "4", "class": {"name": "TVStreamLoadingActivity", "extends": "TVBaseActivity", "implements": ["BaseStreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "onTorrentServiceDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceDisconnected() {\t\tif (null != mFragment) {\t\t\tmFragment.onTorrentServiceDisconnected();\t\t}\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVStreamLoadingActivity.java", "stars": "4", "class": {"name": "TVStreamLoadingActivity", "extends": "TVBaseActivity", "implements": ["BaseStreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "onTorrentServiceConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onTorrentServiceConnected() {\t\tif (null != mFragment) {\t\t\tmFragment.onTorrentServiceConnected();\t\t}\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVStreamLoadingActivity.java", "stars": "4", "class": {"name": "TVStreamLoadingActivity", "extends": "TVBaseActivity", "implements": ["BaseStreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"TriggerInstance{\" +        \"depInstances=\" + this.depInstances +        \", id='\" + this.id + '\\'' +        \", submitUser='\" + this.submitUser + '\\'' +        \", project=\" + this.project +        \", flowId='\" + this.flowId + '\\'' +        \", flowVersion=\" + this.flowVersion +        \", flowTrigger=\" + this.flowTrigger +        \", flowExecId=\" + this.flowExecId +        '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Project", "snippet": "  public Project getProject() {    return this.project;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getProjectName() {    return this.project.getName();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFailureEmails", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getFailureEmails() {    return this.project.getFlow(this.getFlowId()).getFailureEmails();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFlowId() {    return this.flowId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getFlowVersion() {    return this.flowVersion;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowExecId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getFlowExecId() {    return this.flowExecId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlowExecId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFlowExecId(final int flowExecId) {    this.flowExecId = flowExecId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowTrigger", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "FlowTrigger", "snippet": "  public final FlowTrigger getFlowTrigger() {    return this.flowTrigger;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlowTrigger", "params": ["FlowTrigger"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFlowTrigger(final FlowTrigger flowTrigger) {    this.flowTrigger = flowTrigger;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubmitUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSubmitUser() {    return this.submitUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDependencyInstance", "params": ["DependencyInstance"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addDependencyInstance(final DependencyInstance depInst) {    this.depInstances.add(depInst);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepInstances", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<DependencyInstance>", "snippet": "  public List<DependencyInstance> getDepInstances() {    return this.depInstances;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.id;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isRunning", "params": ["Set<Status>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isRunning(final Set<Status> statuses) {    if (statuses.contains(Status.RUNNING)) {      for (final Status status : statuses) {        if (!status.equals(Status.SUCCEEDED) && !status.equals(Status.RUNNING)) {          return false;        }      }      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSucceed", "params": ["Set<Status>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isSucceed(final Set<Status> statuses) {    return statuses.contains(Status.SUCCEEDED) && statuses.size() == 1;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isCancelled", "params": ["Set<Status>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isCancelled(final Set<Status> statuses) {    if (statuses.contains(Status.CANCELLED)) {      for (final Status status : statuses) {        if (!status.equals(Status.SUCCEEDED) && !status.equals(Status.CANCELLED)) {          return false;        }      }      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status getStatus() {    // no-dependency trigger is always considered as success    if (this.depInstances.isEmpty()) {      return Status.SUCCEEDED;    }    final Set<Status> statusSet = new HashSet<>();    for (final DependencyInstance depInst : this.depInstances) {      statusSet.add(depInst.getStatus());    }    if (isRunning(statusSet)) {      return Status.RUNNING;    } else if (isSucceed(statusSet)) {      return Status.SUCCEEDED;    } else if (isCancelled(statusSet)) {      return Status.CANCELLED;    } else {      return Status.CANCELLING;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getStartTime() {    final List<Long> startTimeList = this.depInstances.stream()        .map(DependencyInstance::getStartTime).collect(Collectors.toList());    return startTimeList.isEmpty() ? 0 : Collections.min(startTimeList);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getEndTime() {    if (Status.isDone(this.getStatus())) {      final List<Long> endTimeList = this.depInstances.stream()          .map(DependencyInstance::getEndTime).filter(endTime -> endTime != 0)          .collect(Collectors.toList());      return endTimeList.isEmpty() ? 0 : Collections.max(endTimeList);    } else {      return 0;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java", "stars": "18", "class": {"name": "TriggerInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "constructor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void constructor() {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/DebugLogAspect.java", "stars": "1", "class": {"name": "DebugLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "method", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void method() {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/DebugLogAspect.java", "stars": "1", "class": {"name": "DebugLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "aroundJoinPoint", "params": ["ProceedingJoinPoint", "DebugLog"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object aroundJoinPoint(ProceedingJoinPoint joinPoint, DebugLog debugLog) throws Throwable {        enterMethod(joinPoint, debugLog);        long startNanos = System.nanoTime();        Object result = joinPoint.proceed();        long stopNanos = System.nanoTime();        exitMethod(joinPoint, debugLog, result, TimeUnit.NANOSECONDS.toMillis(stopNanos - startNanos));        return result;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/DebugLogAspect.java", "stars": "1", "class": {"name": "DebugLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enterMethod", "params": ["ProceedingJoinPoint", "DebugLog"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void enterMethod(ProceedingJoinPoint joinPoint, DebugLog debugLog) {        if (!AppConfig.isDebug()) {            return;        }        CodeSignature codeSignature = (CodeSignature) joinPoint.getSignature();        // \u65b9\u6cd5\u6240\u5728\u7c7b        String className = codeSignature.getDeclaringType().getName();        // \u65b9\u6cd5\u540d        String methodName = codeSignature.getName();        // \u65b9\u6cd5\u53c2\u6570\u540d\u96c6\u5408        String[] parameterNames = codeSignature.getParameterNames();        // \u65b9\u6cd5\u53c2\u6570\u96c6\u5408        Object[] parameterValues = joinPoint.getArgs();        //\u8bb0\u5f55\u5e76\u6253\u5370\u65b9\u6cd5\u7684\u4fe1\u606f        StringBuilder builder = getMethodLogInfo(className, methodName, parameterNames, parameterValues);        log(debugLog.value(), builder.toString());        final String section = builder.toString().substring(2);        Trace.beginSection(section);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/DebugLogAspect.java", "stars": "1", "class": {"name": "DebugLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMethodLogInfo", "params": ["String", "String", "String", "Object"], "throws": null, "modifiers": ["private"], "return_type": "StringBuilder", "snippet": "    private StringBuilder getMethodLogInfo(String className, String methodName, String[] parameterNames, Object[] parameterValues) {        StringBuilder builder = new StringBuilder(\"\\u21E2 \");        builder.append(className)                .append(\".\")                .append(methodName)                .append('(');        for (int i = 0; i < parameterValues.length; i++) {            if (i > 0) {                builder.append(\", \");            }            builder.append(parameterNames[i]).append('=');            builder.append(parameterValues[i].toString());        }        builder.append(')');        if (Looper.myLooper() != Looper.getMainLooper()) {            builder.append(\" [Thread:\\\"\").append(Thread.currentThread().getName()).append(\"\\\"]\");        }        return builder;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/DebugLogAspect.java", "stars": "1", "class": {"name": "DebugLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exitMethod", "params": ["ProceedingJoinPoint", "DebugLog", "Object", "long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void exitMethod(ProceedingJoinPoint joinPoint, DebugLog debugLog, Object result, long lengthMillis) {        if (!AppConfig.isDebug()) {            return;        }        Trace.endSection();        Signature signature = joinPoint.getSignature();        String className = signature.getDeclaringType().getName();        String methodName = signature.getName();        StringBuilder builder = new StringBuilder(\"\\u21E0 \")                .append(className)                .append(\".\")                .append(methodName)                .append(\" [\")                .append(lengthMillis)                .append(\"ms]\");        //  \u5224\u65ad\u65b9\u6cd5\u662f\u5426\u6709\u8fd4\u56de\u503c        if (signature instanceof MethodSignature && ((MethodSignature) signature).getReturnType() != void.class) {            builder.append(\" = \");            builder.append(result.toString());        }        log(debugLog.value(), builder.toString());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/DebugLogAspect.java", "stars": "1", "class": {"name": "DebugLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "log", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void log(String tag, String msg) {        Log.d(tag, msg);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/DebugLogAspect.java", "stars": "1", "class": {"name": "DebugLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loginFtpServer", "params": ["FtpConnParams"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loginFtpServer(FtpConnParams connParams) {        // \u521b\u5efaJSch\u5bf9\u8c61        JSch jsch = new JSch();        try {            if(StringUtils.isNotBlank(connParams.getPrvKeyPath())){                jsch.addIdentity(connParams.getPrvKeyPath());            }            session = jsch.getSession(connParams.getUsername(), connParams.getHost(), connParams.getPort());            // \u6839\u636e\u7528\u6237\u540d\uff0c\u4e3b\u673aip\uff0c\u7aef\u53e3\u83b7\u53d6\u4e00\u4e2aSession\u5bf9\u8c61            // \u5982\u679c\u670d\u52a1\u5668\u8fde\u63a5\u4e0d\u4e0a\uff0c\u5219\u629b\u51fa\u5f02\u5e38            if (session == null) {                throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN,                        \"session is null,\u65e0\u6cd5\u901a\u8fc7sftp\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u94fe\u63a5\uff0c\u8bf7\u68c0\u67e5\u4e3b\u673a\u540d\u548c\u7528\u6237\u540d\u662f\u5426\u6b63\u786e.\");            }            // \u8bbe\u7f6e\u5bc6\u7801            if(StringUtils.isNotBlank(connParams.getPassword())){                session.setPassword((String) CryptoUtils.string2Object(connParams.getPassword()));            }            Properties config = new Properties();            config.put(\"StrictHostKeyChecking\", \"no\");            config.put(\"PreferredAuthentications\", \"publickey,password\");            // \u4e3aSession\u5bf9\u8c61\u8bbe\u7f6eproperties            session.setConfig(config);            // \u8bbe\u7f6etimeout\u65f6\u95f4            session.setTimeout(connParams.getTimeout());            // \u901a\u8fc7Session\u5efa\u7acb\u94fe\u63a5            session.connect();            // \u6253\u5f00SFTP\u901a\u9053            channelSftp = (ChannelSftp) session.openChannel(\"sftp\");            channelSftp.connect(); // \u5efa\u7acbSFTP\u901a\u9053\u7684\u8fde\u63a5        } catch (JSchException | ClassNotFoundException | IOException e) {            if (null != e.getCause()) {                String cause = e.getCause().toString();                String unknownHostException = \"java.net.UnknownHostException: \" + connParams.getHost();                String illegalArgumentException = \"java.lang.IllegalArgumentException: port out of range:\" + connParams.getPort();                String wrongPort = \"java.net.ConnectException: Connection refused\";                if (unknownHostException.equals(cause)) {                    String message = String.format(\"\u8bf7\u786e\u8ba4ftp\u670d\u52a1\u5668\u5730\u5740\u662f\u5426\u6b63\u786e\uff0c\u65e0\u6cd5\u8fde\u63a5\u5230\u5730\u5740\u4e3a: [%s] \u7684ftp\u670d\u52a1\u5668\", connParams.getHost());                    LOG.error(message);                    throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN, message, e);                } else if (illegalArgumentException.equals(cause) || wrongPort.equals(cause)) {                    String message = String.format(\"\u8bf7\u786e\u8ba4\u8fde\u63a5ftp\u670d\u52a1\u5668\u7aef\u53e3\u662f\u5426\u6b63\u786e\uff0c\u9519\u8bef\u7684\u7aef\u53e3: [%s] \", connParams.getPort());                    LOG.error(message);                    throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN, message, e);                }else{                    String message = \"cannot login to the sftp server, please check your configuration of connecting\";                    LOG.error(message);                    throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN, message, e);                }            } else {                if (\"Auth fail\".equals(e.getMessage())) {                    String message = String.format(\"\u4e0eftp\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u5931\u8d25,\u8bf7\u68c0\u67e5\u7528\u6237\u540d\u548c\u5bc6\u7801\u662f\u5426\u6b63\u786e: [%s]\",                            \"message:host =\" + connParams.getHost() + \",username = \" + connParams.getUsername() + \",port =\" + connParams.getPort());                    LOG.error(message);                    throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN, message);                } else {                    String message = String.format(\"\u4e0eftp\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u5931\u8d25 : [%s]\",                            \"message:host =\" + connParams.getHost() + \",username = \" + connParams.getUsername() + \",port =\" + connParams.getPort());                    LOG.error(message);                    throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN, message, e);                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/SftpHelper.java", "stars": "23", "class": {"name": "SftpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "logoutFtpServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void logoutFtpServer() {        if (channelSftp != null) {            channelSftp.disconnect();        }        if (session != null) {            session.disconnect();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/SftpHelper.java", "stars": "23", "class": {"name": "SftpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "isDirExist", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDirExist(String directoryPath) {        try {            SftpATTRS sftpATTRS = channelSftp.lstat(directoryPath);            return sftpATTRS.isDir();        } catch (SftpException e) {            if (e.getMessage().toLowerCase().equals(FILE_NOT_EXIST_)) {                return false;            }            String message = String.format(\"\u8fdb\u5165\u76ee\u5f55\uff1a[%s]\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38\", directoryPath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/SftpHelper.java", "stars": "23", "class": {"name": "SftpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "isFileExist", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFileExist(String filePath) {        boolean isExitFlag = false;        try {            SftpATTRS sftpATTRS = channelSftp.lstat(filePath);            if (sftpATTRS.getSize() >= 0) {                isExitFlag = true;            }        } catch (SftpException e) {            if (!FILE_NOT_EXIST_.equals(e.getMessage().toLowerCase())) {                String message = String.format(\"\u83b7\u53d6\u6587\u4ef6\uff1a[%s] \u5c5e\u6027\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38\", filePath);                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);            }        }        return isExitFlag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/SftpHelper.java", "stars": "23", "class": {"name": "SftpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSymbolicLink", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSymbolicLink(String filePath) {        try {            SftpATTRS sftpATTRS = channelSftp.lstat(filePath);            return sftpATTRS.isLink();        } catch (SftpException e) {            if (e.getMessage().toLowerCase().equals(FILE_NOT_EXIST_)) {                String message = String.format(\"\u8bf7\u786e\u8ba4\u60a8\u7684\u914d\u7f6e\u9879path:[%s]\u5b58\u5728\uff0c\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8bfb\u53d6\", filePath);                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.FILE_NOT_EXISTS, message);            } else {                String message = String.format(\"\u83b7\u53d6\u6587\u4ef6\uff1a[%s] \u5c5e\u6027\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38\", filePath);                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/SftpHelper.java", "stars": "23", "class": {"name": "SftpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getListFiles", "params": ["String", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "HashSet<String>", "snippet": "    public HashSet<String> getListFiles(String directoryPath, int parentLevel, int maxTraversalLevel) {        if (parentLevel < maxTraversalLevel) {            // \u7236\u7ea7\u76ee\u5f55,\u4ee5'/'\u7ed3\u5c3e            String parentPath;            int pathLen = directoryPath.length();            //*\u548c\uff1f\u7684\u9650\u5236            if (directoryPath.contains(\"*\") || directoryPath.contains(\"?\")) {                // path\u662f\u6b63\u5219\u8868\u8fbe\u5f0f                String subPath = UnstructuredStorageReaderUtil.getRegexPathParentPath(directoryPath);                if (isDirExist(subPath)) {                    parentPath = subPath;                } else {                    String message = String.format(\"\u4e0d\u80fd\u8fdb\u5165\u76ee\u5f55\uff1a[%s],\" + \"\u8bf7\u786e\u8ba4\u60a8\u7684\u914d\u7f6e\u9879path:[%s]\u5b58\u5728\uff0c\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8fdb\u5165\", subPath,                            directoryPath);                    LOG.error(message);                    throw DataXException.asDataXException(FtpReaderErrorCode.FILE_NOT_EXISTS, message);                }            } else if (isDirExist(directoryPath)) {                // path\u662f\u76ee\u5f55                if (directoryPath.charAt(pathLen - 1) == IOUtils.DIR_SEPARATOR) {                    parentPath = directoryPath;                } else {                    parentPath = directoryPath + IOUtils.DIR_SEPARATOR;                }            } else if (isSymbolicLink(directoryPath)) {                //path\u662f\u94fe\u63a5\u6587\u4ef6                String message = String.format(\"\u6587\u4ef6:[%s]\u662f\u94fe\u63a5\u6587\u4ef6\uff0c\u5f53\u524d\u4e0d\u652f\u6301\u94fe\u63a5\u6587\u4ef6\u7684\u8bfb\u53d6\", directoryPath);                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.LINK_FILE, message);            } else if (isFileExist(directoryPath)) {                // path\u6307\u5411\u5177\u4f53\u6587\u4ef6                sourceFiles.add(directoryPath);                return sourceFiles;            } else {                String message = String.format(\"\u8bf7\u786e\u8ba4\u60a8\u7684\u914d\u7f6e\u9879path:[%s]\u5b58\u5728\uff0c\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8bfb\u53d6\", directoryPath);                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.FILE_NOT_EXISTS, message);            }            try {                Vector vector = channelSftp.ls(directoryPath);                for (int i = 0; i < vector.size(); i++) {                    LsEntry le = (LsEntry) vector.get(i);                    String strName = le.getFilename();                    if(strName.startsWith(\".\")){                        //skip hidden files                        continue;                    }                    String filePath = parentPath + strName;                    if (isDirExist(filePath)) {                        // \u662f\u5b50\u76ee\u5f55                        if (!(strName.equals(\".\") || strName.equals(\"..\"))) {                            //\u9012\u5f52\u5904\u7406                            getListFiles(filePath, parentLevel + 1, maxTraversalLevel);                        }                    } else if (isSymbolicLink(filePath)) {                        //\u662f\u94fe\u63a5\u6587\u4ef6                        String message = String.format(\"\u6587\u4ef6:[%s]\u662f\u94fe\u63a5\u6587\u4ef6\uff0c\u5f53\u524d\u4e0d\u652f\u6301\u94fe\u63a5\u6587\u4ef6\u7684\u8bfb\u53d6\", filePath);                        LOG.error(message);                        throw DataXException.asDataXException(FtpReaderErrorCode.LINK_FILE, message);                    } else if (isFileExist(filePath)) {                        // \u662f\u6587\u4ef6                        sourceFiles.add(filePath);                    } else {                        String message = String.format(\"\u8bf7\u786e\u8ba4path:[%s]\u5b58\u5728\uff0c\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8bfb\u53d6\", filePath);                        LOG.error(message);                        throw DataXException.asDataXException(FtpReaderErrorCode.FILE_NOT_EXISTS, message);                    }                } // end for vector            } catch (SftpException e) {                String message = String.format(\"\u83b7\u53d6path\uff1a[%s] \u4e0b\u6587\u4ef6\u5217\u8868\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38\", directoryPath);                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);            }            return sourceFiles;        } else {            //\u8d85\u51fa\u6700\u5927\u9012\u5f52\u5c42\u6570            String message = String.format(\"\u83b7\u53d6path\uff1a[%s] \u4e0b\u6587\u4ef6\u5217\u8868\u65f6\u8d85\u51fa\u6700\u5927\u5c42\u6570,\u8bf7\u786e\u8ba4\u8def\u5f84[%s]\u4e0b\u4e0d\u5b58\u5728\u8f6f\u8fde\u63a5\u6587\u4ef6\", directoryPath, directoryPath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.OUT_MAX_DIRECTORY_LEVEL, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/SftpHelper.java", "stars": "23", "class": {"name": "SftpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInputStream", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "    public InputStream getInputStream(String filePath) {        try {            return channelSftp.get(filePath);        } catch (SftpException e) {            String message = String.format(\"\u8bfb\u53d6\u6587\u4ef6 : [%s] \u65f6\u51fa\u9519,\u8bf7\u786e\u8ba4\u6587\u4ef6\uff1a[%s]\u5b58\u5728\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8bfb\u53d6\", filePath, filePath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.OPEN_FILE_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/SftpHelper.java", "stars": "23", "class": {"name": "SftpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastModifyTIme", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getLastModifyTIme(String filePath) {        try {            SftpATTRS attrs = channelSftp.stat(filePath);            long time = attrs.getMTime();            if(String.valueOf(time).length() < 13){                //unix_time to timestamp                return time * 1000;            }            return time;        }catch(SftpException e){            String message = String.format(\"\u83b7\u53d6SFTP\u6587\u4ef6: [%s] \u6700\u65b0\u4fee\u6539\u65f6\u95f4\u5f02\u5e38\uff0c\u8bf7\u786e\u8ba4\u662f\u5426\u652f\u6301\u8be5\u63a5\u53e3\", filePath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.GET_FILE_STATS_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/SftpHelper.java", "stars": "23", "class": {"name": "SftpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteFile", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteFile(String filePath) {        try{            this.channelSftp.rm(filePath);        }catch(SftpException e){            String message = String.format(                    \"delete file [%s] error, please check your network and file permission, message [%s]\",                    filePath, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/SftpHelper.java", "stars": "23", "class": {"name": "SftpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "hiveDBInfo", "params": ["String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> hiveDBInfo(@PathVariable(\"ds_id\") String dsId, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        List<String> dbList = hiveMetaDBService.getDatabases(dsId);        return new Response<>().successResponse(dbList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/HiveInfoController.java", "stars": "23", "class": {"name": "HiveInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "hiveTableInfo", "params": ["String", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> hiveTableInfo(@PathVariable(\"ds_id\") String dsId,                                          @PathVariable(\"db\")String db, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        List<String>  tables = hiveMetaDBService.getTables(dsId, db);        return new Response<>().successResponse(tables);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/HiveInfoController.java", "stars": "23", "class": {"name": "HiveInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "hivePartitionInfo", "params": ["String", "String", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> hivePartitionInfo(@PathVariable(\"ds_id\") String dsId,                                              @PathVariable(\"db\")String db,                                              @PathVariable(\"table\") String table, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        MetaPartitionInfo info = hiveMetaDBService.getPartitionKeys(dsId, db, table);        return new Response<>().successResponse(info);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/HiveInfoController.java", "stars": "23", "class": {"name": "HiveInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "hiveFieldInfo", "params": ["String", "String", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> hiveFieldInfo(@PathVariable(\"ds_id\") String dsId,                                          @PathVariable(\"db\")String db,                                          @PathVariable(\"table\") String table, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        List<MetaColumnInfo> information = hiveMetaDBService.getColumns(dsId, db, table);        return new Response<>().successResponse(information);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/HiveInfoController.java", "stars": "23", "class": {"name": "HiveInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStms", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Stm>", "snippet": "\tpublic List<Stm> getStms() {\t\treturn stms;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmList.java", "stars": "3", "class": {"name": "StmList", "extends": "Stm", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<Object,Object>", "snippet": "  public Map<Object, Object> getMap() {    return map;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/MapParam.java", "stars": "15", "class": {"name": "MapParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMap", "params": ["Map<Object,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMap(Map<Object, Object> map) {    this.map = map;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/MapParam.java", "stars": "15", "class": {"name": "MapParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRoleList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Role>", "snippet": "    public List<Role> getRoleList() {        return roleList;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setRoleList", "params": ["List<Role>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoleList(List<Role> roleList) {        this.roleList = roleList;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUsername() {    return username;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUsername(String username) {    this.username = username;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPassword() {    return password;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPassword(String password) {    this.password = password;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPasswordSalt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPasswordSalt() {    return passwordSalt;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPasswordSalt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPasswordSalt(String passwordSalt) {    this.passwordSalt = passwordSalt;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Users.java", "stars": "2", "class": {"name": "Users", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "testSoftDeletedEntityShouldNotBeRetrieved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSoftDeletedEntityShouldNotBeRetrieved() {        userRepository.deleteAll();        User user = new User();        user.setLogin(\"testlogin\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(RandomStringUtils.randomAlphabetic(5) + \"@test.com\");        user.setFirstName(\"test\");        user.setLastName(\"test\");        user.setBankAccountIBAN(DEFAULT_IBAN);        user = userRepository.saveAndFlush(user);        assertThat(userRepository.findAll()).containsExactly(user);        user.setDeleted(Instant.now());        userRepository.saveAndFlush(user);        assertThat(userRepository.findAll()).isEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/UserRepositoryTest.java", "stars": "2", "class": {"name": "UserRepositoryTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        JudgeRole judgeRole = new JudgeRole();        String admin_role = judgeRole.judge(new AdminRole(\"admin_role\"));        System.out.println(admin_role);        String order_role = judgeRole.judge(new OrderRole(\"order_role\"));        System.out.println(order_role);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/strategy/AuthorityTest.java", "stars": "2", "class": {"name": "AuthorityTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/mapper_extend/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/mapper_extend/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java", "stars": "15", "class": {"name": "MapperExtendTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUserWithAnExtendedXMLMethod", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUserWithAnExtendedXMLMethod() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      ParentMapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserXML();      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java", "stars": "15", "class": {"name": "MapperExtendTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUserWithAnExtendedAnnotatedMethod", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUserWithAnExtendedAnnotatedMethod() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      ParentMapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserAnnotated();      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java", "stars": "15", "class": {"name": "MapperExtendTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUserWithAnOverloadedXMLMethod", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUserWithAnOverloadedXMLMethod() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      ParentMapper mapper = sqlSession.getMapper(MapperOverload.class);      User user = mapper.getUserXML();      Assertions.assertEquals(\"User2\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java", "stars": "15", "class": {"name": "MapperExtendTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUserWithAnOverloadedAnnotatedMethod", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUserWithAnOverloadedAnnotatedMethod() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      ParentMapper mapper = sqlSession.getMapper(MapperOverload.class);      User user = mapper.getUserAnnotated();      Assertions.assertEquals(\"User2\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java", "stars": "15", "class": {"name": "MapperExtendTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFindStatementInSubInterfaceOfDeclaringClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindStatementInSubInterfaceOfDeclaringClass() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      ChildMapper mapper = sqlSession.getMapper(ChildMapper.class);      User user = mapper.getUserByName(\"User1\");      Assertions.assertNotNull(user);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java", "stars": "15", "class": {"name": "MapperExtendTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldThrowExceptionIfNoMatchingStatementFound", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldThrowExceptionIfNoMatchingStatementFound() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      when(mapper::noMappedStatement);      then(caughtException()).isInstanceOf(BindingException.class)        .hasMessage(\"Invalid bound statement (not found): \"          + Mapper.class.getName() + \".noMappedStatement\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java", "stars": "15", "class": {"name": "MapperExtendTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "writeExternal", "params": ["ObjectOutput"], "throws": ["IOException"], "modifiers": ["public", "final"], "return_type": "void", "snippet": "  public final void writeExternal(final ObjectOutput out) throws IOException {    boolean firstRound = false;    final ByteArrayOutputStream baos = new ByteArrayOutputStream();    ObjectOutputStream os = stream.get();    if (os == null) {      os = new ObjectOutputStream(baos);      firstRound = true;      stream.set(os);    }    os.writeObject(this.userBean);    os.writeObject(this.unloadedProperties);    os.writeObject(this.objectFactory);    os.writeObject(this.constructorArgTypes);    os.writeObject(this.constructorArgs);    final byte[] bytes = baos.toByteArray();    out.writeObject(bytes);    if (firstRound) {      stream.remove();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java", "stars": "15", "class": {"name": "AbstractSerialStateHolder", "extends": null, "implements": ["Externalizable"], "modifiers": ["public", "abstract"]}}, {"method_name": "readExternal", "params": ["ObjectInput"], "throws": ["IOException", "ClassNotFoundException"], "modifiers": ["public", "final"], "return_type": "void", "snippet": "  public final void readExternal(final ObjectInput in) throws IOException, ClassNotFoundException {    final Object data = in.readObject();    if (data.getClass().isArray()) {      this.userBeanBytes = (byte[]) data;    } else {      this.userBean = data;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java", "stars": "15", "class": {"name": "AbstractSerialStateHolder", "extends": null, "implements": ["Externalizable"], "modifiers": ["public", "abstract"]}}, {"method_name": "readResolve", "params": [], "throws": ["ObjectStreamException"], "modifiers": ["final", "protected"], "return_type": "Object", "snippet": "  protected final Object readResolve() throws ObjectStreamException {    /* Second run */    if (this.userBean != null && this.userBeanBytes.length == 0) {      return this.userBean;    }    /* First run */    try (ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {      this.userBean = in.readObject();      this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) in.readObject();      this.objectFactory = (ObjectFactory) in.readObject();      this.constructorArgTypes = (Class<?>[]) in.readObject();      this.constructorArgs = (Object[]) in.readObject();    } catch (final IOException ex) {      throw (ObjectStreamException) new StreamCorruptedException().initCause(ex);    } catch (final ClassNotFoundException ex) {      throw (ObjectStreamException) new InvalidClassException(ex.getLocalizedMessage()).initCause(ex);    }    final Map<String, ResultLoaderMap.LoadPair> arrayProps = new HashMap<>(this.unloadedProperties);    final List<Class<?>> arrayTypes = Arrays.asList(this.constructorArgTypes);    final List<Object> arrayValues = Arrays.asList(this.constructorArgs);    return this.createDeserializationProxy(userBean, arrayProps, objectFactory, arrayTypes, arrayValues);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java", "stars": "15", "class": {"name": "AbstractSerialStateHolder", "extends": null, "implements": ["Externalizable"], "modifiers": ["public", "abstract"]}}, {"method_name": "createDeserializationProxy", "params": ["Object", "Map<String,ResultLoaderMap>", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "Object", "snippet": "  protected abstract Object createDeserializationProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,          List<Class<?>> constructorArgTypes, List<Object> constructorArgs);  private static class LookAheadObjectInputStream extends ObjectInputStream {    private static final List<String> blacklist = Arrays.asList(        \"org.apache.commons.beanutils.BeanComparator\",        \"org.apache.commons.collections.functors.InvokerTransformer\",        \"org.apache.commons.collections.functors.InstantiateTransformer\",        \"org.apache.commons.collections4.functors.InvokerTransformer\",        \"org.apache.commons.collections4.functors.InstantiateTransformer\",        \"org.codehaus.groovy.runtime.ConvertedClosure\",        \"org.codehaus.groovy.runtime.MethodClosure\",        \"org.springframework.beans.factory.ObjectFactory\",        \"org.springframework.transaction.jta.JtaTransactionManager\",        \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");    public LookAheadObjectInputStream(InputStream in) throws IOException {      super(in);    }    @Override    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {      String className = desc.getName();      if (blacklist.contains(className)) {        throw new InvalidClassException(className, \"Deserialization is not allowed for security reasons. \"            + \"It is strongly recommended to configure the deserialization filter provided by JDK. \"            + \"See http://openjdk.java.net/jeps/290 for the details.\");      }      return super.resolveClass(desc);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java", "stars": "15", "class": {"name": "AbstractSerialStateHolder", "extends": null, "implements": ["Externalizable"], "modifiers": ["public", "abstract"]}}, {"method_name": "resolveClass", "params": ["ObjectStreamClass"], "throws": ["IOException", "ClassNotFoundException"], "modifiers": ["protected"], "return_type": "Class<?>", "snippet": "    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {      String className = desc.getName();      if (blacklist.contains(className)) {        throw new InvalidClassException(className, \"Deserialization is not allowed for security reasons. \"            + \"It is strongly recommended to configure the deserialization filter provided by JDK. \"            + \"See http://openjdk.java.net/jeps/290 for the details.\");      }      return super.resolveClass(desc);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java", "stars": "15", "class": {"name": "LookAheadObjectInputStream", "extends": "ObjectInputStream", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Fragment", "snippet": "    public Fragment getItem(int position) {        return list.get(position);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/otc/TabPagerAdapter.java", "stars": "1", "class": {"name": "TabPagerAdapter", "extends": "FragmentStatePagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return list.size();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/otc/TabPagerAdapter.java", "stars": "1", "class": {"name": "TabPagerAdapter", "extends": "FragmentStatePagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "CharSequence", "snippet": "    public CharSequence getPageTitle(int position) {        return titles.get(position % titles.size());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/otc/TabPagerAdapter.java", "stars": "1", "class": {"name": "TabPagerAdapter", "extends": "FragmentStatePagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "instantiateItem", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object instantiateItem(@NonNull ViewGroup container, int position) {        Fragment fragment = (Fragment) super.instantiateItem(container, position);        mFragmentManager.beginTransaction().show(fragment).commitAllowingStateLoss();        return fragment;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/otc/TabPagerAdapter.java", "stars": "1", "class": {"name": "TabPagerAdapter", "extends": "FragmentStatePagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "destroyItem", "params": ["ViewGroup", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {        Fragment fragment = list.get(position);// \u83b7\u53d6\u8981\u9500\u6bc1\u7684fragment        mFragmentManager.beginTransaction().hide(fragment).commitAllowingStateLoss();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/otc/TabPagerAdapter.java", "stars": "1", "class": {"name": "TabPagerAdapter", "extends": "FragmentStatePagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "HttpStatus", "snippet": "    public abstract HttpStatus getStatus();    public Object getErrorData() {        return this.errorData;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/exception/BaseException.java", "stars": "1", "class": {"name": "BaseException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getErrorData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getErrorData() {        return this.errorData;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/exception/BaseException.java", "stars": "1", "class": {"name": "BaseException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setErrorData", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "BaseException", "snippet": "    public BaseException setErrorData(Object errorData) {        this.errorData = errorData;        return this;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/exception/BaseException.java", "stars": "1", "class": {"name": "BaseException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "needLogin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JsonData", "snippet": "    public JsonData needLogin(){        return JsonData.buildSuccess(-2,\"\u8bf7\u5148\u767b\u5f55\");    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/controller/PublicController.java", "stars": "2", "class": {"name": "PublicController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "needPermission", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JsonData", "snippet": "    public JsonData needPermission(){        return JsonData.buildSuccess(-3,\"\u60a8\u6ca1\u6709\u6743\u9650\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\uff01\");    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/controller/PublicController.java", "stars": "2", "class": {"name": "PublicController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JsonData", "snippet": "    public JsonData index(){        List<String> goods = new ArrayList<>();        goods.add(\"\u7a7a\u8c03\");        goods.add(\"\u6c34\u58f6\");        goods.add(\"\u7535\u51b0\u7bb1\");        goods.add(\"\u70ed\u6c34\u5668\");        goods.add(\"\u70e4\u7bb1\");        return JsonData.buildSuccess(goods);    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/controller/PublicController.java", "stars": "2", "class": {"name": "PublicController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": ["UserBO", "HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "JsonData", "snippet": "    public JsonData login(@RequestBody UserBO userBO, HttpServletRequest request, HttpServletResponse response){        Subject subject = SecurityUtils.getSubject();        Map<String,Object> map = new HashMap<>(16);        try {            UsernamePasswordToken usernamePasswordToken = new UsernamePasswordToken(userBO.getName(), userBO.getPwd());            subject.login(usernamePasswordToken);            map.put(\"token\",subject.getSession().getId());        }catch (Exception e){            map.put(\"msg\",\"\u8d26\u53f7\u6216\u5bc6\u7801\u4e0d\u5b58\u5728!\");        }        return JsonData.buildSuccess(map);    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/controller/PublicController.java", "stars": "2", "class": {"name": "PublicController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSunrise", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSunrise() {        return sunrise;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSunrise", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSunrise(String sunrise) {        this.sunrise = sunrise;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLng", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getLng() {        return lng;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLng", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLng(Double lng) {        this.lng = lng;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountryCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCountryCode() {        return countryCode;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountryCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountryCode(String countryCode) {        this.countryCode = countryCode;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGmtOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getGmtOffset() {        return gmtOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGmtOffset", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGmtOffset(Integer gmtOffset) {        this.gmtOffset = gmtOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRawOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getRawOffset() {        return rawOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRawOffset", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRawOffset(Integer rawOffset) {        this.rawOffset = rawOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSunset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSunset() {        return sunset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSunset", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSunset(String sunset) {        this.sunset = sunset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimezoneId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTimezoneId() {        return timezoneId;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimezoneId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimezoneId(String timezoneId) {        this.timezoneId = timezoneId;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDstOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getDstOffset() {        return dstOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDstOffset", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDstOffset(Integer dstOffset) {        this.dstOffset = dstOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountryName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCountryName() {        return countryName;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountryName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountryName(String countryName) {        this.countryName = countryName;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTime() {        return time;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTime(String time) {        this.time = time;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getLat() {        return lat;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLat", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLat(Integer lat) {        this.lat = lat;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdditionalProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getAdditionalProperties() {        return this.additionalProperties;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAdditionalProperty", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdditionalProperty(String name, Object value) {        this.additionalProperties.put(name, value);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"SunRiseSet{\" +                \"sunrise='\" + sunrise + '\\'' +                \", lng=\" + lng +                \", countryCode='\" + countryCode + '\\'' +                \", gmtOffset=\" + gmtOffset +                \", rawOffset=\" + rawOffset +                \", sunset='\" + sunset + '\\'' +                \", timezoneId='\" + timezoneId + '\\'' +                \", dstOffset=\" + dstOffset +                \", countryName='\" + countryName + '\\'' +                \", time='\" + time + '\\'' +                \", lat=\" + lat +                \", additionalProperties=\" + additionalProperties +                '}';    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/SunRiseSet.java", "stars": "1", "class": {"name": "SunRiseSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "useShader", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void useShader(int shader) {        useShader(shader, null);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUniformf", "params": ["String", "int", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setUniformf(String name, int shader, float v) {        int i = ARBShaderObjects.glGetUniformLocationARB(shader, name);        ARBShaderObjects.glUniform1fARB(i, v);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUniformi", "params": ["String", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setUniformi(String name, int shader, int v) {        int i = ARBShaderObjects.glGetUniformLocationARB(shader, name);        ARBShaderObjects.glUniform1iARB(i, v);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "useShader", "params": ["int", "Consumer<Integer>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void useShader(int shader, Consumer<Integer> callback) {        ARBShaderObjects.glUseProgramObjectARB(shader);        if (shader != 0) {            int time = ARBShaderObjects.glGetUniformLocationARB(shader, \"time\");            ARBShaderObjects.glUniform1fARB(time, PhaseEvent.clientTick / 20.f);            int width = ARBShaderObjects.glGetUniformLocationARB(shader, \"width\");            ARBShaderObjects.glUniform1iARB(width, Minecraft.getMinecraft().displayWidth);            int height = ARBShaderObjects.glGetUniformLocationARB(shader, \"height\");            ARBShaderObjects.glUniform1iARB(height, Minecraft.getMinecraft().displayHeight);            if (callback != null)                callback.accept(shader);        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseShader", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void releaseShader() {        useShader(0, null);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createProgram", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int createProgram(String frag, String vert) {        int vertId = 0, fragId = 0, program = 0;        if (vert != null)            vertId = createShader(StringHelper.getShader(vert), ARBVertexShader.GL_VERTEX_SHADER_ARB);        if (frag != null)            fragId = createShader(StringHelper.getShader(frag), ARBFragmentShader.GL_FRAGMENT_SHADER_ARB);        program = ARBShaderObjects.glCreateProgramObjectARB();        if (program == 0)            return 0;        if (vert != null)            ARBShaderObjects.glAttachObjectARB(program, vertId);        if (frag != null)            ARBShaderObjects.glAttachObjectARB(program, fragId);        ARBShaderObjects.glLinkProgramARB(program);        if (ARBShaderObjects.glGetObjectParameteriARB(program, ARBShaderObjects.GL_OBJECT_LINK_STATUS_ARB) == 0) {            Phase.logger.error(ARBShaderObjects.glGetInfoLogARB(program, ARBShaderObjects.glGetObjectParameteriARB(program, ARBShaderObjects.GL_OBJECT_INFO_LOG_LENGTH_ARB)));            return 0;        }        ARBShaderObjects.glValidateProgramARB(program);        if (ARBShaderObjects.glGetObjectParameteriARB(program, ARBShaderObjects.GL_OBJECT_VALIDATE_STATUS_ARB) == 0) {            return 0;        }        return program;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteShader", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void deleteShader(int id) {        if (id != 0)            ARBShaderObjects.glDeleteObjectARB(id);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createShader", "params": ["String", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int createShader(String fn, int type) {        int shader = 0;        try {            shader = ARBShaderObjects.glCreateShaderObjectARB(type);            if (shader == 0)                return 0;            String fc = readlines(fn);            ARBShaderObjects.glShaderSourceARB(shader, fc);            ARBShaderObjects.glCompileShaderARB(shader);            if (ARBShaderObjects.glGetObjectParameteriARB(shader, ARBShaderObjects.GL_OBJECT_COMPILE_STATUS_ARB) == 0)                throw new RuntimeException();            return shader;        } catch (UnsupportedEncodingException e) {            Phase.logger.error(\"Cannot resolve shader file encoding!\");            return -1;        } catch (RuntimeException e) {            Phase.logger.error(getLogInfo(shader));            ARBShaderObjects.glDeleteObjectARB(shader);            return -1;        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readlines", "params": ["String"], "throws": ["UnsupportedEncodingException"], "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String readlines(String fn) throws UnsupportedEncodingException {        InputStream in = ShaderHelper.class.getResourceAsStream(fn);        return in == null ? \"\" : new BufferedReader(new InputStreamReader(in, \"UTF-8\")).lines().collect(Collectors.joining(\"\\n\"));    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogInfo", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String getLogInfo(int obj) {        return ARBShaderObjects.glGetInfoLogARB(obj,                ARBShaderObjects.glGetObjectParameteriARB(obj, ARBShaderObjects.GL_OBJECT_INFO_LOG_LENGTH_ARB));    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ShaderHelper.java", "stars": "2", "class": {"name": "ShaderHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCaution", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCaution() {    return caution;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/AddressWithCaution.java", "stars": "15", "class": {"name": "AddressWithCaution", "extends": "Address", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCaution", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCaution(String caution) {    this.caution = caution;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/AddressWithCaution.java", "stars": "15", "class": {"name": "AddressWithCaution", "extends": "Address", "implements": null, "modifiers": ["public"]}}, {"method_name": "addMapping", "params": ["Class<Throwable>", "int"], "throws": null, "modifiers": ["public"], "return_type": "ErrorDialogConfig", "snippet": "    public ErrorDialogConfig addMapping(Class<? extends Throwable> clazz, int msgId) {        mapping.addMapping(clazz, msgId);        return this;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogConfig.java", "stars": "7", "class": {"name": "ErrorDialogConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessageIdForThrowable", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMessageIdForThrowable(final Throwable throwable) {        Integer resId = mapping.mapThrowable(throwable);        if (resId != null) {            return resId;        } else {            Log.d(KeventBus.TAG, \"No specific message ressource ID found for \" + throwable);            return defaultErrorMsgId;        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogConfig.java", "stars": "7", "class": {"name": "ErrorDialogConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDefaultDialogIconId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDefaultDialogIconId(int defaultDialogIconId) {        this.defaultDialogIconId = defaultDialogIconId;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogConfig.java", "stars": "7", "class": {"name": "ErrorDialogConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDefaultEventTypeOnDialogClosed", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDefaultEventTypeOnDialogClosed(Class<?> defaultEventTypeOnDialogClosed) {        this.defaultEventTypeOnDialogClosed = defaultEventTypeOnDialogClosed;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogConfig.java", "stars": "7", "class": {"name": "ErrorDialogConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disableExceptionLogging", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disableExceptionLogging() {        logExceptions = false;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogConfig.java", "stars": "7", "class": {"name": "ErrorDialogConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTagForLoggingExceptions", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTagForLoggingExceptions(String tagForLoggingExceptions) {        this.tagForLoggingExceptions = tagForLoggingExceptions;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogConfig.java", "stars": "7", "class": {"name": "ErrorDialogConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEventBus", "params": ["KeventBus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEventBus(KeventBus eventBus) {        this.eventBus = eventBus;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogConfig.java", "stars": "7", "class": {"name": "ErrorDialogConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEventBus", "params": [], "throws": null, "modifiers": [], "return_type": "KeventBus", "snippet": "    KeventBus getEventBus() {        return eventBus!=null ? eventBus: KeventBus.getDefault();    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogConfig.java", "stars": "7", "class": {"name": "ErrorDialogConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPage", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Page", "snippet": "    public Page getPage(HttpServletRequest request) {        // \u4eceRequest\u4e2d\u63d0\u53d6page\u4ee5\u53capageSize        long page = NumberUtils.toLong(request.getParameter(this.pageName), this.defaultPage);        long pageSize = NumberUtils.toLong(request.getParameter(this.pageSize), this.defaultPageSize);        // \u8ba1\u7b97limit\u4ee5\u53caoffset        return new Page((page - 1) * pageSize, pageSize);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/provider/impl/DefaultPageProvider.java", "stars": "13", "class": {"name": "DefaultPageProvider", "extends": null, "implements": ["PageProvider"], "modifiers": ["public"]}}, {"method_name": "getOutputStream", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "OutputStream", "snippet": "    private OutputStream getOutputStream() throws IOException {        FileOutputStream fos = new FileOutputStream(file);        if(compression == Compression.GZIP)            return new GZIPOutputStream(fos);        if(compression == Compression.ZLIB)            return new DeflaterOutputStream(fos);        return fos;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInputStream", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "InputStream", "snippet": "    private InputStream getInputStream() throws IOException {        FileInputStream fis = new FileInputStream(file);        if(compression == Compression.GZIP)            return new GZIPInputStream(fis);        if(compression == Compression.ZLIB)            return new InflaterInputStream(fis);        return fis;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T extends Tag<?>> T get(String name){        try{            if(!file.exists()) return null;            InputStream is = getInputStream();            T out = (T) getSubData(is.readAllBytes(), name);            is.close();            return out;        }catch(IOException ex){            ex.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T getObject(String key){        try{            if(!file.exists()) return null;            InputStream is = getInputStream();            T out = (T) getSubObjectData(is.readAllBytes(), key);            is.close();            return out;        }catch(IOException ex){            ex.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Tag>", "snippet": "    public List<Tag<?>> getAll(){        try{            if(!file.exists()) return null;            InputStream is = getInputStream();            List<Tag<?>> output = getListData(is.readAllBytes());            is.close();            return output;        }catch(IOException ex){            ex.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["List<Tag>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void save(List<? extends Tag<?>> tags){        try{            OutputStream os = getOutputStream();            DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(os));            for(Tag<?> tag : tags){                tag.writeData(dos);            }            dos.close();            os.close();        }catch(IOException ex){            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "append", "params": ["Tag<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void append(Tag<?> tag){        try{            if(!file.exists()) file.createNewFile();            RandomAccessFile raf = new RandomAccessFile(file, \"rw\");            OutputStream os = getOutputStream();            DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(os));            InputStream is = getInputStream();            dos.write(is.readAllBytes());            is.close();            tag.writeData(dos);            dos.close();            os.close();        }catch(IOException ex){            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "appendAll", "params": ["List<Tag>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void appendAll(List<Tag<?>> tags){        try{            if (!file.exists()) file.createNewFile();            OutputStream os = getOutputStream();            DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(os));            InputStream is = getInputStream();            dos.write(is.readAllBytes());            is.close();            for(Tag<?> tag : tags){                tag.writeData(dos);            }            dos.close();            is.close();        }catch(IOException ex){            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean find(String key){        try{            InputStream is = getInputStream();            return findSubObjectData(is.readAllBytes(), key);        }catch(IOException ex){            return false;        }    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int delete(String key){        try{            InputStream is = getInputStream();            byte[] data = is.readAllBytes();            is.close();            ByteBuffer buff = ByteBuffer.allocate(data.length);            Pair<Integer, byte[]> deleteReturn = deleteSubObjectData(data, key, buff);            OutputStream out = getOutputStream();            out.write(deleteReturn.getRight());            out.close();            return deleteReturn.getLeft();        }catch(IOException ex){            return -1;        }    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "replaceData", "params": ["String", "Tag<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean replaceData(String key, Tag<?> replacement){        try{            int index = delete(key);            if(index == -1) return false;            RandomAccessFile raf = new RandomAccessFile(file, \"rw\");            ByteArrayOutputStream bao = new ByteArrayOutputStream();            DataOutputStream dao = new DataOutputStream(bao);            raf.seek(index);            replacement.writeData(dao);            raf.write(bao.toByteArray());            dao.close();            bao.close();            raf.close();            return true;        }catch(IOException ex){            return false;        }    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubData", "params": ["byte", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Tag<?>", "snippet": "    private Tag<?> getSubData(byte[] data, String name) throws IOException {        InputStream stream = new ByteArrayInputStream(data);        BufferedInputStream bis = new BufferedInputStream(stream);        final CountingInputStream cis = new CountingInputStream(bis);        DataInputStream dis = new DataInputStream(cis);        TagBuilder currentBuilder = new TagBuilder();        while(dis.available() > 0){            currentBuilder.setDataType(dis.readByte());            currentBuilder.setDataSize(dis.readInt());            currentBuilder.setStartingIndex(cis.getByteCount());            currentBuilder.setNameSize(((Short) dis.readShort()).intValue());            // If the name size isn't the same, then don't waste time reading the name.            if(currentBuilder.getNameSize() != name.getBytes(StandardCharsets.UTF_8).length){                dis.skip((currentBuilder.getStartingIndex() - cis.getByteCount()) + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            //TODO make sure the long math does not screw up this system.            byte[] nameBytes = new byte[currentBuilder.getNameSize()];            dis.readFully(nameBytes);            String tagName = new String(nameBytes, StandardCharsets.UTF_8);            currentBuilder.setName(tagName);            // If the name is not correct, skip forward!            if(!name.equals(tagName)){                dis.skip((currentBuilder.getStartingIndex() - cis.getByteCount()) + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            byte[] value = new byte[((int) currentBuilder.getStartingIndex() - cis.getCount()) + currentBuilder.getDataSize()];            dis.readFully(value);            currentBuilder.setValueBytes(value);            dis.close();            return currentBuilder.process();        }        dis.close();        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubObjectData", "params": ["byte", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Tag<?>", "snippet": "    private Tag<?> getSubObjectData(byte[] data, String key) throws IOException {        InputStream stream = new ByteArrayInputStream(data);        BufferedInputStream bis = new BufferedInputStream(stream);        final CountingInputStream cis = new CountingInputStream(bis);        DataInputStream dis = new DataInputStream(cis);        String name = key.split(\"\\\\.\")[0];        String otherKey = getKey(key.split(\"\\\\.\"));        TagBuilder currentBuilder = new TagBuilder();        while(dis.available() > 0){            currentBuilder.setDataType(dis.readByte());            currentBuilder.setDataSize(dis.readInt());            currentBuilder.setStartingIndex(cis.getByteCount());            currentBuilder.setNameSize(((Short) dis.readShort()).intValue());            // If the name size isn't the same, then don't waste time reading the name.            if(currentBuilder.getNameSize() != name.getBytes(StandardCharsets.UTF_8).length){                dis.skip((currentBuilder.getStartingIndex() - cis.getByteCount()) + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            //TODO make sure the long math does not screw up this system.            byte[] nameBytes = new byte[currentBuilder.getNameSize()];            dis.readFully(nameBytes);            String tagName = new String(nameBytes, StandardCharsets.UTF_8);            currentBuilder.setName(tagName);            // If the name is not correct, skip forward!            if(!name.equals(tagName)){                dis.skip((currentBuilder.getStartingIndex() - cis.getByteCount()) + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            byte[] value = new byte[((int) currentBuilder.getStartingIndex() - cis.getCount()) + currentBuilder.getDataSize()];            dis.readFully(value);            currentBuilder.setValueBytes(value);            dis.close();            if(otherKey != null)                return getSubObjectData(currentBuilder.getValueBytes(), otherKey);            return currentBuilder.process();        }        dis.close();        return null;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findSubObjectData", "params": ["byte", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean findSubObjectData(byte[] data, String key) throws IOException {        InputStream stream = new ByteArrayInputStream(data);        BufferedInputStream bis = new BufferedInputStream(stream);        final CountingInputStream cis = new CountingInputStream(bis);        DataInputStream dis = new DataInputStream(cis);        String name = key.split(\"\\\\.\")[0];        String otherKey = getKey(key.split(\"\\\\.\"));        TagBuilder currentBuilder = new TagBuilder();        while(dis.available() > 0){            currentBuilder.setDataType(dis.readByte());            currentBuilder.setDataSize(dis.readInt());            currentBuilder.setStartingIndex(cis.getByteCount());            currentBuilder.setNameSize(((Short) dis.readShort()).intValue());            // If the name size isn't the same, then don't waste time reading the name.            if(currentBuilder.getNameSize() != name.getBytes(StandardCharsets.UTF_8).length){                dis.skip((currentBuilder.getStartingIndex() - cis.getByteCount()) + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            byte[] nameBytes = new byte[currentBuilder.getNameSize()];            dis.readFully(nameBytes);            String tagName = new String(nameBytes, StandardCharsets.UTF_8);            currentBuilder.setName(tagName);            // If the name is not correct, skip forward!            if(!name.equals(tagName)){                dis.skip((currentBuilder.getStartingIndex() - cis.getByteCount()) + currentBuilder.getDataSize());                currentBuilder = new TagBuilder();                continue;            }            byte[] value = new byte[((int) currentBuilder.getStartingIndex() - cis.getCount()) + currentBuilder.getDataSize()];            dis.readFully(value);            currentBuilder.setValueBytes(value);            dis.close();            if(otherKey != null)                return findSubObjectData(currentBuilder.getValueBytes(), otherKey);            return true;        }        dis.close();        return false;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteSubObjectData", "params": ["byte", "String", "ByteBuffer"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Pair<Integer,byte>", "snippet": "    private Pair<Integer, byte[]> deleteSubObjectData(byte[] data, String key, ByteBuffer newFile) throws IOException {        InputStream stream = new ByteArrayInputStream(data);        BufferedInputStream bis = new BufferedInputStream(stream);        final CountingInputStream cis = new CountingInputStream(bis);        DataInputStream dis = new DataInputStream(cis);        String name = key.split(\"\\\\.\")[0];        String otherKey = getKey(key.split(\"\\\\.\"));        TagBuilder currentBuilder = new TagBuilder();        while(dis.available() > 0){            boolean found = true;            int start = cis.getCount();            currentBuilder.setDataType(dis.readByte());            currentBuilder.setDataSize(dis.readInt());            currentBuilder.setStartingIndex(cis.getByteCount());            currentBuilder.setNameSize(((Short) dis.readShort()).intValue());            // If the name size isn't the same, then don't waste time reading the name.            if(currentBuilder.getNameSize() != name.getBytes(StandardCharsets.UTF_8).length){                found = false;            }            byte[] nameBytes = new byte[currentBuilder.getNameSize()];            dis.readFully(nameBytes);            String tagName = new String(nameBytes, StandardCharsets.UTF_8);            currentBuilder.setName(tagName);            // If the name is not correct, skip forward!            if(!name.equals(tagName)){                found = false;            }            byte[] value = new byte[((int) currentBuilder.getStartingIndex() - cis.getCount()) + currentBuilder.getDataSize()];            dis.readFully(value);            currentBuilder.setValueBytes(value);            if(!found) {                addData(newFile, currentBuilder);                continue;            }            dis.close();            if(otherKey != null)                return deleteSubObjectData(currentBuilder.getValueBytes(), otherKey, newFile);            MutablePair<Integer, byte[]> finalData = new MutablePair<>();            newFile.flip();            byte[] newFileArray = new byte[newFile.limit()];            newFile.get(newFileArray);            newFile.clear();            finalData.setLeft(start);            finalData.setRight(newFileArray);            return finalData;        }        dis.close();        return MutablePair.of(-1, new byte[0]);    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addData", "params": ["ByteBuffer", "TagBuilder"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addData(ByteBuffer buf, TagBuilder builder){        buf.put((byte) builder.getDataType());        buf.putInt(builder.getDataSize());        buf.putShort((short) builder.getNameSize());        buf.put(builder.getName().getBytes(StandardCharsets.UTF_8));        buf.put(builder.getValueBytes());    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getKey(String[] s){        List<String> list = new ArrayList<>(Arrays.asList(s));        list.remove(0);        if(list.size() == 1) return list.get(0);        if(list.size() < 1) return null;        return String.join(\".\", list);    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getListData", "params": ["byte"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "List<Tag>", "snippet": "    public static List<Tag<?>> getListData(byte[] data) throws IOException {        List<Tag<?>> output = new ArrayList<>();        InputStream stream = new ByteArrayInputStream(data);        BufferedInputStream bis = new BufferedInputStream(stream);        final CountingInputStream cis = new CountingInputStream(bis);        DataInputStream dis = new DataInputStream(cis);        TagBuilder currentBuilder = new TagBuilder();        while(dis.available() > 0){            currentBuilder.setDataType(dis.readByte());            currentBuilder.setDataSize(dis.readInt());            currentBuilder.setStartingIndex(cis.getByteCount());            currentBuilder.setNameSize(dis.readShort());            //TODO make sure the long math does not screw up this system.            byte[] nameBytes = new byte[currentBuilder.getNameSize()];            dis.readFully(nameBytes);            String tagName = new String(nameBytes, StandardCharsets.UTF_8);            currentBuilder.setName(tagName);            byte[] value = new byte[((int) currentBuilder.getStartingIndex() - cis.getCount()) + currentBuilder.getDataSize()];            dis.readFully(value);            currentBuilder.setValueBytes(value);            output.add(currentBuilder.process());        }        dis.close();        return output;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/ObjectDataStructure.java", "stars": "2", "class": {"name": "ObjectDataStructure", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "read", "params": ["CompoundNBT"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void read(CompoundNBT nbt) {\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "WorldVariables", "extends": "WorldSavedData", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "write", "params": ["CompoundNBT"], "throws": null, "modifiers": ["public"], "return_type": "CompoundNBT", "snippet": "\t\tpublic CompoundNBT write(CompoundNBT nbt) {\t\t\treturn nbt;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "WorldVariables", "extends": "WorldSavedData", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "syncData", "params": ["World"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void syncData(World world) {\t\t\tthis.markDirty();\t\t\tif (world.isRemote) {\t\t\t\tEnhancedVanilla.PACKET_HANDLER.sendToServer(new WorldSavedDataSyncMessage(1, this));\t\t\t} else {\t\t\t\tEnhancedVanilla.PACKET_HANDLER.send(PacketDistributor.DIMENSION.with(world.dimension::getType),\t\t\t\t\t\tnew WorldSavedDataSyncMessage(1, this));\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "WorldVariables", "extends": "WorldSavedData", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "get", "params": ["World"], "throws": null, "modifiers": ["public", "static"], "return_type": "WorldVariables", "snippet": "\t\tpublic static WorldVariables get(World world) {\t\t\tif (world instanceof ServerWorld) {\t\t\t\treturn ((ServerWorld) world).getSavedData().getOrCreate(WorldVariables::new, DATA_NAME);\t\t\t} else {\t\t\t\treturn clientSide;\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "WorldVariables", "extends": "WorldSavedData", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "read", "params": ["CompoundNBT"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void read(CompoundNBT nbt) {\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "MapVariables", "extends": "WorldSavedData", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "write", "params": ["CompoundNBT"], "throws": null, "modifiers": ["public"], "return_type": "CompoundNBT", "snippet": "\t\tpublic CompoundNBT write(CompoundNBT nbt) {\t\t\treturn nbt;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "MapVariables", "extends": "WorldSavedData", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "syncData", "params": ["World"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void syncData(World world) {\t\t\tthis.markDirty();\t\t\tif (world.isRemote) {\t\t\t\tEnhancedVanilla.PACKET_HANDLER.sendToServer(new WorldSavedDataSyncMessage(0, this));\t\t\t} else {\t\t\t\tEnhancedVanilla.PACKET_HANDLER.send(PacketDistributor.ALL.noArg(), new WorldSavedDataSyncMessage(0, this));\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "MapVariables", "extends": "WorldSavedData", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "get", "params": ["World"], "throws": null, "modifiers": ["public", "static"], "return_type": "MapVariables", "snippet": "\t\tpublic static MapVariables get(World world) {\t\t\tif (world instanceof ServerWorld) {\t\t\t\treturn world.getServer().getWorld(DimensionType.OVERWORLD).getSavedData().getOrCreate(MapVariables::new, DATA_NAME);\t\t\t} else {\t\t\t\treturn clientSide;\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "MapVariables", "extends": "WorldSavedData", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buffer", "params": ["WorldSavedDataSyncMessage", "PacketBuffer"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\t\tpublic static void buffer(WorldSavedDataSyncMessage message, PacketBuffer buffer) {\t\t\tbuffer.writeInt(message.type);\t\t\tbuffer.writeCompoundTag(message.data.write(new CompoundNBT()));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "WorldSavedDataSyncMessage", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "handler", "params": ["WorldSavedDataSyncMessage", "Supplier<NetworkEvent>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\t\tpublic static void handler(WorldSavedDataSyncMessage message, Supplier<NetworkEvent.Context> contextSupplier) {\t\t\tNetworkEvent.Context context = contextSupplier.get();\t\t\tcontext.enqueueWork(() -> {\t\t\t\tif (context.getDirection().getReceptionSide().isServer())\t\t\t\t\tsyncData(message, context.getDirection().getReceptionSide(), context.getSender().world);\t\t\t\telse\t\t\t\t\tsyncData(message, context.getDirection().getReceptionSide(), Minecraft.getInstance().player.world);\t\t\t});\t\t\tcontext.setPacketHandled(true);\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "WorldSavedDataSyncMessage", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "syncData", "params": ["WorldSavedDataSyncMessage", "LogicalSide", "World"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "\t\tprivate static void syncData(WorldSavedDataSyncMessage message, LogicalSide side, World world) {\t\t\tif (side.isServer()) {\t\t\t\tmessage.data.markDirty();\t\t\t\tif (message.type == 0) {\t\t\t\t\tEnhancedVanilla.PACKET_HANDLER.send(PacketDistributor.ALL.noArg(), message);\t\t\t\t\tworld.getServer().getWorld(DimensionType.OVERWORLD).getSavedData().set(message.data);\t\t\t\t} else {\t\t\t\t\tEnhancedVanilla.PACKET_HANDLER.send(PacketDistributor.DIMENSION.with(world.dimension::getType), message);\t\t\t\t\t((ServerWorld) world).getSavedData().set(message.data);\t\t\t\t}\t\t\t} else {\t\t\t\tif (message.type == 0) {\t\t\t\t\tMapVariables.clientSide = (MapVariables) message.data;\t\t\t\t} else {\t\t\t\t\tWorldVariables.clientSide = (WorldVariables) message.data;\t\t\t\t}\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/EnhancedVanillaVariables.java", "stars": "2", "class": {"name": "WorldSavedDataSyncMessage", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tTeacher t = new Teacher();\t\tt.setName(\"java\");\t\tString name = t.getName();\t\tSystem.out.println(name);\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part2/src/com/opp/inherit/Test.java", "stars": "2", "class": {"name": "Test", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getScore() {\t    \treturn name;\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part2/src/com/opp/inherit/Test.java", "stars": "2", "class": {"name": "Teacher", "extends": "Book", "implements": null, "modifiers": []}}, {"method_name": "setScore", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setScore(int score) {\t    \tthis.score = score;\t    \t\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part2/src/com/opp/inherit/Test.java", "stars": "2", "class": {"name": "Teacher", "extends": "Book", "implements": null, "modifiers": []}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {    \treturn name;    }", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part2/src/com/opp/inherit/Test.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {    \tthis.name = name;    }", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part2/src/com/opp/inherit/Test.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\"                + \"varying vec2 vTextureCoord;\\n\" + \"void main() {\\n\"                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  float y = dot(color, vec4(0.299, 0.587, 0.114, 0));\\n\"                + \"  gl_FragColor = vec4(y, y, y, color.a);\\n\" + \"}\\n\";        ;        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/GreyScaleEffect.java", "stars": "2", "class": {"name": "GreyScaleEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (Objects.nonNull(mc.world) && slime) {            mc.world.loadedEntityList.forEach(e -> {                if (e instanceof EntitySlime) {                    EntitySlime slime = (EntitySlime) e;                    if (slime.getSlimeSize() > 4) {                        mc.world.removeEntity(e);                    }                }            });        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/AntiCrash.java", "stars": "12", "class": {"name": "AntiCrash", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (offhand && event.getType().equals(PacketEvent.Type.INCOMING)) {            if (event.getPacket() instanceof SPacketSoundEffect) {                if (((SPacketSoundEffect) event.getPacket()).getSound() == SoundEvents.ITEM_ARMOR_EQUIP_GENERIC) {                    event.setCancelled(true);                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/AntiCrash.java", "stars": "12", "class": {"name": "AntiCrash", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByExplosion!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByExplosion!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByExplosion!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByExplosion!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(LavenderBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByExplosionProcedure.java", "stars": "2", "class": {"name": "CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByExplosionProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "site_url", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String site_url() {        return site_url(\"\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "site_url", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String site_url(String sub) {        return site_option(\"site_url\") + sub;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileRename", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getFileRename(String name) {        Date date = new Date();        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMddHHmmssSSS\");        String sdfDate = sdf.format(date);        int pos = name.lastIndexOf(\".\");        String suffix = name.substring(pos);        String rename = sdfDate+suffix;        return rename;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "site_desc", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String site_desc(){        return site_option(\"site_description\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "site_keywords", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String site_keywords(){        return site_option(\"site_keywords\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "site_record", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String site_record() {        return site_option(\"site_record\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "site_title", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String site_title() {        return site_option(\"site_title\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "site_option", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String site_option(String key) {        return site_option(key, \"\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "social_github", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String social_github(){        return site_option(\"social_github\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "google_site_verification", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String google_site_verification(){        return site_option(\"google_site_verification\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "baidu_site_verification", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String baidu_site_verification(){        return site_option(\"baidu_site_verification\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "site_option", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String site_option(String key, String defalutValue) {        if (StringUtils.isBlank(key)) {            return \"\";        }        String str = WebConst.initConfig.get(key);        if (StringUtils.isNotBlank(str)) {            return str;        } else {            return defalutValue;        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fmtdate", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String fmtdate(Integer unixTime) {        return fmtdate(unixTime, \"yyyy-MM-dd\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fmtdate", "params": ["Integer", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String fmtdate(Integer unixTime, String patten) {        if (null != unixTime && StringUtils.isNotBlank(patten)) {            return DateKit.formatDateByUnixTime(unixTime, patten);        }        return \"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fmtdate_en", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String fmtdate_en(Integer unixTime){        String fmtdate = fmtdate(unixTime, \"d,MMM,yyyy\");        String[] dateArr = fmtdate.split(\",\");        String rs = \"<span>\" + dateArr[0] + \"</span> \" + dateArr[1] + \"  \" + dateArr[2];        return rs;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fmtdate_en_m", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String fmtdate_en_m(Integer unixTime){        return fmtdate(unixTime,\"MMM d\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fmtdate_en_y", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String fmtdate_en_y(Integer unixTime){        return fmtdate(unixTime,\"yyyy\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parsedate_zh_y_m", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String parsedate_zh_y_m(String date){        if (StringUtils.isNotBlank(date)){            Date d = DateKit.dateFormat(date, \"yyyy\u5e74MM\u6708\");            return DateKit.dateFormat(d, \"yyyy\");        }        return null;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fmtdate_date", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date fmtdate_date(String date){        if (StringUtils.isNotBlank(date)){            return DateKit.dateFormat(date, \"yyyy\u5e74MM\u6708\");        }        return null;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fmtdate_unxtime", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date fmtdate_unxtime(Integer nuixTime){        if (null != nuixTime){            return DateKit.getDateByUnixTime(nuixTime);        }        return  null;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "social", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "    public static Map<String, String> social() {        final String prefix = \"social_\";        Map<String, String> map = new HashMap<>();        map.put(\"csdn\", WebConst.initConfig.get(prefix + \"csdn\"));        map.put(\"jianshu\", WebConst.initConfig.get(prefix + \"jianshu\"));        map.put(\"resume\", WebConst.initConfig.get(prefix + \"resume\"));        map.put(\"weibo\", WebConst.initConfig.get(prefix + \"weibo\"));        map.put(\"zhihu\", WebConst.initConfig.get(prefix + \"zhihu\"));        map.put(\"github\", WebConst.initConfig.get(prefix + \"github\"));        map.put(\"twitter\", WebConst.initConfig.get(prefix + \"twitter\"));        return map;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "emoji", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String emoji(String value) {        return EmojiParser.parseToUnicode(value);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "random", "params": ["int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String random(int max, String str) {        return UUID.random(1, max) + str;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "random", "params": ["Long", "int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String random(Long seed, int max, String str){        if (seed == null)            return random(max, str);        Random random = new Random(seed);        return random.nextInt(max) + str;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "randomBlogPic", "params": ["Long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String randomBlogPic(Long seed){        return \"/site/images/blog-images/blog-\" + random( seed,12,\".jpg\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gravatar", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String gravatar(String email) {        String avatarUrl = \"https://github.com/identicons/\";        if (StringUtils.isBlank(email)) {            email = \"user@hanshuai.xin\";        }        String hash = TaleUtils.MD5encode(email.trim().toLowerCase());        return avatarUrl + hash + \".png\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "article", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String article(String value) {        if (StringUtils.isNotBlank(value)) {            value = value.replace(\"<!--more-->\", \"\\r\\n\");            value = value.replace(\"<!-- more -->\", \"\\r\\n\");            return TaleUtils.mdToHtml(value);        }        return \"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "permalink", "params": ["ContentDomain"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String permalink(ContentDomain contents) {        return permalink(contents.getCid(), contents.getSlug());    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "permalink", "params": ["Integer", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String permalink(Integer cid, String slug) {        return site_url(\"/article/\" + (StringUtils.isNotBlank(slug) ? slug : cid.toString()));    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "is_empty", "params": ["PageInfo"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean is_empty(PageInfo paginator) {        return paginator == null || (paginator.getList() == null) || (paginator.getList().size() == 0);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "substr", "params": ["String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String substr(String str, int len) {        if (str.length() > len) {            return str.substring(0, len);        }        return str;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "photoPermalink", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String photoPermalink(Integer cid) {        return site_url(\"/photo/article/\" + cid.toString());    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blogPermalink", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String blogPermalink(Integer cid) {        return site_url(\"/blog/article/\" + cid.toString());    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "archivePermalink", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String archivePermalink(String date){        return site_url(\"/blog/archives/\" + date);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "archiveYearPermalink", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String archiveYearPermalink(String date){        return site_url(\"/blog/archives/year/\" + date);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "categoriePermalink", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String categoriePermalink(String categorie){        return site_url(\"/blog/categories/\" + categorie);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tagPermalink", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String tagPermalink(String tag){        return site_url(\"/blog/tag/\" + tag);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show_thumb", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String show_thumb(String content) {        content = TaleUtils.mdToHtml(content);        if (content.contains(\"<img\")) {            String img = \"\";            String regEx_img = \"<img.*src\\\\s*=\\\\s*(.*?)[^>]*?>\";            Pattern p_image = Pattern.compile(regEx_img, Pattern.CASE_INSENSITIVE);            Matcher m_image = p_image.matcher(content);            if (m_image.find()) {                img = img + \",\" + m_image.group();                // //\u5339\u914dsrc                Matcher m = Pattern.compile(\"src\\\\s*=\\\\s*\\'?\\\"?(.*?)(\\'|\\\"|>|\\\\s+)\").matcher(img);                if (m.find()) {                    return m.group(1);                }            }        }        return \"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show_all_thumb", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "    public static List<String> show_all_thumb(String content) {        List<String> rs = new LinkedList();        content = TaleUtils.mdToHtml(content);        if (content.contains(\"<img\")) {            String img = \"\";            String regEx_img = \"<[a-zA-Z]+.*?>([\\\\s\\\\S]*?)</[a-zA-Z]*>\";            Pattern p_image = Pattern.compile(regEx_img, Pattern.MULTILINE);            Matcher m_image = p_image.matcher(content);            while (m_image.find()) {                String data = m_image.group(1).trim();                if(!\"\".equals(data) && data.contains(\"<img\")) {                    System.out.println(data);                    // //\u5339\u914dsrc                    Matcher m = Pattern.compile(\"src\\\\s*=\\\\s*\\'?\\\"?(.*?)(\\'|\\\"|>|\\\\s+)\").matcher(data);                    while (m.find()) {                        rs.add(m.group(1));                    }                }            }        }        return rs;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show_p", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String show_p(String content){        String result = \"\";        content = TaleUtils.mdToHtml(content);        String reg = \"<[a-zA-Z]+.*?>([\\\\s\\\\S]*?)</[a-zA-Z]*>\";        Pattern p = Pattern.compile(reg, Pattern.MULTILINE);        content = content.replace(\"&nbsp;\", \"\");        Matcher m = p.matcher(content);        if (m.find()) {            String data = m.group(1).trim();            if(!\"\".equals(data) && !data.contains(\"<img\")) {                System.out.println(data);                result = data;            }        }        result = result.replace(\"<img>\",\"\");        result = result.replace(\"</img>\",\"\");        result = result.replace(\"<p>\",\"\");        result = result.replace(\"</p>\",\"\");        if (result.length() > 20)            result = result.substring(0, 20);        return result;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show_all_p", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "    public static List<String> show_all_p(String content){        List<String> rs = new LinkedList();        content = TaleUtils.mdToHtml(content);        String reg = \"<[a-zA-Z]+.*?>([\\\\s\\\\S]*?)</[a-zA-Z]*>\";        Pattern p = Pattern.compile(reg, Pattern.MULTILINE);        content = content.replace(\"&nbsp;\", \"\");        Matcher m = p.matcher(content);        while(m.find()) {            String data = m.group(1).trim();            if(!\"\".equals(data) && !data.contains(\"<img\")) {                System.out.println(data);                data = \"<p>\" + data + \"</p>\";                rs.add(data);            }        }        return rs;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show_categories", "params": ["String"], "throws": ["UnsupportedEncodingException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String show_categories(String categories) throws UnsupportedEncodingException {        if (StringUtils.isNotBlank(categories)) {            String[] arr = categories.split(\",\");            StringBuffer sbuf = new StringBuffer();            for (String c : arr) {                sbuf.append(\"<a class=\\\"article-category-link\\\" href=\\\"/blog/category/\" + URLEncoder.encode(c, \"UTF-8\") + \"\\\">\" + c + \"</a>\");            }            return sbuf.toString();        }        return show_categories(\"\u9ed8\u8ba4\u5206\u7c7b\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show_tags", "params": ["String"], "throws": ["UnsupportedEncodingException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String show_tags(String tags) throws UnsupportedEncodingException {        if (StringUtils.isNotBlank(tags)) {            String[] arr = tags.split(\",\");            StringBuffer sbuf = new StringBuffer();            for (String c : arr) {                sbuf.append(\"<li class=\\\"article-tag-list-item\\\"><a href=\\\"/blog/tag/\" + URLEncoder.encode(c, \"UTF-8\") + \"\\\">#\" + c + \"</a></li>\");            }            return sbuf.toString();        }        return \"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "intro", "params": ["String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String intro(String value, int len) {        Integer pos = value.indexOf(\"<!--more-->\");        if (null == pos || pos == 0 || pos == -1)            pos = value.indexOf(\"<!-- more -->\");        if (pos != -1) {            String html = value.substring(0, pos);            return TaleUtils.mdToHtml(TaleUtils.mdToHtml(html));        } else {            String text = TaleUtils.mdToHtml(TaleUtils.mdToHtml(value));            if (text.length() > len) {                return text.substring(0, len);            }            return text;        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Commons.java", "stars": "2", "class": {"name": "Commons", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addActiveExecutableReference", "params": ["ExecutionReference"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "void", "snippet": "  void addActiveExecutableReference(final ExecutionReference reference)      throws ExecutorManagerException {    final String INSERT = \"INSERT INTO active_executing_flows \"        + \"(exec_id, update_time) values (?,?)\";    try {      this.dbOperator.update(INSERT, reference.getExecId(), reference.getUpdateTime());    } catch (final SQLException e) {      throw new ExecutorManagerException(          \"Error updating active flow reference \" + reference.getExecId(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ActiveExecutingFlowsDao.java", "stars": "18", "class": {"name": "ActiveExecutingFlowsDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeActiveExecutableReference", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "void", "snippet": "  void removeActiveExecutableReference(final int execId)      throws ExecutorManagerException {    final String DELETE = \"DELETE FROM active_executing_flows WHERE exec_id=?\";    try {      this.dbOperator.update(DELETE, execId);    } catch (final SQLException e) {      throw new ExecutorManagerException(          \"Error deleting active flow reference \" + execId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ActiveExecutingFlowsDao.java", "stars": "18", "class": {"name": "ActiveExecutingFlowsDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateExecutableReference", "params": ["int", "long"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "boolean", "snippet": "  boolean updateExecutableReference(final int execId, final long updateTime)      throws ExecutorManagerException {    final String DELETE =        \"UPDATE active_executing_flows set update_time=? WHERE exec_id=?\";    try {      // Should be 1.      return this.dbOperator.update(DELETE, updateTime, execId) > 0;    } catch (final SQLException e) {      throw new ExecutorManagerException(          \"Error deleting active flow reference \" + execId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ActiveExecutingFlowsDao.java", "stars": "18", "class": {"name": "ActiveExecutingFlowsDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "should", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void should() {    RuntimeException thrown = ExceptionFactory.wrapException(EXPECTED_MESSAGE, EXPECTED_CAUSE);    assertTrue(thrown instanceof PersistenceException, \"Exception should be wrapped in RuntimeSqlException.\");    testThrowException(thrown);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/exceptions/GeneralExceptionsTest.java", "stars": "15", "class": {"name": "GeneralExceptionsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInstantiateAndThrowAllCustomExceptions", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldInstantiateAndThrowAllCustomExceptions() throws Exception {    Class<?>[] exceptionTypes = {        BindingException.class,        CacheException.class,        DataSourceException.class,        ExecutorException.class,        LogException.class,        ParsingException.class,        BuilderException.class,        PluginException.class,        ReflectionException.class,        PersistenceException.class,        SqlSessionException.class,        TransactionException.class,        TypeException.class,        ScriptingException.class    };    for (Class<?> exceptionType : exceptionTypes) {      testExceptionConstructors(exceptionType);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/exceptions/GeneralExceptionsTest.java", "stars": "15", "class": {"name": "GeneralExceptionsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testExceptionConstructors", "params": ["Class<?>"], "throws": ["InstantiationException", "IllegalAccessException", "InvocationTargetException", "NoSuchMethodException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void testExceptionConstructors(Class<?> exceptionType) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {    Exception e = (Exception) exceptionType.getDeclaredConstructor().newInstance();    testThrowException(e);    e = (Exception) exceptionType.getConstructor(String.class).newInstance(EXPECTED_MESSAGE);    testThrowException(e);    e = (Exception) exceptionType.getConstructor(String.class, Throwable.class).newInstance(EXPECTED_MESSAGE, EXPECTED_CAUSE);    testThrowException(e);    e = (Exception) exceptionType.getConstructor(Throwable.class).newInstance(EXPECTED_CAUSE);    testThrowException(e);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/exceptions/GeneralExceptionsTest.java", "stars": "15", "class": {"name": "GeneralExceptionsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testThrowException", "params": ["Exception"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void testThrowException(Exception thrown) {    try {      throw thrown;    } catch (Exception caught) {      assertEquals(thrown.getMessage(), caught.getMessage());      assertEquals(thrown.getCause(), caught.getCause());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/exceptions/GeneralExceptionsTest.java", "stars": "15", "class": {"name": "GeneralExceptionsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/localtime/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/localtime/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/localtime/LocalTimeTest.java", "stars": "15", "class": {"name": "LocalTimeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSelectLocalTimeWithNanoseconds", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectLocalTimeWithNanoseconds() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = mapper.selectById(1);      assertEquals(LocalTime.of(11, 22, 33, 123456789), record.getT());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/localtime/LocalTimeTest.java", "stars": "15", "class": {"name": "LocalTimeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldInsertLocalTimeWithNanoseconds", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertLocalTimeWithNanoseconds() {    LocalTime t = LocalTime.of(11, 22, 33, 123456789);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = new Record();      record.setId(2);      record.setT(t);      int result = mapper.insertLocalTime(record);      assertEquals(1, result);      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = mapper.selectById(2);      assertEquals(t, record.getT());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/localtime/LocalTimeTest.java", "stars": "15", "class": {"name": "LocalTimeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onTouchExplorationStateChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onTouchExplorationStateChanged (boolean p0)\t{\t\tn_onTouchExplorationStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/accessibility/AccessibilityManagerCompat_TouchExplorationStateChangeListenerImplementor.java", "stars": "2", "class": {"name": "AccessibilityManagerCompat_TouchExplorationStateChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTouchExplorationStateChanged", "params": ["boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onTouchExplorationStateChanged (boolean p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/accessibility/AccessibilityManagerCompat_TouchExplorationStateChangeListenerImplementor.java", "stars": "2", "class": {"name": "AccessibilityManagerCompat_TouchExplorationStateChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/accessibility/AccessibilityManagerCompat_TouchExplorationStateChangeListenerImplementor.java", "stars": "2", "class": {"name": "AccessibilityManagerCompat_TouchExplorationStateChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/accessibility/AccessibilityManagerCompat_TouchExplorationStateChangeListenerImplementor.java", "stars": "2", "class": {"name": "AccessibilityManagerCompat_TouchExplorationStateChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "route", "params": ["TriggerParam", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> route(TriggerParam triggerParam, List<String> addressList) {        StringBuffer idleBeatResultSB = new StringBuffer();        for (String address : addressList) {            // beat            ReturnT<String> idleBeatResult = null;            try {                ExecutorBiz executorBiz = XxlJobScheduler.getExecutorBiz(address);                idleBeatResult = executorBiz.idleBeat(triggerParam.getJobId());            } catch (Exception e) {                logger.error(e.getMessage(), e);                idleBeatResult = new ReturnT<String>(ReturnT.FAIL_CODE, \"\"+e );            }            idleBeatResultSB.append( (idleBeatResultSB.length()>0)?\"<br><br>\":\"\")                    .append(I18nUtil.getString(\"jobconf_idleBeat\") + \"\uff1a\")                    .append(\"<br>address\uff1a\").append(address)                    .append(\"<br>code\uff1a\").append(idleBeatResult.getCode())                    .append(\"<br>msg\uff1a\").append(idleBeatResult.getMsg());            // beat success            if (idleBeatResult.getCode() == ReturnT.SUCCESS_CODE) {                idleBeatResult.setMsg(idleBeatResultSB.toString());                idleBeatResult.setContent(address);                return idleBeatResult;            }        }        return new ReturnT<String>(ReturnT.FAIL_CODE, idleBeatResultSB.toString());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteBusyover.java", "stars": "1", "class": {"name": "ExecutorRouteBusyover", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\"                + \"varying vec2 vTextureCoord;\\n\" + \"void main() {\\n\"                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  vec3 ncolor = vec3(0.0, 0.0, 0.0);\\n\" + \"  float value;\\n\"                + \"  if (color.r < 0.5) {\\n\" + \"    value = color.r;\\n\"                + \"  } else {\\n\" + \"    value = 1.0 - color.r;\\n\" + \"  }\\n\"                + \"  float red = 4.0 * value * value * value;\\n\"                + \"  if (color.r < 0.5) {\\n\" + \"    ncolor.r = red;\\n\"                + \"  } else {\\n\" + \"    ncolor.r = 1.0 - red;\\n\" + \"  }\\n\"                + \"  if (color.g < 0.5) {\\n\" + \"    value = color.g;\\n\"                + \"  } else {\\n\" + \"    value = 1.0 - color.g;\\n\" + \"  }\\n\"                + \"  float green = 2.0 * value * value;\\n\"                + \"  if (color.g < 0.5) {\\n\" + \"    ncolor.g = green;\\n\"                + \"  } else {\\n\" + \"    ncolor.g = 1.0 - green;\\n\" + \"  }\\n\"                + \"  ncolor.b = color.b * 0.5 + 0.25;\\n\"                + \"  gl_FragColor = vec4(ncolor.rgb, color.a);\\n\" + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/CrossProcessEffect.java", "stars": "2", "class": {"name": "CrossProcessEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SpruceParquetSlabBlock.java", "stars": "2", "class": {"name": "SpruceParquetSlabBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, state.get(TYPE) == SlabType.DOUBLE ? 2 : 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SpruceParquetSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "displayId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<ProductOrder>", "snippet": "\tpublic List<ProductOrder> displayId(String distributorId) {\t\treturn productorderdaoi.displayId(distributorId);\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/service/ProductOrderServiceImpl.java", "stars": "1", "class": {"name": "ProductOrderServiceImpl", "extends": null, "implements": ["ProductOrderServiceI"], "modifiers": ["public"]}}, {"method_name": "displayIdwithStatus", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<ProductOrder>", "snippet": "\tpublic List<ProductOrder> displayIdwithStatus(String distributorId, String status) {\t\treturn productorderdaoi.displayIdwithStatus(distributorId, status);\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/service/ProductOrderServiceImpl.java", "stars": "1", "class": {"name": "ProductOrderServiceImpl", "extends": null, "implements": ["ProductOrderServiceI"], "modifiers": ["public"]}}, {"method_name": "getDistributor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Distributor>", "snippet": "\tpublic List<Distributor> getDistributor() {\t\treturn productorderdaoi.getDistributor();\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/service/ProductOrderServiceImpl.java", "stars": "1", "class": {"name": "ProductOrderServiceImpl", "extends": null, "implements": ["ProductOrderServiceI"], "modifiers": ["public"]}}, {"method_name": "updateDistributor", "params": ["String", "String", "String", "long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean updateDistributor(String distributorId,String name,String address,long phonenumber) {\t\treturn productorderdaoi.updateDistributor(distributorId, name, address, phonenumber);\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/service/ProductOrderServiceImpl.java", "stars": "1", "class": {"name": "ProductOrderServiceImpl", "extends": null, "implements": ["ProductOrderServiceI"], "modifiers": ["public"]}}, {"method_name": "publicMessage", "params": ["String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String publicMessage(String body, int length) {        return String.format(\"Public message%s length=<%d>%s<%s>\", TYPE_SEPARATOR, length, BODY_SEPARATOR, body);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageBuilder.java", "stars": "2", "class": {"name": "ClientMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "privateMessageBuilder", "params": ["String", "int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String privateMessageBuilder(String body, int length, String... receivers) {        return String.format(\"Private message%s length=<%d> to %s%s<%s>\", TYPE_SEPARATOR, length,                buildReceiversString(receivers), BODY_SEPARATOR, body);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageBuilder.java", "stars": "2", "class": {"name": "ClientMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handshakeMessage", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String handshakeMessage(String userName) {        return String.format(\"Hello<%s>\", userName);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageBuilder.java", "stars": "2", "class": {"name": "ClientMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildReceiversString", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String buildReceiversString(String[] receivers) {        if (receivers.length == 0)            return \"<>\";        StringBuilder list = new StringBuilder();        for (String receiver : receivers)            list.append(String.format(\"<%s>%s\", receiver, RECEIVERS_LIST_SEPARATOR));        return list.substring(0, list.length() - RECEIVERS_LIST_SEPARATOR.length());    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageBuilder.java", "stars": "2", "class": {"name": "ClientMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "privateFileSendMessage", "params": ["String", "long", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String privateFileSendMessage(String fileName, long fileSize, String[] receivers) {        return String.format(\"%s, name<%s>, length<%d>, %s\", PRIVATE_FILE_MESSAGE, fileName, fileSize,                buildReceiversString(receivers));    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageBuilder.java", "stars": "2", "class": {"name": "ClientMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "publicFileSendMessage", "params": ["String", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String publicFileSendMessage(String fileName, long fileSize) {        return String.format(\"%s, name<%s>, length<%d>\", PUBLIC_FILE_MESSAGE, fileName, fileSize);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageBuilder.java", "stars": "2", "class": {"name": "ClientMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "downloadRequest", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String downloadRequest(String fileName, String source) {        return String.format(\"%s,%s,<%s>\", DOWNLOAD, fileName, source);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageBuilder.java", "stars": "2", "class": {"name": "ClientMessageBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Column [columnName=\" + columnName + \", type=\" + type + \", fieldName=\" + fieldName + \", dbType=\"                + dbType + \", length=\" + length + \", isNull=\" + isNull + \"]\";    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/util/object/Column.java", "stars": "7", "class": {"name": "Column", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return type;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/associationtest/Brakes.java", "stars": "15", "class": {"name": "Brakes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setType(String type) {    this.type = type;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/associationtest/Brakes.java", "stars": "15", "class": {"name": "Brakes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "volar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void volar() {        System.out.println(\"Loro Volando\");    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/I/Loro.java", "stars": "1", "class": {"name": "Loro", "extends": null, "implements": ["IAve", "IAveVoladora"], "modifiers": ["public"]}}, {"method_name": "comer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void comer() {        System.out.println(\"Comiendo\");    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/I/Loro.java", "stars": "1", "class": {"name": "Loro", "extends": null, "implements": ["IAve", "IAveVoladora"], "modifiers": ["public"]}}, {"method_name": "matchFromPosition", "params": ["String", "int", "Pattern"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String matchFromPosition(String text, int pos, Pattern pattern) {    Matcher matcher = pattern.matcher(text.substring(pos));    return (matcher.find() ? matcher.group() : \"\");  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexCommandSignature.java", "stars": "3", "class": {"name": "LatexCommandSignature", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "matchArgumentFromPosition", "params": ["String", "int", "ArgumentType"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String matchArgumentFromPosition(String text, int pos, ArgumentType argumentType)      throws InterruptedException {    int startPos = pos;    Stack<ArgumentType> argumentTypeStack = new Stack<>();    char openChar = '\\0';    switch (argumentType) {      case BRACE: {        openChar = '{';        break;      }      case BRACKET: {        openChar = '[';        break;      }    }    if (text.charAt(pos) != openChar) return \"\";    pos++;    argumentTypeStack.push(argumentType);    while (pos < text.length()) {      if (Thread.currentThread().isInterrupted()) throw new InterruptedException();      switch (text.charAt(pos)) {        case '\\\\': {          if (pos + 1 < text.length()) pos++;          break;        }        case '{': {          argumentTypeStack.push(ArgumentType.BRACE);          break;        }        case '[': {          argumentTypeStack.push(ArgumentType.BRACKET);          break;        }        case '}': {          if (argumentTypeStack.peek() != ArgumentType.BRACE) {            return \"\";          } else if (argumentTypeStack.size() == 1) {            return ((argumentType == ArgumentType.BRACE) ?                text.substring(startPos, pos + 1) : \"\");          } else {            argumentTypeStack.pop();          }          break;        }        case ']': {          if (argumentTypeStack.peek() != ArgumentType.BRACKET) {            return \"\";          } else if (argumentTypeStack.size() == 1) {            return ((argumentType == ArgumentType.BRACKET) ?                text.substring(startPos, pos + 1) : \"\");          } else {            argumentTypeStack.pop();          }          break;        }      }      pos++;    }    return \"\";  }  public String matchFromPosition(String text, int pos) throws InterruptedException {    Pattern commandPattern = Pattern.compile(\"^\" + Pattern.quote(name));    Pattern commentPattern = Pattern.compile(\"^%.*?($|(\\n[ \\n\\r\\t]*))\");    int startPos = pos;    String match = matchFromPosition(text, pos, commandPattern);    pos += match.length();    for (ArgumentType argumentType : argumentTypes) {      if (Thread.currentThread().isInterrupted()) throw new InterruptedException();      match = matchFromPosition(text, pos, commentPattern);      pos += match.length();      match = matchArgumentFromPosition(text, pos, argumentType);      if (match.isEmpty()) return \"\";      pos += match.length();    }    return text.substring(startPos, pos);  }}", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexCommandSignature.java", "stars": "3", "class": {"name": "LatexCommandSignature", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "matchFromPosition", "params": ["String", "int"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String matchFromPosition(String text, int pos) throws InterruptedException {    Pattern commandPattern = Pattern.compile(\"^\" + Pattern.quote(name));    Pattern commentPattern = Pattern.compile(\"^%.*?($|(\\n[ \\n\\r\\t]*))\");    int startPos = pos;    String match = matchFromPosition(text, pos, commandPattern);    pos += match.length();    for (ArgumentType argumentType : argumentTypes) {      if (Thread.currentThread().isInterrupted()) throw new InterruptedException();      match = matchFromPosition(text, pos, commentPattern);      pos += match.length();      match = matchArgumentFromPosition(text, pos, argumentType);      if (match.isEmpty()) return \"\";      pos += match.length();    }    return text.substring(startPos, pos);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexCommandSignature.java", "stars": "3", "class": {"name": "LatexCommandSignature", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initialize() {        this.setSize(536, 359);        this.setTitle(\"\u30d7\u30ed\u30d1\u30c6\u30a3\");        this.setContentPane(getJContentPane());    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJContentPane", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JPanel", "snippet": "    private JPanel getJContentPane() {        if (jContentPane == null) {            jContentPane = new JPanel();            jContentPane.setLayout(new BoxLayout(getJContentPane(), BoxLayout.Y_AXIS));            jContentPane.add(getJPanel(), null);            jContentPane.add(getJPanel1(), null);        }        return jContentPane;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJPanel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JPanel", "snippet": "    private JPanel getJPanel() {        if (jPanel == null) {            jPanel = new JPanel();            jPanel.setLayout(new BoxLayout(getJPanel(), BoxLayout.Y_AXIS));            jPanel.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));            jPanel.add(getJPanel2(), null);            jPanel.add(getP_snapshot(), null);            jPanel.add(getJPanel4(), null);        }        return jPanel;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJPanel1", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JPanel", "snippet": "    private JPanel getJPanel1() {        if (jPanel1 == null) {            jPanel1 = new JPanel();            jPanel1.setLayout(new BoxLayout(getJPanel1(), BoxLayout.X_AXIS));            jPanel1.add(Box.createHorizontalGlue());            jPanel1.add(getBT_OK(), null);            jPanel1.add(getBT_cancel(), null);            jPanel1.add(getBT_apply(), null);        }        return jPanel1;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyAll", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void applyAll() {        Application.setPropertyOfDataFolder(getTF_datafolder().getText());        Application.setPropertyOfSnapshotFolder(getTF_snapshot().getText());        Application.setPropertyOfSnapshotExtension(getTF_extension().getText());        if (getRB_defaultmap().isSelected()) {            computer.getHardware().getDisplay().setDisplayColorMap(JR100Display.COLORMAP_DEFAULT, null);        }        else {            computer.getHardware().getDisplay().setDisplayColorMap(JR100Display.COLORMAP_FILE, getTF_mapfile().getText());        }        Computer.setPropertyOfAutomaticPowerOn(getCB_autopoweron().isSelected());        JR100.setPropertyOfUseExtendedRam(getCB_validateextendedram().isSelected());        JR100Application.setPropertyOfD3dUsed(CB_used3d.isSelected());    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBT_OK", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton getBT_OK() {        if (BT_OK == null) {            BT_OK = new JButton();            BT_OK.setText(\"OK\");            BT_OK.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(java.awt.event.ActionEvent e) {                    applyAll();                    PropertyDialog.this.dispose();                }            });        }        return BT_OK;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBT_cancel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton getBT_cancel() {        if (BT_cancel == null) {            BT_cancel = new JButton();            BT_cancel.setText(\"\u30ad\u30e3\u30f3\u30bb\u30eb\");            BT_cancel.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(java.awt.event.ActionEvent e) {                    PropertyDialog.this.dispose();                }            });        }        return BT_cancel;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBT_apply", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton getBT_apply() {        if (BT_apply == null) {            BT_apply = new JButton();            BT_apply.setText(\"\u9069\u7528\");            BT_apply.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(java.awt.event.ActionEvent e) {                    applyAll();                }            });        }        return BT_apply;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTF_datafolder", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JTextField", "snippet": "    private JTextField getTF_datafolder() {        if (TF_datafolder == null) {            TF_datafolder = new JTextField();            TF_datafolder.setText(Application.getPropertyOfDataFolder());        }        return TF_datafolder;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJPanel2", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JPanel", "snippet": "    private JPanel getJPanel2() {        if (jPanel2 == null) {            GridBagConstraints gridBagConstraints2 = new GridBagConstraints();            gridBagConstraints2.gridx = 0;            gridBagConstraints2.gridwidth = 4;            gridBagConstraints2.anchor = GridBagConstraints.WEST;            gridBagConstraints2.gridy = 4;            GridBagConstraints gridBagConstraints6 = new GridBagConstraints();            gridBagConstraints6.gridx = 0;            gridBagConstraints6.gridwidth = 4;            gridBagConstraints6.anchor = GridBagConstraints.WEST;            gridBagConstraints6.gridy = 3;            GridBagConstraints gridBagConstraints5 = new GridBagConstraints();            gridBagConstraints5.gridx = 0;            gridBagConstraints5.gridy = 0;            L_datafolder = new JLabel();            L_datafolder.setText(\"\u30c7\u30fc\u30bf\u30d5\u30a9\u30eb\u30c0\");            GridBagConstraints gridBagConstraints4 = new GridBagConstraints();            gridBagConstraints4.gridx = 3;            gridBagConstraints4.gridy = 2;            GridBagConstraints gridBagConstraints3 = new GridBagConstraints();            gridBagConstraints3.fill = GridBagConstraints.HORIZONTAL;            gridBagConstraints3.gridy = 2;            gridBagConstraints3.anchor = GridBagConstraints.WEST;            gridBagConstraints3.gridx = 2;            GridBagConstraints gridBagConstraints21 = new GridBagConstraints();            gridBagConstraints21.gridy = 2;            gridBagConstraints21.anchor = GridBagConstraints.WEST;            gridBagConstraints21.gridx = 1;            GridBagConstraints gridBagConstraints13 = new GridBagConstraints();            gridBagConstraints13.gridy = 1;            gridBagConstraints13.anchor = GridBagConstraints.WEST;            gridBagConstraints13.gridx = 1;            GridBagConstraints gridBagConstraints12 = new GridBagConstraints();            gridBagConstraints12.gridx = 0;            gridBagConstraints12.anchor = GridBagConstraints.WEST;            gridBagConstraints12.gridy = 1;            L_colormap = new JLabel();            L_colormap.setText(\"\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\");            GridBagConstraints gridBagConstraints11 = new GridBagConstraints();            gridBagConstraints11.gridx = 0;            gridBagConstraints11.gridy = 1;            GridBagConstraints gridBagConstraints1 = new GridBagConstraints();            gridBagConstraints1.gridx = 3;            gridBagConstraints1.insets = new Insets(0, 0, 0, 0);            gridBagConstraints1.anchor = GridBagConstraints.CENTER;            gridBagConstraints1.fill = GridBagConstraints.HORIZONTAL;            gridBagConstraints1.gridy = 0;            GridBagConstraints gridBagConstraints = new GridBagConstraints();            gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;            gridBagConstraints.gridx = 1;            gridBagConstraints.gridy = 0;            gridBagConstraints.anchor = GridBagConstraints.WEST;            gridBagConstraints.gridwidth = 2;            gridBagConstraints.weightx = 1.0;            jPanel2 = new JPanel();            jPanel2.setLayout(new GridBagLayout());            jPanel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED), \"\\u8d77\\u52d5\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(51, 51, 51)));            jPanel2.add(L_datafolder, gridBagConstraints5);            jPanel2.add(getTF_datafolder(), gridBagConstraints);            jPanel2.add(getBT_referdatafolder(), gridBagConstraints1);            jPanel2.add(L_colormap, gridBagConstraints12);            jPanel2.add(getRB_defaultmap(), gridBagConstraints13);            jPanel2.add(getRB_mapfile(), gridBagConstraints21);            jPanel2.add(getTF_mapfile(), gridBagConstraints3);            jPanel2.add(getBT_refermapfile(), gridBagConstraints4);            jPanel2.add(getCB_autopoweron(), gridBagConstraints6);            jPanel2.add(getCB_used3d(), gridBagConstraints2);            ButtonGroup bg = new ButtonGroup();            bg.add(getRB_defaultmap());            bg.add(getRB_mapfile());        }        return jPanel2;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBT_referdatafolder", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton getBT_referdatafolder() {        if (BT_referdatafolder == null) {            BT_referdatafolder = new JButton();            BT_referdatafolder.setText(\"\u53c2\u7167...\");            BT_referdatafolder.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(java.awt.event.ActionEvent e) {                    JFileChooser fc = new JFileChooser(Application.getPropertyOfDataFolder());                    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);                    int selected = fc.showOpenDialog(PropertyDialog.this);                    if (selected == JFileChooser.APPROVE_OPTION) {                        File file = fc.getSelectedFile();                        TF_datafolder.setText(file.getAbsolutePath());                    }                }            });        }        return BT_referdatafolder;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCB_autopoweron", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JCheckBox", "snippet": "    private JCheckBox getCB_autopoweron() {        if (CB_autopoweron == null) {            CB_autopoweron = new JCheckBox();            CB_autopoweron.setText(\"\u8d77\u52d5\u6642\u306b\u96fb\u6e90\u3092\u30aa\u30f3\u306b\u3059\u308b\u3002\");            CB_autopoweron.setSelected(Computer.getPropertyOfAutomaticPowerOn());        }        return CB_autopoweron;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJPanel4", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JPanel", "snippet": "    private JPanel getJPanel4() {        if (jPanel4 == null) {            jPanel4 = new JPanel();            jPanel4.setLayout(new BoxLayout(getJPanel4(), BoxLayout.X_AXIS));            jPanel4.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED), \"\\u62e1\\u5f35\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(51, 51, 51)));            jPanel4.add(getCB_validateextendedram(), null);            jPanel4.add(Box.createHorizontalGlue());        }        return jPanel4;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCB_validateextendedram", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JCheckBox", "snippet": "    private JCheckBox getCB_validateextendedram() {        if (CB_validateextendedram == null) {            CB_validateextendedram = new JCheckBox();            CB_validateextendedram.setText(\"\u62e1\u5f35RAM\u3092\u6709\u52b9\u306b\u3059\u308b(\u6b21\u56de\u96fb\u6e90\u30aa\u30f3\u6642\u306b\u6709\u52b9)\u3002\");            CB_validateextendedram.setSelected(JR100.getPropertyOfUseExtendedRam());        }        return CB_validateextendedram;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRB_defaultmap", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButton", "snippet": "    private JRadioButton getRB_defaultmap() {        if (RB_defaultmap == null) {            RB_defaultmap = new JRadioButton();            RB_defaultmap.setText(\"\u30c7\u30d5\u30a9\u30eb\u30c8\");            RB_defaultmap.addItemListener(new java.awt.event.ItemListener() {                public void itemStateChanged(java.awt.event.ItemEvent e) {                    if (RB_defaultmap.isSelected()) {                        getTF_mapfile().setEnabled(false);                        getBT_refermapfile().setEnabled(false);                    }                }            });            if (computer.getHardware().getDisplay().getPropertyOfDisplayColorMap() == JR100Display.COLORMAP_DEFAULT) {                RB_defaultmap.setSelected(true);            }        }        return RB_defaultmap;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRB_mapfile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JRadioButton", "snippet": "    private JRadioButton getRB_mapfile() {        if (RB_mapfile == null) {            RB_mapfile = new JRadioButton();            RB_mapfile.setText(\"\u30d5\u30a1\u30a4\u30eb\u304b\u3089\");            RB_mapfile.setSelected(true);            RB_mapfile.addItemListener(new java.awt.event.ItemListener() {                public void itemStateChanged(java.awt.event.ItemEvent e) {                    if (RB_mapfile.isSelected()) {                        getTF_mapfile().setEnabled(true);                        getBT_refermapfile().setEnabled(true);                    }                }            });        }        return RB_mapfile;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTF_mapfile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JTextField", "snippet": "    private JTextField getTF_mapfile() {        if (TF_mapfile == null) {            TF_mapfile = new JTextField();            TF_mapfile.setText(computer.getHardware().getDisplay().getPropertyOfDisplayColorMapFile());        }        return TF_mapfile;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBT_refermapfile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton getBT_refermapfile() {        if (BT_refermapfile == null) {            BT_refermapfile = new JButton();            BT_refermapfile.setText(\"\u53c2\u7167...\");            BT_refermapfile.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(java.awt.event.ActionEvent e) {                    JFileChooser fc = new JFileChooser(Application.getPropertyOfDataFolder());                    int selected = fc.showOpenDialog(PropertyDialog.this);                    if (selected == JFileChooser.APPROVE_OPTION) {                        File file = fc.getSelectedFile();                        TF_mapfile.setText(file.getAbsolutePath());                    }                }            });        }        return BT_refermapfile;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCB_used3d", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JCheckBox", "snippet": "    private JCheckBox getCB_used3d() {        if (CB_used3d == null) {            CB_used3d = new JCheckBox();            CB_used3d.setText(\"Direct3D\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u6709\u52b9\u306b\u3059\u308b(\u6b21\u56de\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u8d77\u52d5\u6642\u304b\u3089\u6709\u52b9)\u3002\");            CB_used3d.setSelected(JR100Application.getPropertyOfD3dUsed());        }        return CB_used3d;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getP_snapshot", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JPanel", "snippet": "    private JPanel getP_snapshot() {        if (P_snapshot == null) {            GridBagConstraints gridBagConstraints14 = new GridBagConstraints();            gridBagConstraints14.anchor = GridBagConstraints.WEST;            GridBagConstraints gridBagConstraints10 = new GridBagConstraints();            gridBagConstraints10.fill = GridBagConstraints.VERTICAL;            gridBagConstraints10.gridy = 1;            gridBagConstraints10.weightx = 1.0;            gridBagConstraints10.anchor = GridBagConstraints.WEST;            gridBagConstraints10.gridx = 1;            GridBagConstraints gridBagConstraints9 = new GridBagConstraints();            gridBagConstraints9.gridx = 0;            gridBagConstraints9.anchor = GridBagConstraints.WEST;            gridBagConstraints9.gridy = 1;            L_extension = new JLabel();            L_extension.setText(\"\u62e1\u5f35\u5b50\");            GridBagConstraints gridBagConstraints8 = new GridBagConstraints();            gridBagConstraints8.gridx = 2;            gridBagConstraints8.gridy = 0;            GridBagConstraints gridBagConstraints7 = new GridBagConstraints();            gridBagConstraints7.fill = GridBagConstraints.HORIZONTAL;            gridBagConstraints7.gridy = 0;            gridBagConstraints7.weightx = 1.0;            gridBagConstraints7.gridx = 1;            L_snapshot = new JLabel();            L_snapshot.setText(\"\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u30d5\u30a9\u30eb\u30c0\");            P_snapshot = new JPanel();            P_snapshot.setLayout(new GridBagLayout());            P_snapshot.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED), \"\\u30b9\\u30ca\\u30c3\\u30d7\\u30b7\\u30e7\\u30c3\\u30c8\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(51, 51, 51)));            P_snapshot.add(L_snapshot, gridBagConstraints14);            P_snapshot.add(getTF_snapshot(), gridBagConstraints7);            P_snapshot.add(getBT_refersnapshot(), gridBagConstraints8);            P_snapshot.add(L_extension, gridBagConstraints9);            P_snapshot.add(getTF_extension(), gridBagConstraints10);        }        return P_snapshot;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTF_snapshot", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JTextField", "snippet": "    private JTextField getTF_snapshot() {        if (TF_snapshot == null) {            TF_snapshot = new JTextField();            TF_snapshot.setText(Application.getPropertyOfSnapshotFolder());        }        return TF_snapshot;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBT_refersnapshot", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton getBT_refersnapshot() {        if (BT_refersnapshot == null) {            BT_refersnapshot = new JButton();            BT_refersnapshot.setText(\"\u53c2\u7167...\");            BT_refersnapshot.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(java.awt.event.ActionEvent e) {                    JFileChooser fc = new JFileChooser(Application.getPropertyOfSnapshotFolder());                    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);                    int selected = fc.showOpenDialog(PropertyDialog.this);                    if (selected == JFileChooser.APPROVE_OPTION) {                        File file = fc.getSelectedFile();                        TF_snapshot.setText(file.getAbsolutePath());                    }                }            });        }        return BT_refersnapshot;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTF_extension", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JTextField", "snippet": "    private JTextField getTF_extension() {        if (TF_extension == null) {            TF_extension = new JTextField();            TF_extension.setColumns(8);            TF_extension.setText(Application.getPropertyOfSnapshotExtension());        }        return TF_extension;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/PropertyDialog.java", "stars": "4", "class": {"name": "PropertyDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "DeferredResult"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void put(String key, DeferredResult result) {\t\tmap.put(key, result);\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/callback/DeferredResultHolder.java", "stars": "29", "class": {"name": "DeferredResultHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "DeferredResult", "snippet": "\tpublic DeferredResult get(String key) {\t\treturn map.get(key);\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/callback/DeferredResultHolder.java", "stars": "29", "class": {"name": "DeferredResultHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeResult", "params": ["RequestMessage"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void invokeResult(RequestMessage msg) {\t\tDeferredResult result = map.get(msg.getId());\t\tif (result == null) {\t\t\treturn;\t\t}\t\tresult.setResult(new ResponseEntity<>(msg.getData(),HttpStatus.OK));\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/callback/DeferredResultHolder.java", "stars": "29", "class": {"name": "DeferredResultHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": ["Props"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "  static void load(final Props props) {    final String xmlFile = props.getString(XML_FILE_PARAM);    parseXMLFile(xmlFile);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectWhitelist.java", "stars": "18", "class": {"name": "ProjectWhitelist", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseXMLFile", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void parseXMLFile(final String xmlFile) {    final File file = new File(xmlFile);    if (!file.exists()) {      throw new IllegalArgumentException(\"Project whitelist xml file \" + xmlFile          + \" doesn't exist.\");    }    // Creating the document builder to parse xml.    final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();    DocumentBuilder builder = null;    try {      // FIXME\u00a0Prevent XML External Entity (XXE) attacks.      XmlResolveUtils.avoidXEE(docBuilderFactory);      builder = docBuilderFactory.newDocumentBuilder();    } catch (final ParserConfigurationException e) {      throw new IllegalArgumentException(          \"Exception while parsing project whitelist xml. Document builder not created.\", e);    }    Document doc = null;    try {      doc = builder.parse(file);    } catch (final SAXException e) {      throw new IllegalArgumentException(\"Exception while parsing \" + xmlFile          + \". Invalid XML.\", e);    } catch (final IOException e) {      throw new IllegalArgumentException(\"Exception while parsing \" + xmlFile          + \". Error reading file.\", e);    }    final Map<WhitelistType, Set<Integer>> projsWhitelisted = new HashMap<>();    final NodeList tagList = doc.getChildNodes();    if (!tagList.item(0).getNodeName().equals(PROJECT_WHITELIST_TAG)) {      throw new RuntimeException(\"Cannot find tag '\" + PROJECT_WHITELIST_TAG + \"' in \" + xmlFile);    }    final NodeList whitelist = tagList.item(0).getChildNodes();    for (int n = 0; n < whitelist.getLength(); ++n) {      if (whitelist.item(n).getNodeType() != Node.ELEMENT_NODE) {        continue;      }      final String whitelistType = whitelist.item(n).getNodeName();      final Set<Integer> projs = new HashSet<>();      final NodeList projectsList = whitelist.item(n).getChildNodes();      for (int i = 0; i < projectsList.getLength(); ++i) {        final Node node = projectsList.item(i);        if (node.getNodeType() == Node.ELEMENT_NODE) {          if (node.getNodeName().equals(PROJECT_TAG)) {            parseProjectTag(node, projs);          }        }      }      projsWhitelisted.put(WhitelistType.valueOf(whitelistType), projs);    }    projectsWhitelisted.set(projsWhitelisted);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectWhitelist.java", "stars": "18", "class": {"name": "ProjectWhitelist", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseProjectTag", "params": ["Node", "Set<Integer>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void parseProjectTag(final Node node, final Set<Integer> projects) {    final NamedNodeMap projectAttrMap = node.getAttributes();    final Node projectIdAttr = projectAttrMap.getNamedItem(PROJECTID_ATTR);    if (projectIdAttr == null) {      throw new RuntimeException(\"Error loading project. The '\" + PROJECTID_ATTR          + \"' attribute doesn't exist\");    }    final String projectId = projectIdAttr.getNodeValue();    projects.add(Integer.parseInt(projectId));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectWhitelist.java", "stars": "18", "class": {"name": "ProjectWhitelist", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isProjectWhitelisted", "params": ["int", "WhitelistType"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isProjectWhitelisted(final int project, final WhitelistType whitelistType) {    final Map<WhitelistType, Set<Integer>> projsWhitelisted = projectsWhitelisted.get();    if (projsWhitelisted != null) {      final Set<Integer> projs = projsWhitelisted.get(whitelistType);      if (projs != null) {        return projs.contains(project);      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectWhitelist.java", "stars": "18", "class": {"name": "ProjectWhitelist", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["RequestMessageByte"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "boolean", "snippet": "    public synchronized boolean add(RequestMessageByte requestMessage)    {        if(null==this.requestQueue){            return false;        }        return this.requestQueue.add(requestMessage);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/MessageQueue.java", "stars": "1", "class": {"name": "MessageQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["RequestMessageData"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "boolean", "snippet": "    public synchronized boolean add(RequestMessageData requestMessageData)    {        log.info(\"\u5f53\u524d\u961f\u5217\u91cc\u9762\u7684\u6570\u91cf: \u5f00\u59cb:{}\",requestQueueData.stream().count());        if(null==this.requestQueueData){            return false;        }        boolean add = requestQueueData.add(requestMessageData);        log.info(\"\u5f53\u524d\u961f\u5217\u91cc\u9762\u7684\u6570\u91cf: \u7ed3\u675f:{}\",requestQueueData.stream().count());        return add;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/MessageQueue.java", "stars": "1", "class": {"name": "MessageQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.drawCircle(300, 300, 200, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice03SweepGradientView.java", "stars": "2", "class": {"name": "Practice03SweepGradientView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFaceId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFaceId() {        return faceId;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFaceId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFaceId(String faceId) {        this.faceId = faceId;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSimilarValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getSimilarValue() {        return similarValue;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSimilarValue", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSimilarValue(Integer similarValue) {        this.similarValue = similarValue;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAge() {        return age;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAge", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAge(Integer age) {        this.age = age;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGender", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGender() {        return gender;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGender", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGender(String gender) {        this.gender = gender;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImage() {        return image;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImage(String image) {        this.image = image;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/FaceSearchResDto.java", "stars": "2", "class": {"name": "FaceSearchResDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getController", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Controller", "snippet": "    public Controller getController() {        return controller;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/GamepadEvent.java", "stars": "4", "class": {"name": "GamepadEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mailService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MailService", "snippet": "    public MailService mailService() {        return mockMailService;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/config/NoOpMailConfiguration.java", "stars": "2", "class": {"name": "NoOpMailConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Dato", "snippet": "    public Dato getDatos() {         if(dato == null){           dato = new Dato(\"Datos DatabaseService\");        }        return dato;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/D/DatabaseService.java", "stars": "1", "class": {"name": "DatabaseService", "extends": null, "implements": ["IConexion"], "modifiers": ["public"]}}, {"method_name": "setDatos", "params": ["Dato"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDatos(Dato dato) {        this.dato = dato;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/D/DatabaseService.java", "stars": "1", "class": {"name": "DatabaseService", "extends": null, "implements": ["IConexion"], "modifiers": ["public"]}}, {"method_name": "testMultipleIncludeXmlConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testMultipleIncludeXmlConfig() throws Exception {    testMultipleIncludes(getSqlSessionFactoryXmlConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java", "stars": "15", "class": {"name": "MultipleIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMultipleIncludeJavaConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testMultipleIncludeJavaConfig() throws Exception {    testMultipleIncludes(getSqlSessionFactoryJavaConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java", "stars": "15", "class": {"name": "MultipleIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMultipleIncludes", "params": ["SqlSessionFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void testMultipleIncludes(SqlSessionFactory sqlSessionFactory) {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      MultipleIncludePersonMapper personMapper = sqlSession.getMapper(MultipleIncludePersonMapper.class);      Person person = personMapper.select(1);      assertEquals((Integer) 1, person.getId());      assertEquals(\"John\", person.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java", "stars": "15", "class": {"name": "MultipleIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryXmlConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {    try (Reader configReader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeMapperConfig.xml\")) {      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader);      initDb(sqlSessionFactory);      return sqlSessionFactory;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java", "stars": "15", "class": {"name": "MultipleIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryJavaConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(), new UnpooledDataSource(        \"org.hsqldb.jdbcDriver\", \"jdbc:hsqldb:mem:xmlextref\", null));    configuration.setEnvironment(environment);    configuration.addMapper(MultipleIncludePersonMapper.class);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    initDb(sqlSessionFactory);    return sqlSessionFactory;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java", "stars": "15", "class": {"name": "MultipleIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initDb", "params": ["SqlSessionFactory"], "throws": ["IOException", "SQLException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void initDb(SqlSessionFactory sqlSessionFactory) throws IOException, SQLException {    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/xml_external_ref/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java", "stars": "15", "class": {"name": "MultipleIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isSupportStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSupportStream() {            return true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.originConfig = this.getPluginJobConf();            this.sourceFiles = new HashSet<>();            this.validateParameter();            UnstructuredStorageReaderUtil.validateParameter(this.originConfig);            if (\"sftp\".equals(connParams.getProtocol())) {                //sftp\u534f\u8bae                this.connParams.setPort(originConfig.getInt(Key.PORT, Constant.DEFAULT_SFTP_PORT));                this.ftpHelper = new SftpHelper();            } else if (\"ftp\".equals(connParams.getProtocol())) {                // ftp \u534f\u8bae                this.connParams.setPort(originConfig.getInt(Key.PORT, Constant.DEFAULT_FTP_PORT));                this.ftpHelper = new StandardFtpHelper();            }            ftpHelper.loginFtpServer(this.connParams);            for(String eachPath : path){                boolean notFound = !ftpHelper.isDirExist(eachPath) &&                        (eachPath.endsWith(String.valueOf(IOUtils.DIR_SEPARATOR_UNIX)) || !ftpHelper.isFileExist(eachPath));                if(notFound){                    String message = String.format(\"cannot find the path: [%s], please check your configuration\", eachPath);                    LOG.error(message);                    throw DataXException.asDataXException(FtpReaderErrorCode.PATH_NOT_FOUND, message);                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "syncMetaData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MetaSchema", "snippet": "        public MetaSchema syncMetaData() {            //should wait for signal first            waitForSignal();            return getMetaSchema();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "validateParameter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void validateParameter() {            this.connParams = FtpConnParams.compose(connParams -> {                String protocol = this.originConfig.getNecessaryValue(Key.PROTOCOL, FtpReaderErrorCode.REQUIRED_VALUE);                boolean protocolTag = \"ftp\".equals(protocol) || \"sftp\".equals(protocol);                if (!protocolTag) {                    throw DataXException.asDataXException(FtpReaderErrorCode.ILLEGAL_VALUE,                            String.format(\"\u4ec5\u652f\u6301 ftp\u548csftp \u4f20\u8f93\u534f\u8bae , \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u4f20\u8f93\u534f\u8bae: [%s]\", protocol));                }                connParams.setProtocol(protocol);                connParams.setHost(this.originConfig.getNecessaryValue(Key.HOST, FtpReaderErrorCode.REQUIRED_VALUE));                connParams.setUsername(this.originConfig.getNecessaryValue(Key.USERNAME, FtpReaderErrorCode.REQUIRED_VALUE));                connParams.setPrvKeyPath(this.originConfig.getString(Key.PRV_KEY_PATH, \"\"));                connParams.setPassword(this.originConfig.getString(Key.PASSWORD, \"\"));                if(StringUtils.isBlank(connParams.getPrvKeyPath()) && StringUtils.isBlank(connParams.getPassword())){                    throw DataXException.asDataXException(FtpReaderErrorCode.REQUIRED_VALUE, \"you need to set private key path or password\");                }                connParams.setTimeout(this.originConfig.getInt(Key.TIMEOUT, Constant.DEFAULT_TIMEOUT));                // only support connect pattern                String connectPattern = this.originConfig.getUnnecessaryValue(Key.CONNECTPATTERN, Constant.DEFAULT_FTP_CONNECT_PATTERN, null);                boolean connectPatternTag = \"PORT\".equals(connectPattern) || \"PASV\".equals(connectPattern);                if (!connectPatternTag) {                    throw DataXException.asDataXException(FtpReaderErrorCode.ILLEGAL_VALUE,                            String.format(\"\u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684ftp\u4f20\u8f93\u6a21\u5f0f: [%s]\", connectPattern));                } else {                    this.originConfig.set(Key.CONNECTPATTERN, connectPattern);                }                connParams.setConnectPattern(connectPattern);            });            this.maxTraversalLevel = originConfig.getInt(Key.MAXTRAVERSALLEVEL, Constant.DEFAULT_MAX_TRAVERSAL_LEVEL);            //path check            String pathInString = this.originConfig.getNecessaryValue(Key.PATH, FtpReaderErrorCode.REQUIRED_VALUE);            if (!pathInString.startsWith(\"[\") && !pathInString.endsWith(\"]\")) {                path = new ArrayList<>();                path.add(pathInString);            } else {                path = this.originConfig.getList(Key.PATH, String.class);                if (null == path || path.size() == 0) {                    throw DataXException.asDataXException(FtpReaderErrorCode.REQUIRED_VALUE, \"\u60a8\u9700\u8981\u6307\u5b9a\u5f85\u8bfb\u53d6\u7684\u6e90\u76ee\u5f55\u6216\u6587\u4ef6\");                }                if(path.size() > 1){                    throw DataXException.asDataXException(FtpReaderErrorCode.ILLEGAL_VALUE, \"you are allowed to add only one path\");                }                for (String eachPath : path) {                    if (!eachPath.startsWith(\"/\")) {                        String message = String.format(\"\u8bf7\u68c0\u67e5\u53c2\u6570path:[%s],\u9700\u8981\u914d\u7f6e\u4e3a\u7edd\u5bf9\u8def\u5f84\", eachPath);                        LOG.error(message);                        throw DataXException.asDataXException(FtpReaderErrorCode.ILLEGAL_VALUE, message);                    }                }            }            this.incrBeginTime = this.originConfig.getLong(INCR_BEGIN_TIME, 0);            this.incrEndTime = this.originConfig.getLong(INCR_END_TIME, 0);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {            LOG.debug(\"prepare() begin...\");            waitForSignal();            this.sourceFiles = ftpHelper.getAllFiles(path, 0, maxTraversalLevel);            LOG.info(String.format(\"find [%s] files in source path\", this.sourceFiles.size()));            Iterator<PathMeta> iterator = this.sourceFiles.iterator();            while(iterator.hasNext()){                PathMeta pathMeta = iterator.next();                String absolutePath = pathMeta.getAbsolute();                long modifyTime = ftpHelper.getLastModifyTIme(absolutePath);                if(incrEndTime > 0) {                    if (modifyTime <= incrBeginTime || modifyTime > incrEndTime) {                        iterator.remove();                    }                }            }            LOG.info(String.format(\"\u60a8\u5373\u5c06\u8bfb\u53d6\u7684\u6587\u4ef6\u6570\u4e3a: [%s]\", this.sourceFiles.size()));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {            removeSignal();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            try {                this.ftpHelper.logoutFtpServer();            } catch (Exception e) {                String message = String.format(                        \"\u5173\u95ed\u4e0eftp\u670d\u52a1\u5668\u8fde\u63a5\u5931\u8d25: [%s] host=%s, username=%s, port=%s\",                        e.getMessage(), connParams.getHost(), connParams.getUsername(), connParams.getPort());                LOG.error(message, e);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(int adviceNumber) {            LOG.debug(\"split() begin...\");            List<Configuration> readerSplitConfigs = new ArrayList<Configuration>();            // warn:\u6bcf\u4e2aslice\u62d6\u4e14\u4ec5\u62d6\u4e00\u4e2a\u6587\u4ef6,            // int splitNumber = adviceNumber;            int splitNumber = this.sourceFiles.size();            if (0 == splitNumber) {                return new ArrayList<>();            }            List<List<PathMeta>> splitedSourceFiles = this.splitSourceFiles(new ArrayList<>(this.sourceFiles), splitNumber);            for (List<PathMeta> files : splitedSourceFiles) {                Configuration splitedConfig = this.originConfig.clone();                splitedConfig.set(Constant.SOURCE_FILES, files);                readerSplitConfigs.add(splitedConfig);            }            LOG.debug(\"split() ok and end...\");            return readerSplitConfigs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "splitSourceFiles", "params": ["List<T>", "int"], "throws": null, "modifiers": ["private"], "return_type": "List<List>", "snippet": "        private <T> List<List<T>> splitSourceFiles(final List<T> sourceList, int adviceNumber) {            List<List<T>> splitedList = new ArrayList<>();            int averageLength = sourceList.size() / adviceNumber;            averageLength = averageLength == 0 ? 1 : averageLength;            for (int begin = 0, end = 0; begin < sourceList.size(); begin = end) {                end = begin + averageLength;                if (end > sourceList.size()) {                    end = sourceList.size();                }                splitedList.add(sourceList.subList(begin, end));            }            return splitedList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "waitForSignal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void waitForSignal(){            if(originConfig.getBool(Key.TRANSIT, true)) {                //get the first path to check if exist SIGNAL_FILE                String pathFirst = getFirstPath();                pathFirst += SIGNAL_FILE_NAME;                signalFilePath = pathFirst;                if (!ftpHelper.isFileExist(pathFirst)) {                    LOG.info(\"check and wait for the creation of SIGNAL_FILE , path: {} ......\", pathFirst);                    do {                        try {                            Thread.sleep(WAIT_SIGNAL_SLEEP_INTERVAL);                        } catch (InterruptedException e) {                            Thread.currentThread().interrupt();                            throw DataXException.asDataXException(FtpReaderErrorCode.RUNTIME_EXCEPTION, \"interrupted while waiting for signal\");                        }                    } while (!ftpHelper.isFileExist(pathFirst));                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "removeSignal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void removeSignal(){            boolean removable = StringUtils.isNotEmpty(signalFilePath) &&                    ftpHelper.isFileExist(signalFilePath) && originConfig.getBool(Key.TRANSIT, true);            if(removable){                ftpHelper.deleteFile(signalFilePath);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMetaSchema", "params": [], "throws": null, "modifiers": ["private"], "return_type": "MetaSchema", "snippet": "        private MetaSchema getMetaSchema(){            String path = getFirstPath() + this.originConfig.getString(Key.META_FILE_PATH, DEFAULT_META_FILE_PATH);            try {                if (ftpHelper.isFileExist(path)) {                    InputStream inputStream = ftpHelper.getInputStream(path);                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();                    byte[] buffer = new byte[8 * 1024];                    int size;                    while ((size = inputStream.read(buffer)) > 0) {                        outputStream.write(buffer, 0, size);                    }                    String metaSer = outputStream.toString(this.originConfig.getString(                            com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING,                            com.alibaba.datax.plugin.unstructuredstorage.reader.Constant.DEFAULT_ENCODING));                    inputStream.close();                    outputStream.close();                    return GsonUtil.fromJson(metaSer, MetaSchema.class);                }            }catch (IOException e){                throw DataXException.asDataXException(FtpReaderErrorCode.GET_META_SCHEMA_ERROR, e.getMessage(), e);            }            return null;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getFirstPath", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "        private String getFirstPath(){            String pathFirst = path.get(0);            //check if the pathFirst is the directory            if(!ftpHelper.isDirExist(pathFirst)){                pathFirst = pathFirst.substring(0, pathFirst.lastIndexOf(String.valueOf(IOUtils.DIR_SEPARATOR_UNIX)));            }            if(pathFirst.contains(\"*\") || pathFirst.contains(\"?\")){                pathFirst = UnstructuredStorageReaderUtil.getRegexPathParentPath(pathFirst);            }            if(!pathFirst.endsWith(String.valueOf(IOUtils.DIR_SEPARATOR_UNIX))){                pathFirst += String.valueOf(IOUtils.DIR_SEPARATOR_UNIX);            }            return pathFirst;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {//\u8fde\u63a5\u91cd\u8bd5            /* for ftp connection */            this.readerSliceConfig = this.getPluginJobConf();            this.connParams = FtpConnParams.compose( connParams ->{                connParams.setHost(readerSliceConfig.getString(Key.HOST));                connParams.setProtocol(readerSliceConfig.getString(Key.PROTOCOL));                connParams.setUsername(readerSliceConfig.getString(Key.USERNAME));                connParams.setPassword(readerSliceConfig.getString(Key.PASSWORD, \"\"));                connParams.setPrvKeyPath(readerSliceConfig.getString(Key.PRV_KEY_PATH, \"\"));                connParams.setTimeout(readerSliceConfig.getInt(Key.TIMEOUT, Constant.DEFAULT_TIMEOUT));            });            this.sourceFiles = this.readerSliceConfig.getList(Constant.SOURCE_FILES, Object.class);            if (\"sftp\".equals(connParams.getProtocol())) {                //sftp\u534f\u8bae                connParams.setPort(readerSliceConfig.getInt(Key.PORT, Constant.DEFAULT_SFTP_PORT));                this.ftpHelper = new SftpHelper();            } else if (\"ftp\".equals(connParams.getProtocol())) {                // ftp \u534f\u8bae                connParams.setPort(readerSliceConfig.getInt(Key.PORT, Constant.DEFAULT_FTP_PORT));                // \u9ed8\u8ba4\u4e3a\u88ab\u52a8\u6a21\u5f0f                connParams.setConnectPattern(readerSliceConfig.getString(Key.CONNECTPATTERN, Constant.DEFAULT_FTP_CONNECT_PATTERN));                this.ftpHelper = new StandardFtpHelper();            }            ftpHelper.loginFtpServer(connParams);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            try {                this.ftpHelper.logoutFtpServer();            } catch (Exception e) {                String message = String.format(                        \"\u5173\u95ed\u4e0eftp\u670d\u52a1\u5668\u8fde\u63a5\u5931\u8d25: [%s] host=%s, username=%s, port=%s\",                        e.getMessage(), connParams.getHost(), connParams.getUsername(), connParams.getPort());                LOG.error(message, e);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startRead", "params": ["RecordSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startRead(RecordSender recordSender) {            LOG.info(\"start read source files...\");            for (Object sourceFile : this.sourceFiles) {                PathMeta pathMeta = JSONObject.parseObject(JSON.toJSONString(sourceFile), PathMeta.class);                String fileName = pathMeta.getAbsolute();                LOG.info(String.format(\"reading file : [%s]\", fileName));                InputStream inputStream = null;                inputStream = ftpHelper.getInputStream(fileName);                UnstructuredStorageReaderUtil.readFromStream(inputStream, fileName, this.readerSliceConfig,                        recordSender, this.getTaskPluginCollector());                recordSender.flush();            }            LOG.info(\"end read source files...\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startRead", "params": ["ChannelOutput"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startRead(ChannelOutput channelOutput) {            LOG.info(\"start read source files to stream channel...\");            for(Object sourceFile : this.sourceFiles){                PathMeta pathMeta = JSONObject.parseObject(JSON.toJSONString(sourceFile), PathMeta.class);                String absolutePath = pathMeta.getAbsolute();                String relativePath = pathMeta.getRelative();                LOG.info(String.format(\"reading file: [%s]\", absolutePath));                InputStream inputStream;                try{                    String name = absolutePath.substring(absolutePath.lastIndexOf(IOUtils.DIR_SEPARATOR) + 1);                    StreamMeta streamMeta = new StreamMeta();                    streamMeta.setName(name);                    streamMeta.setAbsolutePath(absolutePath);                    streamMeta.setRelativePath(relativePath);                    OutputStream outputStream = channelOutput.createStream(streamMeta, readerSliceConfig.getString(                            com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING,                            com.alibaba.datax.plugin.unstructuredstorage.reader.Constant.DEFAULT_ENCODING));                    inputStream = ftpHelper.getInputStream(absolutePath);                    UnstructuredStorageReaderUtil.readFromStream(inputStream, outputStream,                            this.readerSliceConfig);                }catch(IOException e){                    throw DataXException.asDataXException(FrameworkErrorCode.CHANNEL_STREAM_ERROR, e);                }            }            LOG.info(\"end read source files to stream channel...\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "useStream", "params": ["String", "Function<InputStream,T>"], "throws": null, "modifiers": ["public"], "return_type": "Optional<T>", "snippet": "  public <T> Optional<T> useStream(String fileName, Function<InputStream, T> processor) {    return resolverAccessor.resolve(resolver ->      Optional.of(resolver)        .map(r -> r.getResource(String.format(\"%s/jcr:content\", getAbsolutePath(fileName))))        .map(r-> r.adaptTo(InputStream.class))        .map(BufferedInputStream::new)        .map(processor)    );  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/util/JcrFileReader.java", "stars": "8", "class": {"name": "JcrFileReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readStream", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "  public InputStream readStream(String fileName) {    return useStream(fileName, Function.identity())      .orElseThrow(() -> new StubsException(String.format(\"Cannot read JCR file '%s'!\", fileName)));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/util/JcrFileReader.java", "stars": "8", "class": {"name": "JcrFileReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readText", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Optional<String>", "snippet": "  public Optional<String> readText(String fileName) {    return useStream(fileName, input -> {      try {        return IOUtils.toString(input, StandardCharsets.UTF_8);      } catch (IOException e) {        throw new StubsException(String.format(\"Cannot read JCR file '%s'!\", fileName), e);      }    });  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/util/JcrFileReader.java", "stars": "8", "class": {"name": "JcrFileReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAbsolutePath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getAbsolutePath(String name) {    if (rootPath == null || rootPath.isEmpty() || name.startsWith(\"/\")) {      return name;    }    return String.format(\"%s/%s\", rootPath, name);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/util/JcrFileReader.java", "stars": "8", "class": {"name": "JcrFileReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"MessageToShow{\" +                \"user_name='\" + user_name + '\\'' +                \", article_name='\" + article_name + '\\'' +                \", article_id=\" + article_id +                \", message_type=\" + message_type +                \", comment_content='\" + comment_content + '\\'' +                \", message_time=\" + message_time +                \", is_looked='\" + is_looked + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser_name", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUser_name() {        return user_name;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUser_name", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUser_name(String user_name) {        this.user_name = user_name;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getArticle_name", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getArticle_name() {        return article_name;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setArticle_name", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setArticle_name(String article_name) {        this.article_name = article_name;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getArticle_id", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getArticle_id() {        return article_id;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setArticle_id", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setArticle_id(int article_id) {        this.article_id = article_id;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage_type", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMessage_type() {        return message_type;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage_type", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessage_type(int message_type) {        this.message_type = message_type;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getComment_content", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getComment_content() {        return comment_content;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setComment_content", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setComment_content(String comment_content) {        this.comment_content = comment_content;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage_time", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage_time() {        return message_time;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage_time", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessage_time(String message_time) {        this.message_time = message_time;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIs_looked", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIs_looked() {        return is_looked;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIs_looked", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIs_looked(String is_looked) {        this.is_looked = is_looked;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/MessageToShow.java", "stars": "10", "class": {"name": "MessageToShow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testStreamValidVault", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testStreamValidVault() throws IOException {        InputStream encodedStream = getClass().getClassLoader().getResourceAsStream(\"test-vault.yml\");        String encryptedValue = IOUtils.toString(encodedStream, StandardCharsets.UTF_8);        byte[] decrypt = VaultHandler.decrypt(encryptedValue, TEST_PASSWORD);        assertEquals(DECODED_VAULT, new String(decrypt));    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/test/java/ru/sadv1r/ansible/vault/VaultHandlerTest.java", "stars": "7", "class": {"name": "VaultHandlerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testStreamInvalidVault", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testStreamInvalidVault() throws IOException {        exceptionRule.expect(IOException.class);        exceptionRule.expectMessage(\"HMAC Digest doesn't match - possibly it's the wrong password.\");        InputStream encodedStream = getClass().getClassLoader().getResourceAsStream(\"test-vault.yml\");        String encryptedValue = IOUtils.toString(encodedStream, StandardCharsets.UTF_8);        VaultHandler.decrypt(encryptedValue, TEST_WRONG_PASSWORD);    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/test/java/ru/sadv1r/ansible/vault/VaultHandlerTest.java", "stars": "7", "class": {"name": "VaultHandlerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() throws Exception {        this.detection();    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/impl/RegisterHandler.java", "stars": "1", "class": {"name": "RegisterHandler", "extends": "BaseLocalMemory", "implements": ["AppInitializer"], "modifiers": ["public"]}}, {"method_name": "order", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int order() {        return Const.Number.THREE;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/impl/RegisterHandler.java", "stars": "1", "class": {"name": "RegisterHandler", "extends": "BaseLocalMemory", "implements": ["AppInitializer"], "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroy() throws Exception {        log.info(\"\u9500\u6bc1\u914d\u7f6e\u4fe1\u606f!\");    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/impl/RegisterHandler.java", "stars": "1", "class": {"name": "RegisterHandler", "extends": "BaseLocalMemory", "implements": ["AppInitializer"], "modifiers": ["public"]}}, {"method_name": "detection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void detection() {        String path = RegisterHandler.class.getPackage().getName();        log.info(\"\u83b7\u53d6\u5f53\u524d\u5305\u7684\u5730\u5740 path:{}\",path);        List<Class<?>> classFromPackage = SomeUtil.getClasssFromPackage(path);        for (Class<?> aClass : classFromPackage) {            String name = aClass.getName();            log.info(\"\u7c7b\u7684\u540d\u5b57 name:{}\",name);            try {                Class<?> aClassNew = Class.forName(name);                MessageCommandAnnotation aClassNewAnnotation = aClassNew.getAnnotation(MessageCommandAnnotation.class);                if(Objects.nonNull(aClassNewAnnotation)) {                    Integer cmd = aClassNewAnnotation.cmd();                    Handler handler = (Handler) aClassNew.getDeclaredConstructor().newInstance();                    handler.operation();                    Map<Integer, Handler> handlerLocalMap = baseLocalMemory.getHandlerLocalMap();                    handlerLocalMap.put(cmd,handler);                    baseLocalMemory.setHandlerLocalMap(handlerLocalMap);                }            } catch (ClassNotFoundException e) {                e.printStackTrace();            } catch (IllegalAccessException e) {                e.printStackTrace();            } catch (InstantiationException e) {                e.printStackTrace();            } catch (NoSuchMethodException e) {                e.printStackTrace();            } catch (InvocationTargetException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/impl/RegisterHandler.java", "stars": "1", "class": {"name": "RegisterHandler", "extends": "BaseLocalMemory", "implements": ["AppInitializer"], "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/model/JsonBean.java", "stars": "13", "class": {"name": "JsonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/model/JsonBean.java", "stars": "13", "class": {"name": "JsonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage() {        return message;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/model/JsonBean.java", "stars": "13", "class": {"name": "JsonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessage(String message) {        this.message = message;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/model/JsonBean.java", "stars": "13", "class": {"name": "JsonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getData() {        return data;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/model/JsonBean.java", "stars": "13", "class": {"name": "JsonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(T data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/model/JsonBean.java", "stars": "13", "class": {"name": "JsonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimestamp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getTimestamp() {        return timestamp;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/model/JsonBean.java", "stars": "13", "class": {"name": "JsonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimestamp", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimestamp(long timestamp) {        this.timestamp = timestamp;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/model/JsonBean.java", "stars": "13", "class": {"name": "JsonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return list.size();    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/app/src/main/java/com/dreamfish/audiorecord/FileListAdapter.java", "stars": "2", "class": {"name": "FileListAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getItem(int position) {        return list.get(position);    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/app/src/main/java/com/dreamfish/audiorecord/FileListAdapter.java", "stars": "2", "class": {"name": "FileListAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return position;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/app/src/main/java/com/dreamfish/audiorecord/FileListAdapter.java", "stars": "2", "class": {"name": "FileListAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        ViewHolder viewHolder;        if (convertView == null) {            viewHolder = new ViewHolder();            convertView = LayoutInflater.from(context).inflate(R.layout.adapter_file_list, null);            convertView.setTag(viewHolder);            viewHolder.name = (TextView) convertView.findViewById(R.id.adapter_file_list_name);            viewHolder.size = (TextView) convertView.findViewById(R.id.adapter_file_list_create_size);        } else {            viewHolder = (ViewHolder) convertView.getTag();        }        viewHolder.name.setText(list.get(position).getName());        viewHolder.size.setText(FormetFileSize(list.get(position).length()));        return convertView;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/app/src/main/java/com/dreamfish/audiorecord/FileListAdapter.java", "stars": "2", "class": {"name": "FileListAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "FormetFileSize", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String FormetFileSize(long fileS) {// \u8f6c\u6362\u6587\u4ef6\u5927\u5c0f        DecimalFormat df = new DecimalFormat(\"#.00\");        String fileSizeString = \"\";        if (fileS < 1024) {            fileSizeString = df.format((double) fileS) + \"B\";        } else if (fileS < 1048576) {            fileSizeString = df.format((double) fileS / 1024) + \"K\";        } else if (fileS < 1073741824) {            fileSizeString = df.format((double) fileS / 1048576) + \"M\";        } else {            fileSizeString = df.format((double) fileS / 1073741824) + \"G\";        }        return fileSizeString;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/app/src/main/java/com/dreamfish/audiorecord/FileListAdapter.java", "stars": "2", "class": {"name": "FileListAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/autoconstructor/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/autoconstructor/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java", "stars": "15", "class": {"name": "AutoConstructorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "fullyPopulatedSubject", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void fullyPopulatedSubject() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final AutoConstructorMapper mapper = sqlSession.getMapper(AutoConstructorMapper.class);      final Object subject = mapper.getSubject(1);      assertNotNull(subject);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java", "stars": "15", "class": {"name": "AutoConstructorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "primitiveSubjects", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void primitiveSubjects() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final AutoConstructorMapper mapper = sqlSession.getMapper(AutoConstructorMapper.class);      assertThrows(PersistenceException.class, mapper::getSubjects);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java", "stars": "15", "class": {"name": "AutoConstructorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "annotatedSubject", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void annotatedSubject() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final AutoConstructorMapper mapper = sqlSession.getMapper(AutoConstructorMapper.class);      verifySubjects(mapper.getAnnotatedSubjects());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java", "stars": "15", "class": {"name": "AutoConstructorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "badSubject", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void badSubject() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final AutoConstructorMapper mapper = sqlSession.getMapper(AutoConstructorMapper.class);      assertThrows(PersistenceException.class, mapper::getBadSubjects);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java", "stars": "15", "class": {"name": "AutoConstructorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "extensiveSubject", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void extensiveSubject() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final AutoConstructorMapper mapper = sqlSession.getMapper(AutoConstructorMapper.class);      verifySubjects(mapper.getExtensiveSubjects());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java", "stars": "15", "class": {"name": "AutoConstructorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "verifySubjects", "params": ["List<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void verifySubjects(final List<?> subjects) {    assertNotNull(subjects);    Assertions.assertThat(subjects.size()).isEqualTo(3);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java", "stars": "15", "class": {"name": "AutoConstructorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        demo02();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo02/Iterator/Demo02Foreach(1).java", "stars": "2", "class": {"name": "Demo02Foreach", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "demo02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void demo02() {        ArrayList<String> list = new ArrayList<>();        list.add(\"aaa\");        list.add(\"bbb\");        list.add(\"ccc\");        list.add(\"ddd\");        for(String s : list){            System.out.println(s);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo02/Iterator/Demo02Foreach(1).java", "stars": "2", "class": {"name": "Demo02Foreach", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "demo01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void demo01() {        int[] arr = {1,2,3,4,5};        for(int i:arr){            System.out.println(i);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo02/Iterator/Demo02Foreach(1).java", "stars": "2", "class": {"name": "Demo02Foreach", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getOrderId() {\t\treturn orderId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setOrderId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setOrderId(String orderId) {\t\tthis.orderId = orderId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPriceperunit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getPriceperunit() {\t\treturn priceperunit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPriceperunit", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPriceperunit(double priceperunit) {\t\tthis.priceperunit = priceperunit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getQuantityValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getQuantityValue() {\t\treturn quantityValue;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setQuantityValue", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setQuantityValue(double quantityValue) {\t\tthis.quantityValue = quantityValue;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getQuantityUnit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getQuantityUnit() {\t\treturn quantityUnit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setQuantityUnit", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setQuantityUnit(double quantityUnit) {\t\tthis.quantityUnit = quantityUnit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getPrice() {\t\treturn price;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPrice", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPrice(double price) {\t\tthis.price = price;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getWarehouseID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getWarehouseID() {\t\treturn warehouseID;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setWarehouseID", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setWarehouseID(String warehouseID) {\t\tthis.warehouseID = warehouseID;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDeliveryDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "\tpublic Date getDeliveryDate() {\t\treturn deliveryDate;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDeliveryDate", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDeliveryDate(Date deliveryDate) {\t\tthis.deliveryDate = deliveryDate;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getManufacturingDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "\tpublic Date getManufacturingDate() {\t\treturn manufacturingDate;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setManufacturingDate", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setManufacturingDate(Date manufacturingDate) {\t\tthis.manufacturingDate = manufacturingDate;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getExpiryDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "\tpublic Date getExpiryDate() {\t\treturn expiryDate;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setExpiryDate", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setExpiryDate(Date expiryDate) {\t\tthis.expiryDate = expiryDate;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getQualityCheck", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getQualityCheck() {\t\treturn qualityCheck;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setQualityCheck", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setQualityCheck(String qualityCheck) {\t\tthis.qualityCheck = qualityCheck;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProcessDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "\tpublic Date getProcessDate() {\t\treturn processDate;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setProcessDate", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setProcessDate(Date processDate) {\t\tthis.processDate = processDate;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"ProductStockEntity [orderId=\" + orderId + \", name=\" + name + \", price_per_unit=\" + priceperunit\t\t\t\t+ \", quantityValue=\" + quantityValue + \", quantityUnit=\" + quantityUnit + \", price=\" + price\t\t\t\t+ \", warehouseID=\" + warehouseID + \", deliveryDate=\" + deliveryDate + \", manufacturingDate=\"\t\t\t\t+ manufacturingDate + \", expiryDate=\" + expiryDate + \", qualityCheck=\" + qualityCheck + \", processDate=\"\t\t\t\t+ processDate + \"]\";\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductStock.java", "stars": "1", "class": {"name": "ProductStock", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGravity", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setGravity(int gravity) {            switch (gravity) {                // \u5982\u679c\u8fd9\u4e2a\u662f\u5728\u4e2d\u95f4\u663e\u793a\u7684                case Gravity.CENTER:                case Gravity.CENTER_VERTICAL:                    // \u4e0d\u663e\u793a\u53d6\u6d88\u6309\u94ae                    setCancel(null);                    // \u91cd\u65b0\u8bbe\u7f6e\u52a8\u753b                    setAnimStyle(AnimAction.SCALE);                    break;                default:                    break;            }            return super.setGravity(gravity);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setList", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setList(int... ids) {            List<String> data = new ArrayList<>(ids.length);            for (int id : ids) {                data.add(getString(id));            }            return setList(data);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setList", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setList(String... data) {            return setList(Arrays.asList(data));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setList", "params": ["List"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setList(List data) {            mAdapter.setData(data);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setCancel", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setCancel(@StringRes int id) {            return setCancel(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setCancel", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setCancel(CharSequence text) {            mCancelView.setText(text);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setAutoDismiss", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setAutoDismiss(boolean dismiss) {            mAutoDismiss = dismiss;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["OnListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View v) {            if (mAutoDismiss) {                dismiss();            }            if (v == mCancelView) {                if (mListener != null) {                    mListener.onCancel(getDialog());                }            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onItemClick", "params": ["RecyclerView", "View", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onItemClick(RecyclerView recyclerView, View itemView, int position) {            if (mAutoDismiss) {                dismiss();            }            if (mListener != null) {                mListener.onSelected(getDialog(), position, mAdapter.getItem(position));            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {            return new ViewHolder();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "MenuAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void onBindView(int position) {                mTextView.setText(getItem(position).toString());                if (position == 0) {                    // \u5f53\u524d\u662f\u5426\u53ea\u6709\u4e00\u4e2a\u6761\u76ee                    if (getItemCount() == 1) {                        mLineView.setVisibility(View.GONE);                    } else {                        mLineView.setVisibility(View.VISIBLE);                    }                } else if (position == getItemCount() - 1) {                    mLineView.setVisibility(View.GONE);                } else {                    mLineView.setVisibility(View.VISIBLE);                }            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "getTimer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Timer", "snippet": "    public Timer getTimer() {        return mTimer;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerView.java", "stars": "74", "class": {"name": "TimerView", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["ChangeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(ChangeListener listener) {        mChangeListener = listener;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerView.java", "stars": "74", "class": {"name": "TimerView", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateText", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateText() {        long remainingTimeMillis = mTimer.getRemainingTimeMillis();        if (remainingTimeMillis > 0) {            mRedText = false;            // Round up: x001 to (x + 1)000 milliseconds should resolve to x seconds.            remainingTimeMillis -= 1;            remainingTimeMillis += TimeUnit.SECONDS.toMillis(1);            mTipView.setVisibility(View.INVISIBLE);        } else {            mRedText = !mRedText;            remainingTimeMillis = Math.abs(remainingTimeMillis);            mTipView.setVisibility(View.VISIBLE);        }        if (mRedText) {            // Sync the sound with the red text.            playSound();        }        updateText(remainingTimeMillis, mRedText ? mRedColor : mWhiteColor);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerView.java", "stars": "74", "class": {"name": "TimerView", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateText", "params": ["long", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateText(long timeMillis, int textColor) {        mHoursView.setText(String.format(\"%02d\", TimeUnit.MILLISECONDS.toHours(timeMillis)));        mHoursView.setTextColor(textColor);        timeMillis %= TimeUnit.HOURS.toMillis(1);        mMinutesView.setText(String.format(\"%02d\", TimeUnit.MILLISECONDS.toMinutes(timeMillis)));        mMinutesView.setTextColor(textColor);        timeMillis %= TimeUnit.MINUTES.toMillis(1);        mSecondsView.setText(String.format(\"%02d\", TimeUnit.MILLISECONDS.toSeconds(timeMillis)));        mSecondsView.setTextColor(textColor);        if (mChangeListener != null) {            mChangeListener.onChange();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerView.java", "stars": "74", "class": {"name": "TimerView", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "playSound", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void playSound() {         mSoundPool.play(mTimerFinishedSoundId,                        1 /* leftVolume */,                        1 /* rightVolume */,                        SOUND_PRIORITY,                        0 /* loop */,                        1 /* rate */);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerView.java", "stars": "74", "class": {"name": "TimerView", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/BirchParquetSlabBlock.java", "stars": "2", "class": {"name": "BirchParquetSlabBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, state.get(TYPE) == SlabType.DOUBLE ? 2 : 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/BirchParquetSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getGson", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Gson", "snippet": "    public static Gson getGson() {        return getGson(true);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/GsonUtils.java", "stars": "1", "class": {"name": "GsonUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getGson", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "Gson", "snippet": "    public static Gson getGson(final boolean serializeNulls) {        return serializeNulls ? GSON_NO_NULLS : GSON;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/GsonUtils.java", "stars": "1", "class": {"name": "GsonUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "toJson", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toJson(final Object object) {        return toJson(object, true);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/GsonUtils.java", "stars": "1", "class": {"name": "GsonUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "toJson", "params": ["Object", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toJson(final Object object, final boolean includeNulls) {        return includeNulls ? GSON.toJson(object) : GSON_NO_NULLS.toJson(object);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/GsonUtils.java", "stars": "1", "class": {"name": "GsonUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "fromJson", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T fromJson(final String json, final Class<T> type) {        return GSON.fromJson(json, type);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/GsonUtils.java", "stars": "1", "class": {"name": "GsonUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "fromJson", "params": ["String", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T fromJson(final String json, final Type type) {        return GSON.fromJson(json, type);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/GsonUtils.java", "stars": "1", "class": {"name": "GsonUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "fromJson", "params": ["Reader", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T fromJson(final Reader reader, final Class<T> type) {        return GSON.fromJson(reader, type);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/GsonUtils.java", "stars": "1", "class": {"name": "GsonUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "fromJson", "params": ["Reader", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T fromJson(final Reader reader, final Type type) {        return GSON.fromJson(reader, type);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/GsonUtils.java", "stars": "1", "class": {"name": "GsonUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createGson", "params": ["boolean"], "throws": null, "modifiers": ["private", "static"], "return_type": "Gson", "snippet": "    private static Gson createGson(final boolean serializeNulls) {        final GsonBuilder builder = new GsonBuilder();        if (serializeNulls) {            builder.serializeNulls();        }        return builder.create();    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/GsonUtils.java", "stars": "1", "class": {"name": "GsonUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getUri", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Uri", "snippet": "    public Uri getUri() {        return this.connection == null ? null : Uri.parse(this.connection.getURL().toString());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "getResponseHeaders", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,List>", "snippet": "    public Map<String, List<String>> getResponseHeaders() {        return this.connection == null ? new HashMap<String, List<String>>() : this.connection.getHeaderFields();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "setRequestProperty", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequestProperty(String name, String value) {        Assertions.checkNotNull(name);        Assertions.checkNotNull(value);        this.requestProperties.set(name, value);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "clearRequestProperty", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearRequestProperty(String name) {        Assertions.checkNotNull(name);        this.requestProperties.remove(name);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "clearAllRequestProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearAllRequestProperties() {        this.requestProperties.clear();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "open", "params": ["DataSpec"], "throws": ["HttpDataSourceException"], "modifiers": ["public"], "return_type": "long", "snippet": "    public long open(DataSpec dataSpec) throws HttpDataSourceException {        this.dataSpec = dataSpec;        this.bytesRead = 0L;        this.bytesSkipped = 0L;        this.transferInitializing(dataSpec);        try {            this.connection = this.makeConnection(dataSpec);        } catch (IOException var9) {            throw new HttpDataSourceException(\"Unable to connect to \" + dataSpec.uri.toString(), var9, dataSpec, TYPE_OPEN);        }        int responseCode;        String responseMessage;        try {            responseCode = this.connection.getResponseCode();            responseMessage = this.connection.getResponseMessage();        } catch (IOException var8) {            this.closeConnectionQuietly();            throw new HttpDataSourceException(\"Unable to connect to \" + dataSpec.uri.toString(), var8, dataSpec, TYPE_OPEN);        }        if (responseCode >= 200 && responseCode <= 299) {            String contentType = this.connection.getContentType();            if (this.contentTypePredicate != null && !this.contentTypePredicate.evaluate(contentType)) {                this.closeConnectionQuietly();                throw new InvalidContentTypeException(contentType, dataSpec);            } else {                this.bytesToSkip = responseCode == 200 && dataSpec.position != 0L ? dataSpec.position : 0L;                if (!dataSpec.isFlagSet(FLAG_ALLOW_GZIP)) {                    if (dataSpec.length != -1L) {                        this.bytesToRead = dataSpec.length;                    } else {                        long contentLength = getContentLength(this.connection);                        this.bytesToRead = contentLength != -1L ? contentLength - this.bytesToSkip : -1L;                    }                } else {                    this.bytesToRead = dataSpec.length;                }                try {                    this.inputStream = this.connection.getInputStream();                } catch (IOException var7) {                    this.closeConnectionQuietly();                    throw new HttpDataSourceException(var7, dataSpec, TYPE_OPEN);                }                this.opened = true;                this.transferStarted(dataSpec);                return this.bytesToRead;            }        } else {            Map<String, List<String>> headers = this.connection.getHeaderFields();            this.closeConnectionQuietly();            InvalidResponseCodeException exception = new InvalidResponseCodeException(responseCode, responseMessage, headers, dataSpec);            if (responseCode == 416) {                exception.initCause(new DataSourceException(0));            }            throw exception;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "read", "params": ["byte", "int", "int"], "throws": ["HttpDataSourceException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int read(byte[] buffer, int offset, int readLength) throws HttpDataSourceException {        try {            this.skipInternal();            return this.readInternal(buffer, offset, readLength);        } catch (IOException var5) {            throw new HttpDataSourceException(var5, this.dataSpec, HttpDataSourceException.TYPE_CLOSE);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["HttpDataSourceException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() throws HttpDataSourceException {        try {            if (this.inputStream != null) {                maybeTerminateInputStream(this.connection, this.bytesRemaining());                try {                    this.inputStream.close();                } catch (IOException var5) {                    throw new HttpDataSourceException(var5, this.dataSpec, HttpDataSourceException.TYPE_CLOSE);                }            }        } finally {            this.inputStream = null;            this.closeConnectionQuietly();            if (this.opened) {                this.opened = false;                this.transferEnded();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "HttpURLConnection", "snippet": "    protected final HttpURLConnection getConnection() {        return this.connection;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "bytesSkipped", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "long", "snippet": "    protected final long bytesSkipped() {        return this.bytesSkipped;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "bytesRead", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "long", "snippet": "    protected final long bytesRead() {        return this.bytesRead;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "bytesRemaining", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "long", "snippet": "    protected final long bytesRemaining() {        return this.bytesToRead == -1L ? this.bytesToRead : this.bytesToRead - this.bytesRead;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "makeConnection", "params": ["DataSpec"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "HttpURLConnection", "snippet": "    private HttpURLConnection makeConnection(DataSpec dataSpec) throws IOException {        URL url = new URL(dataSpec.uri.toString());        int httpMethod = dataSpec.httpMethod;        byte[] httpBody = dataSpec.httpBody;        long position = dataSpec.position;        long length = dataSpec.length;        boolean allowGzip = dataSpec.isFlagSet(FLAG_ALLOW_GZIP);        if (!this.allowCrossProtocolRedirects) {            return this.makeConnection(url, httpMethod, httpBody, position, length, allowGzip, true);        } else {            int redirectCount = 0;            while (true) {                while (redirectCount++ <= 20) {                    HttpURLConnection connection = this.makeConnection(url, httpMethod, httpBody, position, length, allowGzip, false);                    int responseCode = connection.getResponseCode();                    String location = connection.getHeaderField(\"Location\");                    if (httpMethod != 1 && httpMethod != 3 || responseCode != 300 && responseCode != 301 && responseCode != 302 && responseCode != 303 && responseCode != 307 && responseCode != 308) {                        if (httpMethod != 2 || responseCode != 300 && responseCode != 301 && responseCode != 302 && responseCode != 303) {                            return connection;                        }                        connection.disconnect();                        httpMethod = 1;                        httpBody = null;                        url = handleRedirect(url, location);                    } else {                        connection.disconnect();                        url = handleRedirect(url, location);                    }                }                throw new NoRouteToHostException(\"Too many redirects: \" + redirectCount);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "makeConnection", "params": ["URL", "int", "byte", "long", "long", "boolean", "boolean"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "HttpURLConnection", "snippet": "    private HttpURLConnection makeConnection(URL url, int httpMethod, byte[] httpBody, long position, long length, boolean allowGzip, boolean followRedirects) throws IOException {        HttpURLConnection connection;        if (url.getProtocol().endsWith(\"https\")) {            /**\u53bb\u9664\u8bc1\u4e66\u9650\u5236**/            connection = (HttpsURLConnection) url.openConnection();            ((HttpsURLConnection) connection).setHostnameVerifier(new HostnameVerifier() {                @Override                public boolean verify(String hostname, SSLSession session) {                    return true;                }            });            // Create a trust manager that does not validate certificate chains            final TrustManager[] trustAllCerts = new TrustManager[]{                    new X509TrustManager() {                        @Override                        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {                        }                        @Override                        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {                        }                        @Override                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {                            return null;                        }                    }            };            // Install the all-trusting trust manager            final SSLContext sslContext;            try {                sslContext = SSLContext.getInstance(\"SSL\");                sslContext.init(null, trustAllCerts, new java.security.SecureRandom());                // Create an ssl socket factory with our all-trusting manager                final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();                ((HttpsURLConnection) connection).setSSLSocketFactory(sslSocketFactory);                ((HttpsURLConnection) connection).setHostnameVerifier(new HostnameVerifier() {                    @Override                    public boolean verify(String hostname, SSLSession session) {                        return true;                    }                });            } catch (NoSuchAlgorithmException e) {                e.printStackTrace();            } catch (KeyManagementException e) {                e.printStackTrace();            }            /**\u53bb\u9664\u8bc1\u4e66\u9650\u5236**/        } else {            connection = (HttpURLConnection) url.openConnection();        }        connection.setConnectTimeout(this.connectTimeoutMillis);        connection.setReadTimeout(this.readTimeoutMillis);        Iterator var11;        Entry property;        if (this.defaultRequestProperties != null) {            var11 = this.defaultRequestProperties.getSnapshot().entrySet().iterator();            while (var11.hasNext()) {                property = (Entry) var11.next();                connection.setRequestProperty((String) property.getKey(), (String) property.getValue());            }        }        var11 = this.requestProperties.getSnapshot().entrySet().iterator();        while (var11.hasNext()) {            property = (Entry) var11.next();            connection.setRequestProperty((String) property.getKey(), (String) property.getValue());        }        if (position != 0L || length != -1L) {            String rangeRequest = \"bytes=\" + position + \"-\";            if (length != -1L) {                rangeRequest = rangeRequest + (position + length - 1L);            }            connection.setRequestProperty(\"Range\", rangeRequest);        }        connection.setRequestProperty(\"User-Agent\", this.userAgent);        if (!allowGzip) {            connection.setRequestProperty(\"Accept-Encoding\", \"identity\");        }        connection.setInstanceFollowRedirects(followRedirects);        connection.setDoOutput(httpBody != null);        connection.setRequestMethod(DataSpec.getStringForHttpMethod(httpMethod));        if (httpBody != null) {            connection.setFixedLengthStreamingMode(httpBody.length);            connection.connect();            OutputStream os = connection.getOutputStream();            os.write(httpBody);            os.close();        } else {            connection.connect();        }        return connection;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "handleRedirect", "params": ["URL", "String"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "URL", "snippet": "    private static URL handleRedirect(URL originalUrl, String location) throws IOException {        if (location == null) {            throw new ProtocolException(\"Null location redirect\");        } else {            URL url = new URL(originalUrl, location);            String protocol = url.getProtocol();            if (!\"https\".equals(protocol) && !\"http\".equals(protocol)) {                throw new ProtocolException(\"Unsupported protocol redirect: \" + protocol);            } else {                return url;            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "getContentLength", "params": ["HttpURLConnection"], "throws": null, "modifiers": ["private", "static"], "return_type": "long", "snippet": "    private static long getContentLength(HttpURLConnection connection) {        long contentLength = -1L;        String contentLengthHeader = connection.getHeaderField(\"Content-Length\");        if (!TextUtils.isEmpty(contentLengthHeader)) {            try {                contentLength = Long.parseLong(contentLengthHeader);            } catch (NumberFormatException var9) {                Log.e(\"GSYExoHttpDataSource\", \"Unexpected Content-Length [\" + contentLengthHeader + \"]\");            }        }        String contentRangeHeader = connection.getHeaderField(\"Content-Range\");        if (!TextUtils.isEmpty(contentRangeHeader)) {            Matcher matcher = CONTENT_RANGE_HEADER.matcher(contentRangeHeader);            if (matcher.find()) {                try {                    long contentLengthFromRange = Long.parseLong(matcher.group(2)) - Long.parseLong(matcher.group(1)) + 1L;                    if (contentLength < 0L) {                        contentLength = contentLengthFromRange;                    } else if (contentLength != contentLengthFromRange) {                        Log.w(\"GSYExoHttpDataSource\", \"Inconsistent headers [\" + contentLengthHeader + \"] [\" + contentRangeHeader + \"]\");                        contentLength = Math.max(contentLength, contentLengthFromRange);                    }                } catch (NumberFormatException var8) {                    Log.e(\"GSYExoHttpDataSource\", \"Unexpected Content-Range [\" + contentRangeHeader + \"]\");                }            }        }        return contentLength;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "skipInternal", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void skipInternal() throws IOException {        if (this.bytesSkipped != this.bytesToSkip) {            byte[] skipBuffer = (byte[]) skipBufferReference.getAndSet(null);            if (skipBuffer == null) {                skipBuffer = new byte[4096];            }            while (this.bytesSkipped != this.bytesToSkip) {                int readLength = (int) Math.min(this.bytesToSkip - this.bytesSkipped, (long) skipBuffer.length);                int read = this.inputStream.read(skipBuffer, 0, readLength);                if (Thread.currentThread().isInterrupted()) {                    throw new InterruptedIOException();                }                if (read == -1) {                    throw new EOFException();                }                this.bytesSkipped += (long) read;                this.bytesTransferred(read);            }            skipBufferReference.set(skipBuffer);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "readInternal", "params": ["byte", "int", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int readInternal(byte[] buffer, int offset, int readLength) throws IOException {        if (readLength == 0) {            return 0;        } else {            if (this.bytesToRead != -1L) {                long bytesRemaining = this.bytesToRead - this.bytesRead;                if (bytesRemaining == 0L) {                    return -1;                }                readLength = (int) Math.min((long) readLength, bytesRemaining);            }            int read = this.inputStream.read(buffer, offset, readLength);            if (read == -1) {                if (this.bytesToRead != -1L) {                    throw new EOFException();                } else {                    return -1;                }            } else {                this.bytesRead += (long) read;                this.bytesTransferred(read);                return read;            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "maybeTerminateInputStream", "params": ["HttpURLConnection", "long"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void maybeTerminateInputStream(HttpURLConnection connection, long bytesRemaining) {        if (Util.SDK_INT == 19 || Util.SDK_INT == 20) {            try {                InputStream inputStream = connection.getInputStream();                if (bytesRemaining == -1L) {                    if (inputStream.read() == -1) {                        return;                    }                } else if (bytesRemaining <= 2048L) {                    return;                }                String className = inputStream.getClass().getName();                if (\"com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream\".equals(className) || \"com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream\".equals(className)) {                    Class<?> superclass = inputStream.getClass().getSuperclass();                    Method unexpectedEndOfInput = superclass.getDeclaredMethod(\"unexpectedEndOfInput\");                    unexpectedEndOfInput.setAccessible(true);                    unexpectedEndOfInput.invoke(inputStream);                }            } catch (Exception var7) {                ;            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "closeConnectionQuietly", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void closeConnectionQuietly() {        if (this.connection != null) {            try {                this.connection.disconnect();            } catch (Exception var2) {                Log.e(\"GSYExoHttpDataSource\", \"Unexpected error while disconnecting\", var2);            }            this.connection = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/source/GSYExoHttpDataSource.java", "stars": "2", "class": {"name": "GSYExoHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "CredentialsManager", "snippet": "    public static CredentialsManager getInstance() {        if (fileManager == null) {            fileManager = new CredentialsManager();        }        return fileManager;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setView(View view) {        this.view = view;        try {            this.restoreCredentials();            this.restoreServerName();        } catch (IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCredentials", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Credentials", "snippet": "    public Credentials getCredentials() {        return credentials;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setToken(String token) { this.credentials.setToken(token);}", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveCredentials", "params": ["Credentials"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveCredentials(Credentials credentials) throws IOException {        FileOutputStream fos = null;        try {            fos = view.getContext().openFileOutput(CREDENTIALS_FILE_NAME, view.getContext().MODE_PRIVATE);            String toWrite = credentials.hostname + \"#\" + credentials.username + \"#\" + credentials.password;            fos.write(toWrite.getBytes());        } catch (FileNotFoundException e) {            e.printStackTrace();        } finally {            if (fos != null) {                fos.close();            }        }        this.credentials = credentials;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "restoreCredentials", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void restoreCredentials() throws IOException {        if (credentials == null) {            FileInputStream fis = null;            String text = \"\";            try {                fis = view.getContext().openFileInput(CREDENTIALS_FILE_NAME);                InputStreamReader isr = new InputStreamReader(fis);                BufferedReader br = new BufferedReader(isr);                StringBuilder sb = new StringBuilder();                while ((text = br.readLine()) != null) {                    sb.append(text);                }                text = sb.toString();            } catch (FileNotFoundException e) {                e.printStackTrace();            } finally {                if (fis != null) {                    fis.close();                }            }            String[] c = text.split(\"#\");            if (c.length == 0) {                credentials = null;            }            this.credentials = new Credentials(c[0], c[1], c[2]);            APIConnector.getInstance().login();        }    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isOnline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isOnline() {        return this.credentials != null && !this.credentials.token.equals(\"\");    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasCredentials", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasCredentials() {        return this.credentials != null;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasServerName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasServerName() {        return this.serverName != null;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getServerName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getServerName() {        return this.serverName;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveServerName", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveServerName(String serverName) throws IOException {        FileOutputStream fos = null;        try {            fos = view.getContext().openFileOutput(SERVER_INFO_FILE_NAME, view.getContext().MODE_PRIVATE);            String toWrite = serverName + \"#\";            fos.write(toWrite.getBytes());        } catch (FileNotFoundException e) {            e.printStackTrace();        } finally {            if (fos != null) {                fos.close();            }        }        this.serverName = serverName;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "restoreServerName", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void restoreServerName() throws IOException {        if (credentials == null) {            FileInputStream fis = null;            String text = \"\";            try {                fis = view.getContext().openFileInput(SERVER_INFO_FILE_NAME);                InputStreamReader isr = new InputStreamReader(fis);                BufferedReader br = new BufferedReader(isr);                StringBuilder sb = new StringBuilder();                while ((text = br.readLine()) != null) {                    sb.append(text);                }                text = sb.toString();            } catch (FileNotFoundException e) {                e.printStackTrace();            } finally {                if (fis != null) {                    fis.close();                }            }            String[] c = text.split(\"#\");            if (c.length == 0) {                serverName = null;            }            serverName = c[0];            IPManager.getInstance().setServerName(serverName);        }    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/CredentialsManager.java", "stars": "1", "class": {"name": "CredentialsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": ["Context"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "DataRepository", "snippet": "    public synchronized static DataRepository getInstance(Context context) {        if (instance == null) {            synchronized (DataRepository.class) {                if (instance == null) {                    instance = new DataRepository(context.getApplicationContext());                }            }        }        return instance;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/DataRepository.java", "stars": "2", "class": {"name": "DataRepository", "extends": null, "implements": ["IDataSource"], "modifiers": ["public"]}}, {"method_name": "refreshToken", "params": ["String", "String", "HttpItemCallback<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void refreshToken(String appid, String uid, HttpItemCallback<String> callback) {        Map<String, Object> data = new HashMap<>();        data.put(\"uid\", uid);        data.put(\"channelName\", \"test\");        data.put(\"validTime\", 30);        data.put(\"appId\", appid);        RequestBody body =                RequestBody.create(MediaType.get(\"application/json;charset=utf-8\"),                        JSON.toJSONString(data));        Request request = new Request.Builder()                .url(\"https://webapi.sunclouds.com/webservice/app/v2/auth/genToken\")                .post(body)                .build();        OkHttpClient client = new OkHttpClient();        client.newCall(request).enqueue(callback);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/DataRepository.java", "stars": "2", "class": {"name": "DataRepository", "extends": null, "implements": ["IDataSource"], "modifiers": ["public"]}}, {"method_name": "feedback", "params": ["String", "File", "Callback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void feedback(String json, File file, Callback callback) {        RequestBody body = new MultipartBody.Builder()                .setType(MultipartBody.FORM)                .addFormDataPart(\"nyy\", json)                .addFormDataPart(\"file\", file.getName(),                        RequestBody.create(MediaType.parse(\"multipart/form-data\"), file))                .build();        Request request = new Request.Builder()                .url(\"https://isoda-inforeceiver.yy.com/userFeedback\")                .post(body)                .build();        OkHttpClient client = new OkHttpClient();        client.newCall(request).enqueue(callback);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/DataRepository.java", "stars": "2", "class": {"name": "DataRepository", "extends": null, "implements": ["IDataSource"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        // \u8bbe\u7f6e\u4e00\u4e2aexit transition        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);            getWindow().setEnterTransition(new Explode());            getWindow().setExitTransition(new Explode());        }        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_list_video);        ButterKnife.bind(this);        listADNormalAdapter = new ListADNormalAdapter(this);        videoList.setAdapter(listADNormalAdapter);        videoList.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView view, int scrollState) {            }            @Override            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {                int lastVisibleItem = firstVisibleItem + visibleItemCount;                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e                if (GSYVideoManager.instance().getPlayPosition() >= 0) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = GSYVideoManager.instance().getPlayPosition();                    //\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                    if (GSYVideoManager.instance().getPlayTag().equals(ListADNormalAdapter.TAG)                            && (position < firstVisibleItem || position > lastVisibleItem)) {                        //\u5982\u679c\u6ed1\u51fa\u53bb\u4e86\u4e0a\u9762\u548c\u4e0b\u9762\u5c31\u662f\u5426\uff0c\u548c\u4eca\u65e5\u5934\u6761\u4e00\u6837                        //\u91ca\u653e\u5e7f\u544a\u548c\u89c6\u9891                        if (GSYVideoADManager.instance().listener() != null) {                            GSYVideoADManager.instance().listener().onAutoCompletion();                        }                        GSYVideoADManager.releaseAllVideos();                        GSYVideoManager.releaseAllVideos();                        listADNormalAdapter.notifyDataSetChanged();                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADVideoActivity2", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (GSYVideoADManager.backFromWindowFull(this)) {            return;        }        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADVideoActivity2", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        GSYVideoManager.onPause();        GSYVideoADManager.onPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADVideoActivity2", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        GSYVideoManager.onResume();        GSYVideoADManager.onResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADVideoActivity2", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        GSYVideoManager.releaseAllVideos();        GSYVideoADManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADVideoActivity2", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNeedAdOnStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNeedAdOnStart() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADVideoActivity2", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getCount() {            return list.size();        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getItem(int position) {            return null;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getItemId(int position) {            return 0;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "        public View getView(final int position, View convertView, ViewGroup parent) {            final ViewHolder holder;            if (convertView == null) {                holder = new ViewHolder();                convertView = inflater.inflate(R.layout.list_video_item_ad2, null);                holder.gsyVideoPlayer = (SampleCoverVideo) convertView.findViewById(R.id.video_item_player);                holder.adVideoPlayer = (RequestListADVideoPlayer) convertView.findViewById(R.id.video_ad_player);                convertView.setTag(holder);            } else {                holder = (ViewHolder) convertView.getTag();            }            final String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";            final String urlAD = \"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\";            //\u591a\u4e2a\u64ad\u653e\u65f6\u5fc5\u987b\u5728setUpLazy\u3001setUp\u548cgetGSYVideoManager()\u7b49\u524d\u9762\u8bbe\u7f6e            holder.gsyVideoPlayer.setPlayTag(TAG);            holder.gsyVideoPlayer.setPlayPosition(position);            boolean isPlaying = holder.gsyVideoPlayer.getCurrentPlayer().isInPlayingState();            if (!isPlaying) {                holder.gsyVideoPlayer.setUpLazy(url, false, null, null, \"\u8fd9\u662ftitle\");            }            boolean isADPlaying = holder.adVideoPlayer.getCurrentPlayer().isInPlayingState();            if (!isADPlaying) {                holder.adVideoPlayer.setUpLazy(urlAD, false, null, null, \"\u8fd9\u662ftitle\");            }            //\u589e\u52a0title            holder.gsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);            //\u8bbe\u7f6e\u8fd4\u56de\u952e            holder.gsyVideoPlayer.getBackButton().setVisibility(View.GONE);            //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd            holder.gsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    resolveFullBtn(holder.gsyVideoPlayer);                }            });            holder.adVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    resolveFullBtn(holder.adVideoPlayer);                }            });            holder.gsyVideoPlayer.setRotateViewAuto(false);            holder.adVideoPlayer.setRotateViewAuto(false);            holder.gsyVideoPlayer.setLockLand(true);            holder.adVideoPlayer.setLockLand(true);            holder.gsyVideoPlayer.setReleaseWhenLossAudio(false);            holder.adVideoPlayer.setReleaseWhenLossAudio(false);            holder.gsyVideoPlayer.setShowFullAnimation(false);            holder.adVideoPlayer.setShowFullAnimation(false);            holder.gsyVideoPlayer.setIsTouchWiget(false);            holder.adVideoPlayer.setIsTouchWiget(false);            holder.gsyVideoPlayer.setNeedLockFull(true);            if (position % 2 == 0) {                holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx1);            } else {                holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx2);            }            holder.gsyVideoPlayer.setVideoAllCallBack(new GSYSampleCallBack() {                @Override                public void onClickStartIcon(String url, Object... objects) {                    super.onClickStartIcon(url, objects);                    if (holder.adVideoPlayer.getGSYVideoManager().listener() != null) {                        holder.adVideoPlayer.getGSYVideoManager().listener().onAutoCompletion();                    }                }                @Override                public void onPrepared(String url, Object... objects) {                    super.onPrepared(url, objects);                    if (isNeedAdOnStart()) {                        holder.gsyVideoPlayer.getCurrentPlayer().onVideoPause();                        startAdPlay(holder.adVideoPlayer, holder.gsyVideoPlayer);                    }                }                @Override                public void onQuitFullscreen(String url, Object... objects) {                    super.onQuitFullscreen(url, objects);                }                @Override                public void onEnterFullscreen(String url, Object... objects) {                    super.onEnterFullscreen(url, objects);                    holder.gsyVideoPlayer.getCurrentPlayer().getTitleTextView().setText((String) objects[0]);                }                @Override                public void onAutoComplete(String url, Object... objects) {                    super.onAutoComplete(url, objects);                }            });            holder.adVideoPlayer.setVideoAllCallBack(new GSYSampleCallBack() {                @Override                public void onAutoComplete(String url, Object... objects) {                    //\u5e7f\u544a\u7ed3\u675f\uff0c\u91ca\u653e                    holder.adVideoPlayer.getCurrentPlayer().release();                    holder.adVideoPlayer.onVideoReset();                    holder.adVideoPlayer.setVisibility(View.GONE);                    //\u5f00\u59cb\u64ad\u653e\u539f\u89c6\u9891\uff0c\u6839\u636e\u662f\u5426\u5904\u4e8e\u5168\u5c4f\u72b6\u6001\u5224\u65ad                    int playPosition = holder.gsyVideoPlayer.getGSYVideoManager().getPlayPosition();                    if (position == playPosition) {                        holder.gsyVideoPlayer.getCurrentPlayer().startAfterPrepared();                    }                    if (holder.adVideoPlayer.getCurrentPlayer().isIfCurrentIsFullscreen()) {                        holder.adVideoPlayer.removeFullWindowViewOnly();                        if (!holder.gsyVideoPlayer.getCurrentPlayer().isIfCurrentIsFullscreen()) {                            resolveFullBtn(holder.gsyVideoPlayer);                            holder.gsyVideoPlayer.setSaveBeforeFullSystemUiVisibility(holder.adVideoPlayer.getSaveBeforeFullSystemUiVisibility());                        }                    }                }                @Override                public void onQuitFullscreen(String url, Object... objects) {                    //\u9000\u51fa\u5168\u5c4f\u903b\u8f91                    if (holder.gsyVideoPlayer.isIfCurrentIsFullscreen()) {                        holder.gsyVideoPlayer.onBackFullscreen();                    }                }            });            return convertView;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveFullBtn", "params": ["StandardGSYVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void resolveFullBtn(final StandardGSYVideoPlayer standardGSYVideoPlayer) {            standardGSYVideoPlayer.startWindowFullscreen(context, false, true);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "startAdPlay", "params": ["GSYADVideoPlayer", "StandardGSYVideoPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startAdPlay(GSYADVideoPlayer gsyadVideoPlayer, StandardGSYVideoPlayer normalPlayer) {            gsyadVideoPlayer.setVisibility(View.VISIBLE);            gsyadVideoPlayer.startPlayLogic();            if (normalPlayer.getCurrentPlayer().isIfCurrentIsFullscreen()) {                resolveFullBtn(gsyadVideoPlayer);                gsyadVideoPlayer.setSaveBeforeFullSystemUiVisibility(normalPlayer.getSaveBeforeFullSystemUiVisibility());            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity2.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "  public ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {    View view = inflater.inflate(R.layout.fragment_note_item, viewGroup, false);    return new ViewHolder(view);  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/NoteAdapter.java", "stars": "3", "class": {"name": "NoteAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["ViewHolder", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onBindViewHolder(@NonNull ViewHolder viewHolder, int i) {    String id = notes.get(i).getId();    String title = notes.get(i).getTitle();    long milliseconds = notes.get(i).getTime().getSeconds() * 1000      + notes.get(i).getTime().getNanoseconds() / 1000000;    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd MMMM yyyy hh:mm a\");    String time = LocalDateTime.ofInstant(      Instant.ofEpochMilli(milliseconds),      ZoneId.systemDefault()    ).format(formatter);    viewHolder.noteId.setText(id);    viewHolder.noteTitle.setText(title);    viewHolder.noteSubtitle.setText(time);  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/NoteAdapter.java", "stars": "3", "class": {"name": "NoteAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getItemCount() {    return notes.size();  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/NoteAdapter.java", "stars": "3", "class": {"name": "NoteAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "apply", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ObservableTransformer<T,T>", "snippet": "    public static <T> ObservableTransformer<T, T> apply() {        return upstream ->                upstream.subscribeOn(Schedulers.io())                        .observeOn(AndroidSchedulers.mainThread());    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/rx/RxSchedulers.java", "stars": "1", "class": {"name": "RxSchedulers", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "applyIO", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ObservableTransformer<T,T>", "snippet": "    public static <T> ObservableTransformer<T, T> applyIO() {        return upstream ->                upstream.subscribeOn(Schedulers.io())                        .observeOn(Schedulers.io());    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/rx/RxSchedulers.java", "stars": "1", "class": {"name": "RxSchedulers", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setTokenUsuario", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTokenUsuario(String tokenUsuario) {\t\tthis.tokenUsuario = tokenUsuario;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTokenUsuario", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getTokenUsuario() {\t\treturn tokenUsuario;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountryCode", "params": ["CountryCode"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCountryCode(CountryCode countryCode) {\t\tthis.countryCode = countryCode;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTipoPagamento", "params": ["TipoPagamento"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTipoPagamento(TipoPagamento tipoPagamento) {\t\tthis.tipoPagamento = tipoPagamento;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCc", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCc(String cc) {\t\tthis.cc = cc;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCc", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getCc() {\t\treturn cc;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRestauranteId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setRestauranteId(Long restauranteId) {\t\tthis.restauranteId = restauranteId;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValor", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setValor(BigDecimal valor) {\t\tthis.valor = valor;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preencheuCC", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean preencheuCC() {\t\treturn StringUtils.hasLength(cc);\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCompraId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCompraId(Long compraId) {\t\tthis.compraId = compraId;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ccValido", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean ccValido() {\t\tAssert.state(preencheuCC(),\"este m\u00e9todo s\u00f3 deveria ser chamado para cc valido\");\t\treturn cc.length() == 3;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTipoPagamento", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TipoPagamento", "snippet": "\tpublic TipoPagamento getTipoPagamento() {\t\treturn tipoPagamento;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validaCc", "params": ["Errors"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void validaCc(Errors errors) {\t\tif (!tipoPagamento.aceitaOnline && this.preencheuCC()) {\t\t\terrors.rejectValue(\"cc\", null,\t\t\t\t\t\"N\u00e3o \u00e9 online ent\u00e3o n\u00e3o tem c\u00f3digo\");\t\t\treturn;\t\t}\t\t\t\tif (tipoPagamento.aceitaOnline && !this.preencheuCC()) {\t\t\terrors.rejectValue(\"cc\", null,\t\t\t\t\t\"Todo cart\u00e3o precisa do c\u00f3digo\");\t\t\treturn;\t\t}\t\t\t\tif (tipoPagamento.aceitaOnline && this.preencheuCC() && !this.ccValido()) {\t\t\terrors.rejectValue(\"cc\", null,\t\t\t\t\t\"Todo cart\u00e3o precisa do c\u00f3digo com preenchido com 3 digitos\");\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRestauranteId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "\tpublic Long getRestauranteId() {\t\treturn restauranteId;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toModel", "params": ["EntityManager", "UsuarioRepository"], "throws": null, "modifiers": ["public"], "return_type": "TentativaPagamento", "snippet": "\tpublic TentativaPagamento toModel(EntityManager manager,UsuarioRepository usuarioRepository) {\t\tRestaurante restaurante = manager.find(Restaurante.class, restauranteId);\t\tUsuario usuario = usuarioRepository.findByNome(tokenUsuario);\t\tTentativaPagamento tentativaPagamento = new TentativaPagamento(tipoPagamento,restaurante,valor,countryCode,usuario);\t\tif(StringUtils.hasLength(cc)) {\t\t\ttentativaPagamento.setCc(cc);\t\t}\t\t\t\treturn tentativaPagamento;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/validadores/NovoPagamentoForm.java", "stars": "9", "class": {"name": "NovoPagamentoForm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> toMap() {        Field[] fields = ReflectUtil.getFields(this.getClass());        Map<String, Object> params = new HashMap<>(fields.length);        for (Field field : fields) {            params.put(field.getName(), ReflectUtil.getFieldValue(this, field));        }        return params;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/model/FrontMatter.java", "stars": "2", "class": {"name": "FrontMatter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleJUnitVintageApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-junit-vintage/src/main/java/smoketest/SampleJUnitVintageApplication.java", "stars": "47572", "class": {"name": "SampleJUnitVintageApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unpackNested", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unpackNested(Map<String,Object> timeline) {        Map<String, Integer> casesMap = (Map<String, Integer>)timeline.get(\"cases\");        this.cases = casesMap.values().toArray(new Integer[casesMap.values().size()]);        Map<String, Integer> deathsMap = (Map<String, Integer>)timeline.get(\"deaths\");        this.deaths = deathsMap.values().toArray(new Integer[deathsMap.values().size()]);        Map<String, Integer> recoveredMap = (Map<String, Integer>)timeline.get(\"recovered\");        this.recovered = recoveredMap.values().toArray(new Integer[recoveredMap.values().size()]);    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unpackNestedCases", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unpackNestedCases(Map<String,Object> globalCases) {        this.cases = globalCases.values().toArray(new Integer[globalCases.values().size()]);    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unpackNestedDeaths", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unpackNestedDeaths(Map<String,Object> globalDeaths) {        this.deaths = globalDeaths.values().toArray(new Integer[globalDeaths.values().size()]);    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unpackNestedRecovered", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unpackNestedRecovered(Map<String,Object> globalRecovered) {        this.recovered = globalRecovered.values().toArray(new Integer[globalRecovered.values().size()]);    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCountry() {        return country;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountry", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountry(String country) {        this.country = country;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCases", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer[] getCases() {        return cases;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCases", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCases(Integer[] cases) {        this.cases = cases;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeaths", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer[] getDeaths() {        return deaths;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDeaths", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDeaths(Integer[] deaths) {        this.deaths = deaths;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRecovered", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer[] getRecovered() {        return recovered;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRecovered", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRecovered(Integer[] recovered) {        this.recovered = recovered;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/model/History.java", "stars": "3", "class": {"name": "History", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubmitUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSubmitUser() {        if (StringUtils.isEmpty(getJobProps().get(LinkisJobTypeConf.FLOW_SUBMIT_USER))){            return getJobProps().get(LinkisJobTypeConf.PROXY_USER);        }        return getJobProps().get(LinkisJobTypeConf.FLOW_SUBMIT_USER);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanCommonLinkisJob.java", "stars": "18", "class": {"name": "AzkabanCommonLinkisJob", "extends": "AbstractCommonLinkisJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUser() {        return getJobProps().get(LinkisJobTypeConf.PROXY_USER);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanCommonLinkisJob.java", "stars": "18", "class": {"name": "AzkabanCommonLinkisJob", "extends": "AbstractCommonLinkisJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getJobName() {        return getJobProps().get(LinkisJobTypeConf.JOB_ID);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanCommonLinkisJob.java", "stars": "18", "class": {"name": "AzkabanCommonLinkisJob", "extends": "AbstractCommonLinkisJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOne", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T getOne() {    return one;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/Binome.java", "stars": "15", "class": {"name": "Binome", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOne", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOne(T one) {    this.one = one;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/Binome.java", "stars": "15", "class": {"name": "Binome", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTwo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "U", "snippet": "  public U getTwo() {    return two;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/Binome.java", "stars": "15", "class": {"name": "Binome", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTwo", "params": ["U"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTwo(U two) {    this.two = two;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/Binome.java", "stars": "15", "class": {"name": "Binome", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return (one != null ? one.hashCode() : 0)        + (two != null ? two.hashCode() : 0);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/Binome.java", "stars": "15", "class": {"name": "Binome", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(final Object obj) {    if (obj instanceof Binome<?, ?>) {      Binome<?, ?> bin = (Binome<?, ?>) obj;      return one != null && one.equals(bin.getOne()) && two != null          && two.equals(bin.getTwo());    }    return super.equals(obj);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/Binome.java", "stars": "15", "class": {"name": "Binome", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"Binome [one=\" + one + \", two=\" + two + \"]\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/Binome.java", "stars": "15", "class": {"name": "Binome", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status getStatus() {    return this.status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/event/EventData.java", "stars": "18", "class": {"name": "EventData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNestedId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNestedId() {    return this.nestedId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/event/EventData.java", "stars": "18", "class": {"name": "EventData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkBookFieldValues", "params": ["BookEntry", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void checkBookFieldValues(BookEntry actualBook, String[] bookEntryFieldNames,            Object[] expectedFieldValues) {        Objects.requireNonNull(actualBook, \"Given book entry should not be null.\");        Objects.requireNonNull(expectedFieldValues, \"Given book field values should not be null.\");        if (bookEntryFieldNames.length != expectedFieldValues.length) {            throw new IllegalArgumentException(\"Given field values must have same length as field names.\");        }        for (int i = 0; i < bookEntryFieldNames.length; i++) {            String fieldName = bookEntryFieldNames[i];            Object expected = expectedFieldValues[i];            Object actual = FieldTestUtils.getPrivateField(actualBook, actualBook.getClass(), fieldName);            // handle array types specifically so assertArrayEquals can be used            if (actual instanceof String[]) {                String[] expectedSpecific = (String[]) expected;                String[] actualSpecific = (String[]) actual;                assertArrayEquals(fieldName + \" not initialised as expected.\", expectedSpecific, actualSpecific);            } else {                assertEquals(fieldName + \" not initialised as expected.\", expected, actual);            }        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryTestUtils.java", "stars": "6", "class": {"name": "BookEntryTestUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "add", "params": ["IWeight"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void add(IWeight abstractForm) {        synchronized (monitor) {            arr.add(abstractForm);            fireProductListener(new ProductEvent(this , abstractForm));        }    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/ProductStore.java", "stars": "2", "class": {"name": "ProductStore", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getArr", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IWeight", "snippet": "    public IWeight[] getArr() {        return arr.toArray(new IWeight[0]);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/ProductStore.java", "stars": "2", "class": {"name": "ProductStore", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "addProductListener", "params": ["IProductListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addProductListener(IProductListener listener) {        productListeners.add(listener);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/ProductStore.java", "stars": "2", "class": {"name": "ProductStore", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "removeProductListener", "params": ["IProductListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeProductListener(IProductListener listener) {        productListeners.remove(listener);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/ProductStore.java", "stars": "2", "class": {"name": "ProductStore", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "fireProductListener", "params": ["ProductEvent"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void fireProductListener(ProductEvent event) {        productListeners.forEach(listener -> listener.onProductEvent(event));    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/ProductStore.java", "stars": "2", "class": {"name": "ProductStore", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        final StringBuilder builder = new StringBuilder(\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u0432\u0438\u0440\u043e\u0431\u0456\u0432: \\n\");        for (IWeight iWeight : arr)            builder.append(iWeight).append(\"\\n\");        return builder.toString();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/ProductStore.java", "stars": "2", "class": {"name": "ProductStore", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "cacheManagerIsUsingHazelcast", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid cacheManagerIsUsingHazelcast() {\t\tassertThat(this.cacheManager).isInstanceOf(HazelcastCacheManager.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-hazelcast4/src/test/java/smoketest/hazelcast4/SampleHazelcast4ApplicationTests.java", "stars": "47572", "class": {"name": "SampleHazelcast4ApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "healthEndpointHasHazelcastContributor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid healthEndpointHasHazelcastContributor() {\t\tthis.webClient.get().uri(\"/actuator/health/hazelcast\").exchange().expectStatus().isOk().expectBody()\t\t\t\t.jsonPath(\"status\").isEqualTo(\"UP\").jsonPath(\"details.name\").isNotEmpty().jsonPath(\"details.uuid\")\t\t\t\t.isNotEmpty();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-hazelcast4/src/test/java/smoketest/hazelcast4/SampleHazelcast4ApplicationTests.java", "stars": "47572", "class": {"name": "SampleHazelcast4ApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "metricsEndpointHasCacheMetrics", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid metricsEndpointHasCacheMetrics() {\t\tthis.webClient.get().uri(\"/actuator/metrics/cache.entries\").exchange().expectStatus().isOk();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-hazelcast4/src/test/java/smoketest/hazelcast4/SampleHazelcast4ApplicationTests.java", "stars": "47572", "class": {"name": "SampleHazelcast4ApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createRsaPassword", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "KeyPair", "snippet": "    public static KeyPair createRsaPassword() {        KeyPair keyPair = null;        try {            //1\u3001\u83b7\u53d6keyPairGenerator,\u901a\u8fc7\u5de5\u5382\u6a21\u5f0f\u83b7\u53d6            KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");            //2\u3001\u8fdb\u884c\u521d\u59cb\u5316            //\u521d\u59cb\u5316\u65f6\u4f20\u9012\u7684keySize\u957f\u5ea6\u5fc5\u987b\u662f1024\u4f4d\u4ee5\u4e0a            //\u5b9a\u4e49\u4e86\u5bc6\u7801\u7684\u957f\u5ea6\u4e86            kpg.initialize(1024);            //3\u3001\u521d\u59cb\u5316\u540e\u5c31\u53ef\u4ee5\u83b7\u53d6KeyPair\uff08\u516c\u94a5\u79c1\u94a5\u5bf9\u513f\uff09            keyPair = kpg.generateKeyPair();            //4\u3001\u5206\u522b\u83b7\u53d6\u516c\u94a5\u79c1\u94a5            // \u83b7\u53d6\u79c1\u94a5//            aPrivate = keyPair.getPrivate();            // \u83b7\u53d6\u516c\u94a5//            aPublic = keyPair.getPublic();            //\u5bc6\u7801\u5f88\u957f\uff0c\u9700\u8981\u5b58\u50a8\uff0c\u5b58\u50a8SharePreference\u6216\u8005File\u4e2d        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        }        return keyPair;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/RsaEncryptUtils.java", "stars": "1", "class": {"name": "RsaEncryptUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rsaEncode", "params": ["String", "PrivateKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String rsaEncode(String content, PrivateKey aPrivate) {        byte[] data = content.getBytes();        if (aPrivate != null) {            if (data != null && data.length > 0) {                try {                    //1\u3001\u52a0\u5bc6\u5f15\u64ce                    Cipher cipher = Cipher.getInstance(\"RSA\");                    //2\u3001\u5bf9Cipher\u8fdb\u884c\u521d\u59cb\u5316                    cipher.init(Cipher.ENCRYPT_MODE, aPrivate);                    //3\u3001\u52a0\u5bc6\u6570\u636e                    return new String(Base64.encode(cipher.doFinal(data), Base64.NO_WRAP));                } catch (NoSuchAlgorithmException e) {                    e.printStackTrace();                } catch (NoSuchPaddingException e) {                    e.printStackTrace();                } catch (InvalidKeyException e) {                    e.printStackTrace();                } catch (BadPaddingException e) {                    e.printStackTrace();                } catch (IllegalBlockSizeException e) {                    e.printStackTrace();                }            }        }        return \"\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/RsaEncryptUtils.java", "stars": "1", "class": {"name": "RsaEncryptUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rsaDecode", "params": ["String", "PublicKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String rsaDecode(String content, PublicKey aPublic) {        //\u83b7\u53d6\u8981\u89e3\u5bc6\u7684\u6570\u636e        byte[] data = Base64.decode(content, Base64.NO_WRAP);        if (aPublic != null) {            if (data != null && data.length > 0) {                try {                    //1\u3001\u83b7\u53d6Cipher\u5f15\u64ce                    Cipher cipher = Cipher.getInstance(\"RSA\");                    //2\u3001\u521d\u59cb\u5316cipher                    cipher.init(Cipher.DECRYPT_MODE, aPublic);                    //3\u3001\u89e3\u5bc6\u6570\u636e                    return new String(cipher.doFinal(data));                } catch (NoSuchAlgorithmException e) {                    e.printStackTrace();                } catch (NoSuchPaddingException e) {                    e.printStackTrace();                } catch (InvalidKeyException e) {                    e.printStackTrace();                } catch (BadPaddingException e) {                    e.printStackTrace();                } catch (IllegalBlockSizeException e) {                    e.printStackTrace();                }            }        }        return \"\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/RsaEncryptUtils.java", "stars": "1", "class": {"name": "RsaEncryptUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tnew SpringApplicationBuilder().sources(SampleCacheApplication.class).profiles(\"app\").run(args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-cache/src/main/java/smoketest/cache/SampleCacheApplication.java", "stars": "47572", "class": {"name": "SampleCacheApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldDemonstrateGenericTokenReplacement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateGenericTokenReplacement() {    GenericTokenParser parser = new GenericTokenParser(\"${\", \"}\", new VariableTokenHandler(new HashMap<String, String>() {      {        put(\"first_name\", \"James\");        put(\"initial\", \"T\");        put(\"last_name\", \"Kirk\");        put(\"var{with}brace\", \"Hiya\");        put(\"\", \"\");      }    }));    assertEquals(\"James T Kirk reporting.\", parser.parse(\"${first_name} ${initial} ${last_name} reporting.\"));    assertEquals(\"Hello captain James T Kirk\", parser.parse(\"Hello captain ${first_name} ${initial} ${last_name}\"));    assertEquals(\"James T Kirk\", parser.parse(\"${first_name} ${initial} ${last_name}\"));    assertEquals(\"JamesTKirk\", parser.parse(\"${first_name}${initial}${last_name}\"));    assertEquals(\"{}JamesTKirk\", parser.parse(\"{}${first_name}${initial}${last_name}\"));    assertEquals(\"}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/parsing/GenericTokenParserTest.java", "stars": "15", "class": {"name": "GenericTokenParserTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shallNotInterpolateSkippedVaiables", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shallNotInterpolateSkippedVaiables() {    GenericTokenParser parser = new GenericTokenParser(\"${\", \"}\", new VariableTokenHandler(new HashMap<>()));    assertEquals(\"${skipped} variable\", parser.parse(\"\\\\${skipped} variable\"));    assertEquals(\"This is a ${skipped} variable\", parser.parse(\"This is a \\\\${skipped} variable\"));    assertEquals(\"null ${skipped} variable\", parser.parse(\"${skipped} \\\\${skipped} variable\"));    assertEquals(\"The null is ${skipped} variable\", parser.parse(\"The ${skipped} is \\\\${skipped} variable\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/parsing/GenericTokenParserTest.java", "stars": "15", "class": {"name": "GenericTokenParserTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldParseFastOnJdk7u6", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldParseFastOnJdk7u6() {    Assertions.assertTimeout(Duration.ofMillis(1000), () -> {      // issue #760      GenericTokenParser parser = new GenericTokenParser(\"${\", \"}\", new VariableTokenHandler(new HashMap<String, String>() {        {          put(\"first_name\", \"James\");          put(\"initial\", \"T\");          put(\"last_name\", \"Kirk\");          put(\"\", \"\");        }      }));      StringBuilder input = new StringBuilder();      for (int i = 0; i < 10000; i++) {        input.append(\"${first_name} ${initial} ${last_name} reporting. \");      }      StringBuilder expected = new StringBuilder();      for (int i = 0; i < 10000; i++) {        expected.append(\"James T Kirk reporting. \");      }      assertEquals(expected.toString(), parser.parse(input.toString()));    });  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/parsing/GenericTokenParserTest.java", "stars": "15", "class": {"name": "GenericTokenParserTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "handleToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String handleToken(String content) {      return variables.get(content);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/parsing/GenericTokenParserTest.java", "stars": "15", "class": {"name": "VariableTokenHandler", "extends": null, "implements": ["TokenHandler"], "modifiers": ["public", "static"]}}, {"method_name": "isSupportStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSupportStream() {            return true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.originConfig = this.getPluginJobConf();            this.pattern = new HashMap<String, Pattern>();            this.isRegexPath = new HashMap<String, Boolean>();            this.validateParameter();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "validateParameter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void validateParameter() {            // Compatible with the old version, path is a string before            String pathInString = this.originConfig.getNecessaryValue(Key.PATH,                    TxtFileReaderErrorCode.REQUIRED_VALUE);            if (StringUtils.isBlank(pathInString)) {                throw DataXException.asDataXException(                        TxtFileReaderErrorCode.REQUIRED_VALUE,                        \"\u60a8\u9700\u8981\u6307\u5b9a\u5f85\u8bfb\u53d6\u7684\u6e90\u76ee\u5f55\u6216\u6587\u4ef6\");            }            if (!pathInString.startsWith(\"[\") && !pathInString.endsWith(\"]\")) {                path = new ArrayList<>();                path.add(pathInString);            } else {                path = this.originConfig.getList(Key.PATH, String.class);                if (null == path || path.size() == 0) {                    throw DataXException.asDataXException(                            TxtFileReaderErrorCode.REQUIRED_VALUE,                            \"\u60a8\u9700\u8981\u6307\u5b9a\u5f85\u8bfb\u53d6\u7684\u6e90\u76ee\u5f55\u6216\u6587\u4ef6\");                }                for(String eachPath : path){                    if(!eachPath.startsWith(\"/\")){                        String message = String.format(\"\u8bf7\u68c0\u67e5\u53c2\u6570path:[%s],\u9700\u8981\u914d\u7f6e\u4e3a\u7edd\u5bf9\u8def\u5f84\", eachPath);                        LOG.error(message);                        throw DataXException.asDataXException(TxtFileReaderErrorCode.ILLEGAL_VALUE, message);                    }                    if(!new File(eachPath).exists()){                        String message = String.format(\"cannot find the path: [%s], please check your configuration\", eachPath);                        LOG.error(message);                        throw DataXException.asDataXException(TxtFileReaderErrorCode.PATH_NOT_FOUND, message);                    }                }            }            String encoding = this.originConfig                    .getString(                            com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING,                            com.alibaba.datax.plugin.unstructuredstorage.reader.Constant.DEFAULT_ENCODING);            if (StringUtils.isBlank(encoding)) {                this.originConfig                        .set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING,                                com.alibaba.datax.plugin.unstructuredstorage.reader.Constant.DEFAULT_ENCODING);            } else {                try {                    encoding = encoding.trim();                    this.originConfig                            .set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING,                                    encoding);                    Charsets.toCharset(encoding);                } catch (UnsupportedCharsetException uce) {                    throw DataXException.asDataXException(                            TxtFileReaderErrorCode.ILLEGAL_VALUE,                            String.format(\"\u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u7f16\u7801\u683c\u5f0f : [%s]\", encoding), uce);                } catch (Exception e) {                    throw DataXException.asDataXException(                            TxtFileReaderErrorCode.CONFIG_INVALID_EXCEPTION,                            String.format(\"\u7f16\u7801\u914d\u7f6e\u5f02\u5e38, \u8bf7\u8054\u7cfb\u6211\u4eec: %s\", e.getMessage()),                            e);                }            }            // column: 1. index type 2.value type 3.when type is Date, may have            // format            List<Configuration> columns = this.originConfig                    .getListConfiguration(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN);            // handle [\"*\"]            if (null != columns && 1 == columns.size()) {                String columnsInStr = columns.get(0).toString();                if (\"\\\"*\\\"\".equals(columnsInStr) || \"'*'\".equals(columnsInStr)) {                    this.originConfig                            .set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN,                                    null);                    columns = null;                }            }            if (null != columns && columns.size() != 0) {                for (Configuration eachColumnConf : columns) {                    eachColumnConf                            .getNecessaryValue(                                    com.alibaba.datax.plugin.unstructuredstorage.reader.Key.TYPE,                                    TxtFileReaderErrorCode.REQUIRED_VALUE);                    Integer columnIndex = eachColumnConf                            .getInt(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.INDEX);                    String columnValue = eachColumnConf                            .getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.VALUE);                    if (null == columnIndex && null == columnValue) {                        throw DataXException.asDataXException(                                TxtFileReaderErrorCode.NO_INDEX_VALUE,                                \"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86type, \u5219\u81f3\u5c11\u9700\u8981\u914d\u7f6e index \u6216 value\");                    }                    if (null != columnIndex && null != columnValue) {                        throw DataXException.asDataXException(                                TxtFileReaderErrorCode.MIXED_INDEX_VALUE,                                \"\u60a8\u6df7\u5408\u914d\u7f6e\u4e86index, value, \u6bcf\u4e00\u5217\u540c\u65f6\u4ec5\u80fd\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\");                    }                    if (null != columnIndex && columnIndex < 0) {                        throw DataXException.asDataXException(                                TxtFileReaderErrorCode.ILLEGAL_VALUE, String                                        .format(\"index\u9700\u8981\u5927\u4e8e\u7b49\u4e8e0, \u60a8\u914d\u7f6e\u7684index\u4e3a[%s]\",                                                columnIndex));                    }                }            }            // only support compress types            String compress = this.originConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COMPRESS);            if (StringUtils.isBlank(compress)) {                this.originConfig                        .set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COMPRESS,                                null);            } else {                Set<String> supportedCompress = Sets                        .newHashSet(\"gzip\", \"bzip2\", \"zip\");                compress = compress.toLowerCase().trim();                if (!supportedCompress.contains(compress)) {                    throw DataXException                            .asDataXException(                                    TxtFileReaderErrorCode.ILLEGAL_VALUE,                                    String.format(                                            \"\u4ec5\u652f\u6301 gzip, bzip2, zip \u6587\u4ef6\u538b\u7f29\u683c\u5f0f , \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u6587\u4ef6\u538b\u7f29\u683c\u5f0f: [%s]\",                                            compress));                }                this.originConfig                        .set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COMPRESS,                                compress);            }            if(getTransportType() == TransportType.RECORD) {                String delimiterInStr = this.originConfig                        .getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.FIELD_DELIMITER, \",\");                // warn: if have, length must be one                if (null != delimiterInStr && 1 != delimiterInStr.length()) {                    throw DataXException.asDataXException(                            UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                            String.format(\"\u4ec5\u4ec5\u652f\u6301\u5355\u5b57\u7b26\u5207\u5206, \u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3a : [%s]\",                                    delimiterInStr));                }            }            this.incrBeginTime = this.originConfig.getLong(INCR_BEGIN_TIME, 0);            this.incrEndTime = this.originConfig.getLong(INCR_END_TIME, Calendar.getInstance().getTimeInMillis());        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {            LOG.debug(\"prepare() begin...\");            // warn:make sure this regex string            // warn:no need trim            for (String eachPath : this.path) {                String regexString = eachPath.replace(\"*\", \".*\").replace(\"?\",                        \".?\");                Pattern patt = Pattern.compile(regexString);                this.pattern.put(eachPath, patt);                this.sourceFiles = this.buildSourceTargets();            }            LOG.info(String.format(\"\u60a8\u5373\u5c06\u8bfb\u53d6\u7684\u6587\u4ef6\u6570\u4e3a: [%s]\", this.sourceFiles.size()));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(int adviceNumber) {            LOG.debug(\"split() begin...\");            List<Configuration> readerSplitConfigs = new ArrayList<Configuration>();            // warn:\u6bcf\u4e2aslice\u62d6\u4e14\u4ec5\u62d6\u4e00\u4e2a\u6587\u4ef6,            // int splitNumber = adviceNumber;            int splitNumber = this.sourceFiles.size();            if (0 == splitNumber) {                return new ArrayList<>();            }            List<List<PathMeta>> splitedSourceFiles = this.splitSourceFiles(                    this.sourceFiles, splitNumber);            for (List<PathMeta> files : splitedSourceFiles) {                Configuration splitedConfig = this.originConfig.clone();                splitedConfig.set(Constant.SOURCE_FILES, files);                readerSplitConfigs.add(splitedConfig);            }            LOG.debug(\"split() ok and end...\");            return readerSplitConfigs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildSourceTargets", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<PathMeta>", "snippet": "        private List<PathMeta> buildSourceTargets() {            //0: absolute path, 1: relative path            List<PathMeta> sourceTargets = new ArrayList<>();            for (String eachPath : this.path) {                // for each path                Set<String> toBeReadFiles = new HashSet<>();                int endMark;                for (endMark = 0; endMark < eachPath.length(); endMark++) {                    if ('*' == eachPath.charAt(endMark)                            || '?' == eachPath.charAt(endMark)) {                        this.isRegexPath.put(eachPath, true);                        break;                    }                }                String parentDirectory;                if (BooleanUtils.isTrue(this.isRegexPath.get(eachPath))) {                    int lastDirSeparator = eachPath.substring(0, endMark)                            .lastIndexOf(IOUtils.DIR_SEPARATOR);                    parentDirectory = eachPath.substring(0,                            lastDirSeparator + 1);                } else {                    this.isRegexPath.put(eachPath, false);                    parentDirectory = eachPath;                }                this.buildSourceTargetsEathPath(eachPath, parentDirectory,                        toBeReadFiles);                toBeReadFiles.forEach( toBeReadFile ->{                    boolean toBeRead = true;                    if(getTransportType() == TransportType.STREAM){                        File localFile = new File(toBeReadFile);                        if(localFile.lastModified() <= incrBeginTime                                || localFile.lastModified() > incrEndTime){                            toBeRead = false;                        }                    }                    if(toBeRead) {                        String relativePath;                        if (toBeReadFile.equals(parentDirectory)) {                            relativePath = parentDirectory.substring(parentDirectory                                    .lastIndexOf(IOUtils.DIR_SEPARATOR));                        } else {                            relativePath = toBeReadFile.substring(parentDirectory.length());                        }                        sourceTargets.add(new PathMeta(toBeReadFile , relativePath));                    }                });            }            return sourceTargets;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildSourceTargetsEathPath", "params": ["String", "String", "Set<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void buildSourceTargetsEathPath(String regexPath,                                                String parentDirectory, Set<String> toBeReadFiles) {            // \u68c0\u6d4b\u76ee\u5f55\u662f\u5426\u5b58\u5728\uff0c\u9519\u8bef\u60c5\u51b5\u66f4\u660e\u786e            try {                File dir = new File(parentDirectory);                boolean isExists = dir.exists();                if (!isExists) {                    String message = String.format(\"\u60a8\u8bbe\u5b9a\u7684\u76ee\u5f55\u4e0d\u5b58\u5728 : [%s]\",                            parentDirectory);                    LOG.error(message);                    throw DataXException.asDataXException(                            TxtFileReaderErrorCode.FILE_NOT_EXISTS, message);                }            } catch (SecurityException se) {                String message = String.format(\"\u60a8\u6ca1\u6709\u6743\u9650\u67e5\u770b\u76ee\u5f55 : [%s]\",                        parentDirectory);                LOG.error(message);                throw DataXException.asDataXException(                        TxtFileReaderErrorCode.SECURITY_NOT_ENOUGH, message);            }            directoryRover(regexPath, parentDirectory, toBeReadFiles);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "directoryRover", "params": ["String", "String", "Set<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void directoryRover(String regexPath, String parentDirectory,                                    Set<String> toBeReadFiles) {            File directory = new File(parentDirectory);            if(directory.getName().startsWith(\".\")){                //skip hidden files                return;            }            // is a normal file            if (!directory.isDirectory()) {                if (this.isTargetFile(regexPath, directory.getAbsolutePath())) {                    toBeReadFiles.add(parentDirectory);                    LOG.info(String.format(                            \"add file [%s] as a candidate to be read.\",                            parentDirectory));                }            } else {                // \u662f\u76ee\u5f55                try {                    // warn:\u5bf9\u4e8e\u6ca1\u6709\u6743\u9650\u7684\u76ee\u5f55,listFiles \u8fd4\u56denull\uff0c\u800c\u4e0d\u662f\u629b\u51faSecurityException                    File[] files = directory.listFiles();                    if (null != files) {                        for (File subFileNames : files) {                            directoryRover(regexPath,                                    subFileNames.getAbsolutePath(),                                    toBeReadFiles);                        }                    } else {                        // warn: \u5bf9\u4e8e\u6ca1\u6709\u6743\u9650\u7684\u6587\u4ef6\uff0c\u662f\u76f4\u63a5throw DataXException                        String message = String.format(\"\u60a8\u6ca1\u6709\u6743\u9650\u67e5\u770b\u76ee\u5f55 : [%s]\",                                directory);                        LOG.error(message);                        throw DataXException.asDataXException(                                TxtFileReaderErrorCode.SECURITY_NOT_ENOUGH,                                message);                    }                } catch (SecurityException e) {                    String message = String.format(\"\u60a8\u6ca1\u6709\u6743\u9650\u67e5\u770b\u76ee\u5f55 : [%s]\",                            directory);                    LOG.error(message);                    throw DataXException.asDataXException(                            TxtFileReaderErrorCode.SECURITY_NOT_ENOUGH,                            message, e);                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isTargetFile", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "        private boolean isTargetFile(String regexPath, String absoluteFilePath) {            if (this.isRegexPath.get(regexPath)) {                return this.pattern.get(regexPath).matcher(absoluteFilePath)                        .matches();            } else {                return true;            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "splitSourceFiles", "params": ["List<T>", "int"], "throws": null, "modifiers": ["private"], "return_type": "List<List>", "snippet": "        private <T> List<List<T>> splitSourceFiles(final List<T> sourceList,                                                   int adviceNumber) {            List<List<T>> splitedList = new ArrayList<List<T>>();            int averageLength = sourceList.size() / adviceNumber;            averageLength = averageLength == 0 ? 1 : averageLength;            for (int begin = 0, end = 0; begin < sourceList.size(); begin = end) {                end = begin + averageLength;                if (end > sourceList.size()) {                    end = sourceList.size();                }                splitedList.add(sourceList.subList(begin, end));            }            return splitedList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.readerSliceConfig = this.getPluginJobConf();            this.sourceFiles = this.readerSliceConfig.getList(                    Constant.SOURCE_FILES, Object.class);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startRead", "params": ["RecordSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startRead(RecordSender recordSender) {            LOG.debug(\"start read source files...\");            for (Object sourceFile : this.sourceFiles) {                PathMeta pathMeta = JSONObject.parseObject(JSON.toJSONString(sourceFile), PathMeta.class);                String fileName = pathMeta.getAbsolute();                LOG.info(String.format(\"reading file : [%s]\", fileName));                InputStream inputStream;                try {                    inputStream = new FileInputStream(fileName);                    UnstructuredStorageReaderUtil.readFromStream(inputStream,                            fileName, this.readerSliceConfig, recordSender,                            this.getTaskPluginCollector());                    recordSender.flush();                } catch (FileNotFoundException e) {                    // warn: sock \u6587\u4ef6\u65e0\u6cd5read,\u80fd\u5f71\u54cd\u6240\u6709\u6587\u4ef6\u7684\u4f20\u8f93,\u9700\u8981\u7528\u6237\u81ea\u5df1\u4fdd\u8bc1                    String message = String                            .format(\"\u627e\u4e0d\u5230\u5f85\u8bfb\u53d6\u7684\u6587\u4ef6 : [%s]\", fileName);                    LOG.error(message);                    throw DataXException.asDataXException(                            TxtFileReaderErrorCode.OPEN_FILE_ERROR, message);                }            }            LOG.debug(\"end read source files...\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startRead", "params": ["ChannelOutput"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startRead(ChannelOutput channelOutput) {            LOG.info(\"start read source files to stream channel...\");            for(Object sourceFile: this.sourceFiles){                PathMeta pathMeta = JSONObject.parseObject(JSON.toJSONString(sourceFile), PathMeta.class);                String absolutePath = pathMeta.getAbsolute();                String relativePath = pathMeta.getRelative();                LOG.info(String.format(\"reading file : [%s]\", absolutePath));                InputStream inputStream;                try{                    File file = new File(absolutePath);                    StreamMeta streamMeta = new StreamMeta();                    streamMeta.setName(file.getName());                    streamMeta.setAbsolutePath(absolutePath);                    streamMeta.setRelativePath(relativePath);                    OutputStream outputStream = channelOutput.createStream(streamMeta,readerSliceConfig.getString(                            com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING,                            com.alibaba.datax.plugin.unstructuredstorage.reader.Constant.DEFAULT_ENCODING));                    inputStream = new FileInputStream(file);                    UnstructuredStorageReaderUtil.readFromStream(inputStream, outputStream,                            this.readerSliceConfig);                }catch(FileNotFoundException e){                    String message = String.format(\"\u627e\u4e0d\u5230\u5f85\u8bfb\u53d6\u7684\u6587\u4ef6 : [%s]\", absolutePath);                    LOG.error(message);                    throw DataXException.asDataXException(TxtFileReaderErrorCode.OPEN_FILE_ERROR, message);                }catch(IOException e){                    throw DataXException.asDataXException(FrameworkErrorCode.CHANNEL_STREAM_ERROR, e);                }            }            LOG.info(\"end read source files to stream channel...\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilereader/src/main/java/com/alibaba/datax/plugin/reader/txtfilereader/TxtFileReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "updateLeasing", "params": ["UpdatingLeasingDTO"], "throws": ["BadRequestException"], "modifiers": ["public"], "return_type": "ResponseEntity<LeasingDTO>", "snippet": "    public ResponseEntity<LeasingDTO> updateLeasing(@ApiParam(value = \"leasing data to update\")                                                    @NotNull @RequestBody @Valid UpdatingLeasingDTO leasingDTO) throws BadRequestException {        log.debug(\"REST request to update Leasing : {}\", leasingDTO);        if (leasingDTO.getId() == null) {            throw new BadRequestException(GardleErrorKey.LEASING_INVALID_ID);        }        LeasingDTO result = leasingService.updateLeasing(leasingDTO);        return ResponseEntity.ok()            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, leasingDTO.getId().toString()))            .body(result);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/LeasingController.java", "stars": "2", "class": {"name": "LeasingController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasings", "params": ["LeasingCriteria", "Pageable", "MultiValueMap<String,String>", "UriComponentsBuilder"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Page>", "snippet": "    public ResponseEntity<Page<LeasingDTO>> getAllLeasings(LeasingCriteria criteria,                                                           Pageable pageable,                                                           @RequestParam MultiValueMap<String, String> queryParams,                                                           UriComponentsBuilder uriBuilder) {        log.debug(\"REST request to get Leasings by criteria: {}\", criteria);        Page<LeasingDTO> page = leasingQueryService.findByCriteria(criteria, pageable);        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(uriBuilder.queryParams(queryParams), page);        return ResponseEntity.ok().headers(headers).body(page);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/LeasingController.java", "stars": "2", "class": {"name": "LeasingController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasing", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<LeasingDTO>", "snippet": "    public ResponseEntity<LeasingDTO> getLeasing(@ApiParam(value = \"leasing to get\", required = true) @PathVariable Long id) {        log.debug(\"REST request to get Leasing : {}\", id);        Optional<LeasingDTO> leasingDTO = leasingService.findOne(id);        return ResponseUtil.wrapOrNotFound(leasingDTO);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/LeasingController.java", "stars": "2", "class": {"name": "LeasingController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasedDateRanges", "params": ["Long", "Instant", "Instant"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<List>", "snippet": "    public ResponseEntity<List<LeasingDateRangeDTO>> getLeasedDateRanges(@ApiParam(value = \"Gardenfield Id for which the leased date ranges should be returned\", required = true)                                                                         @PathVariable Long gardenFieldId,                                                                         @ApiParam(value = \"from boundary for ranges\")                                                                         @RequestParam(required = false) Instant from,                                                                         @ApiParam(value = \"to boundary for ranges\")                                                                         @RequestParam(required = false) Instant to) {        log.debug(\"REST request to get leased date ranges : {}\", gardenFieldId);        List<LeasingDateRangeDTO> leasingDateRanges = leasingService.getLeasedDateRanges(gardenFieldId, from, to);        return ResponseEntity.ok().body(leasingDateRanges);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/LeasingController.java", "stars": "2", "class": {"name": "LeasingController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onGlobalLayout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onGlobalLayout ()\t{\t\tn_onGlobalLayout ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericGlobalLayoutListener.java", "stars": "2", "class": {"name": "GenericGlobalLayoutListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onGlobalLayout", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onGlobalLayout ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericGlobalLayoutListener.java", "stars": "2", "class": {"name": "GenericGlobalLayoutListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericGlobalLayoutListener.java", "stars": "2", "class": {"name": "GenericGlobalLayoutListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericGlobalLayoutListener.java", "stars": "2", "class": {"name": "GenericGlobalLayoutListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        bindService(new Intent(this, CompassService.class), mConnection, 0);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassMenuActivity.java", "stars": "74", "class": {"name": "CompassMenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        mResumed = true;        openOptionsMenu();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassMenuActivity.java", "stars": "74", "class": {"name": "CompassMenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        mResumed = false;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassMenuActivity.java", "stars": "74", "class": {"name": "CompassMenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "openOptionsMenu", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openOptionsMenu() {        if (mResumed && mCompassService != null) {            super.openOptionsMenu();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassMenuActivity.java", "stars": "74", "class": {"name": "CompassMenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.compass, menu);        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassMenuActivity.java", "stars": "74", "class": {"name": "CompassMenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.read_aloud:                mCompassService.readHeadingAloud();                return true;            case R.id.stop:                stopService(new Intent(this, CompassService.class));                return true;            default:                return super.onOptionsItemSelected(item);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassMenuActivity.java", "stars": "74", "class": {"name": "CompassMenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onOptionsMenuClosed", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onOptionsMenuClosed(Menu menu) {        super.onOptionsMenuClosed(menu);        unbindService(mConnection);        // We must call finish() from this method to ensure that the activity ends either when an        // item is selected from the menu or when the menu is dismissed by swiping down.        finish();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassMenuActivity.java", "stars": "74", "class": {"name": "CompassMenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        System.out.println(Thread.currentThread().getName() + \" Start. Time = \" + new Date());        processCommand();        System.out.println(Thread.currentThread().getName() + \" End. Time = \" + new Date());    }", "url": "https://raw.githubusercontent.com/Snailclimb/JavaGuide/master/code/java/ThreadPoolExecutorDemo/src/threadPoolExecutor/MyRunnable.java", "stars": "78246", "class": {"name": "MyRunnable", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "processCommand", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processCommand() {        try {            Thread.sleep(5000);        } catch (InterruptedException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/Snailclimb/JavaGuide/master/code/java/ThreadPoolExecutorDemo/src/threadPoolExecutor/MyRunnable.java", "stars": "78246", "class": {"name": "MyRunnable", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return this.command;    }", "url": "https://raw.githubusercontent.com/Snailclimb/JavaGuide/master/code/java/ThreadPoolExecutorDemo/src/threadPoolExecutor/MyRunnable.java", "stars": "78246", "class": {"name": "MyRunnable", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(SquareDelegate.measureWidth(widthMeasureSpec, heightMeasureSpec),                SquareDelegate.measureHeight(widthMeasureSpec, heightMeasureSpec));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/square/SquareFrameLayout.java", "stars": "1", "class": {"name": "SquareFrameLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDepartment", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDepartment() {        return department;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multiple_discriminator/Director.java", "stars": "15", "class": {"name": "Director", "extends": "Employee", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDepartment", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDepartment(String department) {        this.department = department;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multiple_discriminator/Director.java", "stars": "15", "class": {"name": "Director", "extends": "Employee", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() throws Exception {        log.info(\"\u7528\u6237\u7684\u4fe1\u606f\");        //\u521d\u59cb\u5316\u6e38\u620f\u7684\u57fa\u7840\u914d\u7f6e        this.detection();        //\u5f00\u542f\u5b9a\u65f6\u7ebf\u7a0b        scheduledThread.start();        //\u542f\u52a8\u670d\u52a1\u5668        nettyServer.startNetty(HallInitializer.baseLocalMemory.getServerInfo());    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/initializer/NettyServerInitializer.java", "stars": "1", "class": {"name": "NettyServerInitializer", "extends": "BaseLocalMemory", "implements": ["AppInitializer"], "modifiers": ["public"]}}, {"method_name": "order", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int order() {        return Const.Number.FOUR;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/initializer/NettyServerInitializer.java", "stars": "1", "class": {"name": "NettyServerInitializer", "extends": "BaseLocalMemory", "implements": ["AppInitializer"], "modifiers": ["public"]}}, {"method_name": "detection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void detection() {        //\u521d\u59cb\u5316\u6e38\u620f\u4fe1\u606f        Map<Integer, GameConfig> map = HallInitializer.baseLocalMemory.getGameConfigMap();        Map<Integer, HallGame> hallGameMap = new HashMap<>(16);        for (Map.Entry<Integer, GameConfig> integerGameConfigEntry : map.entrySet()) {            Integer channel = integerGameConfigEntry.getKey();            GameConfig gameConfig = integerGameConfigEntry.getValue();            if(Objects.nonNull(gameConfig)) {                List<GameConfig.Room> roomList = gameConfig.getRoom();                if(!CollectionUtils.isEmpty(roomList) || roomList.size()>Const.Number.ZERO) {                    Map<Integer, Room> roomMap = roomList.stream().collect(Collectors.toMap(GameConfig.Room::getGameNo, dto -> Room.builder().baseScore(dto.getBaseScore())                            .coinLimit(dto.getCoinLimit())                            .gameNo(dto.getGameNo())                            .id(dto.getId())                            .maxRole(Const.Number.ONE_QIAN)                            .currentRole(Const.Number.ZERO)                            .name(dto.getName())                            .revenuePerc(dto.getRevenuePerc())                            .state(dto.getStatus())                            .tableMap(new HashMap<>(16))                            .winPerc(dto.getWinPerc()).build()));                    HallGame hallGame = HallGame.builder().channel(channel)                            .gameId(gameConfig.getGameId())                            .gameJack(HallInitializer.baseLocalMemory.getGameJackMap().get(channel))                            .roomMap(roomMap).build();                    hallGameMap.put(channel,hallGame);                }            }        }        HallInitializer.baseLocalMemory.setHallGameMgr(HallGameMgr.builder().hallGameMap(hallGameMap).playerList(new ArrayList<>()).build());    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/initializer/NettyServerInitializer.java", "stars": "1", "class": {"name": "NettyServerInitializer", "extends": "BaseLocalMemory", "implements": ["AppInitializer"], "modifiers": ["public"]}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        if(conf.enable() && !request.getRequestURI().equals(conf.authLoginUrl())){            if(null == authTokenService){                authTokenService = AppUtil.getBean(AuthTokenService.class);            }            String token = AppUtil.getCookieValue(request, AuthConstraints.DEFAULT_SSO_COOKIE);            if(StringUtils.isBlank(token)) {                LOGGER.info(\"cannot find token, sendRedirect..., request path: {}\", request.getRequestURI());                sendRedirect(request, response);                return false;            }            boolean ok = false;            boolean fresh = false;            try {                ok = authTokenHelper.validate(token, conf.tokenInvalid());            }catch(ExpireTimeOutException e){//should refresh the token by ticket                token = refreshToken(token);                LOGGER.info(\"trigger Refresh the token by ticket\");                fresh = true;                ok = authTokenHelper.validate(token, conf.tokenInvalid());                LOGGER.info(\"finish Refresh the token\");            }            if (!ok) {                LOGGER.info(\"validate auth token failed, sendRedirect...,  request path: {}\", request.getRequestURI());                sendRedirect(request, response);            }else if(fresh){                Cookie cookie = new Cookie(AuthConstraints.DEFAULT_SSO_COOKIE, token);                cookie.setHttpOnly(true);                cookie.setSecure(false);                cookie.setMaxAge(86400);                cookie.setPath(\"/\");                response.addCookie(cookie);            }            return ok;        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/interceptors/AuthenticationInterceptor.java", "stars": "23", "class": {"name": "AuthenticationInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "sendRedirect", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendRedirect(HttpServletRequest request, HttpServletResponse response) throws IOException {        StringBuilder redirectBuilder = new StringBuilder();        String loginUrl = conf.authLoginUrl();        redirectBuilder.append(loginUrl);        if(conf.authCasSwitch()) {            //Append CAS parameters            redirectBuilder.append(\"?\")                    .append(SSO_REDIRECT_SERVICE + \"=\").append(URLEncoder.encode(conf.gatewayUrl(), \"UTF-8\"));            if (StringUtils.isNotBlank(conf.casSystemId())) {                redirectBuilder.append(\"&\" + SSO_REDIRECT_SYSTEMID + \"=\").append(conf.casSystemId());            }        }        //Jump to gateway url        sendRedirect(request, response, redirectBuilder.toString());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/interceptors/AuthenticationInterceptor.java", "stars": "23", "class": {"name": "AuthenticationInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "sendRedirect", "params": ["HttpServletRequest", "HttpServletResponse", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendRedirect(HttpServletRequest request, HttpServletResponse response, String redirectUrl) throws IOException {        if (AppUtil.isAjax(request)) {            response.setContentType(\"application/json;charset=UTF-8\");            response.setStatus(200);            Response<Object> resp = new Response<>();            resp.setCode(302);            Map<String, Object> map = new HashMap<>(16);            map.put(\"redirect\", redirectUrl);            resp.setData(map);            final PrintWriter writer = response.getWriter();            writer.write(Objects.requireNonNull(Json.toJson(resp, Response.class)));            writer.flush();        } else {            response.sendRedirect(redirectUrl);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/interceptors/AuthenticationInterceptor.java", "stars": "23", "class": {"name": "AuthenticationInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "refreshToken", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String refreshToken(String token){        if(null != authTokenService) {            try {                //get gateway address from token                if(conf.authCasSwitch()) {                    String hostPort = authTokenHelper.getAuthHeader(token)                            .getOrDefault(AuthConstraints.HOST_PORT, \"\");                    if (StringUtils.isNotBlank(hostPort)) {                        LOGGER.info(\"Refresh token, gateway address\uff1a \" + hostPort);                        return authTokenService.refreshToken(hostPort, true, token);                    }                }else{                    LOGGER.info(\"Refresh token to gateway in eureka \");                    return authTokenService.refreshToken(false, token);                }            } catch (Exception e) {                LOGGER.info(\"Fail to refresh token: [\" + e.getMessage() + \"]\");            }        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/interceptors/AuthenticationInterceptor.java", "stars": "23", "class": {"name": "AuthenticationInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/complex_type/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/complex_type/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/complex_type/ComplexTypeTest.java", "stars": "15", "class": {"name": "ComplexTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUpdateProps", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUpdateProps() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Item item = new Item();      item.id = 10;      Property p1 = new Property();      p1.id = 11;      p1.value = \"value11\";      Property p2 = new Property();      p2.id = 12;      p2.value = \"value12\";      List<Property> list = new ArrayList<>();      list.add(p1);      list.add(p2);      item.properties = list;      sqlSession.update(\"updateProps\", item);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/complex_type/ComplexTypeTest.java", "stars": "15", "class": {"name": "ComplexTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "newInstance", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "booking_form", "snippet": "    public static booking_form newInstance(String rec_p_id,String nop) {        booking_form fragment = new booking_form();        Bundle args = new Bundle();        args.putString(ARG_PARAM1, rec_p_id);        args.putString(ARG_PARAM2, nop);        fragment.setArguments(args);        return fragment;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_form.java", "stars": "2", "class": {"name": "booking_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            rec_p_id = getArguments().getString(ARG_PARAM1);            max_nop = Integer.parseInt(getArguments().getString(ARG_PARAM2));        }        sharedPreferences=getActivity().getSharedPreferences(\"torripo_login\",Context.MODE_PRIVATE);        uname = sharedPreferences.getString(\"uname\",\"none\");    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_form.java", "stars": "2", "class": {"name": "booking_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        final View view = inflater.inflate(R.layout.fragment_booking_form, container, false);        no_of_persons=view.findViewById(R.id.no_of_person_booked);        pbar = view.findViewById(R.id.progress);        startdate = view.findViewById(R.id.starting_date);        startdate.setMinDate(System.currentTimeMillis()+(1000*60*60*24*5));        startdate.setMaxDate(System.currentTimeMillis()+(1000*60*60*24*24));        proceed = view.findViewById(R.id.submit_btn);        proceed.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                start_date=startdate.getDayOfMonth()+\"/\"+(startdate.getMonth()+1)+\"/\"+startdate.getYear();                String temp;                temp=no_of_persons.getText().toString();                if (temp.isEmpty())                {                    Toast.makeText(getContext(),\"Please enter no of Persons !!\",Toast.LENGTH_LONG).show();                }                else                {                    noofperson = Integer.parseInt(temp);                    if (noofperson > max_nop || noofperson == 0)                    {                        Toast.makeText(getContext(), \"Max no of traveller are \" + max_nop, Toast.LENGTH_LONG).show();                    } else {                        InputMethodManager imm = (InputMethodManager) getContext().getSystemService(getContext().INPUT_METHOD_SERVICE);                        imm.hideSoftInputFromWindow(view.getWindowToken(),0);                        if (!((MainActivity)getActivity()).isNetworkAvailable(getContext()))                        {                            Toast.makeText(getContext(),\"No Internet Connectivity\",Toast.LENGTH_LONG).show();                            getActivity().finish();                        }                        pbar.setVisibility(View.VISIBLE);                        Retrofit retrofit = new Retrofit.Builder().baseUrl(APIUrl.BASE_URL).                                addConverterFactory(GsonConverterFactory.create()).build();                        APIService service = retrofit.create(APIService.class);                        Call<Booking_details> call = service.booking(\"booking\", start_date, rec_p_id, uname, noofperson);                        call.enqueue(new Callback<Booking_details>() {                            @Override                            public void onResponse(Call<Booking_details> call, Response<Booking_details> response) {                                booking_details = response.body();                                if (\"error\".equals(booking_details.uname)) {                                    pbar.setVisibility(View.INVISIBLE);                                    Toast.makeText(getContext(), \"Error : User Already booked the package\", Toast.LENGTH_LONG).show();                                } else {                                    getActivity().getSupportFragmentManager().beginTransaction().                                            replace(R.id.frame_layout, passenger_form.newInstance(String.valueOf(noofperson), String.valueOf(booking_details.b_id)), \"passenger_form\").                                            addToBackStack(\"multiple_package\").commit();                                }                            }                            @Override                            public void onFailure(Call<Booking_details> call, Throwable t) {                                pbar.setVisibility(View.INVISIBLE);                                Toast.makeText(getContext(),\"Error Encountered !!\",Toast.LENGTH_LONG).show();                                Log.e(\"Error\", t.getMessage());                            }                        });                    }                }            }        });        return view;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_form.java", "stars": "2", "class": {"name": "booking_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onButtonPressed", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onButtonPressed(Uri uri) {    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_form.java", "stars": "2", "class": {"name": "booking_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_form.java", "stars": "2", "class": {"name": "booking_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_form.java", "stars": "2", "class": {"name": "booking_form", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "reportJobCommunication", "params": ["Long", "Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reportJobCommunication(Long jobId, Communication communication) {        try {            Map<String, Object> requestBody = new HashMap<>();            requestBody.put(\"currentByteSpeed\", communication.getLongCounter(CommunicationTool.BYTE_SPEED));            requestBody.put(\"taskId\", configuration.getLong(CoreConstant.DATAX_CORE_CONTAINER_JOB_ID));            StringEntity entity = new StringEntity(GsonUtil.toJson(requestBody));            entity.setContentEncoding(\"UTF-8\");            entity.setContentType(\"application/json\");            HttpPost post = HttpClientUtil.getPostRequest(configuration.getString(CoreConstant.DATAX_CORE_DATAXSERVER_PROTOCOL)                            + \"://\" + configuration.getString(CoreConstant.DATAX_CORE_DATAXSERVER_ADDRESS)                            + configuration.getString(CoreConstant.DATAX_CORE_DATAXSERVER_ENDPOINT_REPORT_STATE),                    entity,                    \"Content-Type\", \"application/json;charset=UTF-8\");            String body = HttpClientUtil.getHttpClientUtil().executeAndGet(post, String.class);            Map<String, Object> response = GsonUtil.fromJson(body, Map.class, String.class, Object.class);            if(response.get(REPORT_RESP_DATA_PATH) != null) {                Map runtimeParams = (Map) response.get(REPORT_RESP_DATA_PATH);                Long maxByteSpeed = new BigDecimal(String.valueOf(runtimeParams                        .getOrDefault(\"maxByteSpeed\", 0))).longValue();                if (maxByteSpeed > 0) {                    //Update the speed configuration                    this.configuration.set(CoreConstant.DATAX_JOB_SETTING_SPEED_BYTE, maxByteSpeed);                }            }        }catch(Exception e){            LOG.info(e.getMessage(), e);            //Do nothing        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/report/ProcessInnerReporter.java", "stars": "23", "class": {"name": "ProcessInnerReporter", "extends": "AbstractReporter", "implements": null, "modifiers": ["public"]}}, {"method_name": "reportTGCommunication", "params": ["Integer", "Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reportTGCommunication(Integer taskGroupId, Communication communication) {        LocalTGCommunicationManager.updateTaskGroupCommunication(taskGroupId, communication);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/report/ProcessInnerReporter.java", "stars": "23", "class": {"name": "ProcessInnerReporter", "extends": "AbstractReporter", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(Context context) {        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);        mPaint.setStyle(Paint.Style.FILL);        mLineHeight = UIUtil.dip2px(context, 3);        mLineWidth = UIUtil.dip2px(context, 10);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        canvas.drawRoundRect(mLineRect, mRoundRadius, mRoundRadius, mPaint);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        if (mPositionDataList == null || mPositionDataList.isEmpty()) {            return;        }        // \u8ba1\u7b97\u989c\u8272        if (mColors != null && mColors.size() > 0) {            int currentColor = mColors.get(Math.abs(position) % mColors.size());            int nextColor = mColors.get(Math.abs(position + 1) % mColors.size());            int color = ArgbEvaluatorHolder.eval(positionOffset, currentColor, nextColor);            mPaint.setColor(color);        }        // \u8ba1\u7b97\u951a\u70b9\u4f4d\u7f6e        PositionData current = FragmentContainerHelper.getImitativePositionData(mPositionDataList, position);        PositionData next = FragmentContainerHelper.getImitativePositionData(mPositionDataList, position + 1);        float leftX;        float nextLeftX;        float rightX;        float nextRightX;        if (mMode == MODE_MATCH_EDGE) {            leftX = current.mLeft + mXOffset;            nextLeftX = next.mLeft + mXOffset;            rightX = current.mRight - mXOffset;            nextRightX = next.mRight - mXOffset;        } else if (mMode == MODE_WRAP_CONTENT) {            leftX = current.mContentLeft + mXOffset;            nextLeftX = next.mContentLeft + mXOffset;            rightX = current.mContentRight - mXOffset;            nextRightX = next.mContentRight - mXOffset;        } else {    // MODE_EXACTLY            leftX = current.mLeft + (current.width() - mLineWidth) / 2;            nextLeftX = next.mLeft + (next.width() - mLineWidth) / 2;            rightX = current.mLeft + (current.width() + mLineWidth) / 2;            nextRightX = next.mLeft + (next.width() + mLineWidth) / 2;        }        mLineRect.left = leftX + (nextLeftX - leftX) * mStartInterpolator.getInterpolation(positionOffset);        mLineRect.right = rightX + (nextRightX - rightX) * mEndInterpolator.getInterpolation(positionOffset);        mLineRect.top = getHeight() - mLineHeight - mYOffset;        mLineRect.bottom = getHeight() - mYOffset;        invalidate();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageSelected(int position) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrollStateChanged(int state) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPositionDataProvide", "params": ["List<PositionData>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPositionDataProvide(List<PositionData> dataList) {        mPositionDataList = dataList;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getYOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getYOffset() {        return mYOffset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setYOffset", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setYOffset(float yOffset) {        mYOffset = yOffset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getXOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getXOffset() {        return mXOffset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setXOffset", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setXOffset(float xOffset) {        mXOffset = xOffset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getLineHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getLineHeight() {        return mLineHeight;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setLineHeight", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLineHeight(float lineHeight) {        mLineHeight = lineHeight;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getLineWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getLineWidth() {        return mLineWidth;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setLineWidth", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLineWidth(float lineWidth) {        mLineWidth = lineWidth;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getRoundRadius", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getRoundRadius() {        return mRoundRadius;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setRoundRadius", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoundRadius(float roundRadius) {        mRoundRadius = roundRadius;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getMode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMode() {        return mMode;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMode(int mode) {        if (mode == MODE_EXACTLY || mode == MODE_MATCH_EDGE || mode == MODE_WRAP_CONTENT) {            mMode = mode;        } else {            throw new IllegalArgumentException(\"mode \" + mode + \" not supported.\");        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getPaint", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Paint", "snippet": "    public Paint getPaint() {        return mPaint;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getColors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "    public List<Integer> getColors() {        return mColors;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setColors", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setColors(Integer... colors) {        mColors = Arrays.asList(colors);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getStartInterpolator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Interpolator", "snippet": "    public Interpolator getStartInterpolator() {        return mStartInterpolator;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setStartInterpolator", "params": ["Interpolator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartInterpolator(Interpolator startInterpolator) {        mStartInterpolator = startInterpolator;        if (mStartInterpolator == null) {            mStartInterpolator = new LinearInterpolator();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getEndInterpolator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Interpolator", "snippet": "    public Interpolator getEndInterpolator() {        return mEndInterpolator;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setEndInterpolator", "params": ["Interpolator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndInterpolator(Interpolator endInterpolator) {        mEndInterpolator = endInterpolator;        if (mEndInterpolator == null) {            mEndInterpolator = new LinearInterpolator();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/LinePagerIndicator.java", "stars": "1", "class": {"name": "LinePagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() { }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getScene", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Scene", "snippet": "    public Scene getScene() {        return scene;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setScene", "params": ["Scene"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setScene(@NotNull final Scene scene) {        this.scene = scene;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getStage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Stage", "snippet": "    public Stage getStage() {        return stage;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setStage", "params": ["Stage"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStage(@NotNull final Stage stage) {        this.stage = stage;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getLoader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FXMLLoader", "snippet": "    public FXMLLoader getLoader() {        return loader;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setLoader", "params": ["FXMLLoader"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoader(@NotNull final FXMLLoader loader) {        this.loader = loader;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getPane", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AnchorPane", "snippet": "    public AnchorPane getPane() {        return pane;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setPane", "params": ["AnchorPane"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPane(@NotNull final AnchorPane pane) {        this.pane = pane;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getGuiManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GuiManager", "snippet": "    public GuiManager getGuiManager() {        return guiManager;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setGuiManager", "params": ["GuiManager"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGuiManager(@NotNull final GuiManager guiManager) {        this.guiManager = guiManager;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiController.java", "stars": "2", "class": {"name": "GuiController", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);//        \u7ec3\u4e60\u5185\u5bb9\uff1a\u4f7f\u7528 canvas.drawRoundRect() \u65b9\u6cd5\u753b\u5706\u89d2\u77e9\u5f62        //rx \u548c ry \u662f\u5706\u89d2\u7684\u6a2a\u5411\u534a\u5f84\u548c\u7eb5\u5411\u534a\u5f84        canvas.drawRoundRect(100, 100, 300, 200, 20, 20, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson1/Practice7DrawRoundRectView.java", "stars": "2", "class": {"name": "Practice7DrawRoundRectView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init(Configuration originalConfig) {            OriginalConfPretreatmentUtil.doPretreatment(originalConfig, this.dataBaseType);            LOG.debug(\"After job init(), originalConfig now is:[\\n{}\\n]\",                    originalConfig.toJSON());        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "writerPreCheck", "params": ["Configuration", "DataBaseType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void writerPreCheck(Configuration originalConfig, DataBaseType dataBaseType) {            /*\u68c0\u67e5PreSql\u8ddfPostSql\u8bed\u53e5*/            prePostSqlValid(originalConfig, dataBaseType);            /*\u68c0\u67e5insert \u8ddfdelete\u6743\u9650*/            privilegeValid(originalConfig, dataBaseType);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prePostSqlValid", "params": ["Configuration", "DataBaseType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prePostSqlValid(Configuration originalConfig, DataBaseType dataBaseType) {            /*\u68c0\u67e5PreSql\u8ddfPostSql\u8bed\u53e5*/            WriterUtil.preCheckPrePareSQL(originalConfig, dataBaseType);            WriterUtil.preCheckPostSQL(originalConfig, dataBaseType);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "privilegeValid", "params": ["Configuration", "DataBaseType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void privilegeValid(Configuration originalConfig, DataBaseType dataBaseType) {            /*\u68c0\u67e5insert \u8ddfdelete\u6743\u9650*/            String username = originalConfig.getString(Key.USERNAME);            String password = originalConfig.getString(Key.PASSWORD);            String proxyHost = originalConfig.getString(Key.PROXY_HOST, DEFAULT_PROXY_SOCKS_HOST);            int proxyPort = originalConfig.getInt(Key.PROXY_PORT, DEFAULT_PROXY_SOCKS_PORT);            List<Object> connections = originalConfig.getList(Constant.CONN_MARK,                    Object.class);            for (int i = 0, len = connections.size(); i < len; i++) {                Configuration connConf = Configuration.from(connections.get(i).toString());                String jdbcUrl = connConf.getString(Key.JDBC_URL);                List<String> expandedTables = connConf.getList(Key.TABLE, String.class);                boolean hasInsertPri = DBUtil.checkInsertPrivilege(dataBaseType, jdbcUrl, username, password,                        proxyHost, proxyPort, expandedTables);                if (!hasInsertPri) {                    throw RdbmsException.asInsertPriException(dataBaseType, originalConfig.getString(Key.USERNAME), jdbcUrl);                }                if (DBUtil.needCheckDeletePrivilege(originalConfig)) {                    boolean hasDeletePri = DBUtil.checkDeletePrivilege(dataBaseType, jdbcUrl, username, password,                            proxyHost, proxyPort, expandedTables);                    if (!hasDeletePri) {                        throw RdbmsException.asDeletePriException(dataBaseType, originalConfig.getString(Key.USERNAME), jdbcUrl);                    }                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare(Configuration originalConfig) {            int tableNumber = originalConfig.getInt(Constant.TABLE_NUMBER_MARK);            if (tableNumber == 1) {                String username = originalConfig.getString(Key.USERNAME);                String password = originalConfig.getString(Key.PASSWORD);                String proxyHost = originalConfig.getString(Key.PROXY_HOST, DEFAULT_PROXY_SOCKS_HOST);                int proxyPort = originalConfig.getInt(Key.PROXY_PORT, DEFAULT_PROXY_SOCKS_PORT);                List<Object> conns = originalConfig.getList(Constant.CONN_MARK,                        Object.class);                Configuration connConf = Configuration.from(conns.get(0)                        .toString());                // \u8fd9\u91cc\u7684 jdbcUrl \u5df2\u7ecf append \u4e86\u5408\u9002\u540e\u7f00\u53c2\u6570                String jdbcUrl = connConf.getString(Key.JDBC_URL);                originalConfig.set(Key.JDBC_URL, jdbcUrl);                String table = connConf.getList(Key.TABLE, String.class).get(0);                originalConfig.set(Key.TABLE, table);                List<String> preSqls = originalConfig.getList(Key.PRE_SQL,                        String.class);                List<String> renderedPreSqls = WriterUtil.renderPreOrPostSqls(                        preSqls, table);                originalConfig.remove(Constant.CONN_MARK);                if (null != renderedPreSqls && !renderedPreSqls.isEmpty()) {                    // \u8bf4\u660e\u6709 preSql \u914d\u7f6e\uff0c\u5219\u6b64\u5904\u5220\u9664\u6389                    originalConfig.remove(Key.PRE_SQL);                    Connection conn = DBUtil.getConnection(dataBaseType,                            jdbcUrl, username, password, proxyHost, proxyPort);                    LOG.info(\"Begin to execute preSqls:[{}]. context info:{}.\",                            StringUtils.join(renderedPreSqls, \";\"), jdbcUrl);                    WriterUtil.executeSqls(conn, renderedPreSqls, jdbcUrl, dataBaseType);                    DBUtil.closeDBResources(null, null, conn);                }            }            LOG.debug(\"After job prepare(), originalConfig now is:[\\n{}\\n]\",                    originalConfig.toJSON());        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["Configuration", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(Configuration originalConfig,                                         int mandatoryNumber) {            return WriterUtil.doSplit(originalConfig, mandatoryNumber);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post(Configuration originalConfig) {            int tableNumber = originalConfig.getInt(Constant.TABLE_NUMBER_MARK);            if (tableNumber == 1) {                String username = originalConfig.getString(Key.USERNAME);                String password = originalConfig.getString(Key.PASSWORD);                String proxyHost = originalConfig.getString(Key.PROXY_HOST, DEFAULT_PROXY_SOCKS_HOST);                int proxyPort = originalConfig.getInt(Key.PROXY_PORT, DEFAULT_PROXY_SOCKS_PORT);                // \u5df2\u7ecf\u7531 prepare \u8fdb\u884c\u4e86appendJDBCSuffix\u5904\u7406                String jdbcUrl = originalConfig.getString(Key.JDBC_URL);                String table = originalConfig.getString(Key.TABLE);                List<String> postSqls = originalConfig.getList(Key.POST_SQL,                        String.class);                List<String> renderedPostSqls = WriterUtil.renderPreOrPostSqls(                        postSqls, table);                if (null != renderedPostSqls && !renderedPostSqls.isEmpty()) {                    // \u8bf4\u660e\u6709 postSql \u914d\u7f6e\uff0c\u5219\u6b64\u5904\u5220\u9664\u6389                    originalConfig.remove(Key.POST_SQL);                    Connection conn = DBUtil.getConnection(this.dataBaseType,                            jdbcUrl, username, password, proxyHost, proxyPort);                    LOG.info(                            \"Begin to execute postSqls:[{}]. context info:{}.\",                            StringUtils.join(renderedPostSqls, \";\"), jdbcUrl);                    WriterUtil.executeSqls(conn, renderedPostSqls, jdbcUrl, dataBaseType);                    DBUtil.closeDBResources(null, null, conn);                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy(Configuration originalConfig) {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init(Configuration writerSliceConfig) {            this.username = writerSliceConfig.getString(Key.USERNAME);            this.password = writerSliceConfig.getString(Key.PASSWORD);            this.proxyHost = writerSliceConfig.getString(Key.PROXY_HOST, DEFAULT_PROXY_SOCKS_HOST);            this.proxyPort = writerSliceConfig.getInt(Key.PROXY_PORT, DEFAULT_PROXY_SOCKS_PORT);            if(StringUtils.isNotBlank(password)){                try {                    password = (String) CryptoUtils.string2Object(password);                } catch (Exception e) {                    throw DataXException.asDataXException(DBUtilErrorCode.CONF_ERROR, \"decrypt password failed\");                }            }            this.jdbcUrl = writerSliceConfig.getString(Key.JDBC_URL);            //ob10\u7684\u5904\u7406            if (this.jdbcUrl.startsWith(Constant.OB10_SPLIT_STRING) && this.dataBaseType == DataBaseType.MySql) {                String[] ss = this.jdbcUrl.split(Constant.OB10_SPLIT_STRING_PATTERN);                if (ss.length != 3) {                    throw DataXException                            .asDataXException(                                    DBUtilErrorCode.JDBC_OB10_ADDRESS_ERROR, \"JDBC OB10\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u8054\u7cfbaskdatax\");                }                LOG.info(\"this is ob1_0 jdbc url.\");                this.username = ss[1].trim() + \":\" + this.username;                this.jdbcUrl = ss[2];                LOG.info(\"this is ob1_0 jdbc url. user=\" + this.username + \" :url=\" + this.jdbcUrl);            }            this.table = writerSliceConfig.getString(Key.TABLE);            this.columns = writerSliceConfig.getList(Key.COLUMN, String.class);            this.columnNumber = this.columns.size();            this.preSqls = writerSliceConfig.getList(Key.PRE_SQL, String.class);            this.postSqls = writerSliceConfig.getList(Key.POST_SQL, String.class);            this.batchSize = writerSliceConfig.getInt(Key.BATCH_SIZE, Constant.DEFAULT_BATCH_SIZE);            this.batchByteSize = writerSliceConfig.getInt(Key.BATCH_BYTE_SIZE, Constant.DEFAULT_BATCH_BYTE_SIZE);            writeMode = writerSliceConfig.getString(Key.WRITE_MODE, \"INSERT\");            emptyAsNull = writerSliceConfig.getBool(Key.EMPTY_AS_NULL, true);            INSERT_OR_REPLACE_TEMPLATE = writerSliceConfig.getString(Constant.INSERT_OR_REPLACE_TEMPLATE_MARK);            this.writeRecordSql = String.format(INSERT_OR_REPLACE_TEMPLATE, this.table);            BASIC_MESSAGE = String.format(\"jdbcUrl:[%s], table:[%s]\",                    this.jdbcUrl, this.table);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare(Configuration writerSliceConfig) {            Connection connection = DBUtil.getConnection(this.dataBaseType,                    this.jdbcUrl, username, password, proxyHost, proxyPort);            DBUtil.dealWithSessionConfig(connection, writerSliceConfig,                    this.dataBaseType, BASIC_MESSAGE);            int tableNumber = writerSliceConfig.getInt(                    Constant.TABLE_NUMBER_MARK);            if (tableNumber != 1) {                LOG.info(\"Begin to execute preSqls:[{}]. context info:{}.\",                        StringUtils.join(this.preSqls, \";\"), BASIC_MESSAGE);                WriterUtil.executeSqls(connection, this.preSqls, BASIC_MESSAGE, dataBaseType);            }            DBUtil.closeDBResources(null, null, connection);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startWriteWithConnection", "params": ["RecordReceiver", "TaskPluginCollector", "Connection"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWriteWithConnection(RecordReceiver recordReceiver, TaskPluginCollector taskPluginCollector, Connection connection) {            this.taskPluginCollector = taskPluginCollector;            // \u7528\u4e8e\u5199\u5165\u6570\u636e\u7684\u65f6\u5019\u7684\u7c7b\u578b\u6839\u636e\u76ee\u7684\u8868\u5b57\u6bb5\u7c7b\u578b\u8f6c\u6362            this.resultSetMetaData = DBUtil.getColumnMetaData(connection,                    this.table, StringUtils.join(this.columns, \",\"));            // \u5199\u6570\u636e\u5e93\u7684SQL\u8bed\u53e5            calcWriteRecordSql();            List<Record> writeBuffer = new ArrayList<Record>(this.batchSize);            int bufferBytes = 0;            try {                Record record;                while ((record = recordReceiver.getFromReader()) != null) {                    if (record.getColumnNumber() != this.columnNumber) {                        // \u6e90\u5934\u8bfb\u53d6\u5b57\u6bb5\u5217\u6570\u4e0e\u76ee\u7684\u8868\u5b57\u6bb5\u5199\u5165\u5217\u6570\u4e0d\u76f8\u7b49\uff0c\u76f4\u63a5\u62a5\u9519                        throw DataXException                                .asDataXException(                                        DBUtilErrorCode.CONF_ERROR,                                        String.format(                                                \"\u5217\u914d\u7f6e\u4fe1\u606f\u6709\u9519\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u4efb\u52a1\u4e2d\uff0c\u6e90\u5934\u8bfb\u53d6\u5b57\u6bb5\u6570:%s \u4e0e \u76ee\u7684\u8868\u8981\u5199\u5165\u7684\u5b57\u6bb5\u6570:%s \u4e0d\u76f8\u7b49. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\",                                                record.getColumnNumber(),                                                this.columnNumber));                    }                    writeBuffer.add(record);                    bufferBytes += record.getMemorySize();                    if (writeBuffer.size() >= batchSize || bufferBytes >= batchByteSize) {                        doBatchInsert(connection, writeBuffer);                        writeBuffer.clear();                        bufferBytes = 0;                    }                }                if (!writeBuffer.isEmpty()) {                    doBatchInsert(connection, writeBuffer);                    writeBuffer.clear();                    bufferBytes = 0;                }            } catch (Exception e) {                throw DataXException.asDataXException(                        DBUtilErrorCode.WRITE_DATA_ERROR, e);            } finally {                writeBuffer.clear();                bufferBytes = 0;                DBUtil.closeDBResources(null, null, connection);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startWrite", "params": ["RecordReceiver", "Configuration", "TaskPluginCollector"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWrite(RecordReceiver recordReceiver,                               Configuration writerSliceConfig,                               TaskPluginCollector taskPluginCollector) {            Connection connection = DBUtil.getConnection(this.dataBaseType,                    this.jdbcUrl, username, password, proxyHost, proxyPort);            DBUtil.dealWithSessionConfig(connection, writerSliceConfig,                    this.dataBaseType, BASIC_MESSAGE);            startWriteWithConnection(recordReceiver, taskPluginCollector, connection);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post(Configuration writerSliceConfig) {            int tableNumber = writerSliceConfig.getInt(                    Constant.TABLE_NUMBER_MARK);            boolean hasPostSql = (this.postSqls != null && this.postSqls.size() > 0);            if (tableNumber == 1 || !hasPostSql) {                return;            }            Connection connection = DBUtil.getConnection(this.dataBaseType,                    this.jdbcUrl, username, password, proxyHost, proxyPort);            LOG.info(\"Begin to execute postSqls:[{}]. context info:{}.\",                    StringUtils.join(this.postSqls, \";\"), BASIC_MESSAGE);            WriterUtil.executeSqls(connection, this.postSqls, BASIC_MESSAGE, dataBaseType);            DBUtil.closeDBResources(null, null, connection);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy(Configuration writerSliceConfig) {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "doBatchInsert", "params": ["Connection", "List<Record>"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void doBatchInsert(Connection connection, List<Record> buffer)                throws SQLException {            PreparedStatement preparedStatement = null;            try {                connection.setAutoCommit(false);                preparedStatement = connection                        .prepareStatement(this.writeRecordSql);                for (Record record : buffer) {                    preparedStatement = fillPreparedStatement(                            preparedStatement, record);                    preparedStatement.addBatch();                }                preparedStatement.executeBatch();                connection.commit();            } catch (SQLException e) {                LOG.warn(\"\u56de\u6eda\u6b64\u6b21\u5199\u5165, \u91c7\u7528\u6bcf\u6b21\u5199\u5165\u4e00\u884c\u65b9\u5f0f\u63d0\u4ea4. \u56e0\u4e3a:\" + e.getMessage());                connection.rollback();                doOneInsert(connection, buffer);            } catch (Exception e) {                throw DataXException.asDataXException(                        DBUtilErrorCode.WRITE_DATA_ERROR, e);            } finally {                DBUtil.closeDBResources(preparedStatement, null);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "doOneInsert", "params": ["Connection", "List<Record>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void doOneInsert(Connection connection, List<Record> buffer) {            PreparedStatement preparedStatement = null;            try {                connection.setAutoCommit(true);                preparedStatement = connection                        .prepareStatement(this.writeRecordSql);                for (Record record : buffer) {                    try {                        preparedStatement = fillPreparedStatement(                                preparedStatement, record);                        preparedStatement.execute();                    } catch (SQLException e) {                        LOG.debug(e.toString());                        this.taskPluginCollector.collectDirtyRecord(record, e);                    } finally {                        // \u6700\u540e\u4e0d\u8981\u5fd8\u4e86\u5173\u95ed preparedStatement                        preparedStatement.clearParameters();                    }                }            } catch (Exception e) {                throw DataXException.asDataXException(                        DBUtilErrorCode.WRITE_DATA_ERROR, e);            } finally {                DBUtil.closeDBResources(preparedStatement, null);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "fillPreparedStatement", "params": ["PreparedStatement", "Record"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "PreparedStatement", "snippet": "        protected PreparedStatement fillPreparedStatement(PreparedStatement preparedStatement, Record record)                throws SQLException {            for (int i = 0; i < this.columnNumber; i++) {                int columnSqltype = this.resultSetMetaData.getMiddle().get(i);                preparedStatement = fillPreparedStatementColumnType(preparedStatement, i, columnSqltype, record.getColumn(i));            }            return preparedStatement;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "fillPreparedStatementColumnType", "params": ["PreparedStatement", "int", "int", "Column"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "PreparedStatement", "snippet": "        protected PreparedStatement fillPreparedStatementColumnType(PreparedStatement preparedStatement, int columnIndex, int columnSqltype, Column column) throws SQLException {            java.util.Date utilDate;            switch (columnSqltype) {                case Types.CHAR:                case Types.NCHAR:                case Types.CLOB:                case Types.NCLOB:                case Types.VARCHAR:                case Types.LONGVARCHAR:                case Types.NVARCHAR:                case Types.LONGNVARCHAR:                    preparedStatement.setString(columnIndex + 1, column                            .asString());                    break;                case Types.SMALLINT:                case Types.INTEGER:                case Types.BIGINT:                case Types.NUMERIC:                case Types.DECIMAL:                case Types.FLOAT:                case Types.REAL:                case Types.DOUBLE:                    String strValue = column.asString();                    if (emptyAsNull && \"\".equals(strValue)) {                        preparedStatement.setString(columnIndex + 1, null);                    } else {                        preparedStatement.setString(columnIndex + 1, strValue);                    }                    break;                //tinyint is a little special in some database like mysql {boolean->tinyint(1)}                case Types.TINYINT:                    Long longValue = column.asLong();                    if (null == longValue) {                        preparedStatement.setString(columnIndex + 1, null);                    } else {                        preparedStatement.setString(columnIndex + 1, longValue.toString());                    }                    break;                // for mysql bug, see http://bugs.mysql.com/bug.php?id=35115                case Types.DATE:                    if (this.resultSetMetaData.getRight().get(columnIndex)                            .equalsIgnoreCase(\"year\")) {                        if (column.asBigInteger() == null) {                            preparedStatement.setString(columnIndex + 1, null);                        } else {                            preparedStatement.setInt(columnIndex + 1, column.asBigInteger().intValue());                        }                    } else {                        java.sql.Date sqlDate = null;                        try {                            utilDate = column.asDate();                        } catch (DataXException e) {                            throw new SQLException(String.format(                                    \"Date \u7c7b\u578b\u8f6c\u6362\u9519\u8bef\uff1a[%s]\", column));                        }                        if (null != utilDate) {                            sqlDate = new java.sql.Date(utilDate.getTime());                        }                        preparedStatement.setDate(columnIndex + 1, sqlDate);                    }                    break;                case Types.TIME:                    java.sql.Time sqlTime = null;                    try {                        utilDate = column.asDate();                    } catch (DataXException e) {                        throw new SQLException(String.format(                                \"TIME \u7c7b\u578b\u8f6c\u6362\u9519\u8bef\uff1a[%s]\", column));                    }                    if (null != utilDate) {                        sqlTime = new java.sql.Time(utilDate.getTime());                    }                    preparedStatement.setTime(columnIndex + 1, sqlTime);                    break;                case Types.TIMESTAMP:                    java.sql.Timestamp sqlTimestamp = null;                    try {                        utilDate = column.asDate();                    } catch (DataXException e) {                        throw new SQLException(String.format(                                \"TIMESTAMP \u7c7b\u578b\u8f6c\u6362\u9519\u8bef\uff1a[%s]\", column));                    }                    if (null != utilDate) {                        sqlTimestamp = new java.sql.Timestamp(                                utilDate.getTime());                    }                    preparedStatement.setTimestamp(columnIndex + 1, sqlTimestamp);                    break;                case Types.BINARY:                case Types.VARBINARY:                case Types.BLOB:                case Types.LONGVARBINARY:                    preparedStatement.setBytes(columnIndex + 1, column                            .asBytes());                    break;                case Types.BOOLEAN:                    preparedStatement.setString(columnIndex + 1, column.asString());                    break;                // warn: bit(1) -> Types.BIT \u53ef\u4f7f\u7528setBoolean                // warn: bit(>1) -> Types.VARBINARY \u53ef\u4f7f\u7528setBytes                case Types.BIT:                    if (this.dataBaseType == DataBaseType.MySql) {                        preparedStatement.setBoolean(columnIndex + 1, column.asBoolean());                    } else {                        preparedStatement.setString(columnIndex + 1, column.asString());                    }                    break;                default:                    throw DataXException                            .asDataXException(                                    DBUtilErrorCode.UNSUPPORTED_TYPE,                                    String.format(                                            \"\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5217\u914d\u7f6e\u4fe1\u606f\u6709\u8bef. \u56e0\u4e3aDataX \u4e0d\u652f\u6301\u6570\u636e\u5e93\u5199\u5165\u8fd9\u79cd\u5b57\u6bb5\u7c7b\u578b. \u5b57\u6bb5\u540d:[%s], \u5b57\u6bb5\u7c7b\u578b:[%d], \u5b57\u6bb5Java\u7c7b\u578b:[%s]. \u8bf7\u4fee\u6539\u8868\u4e2d\u8be5\u5b57\u6bb5\u7684\u7c7b\u578b\u6216\u8005\u4e0d\u540c\u6b65\u8be5\u5b57\u6bb5.\",                                            this.resultSetMetaData.getLeft()                                                    .get(columnIndex),                                            this.resultSetMetaData.getMiddle()                                                    .get(columnIndex),                                            this.resultSetMetaData.getRight()                                                    .get(columnIndex)));            }            return preparedStatement;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "calcWriteRecordSql", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void calcWriteRecordSql() {            if (!VALUE_HOLDER.equals(calcValueHolder(\"\"))) {                List<String> valueHolders = new ArrayList<String>(columnNumber);                for (int i = 0; i < columns.size(); i++) {                    String type = resultSetMetaData.getRight().get(i);                    valueHolders.add(calcValueHolder(type));                }                boolean forceUseUpdate = false;                //ob10\u7684\u5904\u7406                if (dataBaseType != null && dataBaseType == DataBaseType.MySql && OriginalConfPretreatmentUtil.isOB10(jdbcUrl)) {                    forceUseUpdate = true;                }                INSERT_OR_REPLACE_TEMPLATE = WriterUtil.getWriteTemplate(columns, valueHolders, writeMode, dataBaseType, forceUseUpdate);                writeRecordSql = String.format(INSERT_OR_REPLACE_TEMPLATE, this.table);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "calcValueHolder", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "        protected String calcValueHolder(String columnType) {            return VALUE_HOLDER;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/writer/CommonRdbmsWriter.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "start", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void start(final File outputFile) {    if (state == RtcEventLogState.STARTED) {      Log.e(TAG, \"RtcEventLog has already started.\");      return;    }    final ParcelFileDescriptor fileDescriptor;    try {      fileDescriptor = ParcelFileDescriptor.open(outputFile,          ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE              | ParcelFileDescriptor.MODE_TRUNCATE);    } catch (IOException e) {      Log.e(TAG, \"Failed to create a new file\", e);      return;    }    // Passes ownership of the file to WebRTC.    boolean success =        peerConnection.startRtcEventLog(fileDescriptor.detachFd(), OUTPUT_FILE_MAX_BYTES);    if (!success) {      Log.e(TAG, \"Failed to start RTC event log.\");      return;    }    state = RtcEventLogState.STARTED;    Log.d(TAG, \"RtcEventLog started.\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/RtcEventLog.java", "stars": "2", "class": {"name": "RtcEventLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void stop() {    if (state != RtcEventLogState.STARTED) {      Log.e(TAG, \"RtcEventLog was not started.\");      return;    }    peerConnection.stopRtcEventLog();    state = RtcEventLogState.STOPPED;    Log.d(TAG, \"RtcEventLog stopped.\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/RtcEventLog.java", "stars": "2", "class": {"name": "RtcEventLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "apply", "params": ["Project"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid apply(Project project) {\t\tproject.getPlugins().withType(MavenPublishPlugin.class).all((mavenPublish) -> {\t\t\tPublishingExtension publishing = project.getExtensions().getByType(PublishingExtension.class);\t\t\tif (project.hasProperty(\"deploymentRepository\")) {\t\t\t\tpublishing.getRepositories().maven((mavenRepository) -> {\t\t\t\t\tmavenRepository.setUrl(project.property(\"deploymentRepository\"));\t\t\t\t\tmavenRepository.setName(\"deployment\");\t\t\t\t});\t\t\t}\t\t\tpublishing.getPublications().withType(MavenPublication.class)\t\t\t\t\t.all((mavenPublication) -> customizePom(mavenPublication.getPom(), project));\t\t\tproject.getPlugins().withType(JavaPlugin.class).all((javaPlugin) -> {\t\t\t\tJavaPluginExtension extension = project.getExtensions().getByType(JavaPluginExtension.class);\t\t\t\textension.withJavadocJar();\t\t\t\textension.withSourcesJar();\t\t\t});\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenPublishingConventions.java", "stars": "47572", "class": {"name": "MavenPublishingConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customizePom", "params": ["MavenPom", "Project"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void customizePom(MavenPom pom, Project project) {\t\tpom.getUrl().set(\"https://projects.spring.io/spring-boot/#\");\t\tpom.getDescription().set(project.provider(project::getDescription));\t\tpom.organization(this::customizeOrganization);\t\tpom.licenses(this::customizeLicences);\t\tpom.developers(this::customizeDevelopers);\t\tpom.scm(this::customizeScm);\t\tpom.issueManagement(this::customizeIssueManagement);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenPublishingConventions.java", "stars": "47572", "class": {"name": "MavenPublishingConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customizeOrganization", "params": ["MavenPomOrganization"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void customizeOrganization(MavenPomOrganization organization) {\t\torganization.getName().set(\"Pivotal Software, Inc.\");\t\torganization.getUrl().set(\"https://spring.io\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenPublishingConventions.java", "stars": "47572", "class": {"name": "MavenPublishingConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customizeLicences", "params": ["MavenPomLicenseSpec"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void customizeLicences(MavenPomLicenseSpec licences) {\t\tlicences.license((licence) -> {\t\t\tlicence.getName().set(\"Apache License, Version 2.0\");\t\t\tlicence.getUrl().set(\"http://www.apache.org/licenses/LICENSE-2.0\");\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenPublishingConventions.java", "stars": "47572", "class": {"name": "MavenPublishingConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customizeDevelopers", "params": ["MavenPomDeveloperSpec"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void customizeDevelopers(MavenPomDeveloperSpec developers) {\t\tdevelopers.developer((developer) -> {\t\t\tdeveloper.getName().set(\"Pivotal\");\t\t\tdeveloper.getEmail().set(\"info@pivotal.io\");\t\t\tdeveloper.getOrganization().set(\"Pivotal Software, Inc.\");\t\t\tdeveloper.getOrganizationUrl().set(\"https://www.spring.io\");\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenPublishingConventions.java", "stars": "47572", "class": {"name": "MavenPublishingConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customizeScm", "params": ["MavenPomScm"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void customizeScm(MavenPomScm scm) {\t\tscm.getConnection().set(\"scm:git:git://github.com/spring-projects/spring-boot.git\");\t\tscm.getDeveloperConnection().set(\"scm:git:ssh://git@github.com/spring-projects/spring-boot.git\");\t\tscm.getUrl().set(\"https://github.com/spring-projects/spring-boot\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenPublishingConventions.java", "stars": "47572", "class": {"name": "MavenPublishingConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customizeIssueManagement", "params": ["MavenPomIssueManagement"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void customizeIssueManagement(MavenPomIssueManagement issueManagement) {\t\tissueManagement.getSystem().set(\"GitHub\");\t\tissueManagement.getUrl().set(\"https://github.com/spring-projects/spring-boot/issues\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/MavenPublishingConventions.java", "stars": "47572", "class": {"name": "MavenPublishingConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLayoutResId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutResId() {        return R.layout.activity_chatroom;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        cl = findViewById(R.id.cl_chatroom);        mEtMessage = findViewById(R.id.et_message);        mIvSendMessage = findViewById(R.id.iv_send);        mIvCloseRoom = findViewById(R.id.iv_closeroom);        mIvChat = findViewById(R.id.iv_chat);        mIvFeedBack = findViewById(R.id.iv_feedback);        mTvChatRoomMember = findViewById(R.id.tv_chatroom_members);        mPhRecyclerViewChat = findViewById(R.id.ph_recyclerView_chat);        mTvHandleLive = findViewById(R.id.tv_handle_live);        mTvChatrRoomid = findViewById(R.id.tv_chatroomid);        mTvLiveModeSelector = findViewById(R.id.tv_livemode_selector);        mTvSubscribeSelector = findViewById(R.id.tv_subscribe_selector);        mImgSwitchCamera = findViewById(R.id.img_switchcamera);        mImgMicrophone = findViewById(R.id.iv_microphone);        mVBgBottom = findViewById(R.id.bg_bottom);        recyclerView = findViewById(R.id.recyclerView_chat);        mGroupBottom = findViewById(R.id.group_bottom);        mGroupBottomChat = findViewById(R.id.group_bottom_chat);        mGroupOwner = findViewById(R.id.group_owner);        mGroupLive = findViewById(R.id.group_live);        mGroupVideo = findViewById(R.id.group_video);        mLocalView = findViewById(R.id.local_view);        mTVLocalUid = findViewById(R.id.tv_local_uid);        mRemoteView = findViewById(R.id.remote_view);        mTvRemoteUid = findViewById(R.id.tv_remote_uid);        mLocalViewNet = findViewById(R.id.local_view_net);        mRemoteViewNet = findViewById(R.id.remote_view_net);        mIvCloseRoom.setOnClickListener(this::onClick);        mIvSendMessage.setOnClickListener(this::onClick);        mIvChat.setOnClickListener(this::onClick);        mIvFeedBack.setOnClickListener(this::onClick);        mTvChatRoomMember.setOnClickListener(this::onClick);        mTvHandleLive.setOnClickListener(this::onClick);        mTvSubscribeSelector.setOnClickListener(this::onClick);        mImgMicrophone.setOnClickListener(this::onClick);        mImgSwitchCamera.setOnClickListener(this::onClick);        mTvLiveModeSelector.setOnClickListener(this::onClick);        adapter = new ChatMessageAdapter(new ArrayList<>(), ChatRoomActivity.this);        LinearLayoutManager layoutManager = new LinearLayoutManager(this);//        layoutManager.setStackFromEnd(true);        layoutManager.setOrientation(OrientationHelper.VERTICAL);        recyclerView.setLayoutManager(layoutManager);        recyclerView.setAdapter(adapter);        recyclerView.setItemAnimator(new DefaultItemAnimator());        recyclerView.scrollToPosition(adapter.getItemCount() - 1);//\u6b64\u53e5\u4e3a\u8bbe\u7f6e\u663e\u793a        initPopView();        SoftKeyBoardListener.setListener(ChatRoomActivity.this, new SoftKeyBoardListener.OnSoftKeyBoardChangeListener() {            @Override            public void keyBoardShow(int height) {                keyBoardChangeView(true);            }            @Override            public void keyBoardHide() {                keyBoardChangeView(false);            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "dispatchTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean dispatchTouchEvent(MotionEvent ev) {        if (ev != null && mEtMessage.getVisibility() != View.GONE) {            int[] location = {0, 0};            mVBgBottom.getLocationInWindow(location);            int left = location[0] + mVBgBottom.getWidth() / 2, bottom = location[1] + mVBgBottom.getHeight();            switch (ev.getAction()) {                case MotionEvent.ACTION_UP:                    if (ev.getRawX() < left                            || ev.getRawY() > bottom) {                        return false;                    }                    break;            }        }        return super.dispatchTouchEvent(ev);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "keyBoardChangeView", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void keyBoardChangeView(boolean isShow) {        if (!isShow) {            mVBgBottom.setBackground(getResources().getDrawable(R.color.bg_grey));            mGroupBottomChat.setVisibility(View.GONE);            mPhRecyclerViewChat.setContentId(0);            recyclerView.setAlpha(1.0F);            mGroupBottom.setVisibility(View.VISIBLE);            if (isLive) {                mGroupLive.setVisibility(View.VISIBLE);            }            mEtMessage.setVisibility(View.GONE);        } else {            mVBgBottom.setBackground(getResources().getDrawable(R.color.white95));            mGroupBottomChat.setVisibility(View.VISIBLE);            mPhRecyclerViewChat.setContentId(recyclerView.getId());            recyclerView.setAlpha(0.5F);            mGroupBottom.setVisibility(View.GONE);            mGroupLive.setVisibility(View.GONE);            mEtMessage.setVisibility(View.VISIBLE);        }        recyclerView.scrollToPosition(adapter.getItemCount() - 1);//\u6b64\u53e5\u4e3a\u8bbe\u7f6e\u663e\u793a    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "hideKeyboard", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hideKeyboard() {        InputMethodManager imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);        View v = getWindow().peekDecorView();        if (null != v) {            imm.hideSoftInputFromWindow(v.getWindowToken(), 0);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        Intent intent = getIntent();        roomId = intent.getStringExtra(Constant.ROOMID_KEY);        mChatRoom = new ChatRoom(Long.parseLong(roomId));        mTvChatrRoomid.setText(\"\u623f\u95f4\u53f7: \" + roomId);        FacadeRtcManager.getInstance().initLiveMode(userLiveModes);        FacadeRtcManager.getInstance().setObserver(observer);        checkOwner();        HMR.getService(ChatService.class).addMessageListener(null, messageListener);        HMR.getService(ChatRoomService.class).addMemberListener(this);        HMR.getService(ChatRoomService.class).addListener(this);        HMR.getService(ChannelStateService.class).addChannelStateListener(this::onUpdateChannelState);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "initPopView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initPopView() {        contentView = LayoutInflater.from(ChatRoomActivity.this).inflate(R.layout.custorm_pop, null);        popTvStopCancel = contentView.findViewById(R.id.pop_tv_cancel);        popTvStopHead = contentView.findViewById(R.id.pop_tv_head);        modeRecyclerView = contentView.findViewById(R.id.recyclerView_pop);        popTvStopCancel.setOnClickListener(this::onClick);        modeAdapter = new ModeAdapter(new ArrayList<>());        LinearLayoutManager layoutManager = new LinearLayoutManager(this);        layoutManager.setOrientation(OrientationHelper.VERTICAL);        modeRecyclerView.setLayoutManager(layoutManager);        modeRecyclerView.setAdapter(modeAdapter);        modeRecyclerView.setItemAnimator(new DefaultItemAnimator());        modeAdapter.setOnItemClickListener((view, position) -> {            switch (modeAdapter.getData().get(position).getModeType()) {                case Constant.LIVE_MODETYPE:                    mTvLiveModeSelector.setText(modeAdapter.getData().get(position).getModeTip());                    liveMode = modeAdapter.getData().get(position).getThunderMode();                    Log.d(TAG, \"initPopView:liveMode \" + liveMode);                    FacadeRtcManager.getInstance().setVideoEncoderConfig(liveMode);                    break;                case Constant.MEMBERS_MODETYPE:                    showDialogProgress();                    mRemoteUid = Long.parseLong(modeAdapter.getData().get(position).getModeTip());                    HummerManager.getInstance().sendSignalMessage(ChatRoomActivity.this, mChatRoom, LIVE_CONNECT_APPLY, new User(mRemoteUid));                    break;            }            if (mCustomPopWindow != null) {                mCustomPopWindow.dissmiss();            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "showPopView", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showPopView(int size) {        mCustomPopWindow = new CustomPopWindow.PopupWindowBuilder(ChatRoomActivity.this)                .setView(contentView)                .size(getResources().getDisplayMetrics().widthPixels, popTvStopCancel.getLayoutParams().height * (size + 1) + 10)//\u52a8\u6001\u663e\u793a\u6240\u6709item\u6570\u636e\uff0cpopwindow\u9ad8\u5ea6\u4e3a:item + 1                .enableBackgroundDark(true) //\u5f39\u51fapopWindow\u65f6\uff0c\u80cc\u666f\u662f\u5426\u53d8\u6697                .setBgDarkAlpha(0.7f) // \u63a7\u5236\u4eae\u5ea6                .setFocusable(true)//\u662f\u5426\u83b7\u53d6\u7126\u70b9\uff0c\u9ed8\u8ba4\u4e3ature                .setOutsideTouchable(true)//\u662f\u5426PopupWindow \u4ee5\u5916\u89e6\u6478dissmiss                .create()                .showAtLocation(contentView, Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 10);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "checkOwner", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkOwner() {        showDialogProgress();        HMR.getService(ChatRoomService.class)                .fetchRoleMembers(mChatRoom, false, new HMR.CompletionArg<Map<String, List<User>>>() {                    @Override                    public void onSuccess(Map<String, List<User>> arg) {                        Log.d(TAG, \"onSuccess: \" + JSON.toJSONString(arg));                        owner = arg.get(\"owner\").get(0);                        mRemoteUid = owner.getId();                        HummerManager.isOwner = HMR.getMe().getId() == owner.getId() ? true : false;                        if (!HummerManager.isOwner) {                            //\u89c2\u4f17\u72b6\u6001,\u8fdc\u7aef\u7528\u6237\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u623f\u4e3buid                            HummerManager.getInstance().isOwnerOnLine(mChatRoom, String.valueOf(owner.getId()));                            //\u89c2\u4f17\u9ed8\u8ba4\u8ba2\u9605\u623f\u4e3b                            FacadeRtcManager.getInstance().addSubscribe(roomId + owner.getId(), String.valueOf(owner.getId()));                            checkChatMuted();                        } else {                            HummerManager.isOwnerOnLine = true;                            //\u623f\u4e3b\u52a8\u6001\u4fee\u6539\u7ea6\u675f\u6761\u4ef6                            constraintSet.clone(ChatRoomActivity.this, R.layout.activity_chatroom);                            constraintSet.connect(mLocalView.getId(), ConstraintSet.LEFT, ConstraintSet.PARENT_ID, ConstraintSet.LEFT);                            constraintSet.connect(mLocalView.getId(), ConstraintSet.RIGHT, mRemoteView.getId(), ConstraintSet.LEFT);                            constraintSet.connect(mRemoteView.getId(), ConstraintSet.RIGHT, ConstraintSet.PARENT_ID, ConstraintSet.RIGHT);                            constraintSet.connect(mRemoteView.getId(), ConstraintSet.LEFT, mLocalView.getId(), ConstraintSet.RIGHT);                            constraintSet.applyTo(cl);                            //Group\u5728\u4f7f\u7528\u540e\uff0c\u4f1a\u5bf9\u5b83\u6240\u7ba1\u7406\u7684\u6240\u6709view\u7684\u663e\u793a\u8fdb\u884c\u91cd\u65b0\u8d4b\u503c\uff0c\u91cd\u65b0\u8bbe\u7f6e\u5b83\u6240\u7ba1\u7406\u7684ID\u663e\u793a\u6548\u679c                            mGroupOwner.setVisibility(View.VISIBLE);                            mGroupVideo.setVisibility(View.VISIBLE);                            dissMissDialogProgress();                        }                    }                    @Override                    public void onFailed(Error err) {                        dissMissDialogProgress();                    }                });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "checkChatMuted", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkChatMuted() {        HMR.getService(ChatRoomService.class).                isMuted(mChatRoom, new User(HMR.getMe().getId()), new HMR.CompletionArg<Boolean>() {                    @Override                    public void onSuccess(Boolean arg) {                        if (arg != null) {                            isChatMuted = arg;                        }                        dissMissDialogProgress();                    }                    @Override                    public void onFailed(Error err) {                        dissMissDialogProgress();                    }                });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View view) {        switch (view.getId()) {            case R.id.img_switchcamera:                switchFrontCamera();                break;            case R.id.iv_microphone:                switchMicrophone();                break;            case R.id.tv_handle_live:                switchVideoLive();                break;            case R.id.tv_subscribe_selector:                selectrorSubscribe();                break;            case R.id.iv_feedback:                startActivity(new Intent(ChatRoomActivity.this, FeedBackActivity.class));                break;            case R.id.iv_chat:                keyBoardChangeView(true);                openKeyBoard(mEtMessage);                break;            case R.id.iv_closeroom:                leveRoom();                break;            case R.id.tv_livemode_selector:                modeAdapter.resetData(userLiveModes);                popViewStatus(true);                showPopView(userLiveModes.size());                break;            case R.id.tv_chatroom_members:                toMembersActivity();                break;            case R.id.pop_tv_cancel:                if (mCustomPopWindow != null) {                    mCustomPopWindow.dissmiss();                }                break;            case R.id.iv_send:                if (!this.isChatMuted) {                    sendMessage(mEtMessage.getText().toString(), String.valueOf(HMR.getMe().getId()));                    hideKeyboard();                } else {                    Toast.makeText(this, \"\u60a8\u5df2\u88ab\u623f\u4e3b\u7981\u8a00\", Toast.LENGTH_SHORT).show();                    hideKeyboard();                }                break;        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "toMembersActivity", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void toMembersActivity() {        Intent intent = new Intent(ChatRoomActivity.this, MemberListActivity.class);        intent.putExtra(Constant.ROOMID_KEY, roomId);        intent.putExtra(Constant.ROOMOWNERID_KEY, owner.getId());        intent.putExtra(Constant.ROOMISLIVE_KEY, isLive);        intent.putExtra(Constant.ROOMISSUBCRIBE_KEY, isSubscribeRemote);        intent.putExtra(Constant.ROOMISSUBCRIBE_MREMOTEUID_KEY, mRemoteUid);        startActivity(intent);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "selectrorSubscribe", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void selectrorSubscribe() {        if (!isSubscribeRemote) {            showDialogProgress();            HMR.getService(ChatRoomService.class).fetchMembers(mChatRoom, 100, 0, new HMR.CompletionArg<List<User>>() {                @Override                public void onSuccess(List<User> users) {                    userMembers.clear();                    for (int i = 0; i < users.size(); i++) {                        if (users.get(i).getId() != HMR.getMe().getId()) {                            UserMode userMode = new UserMode();                            userMode.setModeTip(String.valueOf(users.get(i).getId()));                            userMode.setModeType(Constant.MEMBERS_MODETYPE);                            userMembers.add(userMode);                        }                    }                    if (!userMembers.isEmpty()) {                        modeAdapter.resetData(userMembers);                        popViewStatus(false);                        showPopView(userMembers.size());                    } else {                        Toast.makeText(ChatRoomActivity.this, \"\u623f\u95f4\u5185\u6682\u65e0\u5176\u4ed6\u4eba\", Toast.LENGTH_SHORT).show();                    }                    dissMissDialogProgress();                }                @Override                public void onFailed(Error err) {                    dissMissDialogProgress();                }            });        } else {            HummerManager.getInstance().sendSignalMessage(ChatRoomActivity.this, mChatRoom, LIVE_CONNECT_CANCEL, new User(mRemoteUid));            switchSubscribe();        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "popViewStatus", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void popViewStatus(boolean isMode) {        popTvStopHead.setVisibility(isMode ? View.GONE : View.VISIBLE);        popTvStopCancel.setVisibility(isMode ? View.VISIBLE : View.GONE);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "switchSubscribe", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void switchSubscribe() {        isSubscribeRemote = !isSubscribeRemote;        remoteLiveRoomId = roomId + mRemoteUid;        if (isSubscribeRemote) {            mTvSubscribeSelector.setText(\"\u53d6\u6d88\u8ba2\u9605\");            mTvSubscribeSelector.setCompoundDrawables(null, null, null, null);            mTvSubscribeSelector.setGravity(Gravity.CENTER);            FacadeRtcManager.getInstance().addSubscribe(remoteLiveRoomId, String.valueOf(mRemoteUid));        } else {            mTvSubscribeSelector.setText(\"\u8ba2\u9605\");            Drawable drawable = MyApplication.getInstance().getResources().getDrawable(R.drawable.ic_pull);            drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());            mTvSubscribeSelector.setCompoundDrawables(null, null, drawable, null);            mRemoteView.setVisibility(View.GONE);            mTvRemoteUid.setVisibility(View.GONE);            mRemoteViewNet.setVisibility(View.GONE);            FacadeRtcManager.getInstance().removeSubscribe(remoteLiveRoomId, String.valueOf(mRemoteUid));        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "switchVideoLive", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void switchVideoLive() {        isLive = !isLive;        if (isLive) {            FacadeRtcManager.getInstance().startPush(mLocalView, String.valueOf(HMR.getMe().getId()), liveMode);            mTvHandleLive.setText(\"\u5173\u95ed\u76f4\u64ad\");            mTVLocalUid.setText(String.valueOf(HMR.getMe().getId()));            mLocalView.setVisibility(View.VISIBLE);            mTVLocalUid.setVisibility(View.VISIBLE);            mLocalView.getSurfaceView().setVisibility(View.VISIBLE);            mGroupLive.setVisibility(View.VISIBLE);            mGroupVideo.setVisibility(View.VISIBLE);        } else {            if (isStopMicrophone) {                switchMicrophone();            }            FacadeRtcManager.getInstance().stopPush();            mTvHandleLive.setText(\"\u5f00\u59cb\u76f4\u64ad\");            mLocalView.setVisibility(View.GONE);            mTVLocalUid.setVisibility(View.GONE);            mLocalView.getSurfaceView().setVisibility(View.GONE);            mGroupLive.setVisibility(View.GONE);            if (!HummerManager.isOwner) {                mGroupVideo.setVisibility(View.GONE);            }            mLocalViewNet.setVisibility(View.GONE);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "leveRoom", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void leveRoom() {        if (isLive) {            Toast.makeText(this, \"\u8bf7\u5173\u95ed\u76f4\u64ad\u518d\u9000\u51fa\u623f\u95f4\", Toast.LENGTH_SHORT).show();            return;        }        if (isSubscribeRemote) {            Toast.makeText(this, \"\u8bf7\u53d6\u6d88\u8ba2\u9605\u518d\u9000\u51fa\u623f\u95f4\", Toast.LENGTH_SHORT).show();            return;        }        showDialogProgress();        HMR.getService(ChatRoomService.class).leave(mChatRoom, new HMR.Completion() {            @Override            public void onSuccess() {                leaveThunderRoom();            }            @Override            public void onFailed(Error err) {                dissMissDialogProgress();                if (err.code == Error.Code.ResourceNotFound) {                    Toast.makeText(ChatRoomActivity.this, err.desc, Toast.LENGTH_SHORT).show();                    finish();                }            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "switchFrontCamera", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void switchFrontCamera() {        FacadeRtcManager.getInstance().switchFrontCamera(!bFront);        bFront = !bFront;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "switchMicrophone", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void switchMicrophone() {        isStopMicrophone = !isStopMicrophone;        mImgMicrophone.setImageDrawable(getResources().getDrawable(isStopMicrophone ? R.drawable.img_microphone_close : R.drawable.img_microphone_open));        FacadeRtcManager.getInstance().stopLocalAudioStream(isStopMicrophone);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onBasicInfoChanged", "params": ["ChatRoom", "Map<ChatRoomInfo,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBasicInfoChanged(@NonNull ChatRoom chatRoom, @NonNull Map<ChatRoomInfo.BasicInfoType, String> propInfo) {    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onChatRoomDismissed", "params": ["ChatRoom", "User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onChatRoomDismissed(@NonNull ChatRoom chatRoom, @NonNull User member) {        if (Long.parseLong(roomId) == chatRoom.getId()) {            if (!HummerManager.isOwner) {//\u5f53\u623f\u4e3b\u81ea\u5df1\u9500\u6bc1\uff0c\u8fc7\u6ee4                HummerManager.closeChatRoom = true;            }            ChatRoomActivity.this.finish();        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onMemberJoined", "params": ["ChatRoom", "List<User>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMemberJoined(@NonNull ChatRoom chatRoom, @NonNull List<User> members) {        Log.d(TAG, \"onMemberJoined: \");        if (Long.parseLong(roomId) == chatRoom.getId()) {            checkMember(members, true);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onMemberLeaved", "params": ["ChatRoom", "List<User>", "int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMemberLeaved(@NonNull ChatRoom chatRoom, @NonNull List<User> members, int type, @NonNull String reason) {        Log.d(TAG, \"onMemberLeaved: \");        if (Long.parseLong(roomId) == chatRoom.getId()) {            checkMember(members, false);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onMemberCountChanged", "params": ["ChatRoom", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMemberCountChanged(@NonNull ChatRoom chatRoom, int count) {        Log.d(TAG, \"onMemberCountChanged: \");    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onRoleAdded", "params": ["ChatRoom", "String", "User", "User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRoleAdded(@NonNull ChatRoom chatRoom, @NonNull String role, @NonNull User admin, @NonNull User fellow) {    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onRoleRemoved", "params": ["ChatRoom", "String", "User", "User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRoleRemoved(@NonNull ChatRoom chatRoom, @NonNull String role, @NonNull User admin, @NonNull User fellow) {    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onMemberKicked", "params": ["ChatRoom", "User", "List<User>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMemberKicked(@NonNull ChatRoom chatRoom, @NonNull User admin, @NonNull List<User> member, @NonNull String reason) {        Log.e(\"TAGGG\", admin.getId() + \"--------------------ownerID=\" + owner.getId() + \"---------getMEID\" + HMR.getMe().getId());        if (Long.parseLong(roomId) == chatRoom.getId()) {            HummerManager.getInstance().onMemberKicked(ChatRoomActivity.this, mChatRoom, admin, member, adapter, recyclerView);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onMemberMuted", "params": ["ChatRoom", "User", "Set<User>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMemberMuted(@NonNull ChatRoom chatRoom, @NonNull User operator, @NonNull Set<User> members, @Nullable String reason) {        checkMuted(members, true);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onMemberUnmuted", "params": ["ChatRoom", "User", "Set<User>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMemberUnmuted(@NonNull ChatRoom chatRoom, @NonNull User operator, @NonNull Set<User> members, @Nullable String reason) {        checkMuted(members, false);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onUserInfoSet", "params": ["ChatRoom", "User", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUserInfoSet(@NonNull ChatRoom chatRoom, @NonNull User user, @NonNull Map<String, String> infoMap) {    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onUserInfoDeleted", "params": ["ChatRoom", "User", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUserInfoDeleted(@NonNull ChatRoom chatRoom, @NonNull User user, @NonNull Map<String, String> infoMap) {    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "checkMuted", "params": ["Set<User>", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkMuted(Set<User> members, boolean isMuted) {        for (User user : members) {            if (user.getId() == HMR.getMe().getId()) {                this.isChatMuted = isMuted;            }            ChatMessage chatMessage = new ChatMessage();            chatMessage.setMsgType(adapter.TYPE_ITEM_CHATMESSAGE_TIP);            chatMessage.setMessage(user.getId() + (isMuted ? \"\u88ab\u7981\u8a00\" : \"\u6062\u590d\u53d1\u8a00\"));            adapter.addNewData(chatMessage);            recyclerView.scrollToPosition(adapter.getItemCount() - 1);//\u6b64\u53e5\u4e3a\u8bbe\u7f6e\u663e\u793a        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "checkMember", "params": ["List<User>", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkMember(List<User> members, boolean isJoin) {        if (members != null && members.size() >= 1) {            Log.d(TAG, \"checkMember: \" + JSON.toJSONString(members));            for (int i = 0; i < members.size(); i++) {                if (!isJoin && HummerManager.isOwner && members.get(i).getId() == mRemoteUid && isSubscribeRemote) {//\u8fde\u9ea6\u7528\u6237\u5f02\u5e38\u79bb\u5f00\u623f\u95f4\u5904\u7406,\u88ab\u8e22/\u88ab\u6324\u4e0b\u7ebf                    switchSubscribe();                }                if (owner != null && members.get(i).getId() == owner.getId()) {                    HummerManager.isOwnerOnLine = isJoin;                    if (!isJoin && !HummerManager.isOwner && isLive) {//\u8fde\u9ea6\u7528\u6237\u79bb\u5f00\u623f\u95f4\u89c2\u4f17\u81ea\u52a8\u53d6\u6d88\u8fde\u9ea6                        switchVideoLive();                    }                }                if (!isJoin && HMR.getMe().getId() == members.get(i).getId()) {//\u65ad\u7f51\u91cd\u8054                    reJoinChatroom();                }                if (HMR.getMe().getId() != members.get(i).getId()) {//\u4e0d\u5904\u7406\u672c\u5730\u52a0\u5165\u56de\u8c03\u4fe1\u606f                    ChatMessage chatMessage = new ChatMessage();                    chatMessage.setMsgType(adapter.TYPE_ITEM_CHATMESSAGE_TIP);                    chatMessage.setMessage(members.get(i).getId() + (isJoin ? \"\u52a0\u5165\" : \"\u79bb\u5f00\") + \"\u623f\u95f4\");                    adapter.addNewData(chatMessage);                    recyclerView.scrollToPosition(adapter.getItemCount() - 1);//\u6b64\u53e5\u4e3a\u8bbe\u7f6e\u663e\u793a                }            }        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        super.onDestroy();        if (confirmDialog != null) {            confirmDialog.dismiss();        }        leaveThunderRoom();        HMR.getService(ChatService.class).removeMessageListener(null, messageListener);        HMR.getService(ChatRoomService.class).removeMemberListener(this);        HMR.getService(ChatRoomService.class).removeListener(this);        HMR.getService(ChannelStateService.class).removeChannelStateListener(this::onUpdateChannelState);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "leaveThunderRoom", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void leaveThunderRoom() {        if (isStopMicrophone) {//\u6062\u590d\u9ea6\u514b\u98ce\u72b6\u6001            switchMicrophone();        }        if (!bFront) {//\u9ed8\u8ba4\u8bbe\u7f6e\u524d\u7f6e\u6444\u50cf\u5934            switchFrontCamera();        }        FacadeRtcManager.getInstance().leaveRoom();    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "parseMsg", "params": ["Message"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void parseMsg(Message message) {        String content = \"\";        long sender = message.getSender().getId();        Log.d(TAG, \"afterReceivingMessage: \" + message.getContent().getClass().getCanonicalName());        if (message.getContent() instanceof Text) {            content = ((Text) message.getContent()).getText();            ChatMessage chatMessage = new ChatMessage();            chatMessage.setUid(String.valueOf(sender));            chatMessage.setMsgType(adapter.TYPE_ITEM_CHATMESSAGE_OTHER);            chatMessage.setMessage(content);            adapter.addNewData(chatMessage);            recyclerView.scrollToPosition(adapter.getItemCount() - 1);//\u6b64\u53e5\u4e3a\u8bbe\u7f6e\u663e\u793a        } else if (message.getContent() instanceof ChatRoomService.Signal) {            content = ((ChatRoomService.Signal) message.getContent()).content;            switch (content) {                case Constant.LIVE_CONNECT_APPLY:                    if (message.getSender().getId() == owner.getId()) {                        showHandleConfirm(\"\u623f\u4e3b\u9080\u8bf7\u60a8\u5f00\u64ad\", owner);                    }                    break;                case Constant.LIVE_CONNECT_CANCEL:                    if (message.getSender().getId() == owner.getId()) {                        Toast.makeText(this, \"\u623f\u4e3b\u5df2\u53d6\u6d88\u8ba2\u9605\", Toast.LENGTH_SHORT).show();                        if (isLive) {                            switchVideoLive();                        }                    }                    break;                case Constant.LIVE_CONNECT_ACCEPT:                    if (message.getSender().getId() != owner.getId()) {                        dissMissDialogProgress();                        if (!isSubscribeRemote) {                            switchSubscribe();                        }                    }                    break;                case Constant.LIVE_CONNECT_REFUSE:                    if (message.getSender().getId() != owner.getId()) {                        dissMissDialogProgress();                        Toast.makeText(this, message.getSender().getId() + \"\u7528\u6237\u62d2\u7edd\u4e86\u4f60\u7684\u9080\u8bf7\", Toast.LENGTH_SHORT).show();                    }                    break;            }        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "showHandleConfirm", "params": ["String", "User"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showHandleConfirm(String des, User user) {        if (confirmDialog != null && confirmDialog.isShowing()) {            return;        }        confirmDialog = new ConfirmDialog(this, new ConfirmDialog.OnConfirmCallback() {            @Override            public void onSure() {                if (!isLive) {                    switchVideoLive();                }                HummerManager.getInstance().sendSignalMessage(ChatRoomActivity.this, mChatRoom, Constant.LIVE_CONNECT_ACCEPT, user);                confirmDialog.dismiss();            }            @Override            public void onCancel() {                HummerManager.getInstance().sendSignalMessage(ChatRoomActivity.this, mChatRoom, Constant.LIVE_CONNECT_REFUSE, user);            }        });        confirmDialog.setTitle(\"\u63d0\u793a\");        confirmDialog.setDesc(des);        confirmDialog.setButton(\"\u62d2\u7edd\", \"\u540c\u610f\");        confirmDialog.show();    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "sendMessage", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendMessage(String content, String sender) {        mEtMessage.getText().clear();        ChatMessage chatMessage = new ChatMessage();        chatMessage.setUid(sender);        chatMessage.setMsgType(adapter.TYPE_ITEM_CHATMESSAGE_OTHER);        chatMessage.setMessage(content);        chatMessage.setSend(true);        chatMessage.setLoading(true);        chatMessage.setMuted(this.isChatMuted);        adapter.addNewData(chatMessage);        recyclerView.scrollToPosition(adapter.getItemCount() - 1);//\u6b64\u53e5\u4e3a\u8bbe\u7f6e\u663e\u793a        int postion = adapter.getItemCount() - 1;        Message msg = new Message(mChatRoom, new Text(content));        HMR.getService(ChatService.class).send(msg, new HMR.Completion() {            @Override            public void onSuccess() {                chatMessage.setSend(true);                chatMessage.setLoading(false);                adapter.notifyItemChanged(postion, chatMessage);            }            @Override            public void onFailed(Error error) {                Log.d(TAG, \"onFailed:  \" + error.toString());                if (error.code == Error.Code.kForbiddenException) {                    isChatMuted = true;                    chatMessage.setMuted(true);                }                if (error.code == Error.Code.ResourceNotFound) {                    Toast.makeText(ChatRoomActivity.this, error.desc, Toast.LENGTH_SHORT).show();                    finish();                }                chatMessage.setSend(false);                chatMessage.setLoading(false);                adapter.notifyItemChanged(postion, chatMessage);            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "onUpdateChannelState", "params": ["ChannelStateService", "ChannelStateService"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdateChannelState(ChannelStateService.ChannelState fromState, ChannelStateService.ChannelState toState) {        Log.d(TAG, \"onUpdateChannelState-----fromState=\" + fromState + \"   --toState=\" + toState);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "reJoinChatroom", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void reJoinChatroom() {        HMR.getService(ChatRoomService.class).join(new ChatRoom(Long.parseLong(roomId)), new HashMap<>(16), new Challenges.JoiningCompletion() {            @Override            public void onReceiveChallenge(Challenges.Password challenge) {            }            @Override            public void onReceiveChallenge(Challenges.AppChallenge challenge) {            }            @Override            public void onSucceed() {            }            @Override            public void onFailure(@NonNull Error err) {            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/ChatRoomActivity.java", "stars": "2", "class": {"name": "ChatRoomActivity", "extends": "BaseActivity", "implements": ["View", "ChatRoomService", "ChatRoomService", "ChannelStateService"], "modifiers": ["public"]}}, {"method_name": "cast", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object cast(Class<?> target, Type[] neededGenerics, Object value) {        Map<Object, Object> raw = (Map<Object, Object>) value;        Map<Object, Object> values = new HashMap<>();        for (Map.Entry<Object, Object> entry : raw.entrySet()) {            values.put(                    ConfigUtil.smartCast(neededGenerics[0], entry.getKey()),                    ConfigUtil.smartCast(neededGenerics[1], entry.getValue()));        }        return values;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/MapTypeConversion.java", "stars": "3", "class": {"name": "MapTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "isApplicable", "params": ["Class<?>", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isApplicable(Class<?> target, Object value) {        return target.equals(Map.class) && value instanceof Map;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/MapTypeConversion.java", "stars": "3", "class": {"name": "MapTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParametersRequired", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getParametersRequired() {        return 2;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/MapTypeConversion.java", "stars": "3", "class": {"name": "MapTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "mergePCMFilesToWAVFile", "params": ["List<String>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean mergePCMFilesToWAVFile(List<String> filePathList,                                                 String destinationPath) {        File[] file = new File[filePathList.size()];        byte buffer[] = null;        int TOTAL_SIZE = 0;        int fileNum = filePathList.size();        for (int i = 0; i < fileNum; i++) {            file[i] = new File(filePathList.get(i));            TOTAL_SIZE += file[i].length();        }        // \u586b\u5165\u53c2\u6570\uff0c\u6bd4\u7279\u7387\u7b49\u7b49\u3002\u8fd9\u91cc\u7528\u7684\u662f16\u4f4d\u5355\u58f0\u9053 8000 hz        WaveHeader header = new WaveHeader();        // \u957f\u5ea6\u5b57\u6bb5 = \u5185\u5bb9\u7684\u5927\u5c0f\uff08TOTAL_SIZE) +        // \u5934\u90e8\u5b57\u6bb5\u7684\u5927\u5c0f(\u4e0d\u5305\u62ec\u524d\u97624\u5b57\u8282\u7684\u6807\u8bc6\u7b26RIFF\u4ee5\u53cafileLength\u672c\u8eab\u76844\u5b57\u8282)        header.fileLength = TOTAL_SIZE + (44 - 8);        header.FmtHdrLeth = 16;        header.BitsPerSample = 16;        header.Channels = 2;        header.FormatTag = 0x0001;        header.SamplesPerSec = 8000;        header.BlockAlign = (short) (header.Channels * header.BitsPerSample / 8);        header.AvgBytesPerSec = header.BlockAlign * header.SamplesPerSec;        header.DataHdrLeth = TOTAL_SIZE;        byte[] h = null;        try {            h = header.getHeader();        } catch (IOException e1) {            Log.e(\"PcmToWav\", e1.getMessage());            return false;        }        if (h.length != 44) // WAV\u6807\u51c6\uff0c\u5934\u90e8\u5e94\u8be5\u662f44\u5b57\u8282,\u5982\u679c\u4e0d\u662f44\u4e2a\u5b57\u8282\u5219\u4e0d\u8fdb\u884c\u8f6c\u6362\u6587\u4ef6            return false;        //\u5148\u5220\u9664\u76ee\u6807\u6587\u4ef6        File destfile = new File(destinationPath);        if (destfile.exists())            destfile.delete();        //\u5408\u6210\u6240\u6709\u7684pcm\u6587\u4ef6\u7684\u6570\u636e\uff0c\u5199\u5230\u76ee\u6807\u6587\u4ef6        try {            buffer = new byte[1024 * 4]; // Length of All Files, Total Size            InputStream inStream = null;            OutputStream ouStream = null;            ouStream = new BufferedOutputStream(new FileOutputStream(                    destinationPath));            ouStream.write(h, 0, h.length);            for (int j = 0; j < fileNum; j++) {                inStream = new BufferedInputStream(new FileInputStream(file[j]));                int size = inStream.read(buffer);                while (size != -1) {                    ouStream.write(buffer);                    size = inStream.read(buffer);                }                inStream.close();            }            ouStream.close();        } catch (FileNotFoundException e) {            Log.e(\"PcmToWav\", e.getMessage());            return false;        } catch (IOException ioe) {            Log.e(\"PcmToWav\", ioe.getMessage());            return false;        }        clearFiles(filePathList);        Log.i(\"PcmToWav\", \"mergePCMFilesToWAVFile  success!\" + new SimpleDateFormat(\"yyyy-MM-dd hh:mm\").format(new Date()));        return true;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/PcmToWav.java", "stars": "2", "class": {"name": "PcmToWav", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "makePCMFileToWAVFile", "params": ["String", "String", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean makePCMFileToWAVFile(String pcmPath, String destinationPath, boolean deletePcmFile) {        byte buffer[] = null;        int TOTAL_SIZE = 0;        File file = new File(pcmPath);        if (!file.exists()) {            return false;        }        TOTAL_SIZE = (int) file.length();        // \u586b\u5165\u53c2\u6570\uff0c\u6bd4\u7279\u7387\u7b49\u7b49\u3002\u8fd9\u91cc\u7528\u7684\u662f16\u4f4d\u5355\u58f0\u9053 8000 hz        WaveHeader header = new WaveHeader();        // \u957f\u5ea6\u5b57\u6bb5 = \u5185\u5bb9\u7684\u5927\u5c0f\uff08TOTAL_SIZE) +        // \u5934\u90e8\u5b57\u6bb5\u7684\u5927\u5c0f(\u4e0d\u5305\u62ec\u524d\u97624\u5b57\u8282\u7684\u6807\u8bc6\u7b26RIFF\u4ee5\u53cafileLength\u672c\u8eab\u76844\u5b57\u8282)        header.fileLength = TOTAL_SIZE + (44 - 8);        header.FmtHdrLeth = 16;        header.BitsPerSample = 16;        header.Channels = 2;        header.FormatTag = 0x0001;        header.SamplesPerSec = 8000;        header.BlockAlign = (short) (header.Channels * header.BitsPerSample / 8);        header.AvgBytesPerSec = header.BlockAlign * header.SamplesPerSec;        header.DataHdrLeth = TOTAL_SIZE;        byte[] h = null;        try {            h = header.getHeader();        } catch (IOException e1) {            Log.e(\"PcmToWav\", e1.getMessage());            return false;        }        if (h.length != 44) // WAV\u6807\u51c6\uff0c\u5934\u90e8\u5e94\u8be5\u662f44\u5b57\u8282,\u5982\u679c\u4e0d\u662f44\u4e2a\u5b57\u8282\u5219\u4e0d\u8fdb\u884c\u8f6c\u6362\u6587\u4ef6            return false;        //\u5148\u5220\u9664\u76ee\u6807\u6587\u4ef6        File destfile = new File(destinationPath);        if (destfile.exists())            destfile.delete();        //\u5408\u6210\u6240\u6709\u7684pcm\u6587\u4ef6\u7684\u6570\u636e\uff0c\u5199\u5230\u76ee\u6807\u6587\u4ef6        try {            buffer = new byte[1024 * 4]; // Length of All Files, Total Size            InputStream inStream = null;            OutputStream ouStream = null;            ouStream = new BufferedOutputStream(new FileOutputStream(                    destinationPath));            ouStream.write(h, 0, h.length);            inStream = new BufferedInputStream(new FileInputStream(file));            int size = inStream.read(buffer);            while (size != -1) {                ouStream.write(buffer);                size = inStream.read(buffer);            }            inStream.close();            ouStream.close();        } catch (FileNotFoundException e) {            Log.e(\"PcmToWav\", e.getMessage());            return false;        } catch (IOException ioe) {            Log.e(\"PcmToWav\", ioe.getMessage());            return false;        }        if (deletePcmFile) {            file.delete();        }        Log.i(\"PcmToWav\", \"makePCMFileToWAVFile  success!\" + new SimpleDateFormat(\"yyyy-MM-dd hh:mm\").format(new Date()));        return true;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/PcmToWav.java", "stars": "2", "class": {"name": "PcmToWav", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearFiles", "params": ["List<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void clearFiles(List<String> filePathList) {        for (int i = 0; i < filePathList.size(); i++) {            File file = new File(filePathList.get(i));            if (file.exists()) {                file.delete();            }        }    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/PcmToWav.java", "stars": "2", "class": {"name": "PcmToWav", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createRawKey", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[] createRawKey() throws IOException {        try {            PBKDF2Parameters params = new PBKDF2Parameters(algo, CHAR_ENCODING, salt, iterations);            int keyLength = ivlen + 2 * keylen;            PBKDF2Engine pbkdf2Engine = new PBKDF2Engine(params);            return pbkdf2Engine.deriveKey(password, keyLength);        } catch (Exception ex) {            throw new IOException(\"Crypto failure: \" + ex.getMessage());        }    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createKeys", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createKeys() throws IOException {        final byte[] rawKeys = createRawKey();        this.encryptionKey = getEncryptionKey(rawKeys);        this.hmacKey = getHMACKey(rawKeys);        this.iv = getIV(rawKeys);    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEncryptionKey", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[] getEncryptionKey(byte[] keys) {        return Arrays.copyOfRange(keys, 0, keylen);    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHMACKey", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[] getHMACKey(byte[] keys) {        return Arrays.copyOfRange(keys, keylen, keylen * 2);    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIV", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[] getIV(byte[] keys) {        return Arrays.copyOfRange(keys, keylen * 2, keylen * 2 + ivlen);    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateSalt", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[] generateSalt(int length) {        byte[] salt = new byte[length];        new Random().nextBytes(salt);        return salt;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSalt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getSalt() {        return salt;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEncryptionKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getEncryptionKey() {        return encryptionKey;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHmacKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getHmacKey() {        return hmacKey;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIv", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getIv() {        return iv;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/decoders/impl/EncryptionKeychain.java", "stars": "7", "class": {"name": "EncryptionKeychain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createRequestProcessor", "params": ["RequestEvent"], "throws": null, "modifiers": ["public"], "return_type": "ISIPRequestProcessor", "snippet": "\tpublic ISIPRequestProcessor createRequestProcessor(RequestEvent evt) {\t\tRequest request = evt.getRequest();\t\tString method = request.getMethod();\t\t\t\tif (Request.INVITE.equals(method)) {\t\t\treturn inviteRequestProcessor;\t\t} else if (Request.REGISTER.equals(method)) {\t\t\treturn registerRequestProcessor;\t\t} else if (Request.SUBSCRIBE.equals(method)) {\t\t\treturn subscribeRequestProcessor;\t\t} else if (Request.ACK.equals(method)) {\t\t\treturn ackRequestProcessor;\t\t} else if (Request.BYE.equals(method)) {\t\t\treturn byeRequestProcessor;\t\t} else if (Request.CANCEL.equals(method)) {\t\t\treturn cancelRequestProcessor;\t\t} else if (Request.MESSAGE.equals(method)) {\t\t\treturn messageRequestProcessor;\t\t} else {\t\t\treturn otherRequestProcessor;\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/SIPProcessorFactory.java", "stars": "29", "class": {"name": "SIPProcessorFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createResponseProcessor", "params": ["ResponseEvent"], "throws": null, "modifiers": ["public"], "return_type": "ISIPResponseProcessor", "snippet": "\tpublic ISIPResponseProcessor createResponseProcessor(ResponseEvent evt) {\t\tResponse response = evt.getResponse();\t\tCSeqHeader cseqHeader = (CSeqHeader) response.getHeader(CSeqHeader.NAME);\t\tString method = cseqHeader.getMethod();\t\tif(Request.INVITE.equals(method)){\t\t\treturn inviteResponseProcessor;\t\t} else if (Request.BYE.equals(method)) {\t\t\treturn byeResponseProcessor;\t\t} else if (Request.CANCEL.equals(method)) {\t\t\treturn cancelResponseProcessor;\t\t} else {\t\t\treturn otherResponseProcessor;\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/SIPProcessorFactory.java", "stars": "29", "class": {"name": "SIPProcessorFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) throws Exception {    @SuppressWarnings(\"unused\")    HadoopJavaJobRunnerMain wrapper = new HadoopJavaJobRunnerMain();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJobRunnerMain.java", "stars": "18", "class": {"name": "HadoopJavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runMethodAsUser", "params": ["Properties", "Object", "String", "UserGroupInformation"], "throws": ["IOException", "InterruptedException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void runMethodAsUser(Properties props, final Object obj,      final String runMethod, final UserGroupInformation ugi)      throws IOException, InterruptedException {    ugi.doAs(new PrivilegedExceptionAction<Void>() {      @Override      public Void run() throws Exception {        Configuration conf = new Configuration();        if (System.getenv(HADOOP_TOKEN_FILE_LOCATION) != null) {          conf.set(MAPREDUCE_JOB_CREDENTIALS_BINARY,              System.getenv(HADOOP_TOKEN_FILE_LOCATION));        }        runMethod(obj, runMethod);        return null;      }    });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJobRunnerMain.java", "stars": "18", "class": {"name": "HadoopJavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runMethod", "params": ["Object", "String"], "throws": ["IllegalAccessException", "InvocationTargetException", "NoSuchMethodException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void runMethod(Object obj, String runMethod)      throws IllegalAccessException, InvocationTargetException,      NoSuchMethodException {    obj.getClass().getMethod(runMethod, new Class<?>[] {}).invoke(obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJobRunnerMain.java", "stars": "18", "class": {"name": "HadoopJavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "outputGeneratedProperties", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void outputGeneratedProperties(Props outputProperties) {    _logger.info(\"Outputting generated properties to \"        + ProcessJob.JOB_OUTPUT_PROP_FILE);    if (outputProperties == null) {      _logger.info(\"  no gend props\");      return;    }    for (String key : outputProperties.getKeySet()) {      _logger          .info(\"  gend prop \" + key + \" value:\" + outputProperties.get(key));    }    String outputFileStr = System.getenv(ProcessJob.JOB_OUTPUT_PROP_FILE);    if (outputFileStr == null) {      return;    }    Map<String, String> properties = new LinkedHashMap<String, String>();    for (String key : outputProperties.getKeySet()) {      properties.put(key, outputProperties.get(key));    }    Writer writer = null;    try {      writer = new BufferedWriter(new FileWriter(outputFileStr));      JSONUtils.writePropsNoJarDependency(properties, writer);    } catch (Exception e) {      throw new RuntimeException(\"Unable to store output properties to: \" + outputFileStr);    } finally {      if (writer != null) {        try {          writer.close();        } catch (IOException e) {        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJobRunnerMain.java", "stars": "18", "class": {"name": "HadoopJavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelJob", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelJob() {    if (_isFinished) {      return;    }    _logger.info(\"Attempting to call cancel on this job\");    if (_javaObject != null) {      Method method = null;      try {        method = _javaObject.getClass().getMethod(_cancelMethod);      } catch (SecurityException e) {      } catch (NoSuchMethodException e) {      }      if (method != null)        try {          method.invoke(_javaObject);        } catch (Exception e) {          if (_logger != null) {            _logger.error(\"Cancel method failed! \", e);          }        }      else {        throw new RuntimeException(\"Job \" + _jobName            + \" does not have cancel method \" + _cancelMethod);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJobRunnerMain.java", "stars": "18", "class": {"name": "HadoopJavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObjectAsProxyUser", "params": ["Properties", "Logger", "String", "String", "UserGroupInformation"], "throws": ["Exception"], "modifiers": ["private", "static"], "return_type": "Object", "snippet": "  private static Object getObjectAsProxyUser(final Properties prop,      final Logger logger, final String jobName, final String className,      final UserGroupInformation ugi) throws Exception {    Object obj = ugi.doAs(new PrivilegedExceptionAction<Object>() {      @Override      public Object run() throws Exception {        return getObject(jobName, className, prop, logger);      }    });    return obj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJobRunnerMain.java", "stars": "18", "class": {"name": "HadoopJavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["String", "String", "Properties", "Logger"], "throws": ["Exception"], "modifiers": ["private", "static"], "return_type": "Object", "snippet": "  private static Object getObject(String jobName, String className,      Properties properties, Logger logger) throws Exception {    Class<?> runningClass =        HadoopJavaJobRunnerMain.class.getClassLoader().loadClass(className);    if (runningClass == null) {      throw new Exception(\"Class \" + className          + \" was not found. Cannot run job.\");    }    Class<?> propsClass = null;    for (String propClassName : PROPS_CLASSES) {      try {        propsClass =            HadoopJavaJobRunnerMain.class.getClassLoader().loadClass(                propClassName);      } catch (ClassNotFoundException e) {      }      if (propsClass != null          && getConstructor(runningClass, String.class, propsClass) != null) {        // is this the props class        break;      }      propsClass = null;    }    Object obj = null;    if (propsClass != null        && getConstructor(runningClass, String.class, propsClass) != null) {      // Create props class      Constructor<?> propsCon =          getConstructor(propsClass, propsClass, Properties[].class);      Object props =          propsCon.newInstance(null, new Properties[] { properties });      Constructor<?> con =          getConstructor(runningClass, String.class, propsClass);      logger.info(\"Constructor found \" + con.toGenericString());      obj = con.newInstance(jobName, props);    } else if (getConstructor(runningClass, String.class, Properties.class) != null) {      Constructor<?> con =          getConstructor(runningClass, String.class, Properties.class);      logger.info(\"Constructor found \" + con.toGenericString());      obj = con.newInstance(jobName, properties);    } else if (getConstructor(runningClass, String.class, Map.class) != null) {      Constructor<?> con =          getConstructor(runningClass, String.class, Map.class);      logger.info(\"Constructor found \" + con.toGenericString());      HashMap<Object, Object> map = new HashMap<Object, Object>();      for (Map.Entry<Object, Object> entry : properties.entrySet()) {        map.put(entry.getKey(), entry.getValue());      }      obj = con.newInstance(jobName, map);    } else if (getConstructor(runningClass, String.class) != null) {      Constructor<?> con = getConstructor(runningClass, String.class);      logger.info(\"Constructor found \" + con.toGenericString());      obj = con.newInstance(jobName);    } else if (getConstructor(runningClass) != null) {      Constructor<?> con = getConstructor(runningClass);      logger.info(\"Constructor found \" + con.toGenericString());      obj = con.newInstance();    } else {      logger.error(\"Constructor not found. Listing available Constructors.\");      for (Constructor<?> c : runningClass.getConstructors()) {        logger.info(c.toGenericString());      }    }    return obj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJobRunnerMain.java", "stars": "18", "class": {"name": "HadoopJavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConstructor", "params": ["Class<?>", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Constructor<?>", "snippet": "  private static Constructor<?> getConstructor(Class<?> c, Class<?>... args) {    try {      Constructor<?> cons = c.getConstructor(args);      return cons;    } catch (NoSuchMethodException e) {      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJobRunnerMain.java", "stars": "18", "class": {"name": "HadoopJavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldProxy", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean shouldProxy(Properties props) {    String shouldProxy =        props.getProperty(HadoopSecurityManager.ENABLE_PROXYING);    return shouldProxy != null && shouldProxy.equals(\"true\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJobRunnerMain.java", "stars": "18", "class": {"name": "HadoopJavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStream", "params": ["String", "Object"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "\tpublic InputStream getStream(String imageUri, Object extra) throws IOException {\t\tswitch (Scheme.ofUri(imageUri)) {\t\t\tcase HTTP:\t\t\tcase HTTPS:\t\t\t\tthrow new IllegalStateException();\t\t\tdefault:\t\t\t\treturn wrappedDownloader.getStream(imageUri, extra);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/NetworkDeniedImageDownloader.java", "stars": "74", "class": {"name": "NetworkDeniedImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDebugEnabled() {    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java", "stars": "15", "class": {"name": "StdOutImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "isTraceEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isTraceEnabled() {    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java", "stars": "15", "class": {"name": "StdOutImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s, Throwable e) {    System.err.println(s);    e.printStackTrace(System.err);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java", "stars": "15", "class": {"name": "StdOutImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s) {    System.err.println(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java", "stars": "15", "class": {"name": "StdOutImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "debug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(String s) {    System.out.println(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java", "stars": "15", "class": {"name": "StdOutImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "trace", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void trace(String s) {    System.out.println(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java", "stars": "15", "class": {"name": "StdOutImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "warn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(String s) {    System.out.println(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java", "stars": "15", "class": {"name": "StdOutImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["Listener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(Listener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/manager/updater/ButterUpdateManager.java", "stars": "4", "class": {"name": "ButterUpdateManager", "extends": "Observable", "implements": null, "modifiers": ["public"]}}, {"method_name": "downloadFile", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void downloadFile(final String location) {        Request request = new Request.Builder()                .url(location)                .build();        mHttpClient.newCall(request).enqueue(new Callback() {            @Override            public void onFailure(Call call, IOException e) {                Timber.e(\"Failed to download update file\", e);            }            @Override            public void onResponse(Call call, Response response) throws IOException {                if (response.isSuccessful()) {                    String fileName = location.substring(location.lastIndexOf('/') + 1);                    File downloadedFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), fileName);                    BufferedSink sink = Okio.buffer(Okio.sink(downloadedFile));                    sink.writeAll(response.body().source());                    sink.close();                    String updateFilePath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath() + \"/\" + fileName;                    PrefUtils.getPrefs(mContext).edit()                            .putString(SHA1_KEY, SHA1(updateFilePath))                            .putString(UPDATE_FILE, updateFilePath)                            .putLong(SHA1_TIME, System.currentTimeMillis())                            .apply();                    if (mListener != null) {                        mListener.updateAvailable(updateFilePath);                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/manager/updater/ButterUpdateManager.java", "stars": "4", "class": {"name": "ButterUpdateManager", "extends": "Observable", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkUpdatesManually", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkUpdatesManually() {        checkUpdates(true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/manager/updater/ButterUpdateManager.java", "stars": "4", "class": {"name": "ButterUpdateManager", "extends": "Observable", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkUpdates", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkUpdates(boolean forced) {        long now = System.currentTimeMillis();        // if ((!PrefUtils.get(mContext, Prefs.AUTOMATIC_UPDATES, true) || (PrefUtils.get(mContext, Prefs.WIFI_ONLY, true) && !NetworkUtils.isWifiConnected(mContext))) && !forced) {        //     return;        // }        PrefUtils.save(mContext, LAST_UPDATE_CHECK, now);        if (forced || (lastUpdate + UPDATE_INTERVAL) < now) {            lastUpdate = System.currentTimeMillis();            PrefUtils.save(mContext, LAST_UPDATE_KEY, lastUpdate);            if (!forced && BuildConfig.GIT_BRANCH.contains(\"local\")) return;            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {                mAbi = Build.CPU_ABI.toLowerCase(Locale.US);            } else {                mAbi = Build.SUPPORTED_ABIS[0].toLowerCase(Locale.US);            }            if (mPackageName.contains(\"tv\")) {                mVariantStr = \"tv\";            } else {                mVariantStr = \"mobile\";            }            if (BuildConfig.RELEASE_TYPE.toLowerCase(Locale.US).contains(\"release\")) {                mChannelStr = \"release\";            } else {                mChannelStr = BuildConfig.GIT_BRANCH;            }            Request request = new Request.Builder()                    .url(DATA_URLS[mCurrentUrl])                    .build();            mHttpClient.newCall(request).enqueue(mCallback);        } else if(PrefUtils.contains(mContext, UPDATE_FILE)) {            String fileName = PrefUtils.get(mContext, UPDATE_FILE, \"\");            if (fileName.length() > 0) {                if (!new File(fileName).exists()) {                    PrefUtils.remove(mContext, UPDATE_FILE);                } else {                    if(mListener != null)                        mListener.updateAvailable(fileName);                }            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/manager/updater/ButterUpdateManager.java", "stars": "4", "class": {"name": "ButterUpdateManager", "extends": "Observable", "implements": null, "modifiers": ["public"]}}, {"method_name": "SHA1", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String SHA1(String filename) {        final int BUFFER_SIZE = 8192;        byte[] buf = new byte[BUFFER_SIZE];        int length;        try {            FileInputStream fis = new FileInputStream(filename);            BufferedInputStream bis = new BufferedInputStream(fis);            MessageDigest md = MessageDigest.getInstance(\"SHA1\");            while ((length = bis.read(buf)) != -1) {                md.update(buf, 0, length);            }            byte[] array = md.digest();            StringBuilder sb = new StringBuilder();            for (byte anArray : array) {                sb.append(Integer.toHexString((anArray & 0xFF) | 0x100).substring(1, 3));            }            return sb.toString();        } catch (Exception e) {            e.printStackTrace();        }        return \"sha1bad\";    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/manager/updater/ButterUpdateManager.java", "stars": "4", "class": {"name": "ButterUpdateManager", "extends": "Observable", "implements": null, "modifiers": ["public"]}}, {"method_name": "crc32", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int crc32(String str) {        byte bytes[] = str.getBytes();        Checksum checksum = new CRC32();        checksum.update(bytes, 0, bytes.length);        return (int) checksum.getValue();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/manager/updater/ButterUpdateManager.java", "stars": "4", "class": {"name": "ButterUpdateManager", "extends": "Observable", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/criterion/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/criterion/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/criterion/CriterionTest.java", "stars": "15", "class": {"name": "CriterionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSimpleSelect", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testSimpleSelect() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Criterion criterion = new Criterion();      criterion.setTest(\"firstName =\");      criterion.setValue(\"Fred\");      Parameter parameter = new Parameter();      parameter.setCriterion(criterion);      List<Map<String, Object>> answer =          sqlSession.selectList(\"org.apache.ibatis.submitted.criterion.simpleSelect\", parameter);      assertEquals(1, answer.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/criterion/CriterionTest.java", "stars": "15", "class": {"name": "CriterionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSecurityType", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String getSecurityType() {        return \"RSA\";    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/RsaPublicSecurityUtil.java", "stars": "2", "class": {"name": "RsaPublicSecurityUtil", "extends": "BaseSecurityUtil", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateKey", "params": ["String"], "throws": ["NoSuchAlgorithmException", "InvalidKeySpecException"], "modifiers": [], "return_type": "Key", "snippet": "    Key generateKey(String keyStr) throws NoSuchAlgorithmException, InvalidKeySpecException {        log.info(\"RSA Public Key: {}\", keyStr);        byte[] bytes = Base64.decodeBase64(keyStr);        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(bytes);        KeyFactory keyFactory = KeyFactory.getInstance(getSecurityType());        return keyFactory.generatePublic(publicKeySpec);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/RsaPublicSecurityUtil.java", "stars": "2", "class": {"name": "RsaPublicSecurityUtil", "extends": "BaseSecurityUtil", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        super.onCreate();        mTimelineManager = TimelineManager.from(this);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Stopwatch/src/com/google/android/glass/sample/stopwatch/StopwatchService.java", "stars": "74", "class": {"name": "StopwatchService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBind", "params": ["Intent"], "throws": null, "modifiers": ["public"], "return_type": "IBinder", "snippet": "    public IBinder onBind(Intent intent) {        return null;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Stopwatch/src/com/google/android/glass/sample/stopwatch/StopwatchService.java", "stars": "74", "class": {"name": "StopwatchService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStartCommand", "params": ["Intent", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int onStartCommand(Intent intent, int flags, int startId) {        if (mLiveCard == null) {            Log.d(TAG, \"Publishing LiveCard\");            mLiveCard = mTimelineManager.createLiveCard(LIVE_CARD_TAG);            // Keep track of the callback to remove it before unpublishing.            mCallback = new ChronometerDrawer(this);            mLiveCard.setDirectRenderingEnabled(true).getSurfaceHolder().addCallback(mCallback);            Intent menuIntent = new Intent(this, MenuActivity.class);            menuIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);            mLiveCard.setAction(PendingIntent.getActivity(this, 0, menuIntent, 0));            mLiveCard.publish(PublishMode.REVEAL);            Log.d(TAG, \"Done publishing LiveCard\");        } else {            // TODO(alainv): Jump to the LiveCard when API is available.        }        return START_STICKY;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Stopwatch/src/com/google/android/glass/sample/stopwatch/StopwatchService.java", "stars": "74", "class": {"name": "StopwatchService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        if (mLiveCard != null && mLiveCard.isPublished()) {            Log.d(TAG, \"Unpublishing LiveCard\");            if (mCallback != null) {                mLiveCard.getSurfaceHolder().removeCallback(mCallback);            }            mLiveCard.unpublish();            mLiveCard = null;        }        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Stopwatch/src/com/google/android/glass/sample/stopwatch/StopwatchService.java", "stars": "74", "class": {"name": "StopwatchService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "dummy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void dummy() {  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/CachingReuseExecutorTest.java", "stars": "15", "class": {"name": "CachingReuseExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "createExecutor", "params": ["Transaction"], "throws": null, "modifiers": ["protected"], "return_type": "Executor", "snippet": "  protected Executor createExecutor(Transaction transaction) {    return new CachingExecutor(new ReuseExecutor(config, transaction));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/CachingReuseExecutorTest.java", "stars": "15", "class": {"name": "CachingReuseExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "send", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void send(String payload){        log.info(\"Sending message = '{}'\", payload);        kafkaTemplate.send(kafkaTopic, payload);    }", "url": "https://raw.githubusercontent.com/camelya58/kafka-sample/master/kafka-producer/src/main/java/com/example/kafkaproducer/service/SenderService.java", "stars": "2", "class": {"name": "SenderService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUseGeneratedKeySupport", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUseGeneratedKeySupport(boolean useGeneratedKeySupport) {    this.useGeneratedKeySupport = useGeneratedKeySupport;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectOne", "params": ["String", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> selectOne(String sql, Object... args) throws SQLException {    List<Map<String, Object>> results = selectAll(sql, args);    if (results.size() != 1) {      throw new SQLException(\"Statement returned \" + results.size() + \" results where exactly one (1) was expected.\");    }    return results.get(0);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectAll", "params": ["String", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Map>", "snippet": "  public List<Map<String, Object>> selectAll(String sql, Object... args) throws SQLException {    PreparedStatement ps = connection.prepareStatement(sql);    try {      setParameters(ps, args);      ResultSet rs = ps.executeQuery();      return getResults(rs);    } finally {      try {        ps.close();      } catch (SQLException e) {        //ignore      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "insert", "params": ["String", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int insert(String sql, Object... args) throws SQLException {    PreparedStatement ps;    if (useGeneratedKeySupport) {      ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);    } else {      ps = connection.prepareStatement(sql);    }    try {      setParameters(ps, args);      ps.executeUpdate();      if (useGeneratedKeySupport) {        List<Map<String, Object>> keys = getResults(ps.getGeneratedKeys());        if (keys.size() == 1) {          Map<String, Object> key = keys.get(0);          Iterator<Object> i = key.values().iterator();          if (i.hasNext()) {            Object genkey = i.next();            if (genkey != null) {              try {                return Integer.parseInt(genkey.toString());              } catch (NumberFormatException e) {                //ignore, no numeric key support              }            }          }        }      }      return NO_GENERATED_KEY;    } finally {      try {        ps.close();      } catch (SQLException e) {        //ignore      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["String", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int update(String sql, Object... args) throws SQLException {    PreparedStatement ps = connection.prepareStatement(sql);    try {      setParameters(ps, args);      return ps.executeUpdate();    } finally {      try {        ps.close();      } catch (SQLException e) {        //ignore      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["String", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int delete(String sql, Object... args) throws SQLException {    return update(sql, args);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void run(String sql) throws SQLException {    Statement stmt = connection.createStatement();    try {      stmt.execute(sql);    } finally {      try {        stmt.close();      } catch (SQLException e) {        //ignore      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void closeConnection() {    try {      connection.close();    } catch (SQLException e) {      //ignore    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParameters", "params": ["PreparedStatement", "Object"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void setParameters(PreparedStatement ps, Object... args) throws SQLException {    for (int i = 0, n = args.length; i < n; i++) {      if (args[i] == null) {        throw new SQLException(\"SqlRunner requires an instance of Null to represent typed null values for JDBC compatibility\");      } else if (args[i] instanceof Null) {        ((Null) args[i]).getTypeHandler().setParameter(ps, i + 1, null, ((Null) args[i]).getJdbcType());      } else {        TypeHandler typeHandler = typeHandlerRegistry.getTypeHandler(args[i].getClass());        if (typeHandler == null) {          throw new SQLException(\"SqlRunner could not find a TypeHandler instance for \" + args[i].getClass());        } else {          typeHandler.setParameter(ps, i + 1, args[i], null);        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResults", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "List<Map>", "snippet": "  private List<Map<String, Object>> getResults(ResultSet rs) throws SQLException {    try {      List<Map<String, Object>> list = new ArrayList<>();      List<String> columns = new ArrayList<>();      List<TypeHandler<?>> typeHandlers = new ArrayList<>();      ResultSetMetaData rsmd = rs.getMetaData();      for (int i = 0, n = rsmd.getColumnCount(); i < n; i++) {        columns.add(rsmd.getColumnLabel(i + 1));        try {          Class<?> type = Resources.classForName(rsmd.getColumnClassName(i + 1));          TypeHandler<?> typeHandler = typeHandlerRegistry.getTypeHandler(type);          if (typeHandler == null) {            typeHandler = typeHandlerRegistry.getTypeHandler(Object.class);          }          typeHandlers.add(typeHandler);        } catch (Exception e) {          typeHandlers.add(typeHandlerRegistry.getTypeHandler(Object.class));        }      }      while (rs.next()) {        Map<String, Object> row = new HashMap<>();        for (int i = 0, n = columns.size(); i < n; i++) {          String name = columns.get(i);          TypeHandler<?> handler = typeHandlers.get(i);          row.put(name.toUpperCase(Locale.ENGLISH), handler.getResult(rs, name));        }        list.add(row);      }      return list;    } finally {      if (rs != null) {        try {          rs.close();        } catch (Exception e) {          // ignore        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlRunner.java", "stars": "15", "class": {"name": "SqlRunner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        view = (Practice06KeyframeView) findViewById(R.id.objectAnimatorView);        animateBt = (Button) findViewById(R.id.animateBt);        animateBt.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                // \u4f7f\u7528 Keyframe.ofFloat() \u6765\u4e3a view \u7684 progress \u5c5e\u6027\u521b\u5efa\u5173\u952e\u5e27                // \u521d\u59cb\u5e27\uff1aprogress \u4e3a 0                // \u65f6\u95f4\u8fdb\u884c\u5230\u4e00\u822c\uff1aprogress \u4e3a 100                // \u7ed3\u675f\u5e27\uff1aprogress \u56de\u843d\u5230 80                // \u4f7f\u7528 PropertyValuesHolder.ofKeyframe() \u6765\u628a\u5173\u952e\u5e27\u62fc\u63a5\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u5c5e\u6027\u52a8\u753b\u65b9\u6848                // \u4f7f\u7528 ObjectAnimator.ofPropertyValuesHolder() \u6765\u521b\u5efa\u52a8\u753b                Keyframe keyframe1 = Keyframe.ofFloat(0, 0); // \u5f00\u59cb\uff1aprogress \u4e3a 0                Keyframe keyframe2 = Keyframe.ofFloat(0.5f, 100); // \u8fdb\u884c\u5230\u4e00\u534a\u662f\uff0cprogres \u4e3a 100                Keyframe keyframe3 = Keyframe.ofFloat(1, 80); // \u7ed3\u675f\u65f6\u5012\u56de\u5230 80                PropertyValuesHolder holder = PropertyValuesHolder.ofKeyframe(\"progress\", keyframe1, keyframe2, keyframe3);                ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(view, holder);                animator.setDuration(2000);                animator.setInterpolator(new FastOutSlowInInterpolator());                animator.start();            }        });    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice06/Practice06KeyframeLayout.java", "stars": "2", "class": {"name": "Practice06KeyframeLayout", "extends": "RelativeLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPoster", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPoster() {        return poster;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/common/Images.java", "stars": "4", "class": {"name": "Images", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPoster", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPoster(String poster) {        this.poster = poster;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/common/Images.java", "stars": "4", "class": {"name": "Images", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFanart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFanart() {        return fanart;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/common/Images.java", "stars": "4", "class": {"name": "Images", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFanart", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFanart(String fanart) {        this.fanart = fanart;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/common/Images.java", "stars": "4", "class": {"name": "Images", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBanner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getBanner() {        return banner;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/common/Images.java", "stars": "4", "class": {"name": "Images", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBanner", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBanner(String banner) {        this.banner = banner;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/common/Images.java", "stars": "4", "class": {"name": "Images", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onScrollStateChanged", "params": ["AbsListView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onScrollStateChanged(AbsListView view, int scrollState) {\t\tswitch (scrollState) {\t\t\tcase OnScrollListener.SCROLL_STATE_IDLE:\t\t\t\timageLoader.resume();\t\t\t\tbreak;\t\t\tcase OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:\t\t\t\tif (pauseOnScroll) {\t\t\t\t\timageLoader.pause();\t\t\t\t}\t\t\t\tbreak;\t\t\tcase OnScrollListener.SCROLL_STATE_FLING:\t\t\t\tif (pauseOnFling) {\t\t\t\t\timageLoader.pause();\t\t\t\t}\t\t\t\tbreak;\t\t}\t\tif (externalListener != null) {\t\t\texternalListener.onScrollStateChanged(view, scrollState);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/PauseOnScrollListener.java", "stars": "74", "class": {"name": "PauseOnScrollListener", "extends": null, "implements": ["OnScrollListener"], "modifiers": ["public"]}}, {"method_name": "onScroll", "params": ["AbsListView", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\t\tif (externalListener != null) {\t\t\texternalListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/PauseOnScrollListener.java", "stars": "74", "class": {"name": "PauseOnScrollListener", "extends": null, "implements": ["OnScrollListener"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SimpleViewHolder.java", "stars": "2", "class": {"name": "SimpleViewHolder", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SimpleViewHolder.java", "stars": "2", "class": {"name": "SimpleViewHolder", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "isEmail", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isEmail(String emailStr) {        Matcher matcher = VALID_EMAIL_ADDRESS_REGEX.matcher(emailStr);        return matcher.find();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPropFromFile", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "Properties", "snippet": "    private static Properties getPropFromFile(String fileName) {        Properties properties = new Properties();        try {//            \u9ed8\u8ba4\u662fclassPath\u8def\u5f84            InputStream resourceAsStream = new FileInputStream(fileName);            properties.load(resourceAsStream);        } catch (BusinessException | IOException e) {            LOGGER.error(\"get properties file fail={}\", e.getMessage());        }        return properties;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "MD5encode", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String MD5encode(String source) {        if (StringUtils.isBlank(source)) {            return null;        }        MessageDigest messageDigest = null;        try {            messageDigest = MessageDigest.getInstance(\"MD5\");        } catch (NoSuchAlgorithmException ignored) {        }        byte[] encode = messageDigest.digest(source.getBytes());        StringBuilder hexString = new StringBuilder();        for (byte anEncode : encode) {            String hex = Integer.toHexString(0xff & anEncode);            if (hex.length() == 1) {                hexString.append('0');            }            hexString.append(hex);        }        return hexString.toString();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNewDataSource", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DataSource", "snippet": "    public static DataSource getNewDataSource() {        if (newDataSource == null) synchronized (TaleUtils.class) {            if (newDataSource == null) {                Properties properties = TaleUtils.getPropFromFile(\"application-default.properties\");                if (properties.size() == 0) {                    return newDataSource;                }                DriverManagerDataSource managerDataSource = new DriverManagerDataSource();                managerDataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");                managerDataSource.setPassword(properties.getProperty(\"spring.datasource.password\"));                String str = \"jdbc:mysql://\" + properties.getProperty(\"spring.datasource.url\") + \"/\" + properties.getProperty(\"spring.datasource.dbname\") + \"?useUnicode=true&characterEncoding=utf-8&useSSL=false\";                managerDataSource.setUrl(str);                managerDataSource.setUsername(properties.getProperty(\"spring.datasource.username\"));                newDataSource = managerDataSource;            }        }        return newDataSource;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLoginUser", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public", "static"], "return_type": "UserDomain", "snippet": "    public static UserDomain getLoginUser(HttpServletRequest request) {        HttpSession session = request.getSession();        if (null == session) {            return null;        }        return (UserDomain) session.getAttribute(WebConst.LOGIN_SESSION_KEY);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCookieUid", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public", "static"], "return_type": "Integer", "snippet": "    public static Integer getCookieUid(HttpServletRequest request) {        if (null != request) {            Cookie cookie = cookieRaw(WebConst.USER_IN_COOKIE, request);            if (cookie != null && cookie.getValue() != null) {                try {                    String uid = Tools.deAes(cookie.getValue(), WebConst.AES_SALT);                    return StringUtils.isNotBlank(uid) && Tools.isNumber(uid) ? Integer.valueOf(uid) : null;                } catch (Exception e) {                }            }        }        return null;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cookieRaw", "params": ["String", "HttpServletRequest"], "throws": null, "modifiers": ["private", "static"], "return_type": "Cookie", "snippet": "    private static Cookie cookieRaw(String name, HttpServletRequest request) {        javax.servlet.http.Cookie[] servletCookies = request.getCookies();        if (servletCookies == null) {            return null;        }        for (javax.servlet.http.Cookie c : servletCookies) {            if (c.getName().equals(name)) {                return c;            }        }        return null;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCookie", "params": ["HttpServletResponse", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setCookie(HttpServletResponse response, Integer uid) {        try {            String val = Tools.enAes(uid.toString(), WebConst.AES_SALT);            boolean isSSL = false;            Cookie cookie = new Cookie(WebConst.USER_IN_COOKIE, val);            cookie.setPath(\"/\");            cookie.setMaxAge(60 * 30);            cookie.setSecure(isSSL);            response.addCookie(cookie);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "htmlToText", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String htmlToText(String html) {        if (StringUtils.isNotBlank(html)) {            return html.replaceAll(\"(?s)<[^>]*>(\\\\s*<[^>]*>)*\", \" \");        }        return \"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mdToHtml", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String mdToHtml(String markdown) {        if (StringUtils.isBlank(markdown)) {            return \"\";        }        java.util.List<Extension> extensions = Arrays.asList(TablesExtension.create());        Parser parser = Parser.builder().extensions(extensions).build();        Node document = parser.parse(markdown);        HtmlRenderer renderer = HtmlRenderer.builder().extensions(extensions).build();        String content = renderer.render(document);        content = Commons.emoji(content);        return content;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logout", "params": ["HttpSession", "HttpServletResponse"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void logout(HttpSession session, HttpServletResponse response) {        session.removeAttribute(WebConst.LOGIN_SESSION_KEY);        Cookie cookie = new Cookie(WebConst.USER_IN_COOKIE, \"\");        cookie.setMaxAge(0);        response.addCookie(cookie);        try {            response.sendRedirect(\"/\");        } catch (IOException e) {            LOGGER.error(e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanXSS", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String cleanXSS(String value) {        //You'll need to remove the spaces from the html entities below        value = value.replaceAll(\"<\", \"&lt;\").replaceAll(\">\", \"&gt;\");        value = value.replaceAll(\"\\\\(\", \"&#40;\").replaceAll(\"\\\\)\", \"&#41;\");        value = value.replaceAll(\"'\", \"&#39;\");        value = value.replaceAll(\"eval\\\\((.*)\\\\)\", \"\");        value = value.replaceAll(\"[\\\\\\\"\\\\\\'][\\\\s]*javascript:(.*)[\\\\\\\"\\\\\\']\", \"\\\"\\\"\");        value = value.replaceAll(\"script\", \"\");        return value;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filterXSS", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String filterXSS(String value) {        String cleanValue = null;        if (value != null) {            cleanValue = Normalizer.normalize(value, Normalizer.Form.NFD);            // Avoid null characters            cleanValue = cleanValue.replaceAll(\"\\0\", \"\");            // Avoid anything between script tags            Pattern scriptPattern = Pattern.compile(\"<script>(.*?)</script>\", Pattern.CASE_INSENSITIVE);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");            // Avoid anything in a src='...' type of expression            scriptPattern = Pattern.compile(\"src[\\r\\n]*=[\\r\\n]*\\\\\\'(.*?)\\\\\\'\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");            scriptPattern = Pattern.compile(\"src[\\r\\n]*=[\\r\\n]*\\\\\\\"(.*?)\\\\\\\"\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");            // Remove any lonesome </script> tag            scriptPattern = Pattern.compile(\"</script>\", Pattern.CASE_INSENSITIVE);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");            // Remove any lonesome <script ...> tag            scriptPattern = Pattern.compile(\"<script(.*?)>\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");            // Avoid eval(...) expressions            scriptPattern = Pattern.compile(\"eval\\\\((.*?)\\\\)\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");            // Avoid expression(...) expressions            scriptPattern = Pattern.compile(\"expression\\\\((.*?)\\\\)\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");            // Avoid javascript:... expressions            scriptPattern = Pattern.compile(\"javascript:\", Pattern.CASE_INSENSITIVE);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");            // Avoid vbscript:... expressions            scriptPattern = Pattern.compile(\"vbscript:\", Pattern.CASE_INSENSITIVE);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");            // Avoid onload= expressions            scriptPattern = Pattern.compile(\"onload(.*?)=\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);            cleanValue = scriptPattern.matcher(cleanValue).replaceAll(\"\");        }        return cleanValue;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPath", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isPath(String slug) {        if (StringUtils.isNotBlank(slug)) {            if (slug.contains(\"/\") || slug.contains(\" \") || slug.contains(\".\")) {                return false;            }            Matcher matcher = SLUG_REGEX.matcher(slug);            return matcher.find();        }        return false;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isImage", "params": ["InputStream"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isImage(InputStream imageFile) {        try {            Image img = ImageIO.read(imageFile);            if (img == null || img.getWidth(null) <= 0 || img.getHeight(null) <= 0) {                return false;            }            return true;        } catch (Exception e) {            return false;        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRandomNumber", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getRandomNumber(int size) {        String num = \"\";        for (int i = 0; i < size; ++i) {            double a = Math.random() * 9.0D;            a = Math.ceil(a);            int randomNum = (new Double(a)).intValue();            num = num + randomNum;        }        return num;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUplodFilePath", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getUplodFilePath() {        String path = TaleUtils.class.getProtectionDomain().getCodeSource().getLocation().getPath();        path = path.substring(1, path.length());        try {            path = java.net.URLDecoder.decode(path, \"utf-8\");        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        int lastIndex = path.lastIndexOf(\"/\") + 1;        path = path.substring(0, lastIndex);        File file = new File(\"\");        return file.getAbsolutePath() + \"/\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileKey", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getFileKey(String name) {        String prefix = \"/upload/\" + DateKit.dateFormat(new Date(), \"yyyy/MM\");        if (!new File(AttAchController.CLASSPATH + prefix).exists()) {            new File(AttAchController.CLASSPATH + prefix).mkdirs();        }        name = StringUtils.trimToNull(name);        if (name == null) {            return prefix + \"/\" + UUID.UU32() + \".\" + null;        } else {            name = name.replace('\\\\', '/');            name = name.substring(name.lastIndexOf(\"/\") + 1);            int index = name.lastIndexOf(\".\");            String ext = null;            if (index >= 0) {                ext = StringUtils.trimToNull(name.substring(index + 1));            }            return prefix + \"/\" + UUID.UU32() + \".\" + (ext == null ? null : (ext));        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/TaleUtils.java", "stars": "2", "class": {"name": "TaleUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Like{\" +                \"like_id=\" + like_id +                \", user_id=\" + user_id +                \", article_id=\" + article_id +                '}';    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/Like.java", "stars": "10", "class": {"name": "Like", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser_id", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getUser_id() {        return user_id;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/Like.java", "stars": "10", "class": {"name": "Like", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUser_id", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUser_id(int user_id) {        this.user_id = user_id;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/Like.java", "stars": "10", "class": {"name": "Like", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getArticle_id", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getArticle_id() {        return article_id;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/Like.java", "stars": "10", "class": {"name": "Like", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setArticle_id", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setArticle_id(int article_id) {        this.article_id = article_id;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/Like.java", "stars": "10", "class": {"name": "Like", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLike_id", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLike_id() {        return like_id;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/Like.java", "stars": "10", "class": {"name": "Like", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLike_id", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLike_id(int like_id) {        this.like_id = like_id;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/domain/Like.java", "stars": "10", "class": {"name": "Like", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUploadDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getUploadDir() {        //System.out.println(fileUploadService.getUploadDir());    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/test/java/cn/tsxygfy/beyond/FileUploadServiceTest.java", "stars": "1", "class": {"name": "FileUploadServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVerticalSnapPreference", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getVerticalSnapPreference ()\t{\t\treturn n_getVerticalSnapPreference ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PositionalSmoothScroller.java", "stars": "2", "class": {"name": "PositionalSmoothScroller", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getVerticalSnapPreference", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getVerticalSnapPreference ();\tpublic int getHorizontalSnapPreference ()\t{\t\treturn n_getHorizontalSnapPreference ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PositionalSmoothScroller.java", "stars": "2", "class": {"name": "PositionalSmoothScroller", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getHorizontalSnapPreference", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getHorizontalSnapPreference ()\t{\t\treturn n_getHorizontalSnapPreference ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PositionalSmoothScroller.java", "stars": "2", "class": {"name": "PositionalSmoothScroller", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getHorizontalSnapPreference", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getHorizontalSnapPreference ();\tpublic int calculateDtToFit (int p0, int p1, int p2, int p3, int p4)\t{\t\treturn n_calculateDtToFit (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PositionalSmoothScroller.java", "stars": "2", "class": {"name": "PositionalSmoothScroller", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "calculateDtToFit", "params": ["int", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int calculateDtToFit (int p0, int p1, int p2, int p3, int p4)\t{\t\treturn n_calculateDtToFit (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PositionalSmoothScroller.java", "stars": "2", "class": {"name": "PositionalSmoothScroller", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_calculateDtToFit", "params": ["int", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_calculateDtToFit (int p0, int p1, int p2, int p3, int p4);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PositionalSmoothScroller.java", "stars": "2", "class": {"name": "PositionalSmoothScroller", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PositionalSmoothScroller.java", "stars": "2", "class": {"name": "PositionalSmoothScroller", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PositionalSmoothScroller.java", "stars": "2", "class": {"name": "PositionalSmoothScroller", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onSelected", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSelected(int index, int totalCount) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/DummyPagerTitleView.java", "stars": "1", "class": {"name": "DummyPagerTitleView", "extends": "View", "implements": ["IPagerTitleView"], "modifiers": ["public"]}}, {"method_name": "onDeselected", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeselected(int index, int totalCount) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/DummyPagerTitleView.java", "stars": "1", "class": {"name": "DummyPagerTitleView", "extends": "View", "implements": ["IPagerTitleView"], "modifiers": ["public"]}}, {"method_name": "onLeave", "params": ["int", "int", "float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLeave(int index, int totalCount, float leavePercent, boolean leftToRight) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/DummyPagerTitleView.java", "stars": "1", "class": {"name": "DummyPagerTitleView", "extends": "View", "implements": ["IPagerTitleView"], "modifiers": ["public"]}}, {"method_name": "onEnter", "params": ["int", "int", "float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnter(int index, int totalCount, float enterPercent, boolean leftToRight) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/DummyPagerTitleView.java", "stars": "1", "class": {"name": "DummyPagerTitleView", "extends": "View", "implements": ["IPagerTitleView"], "modifiers": ["public"]}}, {"method_name": "parse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void parse() {    String resource = type.toString();    if (!configuration.isResourceLoaded(resource)) {      loadXmlResource();      configuration.addLoadedResource(resource);      assistant.setCurrentNamespace(type.getName());      parseCache();      parseCacheRef();      Method[] methods = type.getMethods();      for (Method method : methods) {        try {          // issue #237          if (!method.isBridge()) {            parseStatement(method);          }        } catch (IncompleteElementException e) {          configuration.addIncompleteMethod(new MethodResolver(this, method));        }      }    }    parsePendingMethods();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parsePendingMethods", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parsePendingMethods() {    Collection<MethodResolver> incompleteMethods = configuration.getIncompleteMethods();    synchronized (incompleteMethods) {      Iterator<MethodResolver> iter = incompleteMethods.iterator();      while (iter.hasNext()) {        try {          iter.next().resolve();          iter.remove();        } catch (IncompleteElementException e) {          // This method is still missing a resource        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadXmlResource", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadXmlResource() {    // Spring may not know the real resource name so we check a flag    // to prevent loading again a resource twice    // this flag is set at XMLMapperBuilder#bindMapperForNamespace    if (!configuration.isResourceLoaded(\"namespace:\" + type.getName())) {      String xmlResource = type.getName().replace('.', '/') + \".xml\";      // #1347      InputStream inputStream = type.getResourceAsStream(\"/\" + xmlResource);      if (inputStream == null) {        // Search XML mapper that is not in the module but in the classpath.        try {          inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);        } catch (IOException e2) {          // ignore, resource is not required        }      }      if (inputStream != null) {        XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());        xmlParser.parse();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseCache", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseCache() {    CacheNamespace cacheDomain = type.getAnnotation(CacheNamespace.class);    if (cacheDomain != null) {      Integer size = cacheDomain.size() == 0 ? null : cacheDomain.size();      Long flushInterval = cacheDomain.flushInterval() == 0 ? null : cacheDomain.flushInterval();      Properties props = convertToProperties(cacheDomain.properties());      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), flushInterval, size, cacheDomain.readWrite(), cacheDomain.blocking(), props);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToProperties", "params": ["Property"], "throws": null, "modifiers": ["private"], "return_type": "Properties", "snippet": "  private Properties convertToProperties(Property[] properties) {    if (properties.length == 0) {      return null;    }    Properties props = new Properties();    for (Property property : properties) {      props.setProperty(property.name(),          PropertyParser.parse(property.value(), configuration.getVariables()));    }    return props;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseCacheRef", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseCacheRef() {    CacheNamespaceRef cacheDomainRef = type.getAnnotation(CacheNamespaceRef.class);    if (cacheDomainRef != null) {      Class<?> refType = cacheDomainRef.value();      String refName = cacheDomainRef.name();      if (refType == void.class && refName.isEmpty()) {        throw new BuilderException(\"Should be specified either value() or name() attribute in the @CacheNamespaceRef\");      }      if (refType != void.class && !refName.isEmpty()) {        throw new BuilderException(\"Cannot use both value() and name() attribute in the @CacheNamespaceRef\");      }      String namespace = (refType != void.class) ? refType.getName() : refName;      try {        assistant.useCacheRef(namespace);      } catch (IncompleteElementException e) {        configuration.addIncompleteCacheRef(new CacheRefResolver(assistant, namespace));      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseResultMap", "params": ["Method"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String parseResultMap(Method method) {    Class<?> returnType = getReturnType(method);    Arg[] args = method.getAnnotationsByType(Arg.class);    Result[] results = method.getAnnotationsByType(Result.class);    TypeDiscriminator typeDiscriminator = method.getAnnotation(TypeDiscriminator.class);    String resultMapId = generateResultMapName(method);    applyResultMap(resultMapId, returnType, args, results, typeDiscriminator);    return resultMapId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateResultMapName", "params": ["Method"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String generateResultMapName(Method method) {    Results results = method.getAnnotation(Results.class);    if (results != null && !results.id().isEmpty()) {      return type.getName() + \".\" + results.id();    }    StringBuilder suffix = new StringBuilder();    for (Class<?> c : method.getParameterTypes()) {      suffix.append(\"-\");      suffix.append(c.getSimpleName());    }    if (suffix.length() < 1) {      suffix.append(\"-void\");    }    return type.getName() + \".\" + method.getName() + suffix;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyResultMap", "params": ["String", "Class<?>", "Arg", "Result", "TypeDiscriminator"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void applyResultMap(String resultMapId, Class<?> returnType, Arg[] args, Result[] results, TypeDiscriminator discriminator) {    List<ResultMapping> resultMappings = new ArrayList<>();    applyConstructorArgs(args, returnType, resultMappings);    applyResults(results, returnType, resultMappings);    Discriminator disc = applyDiscriminator(resultMapId, returnType, discriminator);    // TODO add AutoMappingBehaviour    assistant.addResultMap(resultMapId, returnType, null, disc, resultMappings, null);    createDiscriminatorResultMaps(resultMapId, returnType, discriminator);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createDiscriminatorResultMaps", "params": ["String", "Class<?>", "TypeDiscriminator"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void createDiscriminatorResultMaps(String resultMapId, Class<?> resultType, TypeDiscriminator discriminator) {    if (discriminator != null) {      for (Case c : discriminator.cases()) {        String caseResultMapId = resultMapId + \"-\" + c.value();        List<ResultMapping> resultMappings = new ArrayList<>();        // issue #136        applyConstructorArgs(c.constructArgs(), resultType, resultMappings);        applyResults(c.results(), resultType, resultMappings);        // TODO add AutoMappingBehaviour        assistant.addResultMap(caseResultMapId, c.type(), resultMapId, null, resultMappings, null);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyDiscriminator", "params": ["String", "Class<?>", "TypeDiscriminator"], "throws": null, "modifiers": ["private"], "return_type": "Discriminator", "snippet": "  private Discriminator applyDiscriminator(String resultMapId, Class<?> resultType, TypeDiscriminator discriminator) {    if (discriminator != null) {      String column = discriminator.column();      Class<?> javaType = discriminator.javaType() == void.class ? String.class : discriminator.javaType();      JdbcType jdbcType = discriminator.jdbcType() == JdbcType.UNDEFINED ? null : discriminator.jdbcType();      @SuppressWarnings(\"unchecked\")      Class<? extends TypeHandler<?>> typeHandler = (Class<? extends TypeHandler<?>>)              (discriminator.typeHandler() == UnknownTypeHandler.class ? null : discriminator.typeHandler());      Case[] cases = discriminator.cases();      Map<String, String> discriminatorMap = new HashMap<>();      for (Case c : cases) {        String value = c.value();        String caseResultMapId = resultMapId + \"-\" + value;        discriminatorMap.put(value, caseResultMapId);      }      return assistant.buildDiscriminator(resultType, column, javaType, jdbcType, typeHandler, discriminatorMap);    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseStatement", "params": ["Method"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void parseStatement(Method method) {    Class<?> parameterTypeClass = getParameterType(method);    LanguageDriver languageDriver = getLanguageDriver(method);    SqlSource sqlSource = getSqlSourceFromAnnotations(method, parameterTypeClass, languageDriver);    if (sqlSource != null) {      Options options = method.getAnnotation(Options.class);      final String mappedStatementId = type.getName() + \".\" + method.getName();      Integer fetchSize = null;      Integer timeout = null;      StatementType statementType = StatementType.PREPARED;      ResultSetType resultSetType = configuration.getDefaultResultSetType();      SqlCommandType sqlCommandType = getSqlCommandType(method);      boolean isSelect = sqlCommandType == SqlCommandType.SELECT;      boolean flushCache = !isSelect;      boolean useCache = isSelect;      KeyGenerator keyGenerator;      String keyProperty = null;      String keyColumn = null;      if (SqlCommandType.INSERT.equals(sqlCommandType) || SqlCommandType.UPDATE.equals(sqlCommandType)) {        // first check for SelectKey annotation - that overrides everything else        SelectKey selectKey = method.getAnnotation(SelectKey.class);        if (selectKey != null) {          keyGenerator = handleSelectKeyAnnotation(selectKey, mappedStatementId, getParameterType(method), languageDriver);          keyProperty = selectKey.keyProperty();        } else if (options == null) {          keyGenerator = configuration.isUseGeneratedKeys() ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;        } else {          keyGenerator = options.useGeneratedKeys() ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;          keyProperty = options.keyProperty();          keyColumn = options.keyColumn();        }      } else {        keyGenerator = NoKeyGenerator.INSTANCE;      }      if (options != null) {        if (FlushCachePolicy.TRUE.equals(options.flushCache())) {          flushCache = true;        } else if (FlushCachePolicy.FALSE.equals(options.flushCache())) {          flushCache = false;        }        useCache = options.useCache();        fetchSize = options.fetchSize() > -1 || options.fetchSize() == Integer.MIN_VALUE ? options.fetchSize() : null; //issue #348        timeout = options.timeout() > -1 ? options.timeout() : null;        statementType = options.statementType();        if (options.resultSetType() != ResultSetType.DEFAULT) {          resultSetType = options.resultSetType();        }      }      String resultMapId = null;      ResultMap resultMapAnnotation = method.getAnnotation(ResultMap.class);      if (resultMapAnnotation != null) {        resultMapId = String.join(\",\", resultMapAnnotation.value());      } else if (isSelect) {        resultMapId = parseResultMap(method);      }      assistant.addMappedStatement(          mappedStatementId,          sqlSource,          statementType,          sqlCommandType,          fetchSize,          timeout,          // ParameterMapID          null,          parameterTypeClass,          resultMapId,          getReturnType(method),          resultSetType,          flushCache,          useCache,          // TODO gcode issue #577          false,          keyGenerator,          keyProperty,          keyColumn,          // DatabaseID          null,          languageDriver,          // ResultSets          options != null ? nullOrEmpty(options.resultSets()) : null);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLanguageDriver", "params": ["Method"], "throws": null, "modifiers": ["private"], "return_type": "LanguageDriver", "snippet": "  private LanguageDriver getLanguageDriver(Method method) {    Lang lang = method.getAnnotation(Lang.class);    Class<? extends LanguageDriver> langClass = null;    if (lang != null) {      langClass = lang.value();    }    return configuration.getLanguageDriver(langClass);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParameterType", "params": ["Method"], "throws": null, "modifiers": ["private"], "return_type": "Class<?>", "snippet": "  private Class<?> getParameterType(Method method) {    Class<?> parameterType = null;    Class<?>[] parameterTypes = method.getParameterTypes();    for (Class<?> currentParameterType : parameterTypes) {      if (!RowBounds.class.isAssignableFrom(currentParameterType) && !ResultHandler.class.isAssignableFrom(currentParameterType)) {        if (parameterType == null) {          parameterType = currentParameterType;        } else {          // issue #135          parameterType = ParamMap.class;        }      }    }    return parameterType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReturnType", "params": ["Method"], "throws": null, "modifiers": ["private"], "return_type": "Class<?>", "snippet": "  private Class<?> getReturnType(Method method) {    Class<?> returnType = method.getReturnType();    Type resolvedReturnType = TypeParameterResolver.resolveReturnType(method, type);    if (resolvedReturnType instanceof Class) {      returnType = (Class<?>) resolvedReturnType;      if (returnType.isArray()) {        returnType = returnType.getComponentType();      }      // gcode issue #508      if (void.class.equals(returnType)) {        ResultType rt = method.getAnnotation(ResultType.class);        if (rt != null) {          returnType = rt.value();        }      }    } else if (resolvedReturnType instanceof ParameterizedType) {      ParameterizedType parameterizedType = (ParameterizedType) resolvedReturnType;      Class<?> rawType = (Class<?>) parameterizedType.getRawType();      if (Collection.class.isAssignableFrom(rawType) || Cursor.class.isAssignableFrom(rawType)) {        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();        if (actualTypeArguments != null && actualTypeArguments.length == 1) {          Type returnTypeParameter = actualTypeArguments[0];          if (returnTypeParameter instanceof Class<?>) {            returnType = (Class<?>) returnTypeParameter;          } else if (returnTypeParameter instanceof ParameterizedType) {            // (gcode issue #443) actual type can be a also a parameterized type            returnType = (Class<?>) ((ParameterizedType) returnTypeParameter).getRawType();          } else if (returnTypeParameter instanceof GenericArrayType) {            Class<?> componentType = (Class<?>) ((GenericArrayType) returnTypeParameter).getGenericComponentType();            // (gcode issue #525) support List<byte[]>            returnType = Array.newInstance(componentType, 0).getClass();          }        }      } else if (method.isAnnotationPresent(MapKey.class) && Map.class.isAssignableFrom(rawType)) {        // (gcode issue 504) Do not look into Maps if there is not MapKey annotation        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();        if (actualTypeArguments != null && actualTypeArguments.length == 2) {          Type returnTypeParameter = actualTypeArguments[1];          if (returnTypeParameter instanceof Class<?>) {            returnType = (Class<?>) returnTypeParameter;          } else if (returnTypeParameter instanceof ParameterizedType) {            // (gcode issue 443) actual type can be a also a parameterized type            returnType = (Class<?>) ((ParameterizedType) returnTypeParameter).getRawType();          }        }      } else if (Optional.class.equals(rawType)) {        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();        Type returnTypeParameter = actualTypeArguments[0];        if (returnTypeParameter instanceof Class<?>) {          returnType = (Class<?>) returnTypeParameter;        }      }    }    return returnType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSqlSourceFromAnnotations", "params": ["Method", "Class<?>", "LanguageDriver"], "throws": null, "modifiers": ["private"], "return_type": "SqlSource", "snippet": "  private SqlSource getSqlSourceFromAnnotations(Method method, Class<?> parameterType, LanguageDriver languageDriver) {    try {      Class<? extends Annotation> sqlAnnotationType = getSqlAnnotationType(method);      Class<? extends Annotation> sqlProviderAnnotationType = getSqlProviderAnnotationType(method);      if (sqlAnnotationType != null) {        if (sqlProviderAnnotationType != null) {          throw new BindingException(\"You cannot supply both a static SQL and SqlProvider to method named \" + method.getName());        }        Annotation sqlAnnotation = method.getAnnotation(sqlAnnotationType);        final String[] strings = (String[]) sqlAnnotation.getClass().getMethod(\"value\").invoke(sqlAnnotation);        return buildSqlSourceFromStrings(strings, parameterType, languageDriver);      } else if (sqlProviderAnnotationType != null) {        Annotation sqlProviderAnnotation = method.getAnnotation(sqlProviderAnnotationType);        return new ProviderSqlSource(assistant.getConfiguration(), sqlProviderAnnotation, type, method);      }      return null;    } catch (Exception e) {      throw new BuilderException(\"Could not find value method on SQL annotation.  Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildSqlSourceFromStrings", "params": ["String", "Class<?>", "LanguageDriver"], "throws": null, "modifiers": ["private"], "return_type": "SqlSource", "snippet": "  private SqlSource buildSqlSourceFromStrings(String[] strings, Class<?> parameterTypeClass, LanguageDriver languageDriver) {    final StringBuilder sql = new StringBuilder();    for (String fragment : strings) {      sql.append(fragment);      sql.append(\" \");    }    return languageDriver.createSqlSource(configuration, sql.toString().trim(), parameterTypeClass);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSqlCommandType", "params": ["Method"], "throws": null, "modifiers": ["private"], "return_type": "SqlCommandType", "snippet": "  private SqlCommandType getSqlCommandType(Method method) {    Class<? extends Annotation> type = getSqlAnnotationType(method);    if (type == null) {      type = getSqlProviderAnnotationType(method);      if (type == null) {        return SqlCommandType.UNKNOWN;      }      if (type == SelectProvider.class) {        type = Select.class;      } else if (type == InsertProvider.class) {        type = Insert.class;      } else if (type == UpdateProvider.class) {        type = Update.class;      } else if (type == DeleteProvider.class) {        type = Delete.class;      }    }    return SqlCommandType.valueOf(type.getSimpleName().toUpperCase(Locale.ENGLISH));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSqlAnnotationType", "params": ["Method"], "throws": null, "modifiers": ["private"], "return_type": "Class<Annotation>", "snippet": "  private Class<? extends Annotation> getSqlAnnotationType(Method method) {    return chooseAnnotationType(method, SQL_ANNOTATION_TYPES);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSqlProviderAnnotationType", "params": ["Method"], "throws": null, "modifiers": ["private"], "return_type": "Class<Annotation>", "snippet": "  private Class<? extends Annotation> getSqlProviderAnnotationType(Method method) {    return chooseAnnotationType(method, SQL_PROVIDER_ANNOTATION_TYPES);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "chooseAnnotationType", "params": ["Method", "Set<Class>"], "throws": null, "modifiers": ["private"], "return_type": "Class<Annotation>", "snippet": "  private Class<? extends Annotation> chooseAnnotationType(Method method, Set<Class<? extends Annotation>> types) {    for (Class<? extends Annotation> type : types) {      Annotation annotation = method.getAnnotation(type);      if (annotation != null) {        return type;      }    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyResults", "params": ["Result", "Class<?>", "List<ResultMapping>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void applyResults(Result[] results, Class<?> resultType, List<ResultMapping> resultMappings) {    for (Result result : results) {      List<ResultFlag> flags = new ArrayList<>();      if (result.id()) {        flags.add(ResultFlag.ID);      }      @SuppressWarnings(\"unchecked\")      Class<? extends TypeHandler<?>> typeHandler = (Class<? extends TypeHandler<?>>)              ((result.typeHandler() == UnknownTypeHandler.class) ? null : result.typeHandler());      ResultMapping resultMapping = assistant.buildResultMapping(          resultType,          nullOrEmpty(result.property()),          nullOrEmpty(result.column()),          result.javaType() == void.class ? null : result.javaType(),          result.jdbcType() == JdbcType.UNDEFINED ? null : result.jdbcType(),          hasNestedSelect(result) ? nestedSelectId(result) : null,          null,          null,          null,          typeHandler,          flags,          null,          null,          isLazy(result));      resultMappings.add(resultMapping);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nestedSelectId", "params": ["Result"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String nestedSelectId(Result result) {    String nestedSelect = result.one().select();    if (nestedSelect.length() < 1) {      nestedSelect = result.many().select();    }    if (!nestedSelect.contains(\".\")) {      nestedSelect = type.getName() + \".\" + nestedSelect;    }    return nestedSelect;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLazy", "params": ["Result"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isLazy(Result result) {    boolean isLazy = configuration.isLazyLoadingEnabled();    if (result.one().select().length() > 0 && FetchType.DEFAULT != result.one().fetchType()) {      isLazy = result.one().fetchType() == FetchType.LAZY;    } else if (result.many().select().length() > 0 && FetchType.DEFAULT != result.many().fetchType()) {      isLazy = result.many().fetchType() == FetchType.LAZY;    }    return isLazy;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasNestedSelect", "params": ["Result"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean hasNestedSelect(Result result) {    if (result.one().select().length() > 0 && result.many().select().length() > 0) {      throw new BuilderException(\"Cannot use both @One and @Many annotations in the same @Result\");    }    return result.one().select().length() > 0 || result.many().select().length() > 0;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyConstructorArgs", "params": ["Arg", "Class<?>", "List<ResultMapping>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void applyConstructorArgs(Arg[] args, Class<?> resultType, List<ResultMapping> resultMappings) {    for (Arg arg : args) {      List<ResultFlag> flags = new ArrayList<>();      flags.add(ResultFlag.CONSTRUCTOR);      if (arg.id()) {        flags.add(ResultFlag.ID);      }      @SuppressWarnings(\"unchecked\")      Class<? extends TypeHandler<?>> typeHandler = (Class<? extends TypeHandler<?>>)              (arg.typeHandler() == UnknownTypeHandler.class ? null : arg.typeHandler());      ResultMapping resultMapping = assistant.buildResultMapping(          resultType,          nullOrEmpty(arg.name()),          nullOrEmpty(arg.column()),          arg.javaType() == void.class ? null : arg.javaType(),          arg.jdbcType() == JdbcType.UNDEFINED ? null : arg.jdbcType(),          nullOrEmpty(arg.select()),          nullOrEmpty(arg.resultMap()),          null,          nullOrEmpty(arg.columnPrefix()),          typeHandler,          flags,          null,          null,          false);      resultMappings.add(resultMapping);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nullOrEmpty", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String nullOrEmpty(String value) {    return value == null || value.trim().length() == 0 ? null : value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleSelectKeyAnnotation", "params": ["SelectKey", "String", "Class<?>", "LanguageDriver"], "throws": null, "modifiers": ["private"], "return_type": "KeyGenerator", "snippet": "  private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, String baseStatementId, Class<?> parameterTypeClass, LanguageDriver languageDriver) {    String id = baseStatementId + SelectKeyGenerator.SELECT_KEY_SUFFIX;    Class<?> resultTypeClass = selectKeyAnnotation.resultType();    StatementType statementType = selectKeyAnnotation.statementType();    String keyProperty = selectKeyAnnotation.keyProperty();    String keyColumn = selectKeyAnnotation.keyColumn();    boolean executeBefore = selectKeyAnnotation.before();    // defaults    boolean useCache = false;    KeyGenerator keyGenerator = NoKeyGenerator.INSTANCE;    Integer fetchSize = null;    Integer timeout = null;    boolean flushCache = false;    String parameterMap = null;    String resultMap = null;    ResultSetType resultSetTypeEnum = null;    SqlSource sqlSource = buildSqlSourceFromStrings(selectKeyAnnotation.statement(), parameterTypeClass, languageDriver);    SqlCommandType sqlCommandType = SqlCommandType.SELECT;    assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass, resultSetTypeEnum,        flushCache, useCache, false,        keyGenerator, keyProperty, keyColumn, null, languageDriver, null);    id = assistant.applyCurrentNamespace(id, false);    MappedStatement keyStatement = configuration.getMappedStatement(id, false);    SelectKeyGenerator answer = new SelectKeyGenerator(keyStatement, executeBefore);    configuration.addKeyGenerator(id, answer);    return answer;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java", "stars": "15", "class": {"name": "MapperAnnotationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "PrevetCovidViewHolder", "snippet": "    public PrevetCovidViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_prevent_covid, parent, false);        imageView   = view.findViewById(R.id.image);        title       = view.findViewById(R.id.title);        title.setTypeface(FontUtils.loadFontFromAssets(context, Constant.FONT_NORMAL));        return new PrevetCovidViewHolder(view);    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/adapter/PreventCovidAdapter.java", "stars": "2", "class": {"name": "PreventCovidAdapter", "extends": "CardSliderAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount(){        return arrayList.length;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/adapter/PreventCovidAdapter.java", "stars": "2", "class": {"name": "PreventCovidAdapter", "extends": "CardSliderAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindVH", "params": ["PrevetCovidViewHolder", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void bindVH(PrevetCovidViewHolder prevetCovidViewHolder, int i) {        title.setText(arrayList[i]);        switch (i){            case 0:                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.hand_wash));                break;            case 1:                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.distance));                break;            case 2:                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.coronavirus));                break;            case 3:                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.quarantine));                break;            case 4:                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.nurse));                break;            case 5:                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.form));                break;        }    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/adapter/PreventCovidAdapter.java", "stars": "2", "class": {"name": "PreventCovidAdapter", "extends": "CardSliderAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadExecutableFlow", "params": ["ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void uploadExecutableFlow(final ExecutableFlow flow)      throws ExecutorManagerException {    final String useExecutorParam =        flow.getExecutionOptions().getFlowParameters().get(ExecutionOptions.USE_EXECUTOR);    final String executorId = StringUtils.isNotEmpty(useExecutorParam) ? useExecutorParam : null;    final String INSERT_EXECUTABLE_FLOW = \"INSERT INTO execution_flows \"        + \"(project_id, flow_id, version, status, submit_time, submit_user, update_time, flow_type, \"        + \"use_executor) values (?,?,?,?,?,?,?,?,?)\";    final long submitTime = System.currentTimeMillis();    flow.setStatus(Status.PREPARING);    flow.setSubmitTime(submitTime);    /**     * Why we need a transaction to get last insert ID?     * Because \"SELECT LAST_INSERT_ID()\" needs to have the same connection     * as inserting the new entry.     * See https://dev.mysql.com/doc/refman/5.7/en/information-functions.html#function_last-insert-id     */    final SQLTransaction<Long> insertAndGetLastID = transOperator -> {      transOperator.update(INSERT_EXECUTABLE_FLOW,          flow.getProjectId(),          flow.getFlowId(),          flow.getVersion(),          Status.PREPARING.getNumVal(),          submitTime,          flow.getSubmitUser(),          submitTime,          flow.getFlowType(),\t\t  executorId);      transOperator.getConnection().commit();      return transOperator.getLastInsertId();    };    try {      final long id = this.dbOperator.transaction(insertAndGetLastID);      logger.info(\"Flow given \" + flow.getFlowId() + \" given id \" + id);      flow.setExecutionId((int) id);      updateExecutableFlow(flow);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error creating execution.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchFlowHistory", "params": ["int", "int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchFlowHistory(final int skip, final int num)      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchExecutableFlows.FETCH_ALL_EXECUTABLE_FLOW_HISTORY,          new FetchExecutableFlows(), skip, num);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching flow History\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchMaintainedFlowHistory", "params": ["String", "List<Integer>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchMaintainedFlowHistory(String username, List<Integer> projectIds, int skip, int num)          throws ExecutorManagerException {    try {      String projectIdsStr = projectIds.stream()              .map(Objects::toString)              .collect(joining(\",\", \"(\", \")\"));      String querySQL = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef \" +              \"WHERE ef.project_id IN \" + projectIdsStr + \" \" +              \"ORDER BY exec_id DESC LIMIT ?, ?\";      return this.dbOperator.query(querySQL, new FetchExecutableFlows(), skip, num);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching flow History\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchFlowHistory", "params": ["int", "String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchFlowHistory(final int projectId, final String flowId,      final int skip, final int num)      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchExecutableFlows.FETCH_EXECUTABLE_FLOW_HISTORY,          new FetchExecutableFlows(), projectId, flowId, skip, num);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching flow history\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchQueuedFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<Pair>", "snippet": "  public List<Pair<ExecutionReference, ExecutableFlow>> fetchQueuedFlows()      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchQueuedExecutableFlows.FETCH_QUEUED_EXECUTABLE_FLOW,          new FetchQueuedExecutableFlows());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchFlowHistory", "params": ["int", "String", "long"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> fetchFlowHistory(final int projectId, final String flowId, final  long startTime) throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchExecutableFlows.FETCH_EXECUTABLE_FLOW_BY_START_TIME,          new FetchExecutableFlows(), projectId, flowId, startTime);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching historic flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchFlowHistory", "params": ["int", "String", "int", "int", "Status"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchFlowHistory(final int projectId, final String flowId,      final int skip, final int num, final Status status)      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchExecutableFlows.FETCH_EXECUTABLE_FLOW_BY_STATUS,          new FetchExecutableFlows(), projectId, flowId, status.getNumVal(), skip, num);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchRecentlyFinishedFlows", "params": ["Duration"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchRecentlyFinishedFlows(final Duration maxAge)      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchRecentlyFinishedFlows.FETCH_RECENTLY_FINISHED_FLOW,          new FetchRecentlyFinishedFlows(), System.currentTimeMillis() - maxAge.toMillis(),          Status.SUCCEEDED.getNumVal(), Status.KILLED.getNumVal(),          Status.FAILED.getNumVal());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching recently finished flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchFlowHistory", "params": ["String", "String", "String", "String", "String", "long", "long", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchFlowHistory(final String projContain, final String flowContains,final String execIdContain,      final String userNameContains, final String status,      final long startTime, final long endTime,      final int skip, final int num, final int flowType)      throws ExecutorManagerException {    StringBuilder querySql = new StringBuilder(\"SELECT exec_id, ef.enc_type, flow_data FROM execution_flows ef JOIN projects p ON ef.project_id = p.id\");    final List<Object> params = new ArrayList<>();    boolean first = true;    if (StringUtils.isNotBlank(projContain)) {      first = wrapperSqlParam(first, projContain, querySql, \"name\", \"LIKE\", params);    }    // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.    if (StringUtils.isNotBlank(flowContains)) {      first = wrapperSqlParam(first, flowContains, querySql, \"flow_id\", \"LIKE\", params);    }    if (StringUtils.isNotBlank(execIdContain)) {      first = wrapperSqlParam(first, execIdContain, querySql, \"exec_id\", \"LIKE\", params);    }    if (StringUtils.isNotBlank(userNameContains)) {      first =  wrapperSqlParam(first, userNameContains, querySql, \"submit_user\", \"LIKE\", params);    }    String[] statusArray = status.split(\",\");    if (!(\"0\".equals(statusArray[0]))) {      first = wrapperMultipleStatusSql(first, statusArray, querySql, \"status\", \"in\");    }    if (startTime > 0) {      first = wrapperSqlParam(first, \"\" + startTime, querySql, \"start_time\", \">\", params);    }    if (endTime > 0) {      first = wrapperSqlParam(first, \"\" + endTime, querySql, \"end_time\", \"<\", params);    }    if (flowType != -1) {      wrapperSqlParam(first, \"\" + flowType, querySql, \"flow_type\", \"=\", params);    }    if (skip > -1 && num > 0) {      querySql.append(\" ORDER BY exec_id DESC LIMIT ?, ?\");      params.add(skip);      params.add(num);    }    try {      return this.dbOperator.query(querySql.toString(), new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "wrapperMultipleStatusSql", "params": ["boolean", "String", "StringBuilder", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean wrapperMultipleStatusSql(boolean firstParam, String[] statusArray, StringBuilder querySql,      String dbColumnName, String action) {    if (firstParam) {      querySql.append(\" WHERE \");      firstParam = false;    } else {      querySql.append(\" AND \");    }    StringBuilder statusBuilder = new StringBuilder();    String joinStatus = String.join(\",\", statusArray);    statusBuilder.append(dbColumnName).append(\" \").append(action).append(\"(\").append(joinStatus).append(\") \");    querySql.append(statusBuilder);    return firstParam;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchMaintainedFlowHistory", "params": ["String", "String", "String", "String", "String", "long", "long", "int", "int", "int", "String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchMaintainedFlowHistory(final String projContain, final String flowContains,final String execIdContain,                                        final String userNameContains, final String status,                                        final long startTime, final long endTime,                                        final int skip, final int num, final int flowType, String username, List<Integer> projectIds)          throws ExecutorManagerException {    String projectIdsStr = projectIds.stream()            .map(Object::toString)            .collect(joining(\",\", \"(\", \")\"));    StringBuilder querySql = new StringBuilder(\"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef, projects p \"            + \"WHERE ef.project_id = p.id \"            + \"AND ef.project_id IN \" + projectIdsStr + \" \");    final List<Object> params = new ArrayList<>();    boolean first = false;    if (StringUtils.isNotBlank(projContain)) {      first = wrapperSqlParam(first, projContain, querySql, \"p.name\", \"LIKE\", params);    }    // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.    if (StringUtils.isNotBlank(flowContains)) {      first = wrapperSqlParam(first, flowContains, querySql, \"flow_id\", \"LIKE\", params);    }    if (StringUtils.isNotBlank(execIdContain)) {      first = wrapperSqlParam(first, execIdContain, querySql, \"exec_id\", \"LIKE\", params);    }    if (StringUtils.isNotBlank(userNameContains)) {      first =  wrapperSqlParam(first, userNameContains, querySql, \"submit_user\", \"LIKE\", params);    }    String[] statusArray = status.split(\",\");    if (!(\"0\".equals(statusArray[0]))) {      first = wrapperMultipleStatusSql(first, statusArray, querySql, \"status\", \"in\");    }    if (startTime > 0) {      first = wrapperSqlParam(first, \"\" + startTime, querySql, \"start_time\", \">\", params);    }    if (endTime > 0) {      first = wrapperSqlParam(first, \"\" + endTime, querySql, \"end_time\", \"<\", params);    }    if (flowType != -1) {      wrapperSqlParam(first, \"\" + flowType, querySql, \"flow_type\", \"=\", params);    }    if (skip > -1 && num > 0) {      querySql.append(\" ORDER BY exec_id DESC LIMIT ?, ?\");      params.add(skip);      params.add(num);    }    try {      return this.dbOperator.query(querySql.toString(), new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "wrapperSqlParam", "params": ["boolean", "String", "StringBuilder", "String", "String", "List<Object>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean wrapperSqlParam(boolean firstParam, String param, StringBuilder querySql,                                        String dbColumnName, String action, List<Object> params) {    if (firstParam) {      querySql.append(\" WHERE \");      firstParam = false;    } else {      querySql.append(\" AND \");    }    querySql.append(\" \").append(dbColumnName).append(\" \").append(action).append(\" ?\");    if (action.equalsIgnoreCase(\"like\")) {      params.add('%' + param + '%');    } else {      params.add(param);    }    return firstParam;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchFlowHistoryQuickSearch", "params": ["String", "String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchFlowHistoryQuickSearch(final String flowContains, final String userNameContains,      final int skip, final int num)      throws ExecutorManagerException {    String query;    final List<Object> params = new ArrayList<>();    if(null != userNameContains){      query = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef, projects p, project_permissions pp \"          + \"WHERE ef.project_id = p.id AND ef.project_id = pp.project_id \"          + \"AND pp.name=? \";      params.add(userNameContains);    }else{      query = \"SELECT exec_id, ef.enc_type, flow_data FROM execution_flows ef JOIN projects p ON ef.project_id = p.id\";    }    // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.    if (flowContains != null && !flowContains.isEmpty()) {      query += \" AND \";      query += \" (ef.exec_id LIKE ? OR ef.flow_id LIKE ? OR p.name LIKE ?) \";      params.add('%' + flowContains + '%');      params.add('%' + flowContains + '%');      params.add('%' + flowContains + '%');    }    if (skip > -1 && num > 0) {      query += \" ORDER BY exec_id DESC LIMIT ?, ? \";      params.add(skip);      params.add(num);    }    try {      return this.dbOperator.query(query, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchFlowHistoryQuickSearch", "params": ["String", "String", "int", "int", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchFlowHistoryQuickSearch(final String flowContains, final String username,                                                   final int skip, final int num, List<Integer> projectIds)          throws ExecutorManagerException {    String query;    final List<Object> params = new ArrayList<>();    String projectIdsStr = projectIds.stream()            .map(Objects::toString)            .collect(joining(\",\", \"(\", \")\"));    query = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data, ef.project_id as project_id FROM execution_flows ef, projects p \"              + \"WHERE ef.project_id = p.id \"              + \"AND ef.project_id IN \" + projectIdsStr + \" \";    // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.    if (flowContains != null && !flowContains.isEmpty()) {      query += \" AND \";      query += \" (ef.exec_id LIKE ? OR ef.flow_id LIKE ? OR p.name LIKE ?) \";      params.add('%' + flowContains + '%');      params.add('%' + flowContains + '%');      params.add('%' + flowContains + '%');    }    if (skip > -1 && num > 0) {      query += \" ORDER BY exec_id DESC LIMIT ?, ? \";      params.add(skip);      params.add(num);    }    try {      return this.dbOperator.query(query, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchFlowAllHistory", "params": ["int", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchFlowAllHistory(final int projectId, final String flowId, final String user)      throws ExecutorManagerException {    String querySql = \"SELECT exec_id, enc_type, flow_data FROM execution_flows \"        + \"WHERE project_id=? AND flow_id=? \";    final List<Object> params = new ArrayList<>();    try {      params.add(projectId);      params.add(flowId);      if (user != null && !user.isEmpty()) {        querySql += \"AND \";        querySql += \"submit_user = ? \";        params.add(user);      }      querySql += \"ORDER BY exec_id \";      return this.dbOperator.query(querySql, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching flow history\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateExecutableFlow", "params": ["ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "void", "snippet": "  void updateExecutableFlow(final ExecutableFlow flow) throws ExecutorManagerException {    logger.info(\"current flow status is {}.\", flow.getStatus());    updateExecutableFlow(flow, EncodingType.GZIP);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateExecutableFlow", "params": ["ExecutableFlow", "EncodingType"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateExecutableFlow(final ExecutableFlow flow, final EncodingType encType)      throws ExecutorManagerException {    final String UPDATE_EXECUTABLE_FLOW_DATA =        \"UPDATE execution_flows \"            + \"SET status=?,update_time=?,start_time=?,end_time=?,enc_type=?,flow_data=?,flow_type=? \"            + \"WHERE exec_id=?\";    final String json = JSONUtils.toJSON(flow.toObject());    byte[] data = null;    try {      final byte[] stringData = json.getBytes(\"UTF-8\");      data = stringData;      // Todo kunkun-tang: use a common method to transform stringData to data.      if (encType == EncodingType.GZIP) {        data = GZIPUtils.gzipBytes(stringData);      }    } catch (final IOException e) {      throw new ExecutorManagerException(\"Error encoding the execution flow.\");    }    try {      this.dbOperator.update(UPDATE_EXECUTABLE_FLOW_DATA,          flow.getStatus()          .getNumVal(),          flow.getUpdateTime(),          flow.getStartTime(),          flow.getEndTime(),          encType.getNumVal(),          data,          flow.getFlowType(),          flow.getExecutionId());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error updating flow.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchExecutableFlow", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow fetchExecutableFlow(final int execId) throws ExecutorManagerException {    final FetchExecutableFlows flowHandler = new FetchExecutableFlows();    try {      final List<ExecutableFlow> properties = this.dbOperator          .query(FetchExecutableFlows.FETCH_EXECUTABLE_FLOW, flowHandler, execId);      if (properties.isEmpty()) {        return null;      } else {        return properties.get(0);      }    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching flow id \" + execId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unsetExecutorIdForExecution", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void unsetExecutorIdForExecution(final int executionId) throws ExecutorManagerException {    final String UNSET_EXECUTOR = \"UPDATE execution_flows SET executor_id = null where exec_id = ?\";    final SQLTransaction<Integer> unsetExecutor =        transOperator -> transOperator.update(UNSET_EXECUTOR, executionId);    try {      this.dbOperator.transaction(unsetExecutor);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error unsetting executor id for execution \" + executionId,          e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectAndUpdateExecution", "params": ["int", "boolean"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int selectAndUpdateExecution(final int executorId, final boolean isActive)      throws ExecutorManagerException {    final String UPDATE_EXECUTION = \"UPDATE execution_flows SET executor_id = ? where exec_id = ?\";    final String selectExecutionForUpdate = isActive ?        SelectFromExecutionFlows.SELECT_EXECUTION_FOR_UPDATE_ACTIVE :        SelectFromExecutionFlows.SELECT_EXECUTION_FOR_UPDATE_INACTIVE;    final SQLTransaction<Integer> selectAndUpdateExecution = transOperator -> {      final List<Integer> execIds = transOperator.query(selectExecutionForUpdate,          new SelectFromExecutionFlows(), executorId);      int execId = -1;      if (!execIds.isEmpty()) {        execId = execIds.get(0);        transOperator.update(UPDATE_EXECUTION, executorId, execId);      }      transOperator.getConnection().commit();      return execId;    };    try {      return this.dbOperator.transaction(selectAndUpdateExecution);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error selecting and updating execution with executor \"          + executorId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchUserFlowHistory", "params": ["int", "int", "String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchUserFlowHistory(final int skip, final int num, String user)      throws ExecutorManagerException {//alter table project_permissions add KEY permission_nameindex(name,project_id)    String querySQL = \"select exec_id,enc_type, flow_data from execution_flows where exec_id in \" +            \"( \" +            \"select exec_id from ( \" +            \"SELECT exec_id FROM execution_flows ef  \" +            \"left join project_permissions pp on ef.project_id = pp.project_id  \" +            \"WHERE pp.name=? \" +            \"ORDER BY exec_id DESC LIMIT ?, ? \" +            \") a \" +            \") order by exec_id DESC\";//    String querySQL = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef \"//        + \"left join project_permissions pp on ef.project_id = pp.project_id \"//        + \"WHERE pp.name=? \"//        + \"ORDER BY exec_id DESC LIMIT ?, ? \";    try {      return this.dbOperator.query(querySQL, new FetchExecutableFlows(), user, skip, num);    } catch (final SQLException e) {      logger.error(\"\u6267\u884c\u67e5\u627e\u7528\u6237:\" + user + \" Flow \u5386\u53f2\u5931\u8d25 fetchUserFlowHistory Dao\");      throw new ExecutorManagerException(\"Error fetching User: \" + user + \"  flow History\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchUserFlowHistoryByAdvanceFilter", "params": ["String", "String", "String", "String", "String", "long", "long", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchUserFlowHistoryByAdvanceFilter(final String projContain, final String flowContains,                                                           final String execIdContain, final String userNameContains,                                                           final String status, final long startTime, final long endTime,                                                           final int skip, final int num, int flowType)                                                           throws ExecutorManagerException {    StringBuilder baseQuerySql = new StringBuilder(\"SELECT exec_id, ef.enc_type, flow_data FROM execution_flows ef JOIN projects p ON ef.project_id = p.id\");    final List<Object> params = new ArrayList<>();    boolean first = true;    if (StringUtils.isNotBlank(projContain)) {      first = wrapperSqlParam(first, projContain, baseQuerySql, \"name\", \"LIKE\", params);    }    // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.    if (StringUtils.isNotBlank(flowContains)) {      first = wrapperSqlParam(first, flowContains, baseQuerySql, \"flow_id\", \"LIKE\", params);    }    if (StringUtils.isNotBlank(execIdContain)) {      first = wrapperSqlParam(first, execIdContain, baseQuerySql, \"exec_id\", \"LIKE\", params);    }    String[] statusArray = status.split(\",\");    if (!(\"0\".equals(statusArray[0]))) {      first = wrapperMultipleStatusSql(first, statusArray, baseQuerySql, \"status\", \"in\");    }    if (startTime > 0) {      first = wrapperSqlParam(first, \"\" + startTime, baseQuerySql, \"start_time\", \">\", params);    }    if (endTime > 0) {      first = wrapperSqlParam(first, \"\" + endTime, baseQuerySql, \"end_time\", \"<\", params);    }    first = wrapperSqlParam(first, userNameContains, baseQuerySql, \"submit_user\", \"=\", params);    if (flowType != -1) {      wrapperSqlParam(first, \"\" + flowType, baseQuerySql, \"flow_type\", \"=\", params);    }    if (skip > -1 && num > 0) {      baseQuerySql.append(\"  ORDER BY exec_id DESC LIMIT ?, ?\");      params.add(skip);      params.add(num);    }    try {      return this.dbOperator.query(baseQuerySql.toString(), new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      logger.error(\"\u6267\u884c\u6839\u636e\u6761\u4ef6\u67e5\u627e\u7528\u6237:\" + userNameContains + \" Flow \u5386\u53f2\u5931\u8d25 fetchUserFlowHistory Dao\");      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchHistoryRecoverFlows", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchHistoryRecoverFlows(final String userNameContains)      throws ExecutorManagerException {    String query =        \"SELECT exec_id, enc_type, flow_data FROM execution_flows a,\"            + \"(select max(exec_id) as bexec_id from execution_flows \"            + \"WHERE flow_type = 2 or flow_type = 3 or flow_type = 4  or flow_type = 5 Group by repeat_id) b \"            + \"where a.exec_id = b.bexec_id\";    final List<Object> params = new ArrayList<>();    boolean first = true;    if(userNameContains != null && !userNameContains.isEmpty()){      query += \" AND \";      query += \" submit_user = ?\";      params.add(userNameContains);    }    //\u8bbe\u7f6e\u6570\u636e\u8865\u91c7\u6761\u4ef6//    if (first) {//      query += \" WHERE \";//      first = false;//    } else {//      query += \" AND \";//    }//    query += \" flow_type = 2\";    query += \" ORDER BY start_time DESC\";    try {      return this.dbOperator.query(query, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchHistoryRecoverFlowByRepeatId", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchHistoryRecoverFlowByRepeatId(final String repeatId)      throws ExecutorManagerException {    String query =        \"select exec_id, enc_type, flow_data \"            + \"from execution_flows a,\"            + \"(SELECT max(exec_id) as bexec_id FROM execution_flows WHERE repeat_id = ?)b \"            + \"where a.exec_id = b.bexec_id \";    final List<Object> params = new ArrayList<>();    params.add(repeatId);    try {      return this.dbOperator.query(query, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flow by repeatId\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchHistoryRecoverFlowByFlowId", "params": ["String", "String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchHistoryRecoverFlowByFlowId(final String flowId, final String projectId)      throws ExecutorManagerException {    String query =        \"select exec_id, enc_type, flow_data \"            + \"from execution_flows \"            + \"where flow_id = ? and project_id = ? and repeat_id != '' \"            + \"order by start_time DESC limit 1 \";    final List<Object> params = new ArrayList<>();    params.add(flowId);    params.add(projectId);    try {      return this.dbOperator.query(query, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flow by flowId\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchHistoryRecoverFlows", "params": ["Map", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchHistoryRecoverFlows(final Map paramMap, final int skip, final int num)      throws ExecutorManagerException {    String query =        \"SELECT exec_id, enc_type, flow_data FROM execution_flows a,\"            + \"(select max(exec_id) as bexec_id from execution_flows \"            + \"WHERE flow_type = 2 or flow_type = 3 or flow_type = 4  or flow_type = 5 Group by repeat_id) b \"            + \"where a.exec_id = b.bexec_id\";    final List<Object> params = new ArrayList<>();    boolean first = true;    if(!paramMap.isEmpty()){      String userName = String.valueOf(paramMap.get(\"userName\"));      if(userName != null && !userName.isEmpty()){        query += \" AND submit_user = ?\";        params.add(userName);      }    }    if (skip > -1 && num > 0) {      query += \"  ORDER BY start_time DESC LIMIT ?, ?\";      params.add(skip);      params.add(num);    }    try {      return this.dbOperator.query(query, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectLastExecutableFlow", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> getProjectLastExecutableFlow(final int projectId, final String flowId)      throws ExecutorManagerException {    try {      String query =          \"select exec_id, enc_type, flow_data \"              + \"from execution_flows \"              + \"where project_id = ? and flow_id = ? \"              + \"order by start_time DESC limit 1 \";      return this.dbOperator.query(query, new FetchExecutableFlows(), projectId, flowId);    } catch (final SQLException e) {      logger.error(\"\u6267\u884c\u67e5\u627e\u9879\u76ee:\" + projectId + \" \u6700\u540e\u4e00\u6b21\u6267\u884c\u5de5\u4f5c\u6d41\u8bb0\u5f55\u5931\u8d25 getProjectLastExecutableFlow Dao\");      throw new ExecutorManagerException(\"Error fetching project: \" + projectId + \" last flow History\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchUserFlowHistoryByProjectIdAndFlowId", "params": ["int", "String", "int", "int", "String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchUserFlowHistoryByProjectIdAndFlowId(final int projectId, final String flowId,      final int skip, final int num, final String userName)      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchExecutableFlows.FETCH_USER_EXECUTABLE_FLOW_HISTORY_BY_PROJECT_AND_FLOW,          new FetchExecutableFlows(), projectId, flowId, userName, skip, num);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching flow history\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchUserFlowHistory", "params": ["String", "String", "String", "String", "String", "String", "long", "long", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchUserFlowHistory(final String loginUser, final String projContain,                                            final String flowContains,final String execIdContain,      final String userNameContains, final String status,      final long startTime, final long endTime,      final int skip, final int num, int flowType)      throws ExecutorManagerException {    StringBuilder querySql = new StringBuilder(\"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef, projects p, project_permissions pp \"            + \"WHERE ef.project_id = p.id AND ef.project_id = pp.project_id \"            + \"AND pp.name=? \");    final List<Object> params = new ArrayList<>();    params.add(loginUser);    boolean first = false;    if (projContain != null && !projContain.isEmpty()) {      first = wrapperSqlParam(first, projContain, querySql, \"p.name\", \"like\", params);    }    // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.    if (flowContains != null && !flowContains.isEmpty()) {      first = wrapperSqlParam(first, flowContains, querySql, \"flow_id\", \"like\", params);    }    if (execIdContain != null && !execIdContain.isEmpty()) {      first = wrapperSqlParam(first, execIdContain, querySql, \"exec_id\", \"like\", params);    }    String[] statusArray = status.split(\",\");    if (!(\"0\".equals(statusArray[0]))) {      first = wrapperMultipleStatusSql(first, statusArray, querySql, \"status\", \"in\");    }    if (startTime > 0) {      first = wrapperSqlParam(first, \"\" + startTime, querySql, \"start_time\", \">\", params);    }    if (endTime > 0) {      first = wrapperSqlParam(first, \"\" + endTime, querySql, \"end_time\", \"<\", params);    }    if (userNameContains != null && !userNameContains.isEmpty()) {      first = wrapperSqlParam(first, userNameContains, querySql, \"submit_user\", \"like\", params);    }    if (flowType != -1) {      first = wrapperSqlParam(first, \"\" + flowType, querySql, \"flow_type\", \"=\", params);    }    if (skip > -1 && num > 0) {      querySql.append(\"  ORDER BY exec_id DESC LIMIT ?, ?\");      params.add(skip);      params.add(num);    }    try {      return this.dbOperator.query(querySql.toString(), new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      logger.error(\"\u6267\u884c\u6839\u636e\u6761\u4ef6\u67e5\u627e\u7528\u6237:\" + userNameContains + \" Flow \u5386\u53f2\u5931\u8d25 fetchUserFlowHistory Dao\");      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayExecutableFlowData", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> getTodayExecutableFlowData(final String userName)      throws ExecutorManagerException {    String query = \"\";    final List<Object> params = new ArrayList<>();    Calendar calendar = Calendar.getInstance();    //\u83b7\u53d6\u5f53\u5929\u51cc\u6668\u6beb\u79d2\u6570    calendar.set(Calendar.HOUR_OF_DAY, 0);    calendar.set(Calendar.MINUTE, 0);    calendar.set(Calendar.SECOND, 0);    calendar.set(Calendar.MILLISECOND, 1);    params.add(calendar.getTimeInMillis());    //\u83b7\u53d6\u5f53\u592924\u70b9\u6beb\u79d2\u6570    calendar.set(Calendar.HOUR_OF_DAY, 23);    calendar.set(Calendar.MINUTE, 59);    calendar.set(Calendar.SECOND, 59);    params.add(calendar.getTimeInMillis());    if(null != userName){      query = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef \" +              \"WHERE (ef.submit_time >= ? AND ef.submit_time <= ?) AND ef.flow_type=3 AND \" +              \"ef.`project_id` \" +              \"IN (SELECT pp.`project_id` FROM project_permissions pp WHERE pp.`name` = ?) ;\";      params.add(userName);    }else{      query = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef WHERE (ef.submit_time >= ? AND ef.submit_time <= ?) AND ef.flow_type=3 \";    }    try {      return this.dbOperator.query(query, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      logger.error(\"\u6267\u884c\u6839\u636e\u6761\u4ef6\u67e5\u627e\u7528\u6237:\" + userName + \" \u5f53\u5929Flow\u6267\u884c\u8bb0\u5f55\u5931\u8d25 getTodayExecutableFlowData Dao\");      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayFlowRunTimesByFlowId", "params": ["String", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getTodayFlowRunTimesByFlowId(final String projectId, final String flowId, final String usename) throws ExecutorManagerException {//    String COUNT = \"SELECT count(ef.exec_id) FROM execution_flows ef, project_permissions pp \" +//             \" WHERE ef.project_id = pp.project_id \"//            + \" AND ef.flow_id = ? AND submit_time >= ? AND submit_time <= ? AND ef.flow_type = 3 \";    String COUNT;    if(usename == null) {      // \u7ba1\u7406\u5458      COUNT = \"SELECT count(exec_id) FROM execution_flows  WHERE project_id = ? AND flow_id = ? AND submit_time >= ? AND submit_time <= ? AND flow_type = 3\";    } else {      // \u975e\u7ba1\u7406\u5458      COUNT = \"SELECT count(ef.exec_id) FROM execution_flows ef, project_permissions pp \" +              \" WHERE ef.project_id = pp.project_id AND ef.project_id = ? AND ef.flow_id = ? AND ef.submit_time >= ? AND ef.submit_time <= ? AND ef.flow_type = 3\";    }    List<Object> params = new ArrayList();    params.add(projectId);    params.add(flowId);    Calendar calendar = Calendar.getInstance();    //\u83b7\u53d6\u5f53\u5929\u51cc\u6668\u6beb\u79d2\u6570    calendar.set(Calendar.HOUR_OF_DAY, 0);    calendar.set(Calendar.MINUTE, 0);    calendar.set(Calendar.SECOND, 0);    calendar.set(Calendar.MILLISECOND, 1);    params.add(calendar.getTimeInMillis());    //\u83b7\u53d6\u5f53\u592924\u70b9\u6beb\u79d2\u6570    calendar.set(Calendar.HOUR_OF_DAY, 23);    calendar.set(Calendar.MINUTE, 59);    calendar.set(Calendar.SECOND, 59);    params.add(calendar.getTimeInMillis());    if(usename != null){      logger.info(\"\u975eadmin\u7528\u6237\");      COUNT += \" AND pp.name = ?\";      params.add(usename);    }    try {      return this.dbOperator.query(COUNT, new FetchFlowRunTimes(), params.toArray());    } catch (final SQLException e) {      logger.error(\"\u83b7\u53d6\u5b9a\u65f6\u8c03\u5ea6\u4efb\u52a1\u4eca\u5929\u8fd0\u884c\u6b21\u6570\u5931\u8d25\");      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayExecutableFlowDataNew", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> getTodayExecutableFlowDataNew(final String userName)          throws ExecutorManagerException {    String query = \"\";    final List<Object> params = new ArrayList<>();    Calendar calendar = Calendar.getInstance();    //\u83b7\u53d6\u5f53\u5929\u51cc\u6668\u6beb\u79d2\u6570    calendar.set(Calendar.HOUR_OF_DAY, 0);    calendar.set(Calendar.MINUTE, 0);    calendar.set(Calendar.SECOND, 0);    calendar.set(Calendar.MILLISECOND, 1);    params.add(calendar.getTimeInMillis());    //\u83b7\u53d6\u5f53\u592924\u70b9\u6beb\u79d2\u6570    calendar.set(Calendar.HOUR_OF_DAY, 23);    calendar.set(Calendar.MINUTE, 59);    calendar.set(Calendar.SECOND, 59);    params.add(calendar.getTimeInMillis());    if(null != userName){      // \u975e\u7ba1\u7406\u5458      query = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef \" +              \"WHERE \" +              \"ef.exec_id IN  (SELECT MAX(exec_id) FROM execution_flows WHERE  submit_time >= ? AND submit_time <= ? AND flow_type=3  GROUP BY project_id, flow_id) \" +              \"AND \" +              \"ef.`project_id` IN (SELECT pp.`project_id` FROM project_permissions pp WHERE pp.`name` = ?);\";      params.add(userName);    }else{      // \u7ba1\u7406\u5458      query = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef WHERE ef.flow_type=3 AND ef.exec_id IN \" +              \"(SELECT MAX(exec_id) FROM execution_flows WHERE  submit_time >= ? AND submit_time <= ? AND flow_type=3  GROUP BY project_id, flow_id);\";    }    try {      return this.dbOperator.query(query, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      logger.error(\"\u6267\u884c\u6839\u636e\u6761\u4ef6\u67e5\u627e\u7528\u6237:\" + userName + \" \u5f53\u5929Flow\u6267\u884c\u8bb0\u5f55\u5931\u8d25 getTodayExecutableFlowData Dao\");      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRealTimeExecFlowDataDao", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> getRealTimeExecFlowDataDao(final String userName)      throws ExecutorManagerException {    String query = \"\";    final List<Object> params = new ArrayList<>();    if(null != userName){//      query = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef, projects p, project_permissions pp \"//          + \"WHERE ef.project_id = p.id AND ef.project_id = pp.project_id \"//          + \"AND pp.name=? \";      query = \"select \" +              \" exec_id,enc_type,flow_data \" +              \" from execution_flows ef where ef.status in(60,70,80) and exec_id in ( \" +              \" select exec_id from ( \" +              \" SELECT \" +              \" ef.exec_id \" +              \" FROM \" +              \" execution_flows ef, \" +              \" project_permissions pp \" +              \"  WHERE \" +              \" ef.project_id = pp.project_id \" +              \" AND pp. NAME = ? \" +              \" ORDER BY \" +              \" ef.start_time DESC \" +              \" LIMIT 10 \" +              \" ) a \" +              \" )\";      params.add(userName);    }else{      query = \"SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef \"          + \" LEFT JOIN projects p ON ef.project_id = p.id \"          +\" WHERE ef.status in(60,70,80) \"          + \" ORDER BY ef.start_time DESC LIMIT 10 ;\";    }    try {      return this.dbOperator.query(query, new FetchExecutableFlows(), params.toArray());    } catch (final SQLException e) {      logger.error(\"\u6267\u884c\u6839\u636e\u6761\u4ef6\u67e5\u627e\u7528\u6237:\" + userName + \" Flow \u5386\u53f2\u5931\u8d25 fetchUserFlowHistory Dao\");      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "ExecutionFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "    public List<Integer> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<Integer> execIds = new ArrayList<>();      do {        final int execId = rs.getInt(1);        execIds.add(execId);      } while (rs.next());      return execIds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "SelectFromExecutionFlows", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer handle(ResultSet rs) throws SQLException {      int times = 0;      while (rs.next()){        times = rs.getInt(1);      }      return times;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "FetchFlowRunTimes", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "    public List<ExecutableFlow> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<ExecutableFlow> execFlows = new ArrayList<>();      do {        final int id = rs.getInt(1);        final int encodingType = rs.getInt(2);        final byte[] data = rs.getBytes(3);        if (data != null) {          final EncodingType encType = EncodingType.fromInteger(encodingType);          try {            final ExecutableFlow exFlow =                ExecutableFlow.createExecutableFlowFromObject(                    GZIPUtils.transformBytesToObject(data, encType));            execFlows.add(exFlow);          } catch (final IOException e) {            throw new SQLException(\"Error retrieving flow data \" + id, e);          }        }      } while (rs.next());      return execFlows;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "FetchExecutableFlows", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Pair>", "snippet": "    public List<Pair<ExecutionReference, ExecutableFlow>> handle(final ResultSet rs)        throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<Pair<ExecutionReference, ExecutableFlow>> execFlows =          new ArrayList<>();      do {        final int id = rs.getInt(1);        final int encodingType = rs.getInt(2);        final byte[] data = rs.getBytes(3);        if (data == null) {          ExecutionFlowDao.logger.error(\"Found a flow with empty data blob exec_id: \" + id);        } else {          final EncodingType encType = EncodingType.fromInteger(encodingType);          try {            final ExecutableFlow exFlow =                ExecutableFlow.createExecutableFlowFromObject(                    GZIPUtils.transformBytesToObject(data, encType));            final ExecutionReference ref = new ExecutionReference(id);            execFlows.add(new Pair<>(ref, exFlow));          } catch (final IOException e) {            throw new SQLException(\"Error retrieving flow data \" + id, e);          }        }      } while (rs.next());      return execFlows;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "FetchQueuedExecutableFlows", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "    public List<ExecutableFlow> handle(        final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<ExecutableFlow> execFlows = new ArrayList<>();      do {        final int id = rs.getInt(1);        final int encodingType = rs.getInt(2);        final byte[] data = rs.getBytes(3);        if (data != null) {          final EncodingType encType = EncodingType.fromInteger(encodingType);          try {            final ExecutableFlow exFlow =                ExecutableFlow.createExecutableFlowFromObject(                    GZIPUtils.transformBytesToObject(data, encType));            execFlows.add(exFlow);          } catch (final IOException e) {            throw new SQLException(\"Error retrieving flow data \" + id, e);          }        }      } while (rs.next());      return execFlows;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java", "stars": "18", "class": {"name": "FetchRecentlyFinishedFlows", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure YellowAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure YellowAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure YellowAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure YellowAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(YellowAmaranthBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/YellowAmaranthPlayerProcedure.java", "stars": "2", "class": {"name": "YellowAmaranthPlayerProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOwnerName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOwnerName() {        return ownerName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOwnerName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOwnerName(String ownerName) {        this.ownerName = ownerName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOwnerDesc", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOwnerDesc() {        return ownerDesc;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOwnerDesc", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOwnerDesc(String ownerDesc) {        this.ownerDesc = ownerDesc;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCreateUser() {        return createUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateUser(String createUser) {        this.createUser = createUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Date createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModifyUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModifyUser() {        return modifyUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setModifyUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModifyUser(String modifyUser) {        this.modifyUser = modifyUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModifyTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getModifyTime() {        return modifyTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setModifyTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModifyTime(Date modifyTime) {        this.modifyTime = modifyTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourceOwner.java", "stars": "23", "class": {"name": "DataSourceOwner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveFieldType", "params": ["Field", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "Type", "snippet": "  public static Type resolveFieldType(Field field, Type srcType) {    Type fieldType = field.getGenericType();    Class<?> declaringClass = field.getDeclaringClass();    return resolveType(fieldType, srcType, declaringClass);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveReturnType", "params": ["Method", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "Type", "snippet": "  public static Type resolveReturnType(Method method, Type srcType) {    Type returnType = method.getGenericReturnType();    Class<?> declaringClass = method.getDeclaringClass();    return resolveType(returnType, srcType, declaringClass);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveParamTypes", "params": ["Method", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "Type", "snippet": "  public static Type[] resolveParamTypes(Method method, Type srcType) {    Type[] paramTypes = method.getGenericParameterTypes();    Class<?> declaringClass = method.getDeclaringClass();    Type[] result = new Type[paramTypes.length];    for (int i = 0; i < paramTypes.length; i++) {      result[i] = resolveType(paramTypes[i], srcType, declaringClass);    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveType", "params": ["Type", "Type", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Type", "snippet": "  private static Type resolveType(Type type, Type srcType, Class<?> declaringClass) {    if (type instanceof TypeVariable) {      return resolveTypeVar((TypeVariable<?>) type, srcType, declaringClass);    } else if (type instanceof ParameterizedType) {      return resolveParameterizedType((ParameterizedType) type, srcType, declaringClass);    } else if (type instanceof GenericArrayType) {      return resolveGenericArrayType((GenericArrayType) type, srcType, declaringClass);    } else {      return type;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveGenericArrayType", "params": ["GenericArrayType", "Type", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Type", "snippet": "  private static Type resolveGenericArrayType(GenericArrayType genericArrayType, Type srcType, Class<?> declaringClass) {    Type componentType = genericArrayType.getGenericComponentType();    Type resolvedComponentType = null;    if (componentType instanceof TypeVariable) {      resolvedComponentType = resolveTypeVar((TypeVariable<?>) componentType, srcType, declaringClass);    } else if (componentType instanceof GenericArrayType) {      resolvedComponentType = resolveGenericArrayType((GenericArrayType) componentType, srcType, declaringClass);    } else if (componentType instanceof ParameterizedType) {      resolvedComponentType = resolveParameterizedType((ParameterizedType) componentType, srcType, declaringClass);    }    if (resolvedComponentType instanceof Class) {      return Array.newInstance((Class<?>) resolvedComponentType, 0).getClass();    } else {      return new GenericArrayTypeImpl(resolvedComponentType);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveParameterizedType", "params": ["ParameterizedType", "Type", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "ParameterizedType", "snippet": "  private static ParameterizedType resolveParameterizedType(ParameterizedType parameterizedType, Type srcType, Class<?> declaringClass) {    Class<?> rawType = (Class<?>) parameterizedType.getRawType();    Type[] typeArgs = parameterizedType.getActualTypeArguments();    Type[] args = new Type[typeArgs.length];    for (int i = 0; i < typeArgs.length; i++) {      if (typeArgs[i] instanceof TypeVariable) {        args[i] = resolveTypeVar((TypeVariable<?>) typeArgs[i], srcType, declaringClass);      } else if (typeArgs[i] instanceof ParameterizedType) {        args[i] = resolveParameterizedType((ParameterizedType) typeArgs[i], srcType, declaringClass);      } else if (typeArgs[i] instanceof WildcardType) {        args[i] = resolveWildcardType((WildcardType) typeArgs[i], srcType, declaringClass);      } else {        args[i] = typeArgs[i];      }    }    return new ParameterizedTypeImpl(rawType, null, args);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveWildcardType", "params": ["WildcardType", "Type", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Type", "snippet": "  private static Type resolveWildcardType(WildcardType wildcardType, Type srcType, Class<?> declaringClass) {    Type[] lowerBounds = resolveWildcardTypeBounds(wildcardType.getLowerBounds(), srcType, declaringClass);    Type[] upperBounds = resolveWildcardTypeBounds(wildcardType.getUpperBounds(), srcType, declaringClass);    return new WildcardTypeImpl(lowerBounds, upperBounds);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveWildcardTypeBounds", "params": ["Type", "Type", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Type", "snippet": "  private static Type[] resolveWildcardTypeBounds(Type[] bounds, Type srcType, Class<?> declaringClass) {    Type[] result = new Type[bounds.length];    for (int i = 0; i < bounds.length; i++) {      if (bounds[i] instanceof TypeVariable) {        result[i] = resolveTypeVar((TypeVariable<?>) bounds[i], srcType, declaringClass);      } else if (bounds[i] instanceof ParameterizedType) {        result[i] = resolveParameterizedType((ParameterizedType) bounds[i], srcType, declaringClass);      } else if (bounds[i] instanceof WildcardType) {        result[i] = resolveWildcardType((WildcardType) bounds[i], srcType, declaringClass);      } else {        result[i] = bounds[i];      }    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveTypeVar", "params": ["TypeVariable<?>", "Type", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Type", "snippet": "  private static Type resolveTypeVar(TypeVariable<?> typeVar, Type srcType, Class<?> declaringClass) {    Type result;    Class<?> clazz;    if (srcType instanceof Class) {      clazz = (Class<?>) srcType;    } else if (srcType instanceof ParameterizedType) {      ParameterizedType parameterizedType = (ParameterizedType) srcType;      clazz = (Class<?>) parameterizedType.getRawType();    } else {      throw new IllegalArgumentException(\"The 2nd arg must be Class or ParameterizedType, but was: \" + srcType.getClass());    }    if (clazz == declaringClass) {      Type[] bounds = typeVar.getBounds();      if (bounds.length > 0) {        return bounds[0];      }      return Object.class;    }    Type superclass = clazz.getGenericSuperclass();    result = scanSuperTypes(typeVar, srcType, declaringClass, clazz, superclass);    if (result != null) {      return result;    }    Type[] superInterfaces = clazz.getGenericInterfaces();    for (Type superInterface : superInterfaces) {      result = scanSuperTypes(typeVar, srcType, declaringClass, clazz, superInterface);      if (result != null) {        return result;      }    }    return Object.class;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scanSuperTypes", "params": ["TypeVariable<?>", "Type", "Class<?>", "Class<?>", "Type"], "throws": null, "modifiers": ["private", "static"], "return_type": "Type", "snippet": "  private static Type scanSuperTypes(TypeVariable<?> typeVar, Type srcType, Class<?> declaringClass, Class<?> clazz, Type superclass) {    if (superclass instanceof ParameterizedType) {      ParameterizedType parentAsType = (ParameterizedType) superclass;      Class<?> parentAsClass = (Class<?>) parentAsType.getRawType();      TypeVariable<?>[] parentTypeVars = parentAsClass.getTypeParameters();      if (srcType instanceof ParameterizedType) {        parentAsType = translateParentTypeVars((ParameterizedType) srcType, clazz, parentAsType);      }      if (declaringClass == parentAsClass) {        for (int i = 0; i < parentTypeVars.length; i++) {          if (typeVar.equals(parentTypeVars[i])) {            return parentAsType.getActualTypeArguments()[i];          }        }      }      if (declaringClass.isAssignableFrom(parentAsClass)) {        return resolveTypeVar(typeVar, parentAsType, declaringClass);      }    } else if (superclass instanceof Class && declaringClass.isAssignableFrom((Class<?>) superclass)) {      return resolveTypeVar(typeVar, superclass, declaringClass);    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "translateParentTypeVars", "params": ["ParameterizedType", "Class<?>", "ParameterizedType"], "throws": null, "modifiers": ["private", "static"], "return_type": "ParameterizedType", "snippet": "  private static ParameterizedType translateParentTypeVars(ParameterizedType srcType, Class<?> srcClass, ParameterizedType parentType) {    Type[] parentTypeArgs = parentType.getActualTypeArguments();    Type[] srcTypeArgs = srcType.getActualTypeArguments();    TypeVariable<?>[] srcTypeVars = srcClass.getTypeParameters();    Type[] newParentArgs = new Type[parentTypeArgs.length];    boolean noChange = true;    for (int i = 0; i < parentTypeArgs.length; i++) {      if (parentTypeArgs[i] instanceof TypeVariable) {        for (int j = 0; j < srcTypeVars.length; j++) {          if (srcTypeVars[j].equals(parentTypeArgs[i])) {            noChange = false;            newParentArgs[i] = srcTypeArgs[j];          }        }      } else {        newParentArgs[i] = parentTypeArgs[i];      }    }    return noChange ? parentType : new ParameterizedTypeImpl((Class<?>)parentType.getRawType(), null, newParentArgs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "TypeParameterResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActualTypeArguments", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "    public Type[] getActualTypeArguments() {      return actualTypeArguments;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "ParameterizedTypeImpl", "extends": null, "implements": ["ParameterizedType"], "modifiers": ["static"]}}, {"method_name": "getOwnerType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "    public Type getOwnerType() {      return ownerType;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "ParameterizedTypeImpl", "extends": null, "implements": ["ParameterizedType"], "modifiers": ["static"]}}, {"method_name": "getRawType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "    public Type getRawType() {      return rawType;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "ParameterizedTypeImpl", "extends": null, "implements": ["ParameterizedType"], "modifiers": ["static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {      return \"ParameterizedTypeImpl [rawType=\" + rawType + \", ownerType=\" + ownerType + \", actualTypeArguments=\" + Arrays.toString(actualTypeArguments) + \"]\";    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "ParameterizedTypeImpl", "extends": null, "implements": ["ParameterizedType"], "modifiers": ["static"]}}, {"method_name": "getLowerBounds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "    public Type[] getLowerBounds() {      return lowerBounds;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "WildcardTypeImpl", "extends": null, "implements": ["WildcardType"], "modifiers": ["static"]}}, {"method_name": "getUpperBounds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "    public Type[] getUpperBounds() {      return upperBounds;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "WildcardTypeImpl", "extends": null, "implements": ["WildcardType"], "modifiers": ["static"]}}, {"method_name": "getGenericComponentType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "    public Type getGenericComponentType() {      return genericComponentType;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java", "stars": "15", "class": {"name": "GenericArrayTypeImpl", "extends": null, "implements": ["GenericArrayType"], "modifiers": ["static"]}}, {"method_name": "getFileSystem", "params": ["Map<String,Object>", "File"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "FileSystem", "snippet": "    public static FileSystem getFileSystem(Map<String, Object> params,                                           File kerberos) throws Exception {        Configuration conf = new Configuration();        Object value = params.get(PARAM_HADOOP_CONF_LIST);        if(value instanceof Map){            Map listItem = (Map)value;            listItem.forEach((k, v) -> conf.set(String.valueOf(k), String.valueOf(v)));        }        configuration(conf, params);        String principle = String.valueOf(params.get(PARAM_KERBEROS_FILE_PRINCILE));        conf.set(\"dfs.namenode.kerberos.principal\", principle);        principle = principle.substring(0, principle.indexOf(\"@\"));        conf.set(\"hadoop.security.authentication\", \"kerberos\");        conf.set(\"com.sum.security.auth.module.Krb5LoginModule\", \"required\");        conf.setBoolean(\"hadoop.security.authorization\", true);        UserGroupInformation ugi = UserGroupInformationWrapper.loginUserFromKeytab(conf,                principle, kerberos.getPath());        return ugi.doAs((PrivilegedExceptionAction<FileSystem>)() -> {            FileSystem f = FileSystem.get(conf);            f.exists(new Path(\"/\"));            return f;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/Hdfs.java", "stars": "23", "class": {"name": "Hdfs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileSystem", "params": ["Map<String,Object>", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "FileSystem", "snippet": "    public static FileSystem getFileSystem(Map<String, Object> params, String userName) throws Exception{        Configuration conf = new Configuration();        Object value = params.get(PARAM_HADOOP_CONF_LIST);        if(value instanceof Map){            Map listItem = (Map)value;            listItem.forEach((k, v) -> conf.set(String.valueOf(k), String.valueOf(v)));        }        configuration(conf, params);        if(StringUtils.isBlank(userName)){            userName = System.getProperty(\"user.name\", \"\");        }        UserGroupInformation ugi = UserGroupInformationWrapper.createRemoteUser(conf, userName);        return ugi.doAs((PrivilegedExceptionAction<FileSystem>) () ->{            FileSystem f = FileSystem.get(conf);            f.exists(new Path(\"/\"));            return f;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/Hdfs.java", "stars": "23", "class": {"name": "Hdfs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configuration", "params": ["Configuration", "Map<String,Object>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void configuration(Configuration conf, Map<String, Object> params){        conf.set(\"fs.defaultFS\", String.valueOf(params.get(PARAM_HDFS_PATH)));        conf.setInt(\"ipc.client.connect.max.retries\", CONN_DEFAULT_RETRY_COUNT);        conf.setInt(\"dfs.client.failover.max.attempts\", CONN_DEFAULT_RETRY_COUNT);        conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", URI.create(conf.get(FS_DEFAULT_NAME_KEY, \"\")).getScheme()), true);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/Hdfs.java", "stars": "23", "class": {"name": "Hdfs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        // arrays: collection of homogenous datatypes        int[] first = {4,3,2,5,6};        int[] second = first;//        System.out.println(Arrays.toString(second));        second[0] = 300;        System.out.println(Arrays.toString(first));        int[] third = {8,9,20};        first = third;        second = third;    }", "url": "https://raw.githubusercontent.com/kunal-kushwaha/Progate-Java-101/master/src/com/kunal/DataStructures.java", "stars": "1", "class": {"name": "DataStructures", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"entity\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency entity for procedure RightClickedYellowAmaranth!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure RightClickedYellowAmaranth!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure RightClickedYellowAmaranth!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure RightClickedYellowAmaranth!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure RightClickedYellowAmaranth!\");\t\t\treturn;\t\t}\t\tEntity entity = (Entity) dependencies.get(\"entity\");\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif ((((entity instanceof LivingEntity) ? ((LivingEntity) entity).getHeldItemMainhand() : ItemStack.EMPTY)\t\t\t\t.getItem() == new ItemStack(Blocks.AIR, (int) (1)).getItem())) {\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.AIR.getDefaultState(), 3);\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.FLOWER_POT.getDefaultState(), 3);\t\t\tif (entity instanceof LivingEntity) {\t\t\t\tItemStack _setstack = new ItemStack(YellowAmaranthBlock.block, (int) (1));\t\t\t\t_setstack.setCount((int) 1);\t\t\t\t((LivingEntity) entity).setHeldItem(Hand.MAIN_HAND, _setstack);\t\t\t\tif (entity instanceof ServerPlayerEntity)\t\t\t\t\t((ServerPlayerEntity) entity).inventory.markDirty();\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/RightClickedYellowAmaranthProcedure.java", "stars": "2", "class": {"name": "RightClickedYellowAmaranthProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "creer", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String creer(String hashEncode) {        return hashGenerator.hasherAvecPepper(hashEncode);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/domain/use_cases/interactors/CreerEmpreinteIdentite.java", "stars": "5", "class": {"name": "CreerEmpreinteIdentite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());        if (getArguments() == null || !getArguments().containsKey(ARRAY) || !getArguments().containsKey(TITLE) || mOnClickListener == null) {            return builder.create();        }        Bundle b = getArguments();        Object array = b.get(ARRAY);        String[] stringArray;        if (array instanceof List) {            stringArray = (String[]) ((List) array).toArray(new String[((List) array).size()]);        } else if (array instanceof String[]) {            stringArray = b.getStringArray(ARRAY);        } else {            return builder.create();        }        String title = b.getString(TITLE);        if (b.containsKey(MODE) && b.getInt(MODE) == SINGLE_CHOICE) {            int defaultPosition = -1;            if (b.containsKey(POSITION)) {                defaultPosition = b.getInt(POSITION);            }            builder.setSingleChoiceItems(stringArray, defaultPosition, mOnClickListener);        } else {            builder.setItems(stringArray, mOnClickListener);        }        builder                .setTitle(title)                .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.dismiss();                    }                });        return builder.create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDialogClickListener", "params": ["DialogInterface"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setDialogClickListener(DialogInterface.OnClickListener dialogClickListener) {        mOnClickListener = dialogClickListener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "int", "List<String>", "int", "DialogInterface"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm, int titleRes, List<String> items, int defaultPosition, DialogInterface.OnClickListener dialogClickListener) {        show(fm, ButterApplication.getAppContext().getString(titleRes), items, defaultPosition, dialogClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "int", "String", "int", "DialogInterface"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm, int titleRes, String[] items, int defaultPosition, DialogInterface.OnClickListener dialogClickListener) {        show(fm, ButterApplication.getAppContext().getString(titleRes), items, defaultPosition, dialogClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "String", "List<String>", "int", "DialogInterface"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show(FragmentManager fm, String title, List<String> items, int defaultPosition, DialogInterface.OnClickListener dialogClickListener) {        String[] itemsArray = items.toArray(new String[items.size()]);        show(fm, title, itemsArray, defaultPosition, dialogClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "String", "String", "int", "DialogInterface"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm, String title, String[] items, int defaultPosition, DialogInterface.OnClickListener dialogClickListener) {        show(fm, title, items, defaultPosition, NORMAL, dialogClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "showSingleChoice", "params": ["FragmentManager", "int", "List<String>", "int", "DialogInterface"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showSingleChoice(FragmentManager fm, int titleRes, List<String> items, int defaultPosition, DialogInterface.OnClickListener dialogClickListener) {        showSingleChoice(fm, ButterApplication.getAppContext().getString(titleRes), items, defaultPosition, dialogClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "showSingleChoice", "params": ["FragmentManager", "int", "String", "int", "DialogInterface"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showSingleChoice(FragmentManager fm, int titleRes, String[] items, int defaultPosition, DialogInterface.OnClickListener dialogClickListener) {        showSingleChoice(fm, ButterApplication.getAppContext().getString(titleRes), items, defaultPosition, dialogClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "showSingleChoice", "params": ["FragmentManager", "String", "List<String>", "int", "DialogInterface"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void showSingleChoice(FragmentManager fm, String title, List<String> items, int defaultPosition, DialogInterface.OnClickListener dialogClickListener) {        String[] itemsArray = items.toArray(new String[items.size()]);        showSingleChoice(fm, title, itemsArray, defaultPosition, dialogClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "showSingleChoice", "params": ["FragmentManager", "String", "String", "int", "DialogInterface"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showSingleChoice(FragmentManager fm, String title, String[] items, int defaultPosition, DialogInterface.OnClickListener dialogClickListener) {        show(fm, title, items, defaultPosition, SINGLE_CHOICE, dialogClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "String", "String", "int", "int", "DialogInterface"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show(FragmentManager fm, String title, String[] items, int defaultPosition, int mode, DialogInterface.OnClickListener dialogClickListener) {        Bundle args = new Bundle();        args.putString(TITLE, title);        args.putStringArray(ARRAY, items);        args.putInt(MODE, mode);        args.putInt(POSITION, defaultPosition);        StringArraySelectorDialogFragment dialogFragment = new StringArraySelectorDialogFragment();        dialogFragment.setArguments(args);        dialogFragment.setDialogClickListener(dialogClickListener);        dialogFragment.show(fm, \"overlay_fragment\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/StringArraySelectorDialogFragment.java", "stars": "4", "class": {"name": "StringArraySelectorDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSupposablyMime", "params": ["String"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String getSupposablyMime(String url) {        MimeTypeMap mimes = MimeTypeMap.getSingleton();        String extension = MimeTypeMap.getFileExtensionFromUrl(url);        return TextUtils.isEmpty(extension) ? null : mimes.getMimeTypeFromExtension(extension);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/ProxyCacheUtils.java", "stars": "2", "class": {"name": "ProxyCacheUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertBuffer", "params": ["byte", "long", "int"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void assertBuffer(byte[] buffer, long offset, int length) {        checkNotNull(buffer, \"Buffer must be not null!\");        checkArgument(offset >= 0, \"Data offset must be positive!\");        checkArgument(length >= 0 && length <= buffer.length, \"Length must be in range [0..buffer.length]\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/ProxyCacheUtils.java", "stars": "2", "class": {"name": "ProxyCacheUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preview", "params": ["byte", "int"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String preview(byte[] data, int length) {        int previewLength = Math.min(MAX_ARRAY_PREVIEW, Math.max(length, 0));        byte[] dataRange = Arrays.copyOfRange(data, 0, previewLength);        String preview = Arrays.toString(dataRange);        if (previewLength < length) {            preview = preview.substring(0, preview.length() - 1) + \", ...]\";        }        return preview;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/ProxyCacheUtils.java", "stars": "2", "class": {"name": "ProxyCacheUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encode", "params": ["String"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String encode(String url) {        try {            return URLEncoder.encode(url, \"utf-8\");        } catch (UnsupportedEncodingException e) {            throw new RuntimeException(\"Error encoding url\", e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/ProxyCacheUtils.java", "stars": "2", "class": {"name": "ProxyCacheUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decode", "params": ["String"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String decode(String url) {        try {            return URLDecoder.decode(url, \"utf-8\");        } catch (UnsupportedEncodingException e) {            throw new RuntimeException(\"Error decoding url\", e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/ProxyCacheUtils.java", "stars": "2", "class": {"name": "ProxyCacheUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": ["Closeable"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void close(Closeable closeable) {        if (closeable != null) {            try {                closeable.close();            } catch (IOException e) {                HttpProxyCacheDebuger.printfError(\"Error closing resource\", e);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/ProxyCacheUtils.java", "stars": "2", "class": {"name": "ProxyCacheUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "computeMD5", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String computeMD5(String string) {        try {            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");            byte[] digestBytes = messageDigest.digest(string.getBytes());            return bytesToHexString(digestBytes);        } catch (NoSuchAlgorithmException e) {            throw new IllegalStateException(e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/ProxyCacheUtils.java", "stars": "2", "class": {"name": "ProxyCacheUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "bytesToHexString", "params": ["byte"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String bytesToHexString(byte[] bytes) {        StringBuffer sb = new StringBuffer();        for (byte b : bytes) {            sb.append(String.format(\"%02x\", b));        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/ProxyCacheUtils.java", "stars": "2", "class": {"name": "ProxyCacheUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "before", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid before() {\t\tthis.profiles = System.getProperty(\"spring.profiles.active\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-profile/src/test/java/smoketest/profile/SampleProfileApplicationTests.java", "stars": "47572", "class": {"name": "SampleProfileApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "after", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid after() {\t\tif (this.profiles != null) {\t\t\tSystem.setProperty(\"spring.profiles.active\", this.profiles);\t\t}\t\telse {\t\t\tSystem.clearProperty(\"spring.profiles.active\");\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-profile/src/test/java/smoketest/profile/SampleProfileApplicationTests.java", "stars": "47572", "class": {"name": "SampleProfileApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testDefaultProfile", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testDefaultProfile(CapturedOutput output) {\t\tSampleProfileApplication.main(new String[0]);\t\tassertThat(output).contains(\"Hello Phil\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-profile/src/test/java/smoketest/profile/SampleProfileApplicationTests.java", "stars": "47572", "class": {"name": "SampleProfileApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGoodbyeProfile", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testGoodbyeProfile(CapturedOutput output) {\t\tSystem.setProperty(\"spring.profiles.active\", \"goodbye\");\t\tSampleProfileApplication.main(new String[0]);\t\tassertThat(output).contains(\"Goodbye Everyone\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-profile/src/test/java/smoketest/profile/SampleProfileApplicationTests.java", "stars": "47572", "class": {"name": "SampleProfileApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGenericProfile", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testGenericProfile(CapturedOutput output) {\t\t/*\t\t * This is a profile that requires a new environment property, and one which is\t\t * only overridden in the current working directory. That file also only contains\t\t * partial overrides, and the default application.yml should still supply the\t\t * \"name\" property.\t\t */\t\tSystem.setProperty(\"spring.profiles.active\", \"generic\");\t\tSampleProfileApplication.main(new String[0]);\t\tassertThat(output).contains(\"Bonjour Phil\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-profile/src/test/java/smoketest/profile/SampleProfileApplicationTests.java", "stars": "47572", "class": {"name": "SampleProfileApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGoodbyeProfileFromCommandline", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testGoodbyeProfileFromCommandline(CapturedOutput output) {\t\tSampleProfileApplication.main(new String[] { \"--spring.profiles.active=goodbye\" });\t\tassertThat(output).contains(\"Goodbye Everyone\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-profile/src/test/java/smoketest/profile/SampleProfileApplicationTests.java", "stars": "47572", "class": {"name": "SampleProfileApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "hideUploadButtonWhenNeeded", "params": ["Page", "Session", "Boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void hideUploadButtonWhenNeeded(final Page page, final Session session,                                                final Boolean lockdownUploadProjects) {    final User user = session.getUser();    if (lockdownUploadProjects && !UserUtils.hasPermissionforAction(user, Permission.Type.UPLOADPROJECTS)) {      page.add(\"hideUploadProject\", true);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/PageUtils.java", "stars": "18", "class": {"name": "PageUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "startNetty", "params": ["ServerInfoConfig"], "throws": ["CertificateException", "SSLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void startNetty(ServerInfoConfig serverInfoConfig) throws CertificateException, SSLException {        final SslContext sslCtx;        if (SSL) {            SelfSignedCertificate ssc = new SelfSignedCertificate();            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();        } else {            sslCtx = null;        }        bossGroup = new NioEventLoopGroup(1, new ThreadNameFactory(NET_WEB_SOCKET_BOSS));        workerGroup = new NioEventLoopGroup(0, new ThreadNameFactory(NET_WEB_SOCKET_WORKER));        try {            ServerBootstrap serverBootstrap = new ServerBootstrap();            serverBootstrap.group(bossGroup, workerGroup)                    .channel(NioServerSocketChannel.class)                    .handler(new LoggingHandler(LogLevel.INFO))                    .childHandler(new ChannelInitializer<SocketChannel>() {                        @Override                        protected void initChannel(SocketChannel ch) throws Exception {                            if (sslCtx != null) {                                ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));                            }                            ch.pipeline().addLast(new HttpServerCodec());                            ch.pipeline().addLast(new HttpObjectAggregator(65536));                            ch.pipeline().addLast(new ChunkedWriteHandler());                            ch.pipeline().addLast(new IdleStateHandler(1000,                                    1000, 1000, TimeUnit.MILLISECONDS));                            ch.pipeline().addLast(new WebSocketServerProtocolHandler(WEBSOCKET_PATH, null, true));                            ch.pipeline().addLast(\"logger\", new GameLoggerHandler(LogLevel.DEBUG));                            ch.pipeline().addLast(new WebSocketServerCompressionHandler());                            ch.pipeline().addLast(new DefaultEventExecutorGroup(300), \"WebSocketHttpServerHandler\", webSocketHttpServerHandler);                            ch.pipeline().addLast(new DefaultEventExecutorGroup(300), \"WebSocketFrameServerHandler\", webSocketFrameServerHandler);                        }                    });//            serverInfoConfig.setStartPort(8090);            Channel ch = serverBootstrap.bind(serverInfoConfig.getStartPort()).sync().channel();            System.out.println(\"Open your web browser and navigate to \" +                    (SSL ? \"https\" : \"http\") + \"://127.0.0.1:\" + serverInfoConfig.getStartPort() + '/');            /*\u4e3b\u7ebf\u7a0b\u5230\u8fd9\u91cc\u5c31wait \u5b50\u7ebf\u7a0b\u9000\u51fa\u4e86\uff0c\u5b50\u7ebf\u7a0b\u624d\u662f\u771f\u6b63\u76d1\u542c\u548c\u63a5\u53d7\u8bf7\u6c42\u7684*/            ch.closeFuture().addListener(new ChannelFutureListener() {                @Override                public void operationComplete(ChannelFuture future) throws Exception {                    System.out.println(\"\u670d\u52a1\u5668\u542f\u52a8\u6210\u529f\uff01\");                }            }).sync();        } catch (Exception e) {            log.error(\"\u542f\u52a8\u670d\u52a1\u5668\u5931\u8d25!\");            e.printStackTrace();        } finally {            bossGroup.shutdownGracefully();            workerGroup.shutdownGracefully();        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/server/impl/NettyServerImpl.java", "stars": "1", "class": {"name": "NettyServerImpl", "extends": null, "implements": ["NettyServer"], "modifiers": ["public"]}}, {"method_name": "adapt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Permissions", "snippet": "    public Permissions adapt(String[] strings) {        Permissions permissions = new Permissions();        if (strings.length != 0)            permissions.setSection(Arrays.asList(strings));        return permissions;    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/adapter/StringArrayToPermissionsAdapter.java", "stars": "2", "class": {"name": "StringArrayToPermissionsAdapter", "extends": null, "implements": ["ObjectAdapter"], "modifiers": ["public"]}}, {"method_name": "getPersonID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getPersonID() {\t\treturn personID;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPersonID", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPersonID(String personID) {\t\tthis.personID = personID;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBirthYear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getBirthYear() {\t\treturn birthYear;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBirthYear", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setBirthYear(Integer birthYear) {\t\tthis.birthYear = birthYear;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeathYear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getDeathYear() {\t\treturn deathYear;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDeathYear", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDeathYear(Integer deathYear) {\t\tthis.deathYear = deathYear;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProfessions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String[] getProfessions() {\t\treturn professions;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProfessions", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setProfessions(String[] professions) {\t\tthis.professions = professions;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKnownFor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String[] getKnownFor() {\t\treturn knownFor;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setKnownFor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setKnownFor(String[] knownFor) {\t\tthis.knownFor = knownFor;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Person.java", "stars": "1", "class": {"name": "Person", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "swap", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void swap() {    this.primaryQueue = this.secondaryQueue;    this.secondaryQueue = new ArrayList<>();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/SwapQueue.java", "stars": "18", "class": {"name": "SwapQueue", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "getSwapQueueSize", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getSwapQueueSize() {    return this.secondaryQueue.size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/SwapQueue.java", "stars": "18", "class": {"name": "SwapQueue", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "getPrimarySize", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getPrimarySize() {    return this.primaryQueue.size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/SwapQueue.java", "stars": "18", "class": {"name": "SwapQueue", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["Collection<T>"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void addAll(final Collection<T> col) {    this.secondaryQueue.addAll(col);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/SwapQueue.java", "stars": "18", "class": {"name": "SwapQueue", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getSize() {    return this.secondaryQueue.size() + this.primaryQueue.size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/SwapQueue.java", "stars": "18", "class": {"name": "SwapQueue", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["T"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void add(final T element) {    this.secondaryQueue.add(element);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/SwapQueue.java", "stars": "18", "class": {"name": "SwapQueue", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "iterator", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "Iterator<T>", "snippet": "  public synchronized Iterator<T> iterator() {    return this.primaryQueue.iterator();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/SwapQueue.java", "stars": "18", "class": {"name": "SwapQueue", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleActuatorApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/main/java/smoketest/actuator/SampleActuatorApplication.java", "stars": "47572", "class": {"name": "SampleActuatorApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "helloHealthIndicator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HealthIndicator", "snippet": "\tpublic HealthIndicator helloHealthIndicator() {\t\treturn () -> Health.up().withDetail(\"hello\", \"world\").build();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/main/java/smoketest/actuator/SampleActuatorApplication.java", "stars": "47572", "class": {"name": "SampleActuatorApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testTracer", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testTracer() throws IOException {        byte[] bytes = new AsmClassTransformer().transform(new ClassReader(getClass().getResourceAsStream(LOOP)));        File file = new File(\"C:\\\\Users\\\\lihao\\\\git\\\\jroutine\\\\target\\\\Loop.class\");        if (file.exists()) {            file.delete();        }        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));        bos.write(bytes);        bos.close();        assertNotNull(bytes);    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/test/java/org/coral/jroutine/weave/AsmTransformerTest.java", "stars": "3", "class": {"name": "AsmTransformerTest", "extends": "TestCase", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldUseCommonsLogging", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseCommonsLogging() {    LogFactory.useCommonsLogging();    Log log = LogFactory.getLog(Object.class);    logSomething(log);    assertEquals(log.getClass().getName(), JakartaCommonsLoggingImpl.class.getName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/LogFactoryTest.java", "stars": "15", "class": {"name": "LogFactoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseLog4J", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseLog4J() {    LogFactory.useLog4JLogging();    Log log = LogFactory.getLog(Object.class);    logSomething(log);    assertEquals(log.getClass().getName(), Log4jImpl.class.getName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/LogFactoryTest.java", "stars": "15", "class": {"name": "LogFactoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseLog4J2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseLog4J2() {    LogFactory.useLog4J2Logging();    Log log = LogFactory.getLog(Object.class);    logSomething(log);    assertEquals(log.getClass().getName(), Log4j2Impl.class.getName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/LogFactoryTest.java", "stars": "15", "class": {"name": "LogFactoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseJdKLogging", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseJdKLogging() {    LogFactory.useJdkLogging();    Log log = LogFactory.getLog(Object.class);    logSomething(log);    assertEquals(log.getClass().getName(), Jdk14LoggingImpl.class.getName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/LogFactoryTest.java", "stars": "15", "class": {"name": "LogFactoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseSlf4j", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseSlf4j() {    LogFactory.useSlf4jLogging();    Log log = LogFactory.getLog(Object.class);    logSomething(log);    assertEquals(log.getClass().getName(), Slf4jImpl.class.getName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/LogFactoryTest.java", "stars": "15", "class": {"name": "LogFactoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseStdOut", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseStdOut() {    LogFactory.useStdOutLogging();    Log log = LogFactory.getLog(Object.class);    logSomething(log);    assertEquals(log.getClass().getName(), StdOutImpl.class.getName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/LogFactoryTest.java", "stars": "15", "class": {"name": "LogFactoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseNoLogging", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseNoLogging() {    LogFactory.useNoLogging();    Log log = LogFactory.getLog(Object.class);    logSomething(log);    assertEquals(log.getClass().getName(), NoLoggingImpl.class.getName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/LogFactoryTest.java", "stars": "15", "class": {"name": "LogFactoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReadLogImplFromSettings", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldReadLogImplFromSettings() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/logging/mybatis-config.xml\")) {      new SqlSessionFactoryBuilder().build(reader);    }    Log log = LogFactory.getLog(Object.class);    log.debug(\"Debug message.\");    assertEquals(log.getClass().getName(), NoLoggingImpl.class.getName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/LogFactoryTest.java", "stars": "15", "class": {"name": "LogFactoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "logSomething", "params": ["Log"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void logSomething(Log log) {    log.warn(\"Warning message.\");    log.debug(\"Debug message.\");    log.error(\"Error message.\");    log.error(\"Error with Exception.\", new Exception(\"Test exception.\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/LogFactoryTest.java", "stars": "15", "class": {"name": "LogFactoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "\tpublic File get(String key) {\t\tString fileName = fileNameGenerator.generate(key);\t\treturn new File(cacheDir, fileName);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/BaseDiscCache.java", "stars": "74", "class": {"name": "BaseDiscCache", "extends": null, "implements": ["DiscCacheAware"], "modifiers": ["public", "abstract"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\tFile[] files = cacheDir.listFiles();\t\tif (files != null) {\t\t\tfor (File f : files) {\t\t\t\tf.delete();\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/BaseDiscCache.java", "stars": "74", "class": {"name": "BaseDiscCache", "extends": null, "implements": ["DiscCacheAware"], "modifiers": ["public", "abstract"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {       double temperaturInCelsion = 40.2;       // Aufgabe hier: Ausgabe in Kelvin und Fahrenheit        System.out.println(celsius2kelvin(temperaturInCelsion));        System.out.println(celsius2fahrenheit(temperaturInCelsion));        // Celsius -> Fahrenheit        double temperaturInFahrenheit = 105;        System.out.println(fahrenheit2celsius(temperaturInFahrenheit));        System.out.println(fahrenheit2kelvin(temperaturInFahrenheit));        // Fahreneinheit -> Celsius ODER Fahrenheit -> Kelvin    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/EinheitenUmrechnenLoesung.java", "stars": "3", "class": {"name": "EinheitenUmrechnenLoesung", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fahrenheit2celsius", "params": ["double"], "throws": null, "modifiers": ["static"], "return_type": "double", "snippet": "    static double fahrenheit2celsius(double fahrenheit) {        return 5.0 / 9 * (fahrenheit - 32);    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/EinheitenUmrechnenLoesung.java", "stars": "3", "class": {"name": "EinheitenUmrechnenLoesung", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "celsius2fahrenheit", "params": ["double"], "throws": null, "modifiers": ["static"], "return_type": "double", "snippet": "    static double celsius2fahrenheit(double celsius) {        return 9.0 / 5 * celsius + 32;    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/EinheitenUmrechnenLoesung.java", "stars": "3", "class": {"name": "EinheitenUmrechnenLoesung", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kelvin2celsius", "params": ["double"], "throws": null, "modifiers": ["static"], "return_type": "double", "snippet": "    static double kelvin2celsius(double kelvin) {        return kelvin - 273.15;    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/EinheitenUmrechnenLoesung.java", "stars": "3", "class": {"name": "EinheitenUmrechnenLoesung", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "celsius2kelvin", "params": ["double"], "throws": null, "modifiers": ["static"], "return_type": "double", "snippet": "    static double celsius2kelvin(double celsius) {        return celsius + 273.15;    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/EinheitenUmrechnenLoesung.java", "stars": "3", "class": {"name": "EinheitenUmrechnenLoesung", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fahrenheit2kelvin", "params": ["double"], "throws": null, "modifiers": ["static"], "return_type": "double", "snippet": "    static double fahrenheit2kelvin(double fahrenheit) {        double celsius = fahrenheit2celsius(fahrenheit);        return celsius2kelvin(celsius);    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/EinheitenUmrechnenLoesung.java", "stars": "3", "class": {"name": "EinheitenUmrechnenLoesung", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        File file = new File(\"c:\\\\abc\");        getAllFile(file);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo03Filter/Demo02Filter(1).java", "stars": "2", "class": {"name": "Demo02Filter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFile", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void getAllFile(File dir){        //\u4f20\u9012\u8fc7\u6ee4\u5668\u5bf9\u8c61 \u4f7f\u7528\u533f\u540d\u5185\u90e8\u7c7b        /*File[] files = dir.listFiles(new FileFilter() {            @Override            public boolean accept(File pathname) {                //\u8fc7\u6ee4\u89c4\u5219,pathname\u662f\u6587\u4ef6\u5939\u6216\u8005\u662f.java\u7ed3\u5c3e\u7684\u6587\u4ef6\u8fd4\u56detrue                return pathname.isDirectory() || pathname.getName().toLowerCase().endsWith(\".java\");            }        });*/        //\u4f7f\u7528Lambda\u8868\u8fbe\u5f0f\u4f18\u5316\u533f\u540d\u5185\u90e8\u7c7b(\u63a5\u53e3\u4e2d\u53ea\u6709\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5)        /*File[] files = dir.listFiles((File pathname)->{            return pathname.isDirectory() || pathname.getName().toLowerCase().endsWith(\".java\");        });*/        File[] files = dir.listFiles(pathname->pathname.isDirectory() || pathname.getName().toLowerCase().endsWith(\".java\"));        /*File[] files = dir.listFiles(new FilenameFilter() {            @Override            public boolean accept(File dir, String name) {                //\u8fc7\u6ee4\u89c4\u5219,pathname\u662f\u6587\u4ef6\u5939\u6216\u8005\u662f.java\u7ed3\u5c3e\u7684\u6587\u4ef6\u8fd4\u56detrue                return new File(dir,name).isDirectory() || name.toLowerCase().endsWith(\".java\");            }        });*/        //\u4f7f\u7528Lambda\u8868\u8fbe\u5f0f\u4f18\u5316\u533f\u540d\u5185\u90e8\u7c7b(\u63a5\u53e3\u4e2d\u53ea\u6709\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5)        /*File[] files = dir.listFiles((File d, String name)->{            //\u8fc7\u6ee4\u89c4\u5219,pathname\u662f\u6587\u4ef6\u5939\u6216\u8005\u662f.java\u7ed3\u5c3e\u7684\u6587\u4ef6\u8fd4\u56detrue            return new File(d,name).isDirectory() || name.toLowerCase().endsWith(\".java\");        });*/        //File[] files = dir.listFiles((d,name)->new File(d,name).isDirectory() || name.toLowerCase().endsWith(\".java\"));        for (File f : files) {            //\u5bf9\u904d\u5386\u5f97\u5230\u7684File\u5bf9\u8c61f\u8fdb\u884c\u5224\u65ad,\u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6\u5939            if(f.isDirectory()){                //f\u662f\u4e00\u4e2a\u6587\u4ef6\u5939,\u5219\u7ee7\u7eed\u904d\u5386\u8fd9\u4e2a\u6587\u4ef6\u5939                //\u6211\u4eec\u53d1\u73b0getAllFile\u65b9\u6cd5\u5c31\u662f\u4f20\u9012\u6587\u4ef6\u5939,\u904d\u5386\u6587\u4ef6\u5939\u7684\u65b9\u6cd5                //\u6240\u4ee5\u76f4\u63a5\u8c03\u7528getAllFile\u65b9\u6cd5\u5373\u53ef:\u9012\u5f52(\u81ea\u5df1\u8c03\u7528\u81ea\u5df1)                getAllFile(f);            }else{                //f\u662f\u4e00\u4e2a\u6587\u4ef6,\u76f4\u63a5\u6253\u5370\u5373\u53ef                System.out.println(f);            }        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo03Filter/Demo02Filter(1).java", "stars": "2", "class": {"name": "Demo02Filter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newBuilder", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "    public static Builder newBuilder(Context context) {        return new Builder(context);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getValue() {        if (mDefaultValue instanceof Integer) {            return PrefUtils.get(mContext, mPrefKey, (Integer) mDefaultValue);        } else if (mDefaultValue instanceof Long) {            return PrefUtils.get(mContext, mPrefKey, (Long) mDefaultValue);        } else if (mDefaultValue instanceof Boolean) {            return PrefUtils.get(mContext, mPrefKey, (Boolean) mDefaultValue);        } else {            return PrefUtils.get(mContext, mPrefKey, mDefaultValue.toString());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveValue", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveValue(Object value) {        if (mDefaultValue instanceof Integer) {            PrefUtils.save(mContext, mPrefKey, (Integer) value);        } else if (mDefaultValue instanceof Long) {            PrefUtils.save(mContext, mPrefKey, (Long) value);        } else if (mDefaultValue instanceof Boolean) {            PrefUtils.save(mContext, mPrefKey, (Boolean) value);        } else {            PrefUtils.save(mContext, mPrefKey, value.toString());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearValue() {        PrefUtils.remove(mContext, mPrefKey);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIconResource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getIconResource() {        return mIconRes;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return mContext.getResources().getString(mTitleRes);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrefKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPrefKey() {        return mPrefKey;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDefaultValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getDefaultValue() {        return mDefaultValue;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubtitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSubtitle() {        if (mSubtitleGenerator != null) {            return mSubtitleGenerator.get(this);        }        return \"\";    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isClickable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isClickable() {        return mOnClickListener != null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasNext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasNext() {        return mHasNext;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isTitle() {        return mPrefKey == null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick() {        if (mOnClickListener != null)            mOnClickListener.onClick(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "PrefItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIconResource", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setIconResource(@DrawableRes int iconRes) {            mItem.mIconRes = iconRes;            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTitleResource", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setTitleResource(@StringRes int titleRes) {            mItem.mTitleRes = titleRes;            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setPreferenceKey", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setPreferenceKey(String prefKey) {            mItem.mPrefKey = prefKey;            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setDefaultValue", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDefaultValue(Object defaultValue) {            mItem.mDefaultValue = defaultValue;            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setOnClickListener", "params": ["OnClickListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setOnClickListener(OnClickListener onClickListener) {            mItem.mOnClickListener = onClickListener;            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setSubtitleGenerator", "params": ["SubtitleGenerator"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setSubtitleGenerator(SubtitleGenerator subtitleGenerator) {            mItem.mSubtitleGenerator = subtitleGenerator;            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "hasNext", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder hasNext(Boolean hasNext) {            mItem.mHasNext = hasNext;            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PrefItem", "snippet": "        public PrefItem build() {            return mItem;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PrefItem.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "invokeMethod", "params": ["short", "Request", "DataPacket"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void invokeMethod(short cmd, Request request, DataPacket dataPacket) {        Map<Integer, Method> methodLocalMap = RegisterService.baseLocalMemory.getMethodLocalMap();        Method method = methodLocalMap.get(cmd);        try {            JSONObject jsonObject = JSON.parseObject(dataPacket.getData());            method.invoke(this.getClass(),request,jsonObject);        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/service/impl/abstractService.java", "stars": "1", "class": {"name": "abstractService", "extends": null, "implements": ["BaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPullEvent", "params": ["PullToRefreshBase<V>", "State", "Mode"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void onPullEvent(PullToRefreshBase<V> refreshView, State event, Mode direction) {\t\tInteger soundResIdObj = mSoundMap.get(event);\t\tif (null != soundResIdObj) {\t\t\tplaySound(soundResIdObj.intValue());\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/SoundPullEventListener.java", "stars": "74", "class": {"name": "SoundPullEventListener", "extends": null, "implements": ["PullToRefreshBase"], "modifiers": ["public"]}}, {"method_name": "addSoundEvent", "params": ["State", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void addSoundEvent(State event, int resId) {\t\tmSoundMap.put(event, resId);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/SoundPullEventListener.java", "stars": "74", "class": {"name": "SoundPullEventListener", "extends": null, "implements": ["PullToRefreshBase"], "modifiers": ["public"]}}, {"method_name": "clearSounds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clearSounds() {\t\tmSoundMap.clear();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/SoundPullEventListener.java", "stars": "74", "class": {"name": "SoundPullEventListener", "extends": null, "implements": ["PullToRefreshBase"], "modifiers": ["public"]}}, {"method_name": "getCurrentMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "\tpublic MediaPlayer getCurrentMediaPlayer() {\t\treturn mCurrentMediaPlayer;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/SoundPullEventListener.java", "stars": "74", "class": {"name": "SoundPullEventListener", "extends": null, "implements": ["PullToRefreshBase"], "modifiers": ["public"]}}, {"method_name": "playSound", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void playSound(int resId) {\t\t// Stop current player, if there's one playing\t\tif (null != mCurrentMediaPlayer) {\t\t\tmCurrentMediaPlayer.stop();\t\t\tmCurrentMediaPlayer.release();\t\t}\t\tmCurrentMediaPlayer = MediaPlayer.create(mContext, resId);\t\tif (null != mCurrentMediaPlayer) {\t\t\tmCurrentMediaPlayer.start();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/SoundPullEventListener.java", "stars": "74", "class": {"name": "SoundPullEventListener", "extends": null, "implements": ["PullToRefreshBase"], "modifiers": ["public"]}}, {"method_name": "isFocused", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFocused() {        return focused;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFocused", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFocused(boolean focused) {        this.focused = focused;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTextInputType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TextInputType", "snippet": "    public TextInputType getTextInputType() {        TextInputType textInputType = TextInputType.DEFAULT;        if (contentType != null) {            if (contentType.equals(\"number\")) {                textInputType = TextInputType.NUMBER;            }            else if (contentType.equals(\"phonenumber\")) {                textInputType = TextInputType.PHONE_NUMBER;            }            else if (contentType.equals(\"url\")) {                textInputType = TextInputType.URL;            }            else if (contentType.equals(\"email\")) {                textInputType = TextInputType.EMAIL;            }        }        return textInputType;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTextInputType", "params": ["TextInputType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTextInputType(TextInputType textInputType) {        switch (textInputType) {        case NUMBER:            contentType = \"number\";            break;        case PHONE_NUMBER:            contentType = \"phonenumber\";            break;        case URL:            contentType = \"url\";            break;        case EMAIL:            contentType = \"number\";            break;        case DEFAULT:        default:            contentType = \"email\";            break;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContentType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContentType(String contentType) {        this.contentType = contentType;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPredictionEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPredictionEnabled() {        return predictionEnabled;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPredictionEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPredictionEnabled(boolean predictionEnabled) {        this.predictionEnabled = predictionEnabled;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isCorrectionEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isCorrectionEnabled() {        return correctionEnabled;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCorrectionEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCorrectionEnabled(boolean correctionEnabled) {        this.correctionEnabled = correctionEnabled;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAutoCapitalization", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAutoCapitalization() {        return autoCapitalization;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAutoCapitalization", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAutoCapitalization(boolean autoCapitalization) {        this.autoCapitalization = autoCapitalization;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isHiddenText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isHiddenText() {        return hiddenText;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHiddenText", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHiddenText(boolean hiddenText) {        this.hiddenText = hiddenText;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRawData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject getRawData() {        return rawData;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRawData", "params": ["JSONObject"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRawData(JSONObject data) {        rawData = data;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isFocusChanged", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFocusChanged() {        return focusChanged;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFocusChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFocusChanged(boolean focusChanged) {        this.focusChanged = focusChanged;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/TextInputStatusInfo.java", "stars": "4", "class": {"name": "TextInputStatusInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAttAch", "params": ["AttAchDomain"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addAttAch(AttAchDomain attAchDomain) {        if (null == attAchDomain)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        attAchDao.addAttAch(attAchDomain);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/AttAchServiceImpl.java", "stars": "2", "class": {"name": "AttAchServiceImpl", "extends": null, "implements": ["AttAchService"], "modifiers": ["public"]}}, {"method_name": "batchAddAttAch", "params": ["List<AttAchDomain>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void batchAddAttAch(List<AttAchDomain> list) {        if (null == list || list.size() == 0)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        attAchDao.batchAddAttAch(list);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/AttAchServiceImpl.java", "stars": "2", "class": {"name": "AttAchServiceImpl", "extends": null, "implements": ["AttAchService"], "modifiers": ["public"]}}, {"method_name": "deleteAttAch", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteAttAch(Integer id) {        if (null == id)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        attAchDao.deleteAttAch(id);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/AttAchServiceImpl.java", "stars": "2", "class": {"name": "AttAchServiceImpl", "extends": null, "implements": ["AttAchService"], "modifiers": ["public"]}}, {"method_name": "updateAttAch", "params": ["AttAchDomain"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateAttAch(AttAchDomain attAchDomain) {        if (null == attAchDomain || null == attAchDomain.getId())            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        attAchDao.updateAttAch(attAchDomain);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/AttAchServiceImpl.java", "stars": "2", "class": {"name": "AttAchServiceImpl", "extends": null, "implements": ["AttAchService"], "modifiers": ["public"]}}, {"method_name": "getAttAchById", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "AttAchDto", "snippet": "    public AttAchDto getAttAchById(Integer id) {        if (null == id)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        return attAchDao.getAttAchById(id);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/AttAchServiceImpl.java", "stars": "2", "class": {"name": "AttAchServiceImpl", "extends": null, "implements": ["AttAchService"], "modifiers": ["public"]}}, {"method_name": "getAtts", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "PageInfo<AttAchDto>", "snippet": "    public PageInfo<AttAchDto> getAtts(int pageNum, int pageSize) {        PageHelper.startPage(pageNum, pageSize);        List<AttAchDto> atts = attAchDao.getAtts();        PageInfo<AttAchDto> pageInfo = new PageInfo<>(atts);        return pageInfo;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/AttAchServiceImpl.java", "stars": "2", "class": {"name": "AttAchServiceImpl", "extends": null, "implements": ["AttAchService"], "modifiers": ["public"]}}, {"method_name": "getItemOffsets", "params": ["android", "android", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void getItemOffsets (android.graphics.Rect p0, android.view.View p1, android.support.v7.widget.RecyclerView p2, android.support.v7.widget.RecyclerView.State p3)\t{\t\tn_getItemOffsets (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SpacingItemDecoration.java", "stars": "2", "class": {"name": "SpacingItemDecoration", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemOffsets", "params": ["android", "android", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_getItemOffsets (android.graphics.Rect p0, android.view.View p1, android.support.v7.widget.RecyclerView p2, android.support.v7.widget.RecyclerView.State p3);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SpacingItemDecoration.java", "stars": "2", "class": {"name": "SpacingItemDecoration", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SpacingItemDecoration.java", "stars": "2", "class": {"name": "SpacingItemDecoration", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SpacingItemDecoration.java", "stars": "2", "class": {"name": "SpacingItemDecoration", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "start", "params": ["Context", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Context context, String phone, String password) {        Intent intent = new Intent(context, LoginActivity.class);        intent.putExtra(IntentKey.PHONE, phone);        intent.putExtra(IntentKey.PASSWORD, password);        context.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/LoginActivity.java", "stars": "1", "class": {"name": "LoginActivity", "extends": "MyActivity", "implements": ["KeyboardWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.login_activity;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/LoginActivity.java", "stars": "1", "class": {"name": "LoginActivity", "extends": "MyActivity", "implements": ["KeyboardWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        InputTextHelper.with(this)                .addView(mPhoneView)                .addView(mPasswordView)                .setMain(mCommitView)                .setListener(helper -> mPhoneView.getText().toString().length() == 11 &&                        mPasswordView.getText().toString().length() >= 6)                .build();        mPhoneView.setInputType(InputType.TYPE_CLASS_PHONE | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);//\u7535\u8bdd\u548c\u90ae\u7bb1        setOnClickListener(R.id.forgetpwd, R.id.loginBtn, R.id.toRegister);        mPhoneView.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                String pwd = mPasswordView.getText().toString().trim();                if (s.toString().length() > 0 && pwd.length() > 0) {                    mCommitView.setBackgroundResource(R.drawable.login_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(true);                } else {                    mCommitView.setBackgroundResource(R.drawable.normal_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(false);                }            }        });        mPasswordView.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                String moblie = mPhoneView.getText().toString().trim();                if (s.toString().length() > 0 && moblie.length() > 0) {                    mCommitView.setBackgroundResource(R.drawable.login_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(true);                } else {                    mCommitView.setBackgroundResource(R.drawable.normal_bg);                    mCommitView.setTextColor(Color.WHITE);                    mCommitView.setEnabled(false);                }            }        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/LoginActivity.java", "stars": "1", "class": {"name": "LoginActivity", "extends": "MyActivity", "implements": ["KeyboardWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        postDelayed(() -> {            // \u56e0\u4e3a\u5728\u5c0f\u5c4f\u5e55\u624b\u673a\u4e0a\u9762\uff0c\u56e0\u4e3a\u8ba1\u7b97\u89c4\u5219\u7684\u56e0\u7d20\u4f1a\u5bfc\u81f4\u52a8\u753b\u6548\u679c\u7279\u522b\u5938\u5f20\uff0c\u6240\u4ee5\u4e0d\u5728\u5c0f\u5c4f\u5e55\u624b\u673a\u4e0a\u9762\u5c55\u793a\u8fd9\u4e2a\u52a8\u753b\u6548\u679c            if (mBlankView.getHeight() > mBodyLayout.getHeight()) {                // \u53ea\u6709\u7a7a\u767d\u533a\u57df\u7684\u9ad8\u5ea6\u5927\u4e8e\u767b\u5f55\u6846\u533a\u57df\u7684\u9ad8\u5ea6\u624d\u5c55\u793a\u52a8\u753b                KeyboardWatcher.with(LoginActivity.this)                        .setListener(LoginActivity.this);            }        }, 500);        // \u586b\u5145\u4f20\u5165\u7684\u624b\u673a\u53f7\u548c\u5bc6\u7801        mPhoneView.setText(getString(IntentKey.PHONE));        mPasswordView.setText(getString(IntentKey.PASSWORD));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/LoginActivity.java", "stars": "1", "class": {"name": "LoginActivity", "extends": "MyActivity", "implements": ["KeyboardWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.forgetpwd:                startActivity(PasswordForgetActivity.class);                break;            case R.id.loginBtn:                if (mPhoneView.getText().toString().length() != 11) {                    toast(R.string.common_phone_input_error);                    return;                }                // \u83b7\u53d6ras\u79c1\u94a5                KeyPair keyPair = RsaEncryptUtils.createRsaPassword();                PrivateKey aPrivate = keyPair.getPrivate();                //\u7528 rsa \u52a0\u5bc6\u7684\u8d26\u53f7+\u5bc6\u7801                String content = mPhoneView.getText().toString().trim() + mPasswordView.getText().toString().trim();                String encoderesult = RsaEncryptUtils.rsaEncode(content, aPrivate);                EasyHttp.post(this)                        .api(new LoginApi()                                .setAccount(mPhoneView.getText().toString())                                .setPwd(Md5Util.md5(mPasswordView.getText().toString()))                                .setFingerPrint(encoderesult))                        .request(new HttpCallback<HttpData<LoginBean>>(this) {                            @Override                            public void onSucceed(HttpData<LoginBean> data) {                                // \u66f4\u65b0 Token                                EasyConfig.getInstance()                                        .addParam(\"token\", data.getData().getToken());                                // \u8df3\u8f6c\u5230\u4e3b\u9875                                startActivity(HomeActivity.class);                                finish();                            }                            @Override                            public void onFail(Exception e) {                                super.onFail(e);                                toast(e.getMessage());                            }                        });                break;            case R.id.toRegister:                // \u8df3\u8f6c\u5230\u6ce8\u518c\u754c\u9762                startActivityForResult(RegisterActivity.class, (resultCode, data) -> {                    // \u5982\u679c\u5df2\u7ecf\u6ce8\u518c\u6210\u529f\uff0c\u5c31\u6267\u884c\u767b\u5f55\u64cd\u4f5c                    if (resultCode == RESULT_OK && data != null) {                        mPhoneView.setText(data.getStringExtra(IntentKey.PHONE));                        mPasswordView.setText(data.getStringExtra(IntentKey.PASSWORD));                        onClick(mCommitView);                    }                });                break;//            case R.id.iv_login_wx://                toast(\"\u8bb0\u5f97\u6539\u597d\u7b2c\u4e09\u65b9 AppID \u548c AppKey\uff0c\u5426\u5219\u4f1a\u8c03\u4e0d\u8d77\u6765\u54e6\");//                Platform platform;//                switch (v.getId()) {//                    case R.id.iv_login_qq://                        platform = Platform.QQ;//                        break;//                    case R.id.iv_login_wx://                        platform = Platform.WECHAT;//                        toast(\"\u4e5f\u522b\u5fd8\u4e86\u6539\u5fae\u4fe1 \" + WXEntryActivity.class.getSimpleName() + \" \u7c7b\u6240\u5728\u7684\u5305\u540d\u54e6\");//                        break;//                    default://                        throw new IllegalStateException(\"are you ok?\");//                }//                UmengClient.login(this, platform, this);//                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/LoginActivity.java", "stars": "1", "class": {"name": "LoginActivity", "extends": "MyActivity", "implements": ["KeyboardWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onSoftKeyboardOpened", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSoftKeyboardOpened(int keyboardHeight) {        int screenHeight = getResources().getDisplayMetrics().heightPixels;        int[] location = new int[2];        // \u83b7\u53d6\u8fd9\u4e2a View \u5728\u5c4f\u5e55\u4e2d\u7684\u5750\u6807\uff08\u5de6\u4e0a\u89d2\uff09        mBodyLayout.getLocationOnScreen(location);        //int x = location[0];        int y = location[1];        int bottom = screenHeight - (y + mBodyLayout.getHeight());        if (keyboardHeight > bottom) {            // \u6267\u884c\u4f4d\u79fb\u52a8\u753b            ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(mBodyLayout, \"translationY\", 0, -(keyboardHeight - bottom));            objectAnimator.setDuration(mAnimTime);            objectAnimator.setInterpolator(new AccelerateDecelerateInterpolator());            objectAnimator.start();            // \u6267\u884c\u7f29\u5c0f\u52a8\u753b            mLogoView.setPivotX(mLogoView.getWidth() / 2f);            mLogoView.setPivotY(mLogoView.getHeight());            AnimatorSet animatorSet = new AnimatorSet();            ObjectAnimator scaleX = ObjectAnimator.ofFloat(mLogoView, \"scaleX\", 1.0f, mLogoScale);            ObjectAnimator scaleY = ObjectAnimator.ofFloat(mLogoView, \"scaleY\", 1.0f, mLogoScale);            ObjectAnimator translationY = ObjectAnimator.ofFloat(mLogoView, \"translationY\", 0.0f, -(keyboardHeight - bottom));            animatorSet.play(translationY).with(scaleX).with(scaleY);            animatorSet.setDuration(mAnimTime);            animatorSet.start();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/LoginActivity.java", "stars": "1", "class": {"name": "LoginActivity", "extends": "MyActivity", "implements": ["KeyboardWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onSoftKeyboardClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSoftKeyboardClosed() {        // \u6267\u884c\u4f4d\u79fb\u52a8\u753b        ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(mBodyLayout, \"translationY\", mBodyLayout.getTranslationY(), 0);        objectAnimator.setDuration(mAnimTime);        objectAnimator.setInterpolator(new AccelerateDecelerateInterpolator());        objectAnimator.start();        if (mLogoView.getTranslationY() == 0) {            return;        }        // \u6267\u884c\u653e\u5927\u52a8\u753b        mLogoView.setPivotX(mLogoView.getWidth() / 2f);        mLogoView.setPivotY(mLogoView.getHeight());        AnimatorSet animatorSet = new AnimatorSet();        ObjectAnimator scaleX = ObjectAnimator.ofFloat(mLogoView, \"scaleX\", mLogoScale, 1.0f);        ObjectAnimator scaleY = ObjectAnimator.ofFloat(mLogoView, \"scaleY\", mLogoScale, 1.0f);        ObjectAnimator translationY = ObjectAnimator.ofFloat(mLogoView, \"translationY\", mLogoView.getTranslationY(), 0);        animatorSet.play(translationY).with(scaleX).with(scaleY);        animatorSet.setDuration(mAnimTime);        animatorSet.start();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/LoginActivity.java", "stars": "1", "class": {"name": "LoginActivity", "extends": "MyActivity", "implements": ["KeyboardWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "isSwipeEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSwipeEnable() {        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/LoginActivity.java", "stars": "1", "class": {"name": "LoginActivity", "extends": "MyActivity", "implements": ["KeyboardWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "service", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void service(HttpServletRequest httpRequest, HttpServletResponse httpResponse) {    Request request = new WireMockHttpServletRequestAdapter(httpRequest, requestConfigurer, path);    requestHandler.handle(request, responder(request, httpRequest, httpResponse));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/WireMockServlet.java", "stars": "8", "class": {"name": "WireMockServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "responder", "params": ["Request", "HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["private"], "return_type": "HttpResponder", "snippet": "  private HttpResponder responder(Request request, HttpServletRequest httpRequest,    HttpServletResponse httpResponse) {    return (req, resp) -> {      httpRequest.setAttribute(ORIGINAL_REQUEST_KEY, LoggedRequest.createFrom(request));      try {        applyResponse(resp, httpResponse);      } catch (Exception e) {        throwUnchecked(e);      }    };  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/WireMockServlet.java", "stars": "8", "class": {"name": "WireMockServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyResponse", "params": ["Response", "HttpServletResponse"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void applyResponse(Response response, HttpServletResponse servletResponse)    throws IOException {    FaultResponse faultResponse = FaultResponse.fromResponse(response);    if (faultResponse.isNotSupported()) {      faultResponse.sendError(servletResponse);      return;    }    if (response.getStatusMessage() == null) {      servletResponse.setStatus(response.getStatus());    } else {      servletResponse.setStatus(response.getStatus(), response.getStatusMessage());    }    for (HttpHeader header : response.getHeaders().all()) {      for (String value : header.values()) {        servletResponse.addHeader(header.key(), value);      }    }    write(servletResponse, response.getBodyStream());  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/WireMockServlet.java", "stars": "8", "class": {"name": "WireMockServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "write", "params": ["HttpServletResponse", "InputStream"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void write(HttpServletResponse response, InputStream content) {    try (ServletOutputStream out = response.getOutputStream()) {      ByteStreams.copy(content, out);      out.flush();    } catch (IOException e) {      throwUnchecked(e);    } finally {      try {        content.close();      } catch (IOException e) {        LOG.error(\"Cannot write WireMock AEM Stubs response\", e);        // well, we tried      }    }  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/WireMockServlet.java", "stars": "8", "class": {"name": "WireMockServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldGetTypeAndTypeHandlerForNullStringType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetTypeAndTypeHandlerForNullStringType() {    assertEquals(JdbcType.VARCHAR, Null.STRING.getJdbcType());    assertTrue(Null.STRING.getTypeHandler() instanceof StringTypeHandler);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/NullTest.java", "stars": "15", "class": {"name": "NullTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "compare", "params": ["ArticleYearVO", "ArticleYearVO"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int compare(ArticleYearVO o1, ArticleYearVO o2) {            return o2.year - o1.year;        }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/vo/ArticleYearVO.java", "stars": "1", "class": {"name": "ArchiveComparator", "extends": null, "implements": ["Comparator"], "modifiers": ["public", "static"]}}, {"method_name": "onLoadComplete", "params": ["android", "java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLoadComplete (android.support.v4.content.Loader p0, java.lang.Object p1)\t{\t\tn_onLoadComplete (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/content/Loader_OnLoadCompleteListenerImplementor.java", "stars": "2", "class": {"name": "Loader_OnLoadCompleteListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onLoadComplete", "params": ["android", "java"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLoadComplete (android.support.v4.content.Loader p0, java.lang.Object p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/content/Loader_OnLoadCompleteListenerImplementor.java", "stars": "2", "class": {"name": "Loader_OnLoadCompleteListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/content/Loader_OnLoadCompleteListenerImplementor.java", "stars": "2", "class": {"name": "Loader_OnLoadCompleteListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/content/Loader_OnLoadCompleteListenerImplementor.java", "stars": "2", "class": {"name": "Loader_OnLoadCompleteListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoads() {\t}", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/test/java/com/example/ApplicationTests.java", "stars": "1", "class": {"name": "ApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onApplicationEvent", "params": ["OutlineEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onApplicationEvent(OutlineEvent event) {\t\t\t\tif (logger.isDebugEnabled()) {\t\t\tlogger.debug(\"\u8bbe\u5907\u79bb\u7ebf\u4e8b\u4ef6\u89e6\u53d1\uff0cdeviceId\uff1a\" + event.getDeviceId() + \",from:\" + event.getFrom());\t\t}\t\tString key = VideoManagerConstants.KEEPLIVEKEY_PREFIX + event.getDeviceId();\t\tswitch (event.getFrom()) {\t\t// \u5fc3\u8df3\u8d85\u65f6\u89e6\u53d1\u7684\u79bb\u7ebf\u4e8b\u4ef6\uff0c\u8bf4\u660eredis\u4e2d\u5df2\u5220\u9664\uff0c\u65e0\u9700\u5904\u7406\t\tcase VideoManagerConstants.EVENT_OUTLINE_TIMEOUT:\t\t\tbreak;\t\t// \u8bbe\u5907\u4e3b\u52a8\u6ce8\u9500\u89e6\u53d1\u7684\u79bb\u7ebf\u4e8b\u4ef6\uff0c\u9700\u8981\u5220\u9664redis\u4e2d\u7684\u8d85\u65f6\u76d1\u542c\t\tcase VideoManagerConstants.EVENT_OUTLINE_UNREGISTER:\t\t\tredis.del(key);\t\t\tbreak;\t\tdefault:\t\t\tboolean exist = redis.hasKey(key);\t\t\tif (exist) {\t\t\t\tredis.del(key);\t\t\t}\t\t}\t\t// \u5904\u7406\u79bb\u7ebf\u76d1\u542c\t\tstorager.outline(event.getDeviceId());\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/event/outline/OutlineEventListener.java", "stars": "29", "class": {"name": "OutlineEventListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Activity activity) {        Intent intent = new Intent(activity, TVPreferencesActivity.class);        activity.startActivity(intent);        return intent;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVPreferencesActivity.java", "stars": "4", "class": {"name": "TVPreferencesActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        TVButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState);        if (null == savedInstanceState) {            GuidedStepFragment.add(getFragmentManager(), new TVPreferencesFragment());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVPreferencesActivity.java", "stars": "4", "class": {"name": "TVPreferencesActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if(getFragmentManager().getBackStackEntryCount() > 0) {            getFragmentManager().popBackStack();        } else {            super.onBackPressed();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVPreferencesActivity.java", "stars": "4", "class": {"name": "TVPreferencesActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRun", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRun(final String[] args) {        boolean found = false;        if (args.length <= 1) {            ChatUtil.print(\"Not enough args.\");            return;        }        final Module m = Mercury.INSTANCE.getModuleManager().getAlias(args[1]);        if (m != null) {            found = true;            m.setBind(Keyboard.getKeyIndex(args[2].toUpperCase()));            ChatUtil.print(\"Bound \" + m.getLabel() + \" to \" + args[2]);        }        if (!found) {            ChatUtil.print(\"Module \" + args[1] + \" not found.\");        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/commands/BindCommand.java", "stars": "12", "class": {"name": "BindCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "indicarCantidad", "params": ["ArrayList<Ingrediente>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void indicarCantidad(ArrayList<Ingrediente> listaIngredientes,String nombre){        for(int i = 0;i<listaIngredientes.size();i++){            if(listaIngredientes.get(i).getNombre().equals(nombre)){                System.out.println(\"La cantidad de estes producto es : \"+listaIngredientes.get(i).getCantidad());            }        }    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Ingrediente.java", "stars": "2", "class": {"name": "Ingrediente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNombre", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNombre() {        return nombre;    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Ingrediente.java", "stars": "2", "class": {"name": "Ingrediente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCantidad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getCantidad(){        return cantidad;    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Ingrediente.java", "stars": "2", "class": {"name": "Ingrediente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrecioUnidad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPrecioUnidad() {        return precioUnidad;    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Ingrediente.java", "stars": "2", "class": {"name": "Ingrediente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Intrediente{\" +                \"id=\" + id +                \", nombre='\" + nombre + '\\'' +                \", description='\" + description + '\\'' +                \", cantidad=\" + cantidad +                \", precioUnidad=\" + precioUnidad +                '}';    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Ingrediente.java", "stars": "2", "class": {"name": "Ingrediente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        super.init(context);        //\u589e\u52a0\u81ea\u5b9a\u4e49ui        if (mBottomProgressDrawable != null) {            mBottomProgressBar.setProgressDrawable(mBottomProgressDrawable);        }        if (mBottomShowProgressDrawable != null) {            mProgressBar.setProgressDrawable(mBottomProgressDrawable);        }        if (mBottomShowProgressThumbDrawable != null) {            mProgressBar.setThumb(mBottomShowProgressThumbDrawable);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId() {        return R.layout.video_layout_standard;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startPlayLogic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startPlayLogic() {        if (mVideoAllCallBack != null) {            Debuger.printfLog(\"onClickStartThumb\");            mVideoAllCallBack.onClickStartThumb(mOriginUrl, mTitle, StandardGSYVideoPlayer.this);        }        prepareVideo();        startDismissControlViewTimer();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "showWifiDialog", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showWifiDialog() {        if (!NetworkUtils.isAvailable(mContext)) {            //Toast.makeText(mContext, getResources().getString(R.string.no_net), Toast.LENGTH_LONG).show();            startPlayLogic();            return;        }        AlertDialog.Builder builder = new AlertDialog.Builder(getActivityContext());        builder.setMessage(getResources().getString(R.string.tips_not_wifi));        builder.setPositiveButton(getResources().getString(R.string.tips_not_wifi_confirm), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();                startPlayLogic();            }        });        builder.setNegativeButton(getResources().getString(R.string.tips_not_wifi_cancel), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();            }        });        builder.create().show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "showProgressDialog", "params": ["float", "String", "int", "String", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showProgressDialog(float deltaX, String seekTime, int seekTimePosition, String totalTime, int totalTimeDuration) {        if (mProgressDialog == null) {            View localView = LayoutInflater.from(getActivityContext()).inflate(getProgressDialogLayoutId(), null);            if (localView.findViewById(getProgressDialogProgressId()) instanceof ProgressBar) {                mDialogProgressBar = ((ProgressBar) localView.findViewById(getProgressDialogProgressId()));                if (mDialogProgressBarDrawable != null) {                    mDialogProgressBar.setProgressDrawable(mDialogProgressBarDrawable);                }            }            if (localView.findViewById(getProgressDialogCurrentDurationTextId()) instanceof TextView) {                mDialogSeekTime = ((TextView) localView.findViewById(getProgressDialogCurrentDurationTextId()));            }            if (localView.findViewById(getProgressDialogAllDurationTextId()) instanceof TextView) {                mDialogTotalTime = ((TextView) localView.findViewById(getProgressDialogAllDurationTextId()));            }            if (localView.findViewById(getProgressDialogImageId()) instanceof ImageView) {                mDialogIcon = ((ImageView) localView.findViewById(getProgressDialogImageId()));            }            mProgressDialog = new Dialog(getActivityContext(), R.style.video_style_dialog_progress);            mProgressDialog.setContentView(localView);            mProgressDialog.getWindow().addFlags(Window.FEATURE_ACTION_BAR);            mProgressDialog.getWindow().addFlags(32);            mProgressDialog.getWindow().addFlags(16);            mProgressDialog.getWindow().setLayout(getWidth(), getHeight());            if (mDialogProgressNormalColor != -11 && mDialogTotalTime != null) {                mDialogTotalTime.setTextColor(mDialogProgressNormalColor);            }            if (mDialogProgressHighLightColor != -11 && mDialogSeekTime != null) {                mDialogSeekTime.setTextColor(mDialogProgressHighLightColor);            }            WindowManager.LayoutParams localLayoutParams = mProgressDialog.getWindow().getAttributes();            localLayoutParams.gravity = Gravity.TOP;            localLayoutParams.width = getWidth();            localLayoutParams.height = getHeight();            int location[] = new int[2];            getLocationOnScreen(location);            localLayoutParams.x = location[0];            localLayoutParams.y = location[1];            mProgressDialog.getWindow().setAttributes(localLayoutParams);        }        if (!mProgressDialog.isShowing()) {            mProgressDialog.show();        }        if (mDialogSeekTime != null) {            mDialogSeekTime.setText(seekTime);        }        if (mDialogTotalTime != null) {            mDialogTotalTime.setText(\" / \" + totalTime);        }        if (totalTimeDuration > 0)            if (mDialogProgressBar != null) {                mDialogProgressBar.setProgress(seekTimePosition * 100 / totalTimeDuration);            }        if (deltaX > 0) {            if (mDialogIcon != null) {                mDialogIcon.setBackgroundResource(R.drawable.video_forward_icon);            }        } else {            if (mDialogIcon != null) {                mDialogIcon.setBackgroundResource(R.drawable.video_backward_icon);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "dismissProgressDialog", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void dismissProgressDialog() {        if (mProgressDialog != null) {            mProgressDialog.dismiss();            mProgressDialog = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "showVolumeDialog", "params": ["float", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showVolumeDialog(float deltaY, int volumePercent) {        if (mVolumeDialog == null) {            View localView = LayoutInflater.from(getActivityContext()).inflate(getVolumeLayoutId(), null);            if (localView.findViewById(getVolumeProgressId()) instanceof ProgressBar) {                mDialogVolumeProgressBar = ((ProgressBar) localView.findViewById(getVolumeProgressId()));                if (mVolumeProgressDrawable != null && mDialogVolumeProgressBar != null) {                    mDialogVolumeProgressBar.setProgressDrawable(mVolumeProgressDrawable);                }            }            mVolumeDialog = new Dialog(getActivityContext(), R.style.video_style_dialog_progress);            mVolumeDialog.setContentView(localView);            mVolumeDialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);            mVolumeDialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);            mVolumeDialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);            mVolumeDialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);            WindowManager.LayoutParams localLayoutParams = mVolumeDialog.getWindow().getAttributes();            localLayoutParams.gravity = Gravity.TOP | Gravity.START;            localLayoutParams.width = getWidth();            localLayoutParams.height = getHeight();            int location[] = new int[2];            getLocationOnScreen(location);            localLayoutParams.x = location[0];            localLayoutParams.y = location[1];            mVolumeDialog.getWindow().setAttributes(localLayoutParams);        }        if (!mVolumeDialog.isShowing()) {            mVolumeDialog.show();        }        if (mDialogVolumeProgressBar != null) {            mDialogVolumeProgressBar.setProgress(volumePercent);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "dismissVolumeDialog", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void dismissVolumeDialog() {        if (mVolumeDialog != null) {            mVolumeDialog.dismiss();            mVolumeDialog = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "showBrightnessDialog", "params": ["float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showBrightnessDialog(float percent) {        if (mBrightnessDialog == null) {            View localView = LayoutInflater.from(getActivityContext()).inflate(getBrightnessLayoutId(), null);            if (localView.findViewById(getBrightnessTextId()) instanceof TextView) {                mBrightnessDialogTv = (TextView) localView.findViewById(getBrightnessTextId());            }            mBrightnessDialog = new Dialog(getActivityContext(), R.style.video_style_dialog_progress);            mBrightnessDialog.setContentView(localView);            mBrightnessDialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);            mBrightnessDialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);            mBrightnessDialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);            mBrightnessDialog.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);            mBrightnessDialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);            WindowManager.LayoutParams localLayoutParams = mBrightnessDialog.getWindow().getAttributes();            localLayoutParams.gravity = Gravity.TOP | Gravity.END;            localLayoutParams.width = getWidth();            localLayoutParams.height = getHeight();            int location[] = new int[2];            getLocationOnScreen(location);            localLayoutParams.x = location[0];            localLayoutParams.y = location[1];            mBrightnessDialog.getWindow().setAttributes(localLayoutParams);        }        if (!mBrightnessDialog.isShowing()) {            mBrightnessDialog.show();        }        if (mBrightnessDialogTv != null)            mBrightnessDialogTv.setText((int) (percent * 100) + \"%\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "dismissBrightnessDialog", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void dismissBrightnessDialog() {        if (mBrightnessDialog != null) {            mBrightnessDialog.dismiss();            mBrightnessDialog = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "cloneParams", "params": ["GSYBaseVideoPlayer", "GSYBaseVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cloneParams(GSYBaseVideoPlayer from, GSYBaseVideoPlayer to) {        super.cloneParams(from, to);        StandardGSYVideoPlayer sf = (StandardGSYVideoPlayer) from;        StandardGSYVideoPlayer st = (StandardGSYVideoPlayer) to;        if (st.mProgressBar != null && sf.mProgressBar != null) {            st.mProgressBar.setProgress(sf.mProgressBar.getProgress());            st.mProgressBar.setSecondaryProgress(sf.mProgressBar.getSecondaryProgress());        }        if (st.mTotalTimeTextView != null && sf.mTotalTimeTextView != null) {            st.mTotalTimeTextView.setText(sf.mTotalTimeTextView.getText());        }        if (st.mCurrentTimeTextView != null && sf.mCurrentTimeTextView != null) {            st.mCurrentTimeTextView.setText(sf.mCurrentTimeTextView.getText());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startWindowFullscreen", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer startWindowFullscreen(Context context, boolean actionBar, boolean statusBar) {        GSYBaseVideoPlayer gsyBaseVideoPlayer = super.startWindowFullscreen(context, actionBar, statusBar);        if (gsyBaseVideoPlayer != null) {            StandardGSYVideoPlayer gsyVideoPlayer = (StandardGSYVideoPlayer) gsyBaseVideoPlayer;            gsyVideoPlayer.setLockClickListener(mLockClickListener);            gsyVideoPlayer.setNeedLockFull(isNeedLockFull());            initFullUI(gsyVideoPlayer);            //\u6bd4\u5982\u4f60\u81ea\u5b9a\u4e49\u4e86\u8fd4\u56de\u6848\u4ef6\uff0c\u4f46\u662f\u56e0\u4e3a\u8fd4\u56de\u6309\u952e\u5e95\u5c42\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u8fd4\u56de\u4e8b\u4ef6\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5728\u8fd9\u91cc\u91cd\u65b0\u589e\u52a0\u7684\u903b\u8f91        }        return gsyBaseVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClickUiToggle", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onClickUiToggle() {        if (mIfCurrentIsFullscreen && mLockCurScreen && mNeedLockFull) {            setViewShowState(mLockScreen, VISIBLE);            return;        }        if (mCurrentState == CURRENT_STATE_PREPAREING) {            if (mBottomContainer != null) {                if (mBottomContainer.getVisibility() == View.VISIBLE) {                    changeUiToPrepareingClear();                } else {                    changeUiToPreparingShow();                }            }        } else if (mCurrentState == CURRENT_STATE_PLAYING) {            if (mBottomContainer != null) {                if (mBottomContainer.getVisibility() == View.VISIBLE) {                    changeUiToPlayingClear();                } else {                    changeUiToPlayingShow();                }            }        } else if (mCurrentState == CURRENT_STATE_PAUSE) {            if (mBottomContainer != null) {                if (mBottomContainer.getVisibility() == View.VISIBLE) {                    changeUiToPauseClear();                } else {                    changeUiToPauseShow();                }            }        } else if (mCurrentState == CURRENT_STATE_AUTO_COMPLETE) {            if (mBottomContainer != null) {                if (mBottomContainer.getVisibility() == View.VISIBLE) {                    changeUiToCompleteClear();                } else {                    changeUiToCompleteShow();                }            }        } else if (mCurrentState == CURRENT_STATE_PLAYING_BUFFERING_START) {            if (mBottomContainer != null) {                if (mBottomContainer.getVisibility() == View.VISIBLE) {                    changeUiToPlayingBufferingClear();                } else {                    changeUiToPlayingBufferingShow();                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "hideAllWidget", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void hideAllWidget() {        setViewShowState(mBottomContainer, INVISIBLE);        setViewShowState(mTopContainer, INVISIBLE);        setViewShowState(mBottomProgressBar, VISIBLE);        setViewShowState(mStartButton, INVISIBLE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToNormal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToNormal() {        Debuger.printfLog(\"changeUiToNormal\");        setViewShowState(mTopContainer, VISIBLE);        setViewShowState(mBottomContainer, INVISIBLE);        setViewShowState(mStartButton, VISIBLE);        setViewShowState(mLoadingProgressBar, INVISIBLE);        setViewShowState(mThumbImageViewLayout, VISIBLE);        setViewShowState(mBottomProgressBar, INVISIBLE);        setViewShowState(mLockScreen, (mIfCurrentIsFullscreen && mNeedLockFull) ? VISIBLE : GONE);        updateStartImage();        if (mLoadingProgressBar instanceof ENDownloadView) {            ((ENDownloadView) mLoadingProgressBar).reset();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToPreparingShow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToPreparingShow() {        Debuger.printfLog(\"changeUiToPreparingShow\");        setViewShowState(mTopContainer, VISIBLE);        setViewShowState(mBottomContainer, VISIBLE);        setViewShowState(mStartButton, INVISIBLE);        setViewShowState(mLoadingProgressBar, VISIBLE);        setViewShowState(mThumbImageViewLayout, INVISIBLE);        setViewShowState(mBottomProgressBar, INVISIBLE);        setViewShowState(mLockScreen, GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ENDownloadView enDownloadView = (ENDownloadView) mLoadingProgressBar;            if (enDownloadView.getCurrentState() == ENDownloadView.STATE_PRE) {                ((ENDownloadView) mLoadingProgressBar).start();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToPlayingShow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToPlayingShow() {        Debuger.printfLog(\"changeUiToPlayingShow\");        setViewShowState(mTopContainer, VISIBLE);        setViewShowState(mBottomContainer, VISIBLE);        setViewShowState(mStartButton, VISIBLE);        setViewShowState(mLoadingProgressBar, INVISIBLE);        setViewShowState(mThumbImageViewLayout, INVISIBLE);        setViewShowState(mBottomProgressBar, INVISIBLE);        setViewShowState(mLockScreen, (mIfCurrentIsFullscreen && mNeedLockFull) ? VISIBLE : GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ((ENDownloadView) mLoadingProgressBar).reset();        }        updateStartImage();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToPauseShow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToPauseShow() {        Debuger.printfLog(\"changeUiToPauseShow\");        setViewShowState(mTopContainer, VISIBLE);        setViewShowState(mBottomContainer, VISIBLE);        setViewShowState(mStartButton, VISIBLE);        setViewShowState(mLoadingProgressBar, INVISIBLE);        setViewShowState(mThumbImageViewLayout, INVISIBLE);        setViewShowState(mBottomProgressBar, INVISIBLE);        setViewShowState(mLockScreen, (mIfCurrentIsFullscreen && mNeedLockFull) ? VISIBLE : GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ((ENDownloadView) mLoadingProgressBar).reset();        }        updateStartImage();        updatePauseCover();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToPlayingBufferingShow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToPlayingBufferingShow() {        Debuger.printfLog(\"changeUiToPlayingBufferingShow\");        setViewShowState(mTopContainer, VISIBLE);        setViewShowState(mBottomContainer, VISIBLE);        setViewShowState(mStartButton, INVISIBLE);        setViewShowState(mLoadingProgressBar, VISIBLE);        setViewShowState(mThumbImageViewLayout, INVISIBLE);        setViewShowState(mBottomProgressBar, INVISIBLE);        setViewShowState(mLockScreen, GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ENDownloadView enDownloadView = (ENDownloadView) mLoadingProgressBar;            if (enDownloadView.getCurrentState() == ENDownloadView.STATE_PRE) {                ((ENDownloadView) mLoadingProgressBar).start();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToCompleteShow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToCompleteShow() {        Debuger.printfLog(\"changeUiToCompleteShow\");        setViewShowState(mTopContainer, VISIBLE);        setViewShowState(mBottomContainer, VISIBLE);        setViewShowState(mStartButton, VISIBLE);        setViewShowState(mLoadingProgressBar, INVISIBLE);        setViewShowState(mThumbImageViewLayout, VISIBLE);        setViewShowState(mBottomProgressBar, INVISIBLE);        setViewShowState(mLockScreen, (mIfCurrentIsFullscreen && mNeedLockFull) ? VISIBLE : GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ((ENDownloadView) mLoadingProgressBar).reset();        }        updateStartImage();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToError", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToError() {        Debuger.printfLog(\"changeUiToError\");        setViewShowState(mTopContainer, INVISIBLE);        setViewShowState(mBottomContainer, INVISIBLE);        setViewShowState(mStartButton, VISIBLE);        setViewShowState(mLoadingProgressBar, INVISIBLE);        setViewShowState(mThumbImageViewLayout, INVISIBLE);        setViewShowState(mBottomProgressBar, INVISIBLE);        setViewShowState(mLockScreen, (mIfCurrentIsFullscreen && mNeedLockFull) ? VISIBLE : GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ((ENDownloadView) mLoadingProgressBar).reset();        }        updateStartImage();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();        dismissVolumeDialog();        dismissBrightnessDialog();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProgressDialogLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getProgressDialogLayoutId() {        return R.layout.video_progress_dialog;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProgressDialogProgressId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getProgressDialogProgressId() {        return R.id.duration_progressbar;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProgressDialogCurrentDurationTextId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getProgressDialogCurrentDurationTextId() {        return R.id.tv_current;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProgressDialogAllDurationTextId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getProgressDialogAllDurationTextId() {        return R.id.tv_duration;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProgressDialogImageId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getProgressDialogImageId() {        return R.id.duration_image_tip;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVolumeLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getVolumeLayoutId() {        return R.layout.video_volume_dialog;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVolumeProgressId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getVolumeProgressId() {        return R.id.volume_progressbar;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBrightnessLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getBrightnessLayoutId() {        return R.layout.video_brightness;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBrightnessTextId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getBrightnessTextId() {        return R.id.app_video_brightness;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToPrepareingClear", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToPrepareingClear() {        Debuger.printfLog(\"changeUiToPrepareingClear\");        setViewShowState(mTopContainer, INVISIBLE);        setViewShowState(mBottomContainer, INVISIBLE);        setViewShowState(mStartButton, INVISIBLE);        setViewShowState(mLoadingProgressBar, INVISIBLE);        setViewShowState(mThumbImageViewLayout, INVISIBLE);        setViewShowState(mBottomProgressBar, INVISIBLE);        setViewShowState(mLockScreen, GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ((ENDownloadView) mLoadingProgressBar).reset();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToPlayingClear", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToPlayingClear() {        Debuger.printfLog(\"changeUiToPlayingClear\");        changeUiToClear();        setViewShowState(mBottomProgressBar, VISIBLE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToPauseClear", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToPauseClear() {        Debuger.printfLog(\"changeUiToPauseClear\");        changeUiToClear();        setViewShowState(mBottomProgressBar, VISIBLE);        updatePauseCover();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToPlayingBufferingClear", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToPlayingBufferingClear() {        Debuger.printfLog(\"changeUiToPlayingBufferingClear\");        setViewShowState(mTopContainer, INVISIBLE);        setViewShowState(mBottomContainer, INVISIBLE);        setViewShowState(mStartButton, INVISIBLE);        setViewShowState(mLoadingProgressBar, VISIBLE);        setViewShowState(mThumbImageViewLayout, INVISIBLE);        setViewShowState(mBottomProgressBar, VISIBLE);        setViewShowState(mLockScreen, GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ENDownloadView enDownloadView = (ENDownloadView) mLoadingProgressBar;            if (enDownloadView.getCurrentState() == ENDownloadView.STATE_PRE) {                ((ENDownloadView) mLoadingProgressBar).start();            }        }        updateStartImage();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToClear", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToClear() {        Debuger.printfLog(\"changeUiToClear\");        setViewShowState(mTopContainer, INVISIBLE);        setViewShowState(mBottomContainer, INVISIBLE);        setViewShowState(mStartButton, INVISIBLE);        setViewShowState(mLoadingProgressBar, INVISIBLE);        setViewShowState(mThumbImageViewLayout, INVISIBLE);        setViewShowState(mBottomProgressBar, INVISIBLE);        setViewShowState(mLockScreen, GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ((ENDownloadView) mLoadingProgressBar).reset();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToCompleteClear", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToCompleteClear() {        Debuger.printfLog(\"changeUiToCompleteClear\");        setViewShowState(mTopContainer, INVISIBLE);        setViewShowState(mBottomContainer, INVISIBLE);        setViewShowState(mStartButton, VISIBLE);        setViewShowState(mLoadingProgressBar, INVISIBLE);        setViewShowState(mThumbImageViewLayout, VISIBLE);        setViewShowState(mBottomProgressBar, VISIBLE);        setViewShowState(mLockScreen, (mIfCurrentIsFullscreen && mNeedLockFull) ? VISIBLE : GONE);        if (mLoadingProgressBar instanceof ENDownloadView) {            ((ENDownloadView) mLoadingProgressBar).reset();        }        updateStartImage();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateStartImage", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateStartImage() {        if (mStartButton instanceof ENPlayView) {            ENPlayView enPlayView = (ENPlayView) mStartButton;            enPlayView.setDuration(500);            if (mCurrentState == CURRENT_STATE_PLAYING) {                enPlayView.play();            } else if (mCurrentState == CURRENT_STATE_ERROR) {                enPlayView.pause();            } else {                enPlayView.pause();            }        } else if (mStartButton instanceof ImageView) {            ImageView imageView = (ImageView) mStartButton;            if (mCurrentState == CURRENT_STATE_PLAYING) {                imageView.setImageResource(R.drawable.video_click_pause_selector);            } else if (mCurrentState == CURRENT_STATE_ERROR) {                imageView.setImageResource(R.drawable.video_click_error_selector);            } else {                imageView.setImageResource(R.drawable.video_click_play_selector);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "initFullUI", "params": ["StandardGSYVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initFullUI(StandardGSYVideoPlayer standardGSYVideoPlayer) {        if (mBottomProgressDrawable != null) {            standardGSYVideoPlayer.setBottomProgressBarDrawable(mBottomProgressDrawable);        }        if (mBottomShowProgressDrawable != null && mBottomShowProgressThumbDrawable != null) {            standardGSYVideoPlayer.setBottomShowProgressBarDrawable(mBottomShowProgressDrawable,                    mBottomShowProgressThumbDrawable);        }        if (mVolumeProgressDrawable != null) {            standardGSYVideoPlayer.setDialogVolumeProgressBar(mVolumeProgressDrawable);        }        if (mDialogProgressBarDrawable != null) {            standardGSYVideoPlayer.setDialogProgressBar(mDialogProgressBarDrawable);        }        if (mDialogProgressHighLightColor >= 0 && mDialogProgressNormalColor >= 0) {            standardGSYVideoPlayer.setDialogProgressColor(mDialogProgressHighLightColor, mDialogProgressNormalColor);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBottomShowProgressBarDrawable", "params": ["Drawable", "Drawable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBottomShowProgressBarDrawable(Drawable drawable, Drawable thumb) {        mBottomShowProgressDrawable = drawable;        mBottomShowProgressThumbDrawable = thumb;        if (mProgressBar != null) {            mProgressBar.setProgressDrawable(drawable);            mProgressBar.setThumb(thumb);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBottomProgressBarDrawable", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBottomProgressBarDrawable(Drawable drawable) {        mBottomProgressDrawable = drawable;        if (mBottomProgressBar != null) {            mBottomProgressBar.setProgressDrawable(drawable);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDialogVolumeProgressBar", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDialogVolumeProgressBar(Drawable drawable) {        mVolumeProgressDrawable = drawable;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDialogProgressBar", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDialogProgressBar(Drawable drawable) {        mDialogProgressBarDrawable = drawable;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDialogProgressColor", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDialogProgressColor(int highLightColor, int normalColor) {        mDialogProgressHighLightColor = highLightColor;        mDialogProgressNormalColor = normalColor;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "taskShotPic", "params": ["GSYVideoShotListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void taskShotPic(GSYVideoShotListener gsyVideoShotListener) {        this.taskShotPic(gsyVideoShotListener, false);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "taskShotPic", "params": ["GSYVideoShotListener", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void taskShotPic(GSYVideoShotListener gsyVideoShotListener, boolean high) {        if (getCurrentPlayer().getRenderProxy() != null) {            getCurrentPlayer().getRenderProxy().taskShotPic(gsyVideoShotListener, high);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "saveFrame", "params": ["File", "GSYVideoShotSaveListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveFrame(final File file, GSYVideoShotSaveListener gsyVideoShotSaveListener) {        saveFrame(file, false, gsyVideoShotSaveListener);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "saveFrame", "params": ["File", "boolean", "GSYVideoShotSaveListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveFrame(final File file, final boolean high, final GSYVideoShotSaveListener gsyVideoShotSaveListener) {        if (getCurrentPlayer().getRenderProxy() != null) {            getCurrentPlayer().getRenderProxy().saveFrame(file, high, gsyVideoShotSaveListener);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "restartTimerTask", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void restartTimerTask() {        startProgressTimer();        startDismissControlViewTimer();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/StandardGSYVideoPlayer.java", "stars": "2", "class": {"name": "StandardGSYVideoPlayer", "extends": "GSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"StorageMetadata{\" + \"projectId='\" + this.projectId + '\\'' + \", version='\" + this.version        + '\\''        + '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-spi/src/main/java/azkaban/spi/StorageMetadata.java", "stars": "18", "class": {"name": "StorageMetadata", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getProjectId() {    return this.projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-spi/src/main/java/azkaban/spi/StorageMetadata.java", "stars": "18", "class": {"name": "StorageMetadata", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getVersion() {    return this.version;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-spi/src/main/java/azkaban/spi/StorageMetadata.java", "stars": "18", "class": {"name": "StorageMetadata", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUploader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUploader() {    return this.uploader;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-spi/src/main/java/azkaban/spi/StorageMetadata.java", "stars": "18", "class": {"name": "StorageMetadata", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHash", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "  public byte[] getHash() {    return this.hash;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-spi/src/main/java/azkaban/spi/StorageMetadata.java", "stars": "18", "class": {"name": "StorageMetadata", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(final Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    final StorageMetadata that = (StorageMetadata) o;    return Objects.equals(this.projectId, that.projectId) &&        Objects.equals(this.version, that.version) &&        Objects.equals(this.uploader, that.uploader);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-spi/src/main/java/azkaban/spi/StorageMetadata.java", "stars": "18", "class": {"name": "StorageMetadata", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(this.projectId, this.version, this.uploader);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-spi/src/main/java/azkaban/spi/StorageMetadata.java", "stars": "18", "class": {"name": "StorageMetadata", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formatDetailForPopcorn", "params": ["AnimeDetails", "MediaProvider", "SubsProvider"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Media>", "snippet": "    public ArrayList<Media> formatDetailForPopcorn(AnimeDetails item, MediaProvider mediaProvider, SubsProvider subsProvider) {        ArrayList<Media> list = new ArrayList<>();        try {            Media media = new Movie();                /*                 * Chris Alderson:                 * As of version 2.2.0 of the Anime API there are no movies in the database.                 * And movies won't be added to the database, so there is no need to check for it.                 */            if (item.getType().equalsIgnoreCase(\"show\")) {                Show show = new Show();                show.seasons = item.getNumSeasons();                show.runtime = item.getRuntime();                show.synopsis = item.getSynopsis();                if (item.getStatus() != null) {                    String status = item.getStatus();                    if (status.equalsIgnoreCase(\"finished airing\")) {                        show.status = Show.Status.ENDED;                    } else if (status.equalsIgnoreCase(\"currently airing\")) {                        show.status = Show.Status.CONTINUING;                    } else if (status.equalsIgnoreCase(\"not aird yet\")) {                        show.status = Show.Status.NOT_AIRED_YET;                    }                }                SparseArray<butter.droid.base.providers.media.models.Episode> episodeMap = new SparseArray<>();                for (Episode episode : item.getEpisodes()) {                    try {                        butter.droid.base.providers.media.models.Episode episodeObject = new butter.droid.base.providers.media.models.Episode();                        if (episode.getTorrents() != null) {                            for (Map.Entry<String, Quality> entry : episode.getTorrents().getQualities().entrySet()) {                                if (!entry.getKey().equals(\"0\")) {                                    Media.Torrent torrent = new Media.Torrent(entry.getValue().getUrl(), entry.getValue().getSeeds(), entry.getValue().getPeers());                                    episodeObject.torrents.put(entry.getKey(), torrent);                                }                            }                        }                        episodeObject.showName = show.title;                        episodeObject.dateBased = false;                        episodeObject.aired = -1;                        episodeObject.title = episode.getTitle();                        episodeObject.overview = episode.getOverview();                        episodeObject.season = Integer.parseInt(episode.getSeason());                        episodeObject.episode = Integer.parseInt(episode.getEpisode());                        episodeObject.videoId = show.videoId + episodeObject.season + episodeObject.episode;                        episodeObject.imdbId = show.imdbId;                        episodeObject.image = episodeObject.fullImage = episodeObject.headerImage = show.headerImage;                        episodeMap.put(episodeObject.episode, episodeObject);                    } catch (Exception e) {                        e.printStackTrace();                    }                }                show.episodes = new LinkedList<>();                for (int i = 0; i < episodeMap.size(); i++)                    show.episodes.add(episodeMap.valueAt(i));                media = show;            }            media.title = item.getTitle();            media.videoId = item.getId();            media.imdbId = \"mal-\" + media.videoId;            media.year = item.getYear();            if (item.getImages().getPoster() != null && !item.getImages().getPoster().contains(\"images/posterholder.png\")) {                media.image = item.getImages().getPoster();                media.fullImage = item.getImages().getPoster();            }            if (item.getImages().getFanart() != null && !item.getImages().getFanart().contains(\"images/posterholder.png\")) {                media.headerImage = item.getImages().getFanart();            }            media.genre = item.getGenres().get(0);            media.rating = Double.toString(item.getRating().getPercentage() / 10);            list.add(media);        } catch (Exception e) {            e.printStackTrace();        }        return list;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/AnimeDetailsReponse.java", "stars": "4", "class": {"name": "AnimeDetailsReponse", "extends": "DetailsResponse", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, MyEnum.ONE, null);    verify(ps).setInt(1, 0);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/EnumOrdinalTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSetNullParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetNullParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, null, JdbcType.VARCHAR);    verify(ps).setNull(1, JdbcType.VARCHAR.TYPE_CODE);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/EnumOrdinalTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getInt(\"column\")).thenReturn(0);    when(rs.wasNull()).thenReturn(false);    assertEquals(MyEnum.ONE, TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/EnumOrdinalTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getInt(\"column\")).thenReturn(0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/EnumOrdinalTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getInt(1)).thenReturn(0);    when(rs.wasNull()).thenReturn(false);    assertEquals(MyEnum.ONE, TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/EnumOrdinalTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getInt(1)).thenReturn(0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/EnumOrdinalTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getInt(1)).thenReturn(0);    when(cs.wasNull()).thenReturn(false);    assertEquals(MyEnum.ONE, TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/EnumOrdinalTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getInt(1)).thenReturn(0);    when(cs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/EnumOrdinalTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TemplatedItemViewHolder.java", "stars": "2", "class": {"name": "TemplatedItemViewHolder", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TemplatedItemViewHolder.java", "stars": "2", "class": {"name": "TemplatedItemViewHolder", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "cachePls", "params": ["CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void cachePls(CallbackInfo callback) {\t\tcolorCache.defaultReturnValue(new ColorCacheHack());\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/mixin/ClientWorldMixin.java", "stars": "3", "class": {"name": "ClientWorldMixin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "route", "params": ["int", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String route(int jobId, List<String> addressList) {        // cache clear        if (System.currentTimeMillis() > CACHE_VALID_TIME) {            jobLfuMap.clear();            CACHE_VALID_TIME = System.currentTimeMillis() + 1000*60*60*24;        }        // lfu item init        HashMap<String, Integer> lfuItemMap = jobLfuMap.get(jobId);     // Key\u6392\u5e8f\u53ef\u4ee5\u7528TreeMap+\u6784\u9020\u5165\u53c2Compare\uff1bValue\u6392\u5e8f\u6682\u65f6\u53ea\u80fd\u901a\u8fc7ArrayList\uff1b        if (lfuItemMap == null) {            lfuItemMap = new HashMap<String, Integer>();            jobLfuMap.putIfAbsent(jobId, lfuItemMap);   // \u907f\u514d\u91cd\u590d\u8986\u76d6        }        // put new        for (String address: addressList) {            if (!lfuItemMap.containsKey(address) || lfuItemMap.get(address) >1000000 ) {                lfuItemMap.put(address, new Random().nextInt(addressList.size()));  // \u521d\u59cb\u5316\u65f6\u4e3b\u52a8Random\u4e00\u6b21\uff0c\u7f13\u89e3\u9996\u6b21\u538b\u529b            }        }        // remove old        List<String> delKeys = new ArrayList<>();        for (String existKey: lfuItemMap.keySet()) {            if (!addressList.contains(existKey)) {                delKeys.add(existKey);            }        }        if (delKeys.size() > 0) {            for (String delKey: delKeys) {                lfuItemMap.remove(delKey);            }        }        // load least userd count address        List<Map.Entry<String, Integer>> lfuItemList = new ArrayList<Map.Entry<String, Integer>>(lfuItemMap.entrySet());        Collections.sort(lfuItemList, new Comparator<Map.Entry<String, Integer>>() {            @Override            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {                return o1.getValue().compareTo(o2.getValue());            }        });        Map.Entry<String, Integer> addressItem = lfuItemList.get(0);        String minAddress = addressItem.getKey();        addressItem.setValue(addressItem.getValue() + 1);        return addressItem.getKey();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteLFU.java", "stars": "1", "class": {"name": "ExecutorRouteLFU", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "route", "params": ["TriggerParam", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> route(TriggerParam triggerParam, List<String> addressList) {        String address = route(triggerParam.getJobId(), addressList);        return new ReturnT<String>(address);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteLFU.java", "stars": "1", "class": {"name": "ExecutorRouteLFU", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {        if (!mode.equalsIgnoreCase(\"bhop\"))            mc.player.setVelocity(0, 0, 0);        EntityUtil.resetTimer();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Speed.java", "stars": "12", "class": {"name": "Speed", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        moveSpeed = MotionUtil.getBaseMoveSpeed();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Speed.java", "stars": "12", "class": {"name": "Speed", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        boolean icee = this.ice && (mc.world.getBlockState(new BlockPos(mc.player.posX, mc.player.posY - 1, mc.player.posZ)).getBlock() instanceof BlockIce || mc.world.getBlockState(new BlockPos(mc.player.posX, mc.player.posY - 1, mc.player.posZ)).getBlock() instanceof BlockPackedIce);        if (icee) {            MotionUtil.setSpeed(mc.player, MotionUtil.getBaseMoveSpeed() + (mc.player.isPotionActive(MobEffects.SPEED) ? (mc.player.ticksExisted % 2 == 0 ? 0.7 : 0.1) : 0.4));        }        if (!icee) {            if (mode.equalsIgnoreCase(\"packet\") || mode.equalsIgnoreCase(\"packet2\")) {                if (MotionUtil.isMoving(mc.player) && mc.player.onGround) {                    boolean step = Mercury.INSTANCE.getModuleManager().find(Step.class).isEnabled();                    double posX = mc.player.posX;                    double posY = mc.player.posY;                    double posZ = mc.player.posZ;                    boolean ground = mc.player.onGround;                    double[] dir1 = MotionUtil.forward(0.5);                    BlockPos pos = new BlockPos(posX + dir1[0], posY, posZ + dir1[1]);                    Block block = mc.world.getBlockState(pos).getBlock();                    if (step && !(block instanceof BlockAir)) {                        MotionUtil.setSpeed(mc.player, 0);                        return;                    }                    if (mc.world.getBlockState(new BlockPos(pos.getX(), pos.getY() - 1, pos.getZ())).getBlock() instanceof BlockAir)                        return;                    for (double x = 0.0625; x < speed; x += 0.262) {                        double[] dir = MotionUtil.forward(x);                        // if (mc.world.getBlockState(new BlockPos(posX + dir1[0], posY - 1, posZ + dir1[1])).getBlock() instanceof BlockAir)                        //     return;                        mc.player.connection.sendPacket(new CPacketPlayer.Position(posX + dir[0], posY, posZ + dir[1], ground));                    }                    if (mode.equalsIgnoreCase(\"packet2\"))                        MotionUtil.setSpeed(mc.player, 2);                    mc.player.connection.sendPacket(new CPacketPlayer.Position(posX + mc.player.motionX, mc.player.posY <= 10 ? 255 : 1, posZ + mc.player.motionZ, ground));                }            }            if (mode.equalsIgnoreCase(\"yport\") ) {                if (!MotionUtil.isMoving(mc.player) || mc.player.isInWater() && mc.player.isInLava() || mc.player.collidedHorizontally) {                    return;                }                if (mc.player.onGround) {                    EntityUtil.setTimer(1.15f);                    mc.player.jump();                    boolean ice = mc.world.getBlockState(new BlockPos(mc.player.posX, mc.player.posY - 1, mc.player.posZ)).getBlock() instanceof BlockIce || mc.world.getBlockState(new BlockPos(mc.player.posX, mc.player.posY - 1, mc.player.posZ)).getBlock() instanceof BlockPackedIce;                    MotionUtil.setSpeed(mc.player, MotionUtil.getBaseMoveSpeed() + (ice ? 0.3 : 0.06));                } else {                    mc.player.motionY = -1;                    EntityUtil.resetTimer();                }            }            if (mode.equalsIgnoreCase(\"ground\") && event.getTiming().equals(EventTiming.PRE)) {                if (!MotionUtil.isMoving(mc.player) || mc.player.isInWater() && mc.player.isInLava() || mc.player.collidedHorizontally) {                    return;                }                if (mc.player.onGround) {                    if (mc.player.ticksExisted % 2 == 0) {                        boolean notUnder = mc.world.getBlockState(event.getLocation().toBlockPos().add(0, 2, 0)).getBlock() instanceof BlockAir;                        event.getLocation().setY(mc.player.posY + (notUnder ? 0.4 : 0.2));                        MotionUtil.setSpeed(mc.player, MotionUtil.getBaseMoveSpeed() - 0.15);                    } else {                        MotionUtil.setSpeed(mc.player, MotionUtil.getBaseMoveSpeed() + 0.065);                    }                } else {                    mc.player.motionY = -1;                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Speed.java", "stars": "12", "class": {"name": "Speed", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMotion", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMotion(MotionEvent event) {        boolean icee = this.ice && (mc.world.getBlockState(new BlockPos(mc.player.posX, mc.player.posY - 1, mc.player.posZ)).getBlock() instanceof BlockIce || mc.world.getBlockState(new BlockPos(mc.player.posX, mc.player.posY - 1, mc.player.posZ)).getBlock() instanceof BlockPackedIce);        if (icee)            return;        if (mode.equalsIgnoreCase(\"bhop\")) {            boolean jesus = Mercury.INSTANCE.getModuleManager().find(Jesus.class).isEnabled();            double motionY = 0.42f;            if (mc.player.onGround && MotionUtil.isMoving(mc.player) && waitTimer.hasReached(300)) {                if (mc.player.isPotionActive(MobEffects.JUMP_BOOST)) {                    motionY += (mc.player.getActivePotionEffect(MobEffects.JUMP_BOOST).getAmplifier() + 1) * 0.1f;                }                event.setY(mc.player.motionY = motionY);                moveSpeed = MotionUtil.getBaseMoveSpeed() * (jesus && EntityUtil.isColliding(0, -0.5, 0) instanceof BlockLiquid && !EntityUtil.isInLiquid() ? 0.9 : 1.901);                doSlow = true;                waitTimer.reset();            } else {                if (doSlow || mc.player.collidedHorizontally) {                    moveSpeed -= (jesus && EntityUtil.isColliding(0, -0.8, 0) instanceof BlockLiquid && !EntityUtil.isInLiquid()) ? 0.4 : 0.7 * (moveSpeed = MotionUtil.getBaseMoveSpeed());                    doSlow = false;                } else {                    moveSpeed -= moveSpeed / 159.0;                }            }            moveSpeed = Math.max(moveSpeed, MotionUtil.getBaseMoveSpeed());            double[] dir = MotionUtil.forward(moveSpeed);            event.setX(dir[0]);            event.setZ(dir[1]);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Speed.java", "stars": "12", "class": {"name": "Speed", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void run(String channelId);}", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/task/AbstractCreateChannelSuccessTask.java", "stars": "1", "class": {"name": "AbstractCreateChannelSuccessTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "encode", "params": ["int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "ByteBuf", "snippet": "    public ByteBuf encode(int header, Object[] messages) {        ByteBuf buffer = Unpooled.buffer();        buffer.writeInt(0).writeShort(header);        for(Object message : messages) {            if(message instanceof Byte) {                buffer.writeByte(((Byte) message).getValue());                continue;            }            if(message instanceof Boolean) {                buffer.writeBoolean((Boolean) message);                continue;            }            if(message instanceof Short) {                buffer.writeShort(((Short) message).getValue());                continue;            }            if(message instanceof Integer) {                buffer.writeInt((Integer) message);                continue;            }            if(message instanceof String) {                buffer.writeShort(message.toString().length());                buffer.writeBytes(message.toString().getBytes());                continue;            }        }        buffer.setInt(0, (buffer.writerIndex() - 4));        return buffer;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireFormat.java", "stars": "2", "class": {"name": "EvaWireFormat", "extends": null, "implements": ["ICodec"], "modifiers": ["public"]}}, {"method_name": "decode", "params": ["ByteBuf"], "throws": null, "modifiers": ["public"], "return_type": "List<IMessageDataWrapper>", "snippet": "    public List<IMessageDataWrapper> decode(ByteBuf buffer) {        List<IMessageDataWrapper> wrappers = new ArrayList<>();        while(true) {            if(buffer.readableBytes() < 6) return wrappers;            int length = buffer.readInt();            if(length < 2) return wrappers;            ByteBuf extracted = buffer.readBytes(length);            wrappers.add(new EvaWireDataWrapper(extracted.readShort(), extracted));        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireFormat.java", "stars": "2", "class": {"name": "EvaWireFormat", "extends": null, "implements": ["ICodec"], "modifiers": ["public"]}}, {"method_name": "build", "params": ["Reader"], "throws": null, "modifiers": ["public"], "return_type": "SqlSessionFactory", "snippet": "  public SqlSessionFactory build(Reader reader) {    return build(reader, null, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java", "stars": "15", "class": {"name": "SqlSessionFactoryBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["Reader", "String"], "throws": null, "modifiers": ["public"], "return_type": "SqlSessionFactory", "snippet": "  public SqlSessionFactory build(Reader reader, String environment) {    return build(reader, environment, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java", "stars": "15", "class": {"name": "SqlSessionFactoryBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["Reader", "Properties"], "throws": null, "modifiers": ["public"], "return_type": "SqlSessionFactory", "snippet": "  public SqlSessionFactory build(Reader reader, Properties properties) {    return build(reader, null, properties);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java", "stars": "15", "class": {"name": "SqlSessionFactoryBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["Reader", "String", "Properties"], "throws": null, "modifiers": ["public"], "return_type": "SqlSessionFactory", "snippet": "  public SqlSessionFactory build(Reader reader, String environment, Properties properties) {    try {      XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);      return build(parser.parse());    } catch (Exception e) {      throw ExceptionFactory.wrapException(\"Error building SqlSession.\", e);    } finally {      ErrorContext.instance().reset();      try {        reader.close();      } catch (IOException e) {        // Intentionally ignore. Prefer previous error.      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java", "stars": "15", "class": {"name": "SqlSessionFactoryBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["InputStream"], "throws": null, "modifiers": ["public"], "return_type": "SqlSessionFactory", "snippet": "  public SqlSessionFactory build(InputStream inputStream) {    return build(inputStream, null, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java", "stars": "15", "class": {"name": "SqlSessionFactoryBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["InputStream", "String"], "throws": null, "modifiers": ["public"], "return_type": "SqlSessionFactory", "snippet": "  public SqlSessionFactory build(InputStream inputStream, String environment) {    return build(inputStream, environment, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java", "stars": "15", "class": {"name": "SqlSessionFactoryBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["InputStream", "Properties"], "throws": null, "modifiers": ["public"], "return_type": "SqlSessionFactory", "snippet": "  public SqlSessionFactory build(InputStream inputStream, Properties properties) {    return build(inputStream, null, properties);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java", "stars": "15", "class": {"name": "SqlSessionFactoryBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["InputStream", "String", "Properties"], "throws": null, "modifiers": ["public"], "return_type": "SqlSessionFactory", "snippet": "  public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {    try {      XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);      return build(parser.parse());    } catch (Exception e) {      throw ExceptionFactory.wrapException(\"Error building SqlSession.\", e);    } finally {      ErrorContext.instance().reset();      try {        inputStream.close();      } catch (IOException e) {        // Intentionally ignore. Prefer previous error.      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java", "stars": "15", "class": {"name": "SqlSessionFactoryBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "SqlSessionFactory", "snippet": "  public SqlSessionFactory build(Configuration config) {    return new DefaultSqlSessionFactory(config);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java", "stars": "15", "class": {"name": "SqlSessionFactoryBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        super.init();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/BooleanComponent.java", "stars": "12", "class": {"name": "BooleanComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "moved", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moved(float x, float y) {        super.moved(x, y);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/BooleanComponent.java", "stars": "12", "class": {"name": "BooleanComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawScreen", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawScreen(int mx, int my, float partialTicks) {        super.drawScreen(mx, my, partialTicks);        RenderUtil.drawRect2(getX(), getY(), getW(), getH(), new Color(5, 5, 5, 200).getRGB());        Menu.font.drawStringWithShadow(getLabel(), getX() + 2, getY() + getH() / 2 - Menu.font.getHeight() / 2, booleanProperty.getValue() ? -1 : 0xff707070);       /* RenderUtil.drawRect2(getX() + getW() - 12, getY() + 3, 10, 12, new Color(140, 140, 140, 200).getRGB());        if (booleanProperty.getValue()) {            RenderUtil.drawRect2(getX() + getW() - 11, getY() + 2, 9,13, Color.cyan.brighter().getRGB());        }*/        RenderUtil.drawRect(getX() + getW() - 13, getY() + 4, getX() + getW() - 4, getY() + 13, new Color(140, 140, 140, 200).getRGB());        if (booleanProperty.getValue()) {            RenderUtil.drawRect(getX() + getW() - 12, getY() + 5, getX() + getW() - 5,getY() + 12, Color.cyan.brighter().getRGB());        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/BooleanComponent.java", "stars": "12", "class": {"name": "BooleanComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseClicked(int mx, int my, int button) {        super.mouseClicked(mx, my, button);        final boolean hovered = MouseUtil.withinBounds(mx, my, getX(), getY(), getW(), getH());        if (button == 0 && hovered) {            booleanProperty.setValue(!booleanProperty.getValue());        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/BooleanComponent.java", "stars": "12", "class": {"name": "BooleanComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAnswersVisible", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAnswersVisible(Boolean show) {\t\ttriviaQuestion.setVisible(show);\t\tuserAnswerLabel.setVisible(show);\t\tuserAnswer.setVisible(show);\t\tcheckAnswer.setVisible(show);\t\tanswerResult.setVisible(show);\t\tuserAnswer.setText(\"\");\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/TriviaPanel.java", "stars": "1", "class": {"name": "TriviaPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "getRandomNumInt", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getRandomNumInt(int min, int max) {\t\tint x = (int) (Math.random() * ((max - min) + 1)) + min;\t\treturn x;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/TriviaPanel.java", "stars": "1", "class": {"name": "TriviaPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "generateTitleId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateTitleId() {\t\tBoolean isGood = false;\t\tString titleId = \"\";\t\twhile (!isGood) {\t\t\ttitleId = \"tt\";\t\t\tint num = getRandomNumInt(1, 9899998);\t\t\tString titleNum = Integer.toString(num);\t\t\tint toFill = 7 - titleNum.length();\t\t\tfor (int i = 0; i < toFill; i++) {\t\t\t\ttitleId += \"0\";\t\t\t}\t\t\ttitleId += titleNum;\t\t\tTitle myTitle = manager.getTitleByID(titleId);\t\t\tif (myTitle == null) {\t\t\t\tisGood = false;\t\t\t} else if (myTitle.getDirectors() == null || myTitle.getWriters() == null) {\t\t\t\tisGood = false;\t\t\t} else if (myTitle.getStartYear() == null || myTitle.getSeason() == null) {\t\t\t\tisGood = false;\t\t\t} else if (myTitle.getType() == null) {\t\t\t\tisGood = false;\t\t\t} else if (!myTitle.getType().equals(\"movie\")) {\t\t\t\tisGood = false;\t\t\t} else if (myTitle.getRating() == 0.0) {\t\t\t\tisGood = false;\t\t\t} else if (myTitle.getTitle() == null) {\t\t\t\tisGood = false;\t\t\t} else {\t\t\t\tisGood = true;\t\t\t}\t\t}\t\treturn titleId;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/TriviaPanel.java", "stars": "1", "class": {"name": "TriviaPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "generatePersonId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generatePersonId() {\t\tBoolean isGood = false;\t\tString personId = \"\";\t\twhile (!isGood) {\t\t\tpersonId = \"nm\";\t\t\tint num = getRandomNumInt(1, 9989997);\t\t\tString personNum = Integer.toString(num);\t\t\tint toFill = 7 - personNum.length();\t\t\tfor (int i = 0; i < toFill; i++) {\t\t\t\tpersonId += \"0\";\t\t\t}\t\t\tpersonId += personNum;\t\t\tPerson myGuy = manager.getPersonByID(personId);\t\t\t// validate ID for possible parameters\t\t\tif (myGuy == null) {\t\t\t\tisGood = false;\t\t\t} else if (myGuy.getProfessions() == null || myGuy.getProfessions()[0].equals(\"miscellaneous\")) {\t\t\t\tisGood = false;\t\t\t} else if (myGuy.getBirthYear() == 0) {\t\t\t\tisGood = false;\t\t\t} else if (myGuy.getKnownFor() == null) {\t\t\t\tisGood = false;\t\t\t} else {\t\t\t\tisGood = true;\t\t\t}\t\t}\t\treturn personId;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/TriviaPanel.java", "stars": "1", "class": {"name": "TriviaPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void actionPerformed(ActionEvent e) {\t\tif (e.getSource() == generateQuestion) {\t\t\ttriviaQuestion.setText(\"Creating question, please wait...\");\t\t\tsetAnswersVisible(false);\t\t\ttriviaQuestion.setVisible(true);\t\t\tThread t = new Thread() {\t\t\t\t@Override\t\t\t\tpublic void run() {\t\t\t\t\tcorrectAnswer = \"\";\t\t\t\t\tuserAnswer.setText(\"\");\t\t\t\t\tanswerResult.setText(\"\");\t\t\t\t\t// If randomly choosing between people of title questions, flip a coin\t\t\t\t\tif (randomQ) {\t\t\t\t\t\tint typeNum = getRandomNumInt(0, 1);\t\t\t\t\t\tif (typeNum == 0) {\t\t\t\t\t\t\tpeopleQ = true;\t\t\t\t\t\t\ttitleQ = false;\t\t\t\t\t\t} else {\t\t\t\t\t\t\ttitleQ = true;\t\t\t\t\t\t\tpeopleQ = false;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tif (peopleQ) {\t\t\t\t\t\t// generate random question about a person\t\t\t\t\t\tint categoryNum = getRandomNumInt(0, 3);\t\t\t\t\t\tString categoryChoice = peopleCategories[categoryNum];\t\t\t\t\t\tString personId = generatePersonId();\t\t\t\t\t\t// based on category, query db for attributes\t\t\t\t\t\tPerson myGuy = manager.getPersonByID(personId);\t\t\t\t\t\tif (categoryChoice == \"Profession\") {\t\t\t\t\t\t\tcorrectAnswer = myGuy.getProfessions()[0];\t\t\t\t\t\t\tString personName = myGuy.getName();\t\t\t\t\t\t\ttriviaQuestion.setText(\"What profession is \" + personName + \" most known for?\");\t\t\t\t\t\t} else if (categoryChoice == \"Age\") {\t\t\t\t\t\t\tInteger BirthYear = myGuy.getBirthYear();\t\t\t\t\t\t\tInteger DeathYear = myGuy.getDeathYear();\t\t\t\t\t\t\tString personName = myGuy.getName();\t\t\t\t\t\t\tif (DeathYear == 0) {\t\t\t\t\t\t\t\tcorrectAnswer = Integer.toString(2019 - BirthYear);\t\t\t\t\t\t\t\ttriviaQuestion.setText(\"How old is \" + personName + \"?\");\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tcorrectAnswer = Integer.toString(DeathYear - BirthYear);\t\t\t\t\t\t\t\ttriviaQuestion.setText(\"How old was \" + personName + \" when they died?\");\t\t\t\t\t\t\t}\t\t\t\t\t\t} else if (categoryChoice == \"Birth Year\") {\t\t\t\t\t\t\tInteger BirthYear = myGuy.getBirthYear();\t\t\t\t\t\t\tString personName = myGuy.getName();\t\t\t\t\t\t\tcorrectAnswer = Integer.toString(BirthYear);\t\t\t\t\t\t\ttriviaQuestion.setText(\"What year was \" + personName + \" born?\");\t\t\t\t\t\t} else if (categoryChoice == \"Title Known For\") {\t\t\t\t\t\t\tString titleID = myGuy.getKnownFor()[0];\t\t\t\t\t\t\tTitle myTitle = manager.getTitleByID(titleID);\t\t\t\t\t\t\tcorrectAnswer = myTitle.getTitle();\t\t\t\t\t\t\tString personName = myGuy.getName();\t\t\t\t\t\t\ttriviaQuestion.setText(\"What title is \" + personName + \" most known for?\");\t\t\t\t\t\t}\t\t\t\t\t\tsetAnswersVisible(true);\t\t\t\t\t} else if (titleQ) {\t\t\t\t\t\t// generate a random question about a title\t\t\t\t\t\tint categoryNum = getRandomNumInt(0, 3);\t\t\t\t\t\tString categoryChoice = titleCategories[categoryNum];\t\t\t\t\t\tString titleId = generateTitleId();\t\t\t\t\t\tTitle myTitle = manager.getTitleByID(titleId);\t\t\t\t\t\tif (categoryChoice == \"Start Year\") {\t\t\t\t\t\t\tString titleName = myTitle.getTitle();\t\t\t\t\t\t\tInteger StartYear = myTitle.getStartYear();\t\t\t\t\t\t\tcorrectAnswer = Integer.toString(StartYear);\t\t\t\t\t\t\tif (myTitle.getType().equals(\"movie\") || myTitle.getType().equals(\"tvMovie\")\t\t\t\t\t\t\t\t\t|| myTitle.getType().equals(\"short\") || myTitle.getType().equals(\"tvShort)\")) {\t\t\t\t\t\t\t\ttriviaQuestion.setText(\"What year did \\\"\" + titleName + \"\\\" premiere?\");\t\t\t\t\t\t\t} else if (myTitle.getType().equals(\"tvSeries\")) {\t\t\t\t\t\t\t\ttriviaQuestion.setText(\"What year did the show \\\"\" + titleName + \"\\\" begin airing?\");\t\t\t\t\t\t\t}\t\t\t\t\t\t} else if (categoryChoice == \"Rating\") {\t\t\t\t\t\t\tDouble myRating = myTitle.getRating();\t\t\t\t\t\t\tString titleName = myTitle.getTitle();\t\t\t\t\t\t\tcorrectAnswer = Double.toString(myRating);\t\t\t\t\t\t\ttriviaQuestion.setText(\"What was the rating for the title \\\"\" + titleName + \"\\\"?\");\t\t\t\t\t\t} else if (categoryChoice == \"Director\") {\t\t\t\t\t\t\tString directorID = myTitle.getDirectors()[0];\t\t\t\t\t\t\tcorrectAnswer = manager.getPersonByID(directorID).getName();\t\t\t\t\t\t\tString titleName = myTitle.getTitle();\t\t\t\t\t\t\ttriviaQuestion.setText(\"Who was the chief director of \\\"\" + titleName + \"\\\"?\");\t\t\t\t\t\t} else if (categoryChoice == \"Writer\") {\t\t\t\t\t\t\tString writerID = myTitle.getWriters()[0];\t\t\t\t\t\t\tcorrectAnswer = manager.getPersonByID(writerID).getName();\t\t\t\t\t\t\tString titleName = myTitle.getTitle();\t\t\t\t\t\t\ttriviaQuestion.setText(\"Who was the chief writer of \\\"\" + titleName + \"\\\"?\");\t\t\t\t\t\t}\t\t\t\t\t\tsetAnswersVisible(true);\t\t\t\t\t} else {\t\t\t\t\t\ttriviaQuestion.setText(\"Please select a category\");\t\t\t\t\t\ttriviaQuestion.setVisible(true);\t\t\t\t\t}\t\t\t\t}\t\t\t};\t\t\tt.start();\t\t} else if (e.getSource() == checkAnswer) {\t\t\t// check against stored answerResult\t\t\tString toCheck = userAnswer.getText().replaceAll(\"\\\\s+\", \"\").toLowerCase();\t\t\tString newAnswer = correctAnswer.replaceAll(\"\\\\s+\", \"\").toLowerCase();\t\t\tif (!newAnswer.equals(toCheck)) {\t\t\t\tanswerResult.setText(\"Sorry, that is incorrect. The correct answer is \" + correctAnswer + \".\");\t\t\t} else {\t\t\t\tanswerResult.setText(\"That's correct!\");\t\t\t}\t\t} else if (e.getSource() == typeDropDown) {\t\t\tsetAnswersVisible(false);\t\t\tif (typeDropDown.getSelectedItem().equals(\"Random\")) {\t\t\t\trandomQ = true;\t\t\t\tpeopleQ = false;\t\t\t\ttitleQ = false;\t\t\t} else if (typeDropDown.getSelectedItem() == \"People\") {\t\t\t\tpeopleQ = true;\t\t\t\ttitleQ = false;\t\t\t\trandomQ = false;\t\t\t} else if (typeDropDown.getSelectedItem() == \"Titles\") {\t\t\t\ttitleQ = true;\t\t\t\tpeopleQ = false;\t\t\t\trandomQ = false;\t\t\t} else {\t\t\t\trandomQ = false;\t\t\t\tpeopleQ = false;\t\t\t\ttitleQ = false;\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/TriviaPanel.java", "stars": "1", "class": {"name": "TriviaPanel", "extends": "JPanel", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "setJobProps", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "AzkanbanBuilder", "snippet": "    public AzkanbanBuilder setJobProps(Map<String, String> jobProps) {        this.jobProps = jobProps;        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(){        JobParamsParser jobParamsParser = new JobParamsParser();        jobParamsParser.setSignalKeyCreator(jobSignalKeyCreator);        LinkisNodeExecutionImpl linkisNodeExecution = (LinkisNodeExecutionImpl)LinkisNodeExecutionImpl.getLinkisNodeExecution();        linkisNodeExecution.registerJobParser(jobParamsParser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobType", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getJobType() {        return jobProps.getOrDefault(LinkisJobExecutionConfiguration.LINKIS_TYPE,                LinkisJobExecutionConfiguration.LINKIS_DEFAULT_TYPE.getValue(jobProps));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReadNode", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Boolean", "snippet": "    protected Boolean isReadNode() {        return  StringUtils.isNotEmpty(jobProps.get(\"read.nodes\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "isShareNod", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Boolean", "snippet": "    protected Boolean isShareNod() {        return  StringUtils.isNotEmpty(jobProps.get(\"share.num\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSignalSharedNode", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Boolean", "snippet": "    protected Boolean isSignalSharedNode() {        return LinkisJobTypeUtils.isSignalNode(getJobType());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "createReadJob", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "ReadJob", "snippet": "    protected ReadJob createReadJob(boolean isLinkisType) {        if(isLinkisType){            AzkabanCommonLinkisReadJob readJob = new AzkabanCommonLinkisReadJob();            readJob.setJobProps(this.jobProps);            return readJob;        } else {            AzkabanAppJointLinkisReadJob readJob = new AzkabanAppJointLinkisReadJob();            readJob.setJobProps(this.jobProps);            return readJob;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "createSharedJob", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "SharedJob", "snippet": "    protected SharedJob createSharedJob(boolean isLinkisType) {        if(isLinkisType){            AzkabanCommonLinkisSharedJob sharedJob = new AzkabanCommonLinkisSharedJob();            sharedJob.setJobProps(this.jobProps);            int shareNum = Integer.parseInt(this.jobProps.get(LinkisJobTypeConf.SHARED_NODE_TOKEN));            sharedJob.setSharedNum(shareNum);            return sharedJob;        } else {            AzkabanAppJointLinkisSharedJob sharedJob = new AzkabanAppJointLinkisSharedJob();            sharedJob.setJobProps(this.jobProps);            int shareNum = Integer.parseInt(this.jobProps.get(LinkisJobTypeConf.SHARED_NODE_TOKEN));            sharedJob.setSharedNum(shareNum);            return sharedJob;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "createSignalSharedJob", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "SignalSharedJob", "snippet": "    protected SignalSharedJob createSignalSharedJob(boolean isLinkisType) {        if(isLinkisType){            return null;        } else {            AzkabanAppJointSignalSharedJob signalSharedJob = new AzkabanAppJointSignalSharedJob();            signalSharedJob.setSignalKeyCreator(jobSignalKeyCreator);            signalSharedJob.setJobProps(this.jobProps);            return signalSharedJob;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "creatLinkisJob", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "LinkisJob", "snippet": "    protected LinkisJob creatLinkisJob(boolean isLinkisType) {        if(isLinkisType){            AzkabanCommonLinkisJob linkisJob = new AzkabanCommonLinkisJob();            linkisJob.setJobProps(this.jobProps);            return linkisJob;        } else {            AzkabanAppJointLinkisJob linkisJob = new AzkabanAppJointLinkisJob();            linkisJob.setJobProps(this.jobProps);            return linkisJob;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillJobInfo", "params": ["Job"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void fillJobInfo(Job job) {        job.setCode(jobProps.get(LinkisJobTypeConf.COMMAND));        job.setParams(new HashMap<String, Object>());        job.setRuntimeParams(new HashMap<String, Object>());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillLinkisJobInfo", "params": ["LinkisJob"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void fillLinkisJobInfo(LinkisJob linkisJob) {        linkisJob.setConfiguration(findConfiguration(LinkisJobExecutionConfiguration.NODE_CONF_PREFIX));        linkisJob.setVariables(findVariables(LinkisJobExecutionConfiguration.FLOW_VARIABLE_PREFIX));        linkisJob.setSource(getSource());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillCommonLinkisJobInfo", "params": ["CommonLinkisJob"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void fillCommonLinkisJobInfo(CommonLinkisJob linkisAppjointJob) {        linkisAppjointJob.setJobResourceList(LinkisJobExecutionUtils.getResourceListByJson(jobProps.get(\"resources\")));        String projectResourceName = LinkisJobExecutionConfiguration.PROJECT_PREFIX + \".\"                + jobProps.get(LinkisJobTypeConf.PROJECT_NAME) + LinkisJobExecutionConfiguration.RESOURCES_NAME;        linkisAppjointJob.setProjectResourceList(LinkisJobExecutionUtils.getResourceListByJson(jobProps.get(projectResourceName)));        linkisAppjointJob.setFlowNameAndResources(findFLowNameAndResources());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSource", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> getSource() {        Map<String, String> source = new HashMap<>();        source.put(\"projectName\", jobProps.get(LinkisJobTypeConf.PROJECT_NAME));        source.put(\"flowName\", jobProps.get(LinkisJobTypeConf.FLOW_NAME));        source.put(\"nodeName\", jobProps.get(LinkisJobTypeConf.JOB_ID));        return source;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "findVariables", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,Object>", "snippet": "    private Map<String, Object> findVariables(String prefix) {        Map<String, Object> map = new HashMap<>();        Iterator<String> keyIterator = jobProps.keySet().iterator();        while (keyIterator.hasNext()) {            String next = keyIterator.next();            if (next.startsWith(prefix)) {                map.put(next.substring(prefix.length()), jobProps.get(next));            }        }        return map;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "findConfiguration", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,Object>", "snippet": "    private Map<String, Object> findConfiguration(String prefix) {        Map<String, Object> configuration = new HashMap<>();        Iterator<String> keyIterator = jobProps.keySet().iterator();        while (keyIterator.hasNext()) {            String next = keyIterator.next();            if (next.startsWith(prefix)) {                String confTypeAndName = next.substring(prefix.length());                if (confTypeAndName.startsWith(LinkisJobExecutionConfiguration.CONF_STARTUP)) {                    putConf(configuration, LinkisJobExecutionConfiguration.CONF_STARTUP, jobProps.get(next), confTypeAndName);                } else if (confTypeAndName.startsWith(LinkisJobExecutionConfiguration.CONF_RUNTIME)) {                    putConf(configuration, LinkisJobExecutionConfiguration.CONF_RUNTIME, jobProps.get(next), confTypeAndName);                } else if (confTypeAndName.startsWith(LinkisJobExecutionConfiguration.CONF_SPECIAL)) {                    putConf(configuration, LinkisJobExecutionConfiguration.CONF_SPECIAL, jobProps.get(next), confTypeAndName);                }            }        }        return configuration;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "putConf", "params": ["Map<String,Object>", "String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void putConf(Map<String, Object> configuration, String key, String value, String confTypeAndName) {        if (configuration.get(key) == null) {            Map<String, String> startup = new HashMap<>();            startup.put(confTypeAndName.substring(key.length() + 1), value);            configuration.put(key, startup);        } else {            Map<String, String> startup = (Map<String, String>) configuration.get(key);            startup.put(confTypeAndName.substring(key.length() + 1), value);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "findFLowNameAndResources", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Map<String,List>", "snippet": "    private Map<String, List<BMLResource>> findFLowNameAndResources() {        Map<String, List<BMLResource>> flowNameAndResources = new HashMap<>();        Iterator<String> iterator = jobProps.keySet().iterator();        while (iterator.hasNext()) {            String next = iterator.next();            if (next.endsWith(\"resources\") && next.startsWith(\"flow\")) {                flowNameAndResources.put(next, LinkisJobExecutionUtils.getResourceListByJson(jobProps.get(next)));            }        }        return flowNameAndResources;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkanbanBuilder.java", "stars": "18", "class": {"name": "AzkanbanBuilder", "extends": "Builder", "implements": null, "modifiers": ["public"]}}, {"method_name": "send", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void send() {        this.subscribe();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/URLServiceSubscription.java", "stars": "4", "class": {"name": "URLServiceSubscription", "extends": "ServiceCommand", "implements": ["ServiceSubscription"], "modifiers": ["public"]}}, {"method_name": "subscribe", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void subscribe() {        if (!(httpMethod.equalsIgnoreCase(TYPE_GET)                || httpMethod.equalsIgnoreCase(TYPE_POST))) {            httpMethod = \"subscribe\";        }        processor.sendCommand(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/URLServiceSubscription.java", "stars": "4", "class": {"name": "URLServiceSubscription", "extends": "ServiceCommand", "implements": ["ServiceSubscription"], "modifiers": ["public"]}}, {"method_name": "unsubscribe", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unsubscribe() {        processor.unsubscribe(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/URLServiceSubscription.java", "stars": "4", "class": {"name": "URLServiceSubscription", "extends": "ServiceCommand", "implements": ["ServiceSubscription"], "modifiers": ["public"]}}, {"method_name": "addListener", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T addListener(T listener) {        listeners.add(listener);        return listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/URLServiceSubscription.java", "stars": "4", "class": {"name": "URLServiceSubscription", "extends": "ServiceCommand", "implements": ["ServiceSubscription"], "modifiers": ["public"]}}, {"method_name": "removeListener", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeListener(T listener) {        listeners.remove(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/URLServiceSubscription.java", "stars": "4", "class": {"name": "URLServiceSubscription", "extends": "ServiceCommand", "implements": ["ServiceSubscription"], "modifiers": ["public"]}}, {"method_name": "removeListeners", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeListeners() {        listeners.clear();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/URLServiceSubscription.java", "stars": "4", "class": {"name": "URLServiceSubscription", "extends": "ServiceCommand", "implements": ["ServiceSubscription"], "modifiers": ["public"]}}, {"method_name": "getListeners", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public List<T> getListeners() {        return listeners;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/URLServiceSubscription.java", "stars": "4", "class": {"name": "URLServiceSubscription", "extends": "ServiceCommand", "implements": ["ServiceSubscription"], "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        this.restGardenFieldMockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)            .apply(SecurityMockMvcConfigurers.springSecurity())            .build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/UserGardenFieldControllerIT.java", "stars": "2", "class": {"name": "UserGardenFieldControllerIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createUser() {        user = new User();        user.setLogin(DEFAULT_LOGIN);        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        user.setFirstName(DEFAULT_FIRSTNAME);        user.setLastName(DEFAULT_LASTNAME);        user.setBankAccountIBAN(DEFAULT_IBAN);        user = userRepository.save(user);        simpleUserDTO = simpleUserMapper.toDTO(user);        user2 = new User();        user2.setLogin(DEFAULT_LOGIN2);        user2.setPassword(RandomStringUtils.random(60));        user2.setActivated(true);        user2.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL2);        user2.setFirstName(DEFAULT_FIRSTNAME2);        user2.setLastName(DEFAULT_LASTNAME2);        user2.setBankAccountIBAN(DEFAULT_IBAN);        user2 = userRepository.saveAndFlush(user2);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/UserGardenFieldControllerIT.java", "stars": "2", "class": {"name": "UserGardenFieldControllerIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getAllUserGardenfields", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllUserGardenfields() throws Exception {        createAndSaveGardenField(GARDEN_NAME, user);        createAndSaveGardenField(GARDEN_NAME + \"_2\", user2);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/user\")            .accept(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content\", hasSize(1)))            .andExpect(jsonPath(\"$.content.[0].name\").value(is(GARDEN_NAME)))            .andExpect(jsonPath(\"$.content.[0].sizeInM2\").value(is(SIZE_IN_M2)))            .andExpect(jsonPath(\"$.content.[0].pricePerM2\").value(is(PRICE_PER_M2)))            .andExpect(jsonPath(\"$.content.[0].latitude\").value(is(LATITUDE)))            .andExpect(jsonPath(\"$.content.[0].longitude\").value(is(LONGITUDE)))            .andExpect(jsonPath(\"$.content.[0].city\").value(is(CITY)))            .andExpect(jsonPath(\"$.content.[0].roofed\").value(is(ROOFED)))            .andExpect(jsonPath(\"$.content.[0].glassHouse\").value(is(GLASS_HOUSE)))            .andExpect(jsonPath(\"$.content.[0].high\").value(is(HIGH)))            .andExpect(jsonPath(\"$.content.[0].water\").value(is(WATER)))            .andExpect(jsonPath(\"$.content.[0].electricity\").value(is(ELECTRICITY)))            .andExpect(jsonPath(\"$.content.[0].phValue\").value(is(PH_VALUE)))            .andExpect(jsonPath(\"$.content.[0].description\").value(is(DESCRIPTION)))            .andExpect(jsonPath(\"$.content.[0].owner.id\").value(is(Math.toIntExact(simpleUserDTO.getId()))));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/UserGardenFieldControllerIT.java", "stars": "2", "class": {"name": "UserGardenFieldControllerIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLeasingsForUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLeasingsForUser() throws Exception {        GardenField gardenField1 = createAndSaveGardenField(GARDEN_NAME, user);        GardenField gardenField2 = createAndSaveGardenField(GARDEN_NAME + \"2\", user2);        Instant from1 = Instant.now();        Instant to1 = from1.plus(100, ChronoUnit.DAYS);        Instant from2 = Instant.now().plus(100, ChronoUnit.DAYS);        Instant to2 = from2.plus(200, ChronoUnit.DAYS);        Instant from3 = Instant.now().plus(100, ChronoUnit.DAYS);        Instant to3 = from3.plus(200, ChronoUnit.DAYS);        Leasing leasing1 = new Leasing();        leasing1.setFrom(from1);        leasing1.setTo(to1);        leasing1.setGardenField(gardenField1);        leasing1.setUser(user);        leasing1.setStatus(LeasingStatus.OPEN);        leasing1.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        Leasing leasing2 = new Leasing();        leasing2.setFrom(from2);        leasing2.setTo(to2);        leasing2.setGardenField(gardenField1);        leasing2.setUser(user);        leasing2.setStatus(LeasingStatus.RESERVED);        leasing2.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        Leasing leasing3 = new Leasing();        leasing3.setFrom(from3);        leasing3.setTo(to3);        leasing3.setGardenField(gardenField2);        leasing3.setUser(user2);        leasing3.setStatus(LeasingStatus.RESERVED);        leasing3.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing1);        leasingRepository.save(leasing2);        leasingRepository.save(leasing3);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/user/leasings\")            .accept(MediaType.APPLICATION_JSON))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content\", hasSize(2)))            .andExpect(jsonPath(\"$.content.[0].from\").value(is(from1.toString())))            .andExpect(jsonPath(\"$.content.[0].to\").value(is(to1.toString())))            .andExpect(jsonPath(\"$.content.[0].gardenField.name\").value(is(GARDEN_NAME)))            .andExpect(jsonPath(\"$.content.[1].gardenField.name\").value(is(GARDEN_NAME)))            .andExpect(jsonPath(\"$.content.[1].from\").value(is(from2.toString())))            .andExpect(jsonPath(\"$.content.[1].to\").value(is(to2.toString())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/UserGardenFieldControllerIT.java", "stars": "2", "class": {"name": "UserGardenFieldControllerIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLeasingsForUserWithStateFilterOngoing", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLeasingsForUserWithStateFilterOngoing() throws Exception {        GardenField gardenField1 = createAndSaveGardenField(GARDEN_NAME, user);        Instant from1 = Instant.now().minus(10, ChronoUnit.DAYS);        Instant to1 = from1.plus(100, ChronoUnit.DAYS);        Instant from2 = Instant.now().plus(100, ChronoUnit.DAYS);        Instant to2 = from2.plus(200, ChronoUnit.DAYS);        Instant from3 = Instant.now().minus(200, ChronoUnit.DAYS);        Instant to3 = from3.minus(100, ChronoUnit.DAYS);        Leasing leasing1 = new Leasing();        leasing1.setFrom(from1);        leasing1.setTo(to1);        leasing1.setGardenField(gardenField1);        leasing1.setUser(user);        leasing1.setStatus(LeasingStatus.OPEN);        leasing1.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        Leasing leasing2 = new Leasing();        leasing2.setFrom(from2);        leasing2.setTo(to2);        leasing2.setGardenField(gardenField1);        leasing2.setUser(user);        leasing2.setStatus(LeasingStatus.RESERVED);        leasing2.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        Leasing leasing3 = new Leasing();        leasing3.setFrom(from3);        leasing3.setTo(to3);        leasing3.setGardenField(gardenField1);        leasing3.setUser(user);        leasing3.setStatus(LeasingStatus.RESERVED);        leasing3.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing1);        leasingRepository.save(leasing2);        leasingRepository.save(leasing3);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/user/leasings?state=\" + LeasingState.ONGOING.toString())            .accept(MediaType.APPLICATION_JSON))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content\", hasSize(1)))            .andExpect(jsonPath(\"$.content.[0].from\").value(is(from1.toString())))            .andExpect(jsonPath(\"$.content.[0].to\").value(is(to1.toString())))            .andExpect(jsonPath(\"$.content.[0].gardenField.name\").value(is(GARDEN_NAME)));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/UserGardenFieldControllerIT.java", "stars": "2", "class": {"name": "UserGardenFieldControllerIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createAndSaveGardenField", "params": ["String", "User"], "throws": null, "modifiers": ["private"], "return_type": "GardenField", "snippet": "    private GardenField createAndSaveGardenField(String gardenName, User user) {        GardenField gardenField = new GardenField();        gardenField.setName(gardenName);        gardenField.setDescription(DESCRIPTION);        gardenField.setSizeInM2(SIZE_IN_M2);        gardenField.setPricePerM2(PRICE_PER_M2);        gardenField.setLatitude(LATITUDE);        gardenField.setLongitude(LONGITUDE);        gardenField.setCity(CITY);        gardenField.setRoofed(ROOFED);        gardenField.setGlassHouse(GLASS_HOUSE);        gardenField.setHigh(HIGH);        gardenField.setWater(WATER);        gardenField.setElectricity(ELECTRICITY);        gardenField.setPhValue(PH_VALUE);        gardenField.setOwner(user);        return gardenFieldRepository.saveAndFlush(gardenField);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/UserGardenFieldControllerIT.java", "stars": "2", "class": {"name": "UserGardenFieldControllerIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleLiquibaseApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-liquibase/src/main/java/smoketest/liquibase/SampleLiquibaseApplication.java", "stars": "47572", "class": {"name": "SampleLiquibaseApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        super.init(context);        detailBtn = (TextView) findViewById(R.id.detail_btn);        detailBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (isInPlayingState()) {                    SwitchUtil.savePlayState(SwitchVideo.this);                    getGSYVideoManager().setLastListener(SwitchVideo.this);                    //fixme \u9875\u9762\u8df3\u8f6c\u662f\uff0c\u5143\u7d20\u5171\u4eab\uff0c\u6548\u679c\u4f1a\u6709\u4e00\u4e2a\u4e2d\u95f4\u4e2d\u95f4\u63a7\u4ef6\u7684\u5b58\u5728                    //fixme \u8fd9\u65f6\u5019\u4e2d\u95f4\u63a7\u4ef6 CURRENT_STATE_PLAYING\uff0c\u4f1a\u89e6\u53d1 startProgressTimer                    //FIXME \u4f46\u662f\u6ca1\u6709cancel                    SwitchDetailActivity.startTActivity((Activity) getContext(), SwitchVideo.this);                }            }        });        if (mIfCurrentIsFullscreen) {            detailBtn.setVisibility(GONE);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchVideo.java", "stars": "2", "class": {"name": "SwitchVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId() {        return R.layout.switch_video;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchVideo.java", "stars": "2", "class": {"name": "SwitchVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSwitchUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSwitchUrl(String url) {        mUrl = url;        mOriginUrl = url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchVideo.java", "stars": "2", "class": {"name": "SwitchVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSwitchCache", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSwitchCache(boolean cache) {        mCache = cache;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchVideo.java", "stars": "2", "class": {"name": "SwitchVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSwitchTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSwitchTitle(String title) {        mTitle = title;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchVideo.java", "stars": "2", "class": {"name": "SwitchVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSurfaceToPlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSurfaceToPlay() {        addTextureView();        getGSYVideoManager().setListener(this);        checkoutState();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchVideo.java", "stars": "2", "class": {"name": "SwitchVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "saveState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SwitchVideo", "snippet": "    public SwitchVideo saveState() {        SwitchVideo switchVideo = new SwitchVideo(getContext());        cloneParams(this, switchVideo);        return switchVideo;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchVideo.java", "stars": "2", "class": {"name": "SwitchVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "cloneState", "params": ["SwitchVideo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cloneState(SwitchVideo switchVideo) {        cloneParams(switchVideo, this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchVideo.java", "stars": "2", "class": {"name": "SwitchVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tStrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();\t\tStrictMode.setThreadPolicy(policy); \t\tsetContentView(R.layout.main);\t\ttry \t\t{\t\t\tlv=(ListView)findViewById(R.id.list);\t\t\thttpclient = new DefaultHttpClient();\t\t\thttppost = new HttpPost(\"http://192.168.1.245:9006/flashre/working/development/version1/webservices/api.php?\");\t\t\t// method=getAllFlashUsers&user_id=210&step=smartSearch&group_id=&name=&group_name=&flash_id=dggg3566\t\t\tList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\t\t\tnameValuePairs.add(new BasicNameValuePair(\"method\", \"getAllFlashUsers\"));\t\t\tnameValuePairs.add(new BasicNameValuePair(\"user_id\", \"210\"));\t\t\tnameValuePairs.add(new BasicNameValuePair(\"step\", \"smartSearch\"));//\t\t\tnameValuePairs.add(new BasicNameValuePair(\"group_id\", \"\"));//\t\t\tnameValuePairs.add(new BasicNameValuePair(\"name\", \"\"));//\t\t\tnameValuePairs.add(new BasicNameValuePair(\"group_name\", \"\"));\t\t\tnameValuePairs.add(new BasicNameValuePair(\"flash_id\", \"dggg3566\"));\t\t\ta=new ArrayList<String>();\t\t\t\t\t\tArrayAdapter<String> aa=new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, a);\t\t\tlv.setAdapter(aa);\t\t\thttppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\t\t\tresponse = httpclient.execute(httppost);\t\t\tjsonResult = inputStreamToString(response.getEntity().getContent()).toString();\t\t\tSystem.out.println(response);\t\t\tSystem.out.println(\"jsonResult \"+jsonResult);\t\t\tobject = new JSONObject(jsonResult);\t\t\tJSONArray jArray = object.getJSONArray(\"groupInfo\");\t\t\tfor (int i=0; i < jArray.length(); i++)\t\t\t{\t\t\t\ttry {\t\t\t\t\tJSONObject oneObject = jArray.getJSONObject(i);\t\t\t\t\t// Pulling items from the array\t\t\t\t\ta.add(oneObject.getString(\"group_name\"));\t\t\t\t\t\t\t\t\t} catch (JSONException e) {\t\t\t\t\te.printStackTrace();\t\t\t\t}\t\t\t}\t\t\t\t\t}\t\tcatch (JSONException e)\t\t{\t\t\te.printStackTrace();\t\t}\t\tcatch (ClientProtocolException e)\t\t{\t\t\te.printStackTrace();\t\t}\t\tcatch (IOException e)\t\t{\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/JSONExampleActivity/src/com/example/jsonexampleactivity/JSONExampleActivity.java", "stars": "74", "class": {"name": "JSONExampleActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "inputStreamToString", "params": ["InputStream"], "throws": null, "modifiers": ["private"], "return_type": "StringBuilder", "snippet": "\tprivate StringBuilder inputStreamToString(InputStream is) {\t\tString rLine = \"\";\t\tStringBuilder answer = new StringBuilder();\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(is));\t\ttry\t\t{\t\t\twhile ((rLine = rd.readLine()) != null) {\t\t\t\tanswer.append(rLine);\t\t\t}\t\t}\t\tcatch (IOException e) \t\t{\t\t\te.printStackTrace();\t\t}\t\treturn answer;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/JSONExampleActivity/src/com/example/jsonexampleactivity/JSONExampleActivity.java", "stars": "74", "class": {"name": "JSONExampleActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "tags", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Tag>", "snippet": "    public static List<Tag> tags(){        return Bored.env().getTags();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateFunction.java", "stars": "2", "class": {"name": "JetTemplateFunction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tag", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Tag", "snippet": "    public static Tag tag(String tagName) {        AtomicReference<Tag> target = new AtomicReference<>();        Bored.env().getTags().parallelStream().forEach(tag->{            if (tag.getName().equals(tagName)) {                target.set(tag);            }        });        return target.get();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateFunction.java", "stars": "2", "class": {"name": "JetTemplateFunction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tagUrl", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String tagUrl(String tagName){        AtomicReference<String> url = new AtomicReference<>();        Bored.env().getTags().parallelStream().forEach(tag->{            if (tag.getName().equals(tagName)) {                url.set(tag.getUrl());            }        });        return url.get();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateFunction.java", "stars": "2", "class": {"name": "JetTemplateFunction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "categories", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Category>", "snippet": "    public static List<Category> categories(){        return Bored.env().getCategories();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateFunction.java", "stars": "2", "class": {"name": "JetTemplateFunction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "category", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Category", "snippet": "    public static Category category(String categoryName) {        AtomicReference<Category> target = new AtomicReference<>();        Bored.env().getCategories().parallelStream().forEach(tag->{            if (tag.getName().equals(categoryName)) {                target.set(tag);            }        });        return target.get();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateFunction.java", "stars": "2", "class": {"name": "JetTemplateFunction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "categoryUrl", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String categoryUrl(String categoryName){        AtomicReference<String> url = new AtomicReference<>();        Bored.env().getCategories().parallelStream().forEach(tag->{            if (tag.getName().equals(categoryName)) {                url.set(tag.getUrl());            }        });        return url.get();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateFunction.java", "stars": "2", "class": {"name": "JetTemplateFunction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validate", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validate() {    if (!this.binaryExecutable.canExecute()) {      throw new RuntimeException(\"Unable to execute execute-as-user binary. Invalid Path: \"          + this.binaryExecutable.getAbsolutePath());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/ExecuteAsUser.java", "stars": "18", "class": {"name": "ExecuteAsUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["String", "List<String>"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int execute(final String user, final List<String> command) throws IOException {    log.info(\"Command: \" + command);    final Process process = new ProcessBuilder()        .command(constructExecuteAsCommand(user, command))        .inheritIO()        .start();    int exitCode;    try {      exitCode = process.waitFor();    } catch (final InterruptedException e) {      log.error(e.getMessage(), e);      exitCode = 1;    }    return exitCode;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/ExecuteAsUser.java", "stars": "18", "class": {"name": "ExecuteAsUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "constructExecuteAsCommand", "params": ["String", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "  private List<String> constructExecuteAsCommand(final String user, final List<String> command) {    final List<String> commandList = new ArrayList<>();    commandList.add(this.binaryExecutable.getAbsolutePath());    commandList.add(user);    commandList.addAll(command);    return commandList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/ExecuteAsUser.java", "stars": "18", "class": {"name": "ExecuteAsUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\t\t\tsetContentView(R.layout.example);\t\t\t\tmPullRefreshScrollView = (PullToRefreshScrollView) findViewById(R.id.pull_refresh_scrollview);\t\tmPullRefreshScrollView.setOnRefreshListener(new OnRefreshListener<ScrollView>() {\t\t\t@Override\t\t\tpublic void onRefresh(PullToRefreshBase<ScrollView> refreshView) {\t\t\t\tToast.makeText(ExampleActivity.this, \"Pull Down!\", Toast.LENGTH_SHORT).show();\t\t\t\tnew GetDataTask().execute();\t\t\t}\t\t});\t\tmScrollView = mPullRefreshScrollView.getRefreshableView();\t\t//mListItems = new LinkedList<String>();\t\t\t\tgridview = (PagedDragDropGrid) findViewById(R.id.gridview);\t\t\t\t\tExamplePagedDragDropGridAdapter adapter = new ExamplePagedDragDropGridAdapter(this, gridview);\t\t//mAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, mListItems);        gridview.setAdapter(adapter);\t\tgridview.setClickListener(this);\t\tgridview.setBackgroundColor(Color.LTGRAY);\t\t\t\t\t\t\tgridview.setOnPageChangedListener(new OnPageChangedListener() {                        @Override            public void onPageChanged(PagedDragDropGrid sender, int newPageNumber) {                Toast.makeText(ExampleActivity.this, \"Page changed to page \" + newPageNumber, Toast.LENGTH_SHORT).show();                            }        });\t\tmScrollView = mPullRefreshScrollView.getRefreshableView();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExampleActivity.java", "stars": "74", "class": {"name": "ExampleActivity", "extends": "Activity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onRestoreInstanceState", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onRestoreInstanceState(Bundle savedInstanceState) {\t  super.onRestoreInstanceState(savedInstanceState);      int savedPage = savedInstanceState.getInt(CURRENT_PAGE_KEY);      gridview.restoreCurrentPage(savedPage);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExampleActivity.java", "stars": "74", "class": {"name": "ExampleActivity", "extends": "Activity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onSaveInstanceState", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onSaveInstanceState(Bundle outState) {\t    outState.putInt(CURRENT_PAGE_KEY, gridview.currentPage());\t    super.onSaveInstanceState(outState);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExampleActivity.java", "stars": "74", "class": {"name": "ExampleActivity", "extends": "Activity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCreateOptionsMenu(Menu menu) {        menu.add(\"Reset\").setOnMenuItemClickListener(new OnMenuItemClickListener() {            @Override            public boolean onMenuItemClick(MenuItem item) {                gridview.setAdapter(new ExamplePagedDragDropGridAdapter(ExampleActivity.this, gridview));                gridview.notifyDataSetChanged();                                return true;            }        });        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExampleActivity.java", "stars": "74", "class": {"name": "ExampleActivity", "extends": "Activity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        Toast.makeText(this, \"Clicked View\", Toast.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExampleActivity.java", "stars": "74", "class": {"name": "ExampleActivity", "extends": "Activity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\t\tprotected String[] doInBackground(Void... params) {\t\t\t// Simulates a background job.\t\t\ttry {\t\t\t\tThread.sleep(2000);\t\t\t} catch (InterruptedException e) {\t\t\t}\t\t\tString[] mStrings = { \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\t\t\t\t\t\"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\", \"Aisy Cendre\",\t\t\t\t\t\"Allgauer Emmentaler\" };\t\t\treturn mStrings;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExampleActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPostExecute(String[] result) {\t\t\tToast.makeText(getApplicationContext(), \"Added after refresh...\", Toast.LENGTH_SHORT).show();                \t\t\t//mListItems.addFirst(\"Added after refresh...\");\t\t\t//mListItems.addAll(Arrays.asList(result));\t\t\tLinearLayout linearLayout = new LinearLayout(ExampleActivity.this);\t        LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\t\t\tImageView imageView=new ImageView(ExampleActivity.this);\t\t\timageView.setImageResource(R.drawable.icon);\t\t\t\t\t\tList<Page> pages = new ArrayList<Page>();\t\t\tPage page1 = new Page();\t        ArrayList<Item> items = new ArrayList<Item>();\t        items.add(new Item(100, \"Item 100\", R.drawable.ic_launcher));\t        page1.setItems(items);\t        pages.add(page1);\t        \t                   linearLayout.addView(imageView, layoutParams); \t        if (true) {\t            synchronized  (gridview) {\t                  gridview.invalidate();\t             }\t         }\t\t\t//mAdapter.notifyDataSetChanged();\t\t\t// Call onRefreshComplete when the list has been refreshed.\t\t\tmPullRefreshScrollView.onRefreshComplete();\t\t\tsuper.onPostExecute(result);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExampleActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isDebugEnabled() {        return debug;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/config/Configs.java", "stars": "3", "class": {"name": "Configs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorsCoreSize", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getExecutorsCoreSize() {        return executorsCoreSize;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/config/Configs.java", "stars": "3", "class": {"name": "Configs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExtensionType", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ExtensionType", "snippet": "    public static ExtensionType getExtensionType() {        return extensionType;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/config/Configs.java", "stars": "3", "class": {"name": "Configs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLoadBalanceType", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "LoadBalanceType", "snippet": "    public static LoadBalanceType getLoadBalanceType() {        return loadBalanceType;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/config/Configs.java", "stars": "3", "class": {"name": "Configs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["QueueElement"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(QueueElement queueElement) {        queueElement.setPollTime(null);        if(queueElement.getQid() != null &&                queueElement.getStatus() == 0){            queueElement.setQid(info.getId());            //Means to update queue element            return dao.update(queueElement) > 0;        }        queueElement.setQid(info.getId());        //Means to enqueue        return dao.insert(queueElement) > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean remove(Object o) {        //Remove actually        if(o instanceof QueueElement){            QueueElement element = (QueueElement)o;            return dao.delete(Collections.singletonList(element.getId())) > 0;        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        //Ignore    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cleanCache(){        rw.writeLock().lock();        try {            cache.clear();            pos.set(0);        }finally{            rw.writeLock().unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "offer", "params": ["QueueElement"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean offer(QueueElement queueElement) {        return add(queueElement);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "QueueElement", "snippet": "    public QueueElement remove() {        return pollFromCache();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "poll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "QueueElement", "snippet": "    public QueueElement poll() {        return pollFromCache();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "element", "params": [], "throws": null, "modifiers": ["public"], "return_type": "QueueElement", "snippet": "    public QueueElement element() {        return peekFromCache();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "peek", "params": [], "throws": null, "modifiers": ["public"], "return_type": "QueueElement", "snippet": "    public QueueElement peek() {        return peekFromCache();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "QueueInfo", "snippet": "    public QueueInfo getInfo(){        return info;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "pollFromCache", "params": [], "throws": null, "modifiers": ["private"], "return_type": "QueueElement", "snippet": "    private QueueElement pollFromCache(){        rw.writeLock().lock();        try {            if (this.pos.get() == this.cache.size()) {                flushCache();                if (cache.isEmpty()) {                    return null;                }            }            //Delete mark, actually change the element's status            QueueElement element = cache.get(this.pos.get());            if (element != null) {                element.setStatus(1);                element.setPollTime(Calendar.getInstance().getTime());                if(dao.update(element) <= 0){                    //have been poll                    element = new QueueElement();                    element.setId(null);                }else{                    element.setVersion(element.getVersion() + 1);                }            }            this.pos.incrementAndGet();            return element;        }finally{            rw.writeLock().unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "peekFromCache", "params": [], "throws": null, "modifiers": ["private"], "return_type": "QueueElement", "snippet": "    private QueueElement peekFromCache(){        rw.readLock().lock();        try {            if (this.pos.get() == this.cache.size()) {                flushCache();                if (cache.isEmpty()) {                    return null;                }            }            return cache.get(this.pos.get());        }finally{            rw.readLock().unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "flushCache", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void flushCache(){        if(this.pos.get() == this.cache.size()) {            ElementQuery query = new ElementQuery();            query.setQid(info.getId());            query.setStatus(0);            query.setUseDelay(1);            List<QueueElement> list = dao.findPage(query, new RowBounds(0, cacheSize));            if (!list.isEmpty()) {                cache = list;            } else {                cache = new ArrayList<>();            }            pos.set(0);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/CacheDbQueue.java", "stars": "23", "class": {"name": "CacheDbQueue", "extends": "AbstractAdapterQueue", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "\tpublic Long getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(Long id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNome", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getNome() {\t\treturn nome;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNome", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setNome(String nome) {\t\tthis.nome = nome;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getEmail() {\t\treturn email;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setEmail(String email) {\t\tthis.email = email;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTipo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TipoPessoa", "snippet": "\tpublic TipoPessoa getTipo() {\t\treturn tipo;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTipo", "params": ["TipoPessoa"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTipo(TipoPessoa tipo) {\t\tthis.tipo = tipo;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnderecos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Endereco>", "snippet": "\tpublic List<Endereco> getEnderecos() {\t\treturn enderecos;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnderecos", "params": ["List<Endereco>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setEnderecos(List<Endereco> enderecos) {\t\tthis.enderecos = enderecos;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDocumento", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDocumento() {\t\treturn documento;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDocumento", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDocumento(String documento) {\t\tthis.documento = documento;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int hashCode() {\t\tfinal int prime = 31;\t\tint result = 1;\t\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean equals(Object obj) {\t\tif (this == obj)\t\t\treturn true;\t\tif (obj == null)\t\t\treturn false;\t\tif (getClass() != obj.getClass())\t\t\treturn false;\t\tCliente other = (Cliente) obj;\t\tif (id == null) {\t\t\tif (other.id != null)\t\t\t\treturn false;\t\t} else if (!id.equals(other.id))\t\t\treturn false;\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\t\t\tStringBuilder builder = new StringBuilder();\t\t\t\tbuilder.append(\", tipo=\");\t\tbuilder.append(tipo.getLabel());\t\t\t\treturn builder.toString();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Cliente.java", "stars": "1", "class": {"name": "Cliente", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTax", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getTax() {\t\treturn income * 0.2;\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part2/src/com/opp/polymorphic/RoyaltyIncome.java", "stars": "2", "class": {"name": "RoyaltyIncome", "extends": "Income", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Timer", "snippet": "    public Timer getTimer() {        return mView.getTimer();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerDrawer.java", "stars": "74", "class": {"name": "TimerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "surfaceChanged", "params": ["SurfaceHolder", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {        // Measure and layout the view with the canvas dimensions.        int measuredWidth = View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY);        int measuredHeight = View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY);        mView.measure(measuredWidth, measuredHeight);        mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());        draw();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerDrawer.java", "stars": "74", "class": {"name": "TimerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "surfaceCreated", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceCreated(SurfaceHolder holder) {        mHolder = holder;        draw();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerDrawer.java", "stars": "74", "class": {"name": "TimerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "surfaceDestroyed", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceDestroyed(SurfaceHolder holder) {        mHolder = null;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerDrawer.java", "stars": "74", "class": {"name": "TimerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "draw", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void draw() {        Canvas canvas;        try {            canvas = mHolder.lockCanvas();        } catch (Exception e) {            return;        }        if (canvas != null) {            mView.draw(canvas);            mHolder.unlockCanvasAndPost(canvas);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerDrawer.java", "stars": "74", "class": {"name": "TimerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "gsonString", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String gsonString(Object object) {        String gsonString = null;        if (gson != null) {            gsonString = gson.toJson(object);        }        return gsonString;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "GsonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gsonToBean", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T gsonToBean(String gsonString, Class<T> cls) {        T t = null;        if (gson != null) {            t = gson.fromJson(gsonString, cls);        }        return t;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "GsonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gsonToList", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<T>", "snippet": "    public static <T> List<T> gsonToList(String gsonString, Class<T> cls) {        List<T> list = null;        if (gson != null) {            list = gson.fromJson(gsonString, new TypeToken<List<T>>() {            }.getType());        }        return list;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "GsonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gsonToListMaps", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Map>", "snippet": "    public static <T> List<Map<String, T>> gsonToListMaps(String gsonString) {        List<Map<String, T>> list = null;        if (gson != null) {            list = gson.fromJson(gsonString,                    new TypeToken<List<Map<String, T>>>() {                    }.getType());        }        return list;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "GsonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gsonToMaps", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,T>", "snippet": "    public static <T> Map<String, T> gsonToMaps(String gsonString) {        Map<String, T> map = null;        if (gson != null) {            map = gson.fromJson(gsonString, new TypeToken<Map<String, T>>() {            }.getType());        }        return map;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "GsonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "picker", "params": ["JsonObject"], "throws": null, "modifiers": ["public", "static"], "return_type": "Picker", "snippet": "    public static Picker picker(JsonObject src) {        return new Picker(src);    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "GsonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "separator", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Picker", "snippet": "        public Picker separator(String sep) {            this.sep = sep;            return this;        }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "Picker", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prefix", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Picker", "snippet": "        public Picker prefix(String prefix) {            this.prefix = prefix;            return this;        }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "Picker", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "ignoreFullLevelName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Picker", "snippet": "        public Picker ignoreFullLevelName() {            this.levelNameKeepType = -1;            return this;        }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "Picker", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "selectAs", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Picker", "snippet": "        public Picker selectAs(String key, String rename) {            translator.put(key, rename);            return this;        }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "Picker", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "selectAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Picker", "snippet": "        public Picker selectAll() {            src.entrySet().forEach(entry -> translator.put(entry.getKey(), entry.getKey()));            return this;        }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "Picker", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "select", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Picker", "snippet": "        public Picker select(String keyFirst, String... keys) {            translator.put(keyFirst, keyFirst);            for (String key : keys) {                translator.put(key, key);            }            return this;        }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/GsonUtil.java", "stars": "13", "class": {"name": "Picker", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["WxMpXmlMessage", "Map<String,Object>", "WxMpService", "WxSessionManager"], "throws": null, "modifiers": ["public"], "return_type": "WxMpXmlOutMessage", "snippet": "  public WxMpXmlOutMessage handle(WxMpXmlMessage wxMessage,                                  Map<String, Object> context, WxMpService weixinService,                                  WxSessionManager sessionManager) {    String msg = String.format(\"type:%s, event:%s, key:%s\",        wxMessage.getMsgType(), wxMessage.getEvent(),        wxMessage.getEventKey());    if (MenuButtonType.VIEW.equals(wxMessage.getEvent())) {      return null;    }    return WxMpXmlOutMessage.TEXT().content(msg)        .fromUser(wxMessage.getToUser()).toUser(wxMessage.getFromUser())        .build();  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/handler/MenuHandler.java", "stars": "2", "class": {"name": "MenuHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["Media"], "throws": null, "modifiers": ["public", "static"], "return_type": "Fragment", "snippet": "\tpublic static Fragment newInstance(Media media) {\t\tTVMovieDetailsFragment fragment = new TVMovieDetailsFragment();\t\tBundle bundle = new Bundle();\t\tbundle.putParcelable(EXTRA_ITEM, media);\t\tfragment.setArguments(bundle);\t\treturn fragment;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "TVMovieDetailsFragment", "extends": "TVBaseDetailsFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public"]}}, {"method_name": "getMovieItem", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Movie", "snippet": "\tprivate Movie getMovieItem() {\t\treturn (Movie) getMediaItem();\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "TVMovieDetailsFragment", "extends": "TVBaseDetailsFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tTVButterApplication.getAppContext()\t\t\t\t.getComponent()\t\t\t\t.inject(this);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "TVMovieDetailsFragment", "extends": "TVBaseDetailsFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public"]}}, {"method_name": "loadDetails", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid loadDetails() {\t\tArrayList<Media> mediaList = new ArrayList<>();\t\tmediaList.add(getMovieItem());\t\tproviderManager.getCurrentMediaProvider().getDetail(mediaList, 0, this);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "TVMovieDetailsFragment", "extends": "TVBaseDetailsFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public"]}}, {"method_name": "getDetailPresenter", "params": [], "throws": null, "modifiers": [], "return_type": "AbstractDetailsDescriptionPresenter", "snippet": "\tAbstractDetailsDescriptionPresenter getDetailPresenter() {\t\treturn new MovieDetailsDescriptionPresenter();\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "TVMovieDetailsFragment", "extends": "TVBaseDetailsFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public"]}}, {"method_name": "onDetailLoaded", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid onDetailLoaded() {\t\taddActions(getMovieItem());\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "TVMovieDetailsFragment", "extends": "TVBaseDetailsFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public"]}}, {"method_name": "addActions", "params": ["Media"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addActions(Media item) {\t\tif (item instanceof Movie) {\t\t\tMovie movie = (Movie) item;\t\t\tList<String> qualities = new ArrayList<>(movie.torrents.get(\"en\").keySet());\t\t\tif (movie.trailer != null) {\t\t\t\taddAction(new TrailerAction(qualities.size() + 1, getResources().getString(R.string.watch),\t\t\t\t\t\tgetResources().getString(R.string.trailer)));\t\t\t}\t\t\tfor (String quality : qualities) {\t\t\t\tMedia.Torrent torrent = movie.torrents.get(\"en\").get(quality);\t\t\t\t//add action\t\t\t\taddAction(new WatchAction((long) qualities.indexOf(quality), getResources().getString(\t\t\t\t\t\tR.string.watch), quality, torrent));\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "TVMovieDetailsFragment", "extends": "TVBaseDetailsFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public"]}}, {"method_name": "createPresenters", "params": ["ClassPresenterSelector"], "throws": null, "modifiers": [], "return_type": "ClassPresenterSelector", "snippet": "\tClassPresenterSelector createPresenters(ClassPresenterSelector selector) {\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "TVMovieDetailsFragment", "extends": "TVBaseDetailsFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public"]}}, {"method_name": "onActionClicked", "params": ["Action"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onActionClicked(Action a) {        if(a instanceof WatchAction) {            // check for network            if (!NetworkUtils.isNetworkConnected(getActivity())) {                Toast.makeText(getActivity(), R.string.network_message, Toast.LENGTH_SHORT).show();            } else {                WatchAction action = (WatchAction) a;                Media.Torrent torrent = action.getTorrent();                String subtitleLanguage = PrefUtils.get(getActivity(), Prefs.SUBTITLE_DEFAULT, SubsProvider.SUBTITLE_LANGUAGE_NONE);                StreamInfo info = new StreamInfo(                        getMovieItem(),\t\t\t\t\t\ttorrent.getUrl(),\t\t\t\t\t\tsubtitleLanguage,                        action.getLabel2().toString());                TVStreamLoadingActivity.startActivity(getActivity(), info);            }        } else if(a instanceof TrailerAction) {            Movie movie = getMovieItem();\t\t\tif (!youTubeManager.isYouTubeUrl(movie.trailer)) {\t\t\t\tTVVideoPlayerActivity.startActivity(getActivity(), new StreamInfo(movie, null, null, null, null, movie.trailer));            } else {\t\t\t\tIntent trailerIntent = new Intent(Intent.ACTION_VIEW);\t\t\t\ttrailerIntent.setData(Uri.parse(movie.trailer));\t\t\t\tstartActivity(trailerIntent);            }        }\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "TVMovieDetailsFragment", "extends": "TVBaseDetailsFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public"]}}, {"method_name": "getTorrent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Media", "snippet": "\t\tpublic Media.Torrent getTorrent() {\t\t\treturn mTorrent;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "WatchAction", "extends": "androidx", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTorrent", "params": ["Media"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setTorrent(Media.Torrent torrent) {\t\t\tmTorrent = torrent;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMovieDetailsFragment.java", "stars": "4", "class": {"name": "WatchAction", "extends": "androidx", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new BlockCustomFlower());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PaeoniaBlock.java", "stars": "2", "class": {"name": "PaeoniaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PaeoniaBlock.java", "stars": "2", "class": {"name": "PaeoniaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tFlowersFeature feature = new DefaultFlowersFeature(BlockClusterFeatureConfig::func_227300_a_) {\t\t\t@Override\t\t\tpublic BlockState getFlowerToPlace(Random random, BlockPos bp, BlockClusterFeatureConfig fc) {\t\t\t\treturn block.getDefaultState();\t\t\t}\t\t\t@Override\t\t\tpublic boolean place(IWorld world, ChunkGenerator generator, Random random, BlockPos pos, BlockClusterFeatureConfig config) {\t\t\t\tDimensionType dimensionType = world.getDimension().getType();\t\t\t\tboolean dimensionCriteria = false;\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\tdimensionCriteria = true;\t\t\t\tif (!dimensionCriteria)\t\t\t\t\treturn false;\t\t\t\treturn super.place(world, generator, random, pos, config);\t\t\t}\t\t};\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tboolean biomeCriteria = false;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"forest\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (!biomeCriteria)\t\t\t\tcontinue;\t\t\tbiome.addFeature(GenerationStage.Decoration.VEGETAL_DECORATION,\t\t\t\t\tfeature.withConfiguration(\t\t\t\t\t\t\t(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(block.getDefaultState()), new SimpleBlockPlacer()))\t\t\t\t\t\t\t\t\t.tries(64).build())\t\t\t\t\t\t\t.withPlacement(Placement.COUNT_HEIGHTMAP_32.configure(new FrequencyConfig(1))));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PaeoniaBlock.java", "stars": "2", "class": {"name": "PaeoniaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(PaeoniaBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PaeoniaBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PaeoniaBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlantType", "params": ["IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "PlantType", "snippet": "\t\tpublic PlantType getPlantType(IBlockReader world, BlockPos pos) {\t\t\treturn PlantType.Plains;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PaeoniaBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "start", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Activity act) {        Intent starter = new Intent(act, DataSetChangedActivity.class);        act.startActivity(starter);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "DataSetChangedActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_data_set_changed);        buildTestData();        mViewPager = findViewById(R.id.vp);//        mAdapter = new Adapter();        mAdapter = new GraceAdapter(mData);        mViewPager.setAdapter(mAdapter);        mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                Log.d(TAG, \"onPageSelected() called with: position = [\" + position + \"]\");            }            @Override            public void onPageScrollStateChanged(int state) {            }        });        findViewById(R.id.reset_btn).setOnClickListener(this);        findViewById(R.id.swap_btn).setOnClickListener(this);        findViewById(R.id.add_btn).setOnClickListener(this);        findViewById(R.id.add_pre_btn).setOnClickListener(this);        findViewById(R.id.delete_btn).setOnClickListener(this);        findViewById(R.id.delete_pre_btn).setOnClickListener(this);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "DataSetChangedActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "buildTestData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void buildTestData() {        mData.clear();        for (int i = 0; i < 10; i++) {            mData.add(\"item:\" + i);        }    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "DataSetChangedActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        int curIndex = mViewPager.getCurrentItem();        int preItemIndex = curIndex > 0 ? curIndex - 1 : curIndex;        switch (v.getId()) {            case R.id.reset_btn:                buildTestData();                break;            case R.id.swap_btn:                // \u4ea4\u6362\u5f53\u524d\u5de6\u53f3\u4e24\u4e2aitem                int preIndex = curIndex - 1;                int nextIndex = curIndex + 1;                String pre = preIndex < 0 ? null : mData.get(preIndex);                String next = nextIndex >= mData.size() ? null : mData.get(nextIndex);                if (pre == null) {                    mData.remove(nextIndex);                    mData.add(0, next);                } else if (next == null) {                    mData.remove(preIndex);                    mData.add(pre);                } else {                    mData.remove(preIndex);                    mData.add(preIndex, next);                    mData.remove(nextIndex);                    mData.add(nextIndex, pre);                }                break;            case R.id.add_btn:                mData.add(curIndex, \"item:\" + mData.size());                break;            case R.id.add_pre_btn:                mData.add(preItemIndex, \"item:\" + mData.size());                break;            case R.id.delete_btn:                if (curIndex < mData.size()) {                    mData.remove(curIndex);                }            case R.id.delete_pre_btn:                mData.remove(preItemIndex);                break;        }        mAdapter.notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "DataSetChangedActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getCount() {            return mData.size();        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "isViewFromObject", "params": ["View", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {            ViewHolder viewHolder = (ViewHolder) object;            return viewHolder.mItemView == view;        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "instantiateItem", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object instantiateItem(@NonNull ViewGroup container, int position) {            String item = mData.get(position);            Log.d(TAG, \"instantiateItem() called with: position = [\" + position + \"],item=\" + item);            View itemView = getLayoutInflater().inflate(R.layout.page_item, container, false);            container.addView(itemView);            bindData(item, itemView);            return new ViewHolder<>(itemView, item, position);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "bindData", "params": ["String", "View"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void bindData(String item, View itemView) {            TextView tv = itemView.findViewById(R.id.tv);            tv.setText(item);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "destroyItem", "params": ["ViewGroup", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {            ViewHolder viewHolder = (ViewHolder) object;            container.removeView(viewHolder.mItemView);            Log.d(TAG, \"destroyItem() called with: position = [\" + position + \"],item=\" + viewHolder.mItem);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItemPosition", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getItemPosition(@NonNull Object object) {            ViewHolder<String> viewHolder = (ViewHolder<String>) object;            String item = viewHolder.mItem;            // \u5f53\u524d\u5185\u5b58\u4e2d\u9875\u9762\u6570\u636e\u662f\u5426\u8fd8\u5b58\u5728\u4e8e\u5237\u65b0\u540e\u7684\u6570\u636e\u96c6\u5408\u4e2d            int newIndex = mData.indexOf(item);            int itemPosition = newIndex == -1 ? POSITION_NONE : newIndex;            Log.d(TAG, \"getItemPosition: item=\" + item + \",itemPosition=\" + itemPosition);            int oldPosition = viewHolder.mPosition;            // \u6570\u636e\u7d22\u5f15\u53d1\u751f\u6539\u53d8            if (itemPosition >= 0) {                if (oldPosition != itemPosition) {                    Log.d(TAG, \"getItemPosition: item=\" + item + \" position changed:\"                            + oldPosition + \"->\" + itemPosition);                    // \u66f4\u65b0\u65b0\u7684\u7d22\u5f15\u4f4d\u7f6e                    viewHolder.mPosition = itemPosition;                }                // \u91cd\u65b0\u7ed1\u5b9a\u6570\u636e\u4ee5\u4fbf\u4e8e\u5237\u65b0\u89c6\u56fe\u5185\u5bb9                bindData(item, viewHolder.mItemView);            }            return itemPosition;        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "instantiateItemView", "params": ["ViewGroup", "String", "int"], "throws": null, "modifiers": ["protected"], "return_type": "View", "snippet": "        protected View instantiateItemView(@NonNull ViewGroup container, String item, int position) {            return getLayoutInflater().inflate(R.layout.page_item, container, false);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "GraceAdapter", "extends": "GracePagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "bindItemView", "params": ["View", "String", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void bindItemView(@NonNull View itemView, String item, int position, boolean first) {            TextView tv = itemView.findViewById(R.id.tv);            tv.setText(item);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/DataSetChangedActivity.java", "stars": "331", "class": {"name": "GraceAdapter", "extends": "GracePagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "insertTable3_2", "params": ["Name"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String insertTable3_2(Name name) {    return \"insert into table3 (id, name) values(#{nameId}, #{name})\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/selectkey/SqlProvider.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getMessage() {\t\treturn \"--- Erreur de typage \" + super.getMessage() + \" \" + line + \"(\" + column + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TypeException.java", "stars": "3", "class": {"name": "TypeException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["AlertDialogListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(AlertDialogListener listener) {        this.listener = listener;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/AlertDialogCustom.java", "stars": "2", "class": {"name": "AlertDialogCustom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitleandContent", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitleandContent(String title, String content, String btns) {        this.title = title;        this.content = content;        this.btns = btns;        updateUi();    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/AlertDialogCustom.java", "stars": "2", "class": {"name": "AlertDialogCustom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateUi", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateUi(){        txt_title.setText(title);        alert_content_text.setText(content);        yesTextBtn.setText(btns);    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/AlertDialogCustom.java", "stars": "2", "class": {"name": "AlertDialogCustom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void show() {        dialogSpass.show();    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/AlertDialogCustom.java", "stars": "2", "class": {"name": "AlertDialogCustom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dismiss", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void dismiss() {        dialogSpass.dismiss();    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/AlertDialogCustom.java", "stars": "2", "class": {"name": "AlertDialogCustom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isShowing", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "    public final boolean isShowing() {        return dialogSpass.isShowing();    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/AlertDialogCustom.java", "stars": "2", "class": {"name": "AlertDialogCustom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initViews", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initViews() {        txt_title = (TextView) dialogSpass.findViewById(R.id.txt_title);        yesTextBtn = (TextView) dialogSpass.findViewById(R.id.yesTextBtn);        alert_content_text = (TextView) dialogSpass.findViewById(R.id.alert_content_text);    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/AlertDialogCustom.java", "stars": "2", "class": {"name": "AlertDialogCustom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": ["ResponseEvent", "SipLayer", "SipConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void process(ResponseEvent evt, SipLayer layer, SipConfig config) {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/response/impl/CancelResponseProcessor.java", "stars": "29", "class": {"name": "CancelResponseProcessor", "extends": null, "implements": ["ISIPResponseProcessor"], "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid setup() {\t\tAnsiOutput.setEnabled(AnsiOutput.Enabled.ALWAYS);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "cleanup", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid cleanup() {\t\tAnsiOutput.setEnabled(Enabled.DETECT);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerShouldResetForegroundAndBackground", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerShouldResetForegroundAndBackground() {\t\tString banner = printBanner(\"black-and-white.gif\");\t\tString expected = AnsiOutput.encode(AnsiColor.DEFAULT) + AnsiOutput.encode(AnsiBackground.DEFAULT);\t\tassertThat(banner).startsWith(expected);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerWhenInvertedShouldResetForegroundAndBackground", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerWhenInvertedShouldResetForegroundAndBackground() {\t\tString banner = printBanner(\"black-and-white.gif\", INVERT_TRUE);\t\tString expected = AnsiOutput.encode(AnsiColor.DEFAULT) + AnsiOutput.encode(AnsiBackground.BLACK);\t\tassertThat(banner).startsWith(expected);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerShouldPrintWhiteAsBrightWhiteHighLuminance", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerShouldPrintWhiteAsBrightWhiteHighLuminance() {\t\tString banner = printBanner(\"black-and-white.gif\");\t\tString expected = AnsiOutput.encode(AnsiColor.BRIGHT_WHITE) + HIGH_LUMINANCE_CHARACTER;\t\tassertThat(banner).contains(expected);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerWhenInvertedShouldPrintWhiteAsBrightWhiteLowLuminance", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerWhenInvertedShouldPrintWhiteAsBrightWhiteLowLuminance() {\t\tString banner = printBanner(\"black-and-white.gif\", INVERT_TRUE);\t\tString expected = AnsiOutput.encode(AnsiColor.BRIGHT_WHITE) + LOW_LUMINANCE_CHARACTER;\t\tassertThat(banner).contains(expected);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerShouldPrintBlackAsBlackLowLuminance", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerShouldPrintBlackAsBlackLowLuminance() {\t\tString banner = printBanner(\"black-and-white.gif\");\t\tString expected = AnsiOutput.encode(AnsiColor.BLACK) + LOW_LUMINANCE_CHARACTER;\t\tassertThat(banner).contains(expected);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerWhenInvertedShouldPrintBlackAsBlackHighLuminance", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerWhenInvertedShouldPrintBlackAsBlackHighLuminance() {\t\tString banner = printBanner(\"black-and-white.gif\", INVERT_TRUE);\t\tString expected = AnsiOutput.encode(AnsiColor.BLACK) + HIGH_LUMINANCE_CHARACTER;\t\tassertThat(banner).contains(expected);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerWhenShouldPrintAllColors", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerWhenShouldPrintAllColors() {\t\tString banner = printBanner(\"colors.gif\");\t\tfor (AnsiColor color : AnsiColor.values()) {\t\t\tif (color != AnsiColor.DEFAULT) {\t\t\t\tassertThat(banner).contains(AnsiOutput.encode(color));\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerShouldRenderGradient", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerShouldRenderGradient() {\t\tAnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER);\t\tString banner = printBanner(\"gradient.gif\", \"spring.banner.image.width=10\", \"spring.banner.image.margin=0\");\t\tassertThat(banner).contains(\"@#8&o:*.  \");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerShouldCalculateHeight", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerShouldCalculateHeight() {\t\tString banner = printBanner(\"large.gif\", \"spring.banner.image.width=20\");\t\tassertThat(getBannerHeight(banner)).isEqualTo(10);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerWhenHasHeightPropertyShouldSetHeight", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerWhenHasHeightPropertyShouldSetHeight() {\t\tString banner = printBanner(\"large.gif\", \"spring.banner.image.width=20\", \"spring.banner.image.height=30\");\t\tassertThat(getBannerHeight(banner)).isEqualTo(30);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerShouldCapWidthAndCalculateHeight", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerShouldCapWidthAndCalculateHeight() {\t\tAnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER);\t\tString banner = printBanner(\"large.gif\", \"spring.banner.image.margin=0\");\t\tassertThat(getBannerWidth(banner)).isEqualTo(76);\t\tassertThat(getBannerHeight(banner)).isEqualTo(37);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerShouldPrintMargin", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerShouldPrintMargin() {\t\tAnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER);\t\tString banner = printBanner(\"large.gif\");\t\tString[] lines = banner.split(System.lineSeparator());\t\tfor (int i = 2; i < lines.length - 1; i++) {\t\t\tassertThat(lines[i]).startsWith(\"  @\");\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerWhenHasMarginPropertyShouldPrintSizedMargin", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerWhenHasMarginPropertyShouldPrintSizedMargin() {\t\tAnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER);\t\tString banner = printBanner(\"large.gif\", \"spring.banner.image.margin=4\");\t\tString[] lines = banner.split(System.lineSeparator());\t\tfor (int i = 2; i < lines.length - 1; i++) {\t\t\tassertThat(lines[i]).startsWith(\"    @\");\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerWhenAnimatesShouldPrintAllFrames", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerWhenAnimatesShouldPrintAllFrames() {\t\tAnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER);\t\tString banner = printBanner(\"animated.gif\");\t\tString[] lines = banner.split(System.lineSeparator());\t\tint frames = 138;\t\tint linesPerFrame = 36;\t\tassertThat(banner).contains(\"\\r\");\t\tassertThat(lines).hasSize(frames * linesPerFrame - 1);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerWhenBitDepthIs8ShouldUseColors", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerWhenBitDepthIs8ShouldUseColors() {\t\tString banner = printBanner(\"colors.gif\", \"spring.banner.image.bitdepth=8\");\t\tassertThat(banner).contains(AnsiOutput.encode(Ansi8BitColor.foreground(124)));\t\tassertThat(banner).contains(AnsiOutput.encode(Ansi8BitColor.foreground(130)));\t\tassertThat(banner).contains(AnsiOutput.encode(Ansi8BitColor.foreground(19)));\t\tassertThat(banner).contains(AnsiOutput.encode(Ansi8BitColor.foreground(127)));\t\tassertThat(banner).contains(AnsiOutput.encode(Ansi8BitColor.foreground(37)));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBannerWhenPixelModeIsBlockShouldRenderBlocks", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid printBannerWhenPixelModeIsBlockShouldRenderBlocks() {\t\tAnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER);\t\tString banner = printBanner(\"gradient.gif\", \"spring.banner.image.width=6\", \"spring.banner.image.margin=0\",\t\t\t\t\"spring.banner.image.pixelmode=block\");\t\tassertThat(banner).inHexadecimal().contains(\"\\u2588\\u2593\\u2592\\u2591 \");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getBannerHeight", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int getBannerHeight(String banner) {\t\treturn banner.split(System.lineSeparator()).length - 3;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getBannerWidth", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int getBannerWidth(String banner) {\t\tint width = 0;\t\tfor (String line : banner.split(System.lineSeparator())) {\t\t\twidth = Math.max(width, line.length());\t\t}\t\treturn width;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "printBanner", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String printBanner(String path, String... properties) {\t\tImageBanner banner = new ImageBanner(new ClassPathResource(path, getClass()));\t\tConfigurableEnvironment environment = new MockEnvironment();\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(environment, properties);\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\t\ttry {\t\t\tbanner.printBanner(environment, getClass(), new PrintStream(out, false, \"UTF-8\"));\t\t\treturn out.toString(\"UTF-8\");\t\t}\t\tcatch (UnsupportedEncodingException ex) {\t\t\tthrow new IllegalStateException(ex);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java", "stars": "47572", "class": {"name": "ImageBannerTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "sendActivity", "params": ["ActivityDTO", "StompHeaderAccessor", "Principal"], "throws": null, "modifiers": ["public"], "return_type": "ActivityDTO", "snippet": "    public ActivityDTO sendActivity(@Payload ActivityDTO activityDTO, StompHeaderAccessor stompHeaderAccessor, Principal principal) {        activityDTO.setUserLogin(principal.getName());        activityDTO.setSessionId(stompHeaderAccessor.getSessionId());        activityDTO.setIpAddress(Objects.requireNonNull(stompHeaderAccessor.getSessionAttributes()).get(IP_ADDRESS).toString());        activityDTO.setTime(Instant.now());        log.debug(\"Sending user tracking data {}\", activityDTO);        return activityDTO;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/ActivityService.java", "stars": "2", "class": {"name": "ActivityService", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "onApplicationEvent", "params": ["SessionDisconnectEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onApplicationEvent(SessionDisconnectEvent event) {        ActivityDTO activityDTO = new ActivityDTO();        activityDTO.setSessionId(event.getSessionId());        activityDTO.setPage(\"logout\");        messagingTemplate.convertAndSend(\"/topic/tracker\", activityDTO);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/ActivityService.java", "stars": "2", "class": {"name": "ActivityService", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "act", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void act()     {        // Add your action code here.    }", "url": "https://raw.githubusercontent.com/jesus-antulio/Tankzors-Fangame/master/Pared_h.java", "stars": "1", "class": {"name": "Pared_h", "extends": "Actor", "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T load() {        if (plugin == null) {            Bukkit.getLogger().log(Level.SEVERE, \"[SmartConfiguration] Please register SmartConfiguration\");            return null;        }        File file = new File(plugin.getDataFolder(), name);        plugin.getLogger().log(Level.INFO, \"[SmartConfiguration] \" + name + \" is loading ...\");        if (!file.exists()) {            try {                T config = configClass.newInstance();                try {                    plugin.getDataFolder().mkdir();                    Files.write(file.toPath(), gson.toJson(config).getBytes(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);                    plugin.getLogger().log(Level.INFO, \"[SmartConfiguration] \" + name + \" was created.\");                } catch (IOException e) {                    e.printStackTrace();                }            } catch (InstantiationException e) {                e.printStackTrace();            } catch (IllegalAccessException e) {                e.printStackTrace();            }        }        try {            T json = gson.fromJson(new FileReader(file), configClass);            plugin.getLogger().log(Level.INFO, \"[SmartConfiguration] \" + name + \" was loaded correctly.\");            return json;        } catch (FileNotFoundException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/EliXorZz/SmartConfiguration/master/src/main/java/fr/elixorzz/smartconfiguration/SmartConfiguration.java", "stars": "2", "class": {"name": "SmartConfiguration", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "update", "params": ["T"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void update(T config) {        try {            File file = new File(plugin.getDataFolder(), name);            plugin.getDataFolder().mkdir();            Files.write(file.toPath(), gson.toJson(config).getBytes(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);        } catch (IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/EliXorZz/SmartConfiguration/master/src/main/java/fr/elixorzz/smartconfiguration/SmartConfiguration.java", "stars": "2", "class": {"name": "SmartConfiguration", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "register", "params": ["Plugin"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void register(Plugin p) {        plugin = p;    }", "url": "https://raw.githubusercontent.com/EliXorZz/SmartConfiguration/master/src/main/java/fr/elixorzz/smartconfiguration/SmartConfiguration.java", "stars": "2", "class": {"name": "SmartConfiguration", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(Context context) {        mContext = context;        setEGLContextClientVersion(2);        mRenderer = new GSYVideoGLViewSimpleRender();        measureHelper = new MeasureHelper(this, this);        mRenderer.setSurfaceView(GSYVideoGLView.this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        if (mRenderer != null) {            mRenderer.initRenderSize();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        if (mMode == MODE_RENDER_SIZE) {            super.onMeasure(widthMeasureSpec, heightMeasureSpec);            measureHelper.prepareMeasure(widthMeasureSpec, heightMeasureSpec, (int) getRotation());            initRenderMeasure();        } else {            measureHelper.prepareMeasure(widthMeasureSpec, heightMeasureSpec, (int) getRotation());            setMeasuredDimension(measureHelper.getMeasuredWidth(), measureHelper.getMeasuredHeight());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getIGSYSurfaceListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IGSYSurfaceListener", "snippet": "    public IGSYSurfaceListener getIGSYSurfaceListener() {        return mIGSYSurfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setIGSYSurfaceListener", "params": ["IGSYSurfaceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIGSYSurfaceListener(IGSYSurfaceListener surfaceListener) {        setOnGSYSurfaceListener(this);        mIGSYSurfaceListener = surfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onSurfaceAvailable", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceAvailable(Surface surface) {        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceAvailable(surface);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeH() {        return getHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeW() {        return getWidth();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCover", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCover() {        Debuger.printfLog(getClass().getSimpleName() + \" not support initCover now\");        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCoverHigh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCoverHigh() {        Debuger.printfLog(getClass().getSimpleName() + \" not support initCoverHigh now\");        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "taskShotPic", "params": ["GSYVideoShotListener", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void taskShotPic(GSYVideoShotListener gsyVideoShotListener, boolean shotHigh) {        if (gsyVideoShotListener != null) {            setGSYVideoShotListener(gsyVideoShotListener, shotHigh);            takeShotPic();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "saveFrame", "params": ["File", "boolean", "GSYVideoShotSaveListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveFrame(final File file, final boolean high, final GSYVideoShotSaveListener gsyVideoShotSaveListener) {        GSYVideoShotListener gsyVideoShotListener = new GSYVideoShotListener() {            @Override            public void getBitmap(Bitmap bitmap) {                if (bitmap == null) {                    gsyVideoShotSaveListener.result(false, file);                } else {                    FileUtils.saveBitmap(bitmap, file);                    gsyVideoShotSaveListener.result(true, file);                }            }        };        setGSYVideoShotListener(gsyVideoShotListener, high);        takeShotPic();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getRenderView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getRenderView() {        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderResume() {        requestLayout();        onResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderPause() {        requestLayout();        onPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "releaseRenderAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseRenderAll() {        requestLayout();        releaseAll();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderMode(int mode) {        setMode(mode);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderTransform", "params": ["Matrix"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderTransform(Matrix transform) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setRenderTransform now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLRenderer", "params": ["GSYVideoGLViewBaseRender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLRenderer(GSYVideoGLViewBaseRender renderer) {        setCustomRenderer(renderer);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLMVPMatrix", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLMVPMatrix(float[] MVPMatrix) {        setMVPMatrix(MVPMatrix);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLEffectFilter", "params": ["GSYVideoGLView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLEffectFilter(GSYVideoGLView.ShaderInterface effectFilter) {        setEffect(effectFilter);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setVideoParamsListener", "params": ["MeasureHelper"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoParamsListener(MeasureHelper.MeasureFormVideoParamsListener listener) {        mVideoParamsListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoWidth() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoWidth();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoHeight() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoHeight();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarNum() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarNum();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarDen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarDen() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarDen();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initRenderMeasure", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initRenderMeasure() {        if (mVideoParamsListener != null && mMode == MODE_RENDER_SIZE) {            try {                int videoWidth = mVideoParamsListener.getCurrentVideoWidth();                int videoHeight = mVideoParamsListener.getCurrentVideoHeight();                if (this.mRenderer != null) {                    this.mRenderer.setCurrentViewWidth(measureHelper.getMeasuredWidth());                    this.mRenderer.setCurrentViewHeight(measureHelper.getMeasuredHeight());                    this.mRenderer.setCurrentVideoWidth(videoWidth);                    this.mRenderer.setCurrentVideoHeight(videoHeight);                }            } catch (Exception e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initRender", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initRender() {        setRenderer(mRenderer);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGSYVideoGLRenderErrorListener", "params": ["GSYVideoGLRenderErrorListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGSYVideoGLRenderErrorListener(GSYVideoGLRenderErrorListener videoGLRenderErrorListener) {        this.mRenderer.setGSYVideoGLRenderErrorListener(videoGLRenderErrorListener);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setCustomRenderer", "params": ["GSYVideoGLViewBaseRender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCustomRenderer(GSYVideoGLViewBaseRender CustomRender) {        this.mRenderer = CustomRender;        mRenderer.setSurfaceView(GSYVideoGLView.this);        initRenderMeasure();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setOnGSYSurfaceListener", "params": ["GLSurfaceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnGSYSurfaceListener(GLSurfaceListener mGSYSurfaceListener) {        this.mOnGSYSurfaceListener = mGSYSurfaceListener;        mRenderer.setGSYSurfaceListener(this.mOnGSYSurfaceListener);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setEffect", "params": ["ShaderInterface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEffect(ShaderInterface shaderEffect) {        if (shaderEffect != null) {            mEffect = shaderEffect;            mRenderer.setEffect(mEffect);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setMVPMatrix", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMVPMatrix(float[] MVPMatrix) {        if (MVPMatrix != null) {            mMVPMatrix = MVPMatrix;            mRenderer.setMVPMatrix(MVPMatrix);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "takeShotPic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void takeShotPic() {        mRenderer.takeShotPic();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGSYVideoShotListener", "params": ["GSYVideoShotListener", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGSYVideoShotListener(GSYVideoShotListener listener, boolean high) {        this.mRenderer.setGSYVideoShotListener(listener, high);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getMode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMode() {        return mMode;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMode(int mode) {        this.mMode = mode;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "releaseAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseAll() {        if (mRenderer != null) {            mRenderer.releaseAll();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getRenderer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoGLViewBaseRender", "snippet": "    public GSYVideoGLViewBaseRender getRenderer() {        return mRenderer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getEffect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ShaderInterface", "snippet": "    public ShaderInterface getEffect() {        return mEffect;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getMVPMatrix", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float[] getMVPMatrix() {        return mMVPMatrix;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "addGLView", "params": ["Context", "ViewGroup", "int", "IGSYSurfaceListener", "MeasureHelper", "GSYVideoGLView", "float", "GSYVideoGLViewBaseRender", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "GSYVideoGLView", "snippet": "    public static GSYVideoGLView addGLView(final Context context, final ViewGroup textureViewContainer, final int rotate,                                           final IGSYSurfaceListener gsySurfaceListener,                                           final MeasureHelper.MeasureFormVideoParamsListener videoParamsListener,                                           final GSYVideoGLView.ShaderInterface effect, final float[] transform,                                           final GSYVideoGLViewBaseRender customRender, final int renderMode) {        if (textureViewContainer.getChildCount() > 0) {            textureViewContainer.removeAllViews();        }        final GSYVideoGLView gsyVideoGLView = new GSYVideoGLView(context);        if (customRender != null) {            gsyVideoGLView.setCustomRenderer(customRender);        }        gsyVideoGLView.setEffect(effect);        gsyVideoGLView.setVideoParamsListener(videoParamsListener);        gsyVideoGLView.setRenderMode(renderMode);        gsyVideoGLView.setIGSYSurfaceListener(gsySurfaceListener);        gsyVideoGLView.setRotation(rotate);        gsyVideoGLView.initRender();        gsyVideoGLView.setGSYVideoGLRenderErrorListener(new GSYVideoGLRenderErrorListener() {            @Override            public void onError(GSYVideoGLViewBaseRender render, String Error, int code, boolean byChangedRenderError) {                if (byChangedRenderError)                    addGLView(context,                            textureViewContainer,                            rotate,                            gsySurfaceListener,                            videoParamsListener,                            render.getEffect(),                            render.getMVPMatrix(),                            render, renderMode);            }        });        if (transform != null && transform.length == 16) {            gsyVideoGLView.setMVPMatrix(transform);        }        GSYRenderView.addToParent(textureViewContainer, gsyVideoGLView);        return gsyVideoGLView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYVideoGLView.java", "stars": "2", "class": {"name": "GSYVideoGLView", "extends": "GLSurfaceView", "implements": ["GLSurfaceListener", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "beforeTextChanged", "params": ["CharSequence", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void beforeTextChanged(CharSequence s, int start, int count, int after) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SmartTextView.java", "stars": "1", "class": {"name": "SmartTextView", "extends": "AppCompatTextView", "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onTextChanged", "params": ["CharSequence", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTextChanged(CharSequence s, int start, int before, int count) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SmartTextView.java", "stars": "1", "class": {"name": "SmartTextView", "extends": "AppCompatTextView", "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "afterTextChanged", "params": ["Editable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterTextChanged(Editable s) {        // \u5224\u65ad\u5f53\u524d\u6709\u6ca1\u6709\u8bbe\u7f6e\u6587\u672c\u8fbe\u5230\u81ea\u52a8\u9690\u85cf\u548c\u663e\u793a\u7684\u6548\u679c        if (\"\".equals(getText().toString())) {            if (getVisibility() != GONE) {                setVisibility(GONE);            }        } else {            if (getVisibility() != VISIBLE) {                setVisibility(VISIBLE);            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/SmartTextView.java", "stars": "1", "class": {"name": "SmartTextView", "extends": "AppCompatTextView", "implements": ["TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "invalidate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void invalidate ()\t{\t\tn_invalidate ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsTextView.java", "stars": "2", "class": {"name": "FormsTextView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_invalidate", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_invalidate ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsTextView.java", "stars": "2", "class": {"name": "FormsTextView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsTextView.java", "stars": "2", "class": {"name": "FormsTextView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsTextView.java", "stars": "2", "class": {"name": "FormsTextView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, 100, null);    verify(ps).setInt(1, 100);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/IntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "IntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getInt(\"column\")).thenReturn(100);    assertEquals(Integer.valueOf(100), TYPE_HANDLER.getResult(rs, \"column\"));    when(rs.getInt(\"column\")).thenReturn(0);    assertEquals(Integer.valueOf(0), TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/IntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "IntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getInt(\"column\")).thenReturn(0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/IntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "IntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getInt(1)).thenReturn(100);    assertEquals(Integer.valueOf(100), TYPE_HANDLER.getResult(rs, 1));    when(rs.getInt(1)).thenReturn(0);    assertEquals(Integer.valueOf(0), TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/IntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "IntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getInt(1)).thenReturn(0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/IntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "IntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getInt(1)).thenReturn(100);    assertEquals(Integer.valueOf(100), TYPE_HANDLER.getResult(cs, 1));    when(cs.getInt(1)).thenReturn(0);    assertEquals(Integer.valueOf(0), TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/IntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "IntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getInt(1)).thenReturn(0);    when(cs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/IntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "IntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "isSatisfiedBy", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSatisfiedBy(Date date) {        Calendar testDateCal = Calendar.getInstance(getTimeZone());        testDateCal.setTime(date);        testDateCal.set(Calendar.MILLISECOND, 0);        Date originalDate = testDateCal.getTime();                testDateCal.add(Calendar.SECOND, -1);                Date timeAfter = getTimeAfter(testDateCal.getTime());        return ((timeAfter != null) && (timeAfter.equals(originalDate)));    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getNextValidTimeAfter", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getNextValidTimeAfter(Date date) {        return getTimeAfter(date);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getNextInvalidTimeAfter", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getNextInvalidTimeAfter(Date date) {        long difference = 1000;                //move back to the nearest second so differences will be accurate        Calendar adjustCal = Calendar.getInstance(getTimeZone());        adjustCal.setTime(date);        adjustCal.set(Calendar.MILLISECOND, 0);        Date lastDate = adjustCal.getTime();                Date newDate;                //FUTURE_TODO: (QUARTZ-481) IMPROVE THIS! The following is a BAD solution to this problem. Performance will be very bad here, depending on the cron expression. It is, however A solution.                //keep getting the next included time until it's farther than one second        // apart. At that point, lastDate is the last valid fire time. We return        // the second immediately following it.        while (difference == 1000) {            newDate = getTimeAfter(lastDate);            if(newDate == null)                break;                        difference = newDate.getTime() - lastDate.getTime();                        if (difference == 1000) {                lastDate = newDate;            }        }                return new Date(lastDate.getTime() + 1000);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getTimeZone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TimeZone", "snippet": "    public TimeZone getTimeZone() {        if (timeZone == null) {            timeZone = TimeZone.getDefault();        }        return timeZone;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "setTimeZone", "params": ["TimeZone"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimeZone(TimeZone timeZone) {        this.timeZone = timeZone;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return cronExpression;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "isValidExpression", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isValidExpression(String cronExpression) {                try {            new CronExpression(cronExpression);        } catch (ParseException pe) {            return false;        }                return true;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "validateExpression", "params": ["String"], "throws": ["ParseException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateExpression(String cronExpression) throws ParseException {                new CronExpression(cronExpression);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "buildExpression", "params": ["String"], "throws": ["ParseException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void buildExpression(String expression) throws ParseException {        expressionParsed = true;        try {            if (seconds == null) {                seconds = new TreeSet<Integer>();            }            if (minutes == null) {                minutes = new TreeSet<Integer>();            }            if (hours == null) {                hours = new TreeSet<Integer>();            }            if (daysOfMonth == null) {                daysOfMonth = new TreeSet<Integer>();            }            if (months == null) {                months = new TreeSet<Integer>();            }            if (daysOfWeek == null) {                daysOfWeek = new TreeSet<Integer>();            }            if (years == null) {                years = new TreeSet<Integer>();            }            int exprOn = SECOND;            StringTokenizer exprsTok = new StringTokenizer(expression, \" \\t\",                    false);            while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {                String expr = exprsTok.nextToken().trim();                // throw an exception if L is used with other days of the month                if(exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {                    throw new ParseException(\"Support for specifying 'L' and 'LW' with other days of the month is not implemented\", -1);                }                // throw an exception if L is used with other days of the week                if(exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1  && expr.contains(\",\")) {                    throw new ParseException(\"Support for specifying 'L' with other days of the week is not implemented\", -1);                }                if(exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#', expr.indexOf('#') +1) != -1) {                    throw new ParseException(\"Support for specifying multiple \\\"nth\\\" days is not implemented.\", -1);                }                                StringTokenizer vTok = new StringTokenizer(expr, \",\");                while (vTok.hasMoreTokens()) {                    String v = vTok.nextToken();                    storeExpressionVals(0, v, exprOn);                }                exprOn++;            }            if (exprOn <= DAY_OF_WEEK) {                throw new ParseException(\"Unexpected end of expression.\",                            expression.length());            }            if (exprOn <= YEAR) {                storeExpressionVals(0, \"*\", YEAR);            }            TreeSet<Integer> dow = getSet(DAY_OF_WEEK);            TreeSet<Integer> dom = getSet(DAY_OF_MONTH);            // Copying the logic from the UnsupportedOperationException below            boolean dayOfMSpec = !dom.contains(NO_SPEC);            boolean dayOfWSpec = !dow.contains(NO_SPEC);            if (!dayOfMSpec || dayOfWSpec) {                if (!dayOfWSpec || dayOfMSpec) {                    throw new ParseException(                            \"Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.\", 0);                }            }        } catch (ParseException pe) {            throw pe;        } catch (Exception e) {            throw new ParseException(\"Illegal cron expression format (\"                    + e.toString() + \")\", 0);        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "storeExpressionVals", "params": ["int", "String", "int"], "throws": ["ParseException"], "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int storeExpressionVals(int pos, String s, int type)        throws ParseException {        int incr = 0;        int i = skipWhiteSpace(pos, s);        if (i >= s.length()) {            return i;        }        char c = s.charAt(i);        if ((c >= 'A') && (c <= 'Z') && (!s.equals(\"L\")) && (!s.equals(\"LW\")) && (!s.matches(\"^L-[0-9]*[W]?\"))) {            String sub = s.substring(i, i + 3);            int sval = -1;            int eval = -1;            if (type == MONTH) {                sval = getMonthNumber(sub) + 1;                if (sval <= 0) {                    throw new ParseException(\"Invalid Month value: '\" + sub + \"'\", i);                }                if (s.length() > i + 3) {                    c = s.charAt(i + 3);                    if (c == '-') {                        i += 4;                        sub = s.substring(i, i + 3);                        eval = getMonthNumber(sub) + 1;                        if (eval <= 0) {                            throw new ParseException(\"Invalid Month value: '\" + sub + \"'\", i);                        }                    }                }            } else if (type == DAY_OF_WEEK) {                sval = getDayOfWeekNumber(sub);                if (sval < 0) {                    throw new ParseException(\"Invalid Day-of-Week value: '\"                                + sub + \"'\", i);                }                if (s.length() > i + 3) {                    c = s.charAt(i + 3);                    if (c == '-') {                        i += 4;                        sub = s.substring(i, i + 3);                        eval = getDayOfWeekNumber(sub);                        if (eval < 0) {                            throw new ParseException(                                    \"Invalid Day-of-Week value: '\" + sub                                        + \"'\", i);                        }                    } else if (c == '#') {                        try {                            i += 4;                            nthdayOfWeek = Integer.parseInt(s.substring(i));                            if (nthdayOfWeek < 1 || nthdayOfWeek > 5) {                                throw new Exception();                            }                        } catch (Exception e) {                            throw new ParseException(                                    \"A numeric value between 1 and 5 must follow the '#' option\",                                    i);                        }                    } else if (c == 'L') {                        lastdayOfWeek = true;                        i++;                    }                }            } else {                throw new ParseException(                        \"Illegal characters for this position: '\" + sub + \"'\",                        i);            }            if (eval != -1) {                incr = 1;            }            addToSet(sval, eval, incr, type);            return (i + 3);        }        if (c == '?') {            i++;            if ((i + 1) < s.length()                     && (s.charAt(i) != ' ' && s.charAt(i + 1) != '\\t')) {                throw new ParseException(\"Illegal character after '?': \"                            + s.charAt(i), i);            }            if (type != DAY_OF_WEEK && type != DAY_OF_MONTH) {                throw new ParseException(                            \"'?' can only be specified for Day-of-Month or Day-of-Week.\",                            i);            }            if (type == DAY_OF_WEEK && !lastdayOfMonth) {                int val = daysOfMonth.last();                if (val == NO_SPEC_INT) {                    throw new ParseException(                                \"'?' can only be specified for Day-of-Month -OR- Day-of-Week.\",                                i);                }            }            addToSet(NO_SPEC_INT, -1, 0, type);            return i;        }        if (c == '*' || c == '/') {            if (c == '*' && (i + 1) >= s.length()) {                addToSet(ALL_SPEC_INT, -1, incr, type);                return i + 1;            } else if (c == '/'                    && ((i + 1) >= s.length() || s.charAt(i + 1) == ' ' || s                            .charAt(i + 1) == '\\t')) {                 throw new ParseException(\"'/' must be followed by an integer.\", i);            } else if (c == '*') {                i++;            }            c = s.charAt(i);            if (c == '/') { // is an increment specified?                i++;                if (i >= s.length()) {                    throw new ParseException(\"Unexpected end of string.\", i);                }                incr = getNumericValue(s, i);                i++;                if (incr > 10) {                    i++;                }                checkIncrementRange(incr, type, i);            } else {                incr = 1;            }            addToSet(ALL_SPEC_INT, -1, incr, type);            return i;        } else if (c == 'L') {            i++;            if (type == DAY_OF_MONTH) {                lastdayOfMonth = true;            }            if (type == DAY_OF_WEEK) {                addToSet(7, 7, 0, type);            }            if(type == DAY_OF_MONTH && s.length() > i) {                c = s.charAt(i);                if(c == '-') {                    ValueSet vs = getValue(0, s, i+1);                    lastdayOffset = vs.value;                    if(lastdayOffset > 30)                        throw new ParseException(\"Offset from last day must be <= 30\", i+1);                    i = vs.pos;                }                                        if(s.length() > i) {                    c = s.charAt(i);                    if(c == 'W') {                        nearestWeekday = true;                        i++;                    }                }            }            return i;        } else if (c >= '0' && c <= '9') {            int val = Integer.parseInt(String.valueOf(c));            i++;            if (i >= s.length()) {                addToSet(val, -1, -1, type);            } else {                c = s.charAt(i);                if (c >= '0' && c <= '9') {                    ValueSet vs = getValue(val, s, i);                    val = vs.value;                    i = vs.pos;                }                i = checkNext(i, s, val, type);                return i;            }        } else {            throw new ParseException(\"Unexpected character: \" + c, i);        }        return i;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "checkIncrementRange", "params": ["int", "int", "int"], "throws": ["ParseException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkIncrementRange(int incr, int type, int idxPos) throws ParseException {        if (incr > 59 && (type == SECOND || type == MINUTE)) {            throw new ParseException(\"Increment > 60 : \" + incr, idxPos);        } else if (incr > 23 && (type == HOUR)) {            throw new ParseException(\"Increment > 24 : \" + incr, idxPos);        } else if (incr > 31 && (type == DAY_OF_MONTH)) {            throw new ParseException(\"Increment > 31 : \" + incr, idxPos);        } else if (incr > 7 && (type == DAY_OF_WEEK)) {            throw new ParseException(\"Increment > 7 : \" + incr, idxPos);        } else if (incr > 12 && (type == MONTH)) {            throw new ParseException(\"Increment > 12 : \" + incr, idxPos);        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "checkNext", "params": ["int", "String", "int", "int"], "throws": ["ParseException"], "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int checkNext(int pos, String s, int val, int type)        throws ParseException {                int end = -1;        int i = pos;        if (i >= s.length()) {            addToSet(val, end, -1, type);            return i;        }        char c = s.charAt(pos);        if (c == 'L') {            if (type == DAY_OF_WEEK) {                if(val < 1 || val > 7)                    throw new ParseException(\"Day-of-Week values must be between 1 and 7\", -1);                lastdayOfWeek = true;            } else {                throw new ParseException(\"'L' option is not valid here. (pos=\" + i + \")\", i);            }            TreeSet<Integer> set = getSet(type);            set.add(val);            i++;            return i;        }                if (c == 'W') {            if (type == DAY_OF_MONTH) {                nearestWeekday = true;            } else {                throw new ParseException(\"'W' option is not valid here. (pos=\" + i + \")\", i);            }            if(val > 31)                throw new ParseException(\"The 'W' option does not make sense with values larger than 31 (max number of days in a month)\", i);             TreeSet<Integer> set = getSet(type);            set.add(val);            i++;            return i;        }        if (c == '#') {            if (type != DAY_OF_WEEK) {                throw new ParseException(\"'#' option is not valid here. (pos=\" + i + \")\", i);            }            i++;            try {                nthdayOfWeek = Integer.parseInt(s.substring(i));                if (nthdayOfWeek < 1 || nthdayOfWeek > 5) {                    throw new Exception();                }            } catch (Exception e) {                throw new ParseException(                        \"A numeric value between 1 and 5 must follow the '#' option\",                        i);            }            TreeSet<Integer> set = getSet(type);            set.add(val);            i++;            return i;        }        if (c == '-') {            i++;            c = s.charAt(i);            int v = Integer.parseInt(String.valueOf(c));            end = v;            i++;            if (i >= s.length()) {                addToSet(val, end, 1, type);                return i;            }            c = s.charAt(i);            if (c >= '0' && c <= '9') {                ValueSet vs = getValue(v, s, i);                end = vs.value;                i = vs.pos;            }            if (i < s.length() && ((c = s.charAt(i)) == '/')) {                i++;                c = s.charAt(i);                int v2 = Integer.parseInt(String.valueOf(c));                i++;                if (i >= s.length()) {                    addToSet(val, end, v2, type);                    return i;                }                c = s.charAt(i);                if (c >= '0' && c <= '9') {                    ValueSet vs = getValue(v2, s, i);                    int v3 = vs.value;                    addToSet(val, end, v3, type);                    i = vs.pos;                    return i;                } else {                    addToSet(val, end, v2, type);                    return i;                }            } else {                addToSet(val, end, 1, type);                return i;            }        }        if (c == '/') {            if ((i + 1) >= s.length() || s.charAt(i + 1) == ' ' || s.charAt(i + 1) == '\\t') {                throw new ParseException(\"'/' must be followed by an integer.\", i);            }            i++;            c = s.charAt(i);            int v2 = Integer.parseInt(String.valueOf(c));            i++;            if (i >= s.length()) {                checkIncrementRange(v2, type, i);                addToSet(val, end, v2, type);                return i;            }            c = s.charAt(i);            if (c >= '0' && c <= '9') {                ValueSet vs = getValue(v2, s, i);                int v3 = vs.value;                checkIncrementRange(v3, type, i);                addToSet(val, end, v3, type);                i = vs.pos;                return i;            } else {                throw new ParseException(\"Unexpected character '\" + c + \"' after '/'\", i);            }        }        addToSet(val, end, 0, type);        i++;        return i;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getCronExpression", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCronExpression() {        return cronExpression;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getExpressionSummary", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getExpressionSummary() {        StringBuilder buf = new StringBuilder();        buf.append(\"seconds: \");        buf.append(getExpressionSetSummary(seconds));        buf.append(\"\\n\");        buf.append(\"minutes: \");        buf.append(getExpressionSetSummary(minutes));        buf.append(\"\\n\");        buf.append(\"hours: \");        buf.append(getExpressionSetSummary(hours));        buf.append(\"\\n\");        buf.append(\"daysOfMonth: \");        buf.append(getExpressionSetSummary(daysOfMonth));        buf.append(\"\\n\");        buf.append(\"months: \");        buf.append(getExpressionSetSummary(months));        buf.append(\"\\n\");        buf.append(\"daysOfWeek: \");        buf.append(getExpressionSetSummary(daysOfWeek));        buf.append(\"\\n\");        buf.append(\"lastdayOfWeek: \");        buf.append(lastdayOfWeek);        buf.append(\"\\n\");        buf.append(\"nearestWeekday: \");        buf.append(nearestWeekday);        buf.append(\"\\n\");        buf.append(\"NthDayOfWeek: \");        buf.append(nthdayOfWeek);        buf.append(\"\\n\");        buf.append(\"lastdayOfMonth: \");        buf.append(lastdayOfMonth);        buf.append(\"\\n\");        buf.append(\"years: \");        buf.append(getExpressionSetSummary(years));        buf.append(\"\\n\");        return buf.toString();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getExpressionSetSummary", "params": ["java"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getExpressionSetSummary(java.util.Set<Integer> set) {        if (set.contains(NO_SPEC)) {            return \"?\";        }        if (set.contains(ALL_SPEC)) {            return \"*\";        }        StringBuilder buf = new StringBuilder();        Iterator<Integer> itr = set.iterator();        boolean first = true;        while (itr.hasNext()) {            Integer iVal = itr.next();            String val = iVal.toString();            if (!first) {                buf.append(\",\");            }            buf.append(val);            first = false;        }        return buf.toString();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getExpressionSetSummary", "params": ["java"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getExpressionSetSummary(java.util.ArrayList<Integer> list) {        if (list.contains(NO_SPEC)) {            return \"?\";        }        if (list.contains(ALL_SPEC)) {            return \"*\";        }        StringBuilder buf = new StringBuilder();        Iterator<Integer> itr = list.iterator();        boolean first = true;        while (itr.hasNext()) {            Integer iVal = itr.next();            String val = iVal.toString();            if (!first) {                buf.append(\",\");            }            buf.append(val);            first = false;        }        return buf.toString();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "skipWhiteSpace", "params": ["int", "String"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int skipWhiteSpace(int i, String s) {        for (; i < s.length() && (s.charAt(i) == ' ' || s.charAt(i) == '\\t'); i++) {        }        return i;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "findNextWhiteSpace", "params": ["int", "String"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int findNextWhiteSpace(int i, String s) {        for (; i < s.length() && (s.charAt(i) != ' ' || s.charAt(i) != '\\t'); i++) {        }        return i;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "addToSet", "params": ["int", "int", "int", "int"], "throws": ["ParseException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void addToSet(int val, int end, int incr, int type)        throws ParseException {                TreeSet<Integer> set = getSet(type);        if (type == SECOND || type == MINUTE) {            if ((val < 0 || val > 59 || end > 59) && (val != ALL_SPEC_INT)) {                throw new ParseException(                        \"Minute and Second values must be between 0 and 59\",                        -1);            }        } else if (type == HOUR) {            if ((val < 0 || val > 23 || end > 23) && (val != ALL_SPEC_INT)) {                throw new ParseException(                        \"Hour values must be between 0 and 23\", -1);            }        } else if (type == DAY_OF_MONTH) {            if ((val < 1 || val > 31 || end > 31) && (val != ALL_SPEC_INT)                     && (val != NO_SPEC_INT)) {                throw new ParseException(                        \"Day of month values must be between 1 and 31\", -1);            }        } else if (type == MONTH) {            if ((val < 1 || val > 12 || end > 12) && (val != ALL_SPEC_INT)) {                throw new ParseException(                        \"Month values must be between 1 and 12\", -1);            }        } else if (type == DAY_OF_WEEK) {            if ((val == 0 || val > 7 || end > 7) && (val != ALL_SPEC_INT)                    && (val != NO_SPEC_INT)) {                throw new ParseException(                        \"Day-of-Week values must be between 1 and 7\", -1);            }        }        if ((incr == 0 || incr == -1) && val != ALL_SPEC_INT) {            if (val != -1) {                set.add(val);            } else {                set.add(NO_SPEC);            }                        return;        }        int startAt = val;        int stopAt = end;        if (val == ALL_SPEC_INT && incr <= 0) {            incr = 1;            set.add(ALL_SPEC); // put in a marker, but also fill values        }        if (type == SECOND || type == MINUTE) {            if (stopAt == -1) {                stopAt = 59;            }            if (startAt == -1 || startAt == ALL_SPEC_INT) {                startAt = 0;            }        } else if (type == HOUR) {            if (stopAt == -1) {                stopAt = 23;            }            if (startAt == -1 || startAt == ALL_SPEC_INT) {                startAt = 0;            }        } else if (type == DAY_OF_MONTH) {            if (stopAt == -1) {                stopAt = 31;            }            if (startAt == -1 || startAt == ALL_SPEC_INT) {                startAt = 1;            }        } else if (type == MONTH) {            if (stopAt == -1) {                stopAt = 12;            }            if (startAt == -1 || startAt == ALL_SPEC_INT) {                startAt = 1;            }        } else if (type == DAY_OF_WEEK) {            if (stopAt == -1) {                stopAt = 7;            }            if (startAt == -1 || startAt == ALL_SPEC_INT) {                startAt = 1;            }        } else if (type == YEAR) {            if (stopAt == -1) {                stopAt = MAX_YEAR;            }            if (startAt == -1 || startAt == ALL_SPEC_INT) {                startAt = 1970;            }        }        // if the end of the range is before the start, then we need to overflow into         // the next day, month etc. This is done by adding the maximum amount for that         // type, and using modulus max to determine the value being added.        int max = -1;        if (stopAt < startAt) {            switch (type) {              case       SECOND : max = 60; break;              case       MINUTE : max = 60; break;              case         HOUR : max = 24; break;              case        MONTH : max = 12; break;              case  DAY_OF_WEEK : max = 7;  break;              case DAY_OF_MONTH : max = 31; break;              case         YEAR : throw new IllegalArgumentException(\"Start year must be less than stop year\");              default           : throw new IllegalArgumentException(\"Unexpected type encountered\");            }            stopAt += max;        }        for (int i = startAt; i <= stopAt; i += incr) {            if (max == -1) {                // ie: there's no max to overflow over                set.add(i);            } else {                // take the modulus to get the real value                int i2 = i % max;                // 1-indexed ranges should not include 0, and should include their max                if (i2 == 0 && (type == MONTH || type == DAY_OF_WEEK || type == DAY_OF_MONTH) ) {                    i2 = max;                }                set.add(i2);            }        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}]