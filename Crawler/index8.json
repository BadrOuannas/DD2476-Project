[{"method_name": "getSentencePattern", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Pattern", "snippet": "  public Pattern getSentencePattern() { return sentencePattern; }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/IgnoreRuleSentencePair.java", "stars": "3", "class": {"name": "IgnoreRuleSentencePair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "context", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void context(){        articleService.findAllWithTags();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/test/java/cn/tsxygfy/beyond/ArticleServiceTest.java", "stars": "1", "class": {"name": "ArticleServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        FileReader fr = new FileReader(\"10_IO\\\\\u6211\u662fGBK\u683c\u5f0f\u7684\u6587\u672c.txt\");        int len = 0;        while((len = fr.read())!=-1){            System.out.print((char)len);        }        fr.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo03/ReverseStream/Demo01FileReader.java", "stars": "2", "class": {"name": "Demo01FileReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDefaultProfile", "params": ["SpringApplication"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void addDefaultProfile(SpringApplication app) {        Map<String, Object> defProperties = new HashMap<>();        /*         * The default profile to use when no other profiles are defined         * This cannot be set in the application.yml file.         * See https://github.com/spring-projects/spring-boot/issues/1219         */        defProperties.put(SPRING_PROFILE_DEFAULT, JHipsterConstants.SPRING_PROFILE_DEVELOPMENT);        app.setDefaultProperties(defProperties);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/DefaultProfileUtil.java", "stars": "2", "class": {"name": "DefaultProfileUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isRequire", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isRequire() {        return require;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRequire", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequire(boolean require) {        this.require = require;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getCondition() {        return condition;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCondition", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCondition(Map<String, String> condition) {        this.condition = condition;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParams", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getParams() {        return params;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParams", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setParams(Map<String, Object> params) {        this.params = params;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(String value) {        this.value = value;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopOptionVo.java", "stars": "23", "class": {"name": "SqoopOptionVo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loginFtpServer", "params": ["FtpConnParams"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void loginFtpServer(FtpConnParams ftpConnParams);    /**     * @param     * @return void     * @throws     * @Title: LogoutFtpServer     * todo \u65b9\u6cd5\u540d\u9996\u5b57\u6bcd     * @Description: \u65ad\u5f00\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5     */    public abstract void logoutFtpServer();    /**     * @param @param  directoryPath     * @param @return     * @return boolean     * @throws     * @Title: isDirExist     * @Description: \u5224\u65ad\u6307\u5b9a\u8def\u5f84\u662f\u5426\u662f\u76ee\u5f55     */    public abstract boolean isDirExist(String directoryPath);    /**     * @param @param  filePath     * @param @return     * @return boolean     * @throws     * @Title: isFileExist     * @Description: \u5224\u65ad\u6307\u5b9a\u8def\u5f84\u662f\u5426\u662f\u6587\u4ef6     */    public abstract boolean isFileExist(String filePath);    /**     * @param @param  filePath     * @param @return     * @return boolean     * @throws     * @Title: isSymbolicLink     * @Description: \u5224\u65ad\u6307\u5b9a\u8def\u5f84\u662f\u5426\u662f\u8f6f\u94fe\u63a5     */    public abstract boolean isSymbolicLink(String filePath);    /**     * @param @param  directoryPath     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getListFiles     * @Description: \u9012\u5f52\u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84     */    public abstract HashSet<String> getListFiles(String directoryPath, int parentLevel, int maxTraversalLevel);    /**     * @param @param  filePath     * @param @return     * @return InputStream     * @throws     * @Title: getInputStream     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u7684\u8f93\u5165\u6d41     */    public abstract InputStream getInputStream(String filePath);    /**     * get file's last modify time     * @param filePath     * @return     */    public abstract long getLastModifyTIme(String filePath);    /**     * delete file     * @param filePath     */    public abstract void deleteFile(String filePath);    /**     * @param @param  srcPaths \u8def\u5f84\u5217\u8868     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getAllFiles     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u5217\u8868\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84     */    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "logoutFtpServer", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void logoutFtpServer();    /**     * @param @param  directoryPath     * @param @return     * @return boolean     * @throws     * @Title: isDirExist     * @Description: \u5224\u65ad\u6307\u5b9a\u8def\u5f84\u662f\u5426\u662f\u76ee\u5f55     */    public abstract boolean isDirExist(String directoryPath);    /**     * @param @param  filePath     * @param @return     * @return boolean     * @throws     * @Title: isFileExist     * @Description: \u5224\u65ad\u6307\u5b9a\u8def\u5f84\u662f\u5426\u662f\u6587\u4ef6     */    public abstract boolean isFileExist(String filePath);    /**     * @param @param  filePath     * @param @return     * @return boolean     * @throws     * @Title: isSymbolicLink     * @Description: \u5224\u65ad\u6307\u5b9a\u8def\u5f84\u662f\u5426\u662f\u8f6f\u94fe\u63a5     */    public abstract boolean isSymbolicLink(String filePath);    /**     * @param @param  directoryPath     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getListFiles     * @Description: \u9012\u5f52\u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84     */    public abstract HashSet<String> getListFiles(String directoryPath, int parentLevel, int maxTraversalLevel);    /**     * @param @param  filePath     * @param @return     * @return InputStream     * @throws     * @Title: getInputStream     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u7684\u8f93\u5165\u6d41     */    public abstract InputStream getInputStream(String filePath);    /**     * get file's last modify time     * @param filePath     * @return     */    public abstract long getLastModifyTIme(String filePath);    /**     * delete file     * @param filePath     */    public abstract void deleteFile(String filePath);    /**     * @param @param  srcPaths \u8def\u5f84\u5217\u8868     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getAllFiles     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u5217\u8868\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84     */    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isDirExist", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "    public abstract boolean isDirExist(String directoryPath);    /**     * @param @param  filePath     * @param @return     * @return boolean     * @throws     * @Title: isFileExist     * @Description: \u5224\u65ad\u6307\u5b9a\u8def\u5f84\u662f\u5426\u662f\u6587\u4ef6     */    public abstract boolean isFileExist(String filePath);    /**     * @param @param  filePath     * @param @return     * @return boolean     * @throws     * @Title: isSymbolicLink     * @Description: \u5224\u65ad\u6307\u5b9a\u8def\u5f84\u662f\u5426\u662f\u8f6f\u94fe\u63a5     */    public abstract boolean isSymbolicLink(String filePath);    /**     * @param @param  directoryPath     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getListFiles     * @Description: \u9012\u5f52\u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84     */    public abstract HashSet<String> getListFiles(String directoryPath, int parentLevel, int maxTraversalLevel);    /**     * @param @param  filePath     * @param @return     * @return InputStream     * @throws     * @Title: getInputStream     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u7684\u8f93\u5165\u6d41     */    public abstract InputStream getInputStream(String filePath);    /**     * get file's last modify time     * @param filePath     * @return     */    public abstract long getLastModifyTIme(String filePath);    /**     * delete file     * @param filePath     */    public abstract void deleteFile(String filePath);    /**     * @param @param  srcPaths \u8def\u5f84\u5217\u8868     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getAllFiles     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u5217\u8868\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84     */    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isFileExist", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "    public abstract boolean isFileExist(String filePath);    /**     * @param @param  filePath     * @param @return     * @return boolean     * @throws     * @Title: isSymbolicLink     * @Description: \u5224\u65ad\u6307\u5b9a\u8def\u5f84\u662f\u5426\u662f\u8f6f\u94fe\u63a5     */    public abstract boolean isSymbolicLink(String filePath);    /**     * @param @param  directoryPath     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getListFiles     * @Description: \u9012\u5f52\u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84     */    public abstract HashSet<String> getListFiles(String directoryPath, int parentLevel, int maxTraversalLevel);    /**     * @param @param  filePath     * @param @return     * @return InputStream     * @throws     * @Title: getInputStream     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u7684\u8f93\u5165\u6d41     */    public abstract InputStream getInputStream(String filePath);    /**     * get file's last modify time     * @param filePath     * @return     */    public abstract long getLastModifyTIme(String filePath);    /**     * delete file     * @param filePath     */    public abstract void deleteFile(String filePath);    /**     * @param @param  srcPaths \u8def\u5f84\u5217\u8868     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getAllFiles     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u5217\u8868\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84     */    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isSymbolicLink", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "    public abstract boolean isSymbolicLink(String filePath);    /**     * @param @param  directoryPath     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getListFiles     * @Description: \u9012\u5f52\u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84     */    public abstract HashSet<String> getListFiles(String directoryPath, int parentLevel, int maxTraversalLevel);    /**     * @param @param  filePath     * @param @return     * @return InputStream     * @throws     * @Title: getInputStream     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u7684\u8f93\u5165\u6d41     */    public abstract InputStream getInputStream(String filePath);    /**     * get file's last modify time     * @param filePath     * @return     */    public abstract long getLastModifyTIme(String filePath);    /**     * delete file     * @param filePath     */    public abstract void deleteFile(String filePath);    /**     * @param @param  srcPaths \u8def\u5f84\u5217\u8868     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getAllFiles     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u5217\u8868\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84     */    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getListFiles", "params": ["String", "int", "int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "HashSet<String>", "snippet": "    public abstract HashSet<String> getListFiles(String directoryPath, int parentLevel, int maxTraversalLevel);    /**     * @param @param  filePath     * @param @return     * @return InputStream     * @throws     * @Title: getInputStream     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u7684\u8f93\u5165\u6d41     */    public abstract InputStream getInputStream(String filePath);    /**     * get file's last modify time     * @param filePath     * @return     */    public abstract long getLastModifyTIme(String filePath);    /**     * delete file     * @param filePath     */    public abstract void deleteFile(String filePath);    /**     * @param @param  srcPaths \u8def\u5f84\u5217\u8868     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getAllFiles     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u5217\u8868\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84     */    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getInputStream", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "InputStream", "snippet": "    public abstract InputStream getInputStream(String filePath);    /**     * get file's last modify time     * @param filePath     * @return     */    public abstract long getLastModifyTIme(String filePath);    /**     * delete file     * @param filePath     */    public abstract void deleteFile(String filePath);    /**     * @param @param  srcPaths \u8def\u5f84\u5217\u8868     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getAllFiles     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u5217\u8868\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84     */    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getLastModifyTIme", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "long", "snippet": "    public abstract long getLastModifyTIme(String filePath);    /**     * delete file     * @param filePath     */    public abstract void deleteFile(String filePath);    /**     * @param @param  srcPaths \u8def\u5f84\u5217\u8868     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getAllFiles     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u5217\u8868\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84     */    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "deleteFile", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void deleteFile(String filePath);    /**     * @param @param  srcPaths \u8def\u5f84\u5217\u8868     * @param @param  parentLevel \u7236\u76ee\u5f55\u7684\u9012\u5f52\u5c42\u6570\uff08\u9996\u6b21\u4e3a0\uff09     * @param @param  maxTraversalLevel \u5141\u8bb8\u7684\u6700\u5927\u9012\u5f52\u5c42\u6570     * @param @return     * @return HashSet<String>     * @throws     * @Title: getAllFiles     * @Description: \u83b7\u53d6\u6307\u5b9a\u8def\u5f84\u5217\u8868\u4e0b\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84     */    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getAllFiles", "params": ["List<String>", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "HashSet<PathMeta>", "snippet": "    public HashSet<PathMeta> getAllFiles(List<String> srcPaths, int parentLevel, int maxTraversalLevel) {        HashSet<PathMeta> sourceAllFiles = new HashSet<>();        if (!srcPaths.isEmpty()) {            for (String eachPath : srcPaths) {                HashSet<String> listFiles = getListFiles(eachPath, parentLevel, maxTraversalLevel);                String parent = eachPath;                if(eachPath.contains(\"*\") || eachPath.contains(\"?\")){                    parent = UnstructuredStorageReaderUtil.getRegexPathParentPath(eachPath);                }                for(String file : listFiles){                    if(file.equals(parent)){                        sourceAllFiles.add(new PathMeta(file, parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                    }else{                        sourceAllFiles.add(new PathMeta(file, file.substring(file.indexOf(parent) + parent.length())));                    }                }            }        }        return sourceAllFiles;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/FtpHelper.java", "stars": "23", "class": {"name": "FtpHelper", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "validateParameter", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateParameter(Configuration writerConfiguration) {        // writeMode check        String writeMode = writerConfiguration.getNecessaryValue(                Key.WRITE_MODE,                UnstructuredStorageWriterErrorCode.REQUIRED_VALUE);        writeMode = writeMode.trim();        Set<String> supportedWriteModes = Sets.newHashSet(\"truncate\", \"append\",                \"nonConflict\");        if (!supportedWriteModes.contains(writeMode)) {            throw DataXException                    .asDataXException(                            UnstructuredStorageWriterErrorCode.ILLEGAL_VALUE,                            String.format(                                    \"\u4ec5\u652f\u6301 truncate, append, nonConflict \u4e09\u79cd\u6a21\u5f0f, \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684 writeMode \u6a21\u5f0f : [%s]\",                                    writeMode));        }        writerConfiguration.set(Key.WRITE_MODE, writeMode);        // encoding check        String encoding = writerConfiguration.getString(Key.ENCODING);        if (StringUtils.isBlank(encoding)) {            // like \"  \", null            LOG.warn(String.format(\"\u60a8\u7684encoding\u914d\u7f6e\u4e3a\u7a7a, \u5c06\u4f7f\u7528\u9ed8\u8ba4\u503c[%s]\",                    Constant.DEFAULT_ENCODING));            writerConfiguration.set(Key.ENCODING, Constant.DEFAULT_ENCODING);        } else {            try {                encoding = encoding.trim();                writerConfiguration.set(Key.ENCODING, encoding);                Charsets.toCharset(encoding);            } catch (Exception e) {                throw DataXException.asDataXException(                        UnstructuredStorageWriterErrorCode.ILLEGAL_VALUE,                        String.format(\"\u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u7f16\u7801\u683c\u5f0f:[%s]\", encoding), e);            }        }        // only support compress types        String compress = writerConfiguration.getString(Key.COMPRESS);        if (StringUtils.isBlank(compress)) {            writerConfiguration.set(Key.COMPRESS, null);        } else {            Set<String> supportedCompress = Sets.newHashSet(\"gzip\", \"bzip2\", \"zip\");            if (!supportedCompress.contains(compress.toLowerCase().trim())) {                String message = String.format(                        \"\u4ec5\u652f\u6301 [%s] \u6587\u4ef6\u538b\u7f29\u683c\u5f0f , \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u6587\u4ef6\u538b\u7f29\u683c\u5f0f: [%s]\",                        StringUtils.join(supportedCompress, \",\"), compress);                throw DataXException.asDataXException(                        UnstructuredStorageWriterErrorCode.ILLEGAL_VALUE,                        String.format(message, compress));            }        }        // fieldDelimiter check        String delimiterInStr = writerConfiguration                .getString(Key.FIELD_DELIMITER, \",\");        // warn: if have, length must be one        if (null != delimiterInStr && 1 != delimiterInStr.length()) {            throw DataXException.asDataXException(                    UnstructuredStorageWriterErrorCode.ILLEGAL_VALUE,                    String.format(\"\u4ec5\u4ec5\u652f\u6301\u5355\u5b57\u7b26\u5207\u5206, \u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3a : [%s]\", delimiterInStr));        }        if (null == delimiterInStr) {            LOG.warn(String.format(\"\u60a8\u6ca1\u6709\u914d\u7f6e\u5217\u5206\u9694\u7b26, \u4f7f\u7528\u9ed8\u8ba4\u503c[%s]\",                    Constant.DEFAULT_FIELD_DELIMITER));            writerConfiguration.set(Key.FIELD_DELIMITER,                    Constant.DEFAULT_FIELD_DELIMITER);        }        // fileFormat check        String fileFormat = writerConfiguration.getString(Key.FILE_FORMAT,                Constant.FILE_FORMAT_TEXT);        if (!Constant.FILE_FORMAT_CSV.equals(fileFormat)                && !Constant.FILE_FORMAT_TEXT.equals(fileFormat)) {            throw DataXException.asDataXException(                    UnstructuredStorageWriterErrorCode.ILLEGAL_VALUE, String                            .format(\"\u60a8\u914d\u7f6e\u7684fileFormat [%s]\u9519\u8bef, \u652f\u6301csv, text\u4e24\u79cd.\",                                    fileFormat));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/UnstructuredStorageWriterUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "split", "params": ["Configuration", "Set<String>", "TransportType", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Configuration>", "snippet": "    public static List<Configuration> split(Configuration writerSliceConfig,                                            Set<String> originAllFileExists, TransportType transportType, int mandatoryNumber) {        LOG.info(\"begin do split...\");        Set<String> allFileExists = new HashSet<String>();        allFileExists.addAll(originAllFileExists);        List<Configuration> writerSplitConfigs = new ArrayList<Configuration>();        String filePrefix = writerSliceConfig.getString(Key.FILE_NAME, \"\");        String fileSuffix;        for (int i = 0; i < mandatoryNumber; i++) {            // handle same file name            Configuration splitedTaskConfig = writerSliceConfig.clone();            String fullFileName = null;            if(transportType == TransportType.RECORD) {                do{                    fileSuffix = UUID.randomUUID().toString().replace('-', '_');                    fullFileName = String.format(\"%s__%s\", filePrefix, fileSuffix);                }while (allFileExists.contains(fullFileName));                String suffix = CompressSuffixName.chooseSuffix(writerSliceConfig.getString(Key.COMPRESS, \"\"));                if(StringUtils.isNotBlank(suffix)){                    fullFileName += suffix;                }                allFileExists.add(fullFileName);                LOG.info(String                        .format(\"splited write file name:[%s]\", fullFileName));            }else{                fullFileName = filePrefix;            }            splitedTaskConfig.set(Key.FILE_NAME, fullFileName);            writerSplitConfigs.add(splitedTaskConfig);        }        LOG.info(\"end do split.\");        return writerSplitConfigs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/UnstructuredStorageWriterUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildFilePath", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String buildFilePath(String path, String fileName,                                       String suffix) {        boolean isEndWithSeparator = false;        switch (IOUtils.DIR_SEPARATOR) {            case IOUtils.DIR_SEPARATOR_UNIX:                isEndWithSeparator = path.endsWith(String                        .valueOf(IOUtils.DIR_SEPARATOR));                break;            case IOUtils.DIR_SEPARATOR_WINDOWS:                isEndWithSeparator = path.endsWith(String                        .valueOf(IOUtils.DIR_SEPARATOR_WINDOWS));                break;            default:                break;        }        if (!isEndWithSeparator) {            path = path + IOUtils.DIR_SEPARATOR;        }        if (null == suffix) {            suffix = \"\";        } else {            suffix = suffix.trim();        }        return String.format(\"%s%s%s\", path, fileName, suffix);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/UnstructuredStorageWriterUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildTmpFilePath", "params": ["String", "String", "char", "Function<String,Boolean>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String buildTmpFilePath(String userPath, String tmpPrefix,                                          char separator, Function<String, Boolean> isExists){        String tmpFilePath;        boolean exist;        do{            String tmpSuffix = tmpPrefix + UUID.randomUUID().toString().replace('-', '_');            if(userPath.endsWith(String.valueOf(separator))){                tmpFilePath = String.format(\"%s%s%s\", userPath,                        tmpSuffix, separator);            } else{                tmpFilePath = String.format(\"%s%s%s%s\", userPath, separator, tmpSuffix, separator);            }            Boolean check = isExists.apply(tmpFilePath);            exist = null != check ? check : false;        } while(exist);        return tmpFilePath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/UnstructuredStorageWriterUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeToStream", "params": ["InputStream", "OutputStream", "Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void writeToStream(InputStream inputStream, OutputStream outputStream,                                     Configuration config){        String compress = config.getString(Key.COMPRESS);        try{            OutputStream compressedOutputStream = outputStream;            if(null != compress){                if(\"gzip\".equalsIgnoreCase(compress)){                    compressedOutputStream = new GzipCompressorOutputStream(outputStream);                }else if(\"bzip2\".equalsIgnoreCase(compress)){                    compressedOutputStream = new BZip2CompressorOutputStream(outputStream);                }else{                    throw DataXException.asDataXException(                            UnstructuredStorageWriterErrorCode.ILLEGAL_VALUE,                            String.format(                                    \"\u4ec5\u652f\u6301 gzip, bzip2 \u6587\u4ef6\u538b\u7f29\u683c\u5f0f , \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u6587\u4ef6\u538b\u7f29\u683c\u5f0f: [%s]\",                                    compress));                }            }            byte[] buffer = new byte[8192];            int len = -1;            while((len = inputStream.read(buffer, 0, buffer.length)) >= 0){                compressedOutputStream.write(buffer, 0, len);            }        }catch(IOException e){            throw DataXException.asDataXException(                    UnstructuredStorageWriterErrorCode.Write_FILE_IO_ERROR,                    String.format(\"\u6d41\u5199\u5165\u9519\u8bef \"), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/UnstructuredStorageWriterUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeToStream", "params": ["RecordReceiver", "OutputStream", "Configuration", "String", "TaskPluginCollector"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void writeToStream(RecordReceiver lineReceiver,                                     OutputStream outputStream, Configuration config, String context,                                     TaskPluginCollector taskPluginCollector) {        String encoding = config.getString(Key.ENCODING,                Constant.DEFAULT_ENCODING);        // handle blank encoding        if (StringUtils.isBlank(encoding)) {            LOG.warn(String.format(\"\u60a8\u914d\u7f6e\u7684encoding\u4e3a[%s], \u4f7f\u7528\u9ed8\u8ba4\u503c[%s]\", encoding,                    Constant.DEFAULT_ENCODING));            encoding = Constant.DEFAULT_ENCODING;        }        String compress = config.getString(Key.COMPRESS);        BufferedWriter writer = null;        // compress logic        try {            if (null == compress) {                writer = new BufferedWriter(new OutputStreamWriter(                        outputStream, encoding));            } else {                // TODO more compress                if (\"gzip\".equalsIgnoreCase(compress)) {                    CompressorOutputStream compressorOutputStream = new GzipCompressorOutputStream(                            outputStream);                    writer = new BufferedWriter(new OutputStreamWriter(                            compressorOutputStream, encoding));                } else if (\"bzip2\".equalsIgnoreCase(compress)) {                    CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(                            outputStream);                    writer = new BufferedWriter(new OutputStreamWriter(                            compressorOutputStream, encoding));                } else if (\"zip\".equalsIgnoreCase(compress)){                    //just wrap with BufferedWriter                    writer = new BufferedWriter(new OutputStreamWriter(outputStream, encoding));                }else{                    throw DataXException                            .asDataXException(                                    UnstructuredStorageWriterErrorCode.ILLEGAL_VALUE,                                    String.format(                                            \"\u4ec5\u652f\u6301 gzip, bzip2 \u6587\u4ef6\u538b\u7f29\u683c\u5f0f , \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u6587\u4ef6\u538b\u7f29\u683c\u5f0f: [%s]\",                                            compress));                }            }            UnstructuredStorageWriterUtil.doWriteToStream(lineReceiver, writer,                    context, config, taskPluginCollector);        } catch (UnsupportedEncodingException uee) {            throw DataXException                    .asDataXException(                            UnstructuredStorageWriterErrorCode.Write_FILE_WITH_CHARSET_ERROR,                            String.format(\"\u4e0d\u652f\u6301\u7684\u7f16\u7801\u683c\u5f0f : [%s]\", encoding), uee);        } catch (NullPointerException e) {            throw DataXException.asDataXException(                    UnstructuredStorageWriterErrorCode.RUNTIME_EXCEPTION,                    \"\u8fd0\u884c\u65f6\u9519\u8bef, \u8bf7\u8054\u7cfb\u6211\u4eec\", e);        } catch (IOException e) {            throw DataXException.asDataXException(                    UnstructuredStorageWriterErrorCode.Write_FILE_IO_ERROR,                    String.format(\"\u6d41\u5199\u5165\u9519\u8bef : [%s]\", context), e);        } finally {            IOUtils.closeQuietly(writer);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/UnstructuredStorageWriterUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doWriteToStream", "params": ["RecordReceiver", "BufferedWriter", "String", "Configuration", "TaskPluginCollector"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void doWriteToStream(RecordReceiver lineReceiver,                                        BufferedWriter writer, String contex, Configuration config,                                        TaskPluginCollector taskPluginCollector) throws IOException {        String nullFormat = config.getString(Key.NULL_FORMAT);        // \u517c\u5bb9format & dataFormat        String dateFormat = config.getString(Key.DATE_FORMAT);        DateFormat dateParse = null; // warn: \u53ef\u80fd\u4e0d\u517c\u5bb9        if (StringUtils.isNotBlank(dateFormat)) {            dateParse = new SimpleDateFormat(dateFormat);        }        // warn: default false        String fileFormat = config.getString(Key.FILE_FORMAT,                Constant.FILE_FORMAT_TEXT);        String delimiterInStr = config.getString(Key.FIELD_DELIMITER, \",\");        if (null != delimiterInStr && 1 != delimiterInStr.length()) {            throw DataXException.asDataXException(                    UnstructuredStorageWriterErrorCode.ILLEGAL_VALUE,                    String.format(\"\u4ec5\u4ec5\u652f\u6301\u5355\u5b57\u7b26\u5207\u5206, \u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3a : [%s]\", delimiterInStr));        }        if (null == delimiterInStr) {            LOG.warn(String.format(\"\u60a8\u6ca1\u6709\u914d\u7f6e\u5217\u5206\u9694\u7b26, \u4f7f\u7528\u9ed8\u8ba4\u503c[%s]\",                    Constant.DEFAULT_FIELD_DELIMITER));        }        // warn: fieldDelimiter could not be '' for no fieldDelimiter        char fieldDelimiter = config.getChar(Key.FIELD_DELIMITER,                Constant.DEFAULT_FIELD_DELIMITER);        UnstructuredWriter unstructuredWriter = TextCsvWriterManager                .produceUnstructuredWriter(fileFormat, fieldDelimiter, writer);        List<String> headers = config.getList(Key.HEADER, String.class);        if (null != headers && !headers.isEmpty()) {            unstructuredWriter.writeOneRecord(headers);        }        Record record = null;        while ((record = lineReceiver.getFromReader()) != null) {            UnstructuredStorageWriterUtil.transportOneRecord(record,                    nullFormat, dateParse, taskPluginCollector,                    unstructuredWriter);        }        // warn:\u7531\u8c03\u7528\u65b9\u63a7\u5236\u6d41\u7684\u5173\u95ed        // IOUtils.closeQuietly(unstructuredWriter);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/UnstructuredStorageWriterUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transportOneRecord", "params": ["Record", "String", "DateFormat", "TaskPluginCollector", "UnstructuredWriter"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void transportOneRecord(Record record, String nullFormat,                                          DateFormat dateParse, TaskPluginCollector taskPluginCollector,                                          UnstructuredWriter unstructuredWriter) {        // warn: default is null        if (null == nullFormat) {            nullFormat = \"null\";        }        try {            List<String> splitedRows = new ArrayList<String>();            int recordLength = record.getColumnNumber();            if (0 != recordLength) {                Column column;                for (int i = 0; i < recordLength; i++) {                    column = record.getColumn(i);                    if (null != column.getRawData()) {                        boolean isDateColumn = column instanceof DateColumn;                        if (!isDateColumn) {                            splitedRows.add(column.asString());                        } else {                            if (null != dateParse) {                                splitedRows.add(dateParse.format(column                                        .asDate()));                            } else {                                splitedRows.add(column.asString());                            }                        }                    } else {                        // warn: it's all ok if nullFormat is null                        splitedRows.add(nullFormat);                    }                }            }            unstructuredWriter.writeOneRecord(splitedRows);        } catch (Exception e) {            // warn: dirty domain            taskPluginCollector.collectDirtyRecord(record, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/UnstructuredStorageWriterUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/CommentCond.java", "stars": "2", "class": {"name": "CommentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(String status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/CommentCond.java", "stars": "2", "class": {"name": "CommentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getStartTime() {        return startTime;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/CommentCond.java", "stars": "2", "class": {"name": "CommentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartTime", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartTime(Integer startTime) {        this.startTime = startTime;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/CommentCond.java", "stars": "2", "class": {"name": "CommentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getEndTime() {        return endTime;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/CommentCond.java", "stars": "2", "class": {"name": "CommentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEndTime", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndTime(Integer endTime) {        this.endTime = endTime;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/CommentCond.java", "stars": "2", "class": {"name": "CommentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getParent() {        return parent;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/CommentCond.java", "stars": "2", "class": {"name": "CommentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParent", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setParent(Integer parent) {        this.parent = parent;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/CommentCond.java", "stars": "2", "class": {"name": "CommentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect(final ResponseListener<Object> listener) {        if (castServiceChannel != null) {            disconnectFromWebApp();        }        castServiceChannel = new CastServiceChannel(launchSession.getAppId(), this);        try {            Cast.CastApi.setMessageReceivedCallbacks(service.getApiClient(),                    castServiceChannel.getNamespace(),                    castServiceChannel);            Util.postSuccess(listener, null);        } catch (IOException e) {            castServiceChannel = null;            Util.postError(listener, new ServiceCommandError(0, \"Failed to create channel\", null));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "join", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void join(ResponseListener<Object> connectionListener) {        connect(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnectFromWebApp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnectFromWebApp() {        if (castServiceChannel == null)             return;        try {            Cast.CastApi.removeMessageReceivedCallbacks(service.getApiClient(), castServiceChannel.getNamespace());            castServiceChannel = null;        } catch (IOException e) {            Log.e(Util.T, \"Exception while removing application\", e);        }        Cast.CastApi.leaveApplication(service.getApiClient());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleAppClose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleAppClose() {        for (URLServiceSubscription<?> subscription: service.getSubscriptions()) {            if (subscription.getTarget().equalsIgnoreCase(\"PlayState\")) {                for (int i = 0; i < subscription.getListeners().size(); i++) {                    @SuppressWarnings(\"unchecked\")                    ResponseListener<Object> listener = (ResponseListener<Object>) subscription.getListeners().get(i);                    Util.postSuccess(listener, PlayStateStatus.Idle);                }            }        }        if (getWebAppSessionListener() != null) {             getWebAppSessionListener().onWebAppSessionDisconnect(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMessage", "params": ["String", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendMessage(String message, final ResponseListener<Object> listener) {        if (message == null) {            Util.postError(listener, new ServiceCommandError(0, \"Cannot send null message\", null));            return;        }        if (castServiceChannel == null) {            Util.postError(listener, new ServiceCommandError(0, \"Cannot send a message to the web app without first connecting\", null));            return;        }        Cast.CastApi.sendMessage(service.getApiClient(), castServiceChannel.getNamespace(), message).setResultCallback(new ResultCallback<Status>() {            @Override            public void onResult(Status result) {                if (result.isSuccess()) {                    Util.postSuccess(listener, null);                }                else {                    Util.postError(listener, new ServiceCommandError(result.getStatusCode(), result.toString(), result));                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMessage", "params": ["JSONObject", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendMessage(JSONObject message, ResponseListener<Object> listener) {        sendMessage(message.toString(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close(ResponseListener<Object> listener) {        launchSession.close(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "    public MediaPlayer getMediaPlayer() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaPlayerCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaPlayerCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["String", "String", "String", "String", "String", "boolean", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(String url, String mimeType, String title, String description, String iconSrc, boolean shouldLoop, MediaPlayer.LaunchListener listener) {        service.playMedia(url, mimeType, title, description, iconSrc, shouldLoop, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "closeMedia", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeMedia(LaunchSession launchSession, ResponseListener<Object> listener) {        close(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMetadata", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ApplicationMetadata", "snippet": "    public ApplicationMetadata getMetadata() {        return metadata;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "setMetadata", "params": ["ApplicationMetadata"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMetadata(ApplicationMetadata metadata) {        this.metadata = metadata;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/sessions/CastWebAppSession.java", "stars": "4", "class": {"name": "CastWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "CrashHandler", "snippet": "    public static CrashHandler getInstance() {        // \u9632\u6b62\u591a\u7ebf\u7a0b\u8bbf\u95ee\u5b89\u5168\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u53cc\u91cd\u9501        if (INSTANCE == null) {            synchronized (syncRoot) {                if (INSTANCE == null) {                    INSTANCE = new CrashHandler();                }            }        }        return INSTANCE;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CrashHandler.java", "stars": "2", "class": {"name": "CrashHandler", "extends": null, "implements": ["Thread"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(Context ctx) {        mContext = ctx;        mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();        Thread.setDefaultUncaughtExceptionHandler(this);        deviceInfo = collectCrashDeviceInfo(mContext);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CrashHandler.java", "stars": "2", "class": {"name": "CrashHandler", "extends": null, "implements": ["Thread"], "modifiers": ["public"]}}, {"method_name": "uncaughtException", "params": ["Thread", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void uncaughtException(Thread thread, Throwable ex) {        if (!handleException(ex) && mDefaultHandler != null) {            //\u5982\u679c\u7528\u6237\u6ca1\u6709\u5904\u7406\u5219\u8ba9\u7cfb\u7edf\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u5668\u6765\u5904\u7406            mDefaultHandler.uncaughtException(thread, ex);        } else {            try {                Thread.sleep(5000);            } catch (InterruptedException e) {            }            android.os.Process.killProcess(android.os.Process.myPid());            System.exit(10);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CrashHandler.java", "stars": "2", "class": {"name": "CrashHandler", "extends": null, "implements": ["Thread"], "modifiers": ["public"]}}, {"method_name": "handleException", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean handleException(Throwable ex) {        if (ex == null) {            return true;        }        StackTraceElement[] stackTraceElements = ex.getStackTrace();        StringBuffer stringBuffer = new StringBuffer();        for (StackTraceElement s : stackTraceElements) {            stringBuffer.append(s + \"\\n\");        }        final String msg = ex.getLocalizedMessage() + \"\\n\" + stringBuffer.toString();        new Thread() {            @Override            public void run() {                Looper.prepare();//                if (DEBUG) {                    Toast toast = Toast.makeText(mContext, \"\u7a0b\u5e8f\u5f02\u5e38\uff0c\u5373\u5c06\u9000\u51fa\",                            Toast.LENGTH_LONG);                    toast.setGravity(Gravity.CENTER, 0, 0);                    toast.show();//                    sendMessage(\"\u51fa\u9519\u4fe1\u606f\uff1a\\n\" + msg + \"\\r\\n\\n\u8bbe\u5907\u4fe1\u606f\uff1a\" + deviceInfo);                    //\u4fdd\u5b58\u9519\u8bef\u62a5\u544a\u6587\u4ef6                    LogToFile.w(\"xxxEL\", msg+\"\\n\u8bbe\u5907\u4fe1\u606f\uff1a\" + deviceInfo);//                }                Looper.loop();            }        }.start();        return true;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CrashHandler.java", "stars": "2", "class": {"name": "CrashHandler", "extends": null, "implements": ["Thread"], "modifiers": ["public"]}}, {"method_name": "saveCrashInfoToFile", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String saveCrashInfoToFile(Throwable ex) {        Writer info = new StringWriter();        PrintWriter printWriter = new PrintWriter(info);        ex.printStackTrace(printWriter);        Throwable cause = ex.getCause();        while (cause != null) {            cause.printStackTrace(printWriter);            cause = cause.getCause();        }        String result = info.toString();        printWriter.close();        mDeviceCrashInfo.put(\"EXEPTION\", ex.getLocalizedMessage());        mDeviceCrashInfo.put(STACK_TRACE, result);        try {            Time t = new Time(\"GMT+8\");            t.setToNow(); // \u53d6\u5f97\u7cfb\u7edf\u65f6\u95f4            int date = t.year * 10000 + t.month * 100 + t.monthDay;            int time = t.hour * 10000 + t.minute * 100 + t.second;            String fileName = \"crash-\" + date + \"-\" + time + CRASH_REPORTER_EXTENSION;            FileOutputStream trace = mContext.openFileOutput(fileName,                    Context.MODE_PRIVATE);            mDeviceCrashInfo.store(trace, \"\");            trace.flush();            trace.close();            return fileName;        } catch (Exception e) {            Log.e(\"TAG\",\"an error occured while writing report file...\" + e);        }        return null;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CrashHandler.java", "stars": "2", "class": {"name": "CrashHandler", "extends": null, "implements": ["Thread"], "modifiers": ["public"]}}, {"method_name": "collectCrashDeviceInfo", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String collectCrashDeviceInfo(Context ctx) {        try {            PackageManager pm = ctx.getPackageManager();            PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(),                    PackageManager.GET_ACTIVITIES);            if (pi != null) {                mDeviceCrashInfo.put(VERSION_NAME,                        pi.versionName == null ? \"not set\" : pi.versionName);                mDeviceCrashInfo.put(VERSION_CODE, \"\" + pi.versionCode);            }        } catch (PackageManager.NameNotFoundException e) {            Log.e(\"TAG\",\"Error while collect package info\" + e);        }        //\u4f7f\u7528\u53cd\u5c04\u6765\u6536\u96c6\u8bbe\u5907\u4fe1\u606f.\u5728Build\u7c7b\u4e2d\u5305\u542b\u5404\u79cd\u8bbe\u5907\u4fe1\u606f        Field[] fields = Build.class.getDeclaredFields();        StringBuffer sb = new StringBuffer();        for (Field field : fields) {            try {                field.setAccessible(true);                mDeviceCrashInfo.put(field.getName(), \"\" + field.get(null));//                if (DEBUG) {                    Log.e(\"TAG\",field.getName() + \" : \" + field.get(null));                    sb.append(field.getName() + \" \uff1a \" + field.get(null) + \"\\r\\n\");//                }            } catch (Exception e) {                Log.e(\"TAG\",\"Error while collect crash info\" + e);            }        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CrashHandler.java", "stars": "2", "class": {"name": "CrashHandler", "extends": null, "implements": ["Thread"], "modifiers": ["public"]}}, {"method_name": "salvar", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "\tpublic Cliente salvar(Cliente cliente) {\t\tCliente clienteExistente = clienteRepository.findByEmail(cliente.getEmail());\t\t\t\tif(clienteExistente != null && !clienteExistente.equals(cliente)) {\t\t\tthrow new NegocioException(\"J\u00e1 existe um cliente cadastrado com este email\");\t\t}\t\t\t\treturn clienteRepository.save(cliente);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/domain/service/CadastroClienteService.java", "stars": "2", "class": {"name": "CadastroClienteService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "excluir", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void excluir(Long clienteID) {\t\tclienteRepository.deleteById(clienteID);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/domain/service/CadastroClienteService.java", "stars": "2", "class": {"name": "CadastroClienteService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUp", "params": ["BlockRenderView", "Direction", "BlockPos", "BlockState"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean testUp(BlockRenderView view, Direction to, BlockPos pos, BlockState thisState) {\t\treturn connectionMatcher.test(thisState, getUp(view, to, pos));\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/sprite/ConnectingSpriteProvider.java", "stars": "3", "class": {"name": "ConnectingSpriteProvider", "extends": "BaseSpriteProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "testLeft", "params": ["BlockRenderView", "Direction", "BlockPos", "BlockState"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean testLeft(BlockRenderView view, Direction to, BlockPos pos, BlockState thisState) {\t\treturn connectionMatcher.test(thisState, getLeft(view, to, pos));\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/sprite/ConnectingSpriteProvider.java", "stars": "3", "class": {"name": "ConnectingSpriteProvider", "extends": "BaseSpriteProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "testRight", "params": ["BlockRenderView", "Direction", "BlockPos", "BlockState"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean testRight(BlockRenderView view, Direction to, BlockPos pos, BlockState thisState) {\t\treturn connectionMatcher.test(thisState, getRight(view, to, pos));\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/sprite/ConnectingSpriteProvider.java", "stars": "3", "class": {"name": "ConnectingSpriteProvider", "extends": "BaseSpriteProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "testDown", "params": ["BlockRenderView", "Direction", "BlockPos", "BlockState"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean testDown(BlockRenderView view, Direction to, BlockPos pos, BlockState thisState) {\t\treturn connectionMatcher.test(thisState, getDown(view, to, pos));\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/sprite/ConnectingSpriteProvider.java", "stars": "3", "class": {"name": "ConnectingSpriteProvider", "extends": "BaseSpriteProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u83b7\u53d6\u4e00\u4e2aStream\u6d41        Stream<String> stream = Stream.of(\"\u5f20\u4e09\", \"\u674e\u56db\", \"\u738b\u4e94\", \"\u8d75\u516d\", \"\u7530\u4e03\");        //\u4f7f\u7528Stream\u6d41\u4e2d\u7684\u65b9\u6cd5forEach\u5bf9Stream\u6d41\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u904d\u5386        /*stream.forEach((String name)->{            System.out.println(name);        });*/        stream.forEach(name->System.out.println(name));    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo02/Stream/Demo02Stream_forEach.java", "stars": "2", "class": {"name": "Demo02Stream_forEach", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContent", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap getContent(URLConnection connection) throws IOException {        InputStream input = connection.getInputStream();        try {            input = new BlockingFilterInputStream(input);            Bitmap bitmap = BitmapFactory.decodeStream(input);            if (bitmap == null) {                throw new IOException(\"Image could not be decoded\");            }            return bitmap;        } finally {            input.close();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapContentHandler.java", "stars": "74", "class": {"name": "BitmapContentHandler", "extends": "ContentHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "math1", "params": ["int", "long"], "throws": null, "modifiers": ["static"], "return_type": "long", "snippet": "\tstatic long math1(int a, long b) {\t\treturn b >> a;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/PrimitiveMath.java", "stars": "12", "class": {"name": "PrimitiveMath", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "math2", "params": ["int", "long"], "throws": null, "modifiers": ["static"], "return_type": "long", "snippet": "\tstatic long math2(int a, long b) {\t\treturn b >>> a;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/PrimitiveMath.java", "stars": "12", "class": {"name": "PrimitiveMath", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "math3", "params": ["int", "long"], "throws": null, "modifiers": ["static"], "return_type": "long", "snippet": "\tstatic long math3(int a, long b) {\t\treturn b << a;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/PrimitiveMath.java", "stars": "12", "class": {"name": "PrimitiveMath", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convoluted", "params": ["int"], "throws": null, "modifiers": ["static"], "return_type": "int", "snippet": "\tstatic int convoluted(int a) {\t\treturn ((a << 5) | a) + (((a >> 2 & 0x010) != 0)  ? -a >>> 1 : a << 3);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/PrimitiveMath.java", "stars": "12", "class": {"name": "PrimitiveMath", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "maskOp", "params": ["int", "long"], "throws": null, "modifiers": ["static"], "return_type": "int", "snippet": "\tstatic int maskOp(int a, long b) {\t\treturn (int) (b & 0x00001111) << a;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/PrimitiveMath.java", "stars": "12", "class": {"name": "PrimitiveMath", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Activity act) {        Intent starter = new Intent(act, AnalyseActivity.class);        act.startActivity(starter);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "AnalyseActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_analyse);        buildTestData();        mViewPager = findViewById(R.id.vp);        mViewPager.setAdapter(new Adapter());        mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                Log.d(TAG, \"onPageSelected() called with: position = [\" + position + \"]\");            }            @Override            public void onPageScrollStateChanged(int state) {            }        });        findViewById(R.id.set_btn).setOnClickListener(this);        findViewById(R.id.smooth_btn).setOnClickListener(this);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "AnalyseActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "buildTestData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void buildTestData() {        for (int i = 0; i < 10; i++) {            mData.add(\"item:\" + i);        }    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "AnalyseActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        int nextInt = new Random().nextInt(mData.size());        switch (v.getId()) {            case R.id.set_btn:                mViewPager.setCurrentItem(nextInt, false);                break;            case R.id.smooth_btn:                mViewPager.setCurrentItem(nextInt, true);                break;        }    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "AnalyseActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getCount() {            return mData.size();        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "isViewFromObject", "params": ["View", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {            return view == object;        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "instantiateItem", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object instantiateItem(@NonNull ViewGroup container, int position) {            Log.d(TAG, \"instantiateItem() called with: position = [\" + position + \"]\");            View itemView = getLayoutInflater().inflate(R.layout.page_item, container, false);            container.addView(itemView);            bindData(position, itemView);            return itemView;        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "bindData", "params": ["int", "View"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void bindData(int position, View itemView) {            TextView tv = itemView.findViewById(R.id.tv);            tv.setText(mData.get(position));        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "destroyItem", "params": ["ViewGroup", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {            Log.d(TAG, \"destroyItem() called with: position = [\" + position + \"]\");            container.removeView((View) object);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItemPosition", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getItemPosition(@NonNull Object object) {            return super.getItemPosition(object);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/AnalyseActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "createRecord", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Record", "snippet": "    public Record createRecord() {        try {            return BufferedRecordTransformerExchanger.RECORD_CLASS.newInstance();        } catch (Exception e) {            throw DataXException.asDataXException(                    FrameworkErrorCode.CONFIG_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/BufferedRecordTransformerExchanger.java", "stars": "23", "class": {"name": "BufferedRecordTransformerExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "sendToWriter", "params": ["Record"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendToWriter(Record record) {        if (shutdown) {            throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"\");        }        Validate.notNull(record, \"record\u4e0d\u80fd\u4e3a\u7a7a.\");        record = doTransformer(record);        if (record == null) {            return;        }        if (record.getMemorySize() > this.byteCapacity) {            this.pluginCollector.collectDirtyRecord(record, new Exception(String.format(\"\u5355\u6761\u8bb0\u5f55\u8d85\u8fc7\u5927\u5c0f\u9650\u5236\uff0c\u5f53\u524d\u9650\u5236\u4e3a:%s\", this.byteCapacity)));            return;        }        boolean isFull = (this.bufferIndex >= this.bufferSize || this.memoryBytes.get() + record.getMemorySize() > this.byteCapacity);        if (isFull) {            flush();        }        this.buffer.add(record);        this.bufferIndex++;        memoryBytes.addAndGet(record.getMemorySize());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/BufferedRecordTransformerExchanger.java", "stars": "23", "class": {"name": "BufferedRecordTransformerExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "flush", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void flush() {        if (shutdown) {            throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"\");        }        this.recordChannel.pushAll(this.buffer);        //\u548cchannel\u7684\u7edf\u8ba1\u4fdd\u6301\u540c\u6b65        doStat();        this.buffer.clear();        this.bufferIndex = 0;        this.memoryBytes.set(0);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/BufferedRecordTransformerExchanger.java", "stars": "23", "class": {"name": "BufferedRecordTransformerExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "terminate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void terminate() {        if (shutdown) {            throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"\");        }        flush();        this.recordChannel.pushTerminate(TerminateRecord.get());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/BufferedRecordTransformerExchanger.java", "stars": "23", "class": {"name": "BufferedRecordTransformerExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "getFromReader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Record", "snippet": "    public Record getFromReader() {        if (shutdown) {            throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"\");        }        boolean isEmpty = (this.bufferIndex >= this.buffer.size());        if (isEmpty) {            receive();        }        Record record = this.buffer.get(this.bufferIndex++);        if (record instanceof TerminateRecord) {            record = null;        }        return record;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/BufferedRecordTransformerExchanger.java", "stars": "23", "class": {"name": "BufferedRecordTransformerExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {        shutdown = true;        buffer.clear();        recordChannel.clear();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/BufferedRecordTransformerExchanger.java", "stars": "23", "class": {"name": "BufferedRecordTransformerExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "receive", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void receive() {        this.recordChannel.pullAll(this.buffer);        this.bufferIndex = 0;        this.bufferSize = this.buffer.size();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/BufferedRecordTransformerExchanger.java", "stars": "23", "class": {"name": "BufferedRecordTransformerExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "getSuperclassTypeParameter", "params": ["Class<?>"], "throws": null, "modifiers": [], "return_type": "Type", "snippet": "  Type getSuperclassTypeParameter(Class<?> clazz) {    Type genericSuperclass = clazz.getGenericSuperclass();    if (genericSuperclass instanceof Class) {      // try to climb up the hierarchy until meet something useful      if (TypeReference.class != genericSuperclass) {        return getSuperclassTypeParameter(clazz.getSuperclass());      }      throw new TypeException(\"'\" + getClass() + \"' extends TypeReference but misses the type parameter. \"        + \"Remove the extension or add a type parameter to it.\");    }    Type rawType = ((ParameterizedType) genericSuperclass).getActualTypeArguments()[0];    // TODO remove this when Reflector is fixed to return Types    if (rawType instanceof ParameterizedType) {      rawType = ((ParameterizedType) rawType).getRawType();    }    return rawType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeReference.java", "stars": "15", "class": {"name": "TypeReference", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getRawType", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Type", "snippet": "  public final Type getRawType() {    return rawType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeReference.java", "stars": "15", "class": {"name": "TypeReference", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return rawType.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeReference.java", "stars": "15", "class": {"name": "TypeReference", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clearAllDefaultCache", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearAllDefaultCache(Context context) {        clearDefaultCache(context, null, null);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "clearDefaultCache", "params": ["Context", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearDefaultCache(Context context, @Nullable File cacheDir, @Nullable String url) {        if (cacheManager != null) {            cacheManager.clearCache(context, cacheDir, url);        } else {            if (getCacheManager() != null) {                getCacheManager().clearCache(context, cacheDir, url);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init() {        mMediaHandler = new MediaHandler((Looper.getMainLooper()));        mainThreadHandler = new Handler();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPlayManager", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "IPlayerManager", "snippet": "    protected IPlayerManager getPlayManager() {        return PlayerFactory.getPlayManager();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCacheManager", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ICacheManager", "snippet": "    protected ICacheManager getCacheManager() {        return CacheFactory.getCacheManager();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "listener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYMediaPlayerListener", "snippet": "    public GSYMediaPlayerListener listener() {        if (listener == null)            return null;        return listener.get();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "lastListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYMediaPlayerListener", "snippet": "    public GSYMediaPlayerListener lastListener() {        if (lastListener == null)            return null;        return lastListener.get();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setListener", "params": ["GSYMediaPlayerListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(GSYMediaPlayerListener listener) {        if (listener == null)            this.listener = null;        else            this.listener = new WeakReference<>(listener);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setLastListener", "params": ["GSYMediaPlayerListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastListener(GSYMediaPlayerListener lastListener) {        if (lastListener == null)            this.lastListener = null;        else            this.lastListener = new WeakReference<>(lastListener);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSpeed", "params": ["float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSpeed(float speed, boolean soundTouch) {        if (playerManager != null) {            playerManager.setSpeed(speed, soundTouch);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "prepare", "params": ["String", "Map<String,String>", "boolean", "float", "boolean", "File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void prepare(String url, Map<String, String> mapHeadData, boolean loop, float speed, boolean cache, File cachePath) {        prepare(url, mapHeadData, loop, speed, cache, cachePath, null);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "prepare", "params": ["String", "Map<String,String>", "boolean", "float", "boolean", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void prepare(final String url, final Map<String, String> mapHeadData, boolean loop, float speed, boolean cache, File cachePath, String overrideExtension) {        if (TextUtils.isEmpty(url)) return;        Message msg = new Message();        msg.what = HANDLER_PREPARE;        GSYModel fb = new GSYModel(url, mapHeadData, loop, speed, cache, cachePath, overrideExtension);        msg.obj = fb;        sendMessage(msg);        if (needTimeOutOther) {            startTimeOutBuffer();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "releaseMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseMediaPlayer() {        Message msg = new Message();        msg.what = HANDLER_RELEASE;        sendMessage(msg);        playTag = \"\";        playPosition = -22;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setDisplay", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDisplay(Surface holder) {        Message msg = new Message();        msg.what = HANDLER_SETDISPLAY;        msg.obj = holder;        showDisplay(msg);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "releaseSurface", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseSurface(Surface holder) {        Message msg = new Message();        msg.what = HANDLER_RELEASE_SURFACE;        msg.obj = holder;        sendMessage(msg);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPrepared", "params": ["IMediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared(IMediaPlayer mp) {        mainThreadHandler.post(new Runnable() {            @Override            public void run() {                cancelTimeOutBuffer();                if (listener() != null) {                    listener().onPrepared();                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "onCompletion", "params": ["IMediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCompletion(IMediaPlayer mp) {        mainThreadHandler.post(new Runnable() {            @Override            public void run() {                cancelTimeOutBuffer();                if (listener() != null) {                    listener().onAutoCompletion();                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "onBufferingUpdate", "params": ["IMediaPlayer", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBufferingUpdate(IMediaPlayer mp, final int percent) {        mainThreadHandler.post(new Runnable() {            @Override            public void run() {                if (listener() != null) {                    if (percent > bufferPoint) {                        listener().onBufferingUpdate(percent);                    } else {                        listener().onBufferingUpdate(bufferPoint);                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "onSeekComplete", "params": ["IMediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSeekComplete(IMediaPlayer mp) {        mainThreadHandler.post(new Runnable() {            @Override            public void run() {                cancelTimeOutBuffer();                if (listener() != null) {                    listener().onSeekComplete();                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "onError", "params": ["IMediaPlayer", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onError(IMediaPlayer mp, final int what, final int extra) {        mainThreadHandler.post(new Runnable() {            @Override            public void run() {                cancelTimeOutBuffer();                if (listener() != null) {                    listener().onError(what, extra);                }            }        });        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "onInfo", "params": ["IMediaPlayer", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onInfo(IMediaPlayer mp, final int what, final int extra) {        mainThreadHandler.post(new Runnable() {            @Override            public void run() {                if (needTimeOutOther) {                    if (what == MediaPlayer.MEDIA_INFO_BUFFERING_START) {                        startTimeOutBuffer();                    } else if (what == MediaPlayer.MEDIA_INFO_BUFFERING_END) {                        cancelTimeOutBuffer();                    }                }                if (listener() != null) {                    listener().onInfo(what, extra);                }            }        });        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "onVideoSizeChanged", "params": ["IMediaPlayer", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVideoSizeChanged(IMediaPlayer mp, int width, int height, int sar_num, int sar_den) {        currentVideoWidth = mp.getVideoWidth();        currentVideoHeight = mp.getVideoHeight();        mainThreadHandler.post(new Runnable() {            @Override            public void run() {                if (listener() != null) {                    listener().onVideoSizeChanged();                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "onCacheAvailable", "params": ["File", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCacheAvailable(File cacheFile, String url, int percentsAvailable) {        bufferPoint = percentsAvailable;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getLastState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLastState() {        return lastState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setLastState", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastState(int lastState) {        this.lastState = lastState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoWidth() {        return currentVideoWidth;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoHeight() {        return currentVideoHeight;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setCurrentVideoHeight", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentVideoHeight(int currentVideoHeight) {        this.currentVideoHeight = currentVideoHeight;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setCurrentVideoWidth", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentVideoWidth(int currentVideoWidth) {        this.currentVideoWidth = currentVideoWidth;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPlayTag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPlayTag() {        return playTag;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setPlayTag", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlayTag(String playTag) {        this.playTag = playTag;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPlayPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPlayPosition() {        return playPosition;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setPlayPosition", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlayPosition(int playPosition) {        this.playPosition = playPosition;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "isCacheFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isCacheFile() {        return cacheManager != null && cacheManager.hadCached();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "cachePreview", "params": ["Context", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean cachePreview(Context context, File cacheDir, String url) {        if (getCacheManager() != null) {            return getCacheManager().cachePreview(context, cacheDir, url);        }        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getNetSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getNetSpeed() {        if (playerManager != null) {            return playerManager.getNetSpeed();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "clearCache", "params": ["Context", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearCache(Context context, File cacheDir, String url) {        clearDefaultCache(context, cacheDir, url);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getBufferedPercentage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBufferedPercentage() {        if (playerManager != null) {            return playerManager.getBufferedPercentage();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSpeedPlaying", "params": ["float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSpeedPlaying(float speed, boolean soundTouch) {        if (playerManager != null) {            playerManager.setSpeedPlaying(speed, soundTouch);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IPlayerManager", "snippet": "    public IPlayerManager getPlayer() {        return playerManager;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        if (playerManager != null) {            playerManager.start();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        if (playerManager != null) {            playerManager.stop();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause() {        if (playerManager != null) {            playerManager.pause();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoWidth() {        if (playerManager != null) {            return playerManager.getVideoWidth();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoHeight() {        if (playerManager != null) {            return playerManager.getVideoHeight();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "isPlaying", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPlaying() {        if (playerManager != null) {            return playerManager.isPlaying();        }        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "seekTo", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seekTo(long time) {        if (playerManager != null) {            playerManager.seekTo(time);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getCurrentPosition() {        if (playerManager != null) {            return playerManager.getCurrentPosition();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getDuration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getDuration() {        if (playerManager != null) {            return playerManager.getDuration();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getVideoSarNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarNum() {        if (playerManager != null) {            return playerManager.getVideoSarNum();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getVideoSarDen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarDen() {        if (playerManager != null) {            return playerManager.getVideoSarDen();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getRotateInfoFlag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getRotateInfoFlag() {        return IMediaPlayer.MEDIA_INFO_VIDEO_ROTATION_CHANGED;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "isSurfaceSupportLockCanvas", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSurfaceSupportLockCanvas() {        if (playerManager != null) {            return playerManager.isSurfaceSupportLockCanvas();        }        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "sendMessage", "params": ["Message"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void sendMessage(Message message) {        mMediaHandler.sendMessage(message);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "initVideo", "params": ["Message"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initVideo(Message msg) {        try {            currentVideoWidth = 0;            currentVideoHeight = 0;            if (playerManager != null) {                playerManager.release();            }            playerManager = getPlayManager();            cacheManager = getCacheManager();            if (cacheManager != null) {                cacheManager.setCacheAvailableListener(this);            }            if (playerManager instanceof BasePlayerManager) {                ((BasePlayerManager) playerManager)                        .setPlayerInitSuccessListener(mPlayerInitSuccessListener);            }            playerManager.initVideoPlayer(context, msg, optionModelList, cacheManager);            setNeedMute(needMute);            IMediaPlayer mediaPlayer = playerManager.getMediaPlayer();            mediaPlayer.setOnCompletionListener(this);            mediaPlayer.setOnBufferingUpdateListener(this);            mediaPlayer.setScreenOnWhilePlaying(true);            mediaPlayer.setOnPreparedListener(this);            mediaPlayer.setOnSeekCompleteListener(this);            mediaPlayer.setOnErrorListener(this);            mediaPlayer.setOnInfoListener(this);            mediaPlayer.setOnVideoSizeChangedListener(this);            mediaPlayer.prepareAsync();        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "startTimeOutBuffer", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void startTimeOutBuffer() {        // \u542f\u52a8\u5b9a\u65f6        Debuger.printfError(\"startTimeOutBuffer\");        mainThreadHandler.postDelayed(mTimeOutRunnable, timeOut);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "cancelTimeOutBuffer", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cancelTimeOutBuffer() {        Debuger.printfError(\"cancelTimeOutBuffer\");        // \u53d6\u6d88\u5b9a\u65f6        if (needTimeOutOther)            mainThreadHandler.removeCallbacks(mTimeOutRunnable);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "releaseSurface", "params": ["Message"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void releaseSurface(Message msg) {        if (msg.obj != null) {            if (playerManager != null) {                playerManager.releaseSurface();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "showDisplay", "params": ["Message"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showDisplay(Message msg) {        if (playerManager != null) {            playerManager.showDisplay(msg);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "initContext", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initContext(Context context) {        this.context = context.getApplicationContext();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "enableRawPlay", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enableRawPlay(Context context) {        this.context = context.getApplicationContext();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getOptionModelList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<VideoOptionModel>", "snippet": "    public List<VideoOptionModel> getOptionModelList() {        return optionModelList;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOptionModelList", "params": ["List<VideoOptionModel>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOptionModelList(List<VideoOptionModel> optionModelList) {        this.optionModelList = optionModelList;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "isNeedMute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNeedMute() {        return needMute;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setNeedMute", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNeedMute(boolean needMute) {        this.needMute = needMute;        if (playerManager != null) {            playerManager.setNeedMute(needMute);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getTimeOut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTimeOut() {        return timeOut;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "isNeedTimeOutOther", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNeedTimeOutOther() {        return needTimeOutOther;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setTimeOut", "params": ["int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimeOut(int timeOut, boolean needTimeOutOther) {        this.timeOut = timeOut;        this.needTimeOutOther = needTimeOutOther;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurPlayerManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IPlayerManager", "snippet": "    public IPlayerManager getCurPlayerManager() {        return playerManager;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurCacheManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ICacheManager", "snippet": "    public ICacheManager getCurCacheManager() {        return cacheManager;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPlayerPreparedSuccessListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IPlayerInitSuccessListener", "snippet": "    public IPlayerInitSuccessListener getPlayerPreparedSuccessListener() {        return mPlayerInitSuccessListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "setPlayerInitSuccessListener", "params": ["IPlayerInitSuccessListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlayerInitSuccessListener(IPlayerInitSuccessListener listener) {        this.mPlayerInitSuccessListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "GSYVideoBaseManager", "extends": null, "implements": ["IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "IMediaPlayer", "ICacheManager", "GSYVideoViewBridge"], "modifiers": ["public", "abstract"]}}, {"method_name": "handleMessage", "params": ["Message"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void handleMessage(Message msg) {            super.handleMessage(msg);            switch (msg.what) {                case HANDLER_PREPARE:                    initVideo(msg);                    break;                case HANDLER_SETDISPLAY:                    break;                case HANDLER_RELEASE:                    if (playerManager != null) {                        playerManager.release();                    }                    if (cacheManager != null) {                        cacheManager.release();                    }                    bufferPoint = 0;                    setNeedMute(false);                    cancelTimeOutBuffer();                    break;                case HANDLER_RELEASE_SURFACE:                    releaseSurface(msg);                    break;            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYVideoBaseManager.java", "stars": "2", "class": {"name": "MediaHandler", "extends": "Handler", "implements": null, "modifiers": ["private"]}}, {"method_name": "connectController", "params": ["Controller"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connectController(Controller controller) {        this.controller = controller;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractKeyboard.java", "stars": "4", "class": {"name": "AbstractKeyboard", "extends": null, "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "disconnectController", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnectController() {        this.controller = null;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractKeyboard.java", "stars": "4", "class": {"name": "AbstractKeyboard", "extends": null, "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "keyPressed", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyPressed(int keycode) {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractKeyboard.java", "stars": "4", "class": {"name": "AbstractKeyboard", "extends": null, "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "keyReleased", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyReleased(int keycode) {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractKeyboard.java", "stars": "4", "class": {"name": "AbstractKeyboard", "extends": null, "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute() {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractKeyboard.java", "stars": "4", "class": {"name": "AbstractKeyboard", "extends": null, "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractKeyboard.java", "stars": "4", "class": {"name": "AbstractKeyboard", "extends": null, "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "loadState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadState(StateSet ss) {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractKeyboard.java", "stars": "4", "class": {"name": "AbstractKeyboard", "extends": null, "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "saveState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveState(StateSet ss) {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractKeyboard.java", "stars": "4", "class": {"name": "AbstractKeyboard", "extends": null, "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": ["Context", "AttributeSet", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(Context context, AttributeSet attrs, int defStyle) {        final TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ScrimInsetsView, defStyle, 0);        if (a == null) {            return;        }        mInsetForeground = a.getDrawable(R.styleable.ScrimInsetsView_insetForegroundColor);        a.recycle();        setWillNotDraw(true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ScrimInsetsFrameLayout.java", "stars": "4", "class": {"name": "ScrimInsetsFrameLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "fitSystemWindows", "params": ["Rect"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean fitSystemWindows(Rect insets) {        mInsets = new Rect(insets);        setWillNotDraw(mInsetForeground == null);        ViewCompat.postInvalidateOnAnimation(this);        if (mOnInsetsCallback != null) {            mOnInsetsCallback.onInsetsChanged(insets);        }        return true; // consume insets    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ScrimInsetsFrameLayout.java", "stars": "4", "class": {"name": "ScrimInsetsFrameLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": ["Canvas"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void draw(Canvas canvas) {        super.draw(canvas);        int width = getWidth();        int height = getHeight();        if (mInsets != null && mInsetForeground != null) {            int sc = canvas.save();            canvas.translate(getScrollX(), getScrollY());            // Top            mTempRect.set(0, 0, width, mInsets.top);            mInsetForeground.setBounds(mTempRect);            mInsetForeground.draw(canvas);            // Bottom            mTempRect.set(0, height - mInsets.bottom, width, height);            mInsetForeground.setBounds(mTempRect);            mInsetForeground.draw(canvas);            // Left            mTempRect.set(0, mInsets.top, mInsets.left, height - mInsets.bottom);            mInsetForeground.setBounds(mTempRect);            mInsetForeground.draw(canvas);            // Right            mTempRect.set(width - mInsets.right, mInsets.top, width, height - mInsets.bottom);            mInsetForeground.setBounds(mTempRect);            mInsetForeground.draw(canvas);            canvas.restoreToCount(sc);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ScrimInsetsFrameLayout.java", "stars": "4", "class": {"name": "ScrimInsetsFrameLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        if (mInsetForeground != null) {            mInsetForeground.setCallback(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ScrimInsetsFrameLayout.java", "stars": "4", "class": {"name": "ScrimInsetsFrameLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();        if (mInsetForeground != null) {            mInsetForeground.setCallback(null);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ScrimInsetsFrameLayout.java", "stars": "4", "class": {"name": "ScrimInsetsFrameLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnInsetsCallback", "params": ["OnInsetsCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnInsetsCallback(OnInsetsCallback onInsetsCallback) {        mOnInsetsCallback = onInsetsCallback;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ScrimInsetsFrameLayout.java", "stars": "4", "class": {"name": "ScrimInsetsFrameLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/Record.java", "stars": "15", "class": {"name": "Record", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/Record.java", "stars": "15", "class": {"name": "Record", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "  public LocalDateTime getTs() {    return ts;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/Record.java", "stars": "15", "class": {"name": "Record", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTs", "params": ["LocalDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTs(LocalDateTime ts) {    this.ts = ts;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/Record.java", "stars": "15", "class": {"name": "Record", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getD", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDate", "snippet": "  public LocalDate getD() {    return d;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/Record.java", "stars": "15", "class": {"name": "Record", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setD", "params": ["LocalDate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setD(LocalDate d) {    this.d = d;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/Record.java", "stars": "15", "class": {"name": "Record", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return mData.size();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/EpisodeListAdapter.java", "stars": "4", "class": {"name": "EpisodeListAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Episode", "snippet": "    public Episode getItem(int position) {        return mData.get(position);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/EpisodeListAdapter.java", "stars": "4", "class": {"name": "EpisodeListAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return position;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/EpisodeListAdapter.java", "stars": "4", "class": {"name": "EpisodeListAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        ViewHolder holder;        if (convertView == null) {            convertView = mInflater.inflate(R.layout.episode_list_item, parent, false);            holder = new ViewHolder(convertView);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        Episode episode = getItem(position);        if (!TextUtils.isEmpty(episode.title))            holder.title.setText(episode.title);        else            holder.title.setText(R.string.no_title_available);        holder.number.setText(\"E\" + episode.episode);        holder.number.setTextColor(mColor);        return convertView;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/EpisodeListAdapter.java", "stars": "4", "class": {"name": "EpisodeListAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUrl() {        return mUrl;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/manager/youtube/model/VideoStream.java", "stars": "4", "class": {"name": "VideoStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\t\tView view = inflater.inflate(R.layout.fragment_blue, container, false);\t\treturn view;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ViewPagerDemo/src/pl/looksok/viewpagerdemo/FragmentBlue.java", "stars": "74", "class": {"name": "FragmentBlue", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void setup() {        MockitoAnnotations.initMocks(this);        final MessageController messageController = new MessageController(messageService);        this.restMessageMockMvc = MockMvcBuilders.standaloneSetup(messageController)            .setCustomArgumentResolvers(pageableArgumentResolver)            .setControllerAdvice(exceptionTranslator)            .setConversionService(createFormattingConversionService())            .setMessageConverters(jacksonMessageConverter)            .setValidator(validator).build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createEntity", "params": ["EntityManager"], "throws": null, "modifiers": ["static"], "return_type": "Message", "snippet": "    static Message createEntity(EntityManager em) {        return new Message()            .content(DEFAULT_CONTENT)            .type(DEFAULT_TYPE);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveUser", "params": ["String", "String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "User", "snippet": "    private User saveUser(String login, String fName, String lName, String email) {        User user = new User();        user.setLogin(login);        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setBankAccountIBAN(DEFAULT_IBAN);        user.setFirstName(fName);        user.setLastName(lName);        user.setEmail(email);        return userRepository.save(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessage", "params": ["String", "User", "User", "UUID"], "throws": null, "modifiers": ["private", "static"], "return_type": "Message", "snippet": "    private static Message createMessage(String content, User from, User to, UUID thread) {        Message message = new Message();        message.setContent(content);        message.setUserFrom(from);        message.setUserTo(to);        message.setThread(thread);        message.setType(DEFAULT_TYPE);        return message;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initTest", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void initTest() {        message = createEntity(em);        defaultUser = saveUser(DEFAULT_LOGIN, DEFAULT_FIRSTNAME, DEFAULT_LASTNAME, DEFAULT_EMAIL);        user2 = saveUser(USER2_LOGIN, \"Randy\", \"Marsh\", \"rm@sp.com\");        user3 = saveUser(USER3_LOGIN, \"Towel\", \"Wet\", \"twl@tegr.com\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessage", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createMessage() throws Exception {        int databaseSizeBeforeCreate = messageRepository.findAll().size();        Message newMsg = createMessage(DEFAULT_CONTENT, defaultUser, user2, null);        // Create the Message        MessageDTO messageDTO = messageMapper.toDto(newMsg);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isCreated());        // Validate the Message in the database        List<Message> messageList = messageRepository.findAll();        assertThat(messageList).hasSize(databaseSizeBeforeCreate + 1);        Message testMessage = messageList.get(messageList.size() - 1);        assertThat(testMessage.getContent()).isEqualTo(DEFAULT_CONTENT);        assertThat(testMessage.getType()).isEqualTo(DEFAULT_TYPE);        assertThat(testMessage.getUserFrom().getId()).isEqualTo(defaultUser.getId());        assertThat(testMessage.getUserTo().getId()).isEqualTo(user2.getId());        assertThat(testMessage.getThread()).isNotNull();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessageAsOtherUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createMessageAsOtherUser() throws Exception {        Message newMsg = createMessage(DEFAULT_CONTENT, defaultUser, user2, null);        MessageDTO messageDTO = messageMapper.toDto(newMsg);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isForbidden());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessageWithoutUserTo", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createMessageWithoutUserTo() throws Exception {        MessageDTO messageDTO = new MessageDTO();        messageDTO.setUserFrom(simpleUserMapper.toDTO(defaultUser));        messageDTO.setUserTo(null);        messageDTO.setContent(DEFAULT_CONTENT);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createEmptyMessage", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createEmptyMessage() throws Exception {        MessageDTO messageDTO = new MessageDTO();        messageDTO.setUserFrom(simpleUserMapper.toDTO(defaultUser));        messageDTO.setUserTo(simpleUserMapper.toDTO(user2));        messageDTO.setContent(\"\");        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createHugeMessage", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createHugeMessage() throws Exception {        MessageDTO messageDTO = new MessageDTO();        messageDTO.setUserFrom(simpleUserMapper.toDTO(defaultUser));        messageDTO.setUserTo(simpleUserMapper.toDTO(user2));        byte[] array = new byte[2002]; //Worst-case in UTF-8 is 8004        new Random().nextBytes(array);        String hugeContent = new String(array, StandardCharsets.US_ASCII);        messageDTO.setContent(hugeContent);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessageWithInvalidUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createMessageWithInvalidUser() throws Exception {        MessageDTO messageDTO = new MessageDTO();        messageDTO.setUserFrom(simpleUserMapper.toDTO(defaultUser));        SimpleUserDTO invalidUser = new SimpleUserDTO();        invalidUser.setLogin(user2.getLogin());        messageDTO.setUserTo(invalidUser);        messageDTO.setContent(DEFAULT_CONTENT);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessageWithUserIdsOnly", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createMessageWithUserIdsOnly() throws Exception {        int databaseSizeBeforeCreate = messageRepository.findAll().size();        MessageDTO messageDTO = new MessageDTO();        SimpleUserDTO fromUser = new SimpleUserDTO();        fromUser.setId(defaultUser.getId());        messageDTO.setUserFrom(fromUser);        SimpleUserDTO toUser = new SimpleUserDTO();        toUser.setId(user2.getId());        messageDTO.setUserTo(toUser);        messageDTO.setContent(DEFAULT_CONTENT);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isCreated());        // Validate the Message in the database        List<Message> messageList = messageRepository.findAll();        assertThat(messageList).hasSize(databaseSizeBeforeCreate + 1);        Message testMessage = messageList.get(messageList.size() - 1);        assertThat(testMessage.getContent()).isEqualTo(DEFAULT_CONTENT);        assertThat(testMessage.getType()).isEqualTo(DEFAULT_TYPE);        assertThat(testMessage.getUserFrom().getId()).isEqualTo(defaultUser.getId());        assertThat(testMessage.getUserTo().getId()).isEqualTo(user2.getId());        assertThat(testMessage.getThread()).isNotNull();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessageAsAnonymousUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createMessageAsAnonymousUser() throws Exception {        Message newMsg = createMessage(DEFAULT_CONTENT, defaultUser, user2, null);        MessageDTO messageDTO = messageMapper.toDto(newMsg);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isUnauthorized());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessageBackInTime", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createMessageBackInTime() throws Exception {        int databaseSizeBeforeCreate = messageRepository.findAll().size();        Message timeTravelMessage = createMessage(DEFAULT_CONTENT, defaultUser, user2, null);        timeTravelMessage.setCreatedDate(Instant.now().minus(1, ChronoUnit.DAYS));        MessageDTO messageDTO = messageMapper.toDto(timeTravelMessage);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isCreated());        List<Message> messageList = messageRepository.findAll();        assertThat(messageList).hasSize(databaseSizeBeforeCreate + 1);        Message testMessage = messageList.get(messageList.size() - 1);        assertThat(testMessage.getContent()).isEqualTo(DEFAULT_CONTENT);        assertThat(testMessage.getType()).isEqualTo(DEFAULT_TYPE);        assertThat(testMessage.getUserFrom().getId()).isEqualTo(defaultUser.getId());        assertThat(testMessage.getUserTo().getId()).isEqualTo(user2.getId());        assertThat(testMessage.getThread()).isNotNull();        assertThat(testMessage.getCreatedDate()).isAfter(Instant.now().minus(10, ChronoUnit.MINUTES));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createTwoMessagesSameThread", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createTwoMessagesSameThread() throws Exception {        int databaseSizeBeforeCreate = messageRepository.findAll().size();        Message newMsg = createMessage(DEFAULT_CONTENT, defaultUser, user2, null);        // Create the first Message        MessageDTO messageDTO = messageMapper.toDto(newMsg);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isCreated());        // Validate the Message in the database        List<Message> messageList = messageRepository.findAll();        assertThat(messageList).hasSize(databaseSizeBeforeCreate + 1);        Message testMessage = messageList.get(messageList.size() - 1);        UUID createdThread = testMessage.getThread();        //Create the second Message with wrong UUID        Message msg2 = createMessage(\"Message 2\", defaultUser, user2, UUID.randomUUID());        MessageDTO message2DTO = messageMapper.toDto(msg2);        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(message2DTO)))            .andExpect(status().isCreated());        messageList = messageRepository.findAll();        assertThat(messageList).hasSize(databaseSizeBeforeCreate + 2);        testMessage = messageList.get(messageList.size() - 1);        assertThat(testMessage.getThread()).isEqualTo(createdThread);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSingleThread", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getSingleThread() throws Exception {        UUID thread1 = UUID.randomUUID();        Message newMsg = createMessage(DEFAULT_CONTENT, defaultUser, user2, thread1);        Message msg2 = createMessage(\"Message 2\", user2, defaultUser, thread1);        Message msg3 = createMessage(\"Message 3\", defaultUser, user3, UUID.randomUUID());        messageRepository.save(newMsg);        messageRepository.save(msg2);        messageRepository.saveAndFlush(msg3);        restMessageMockMvc.perform(get(\"/api/v1/messages/thread/\" + thread1 + \"?sort=createdDate,desc\"))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content[*].content\").value(hasItem(DEFAULT_CONTENT)))            .andExpect(jsonPath(\"$.content[*].content\").value(hasItem(\"Message 2\")))            .andExpect(jsonPath(\"$.content.length()\").value(2))            .andExpect(jsonPath(\"$.content[*].type\").value(hasItem(DEFAULT_TYPE.toString())))            .andReturn();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markThreadOpened", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void markThreadOpened() throws Exception {        UUID thread1 = UUID.randomUUID();        Message newMsg = createMessage(DEFAULT_CONTENT, defaultUser, user2, thread1);        newMsg.setOpened(false);        Message msg2 = createMessage(\"Message 2\", user2, defaultUser, thread1);        msg2.setOpened(false);        Message msg3 = createMessage(\"Message 3\", user3, defaultUser, UUID.randomUUID());        msg3.setOpened(false);        messageRepository.save(newMsg);        messageRepository.save(msg2);        messageRepository.saveAndFlush(msg3);        restMessageMockMvc.perform(put(\"/api/v1/messages/thread/\" + thread1))            .andExpect(status().isOk())            .andReturn();        Message testMsg = messageRepository.getOne(msg2.getId());        assertThat(testMsg.getOpened()).isTrue();        testMsg = messageRepository.getOne(newMsg.getId());        assertThat(testMsg.getOpened()).isFalse();        testMsg = messageRepository.getOne(msg3.getId());        assertThat(testMsg.getOpened()).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markSystemMessagesOpened", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void markSystemMessagesOpened() throws Exception {        UUID thread1 = UUID.randomUUID();        Message newMsg = createMessage(DEFAULT_CONTENT, defaultUser, user2, thread1);        newMsg.setOpened(false);        Message msg2 = createMessage(\"Message 2\", user2, defaultUser, thread1);        msg2.setOpened(false);        Message msg3 = createMessage(\"Message 3\", user3, defaultUser, UUID.randomUUID());        msg3.setOpened(false);        msg3.setType(MessageType.SYSTEM_LEASING_OPEN);        messageRepository.save(newMsg);        messageRepository.save(msg2);        messageRepository.saveAndFlush(msg3);        restMessageMockMvc.perform(put(\"/api/v1/messages/unread/system\"))            .andExpect(status().isOk())            .andReturn();        Message testMsg = messageRepository.getOne(msg2.getId());        assertThat(testMsg.getOpened()).isFalse();        testMsg = messageRepository.getOne(newMsg.getId());        assertThat(testMsg.getOpened()).isFalse();        testMsg = messageRepository.getOne(msg3.getId());        assertThat(testMsg.getOpened()).isTrue();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastUnreeadMessagePerThread", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLastUnreeadMessagePerThread() throws Exception {        UUID thread1 = UUID.randomUUID();        Message newMsg = createMessage(DEFAULT_CONTENT, defaultUser, user2, thread1);        newMsg.setOpened(false);        Message msg2 = createMessage(\"Message 2\", user2, defaultUser, thread1);        msg2.setOpened(false);        Message msg3 = createMessage(\"Message 3\", user3, defaultUser, UUID.randomUUID());        msg3.setOpened(false);        messageRepository.save(newMsg);        messageRepository.save(msg2);        messageRepository.saveAndFlush(msg3);        restMessageMockMvc.perform(get(\"/api/v1/messages/unread/?sort=createdDate,desc\"))            .andDo(print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.length()\").value(2))            .andExpect(jsonPath(\"$[*].content\").value(hasItem(\"Message 3\")))            .andExpect(jsonPath(\"$[*].content\").value(hasItem(\"Message 2\")))            .andExpect(jsonPath(\"$[*].type\").value(hasItem(DEFAULT_TYPE.toString())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllThreads", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllThreads() throws Exception {        UUID thread1 = UUID.randomUUID();        Message msg1 = createMessage(DEFAULT_CONTENT, defaultUser, user2, thread1);        Message msg2 = createMessage(\"Message 2\", user2, defaultUser, thread1);        Message msg3 = createMessage(\"Message 3\", defaultUser, user3, UUID.randomUUID());        msg1.setCreatedDate(Instant.now().minus(2, ChronoUnit.DAYS));        msg2.setCreatedDate(Instant.now().minus(1, ChronoUnit.DAYS));        messageRepository.save(msg1);        messageRepository.save(msg2);        messageRepository.saveAndFlush(msg3);        restMessageMockMvc.perform(get(\"/api/v1/messages?sort=createdDate,desc\"))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content.length()\").value(2))            .andExpect(jsonPath(\"$.content[*].content\").value(hasItem(\"Message 3\")))            .andExpect(jsonPath(\"$.content[*].content\").value(hasItem(\"Message 2\")))            .andExpect(jsonPath(\"$.content[*].type\").value(hasItem(DEFAULT_TYPE.toString())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getForeignUserThread", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getForeignUserThread() throws Exception {        UUID thread1 = UUID.randomUUID();        Message newMsg = createMessage(DEFAULT_CONTENT, defaultUser, user2, thread1);        messageRepository.saveAndFlush(newMsg);        restMessageMockMvc.perform(get(\"/api/v1/messages/thread/\" + thread1 + \"?sort=createdDate,desc\"))            .andExpect(status().isForbidden());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllThreadsAsAnonymousUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllThreadsAsAnonymousUser() throws Exception {        restMessageMockMvc.perform(get(\"/api/v1/messages?sort=createdDate,desc\"))            .andExpect(status().isUnauthorized());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMessage() throws Exception {        // Initialize the database        messageRepository.saveAndFlush(message);        // Get the message        restMessageMockMvc.perform(get(\"/api/v1/messages/{id}\", message.getId()))            .andExpect(status().isNotFound());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessageWithScriptTags", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createMessageWithScriptTags() throws Exception {        MessageDTO messageDTO = new MessageDTO();        messageDTO.setUserFrom(simpleUserMapper.toDTO(defaultUser));        messageDTO.setUserTo(simpleUserMapper.toDTO(user2));        messageDTO.setContent(\"<script>alert('XSS');</script>\");        restMessageMockMvc.perform(post(\"/api/v1/messages\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(messageDTO)))            .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/MessageControllerIT.java", "stars": "2", "class": {"name": "MessageControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "render", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void render(float scale) {        GlStateManager.pushMatrix();        GlStateManager.enableAlpha();        GlStateManager.color(r, g, b, a);        super.render(scale);        GlStateManager.disableAlpha();        GlStateManager.popMatrix();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Render/RecolorableModels.java", "stars": "2", "class": {"name": "RecolorableModels", "extends": "ModelRenderer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setColor", "params": ["float", "float", "float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setColor(float r, float g, float b, float a) {        this.r = r;        this.g = g;        this.b = b;        this.a = a;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Render/RecolorableModels.java", "stars": "2", "class": {"name": "RecolorableModels", "extends": "ModelRenderer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Api", "snippet": "    public static Api getInstance() {        return ApiSingle.api;    }", "url": "https://raw.githubusercontent.com/guozaizai/myHttpSdkDemo/master/app/src/main/java/myapp/com/xm/myapplication/Api.java", "stars": "9", "class": {"name": "Api", "extends": "BaseApi", "implements": null, "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ApiService", "snippet": "    public static ApiService getApi() {        return getInstance().getDefault();    }", "url": "https://raw.githubusercontent.com/guozaizai/myHttpSdkDemo/master/app/src/main/java/myapp/com/xm/myapplication/Api.java", "stars": "9", "class": {"name": "Api", "extends": "BaseApi", "implements": null, "modifiers": ["public"]}}, {"method_name": "clearApiService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearApiService() {        if (service != null) service = null;    }", "url": "https://raw.githubusercontent.com/guozaizai/myHttpSdkDemo/master/app/src/main/java/myapp/com/xm/myapplication/Api.java", "stars": "9", "class": {"name": "Api", "extends": "BaseApi", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDefault", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ApiService", "snippet": "    public ApiService getDefault() {        return service == null ? service = getRetrofit().create(ApiService.class) : service;    }", "url": "https://raw.githubusercontent.com/guozaizai/myHttpSdkDemo/master/app/src/main/java/myapp/com/xm/myapplication/Api.java", "stars": "9", "class": {"name": "Api", "extends": "BaseApi", "implements": null, "modifiers": ["public"]}}, {"method_name": "lengthOfLongestSubstring", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int lengthOfLongestSubstring(String s) {        int ans = 0;        Map<Character, Integer> indices = new HashMap<>();        for (int j = 0, i = 0; j < s.length(); j ++) {            if (indices.containsKey(s.charAt(j))) {                i = Math.max(indices.get(s.charAt(j)), i);            }            ans = Math.max(ans, j - i + 1);            indices.put(s.charAt(j), j + 1);        }        return ans;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/LongestSubstringWithoutRepeatingCharacters.java", "stars": "1", "class": {"name": "LongestSubstringWithoutRepeatingCharacters", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(),        PgContainer.getUnpooledDataSource());    configuration.setEnvironment(environment);    configuration.addMapper(Mapper.class);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),      \"org/apache/ibatis/submitted/cursor_simple/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/PostgresCursorTest.java", "stars": "15", "class": {"name": "PostgresCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldBeAbleToReuseStatement", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldBeAbleToReuseStatement() throws IOException {    // #1351    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.REUSE)) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        Cursor<User> usersCursor = mapper.getAllUsers();        Iterator<User> iterator = usersCursor.iterator();        User user = iterator.next();        assertEquals(\"User1\", user.getName());        usersCursor.close();      }      {        Cursor<User> usersCursor = mapper.getAllUsers();        Iterator<User> iterator = usersCursor.iterator();        User user = iterator.next();        assertEquals(\"User1\", user.getName());        usersCursor.close();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/PostgresCursorTest.java", "stars": "15", "class": {"name": "PostgresCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "singleNumber", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int singleNumber(int[] arr) {        int xor = 0;        for(int i = 0; i < arr.length; i ++) {            xor ^= arr[i];        }        return xor;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/SingleNumber.java", "stars": "1", "class": {"name": "SingleNumber", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "wechatUserCallback", "params": ["String", "String", "HttpServletResponse", "HashMap<String,Object>", "Model", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String wechatUserCallback(@RequestParam(value = \"code\", required = true) String code, @RequestParam(value = \"state\") String state, HttpServletResponse response, HashMap<String, Object> map, Model model, HttpServletRequest request) {        logger.info(\"=====\u62ff\u5230code=====\");        if (code == null) {            //model.addAttribute(\"msg\", \"\u7528\u6237\u6388\u6743\u5931\u8d25 \u672a\u83b7\u53d6\u5230code\");            return \"error\";        }        logger.info(code);        logger.info(\"=====\u62ff\u5230\u6388\u6743\u5e26\u53c2 state=====\");        if (state == null) {            //\u5904\u7406\u6388\u6743\u4e8c\u7ef4\u7801\u5e26\u53c2  state            return \"error\";        }        logger.info(state);        User user = userService.saveWeChatUser(code, weChatConfig.getAppId(), weChatConfig.getSecret());        //\u5224\u65ad\u662f\u5426\u53d6\u5230\u7528\u6237\u4fe1\u606f          if (user == null) {            //\u83b7\u53d6\u5931\u8d25 \u8fd4\u56de\u5931\u8d25\u4fe1\u606f\u5230 error.html            logger.info(\"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5931\u8d25\");            model.addAttribute(\"msg\", \"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5931\u8d25\");            return \"error\";        } else {            //true \u50a8\u5b58\u5230session\u4e2d\uff0c\u5e76\u4f20\u503c\u5230index.html            request.getSession().setAttribute(\"user\", user.getName());            request.getSession().setAttribute(\"image\", user.getHeadImg());            map.put(\"user\", user.getName());            map.put(\"headimg\", user.getHeadImg());            return \"index\";        }    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/controller/OauthController.java", "stars": "2", "class": {"name": "OauthController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getId() {    return id;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Long id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUrl() {    return url;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUrl(String url) {    this.url = url;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLandDomain", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLandDomain() {    return landDomain;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLandDomain", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "UrlVO", "snippet": "  public UrlVO setLandDomain(String landDomain) {    this.landDomain = landDomain;    return this;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getScheme", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getScheme() {    return scheme;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setScheme", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "UrlVO", "snippet": "  public UrlVO setScheme(String scheme) {    this.scheme = scheme;    return this;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getVisitType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getVisitType() {    return visitType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setVisitType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setVisitType(String visitType) {    this.visitType = visitType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGroupId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getGroupId() {    return groupId;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGroupId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setGroupId(String groupId) {    this.groupId = groupId;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGroupName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getGroupName() {    return groupName;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGroupName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setGroupName(String groupName) {    this.groupName = groupName;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getStatus() {    return status;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setStatus(String status) {    this.status = status;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getRequestUri", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRequestUri() {    return requestUri;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setRequestUri", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRequestUri(String requestUri) {    this.requestUri = requestUri;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getWeiboShortUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getWeiboShortUrl() {    return weiboShortUrl;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setWeiboShortUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setWeiboShortUrl(String weiboShortUrl) {    this.weiboShortUrl = weiboShortUrl;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getVisitTimes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getVisitTimes() {    return visitTimes;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setVisitTimes", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setVisitTimes(String visitTimes) {    this.visitTimes = visitTimes;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLastVisitDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLastVisitDate() {    return lastVisitDate;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLastVisitDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLastVisitDate(String lastVisitDate) {    this.lastVisitDate = lastVisitDate;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCheckTimes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCheckTimes() {    return checkTimes;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCheckTimes", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCheckTimes(String checkTimes) {    this.checkTimes = checkTimes;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLastCheckDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLastCheckDate() {    return lastCheckDate;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLastCheckDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLastCheckDate(String lastCheckDate) {    this.lastCheckDate = lastCheckDate;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getTitle() {    return title;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTitle(String title) {    this.title = title;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getKeywords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getKeywords() {    return keywords;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setKeywords", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setKeywords(String keywords) {    this.keywords = keywords;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDescription() {    return description;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDescription(String description) {    this.description = description;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getShortDomainId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getShortDomainId() {    return shortDomainId;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setShortDomainId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setShortDomainId(String shortDomainId) {    this.shortDomainId = shortDomainId;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getShortDomainType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getShortDomainType() {    return shortDomainType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setShortDomainType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setShortDomainType(String shortDomainType) {    this.shortDomainType = shortDomainType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCndUrlId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCndUrlId() {    return cndUrlId;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCndUrlId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCndUrlId(String cndUrlId) {    this.cndUrlId = cndUrlId;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) return true;    if (!(o instanceof UrlVO)) return false;    UrlVO urlVO = (UrlVO) o;    return Objects.equals(getId(), urlVO.getId()) &&            Objects.equals(getUrl(), urlVO.getUrl()) &&            Objects.equals(getScheme(), urlVO.getScheme()) &&            Objects.equals(getLandDomain(), urlVO.getLandDomain()) &&            Objects.equals(getVisitType(), urlVO.getVisitType()) &&            Objects.equals(getGroupId(), urlVO.getGroupId()) &&            Objects.equals(getGroupName(), urlVO.getGroupName()) &&            Objects.equals(getShortDomainId(), urlVO.getShortDomainId()) &&            Objects.equals(getShortDomainType(), urlVO.getShortDomainType()) &&            Objects.equals(getStatus(), urlVO.getStatus()) &&            Objects.equals(getCndUrlId(), urlVO.getCndUrlId()) &&            Objects.equals(getRequestUri(), urlVO.getRequestUri()) &&            Objects.equals(getWeiboShortUrl(), urlVO.getWeiboShortUrl()) &&            Objects.equals(getVisitTimes(), urlVO.getVisitTimes()) &&            Objects.equals(getLastVisitDate(), urlVO.getLastVisitDate()) &&            Objects.equals(getCheckTimes(), urlVO.getCheckTimes()) &&            Objects.equals(getLastCheckDate(), urlVO.getLastCheckDate()) &&            Objects.equals(getTitle(), urlVO.getTitle()) &&            Objects.equals(getKeywords(), urlVO.getKeywords()) &&            Objects.equals(getDescription(), urlVO.getDescription());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(getId(), getUrl(), getScheme(), getLandDomain(), getVisitType(), getGroupId(), getGroupName(), getShortDomainId(), getShortDomainType(), getStatus(), getCndUrlId(), getRequestUri(), getWeiboShortUrl(), getVisitTimes(), getLastVisitDate(), getCheckTimes(), getLastCheckDate(), getTitle(), getKeywords(), getDescription());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/UrlVO.java", "stars": "2", "class": {"name": "UrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "initPbos", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initPbos(int count)    {        this.pbos = new int[count];        for (int i = 0; i < pbos.length; i++)        {            this.pbos[i] = createPbo();        }    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/PBOManager.java", "stars": "5", "class": {"name": "PBOManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPbo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int createPbo()    {        int pbo = GL15.glGenBuffers();        GL15.glBindBuffer(GL21.GL_PIXEL_PACK_BUFFER, pbo);        GL15.glBufferData(GL21.GL_PIXEL_PACK_BUFFER, width * height * BYTES_PER_PIXEL, GL15.GL_STREAM_READ);        GL15.glBindBuffer(GL21.GL_PIXEL_PACK_BUFFER, 0);        return pbo;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/PBOManager.java", "stars": "5", "class": {"name": "PBOManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readPixelData", "params": ["Framebuffer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readPixelData(Framebuffer framebuffer)    {        GL11.glPixelStorei(GL11.GL_PACK_ALIGNMENT, 1);        GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT, 1);        GL30.glBindFramebuffer(GL30.GL_READ_FRAMEBUFFER, framebuffer.fbo);        GL30.glBindFramebuffer(GL30.GL_DRAW_FRAMEBUFFER, drawBuffer.fbo);        GL30.glBlitFramebuffer(0, 0, framebuffer.viewportWidth, framebuffer.viewportHeight, 0, framebuffer.viewportHeight, framebuffer.viewportWidth, 0, GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT, GL11.GL_NEAREST);        GL30.glBindBuffer(GL30.GL_PIXEL_PACK_BUFFER, this.pbos[this.index]);        drawBuffer.beginRead();        GL11.glGetTexImage(GL11C.GL_TEXTURE_2D, 0, GL11C.GL_RGBA, GL11C.GL_UNSIGNED_BYTE, 0);        drawBuffer.endRead();        GL15.glBindBuffer(GL21.GL_PIXEL_PACK_BUFFER, this.pbos[this.nextIndex]);        buffer = GL15.glMapBuffer(GL21.GL_PIXEL_PACK_BUFFER, GL15.GL_READ_ONLY, buffer);        GL15.glUnmapBuffer(GL21.GL_PIXEL_PACK_BUFFER);        GL15.glBindBuffer(GL21.GL_PIXEL_PACK_BUFFER, 0);        this.index = (this.index + 1) % 2;        this.nextIndex = (this.index + 1) % 2;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/PBOManager.java", "stars": "5", "class": {"name": "PBOManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanUp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cleanUp()    {        GL15.glBindBuffer(GL21.GL_PIXEL_PACK_BUFFER, 0);        for (int pbo : this.pbos)        {            GL15.glDeleteBuffers(pbo);        }        drawBuffer.delete();    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/PBOManager.java", "stars": "5", "class": {"name": "PBOManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String get(String msgKey, Object... objects) {        try {            return ms.getMessage(msgKey, objects, LocaleContextHolder.getLocale());        } catch (Exception e) {            log.error(\"Translation error:\", e);            return msgKey;        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/message/MessageUtil.java", "stars": "2", "class": {"name": "MessageUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/constructor_columnprefix/EntityKey.java", "stars": "15", "class": {"name": "EntityKey", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/constructor_columnprefix/EntityKey.java", "stars": "15", "class": {"name": "EntityKey", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    final int prime = 31;    int result = 1;    result = prime * result + ((id == null) ? 0 : id.hashCode());    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/constructor_columnprefix/EntityKey.java", "stars": "15", "class": {"name": "EntityKey", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object obj) {    if (this == obj)      return true;    if (obj == null)      return false;    if (getClass() != obj.getClass())      return false;    EntityKey other = (EntityKey) obj;    if (id == null) {      if (other.id != null)        return false;    } else if (!id.equals(other.id))      return false;    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/constructor_columnprefix/EntityKey.java", "stars": "15", "class": {"name": "EntityKey", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeaders", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getHeaders(){        return headers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/AuthTokenBean.java", "stars": "23", "class": {"name": "AuthTokenBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClaims", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getClaims(){        return claims;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/AuthTokenBean.java", "stars": "23", "class": {"name": "AuthTokenBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHeaders", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHeaders(Map<String, String> map){        this.headers = map;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/AuthTokenBean.java", "stars": "23", "class": {"name": "AuthTokenBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setClaims", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setClaims(Map<String, String> map){        this.claims = map;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/AuthTokenBean.java", "stars": "23", "class": {"name": "AuthTokenBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createUser", "params": ["UserEntity"], "throws": null, "modifiers": ["public"], "return_type": "UserEntity", "snippet": "\t@Override public UserEntity createUser(UserEntity userEntity) {\t\tentityManager.persist(userEntity);\t\treturn userEntity;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/dao/UserDaoImpl.java", "stars": "2", "class": {"name": "UserDaoImpl", "extends": null, "implements": ["UserDao"], "modifiers": ["public"]}}, {"method_name": "getUserByEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "UserEntity", "snippet": "\t@Override public UserEntity getUserByEmail(String email) {\t\ttry {\t\t\treturn entityManager.createNamedQuery(\"userByEmail\", UserEntity.class).setParameter(\"email\", email)\t\t\t\t\t.getSingleResult();\t\t} catch (NoResultException nre) {\t\t\treturn null;\t\t}\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/dao/UserDaoImpl.java", "stars": "2", "class": {"name": "UserDaoImpl", "extends": null, "implements": ["UserDao"], "modifiers": ["public"]}}, {"method_name": "createAuthToken", "params": ["UserAuthTokenEntity"], "throws": null, "modifiers": ["public"], "return_type": "UserAuthTokenEntity", "snippet": "\t@Override public UserAuthTokenEntity createAuthToken(UserAuthTokenEntity userAuthTokenEntity) {\t\tentityManager.persist(userAuthTokenEntity);\t\treturn userAuthTokenEntity;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/dao/UserDaoImpl.java", "stars": "2", "class": {"name": "UserDaoImpl", "extends": null, "implements": ["UserDao"], "modifiers": ["public"]}}, {"method_name": "updateUser", "params": ["UserEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t@Override public void updateUser(UserEntity updatedUserEntity) {\t\tentityManager.merge(updatedUserEntity);\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/dao/UserDaoImpl.java", "stars": "2", "class": {"name": "UserDaoImpl", "extends": null, "implements": ["UserDao"], "modifiers": ["public"]}}, {"method_name": "getOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getOffset() {    return offset;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/RowBounds.java", "stars": "15", "class": {"name": "RowBounds", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLimit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getLimit() {    return limit;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/RowBounds.java", "stars": "15", "class": {"name": "RowBounds", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Context", "StarDriverResult"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void initialize(Context context, StarDriverResult result);}", "url": "https://raw.githubusercontent.com/succlz123/StarDriver-APT/master/stardriver-apt-lib/src/main/java/org/succlz123/stardriver/IStarDriver.java", "stars": "4", "class": {"name": "IStarDriver", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setAdapter", "params": ["Context", "CustomListAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAdapter(Context context, CustomListAdapter mAdapter) {\t\ttry {\t\t\tfillViewWithAdapter(mAdapter);\t\t} catch (ZeroChildException e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HorizontalScrollViewActivity/src/com/krish/horizontalscrollview/CenterLockHorizontalScrollview/CenterLockHorizontalScrollview.java", "stars": "74", "class": {"name": "CenterLockHorizontalScrollview", "extends": "HorizontalScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillViewWithAdapter", "params": ["CustomListAdapter"], "throws": ["ZeroChildException"], "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void fillViewWithAdapter(CustomListAdapter mAdapter)\t\t\tthrows ZeroChildException {\t\tif (getChildCount() == 0) {\t\t\tthrow new ZeroChildException(\t\t\t\t\t\"CenterLockHorizontalScrollView must have one child\");\t\t}\t\tif (getChildCount() == 0 || mAdapter == null)\t\t\treturn;\t\tViewGroup parent = (ViewGroup) getChildAt(0);\t\tparent.removeAllViews();\t\tfor (int i = 0; i < mAdapter.getCount(); i++) {\t\t\tparent.addView(mAdapter.getView(i, null, parent));\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HorizontalScrollViewActivity/src/com/krish/horizontalscrollview/CenterLockHorizontalScrollview/CenterLockHorizontalScrollview.java", "stars": "74", "class": {"name": "CenterLockHorizontalScrollview", "extends": "HorizontalScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCenter", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCenter(int index) {\t\tViewGroup parent = (ViewGroup) getChildAt(0);\t\tView preView = parent.getChildAt(prevIndex);\t\tpreView.setBackgroundColor(Color.parseColor(\"#000000\"));\t\tandroid.widget.LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(\t\t\t\tLinearLayout.LayoutParams.WRAP_CONTENT,\t\t\t\tLinearLayout.LayoutParams.WRAP_CONTENT);\t\tlp.setMargins(5, 5, 5, 5);\t\tpreView.setLayoutParams(lp);\t\tView view = parent.getChildAt(index);\t\tview.setBackgroundColor(Color.GRAY);\t\tint screenWidth = ((Activity) context).getWindowManager()\t\t\t\t.getDefaultDisplay().getWidth();\t\tint scrollX = (view.getLeft() - (screenWidth / 2))\t\t\t\t+ (view.getWidth() / 2);\t\tthis.smoothScrollTo(scrollX, 0);\t\tprevIndex = index;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HorizontalScrollViewActivity/src/com/krish/horizontalscrollview/CenterLockHorizontalScrollview/CenterLockHorizontalScrollview.java", "stars": "74", "class": {"name": "CenterLockHorizontalScrollview", "extends": "HorizontalScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "createVideo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Video", "snippet": "    public Video createVideo() {        System.out.println(\"\u5f55\u5236Python\u8bfe\u7a0b\u89c6\u9891\");        return new PythonVideo();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/abstractfactory/PythonCourseFactory.java", "stars": "2", "class": {"name": "PythonCourseFactory", "extends": null, "implements": ["CourseFactory"], "modifiers": ["public"]}}, {"method_name": "createNote", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Note", "snippet": "    public Note createNote() {        System.out.println(\"\u7f16\u5199Python\u8bfe\u7a0b\u7b14\u8bb0\");        return new PythonNote();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/abstractfactory/PythonCourseFactory.java", "stars": "2", "class": {"name": "PythonCourseFactory", "extends": null, "implements": ["CourseFactory"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Activity activity) {        Intent intent = new Intent(activity, PreferencesActivity.class);        activity.startActivity(intent);        return intent;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "getIntent", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent getIntent(Context context) {        return new Intent(context, PreferencesActivity.class);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        PrefUtils.getPrefs(this).unregisterOnSharedPreferenceChangeListener(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState, R.layout.activity_preferences);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setTitle(R.string.preferences);        ToolbarUtils.updateToolbarHeight(this, toolbar);        mLayoutManager = new LinearLayoutManager(this);        recyclerView.setLayoutManager(mLayoutManager);        PrefUtils.getPrefs(this).registerOnSharedPreferenceChangeListener(this);        refreshItems();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "refreshItems", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void refreshItems() {        mPrefItems = ItemsGenerator.generate(this, updateManager, false);        if (recyclerView.getAdapter() != null && mLayoutManager != null) {            int position = mLayoutManager.findFirstVisibleItemPosition();            View v = mLayoutManager.findViewByPosition(position);            recyclerView.setAdapter(new PreferencesListAdapter(mPrefItems));            if (v != null) {                int offset = v.getTop();                mLayoutManager.scrollToPositionWithOffset(position, offset);            } else {                mLayoutManager.scrollToPosition(position);            }        } else {            recyclerView.setAdapter(new PreferencesListAdapter(mPrefItems));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        refreshItems();        toolbar.setMinimumHeight((int) ResourceUtils.getAttributeDimension(this, this.getTheme(), R.attr.actionBarSize));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "onSharedPreferenceChanged", "params": ["SharedPreferences", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {        if (isUseChangeablePref(key)) {            refreshItems();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "isUseChangeablePref", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isUseChangeablePref(String key) {        boolean b = false;        for (Object item : mPrefItems) {            if (item instanceof PrefItem) {                PrefItem pref = (PrefItem) item;                if (pref.getPrefKey() != null && pref.getPrefKey().equals(key))                    b = true;            }        }        return b;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "openListSelection", "params": ["String", "String", "SelectionMode", "Object", "int", "int", "OnSelectionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openListSelection(String title, String[] items, SelectionMode mode, Object value, int low, int high, final OnSelectionListener onSelectionListener) {        DialogInterface.OnClickListener onDialogClickListener = new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                onSelectionListener.onSelection(which, null);                dialog.dismiss();            }        };        if (mode == SelectionMode.NORMAL) {            StringArraySelectorDialogFragment.show(getSupportFragmentManager(), title, items, (Integer) value, onDialogClickListener);        } else if (mode == SelectionMode.ADVANCED_CHOICE || mode == SelectionMode.SIMPLE_CHOICE) {            StringArraySelectorDialogFragment.showSingleChoice(getSupportFragmentManager(), title, items, (Integer) value, onDialogClickListener);        } else if (mode == SelectionMode.COLOR) {            Bundle args = new Bundle();            args.putString(ColorPickerDialogFragment.TITLE, title);            args.putInt(ColorPickerDialogFragment.DEFAULT_VALUE, (Integer) value);            ColorPickerDialogFragment dialogFragment = new ColorPickerDialogFragment();            dialogFragment.setArguments(args);            dialogFragment.setOnResultListener(new ColorPickerDialogFragment.ResultListener() {                @Override                public void onNewValue(int value) {                    onSelectionListener.onSelection(0, value);                }            });            dialogFragment.show(getFragmentManager(), \"pref_fragment\");        } else if (mode == SelectionMode.DIRECTORY) {            String[] directoryOptions = {getString(R.string.storage_automatic), getString(R.string.storage_choose)};            StringArraySelectorDialogFragment.show(getSupportFragmentManager(), title, directoryOptions, -1, new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int position) {                    if (position == 0) {                        onSelectionListener.onSelection(0, null);                    } else {                        Log.d(\"mn3m\", \"choosing custom location\");                        DirectoryChooserConfig config = DirectoryChooserConfig.builder()                                .initialDirectory(StorageUtils.getInternalSdCardPath())                                .allowReadOnlyDirectory(true)                                .allowNewDirectoryNameModification(true)                                .newDirectoryName(getString(R.string.app_name))                                .build();                        final DirectoryChooserFragment directoryChooserFragment = DirectoryChooserFragment.newInstance(config);                        directoryChooserFragment.setDirectoryChooserListener(new DirectoryChooserFragment.OnFragmentInteractionListener() {                            @Override                            public void onSelectDirectory(String s) {                                File f = new File(s);                                if (f.canWrite()) {                                    onSelectionListener.onSelection(0, s);                                    directoryChooserFragment.dismiss();                                } else {                                    Toast.makeText(PreferencesActivity.this, R.string.not_writable, Toast.LENGTH_SHORT).show();                                }                            }                            @Override                            public void onCancelChooser() {                                directoryChooserFragment.dismiss();                            }                        });                        dialog.dismiss();                        directoryChooserFragment.show(getFragmentManager(), \"pref_fragment\");                    }                }            });        } else if (mode == SelectionMode.NUMBER && high - low > 200) {            Bundle args = new Bundle();            args.putString(SeekBarDialogFragment.TITLE, title);            args.putInt(SeekBarDialogFragment.MAX_VALUE, high);            args.putInt(SeekBarDialogFragment.MIN_VALUE, low);            args.putInt(SeekBarDialogFragment.DEFAULT_VALUE, ((Integer) value) / 1000);            SeekBarDialogFragment dialogFragment = new SeekBarDialogFragment();            dialogFragment.setArguments(args);            dialogFragment.setOnResultListener(new SeekBarDialogFragment.ResultListener() {                @Override                public void onNewValue(int value) {                    onSelectionListener.onSelection(0, value);                }            });            dialogFragment.show(getFragmentManager(), \"pref_fragment\");        } else if (mode == SelectionMode.NUMBER) {            Bundle args = new Bundle();            args.putString(NumberPickerDialogFragment.TITLE, title);            args.putInt(NumberPickerDialogFragment.MAX_VALUE, high);            args.putInt(NumberPickerDialogFragment.MIN_VALUE, low);            args.putInt(NumberPickerDialogFragment.DEFAULT_VALUE, (int) value);            NumberPickerDialogFragment dialogFragment = new NumberPickerDialogFragment();            dialogFragment.setArguments(args);            dialogFragment.setOnResultListener(new NumberPickerDialogFragment.ResultListener() {                @Override                public void onNewValue(int value) {                    onSelectionListener.onSelection(0, value);                }            });            dialogFragment.show(getSupportFragmentManager(), \"pref_fragment\");        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "showMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showMessage(String message) {        if (message.equals(PreferencesHandler.ABOUT)) {            AboutActivity.startActivity(this);            return;        }        Snackbar.make(rootLayout, message, Snackbar.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/PreferencesActivity.java", "stars": "4", "class": {"name": "PreferencesActivity", "extends": "ButterBaseActivity", "implements": ["SharedPreferences", "PreferencesHandler"], "modifiers": ["public"]}}, {"method_name": "getExecUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getExecUser() {        return execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecNodeUserQuery.java", "stars": "23", "class": {"name": "ExecNodeUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecUser(String execUser) {        this.execUser = execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecNodeUserQuery.java", "stars": "23", "class": {"name": "ExecNodeUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getUid() {        return uid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecNodeUserQuery.java", "stars": "23", "class": {"name": "ExecNodeUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUid(Integer uid) {        this.uid = uid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecNodeUserQuery.java", "stars": "23", "class": {"name": "ExecNodeUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getGid() {        return gid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecNodeUserQuery.java", "stars": "23", "class": {"name": "ExecNodeUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGid(Integer gid) {        this.gid = gid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecNodeUserQuery.java", "stars": "23", "class": {"name": "ExecNodeUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNodeId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getNodeId() {        return nodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecNodeUserQuery.java", "stars": "23", "class": {"name": "ExecNodeUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNodeId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNodeId(Integer nodeId) {        this.nodeId = nodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecNodeUserQuery.java", "stars": "23", "class": {"name": "ExecNodeUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "newRet", "params": ["AbstractInsnNode"], "throws": null, "modifiers": ["public", "static"], "return_type": "ReturnAddressValue", "snippet": "\tpublic static ReturnAddressValue newRet(AbstractInsnNode insn) {\t\treturn new ReturnAddressValue(insn);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/ReturnAddressValue.java", "stars": "12", "class": {"name": "ReturnAddressValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "copy", "params": ["AbstractInsnNode"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue copy(AbstractInsnNode insn) {\t\treturn new ReturnAddressValue(combine(getInsns(), insn));\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/ReturnAddressValue.java", "stars": "12", "class": {"name": "ReturnAddressValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "canMerge", "params": ["AbstractValue"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean canMerge(AbstractValue other) {\t\treturn other == this;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/ReturnAddressValue.java", "stars": "12", "class": {"name": "ReturnAddressValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isPrimitive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isPrimitive() {\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/ReturnAddressValue.java", "stars": "12", "class": {"name": "ReturnAddressValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReference", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isReference() {\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/ReturnAddressValue.java", "stars": "12", "class": {"name": "ReturnAddressValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isValueResolved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isValueResolved() {\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/ReturnAddressValue.java", "stars": "12", "class": {"name": "ReturnAddressValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean equals(Object other) {\t\treturn other == this;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/ReturnAddressValue.java", "stars": "12", "class": {"name": "ReturnAddressValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLifecycleBeanProcessor", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "LifecycleBeanPostProcessor", "snippet": "    public static LifecycleBeanPostProcessor getLifecycleBeanProcessor() {        return new LifecycleBeanPostProcessor();    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/ShiroConfiguration.java", "stars": "2", "class": {"name": "ShiroConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shiroFilter", "params": ["SecurityManager"], "throws": null, "modifiers": ["public"], "return_type": "ShiroFilterFactoryBean", "snippet": "    public ShiroFilterFactoryBean shiroFilter(SecurityManager securityManager) {        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();        shiroFilterFactoryBean.setSecurityManager(securityManager);        return shiroFilterFactoryBean;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/ShiroConfiguration.java", "stars": "2", "class": {"name": "ShiroConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "securityManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SecurityManager", "snippet": "    public SecurityManager securityManager() {        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        securityManager.setRealm(getWJRealm());        return securityManager;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/ShiroConfiguration.java", "stars": "2", "class": {"name": "ShiroConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWJRealm", "params": [], "throws": null, "modifiers": ["public"], "return_type": "WJRealm", "snippet": "    public WJRealm getWJRealm() {        WJRealm wjRealm = new WJRealm();        wjRealm.setCredentialsMatcher(hashedCredentialsMatcher());        return wjRealm;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/ShiroConfiguration.java", "stars": "2", "class": {"name": "ShiroConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashedCredentialsMatcher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HashedCredentialsMatcher", "snippet": "    public HashedCredentialsMatcher hashedCredentialsMatcher() {        HashedCredentialsMatcher hashedCredentialsMatcher = new HashedCredentialsMatcher();        hashedCredentialsMatcher.setHashAlgorithmName(\"md5\");        hashedCredentialsMatcher.setHashIterations(2);        return hashedCredentialsMatcher;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/ShiroConfiguration.java", "stars": "2", "class": {"name": "ShiroConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authorizationAttributeSourceAdvisor", "params": ["SecurityManager"], "throws": null, "modifiers": ["public"], "return_type": "AuthorizationAttributeSourceAdvisor", "snippet": "    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);        return authorizationAttributeSourceAdvisor;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/ShiroConfiguration.java", "stars": "2", "class": {"name": "ShiroConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rememberMeManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CookieRememberMeManager", "snippet": "    public CookieRememberMeManager rememberMeManager() {        CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();        cookieRememberMeManager.setCookie(rememberMeCookie());        cookieRememberMeManager.setCipherKey(\"lixiang\".getBytes());        return cookieRememberMeManager;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/ShiroConfiguration.java", "stars": "2", "class": {"name": "ShiroConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rememberMeCookie", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SimpleCookie", "snippet": "    public SimpleCookie rememberMeCookie() {        SimpleCookie simpleCookie = new SimpleCookie(\"rememberMe\");        simpleCookie.setMaxAge(259200);        return simpleCookie;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/ShiroConfiguration.java", "stars": "2", "class": {"name": "ShiroConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Wood", "snippet": "    public Wood get(int id) {        for (Wood wood : arr)            if (wood.getId() == id)                return wood;        return null;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/WoodDirectory.java", "stars": "2", "class": {"name": "WoodDirectory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["Wood"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(Wood wood) {        if (get(wood.getId()) != null)            return false;        if (arr.length == count)            arr = Arrays.copyOf(arr, count + count / 2);        arr[count++] = wood;        return true;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/WoodDirectory.java", "stars": "2", "class": {"name": "WoodDirectory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getArr", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Wood", "snippet": "    public Wood[] getArr() {        return Arrays.copyOf(arr, count);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/WoodDirectory.java", "stars": "2", "class": {"name": "WoodDirectory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        final StringBuilder builder = new StringBuilder(\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u0434\u0435\u0440\u0435\u0432\u0438\u043d\u0438: \\n\");        for (int i = 0; i < count; i++)            builder.append(arr[i]).append(\"\\n\");        return builder.toString();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/store/WoodDirectory.java", "stars": "2", "class": {"name": "WoodDirectory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return mData.size();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/pager/ImagePagerAdapter.java", "stars": "1", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": ["View"], "modifiers": ["public", "final"]}}, {"method_name": "isViewFromObject", "params": ["View", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {        return view == object;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/pager/ImagePagerAdapter.java", "stars": "1", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": ["View"], "modifiers": ["public", "final"]}}, {"method_name": "instantiateItem", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object instantiateItem(@NonNull ViewGroup container, int position) {        PhotoView view = new PhotoView(mActivity);        view.setOnClickListener(this);        GlideApp.with(container.getContext())                .load(mData.get(position))                .into(view);        container.addView(view);        return view;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/pager/ImagePagerAdapter.java", "stars": "1", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": ["View"], "modifiers": ["public", "final"]}}, {"method_name": "destroyItem", "params": ["ViewGroup", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {        container.removeView((View) object);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/pager/ImagePagerAdapter.java", "stars": "1", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": ["View"], "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        // \u5355\u51fb\u56fe\u7247\u9000\u51fa\u5f53\u524d\u7684 Activity        if (!mActivity.isFinishing()) {            mActivity.finish();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/pager/ImagePagerAdapter.java", "stars": "1", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": ["View"], "modifiers": ["public", "final"]}}, {"method_name": "code", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ErrorResponse", "snippet": "  public ErrorResponse code(String code) {    this.code = code;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCode() {    return code;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCode(String code) {    this.code = code;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "message", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ErrorResponse", "snippet": "  public ErrorResponse message(String message) {    this.message = message;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMessage() {    return message;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMessage(String message) {    this.message = message;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rootCause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ErrorResponse", "snippet": "  public ErrorResponse rootCause(String rootCause) {    this.rootCause = rootCause;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRootCause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRootCause() {    return rootCause;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRootCause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRootCause(String rootCause) {    this.rootCause = rootCause;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(java.lang.Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    ErrorResponse errorResponse = (ErrorResponse) o;    return Objects.equals(this.code, errorResponse.code) &&        Objects.equals(this.message, errorResponse.message) &&        Objects.equals(this.rootCause, errorResponse.rootCause);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(code, message, rootCause);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    StringBuilder sb = new StringBuilder();    sb.append(\"class ErrorResponse {\\n\");        sb.append(\"    code: \").append(toIndentedString(code)).append(\"\\n\");    sb.append(\"    message: \").append(toIndentedString(message)).append(\"\\n\");    sb.append(\"    rootCause: \").append(toIndentedString(rootCause)).append(\"\\n\");    sb.append(\"}\");    return sb.toString();  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toIndentedString", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String toIndentedString(java.lang.Object o) {    if (o == null) {      return \"null\";    }    return o.toString().replace(\"\\n\", \"\\n    \");  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/ErrorResponse.java", "stars": "2", "class": {"name": "ErrorResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "IFloatWindow", "snippet": "    public static IFloatWindow get() {        return get(mDefaultTag);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "FloatWindow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "IFloatWindow", "snippet": "    public static IFloatWindow get(@NonNull String tag) {        return mFloatWindowMap == null ? null : mFloatWindowMap.get(tag);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "FloatWindow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "with", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "B", "snippet": "    public static B with(@NonNull Context applicationContext) {        return mBuilder = new B(applicationContext);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "FloatWindow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void destroy() {        destroy(mDefaultTag);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "FloatWindow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "destroy", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void destroy(String tag) {        if (mFloatWindowMap == null || !mFloatWindowMap.containsKey(tag)) {            return;        }        mFloatWindowMap.get(tag).dismiss();        mFloatWindowMap.remove(tag);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "FloatWindow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setView(@NonNull View view) {            mView = view;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setView(@LayoutRes int layoutId) {            mLayoutId = layoutId;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setWidth", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setWidth(int width) {            mWidth = width;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setHeight", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setHeight(int height) {            mHeight = height;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setWidth", "params": ["int", "float"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setWidth(@Screen.screenType int screenType, float ratio) {            mWidth = (int) ((screenType == Screen.width ?                    Util.getScreenWidth(mApplicationContext) :                    Util.getScreenHeight(mApplicationContext)) * ratio);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setHeight", "params": ["int", "float"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setHeight(@Screen.screenType int screenType, float ratio) {            mHeight = (int) ((screenType == Screen.width ?                    Util.getScreenWidth(mApplicationContext) :                    Util.getScreenHeight(mApplicationContext)) * ratio);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setX", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setX(int x) {            xOffset = x;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setY", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setY(int y) {            yOffset = y;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setX", "params": ["int", "float"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setX(@Screen.screenType int screenType, float ratio) {            xOffset = (int) ((screenType == Screen.width ?                    Util.getScreenWidth(mApplicationContext) :                    Util.getScreenHeight(mApplicationContext)) * ratio);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setY", "params": ["int", "float"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setY(@Screen.screenType int screenType, float ratio) {            yOffset = (int) ((screenType == Screen.width ?                    Util.getScreenWidth(mApplicationContext) :                    Util.getScreenHeight(mApplicationContext)) * ratio);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setFilter", "params": ["boolean", "Class"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setFilter(boolean show, @NonNull Class... activities) {            mShow = show;            mActivities = activities;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setMoveType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setMoveType(@MoveType.MOVE_TYPE int moveType) {            mMoveType = moveType;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setMoveStyle", "params": ["long", "TimeInterpolator"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setMoveStyle(long duration, @Nullable TimeInterpolator interpolator) {            mDuration = duration;            mInterpolator = interpolator;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTag", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setTag(@NonNull String tag) {            mTag = tag;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void build() {            if (mFloatWindowMap == null) {                mFloatWindowMap = new HashMap<>();            }            if (mFloatWindowMap.containsKey(mTag)) {                throw new IllegalArgumentException(\"FloatWindow of this tag has been added, Please set a new tag for the new FloatWindow\");            }            if (mView == null && mLayoutId == 0) {                throw new IllegalArgumentException(\"View has not been set!\");            }            if (mView == null) {                mView = Util.inflate(mApplicationContext, mLayoutId);            }            IFloatWindow floatWindowImpl = new IFloatWindowImpl(this);            mFloatWindowMap.put(mTag, floatWindowImpl);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatWindow.java", "stars": "2", "class": {"name": "B", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        recyclerView = (RecyclerView) inflater.inflate(R.layout.fragment_backuped_projects, container, false);        initLogic();        return recyclerView;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/BackupedProjectsFragment.java", "stars": "4", "class": {"name": "BackupedProjectsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "initLogic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initLogic () {        projectUtil = new ProjectUtil();        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));        new ThreadLoader(() -> {            adapter = new BackupedProjectsAdapter(projectUtil.getBackupedProjects(), Objects.requireNonNull(getActivity()));        }, () -> {            recyclerView.setAdapter(adapter);        });    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/BackupedProjectsFragment.java", "stars": "4", "class": {"name": "BackupedProjectsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void update () {        new ThreadLoader(() -> {            adapter.data = projectUtil.getBackupedProjects();        }, () -> {            adapter.notifyDataSetChanged();        });    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/BackupedProjectsFragment.java", "stars": "4", "class": {"name": "BackupedProjectsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void start() {\t\ttry {            tomcat.start();            tomcat.getServer().await();\t\t}catch(Exception e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XServer.java", "stars": "2", "class": {"name": "XServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void stop() {\t\ttry {\t\t\tXRedis.close();\t\t\ttomcat.stop();\t\t\ttomcat.destroy();\t\t} catch (LifecycleException e) {\t\t\tlogger.error(\"stop.exception\", e);\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XServer.java", "stars": "2", "class": {"name": "XServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initModules", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void initModules() {\t\tif(this.logicModules != null && !logicModules.isEmpty()) {\t\t\tString[] modules = this.logicModules.split(\",\");\t\t\tfor(int i=0; i<modules.length; i++){\t\t\t\tloadModule(modules[i].trim());\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XServer.java", "stars": "2", "class": {"name": "XServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersionAction", "params": ["XLogicConfig"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "\tprivate static String getVersionAction(XLogicConfig logicConfig) {\t\treturn logicConfig.name() + \"@\" + logicConfig.version();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XServer.java", "stars": "2", "class": {"name": "XServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadModule", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void loadModule(String module){\t\tFile file = null;\t\tList<String> classFiles = null;\t\tClass<?> clazz = null;\t\tXLogicConfig logicConfig = null;\t\t        Context context = tomcat.addContext(\"/\"+module, null);        \t\tString modulePackage = this.logicPackage + \".\" + module;\t\tString modulePath = modulePackage.replace(\".\", \"/\");\t\tString versionAction = null;\t\tString urlPattern = null;\t\ttry{\t\t\tURL url = null;\t\t\tJarURLConnection jarConnection = null;\t\t\tJarFile jarFile = null;\t\t\tEnumeration<JarEntry> jarEntryEnumeration = null;\t\t\tString jarEntryName = null;\t\t\tString fullClazz = null;\t\t\tEnumeration<URL> urls = Thread.currentThread().getContextClassLoader().getResources(modulePath);\t\t\twhile (urls.hasMoreElements()) {\t\t\t\turl = urls.nextElement();\t\t\t\tif (\"jar\".equalsIgnoreCase(url.getProtocol())) {\t\t\t\t\tjarConnection = (JarURLConnection) url.openConnection();\t\t\t\t\tif (jarConnection != null) {\t\t\t\t\t\tjarFile = jarConnection.getJarFile();\t\t\t\t\t\tif (jarFile != null) {\t\t\t\t\t\t\tjarEntryEnumeration = jarFile.entries();\t\t\t\t\t\t\twhile (jarEntryEnumeration.hasMoreElements()) {\t\t\t\t\t\t\t\tjarEntryName = jarEntryEnumeration.nextElement().getName();\t\t\t\t\t\t\t\tif (jarEntryName.contains(\".class\") && jarEntryName.replace(\"/\",\".\").startsWith(modulePackage)) {\t\t\t\t\t\t\t\t\tfullClazz = jarEntryName.substring(0, jarEntryName.lastIndexOf(\".\")).replace(\"/\", \".\");\t\t\t\t\t\t\t\t\tclazz = Class.forName(fullClazz);\t\t\t\t\t\t\t\t\tlogicConfig = clazz.getAnnotation(XLogicConfig.class);\t\t\t\t\t\t\t\t\tif(logicConfig != null){\t\t\t\t\t\t\t\t\t\tversionAction = getVersionAction(logicConfig);\t\t\t\t\t\t\t\t\t\turlPattern = \"/\" + logicConfig.name();\t\t\t\t\t\t\t\t\t\tif(logicConfig.version() > 1) {\t\t\t\t\t\t\t\t\t\t\turlPattern = urlPattern + \"/v\" + logicConfig.version();\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\tXLogic logic = (XLogic)clazz.newInstance();\t\t\t\t\t\t\t\t\t\tlogic.setConfig(logicConfig);\t\t\t\t\t\t\t\t\t\tTomcat.addServlet(context, versionAction, logic);\t\t\t\t\t\t\t\t        context.addServletMappingDecoded(urlPattern, versionAction);\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}else{\t\t\t\t\tfile = new File(url.toURI());\t\t\t\t\tif (file != null) {\t\t\t\t\t\tclassFiles = new ArrayList<String>();\t\t\t\t\t\tlistClassFiles(file, classFiles);\t\t\t\t\t\tfor (String clz : classFiles) {\t\t\t\t\t\t\tfullClazz = clz.replaceAll(\"[/\\\\\\\\]\", \".\");\t\t\t\t\t\t\tfullClazz = fullClazz.substring(fullClazz.indexOf(modulePackage), clz.length() - 6);\t\t\t\t\t\t\tclazz = Class.forName(fullClazz);\t\t\t\t\t\t\tlogicConfig = clazz.getAnnotation(XLogicConfig.class);\t\t\t\t\t\t\tif (logicConfig != null) {\t\t\t\t\t\t\t\tversionAction = getVersionAction(logicConfig);\t\t\t\t\t\t\t\turlPattern = \"/\" + logicConfig.name();\t\t\t\t\t\t\t\tif(logicConfig.version() > 1) {\t\t\t\t\t\t\t\t\turlPattern = urlPattern + \"/v\" + logicConfig.version();\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\tXLogic logic = (XLogic)clazz.newInstance();\t\t\t\t\t\t\t\tlogic.setConfig(logicConfig);\t\t\t\t\t\t\t\tTomcat.addServlet(context, versionAction, logic);\t\t\t\t\t\t        context.addServletMappingDecoded(urlPattern, versionAction);\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}catch(Exception e){\t\t\tlogger.error(\"initModule.Exception\", e);\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XServer.java", "stars": "2", "class": {"name": "XServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listClassFiles", "params": ["File", "List<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "\tprivate static void listClassFiles(File file, List<String> classFiles){\t\tFile tf = null;\t\tFile[] files = file.listFiles();\t\tfor(int i=0; i<files.length; i++){\t\t\ttf = files[i];\t\t\tif(tf.isDirectory()){\t\t\t\tlistClassFiles(tf, classFiles);\t\t\t}else if(tf.isFile() && tf.getName().endsWith(\".class\")){\t\t\t\tclassFiles.add(tf.getAbsolutePath());\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XServer.java", "stars": "2", "class": {"name": "XServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": [], "throws": ["MojoExecutionException", "MojoFailureException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute() throws MojoExecutionException, MojoFailureException {        //method body    }", "url": "https://raw.githubusercontent.com/yegor256/jpeek-maven-plugin/master/src/main/java/org/jpeek/plugin/JpeekMojo.java", "stars": "4", "class": {"name": "JpeekMojo", "extends": "AbstractMojo", "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": ["RequestEvent", "SipLayer", "ServerTransaction"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void process(RequestEvent evt, SipLayer layer, ServerTransaction transaction) {\t\ttry {\t\t\tSystem.out.println(\"\u6536\u5230\u6ce8\u518c\u8bf7\u6c42\uff0c\u5f00\u59cb\u5904\u7406\");\t\t\tRequest request = evt.getRequest();\t\t\tResponse response = null; \t\t\tboolean passwordCorrect = false;\t\t\t// \u6ce8\u518c\u6807\u5fd7  0\uff1a\u672a\u643a\u5e26\u6388\u6743\u5934\u6216\u8005\u5bc6\u7801\u9519\u8bef  1\uff1a\u6ce8\u518c\u6210\u529f   2\uff1a\u6ce8\u9500\u6210\u529f\t\t\tint registerFlag = 0;\t\t\tDevice device = null;\t\t\tAuthorizationHeader authorhead = (AuthorizationHeader) request.getHeader(AuthorizationHeader.NAME); \t\t\t// \u6821\u9a8c\u5bc6\u7801\u662f\u5426\u6b63\u786e\t\t\tif (authorhead != null) {\t\t\t\tpasswordCorrect = new DigestServerAuthenticationHelper().doAuthenticatePlainTextPassword(request,\t\t\t\t\t\tsipConfig.getSipPassword());\t\t\t}\t\t\t// \u672a\u643a\u5e26\u6388\u6743\u5934\u6216\u8005\u5bc6\u7801\u9519\u8bef \u56de\u590d401\t\t\tif (authorhead == null || !passwordCorrect) {\t\t\t\t\t\t\t\tif (authorhead == null) {\t\t\t\t\tSystem.out.println(\"\u672a\u643a\u5e26\u6388\u6743\u5934 \u56de\u590d401\");\t\t\t\t} else if (!passwordCorrect) {\t\t\t\t\tSystem.out.println(\"\u5bc6\u7801\u9519\u8bef \u56de\u590d401\");\t\t\t\t}\t\t\t\tresponse = layer.getMessageFactory().createResponse(Response.UNAUTHORIZED, request);\t\t\t\tnew DigestServerAuthenticationHelper().generateChallenge(layer.getHeaderFactory(), response, sipConfig.getSipDomain());\t\t\t}\t\t\t// \u643a\u5e26\u6388\u6743\u5934\u5e76\u4e14\u5bc6\u7801\u6b63\u786e\t\t\telse if (passwordCorrect) {\t\t\t\tresponse = layer.getMessageFactory().createResponse(Response.OK, request);\t\t\t\t// \u6dfb\u52a0date\u5934\t\t\t\tresponse.addHeader(layer.getHeaderFactory().createDateHeader(Calendar.getInstance(Locale.ENGLISH)));\t\t\t\tExpiresHeader expiresHeader = (ExpiresHeader) request.getHeader(Expires.NAME);\t\t\t\t// \u6dfb\u52a0Contact\u5934\t\t\t\tresponse.addHeader(request.getHeader(ContactHeader.NAME));\t\t\t\t// \u6dfb\u52a0Expires\u5934\t\t\t\tresponse.addHeader(request.getExpires());\t\t\t\t\t\t\t\t// 1.\u83b7\u53d6\u5230\u901a\u4fe1\u5730\u5740\u7b49\u4fe1\u606f\uff0c\u4fdd\u5b58\u5230Redis\t\t\t\tFromHeader fromHeader = (FromHeader) request.getHeader(FromHeader.NAME);\t\t\t\tViaHeader viaHeader = (ViaHeader) request.getHeader(ViaHeader.NAME);\t\t\t\tString received = viaHeader.getReceived();\t\t\t\tint rPort = viaHeader.getRPort();\t\t\t\t// \u672c\u5730\u6a21\u62df\u8bbe\u5907 received \u4e3a\u7a7a rPort \u4e3a -1\t\t\t\t// \u89e3\u6790\u672c\u5730\u5730\u5740\u66ff\u4ee3\t\t\t\tif (StringUtils.isEmpty(received) || rPort == -1) {\t\t\t\t\treceived = viaHeader.getHost();\t\t\t\t\trPort = viaHeader.getPort();\t\t\t\t}\t\t\t\t//\t\t\t\tHost host = new Host();\t\t\t\thost.setIp(received);\t\t\t\thost.setPort(rPort);\t\t\t\thost.setAddress(received.concat(\":\").concat(String.valueOf(rPort)));\t\t\t\tAddressImpl address = (AddressImpl) fromHeader.getAddress();\t\t\t\tSipUri uri = (SipUri) address.getURI();\t\t\t\tString deviceId = uri.getUser();\t\t\t\tdevice = new Device();\t\t\t\tdevice.setDeviceId(deviceId);\t\t\t\tdevice.setHost(host);\t\t\t\t// \u6ce8\u9500\u6210\u529f\t\t\t\tif (expiresHeader != null && expiresHeader.getExpires() == 0) {\t\t\t\t\tregisterFlag = 2;\t\t\t\t}\t\t\t\t// \u6ce8\u518c\u6210\u529f\t\t\t\telse {\t\t\t\t\tregisterFlag = 1;\t\t\t\t\t// \u5224\u65adTCP\u8fd8\u662fUDP\t\t\t\t\tboolean isTcp = false;\t\t\t\t\tViaHeader reqViaHeader = (ViaHeader) request.getHeader(ViaHeader.NAME);\t\t\t\t\tString transport = reqViaHeader.getTransport();\t\t\t\t\tif (transport.equals(\"TCP\")) {\t\t\t\t\t\tisTcp = true;\t\t\t\t\t}\t\t\t\t\tdevice.setTransport(isTcp ? \"TCP\" : \"UDP\");\t\t\t\t}\t\t\t}\t\t\ttransaction.sendResponse(response);\t\t\t// \u6ce8\u518c\u6210\u529f\t\t\t// \u4fdd\u5b58\u5230redis\t\t\t// \u4e0b\u53d1catelog\u67e5\u8be2\u76ee\u5f55\t\t\tif (registerFlag == 1 && device != null) {\t\t\t\tSystem.out.println(\"\u6ce8\u518c\u6210\u529f! deviceId:\" + device.getDeviceId());\t\t\t\tstorager.update(device);\t\t\t\tpublisher.onlineEventPublish(device.getDeviceId(), VideoManagerConstants.EVENT_ONLINE_REGISTER);\t\t\t\thandler.onRegister(device);\t\t\t} else if (registerFlag == 2) {\t\t\t\tSystem.out.println(\"\u6ce8\u9500\u6210\u529f! deviceId:\" + device.getDeviceId());\t\t\t\tpublisher.outlineEventPublish(device.getDeviceId(), VideoManagerConstants.EVENT_OUTLINE_UNREGISTER);\t\t\t}\t\t} catch (SipException | InvalidArgumentException | NoSuchAlgorithmException | ParseException e) {\t\t\te.printStackTrace();\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/RegisterRequestProcessor.java", "stars": "29", "class": {"name": "RegisterRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "beforeClassLoaderWrapperTest", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void beforeClassLoaderWrapperTest() {    wrapper = new ClassLoaderWrapper();    loader = getClass().getClassLoader();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "classForName", "params": [], "throws": ["ClassNotFoundException"], "modifiers": [], "return_type": "void", "snippet": "  void classForName() throws ClassNotFoundException {    assertNotNull(wrapper.classForName(CLASS_FOUND));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "classForNameNotFound", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void classForNameNotFound() {    Assertions.assertThrows(ClassNotFoundException.class, () -> assertNotNull(wrapper.classForName(CLASS_NOT_FOUND)));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "classForNameWithClassLoader", "params": [], "throws": ["ClassNotFoundException"], "modifiers": [], "return_type": "void", "snippet": "  void classForNameWithClassLoader() throws ClassNotFoundException {    assertNotNull(wrapper.classForName(CLASS_FOUND, loader));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "getResourceAsURL", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getResourceAsURL() {    assertNotNull(wrapper.getResourceAsURL(JPETSTORE_PROPERTIES));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "getResourceAsURLNotFound", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getResourceAsURLNotFound() {    assertNull(wrapper.getResourceAsURL(RESOURCE_NOT_FOUND));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "getResourceAsURLWithClassLoader", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getResourceAsURLWithClassLoader() {    assertNotNull(wrapper.getResourceAsURL(JPETSTORE_PROPERTIES, loader));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "getResourceAsStream", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getResourceAsStream() {    assertNotNull(wrapper.getResourceAsStream(JPETSTORE_PROPERTIES));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "getResourceAsStreamNotFound", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getResourceAsStreamNotFound() {    assertNull(wrapper.getResourceAsStream(RESOURCE_NOT_FOUND));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "getResourceAsStreamWithClassLoader", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getResourceAsStreamWithClassLoader() {    assertNotNull(wrapper.getResourceAsStream(JPETSTORE_PROPERTIES, loader));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ClassLoaderWrapperTest.java", "stars": "15", "class": {"name": "ClassLoaderWrapperTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "createDeserializationProxy", "params": ["Object", "Map<String,ResultLoaderMap>", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "  protected Object createDeserializationProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,          List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    return new JavassistProxyFactory().createDeserializationProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistSerialStateHolder.java", "stars": "15", "class": {"name": "JavassistSerialStateHolder", "extends": "AbstractSerialStateHolder", "implements": null, "modifiers": []}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        super.init(context);        mJumpAd = findViewById(R.id.jump_ad);        mADTime = (TextView) findViewById(R.id.ad_time);        if (mJumpAd != null) {            mJumpAd.setOnClickListener(new OnClickListener() {                @Override                public void onClick(View v) {                    if (getGSYVideoManager().listener() != null) {                        getGSYVideoManager().listener().onAutoCompletion();                    }                }            });        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId() {        return R.layout.video_layout_ad;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoViewBridge", "snippet": "    public GSYVideoViewBridge getGSYVideoManager() {        GSYVideoADManager.instance().initContext(getContext().getApplicationContext());        return GSYVideoADManager.instance();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "backFromFull", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean backFromFull(Context context) {        return GSYVideoADManager.backFromWindowFull(context);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseVideos", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void releaseVideos() {        GSYVideoADManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFullId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getFullId() {        return GSYVideoADManager.FULLSCREEN_ID;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSmallId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getSmallId() {        return GSYVideoADManager.SMALL_ID;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared() {        super.onPrepared();        isFirstPrepared = true;        changeAdUIState();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        if (v.getId() == R.id.start) {            if (mCurrentState == CURRENT_STATE_ERROR) {                clickStartIcon();            }        } else {            super.onClick(v);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateStartImage", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateStartImage() {        if (mStartButton != null) {            if (mStartButton instanceof ImageView) {                ImageView imageView = (ImageView) mStartButton;                if (mCurrentState == CURRENT_STATE_PLAYING) {                    imageView.setImageResource(R.drawable.empty_drawable);                } else if (mCurrentState == CURRENT_STATE_ERROR) {                    imageView.setImageResource(R.drawable.video_click_error_selector);                } else {                    imageView.setImageResource(R.drawable.empty_drawable);                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "touchDoubleUp", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchDoubleUp() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "touchSurfaceMove", "params": ["float", "float", "float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchSurfaceMove(float deltaX, float deltaY, float y) {        if (mChangePosition) {        } else {            super.touchSurfaceMove(deltaX, deltaY, y);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "touchSurfaceMoveFullLogic", "params": ["float", "float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchSurfaceMoveFullLogic(float absDeltaX, float absDeltaY) {        if ((absDeltaX > mThreshold || absDeltaY > mThreshold)) {            int screenWidth = CommonUtil.getScreenWidth(getContext());            if (absDeltaX >= mThreshold && Math.abs(screenWidth - mDownX) > mSeekEndOffset) {                //\u9632\u6b62\u5168\u5c4f\u865a\u62df\u6309\u952e                mChangePosition = true;                mDownPosition = getCurrentPositionWhenPlaying();            } else {                super.touchSurfaceMoveFullLogic(absDeltaX, absDeltaY);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "touchSurfaceUp", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchSurfaceUp() {        if (mChangePosition) {            return;        }        super.touchSurfaceUp();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "hideAllWidget", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void hideAllWidget() {        if (isFirstPrepared) {            return;        }        super.hideAllWidget();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setProgressAndTime", "params": ["int", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setProgressAndTime(int progress, int secProgress, int currentTime, int totalTime, boolean forceChange) {        super.setProgressAndTime(progress, secProgress, currentTime, totalTime, forceChange);        if (mADTime != null && currentTime > 0) {            int totalSeconds = totalTime / 1000;            int currentSeconds = currentTime / 1000;            mADTime.setText(\"\" + (totalSeconds - currentSeconds));        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "cloneParams", "params": ["GSYBaseVideoPlayer", "GSYBaseVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cloneParams(GSYBaseVideoPlayer from, GSYBaseVideoPlayer to) {        super.cloneParams(from, to);        GSYADVideoPlayer sf = (GSYADVideoPlayer) from;        GSYADVideoPlayer st = (GSYADVideoPlayer) to;        st.isFirstPrepared = sf.isFirstPrepared;        st.changeAdUIState();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        super.release();        if (mADTime != null) {            mADTime.setVisibility(GONE);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeAdUIState", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeAdUIState() {        if (mJumpAd != null) {            mJumpAd.setVisibility((isFirstPrepared) ? VISIBLE : GONE);        }        if (mADTime != null) {            mADTime.setVisibility((isFirstPrepared) ? VISIBLE : GONE);        }        if (mBottomContainer != null) {            int color = (isFirstPrepared) ? Color.TRANSPARENT : getContext().getResources().getColor(R.color.bottom_container_bg);            mBottomContainer.setBackgroundColor(color);        }        if (mCurrentTimeTextView != null) {            mCurrentTimeTextView.setVisibility((isFirstPrepared) ? INVISIBLE : VISIBLE);        }        if (mTotalTimeTextView != null) {            mTotalTimeTextView.setVisibility((isFirstPrepared) ? INVISIBLE : VISIBLE);        }        if (mProgressBar != null) {            mProgressBar.setVisibility((isFirstPrepared) ? INVISIBLE : VISIBLE);            mProgressBar.setEnabled(!(isFirstPrepared));        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeFullWindowViewOnly", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeFullWindowViewOnly() {        ViewGroup vp = (ViewGroup) (CommonUtil.scanForActivity(getContext())).findViewById(Window.ID_ANDROID_CONTENT);        View old = vp.findViewById(getFullId());        if (old != null) {            if (old.getParent() != null) {                ViewGroup viewGroup = (ViewGroup) old.getParent();                vp.removeView(viewGroup);            }        }        mIfCurrentIsFullscreen = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/GSYADVideoPlayer.java", "stars": "2", "class": {"name": "GSYADVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": ["List<Object>"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "DocWriteRequest", "snippet": "    public DocWriteRequest process(List<Object> columnData) throws Exception {        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/CustomProcessor.java", "stars": "23", "class": {"name": "CustomProcessor", "extends": null, "implements": ["Processor"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "public View onCreateView(LayoutInflater inflater, ViewGroup container,\t\tBundle savedInstanceState) {\tView view = inflater.inflate(R.layout.fragment_red, container, false);\treturn view;}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ViewPagerDemo/src/pl/looksok/viewpagerdemo/FragmentRed.java", "stars": "74", "class": {"name": "FragmentRed", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "deploy", "params": ["Course"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deploy(Course course) {        if(course.getNote() != null && !\"\".equals(course.getNote())){            System.out.println(course.getName() + \"\u542b\u6709\u7b14\u8bb0\uff0c\u7b14\u8bb0\u5ba1\u6838OK\");            if(approver != null){                approver.deploy(course);            }        }else{            System.out.println(course.getName() + \"\u4e0d\u542b\u6709\u7b14\u8bb0\uff0c\u7b14\u8bb0\u5ba1\u6838\u4e0d\u901a\u8fc7\");            return;        }    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/NoteApprover.java", "stars": "2", "class": {"name": "NoteApprover", "extends": "Approver", "implements": null, "modifiers": ["public"]}}, {"method_name": "getHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getHost() {\t\treturn host;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/HostServer.java", "stars": "3", "class": {"name": "HostServer", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setHost", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setHost(String host) {\t\tthis.host = host;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/HostServer.java", "stars": "3", "class": {"name": "HostServer", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getPort() {\t\treturn port;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/HostServer.java", "stars": "3", "class": {"name": "HostServer", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPort", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPort(Integer port) {\t\tthis.port = port;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/HostServer.java", "stars": "3", "class": {"name": "HostServer", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getWs_port", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getWs_port() {\t\treturn ws_port;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/HostServer.java", "stars": "3", "class": {"name": "HostServer", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setWs_port", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setWs_port(Integer ws_port) {\t\tthis.ws_port = ws_port;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/HostServer.java", "stars": "3", "class": {"name": "HostServer", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getWss_port", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getWss_port() {\t\treturn wss_port;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/HostServer.java", "stars": "3", "class": {"name": "HostServer", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setWss_port", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setWss_port(Integer wss_port) {\t\tthis.wss_port = wss_port;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/HostServer.java", "stars": "3", "class": {"name": "HostServer", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"HostServer [host=\" + host + \", port=\" + port + \", ws_port=\" + ws_port + \", wss_port=\" + wss_port + \"]\";\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/HostServer.java", "stars": "3", "class": {"name": "HostServer", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getStatusBarHeight", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double getStatusBarHeight(Context context) {        int statusBarHeight = 0;        //\u83b7\u53d6status_bar_height\u8d44\u6e90\u7684ID        int resourceId = context.getResources().getIdentifier(\"status_bar_height\", \"dimen\", \"android\");        if (resourceId > 0) {            //\u6839\u636e\u8d44\u6e90ID\u83b7\u53d6\u54cd\u5e94\u7684\u5c3a\u5bf8\u503c            statusBarHeight = context.getResources().getDimensionPixelSize(resourceId);        }        return statusBarHeight;    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNavigationBarHeight", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getNavigationBarHeight(Context context) {        if (!hasNavigationBar(context)) {            return 0;        }        Resources resources = context.getResources();        int resourceId = resources.getIdentifier(\"navigation_bar_height\",                \"dimen\", \"android\");        //\u83b7\u53d6NavigationBar\u7684\u9ad8\u5ea6        return resources.getDimensionPixelSize(resourceId);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasNavigationBar", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean hasNavigationBar(Context context) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {            Display display = getWindowManager(context).getDefaultDisplay();            Point size = new Point();            Point realSize = new Point();            display.getSize(size);            display.getRealSize(realSize);            return realSize.x != size.x || realSize.y != size.y;        } else {            boolean menu = ViewConfiguration.get(context).hasPermanentMenuKey();            boolean back = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);            return !(menu || back);        }    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScreenWidth", "params": ["Context", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getScreenWidth(Context context, boolean isIncludeNav) {        if (isIncludeNav) {            return context.getResources().getDisplayMetrics().widthPixels + getNavigationBarHeight(context);        } else {            return context.getResources().getDisplayMetrics().widthPixels;        }    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScreenHeight", "params": ["Context", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getScreenHeight(Context context, boolean isIncludeNav) {        if (isIncludeNav) {            return context.getResources().getDisplayMetrics().heightPixels + getNavigationBarHeight(context);        } else {            return context.getResources().getDisplayMetrics().heightPixels;        }    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hideActionBar", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void hideActionBar(Context context) {        AppCompatActivity appCompatActivity = getAppCompatActivity(context);        if (appCompatActivity != null) {            ActionBar ab = appCompatActivity.getSupportActionBar();            if (ab != null && ab.isShowing()) {                ab.setShowHideAnimationEnabled(false);                ab.hide();            }        }    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "showActionBar", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showActionBar(final Context context) {        AppCompatActivity appCompatActivity = getAppCompatActivity(context);        if (appCompatActivity != null) {            ActionBar ab = appCompatActivity.getSupportActionBar();            if (ab != null && !ab.isShowing()) {                ab.setShowHideAnimationEnabled(false);                ab.show();            }        }    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scanForActivity", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "Activity", "snippet": "    public static Activity scanForActivity(Context context) {        return context == null ? null : (context instanceof Activity ? (Activity) context : (context instanceof ContextWrapper ? scanForActivity(((ContextWrapper) context).getBaseContext()) : null));    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAppCompatActivity", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "AppCompatActivity", "snippet": "    public static AppCompatActivity getAppCompatActivity(Context context) {        if (context == null) return null;        if (context instanceof AppCompatActivity) {            return (AppCompatActivity) context;        } else if (context instanceof ContextThemeWrapper) {            return getAppCompatActivity(((ContextThemeWrapper) context).getBaseContext());        }        return null;    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dp2px", "params": ["Context", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int dp2px(Context context, float dpValue) {        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dpValue, context.getResources().getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sp2px", "params": ["Context", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int sp2px(Context context, float dpValue) {        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, dpValue, context.getResources().getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWindowManager", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "WindowManager", "snippet": "    public static WindowManager getWindowManager(Context context) {        return (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEdge", "params": ["Context", "MotionEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isEdge(Context context, MotionEvent e) {        int edgeSize = dp2px(context, 40);        return e.getRawX() < edgeSize                || e.getRawX() > getScreenWidth(context, true) - edgeSize                || e.getRawY() < edgeSize                || e.getRawY() > getScreenHeight(context, true) - edgeSize;    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNetworkType", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getNetworkType(Context context) {        //\u6539\u4e3acontext.getApplicationContext()\uff0c\u9632\u6b62\u5728Android 6.0\u4e0a\u53d1\u751f\u5185\u5b58\u6cc4\u6f0f        ConnectivityManager connectMgr = (ConnectivityManager) context.getApplicationContext()                .getSystemService(Context.CONNECTIVITY_SERVICE);        if (connectMgr == null) {            return NO_NETWORK;        }       NetworkInfo networkInfo = connectMgr.getActiveNetworkInfo();        if (networkInfo == null) {            // \u6ca1\u6709\u4efb\u4f55\u7f51\u7edc            return NO_NETWORK;        }        if (!networkInfo.isConnected()) {            // \u7f51\u7edc\u65ad\u5f00\u6216\u5173\u95ed            return NETWORK_CLOSED;        }        if (networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET) {            // \u4ee5\u592a\u7f51\u7f51\u7edc            return NETWORK_ETHERNET;        } else if (networkInfo.getType() == ConnectivityManager.TYPE_WIFI) {            // wifi\u7f51\u7edc\uff0c\u5f53\u6fc0\u6d3b\u65f6\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u6570\u636e\u6d41\u91cf\u5c06\u4f7f\u7528\u6b64\u8fde\u63a5            return NETWORK_WIFI;        } else if (networkInfo.getType() == ConnectivityManager.TYPE_MOBILE) {            // \u79fb\u52a8\u6570\u636e\u8fde\u63a5,\u4e0d\u80fd\u4e0e\u8fde\u63a5\u5171\u5b58,\u5982\u679cwifi\u6253\u5f00\uff0c\u5219\u81ea\u52a8\u5173\u95ed            switch (networkInfo.getSubtype()) {                case TelephonyManager.NETWORK_TYPE_GPRS:                case TelephonyManager.NETWORK_TYPE_EDGE:                case TelephonyManager.NETWORK_TYPE_CDMA:                case TelephonyManager.NETWORK_TYPE_1xRTT:                case TelephonyManager.NETWORK_TYPE_IDEN:                    // 2G\u7f51\u7edc                case TelephonyManager.NETWORK_TYPE_UMTS:                case TelephonyManager.NETWORK_TYPE_EVDO_0:                case TelephonyManager.NETWORK_TYPE_EVDO_A:                case TelephonyManager.NETWORK_TYPE_HSDPA:                case TelephonyManager.NETWORK_TYPE_HSUPA:                case TelephonyManager.NETWORK_TYPE_HSPA:                case TelephonyManager.NETWORK_TYPE_EVDO_B:                case TelephonyManager.NETWORK_TYPE_EHRPD:                case TelephonyManager.NETWORK_TYPE_HSPAP:                    // 3G\u7f51\u7edc                case TelephonyManager.NETWORK_TYPE_LTE:                    // 4G\u7f51\u7edc                    return NETWORK_MOBILE;            }        }        // \u672a\u77e5\u7f51\u7edc        return NETWORK_UNKNOWN;    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlayByIntent", "params": ["Context", "File"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent getPlayByIntent(Context mContext, File file) {        if (Build.VERSION.SDK_INT >= 24) {            Uri uri = FileProvider.getUriForFile(mContext, mContext.getPackageName() + \".fileprovider\", file);            Intent intent = new Intent();            intent.setAction(Intent.ACTION_VIEW);            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);            intent.setDataAndType(uri, \"video/*\");            Intent chooser = Intent.createChooser(intent, \"Play by\");            chooser.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            return chooser;        } else {            Uri uri = Uri.fromFile(file);            Intent intent = new Intent();            intent.setAction(Intent.ACTION_VIEW);            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);            intent.setDataAndType(uri, \"video/*\");            Intent chooser = Intent.createChooser(intent, \"Play by\");            chooser.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            return chooser;        }    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "songArt", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "Bitmap", "snippet": "    public static Bitmap songArt(Context context) {        return BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_launcher);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAutoRotate", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isAutoRotate(Context context) {        try {            int autoRotate = Settings.System.getInt(context.getContentResolver(), Settings.System.ACCELEROMETER_ROTATION);            return autoRotate == 1;        } catch (Settings.SettingNotFoundException e) {            e.printStackTrace();        }        return false;    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/app/src/main/java/com/cj/lightprogressview/PlayerUtils.java", "stars": "32", "class": {"name": "PlayerUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "    public Status getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentExecId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentExecId() {        return currentExecId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getProjectId() {        return projectId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFlowId() {        return flowId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubmitUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSubmitUser() {        return submitUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getUpdateTime() {        return updateTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubmitTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getSubmitTime() {        return submitTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getStartTime() {        return startTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getEndTime() {        return endTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEncType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEncType() {        return encType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getData() {        return data;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCycleOption", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getCycleOption() {        return cycleOption;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProxyUsers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProxyUsers() {        return proxyUsers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutionOptions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecutionOptions", "snippet": "    public ExecutionOptions getExecutionOptions() {        return executionOptions;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCycleErrorOption", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCycleErrorOption() {        return cycleErrorOption;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOtherOption", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getOtherOption() {        return otherOption;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSlaOptions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<SlaOption>", "snippet": "    public List<SlaOption> getSlaOptions() {        return slaOptions;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(int id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["Status"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(Status status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentExecId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentExecId(int currentExecId) {        this.currentExecId = currentExecId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProjectId(int projectId) {        this.projectId = projectId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlowId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFlowId(String flowId) {        this.flowId = flowId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubmitUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubmitUser(String submitUser) {        this.submitUser = submitUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubmitTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubmitTime(long submitTime) {        this.submitTime = submitTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdateTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUpdateTime(long updateTime) {        this.updateTime = updateTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartTime(long startTime) {        this.startTime = startTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEndTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndTime(long endTime) {        this.endTime = endTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEncType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEncType(int encType) {        this.encType = encType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(byte[] data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCycleOption", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCycleOption(Map<String, Object> cycleOption) {        this.cycleOption = cycleOption;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProxyUsers", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProxyUsers(String proxyUsers) {        this.proxyUsers = proxyUsers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutionOptions", "params": ["ExecutionOptions"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecutionOptions(ExecutionOptions executionOptions) {        this.executionOptions = executionOptions;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCycleErrorOption", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCycleErrorOption(String recoverErrorOption) {        this.cycleErrorOption = recoverErrorOption;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOtherOption", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOtherOption(Map<String, Object> otherOption) {        this.otherOption = otherOption;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSlaOptions", "params": ["List<SlaOption>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSlaOptions(List<SlaOption> slaOptions) {        this.slaOptions = slaOptions;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycle.java", "stars": "18", "class": {"name": "ExecutionCycle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "compare", "params": ["Tuple2<Point,Double>", "Tuple2<Point,Double>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int compare(Tuple2<Point, Double> t1, Tuple2<Point, Double> t2)    {        // computeSpatialDistance(Double lon, Double lat, Double lon1, Double lat1)        double distance1 = HelperClass.computeEuclideanDistance(t1.f0.point.getX(), t1.f0.point.getY(), queryPoint.point.getX(), queryPoint.point.getY()) ;        double distance2 = HelperClass.computeEuclideanDistance(t2.f0.point.getX(), t2.f0.point.getY(), queryPoint.point.getX(), queryPoint.point.getY()) ;        if (distance1 > distance2) {            return -1;        }        else if (distance1 == distance2) {            return 0;        }        return 1;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/utils/SpatialDistanceComparator.java", "stars": "2", "class": {"name": "SpatialDistanceComparator", "extends": null, "implements": ["Comparator", "Serializable"], "modifiers": ["public"]}}, {"method_name": "createSqlSource", "params": ["Configuration", "XNode", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "SqlSource", "snippet": "  public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType) {    SqlSource source = super.createSqlSource(configuration, script, parameterType);    checkIsNotDynamic(source);    return source;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java", "stars": "15", "class": {"name": "RawLanguageDriver", "extends": "XMLLanguageDriver", "implements": null, "modifiers": ["public"]}}, {"method_name": "createSqlSource", "params": ["Configuration", "String", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "SqlSource", "snippet": "  public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {    SqlSource source = super.createSqlSource(configuration, script, parameterType);    checkIsNotDynamic(source);    return source;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java", "stars": "15", "class": {"name": "RawLanguageDriver", "extends": "XMLLanguageDriver", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkIsNotDynamic", "params": ["SqlSource"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkIsNotDynamic(SqlSource source) {    if (!RawSqlSource.class.equals(source.getClass())) {      throw new BuilderException(\"Dynamic content is not allowed when using RAW language\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java", "stars": "15", "class": {"name": "RawLanguageDriver", "extends": "XMLLanguageDriver", "implements": null, "modifiers": ["public"]}}, {"method_name": "move", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void move()\t{\t\tSystem.out.println(\"\u00b6\u00af\u00ce\u00ef\u00d4\u00b0\u00c0\u00ef\u00d3\u00d0\u00c0\u00cf\u00bb\u00a2!\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Fangfafugaitest1.java", "stars": "2", "class": {"name": "Fangfafugaitest1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gerarDesvioPadraoPlataforma", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void gerarDesvioPadraoPlataforma() {        String line = \"\";        int contaReviews = 0;        DecimalFormat df = new DecimalFormat(\"#.##\");        Map<String, Info> map = new TreeMap<>();        File arq = new File(\"game-reviews.csv\");        SimpleReader file = new SimpleReader(arq.getAbsolutePath());        line = file.readLine();        line = file.readLine();        while (line != null) {            String[] col = line.split(\";\");            contaReviews++;            String platform = col[1];            String score = col[3];            if (!map.containsKey(platform)) {                Info i = new Info();                i.totaisTitulos = 1;                i.score = Double.parseDouble(score);                map.put(platform, i);            } else {                Info i = map.get(platform);                i.score += Double.parseDouble(score);                i.totaisTitulos++;            }            line = file.readLine();        }        Set<Map.Entry<String, Info>> set = map.entrySet();        //set.stream().filter(p -> p.getKey().equals(\"Android\"))        set.forEach((result) -> {                    double mediaPlataforma = result.getValue().score / result.getValue().totaisTitulos;                    double somaAoQuadrado  = this.getSomaAoQuadrado(result.getKey(), mediaPlataforma);                    double totaisTitulos   = result.getValue().totaisTitulos;                                        Double desvioPadrao = Math.sqrt( (somaAoQuadrado/totaisTitulos) );                                        System.out.println(\"Desvio Padr\u00e3o do \"+result.getKey()                            +\" \u00e9 de \"+ df.format(desvioPadrao));                });    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/GeradorLista/DesvioPadrao.java", "stars": "2", "class": {"name": "DesvioPadrao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSomaAoQuadrado", "params": ["String", "double"], "throws": null, "modifiers": ["private"], "return_type": "double", "snippet": "    private double getSomaAoQuadrado(String plataforma, double mediaAritmetica) {        String line = \"\";        Map<String, Info> map = new TreeMap<>();        File arq = new File(\"game-reviews.csv\");        SimpleReader file = new SimpleReader(arq.getAbsolutePath());        line = file.readLine();        line = file.readLine();        while (line != null) {            String[] col = line.split(\";\");            String platform = col[1];            String score = col[3];            if (!map.containsKey(platform)) {                Info i = new Info();                i.score = Double.parseDouble(score);                i.somaValorAoQuadrado = Math.pow((Double.parseDouble(score) - mediaAritmetica), 2);                map.put(platform, i);            } else {                Info i = map.get(platform);                i.score += Double.parseDouble(score);                i.somaValorAoQuadrado += Math.pow((Double.parseDouble(score) - mediaAritmetica), 2);            }            line = file.readLine();        }        Set<Map.Entry<String, Info>> set = map.entrySet();        set.stream().filter(p -> p.getKey().equals(plataforma))                .forEach((result) -> {                   totalQuadrado = result.getValue().somaValorAoQuadrado;                });        return totalQuadrado;    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/GeradorLista/DesvioPadrao.java", "stars": "2", "class": {"name": "DesvioPadrao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["ServletConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void init(final ServletConfig config) throws ServletException {    super.init(config);    this.server = (AzkabanWebServer) getApplication();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/NoteServlet.java", "stars": "18", "class": {"name": "NoteServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleGet", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handleGet(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws ServletException, IOException {    if (isAdmin(session.getUser())) {      handleNotePageLoad(req, resp, session);    } else {      warningNonAdminUsers(resp, \"The requested user doesn't have admin permission\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/NoteServlet.java", "stars": "18", "class": {"name": "NoteServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "warningNonAdminUsers", "params": ["HttpServletResponse", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void warningNonAdminUsers(final HttpServletResponse resp, final String message)      throws IOException {    final HashMap<String, Object> ret = new HashMap<>();    ret.put(\"error\", message);    this.writeJSON(resp, ret);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/NoteServlet.java", "stars": "18", "class": {"name": "NoteServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleNotePageLoad", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleNotePageLoad(final HttpServletRequest req,      final HttpServletResponse resp, final Session session) throws ServletException,      IOException {    final Page page = newPage(req, resp, session,        \"azkaban/webapp/servlet/velocity/notepage.vm\");    String languageType = LoadJsonUtils.getLanguageType();    page.add(\"currentlangType\", languageType);    page.add(\"note_type\", type);    page.add(\"note_message\", message);    page.add(\"note_url\", url);    page.render();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/NoteServlet.java", "stars": "18", "class": {"name": "NoteServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePost", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handlePost(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws ServletException, IOException {    if (isAdmin(session.getUser()) && hasParam(req, \"ajax\")) {      handleAJAXAction(req, resp, session);    } else {      warningNonAdminUsers(resp, \"The requested user doesn't have admin permission, \"          + \"Or the HTTP request doesn't include ajax.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/NoteServlet.java", "stars": "18", "class": {"name": "NoteServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleAJAXAction", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleAJAXAction(final HttpServletRequest req,      final HttpServletResponse resp, final Session session) throws ServletException,      IOException {    final HashMap<String, Object> ret = new HashMap<>();    final String ajaxName = getParam(req, \"ajax\");    try {      if (ajaxName.equals(\"addNote\")) {        ajaxAddNotes(req, ret);      } else if (ajaxName.equals(\"removeNote\")) {        ajaxRemoveNotes(ret);      } else {        ret.put(\"error\", \"Can not find the ajax operation\");      }    } catch (final Exception e) {      ret.put(\"error\", e.getMessage());    }    this.writeJSON(resp, ret);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/NoteServlet.java", "stars": "18", "class": {"name": "NoteServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxAddNotes", "params": ["HttpServletRequest", "Map<String,Object>"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void ajaxAddNotes(final HttpServletRequest req,      final Map<String, Object> ret) throws ServletException {    type = getParam(req, \"type\");    message = getParam(req, \"message\");    url = getParam(req, \"url\");    logger.info(\"receive note message. Type: \" + type + \" message: \" + message + \" url: \" + url);    ret.put(\"status\", \"success\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/NoteServlet.java", "stars": "18", "class": {"name": "NoteServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxRemoveNotes", "params": ["Map<String,Object>"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void ajaxRemoveNotes(final Map<String, Object> ret) throws ServletException {    type = null;    message = null;    url = null;    logger.info(\"removing note from memory.\");    ret.put(\"status\", \"success\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/NoteServlet.java", "stars": "18", "class": {"name": "NoteServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "isAdmin", "params": ["User"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isAdmin(final User user) {    return HttpRequestUtils.hasPermission(user, Type.ADMIN);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/NoteServlet.java", "stars": "18", "class": {"name": "NoteServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "transform", "params": ["Request", "ResponseDefinition", "FileSource", "Parameters"], "throws": null, "modifiers": ["public"], "return_type": "ResponseDefinition", "snippet": "  public ResponseDefinition transform(Request request, ResponseDefinition definition,    FileSource files, Parameters parameters) {    ResponseDefinitionBuilder definitionBuilder = ResponseDefinitionBuilder      .like(definition);    final ImmutableMap<String, Object> model = ImmutableMap.<String, Object>builder()      .put(\"parameters\", calculateParameters(parameters))      .put(\"request\", RequestTemplateModel.from(request)).build();    //proxy    if (definition.isProxyResponse()) {      PebbleTemplate baseUrlTemplate = engine.getTemplate(definition.getProxyBaseUrl());      definitionBuilder.proxiedFrom(evaluate(baseUrlTemplate, model));      return definitionBuilder.build();    }    //body    return Optional.ofNullable(getBodyTemplateString(definition))      .map(transformBody(definition, definitionBuilder, model))      .orElse(definition);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/transformers/PebbleTransformer.java", "stars": "8", "class": {"name": "PebbleTransformer", "extends": "ResponseDefinitionTransformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "transformBody", "params": ["ResponseDefinition", "ResponseDefinitionBuilder", "ImmutableMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "Function<String,ResponseDefinition>", "snippet": "  private Function<String, ResponseDefinition> transformBody(ResponseDefinition definition,    ResponseDefinitionBuilder definitionBuilder, ImmutableMap<String, Object> model) {    return body -> {      PebbleTemplate bodyTemplate = engine.getTemplate(body);      final String newBodyOrigin = evaluate(bodyTemplate, model);      String newBody;      if (definition.specifiesBodyFile()) {        String template = jcrFileReader.readText(newBodyOrigin)          .orElseThrow(() -> new WireMockException(String.format(\"Cannot read template '%s'!\", newBodyOrigin)));        PebbleTemplate fileTemplate = engine.getTemplate(template);        newBody = evaluate(fileTemplate, model);      } else {        newBody = newBodyOrigin;      }      return definitionBuilder.withBody(newBody).build();    };  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/transformers/PebbleTransformer.java", "stars": "8", "class": {"name": "PebbleTransformer", "extends": "ResponseDefinitionTransformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "calculateParameters", "params": ["Parameters"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,Object>", "snippet": "  private Map<String, Object> calculateParameters(Parameters parameters) {    return firstNonNull(parameters, Collections.<String, Object>emptyMap()).entrySet()      .stream()      .collect(Collectors.toMap(Entry::getKey, e -> {        if (e.getValue() instanceof Closure) {          return ((Closure) e.getValue()).call();        } else if (e.getValue() instanceof Supplier<?>) {          return ((Supplier) e.getValue()).get();        } else {          return e.getValue();        }      }));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/transformers/PebbleTransformer.java", "stars": "8", "class": {"name": "PebbleTransformer", "extends": "ResponseDefinitionTransformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBodyTemplateString", "params": ["ResponseDefinition"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getBodyTemplateString(ResponseDefinition definition) {    return Optional.of(definition)      .map(ResponseDefinition::getBody)      .orElse(definition.getBodyFileName());  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/transformers/PebbleTransformer.java", "stars": "8", "class": {"name": "PebbleTransformer", "extends": "ResponseDefinitionTransformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["PebbleTemplate", "Map<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String evaluate(PebbleTemplate template, Map<String, Object> context) {    try {      Writer writer = new StringWriter();      template.evaluate(writer, context);      return writer.toString();    } catch (IOException e) {      return throwUnchecked(e, String.class);    }  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/transformers/PebbleTransformer.java", "stars": "8", "class": {"name": "PebbleTransformer", "extends": "ResponseDefinitionTransformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyGlobally", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean applyGlobally() {    return global;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/transformers/PebbleTransformer.java", "stars": "8", "class": {"name": "PebbleTransformer", "extends": "ResponseDefinitionTransformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return NAME;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/transformers/PebbleTransformer.java", "stars": "8", "class": {"name": "PebbleTransformer", "extends": "ResponseDefinitionTransformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSuccess", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSuccess() {        return success;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/ProjectInfoResponse.java", "stars": "4", "class": {"name": "ProjectInfoResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Project", "snippet": "    public Project getData() {        return data;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/ProjectInfoResponse.java", "stars": "4", "class": {"name": "ProjectInfoResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorsMessages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Error>", "snippet": "    public ArrayList<Error> getErrorsMessages() {        return errorsMessages;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/ProjectInfoResponse.java", "stars": "4", "class": {"name": "ProjectInfoResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorsString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getErrorsString () {        String output = \"\";        for (Error error : errorsMessages) {            output = output.concat(error.getErrorMessage()).concat(\"\\n\");        }        return output.substring(0, output.lastIndexOf(\"\\n\"));    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/ProjectInfoResponse.java", "stars": "4", "class": {"name": "ProjectInfoResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/BirchTanBarkBlock.java", "stars": "2", "class": {"name": "BirchTanBarkBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/BirchTanBarkBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "FallingBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "createBindFramebuffer", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createBindFramebuffer(int width, int height) {        if (width != framebufferWidth || height != framebufferHeight)            super.createFramebuffer(width, height);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/TempFrameBuffer.java", "stars": "2", "class": {"name": "TempFrameBuffer", "extends": "Framebuffer", "implements": null, "modifiers": ["public"]}}, {"method_name": "isEmail", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isEmail(String email) {        String regex = \"\\\\w+@\\\\w+\\\\.[a-z]+(\\\\.[a-z]+)?\";        return Pattern.matches(regex, email);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isIdCard", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isIdCard(String idCard) {        String regex = \"[1-9]\\\\d{13,16}[a-zA-Z0-9]{1}\";        return Pattern.matches(regex,idCard);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isImage", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isImage(String suffix) {        if(null != suffix && !\"\".equals(suffix)){            String regex = \"(.*?)(?i)(jpg|jpeg|png|gif|bmp|webp)\";            return Pattern.matches(regex, suffix);        }        return false;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isMobile", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isMobile(String mobile) {        String regex = \"(\\\\+\\\\d+)?1[34578]\\\\d{9}$\";        return Pattern.matches(regex,mobile);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isPhone", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isPhone(String phone) {        String regex = \"(\\\\+\\\\d+)?(\\\\d{3,4}\\\\-?)?\\\\d{7,8}$\";        return Pattern.matches(regex, phone);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isDigit", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isDigit(String digit) {        String regex = \"\\\\-?[1-9]\\\\d+\";        return Pattern.matches(regex,digit);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isDecimals", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isDecimals(String decimals) {        String regex = \"\\\\-?[1-9]\\\\d+(\\\\.\\\\d+)?\";        return Pattern.matches(regex,decimals);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isBlankSpace", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isBlankSpace(String blankSpace) {        String regex = \"\\\\s+\";        return Pattern.matches(regex,blankSpace);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isChinese", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isChinese(String chinese) {        String regex = \"^[\\u4E00-\\u9FA5]+$\";        return Pattern.matches(regex,chinese);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isRealName", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isRealName(String chinese) {        String regex = \"^[A-Za-z0-9\\\\s\\u4E00-\\u9FA5]+$\";        return Pattern.matches(regex,chinese);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isNumber", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isNumber(String str) {        String regex = \"^[1-9]\\\\d*$\";        return Pattern.matches(regex,str);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isStudentNum", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isStudentNum(String num) {        String regex = \"^[A-Za-z0-9-_]+$\";        return Pattern.matches(regex,num);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isBirthday", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isBirthday(String birthday) {        String regex = \"^(\\\\d{4})-(\\\\d{2})-(\\\\d{2})$\";        return Pattern.matches(regex,birthday);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isURL", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isURL(String url) {        String regex = \"(https?://(w{3}\\\\.)?)?\\\\w+\\\\.\\\\w+(\\\\.[a-zA-Z]+)*(:\\\\d{1,5})?(/\\\\w*)*(\\\\??(.+=.*)?(&.+=.*)?)?\";        return Pattern.matches(regex, url);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isPostcode", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isPostcode(String postcode) {        String regex = \"[1-9]\\\\d{5}\";        return Pattern.matches(regex, postcode);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isIpAddress", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isIpAddress(String ipAddress) {        String regex = \"[1-9](\\\\d{1,2})?\\\\.(0|([1-9](\\\\d{1,2})?))\\\\.(0|([1-9](\\\\d{1,2})?))\\\\.(0|([1-9](\\\\d{1,2})?))\";        return Pattern.matches(regex, ipAddress);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/PatternKit.java", "stars": "2", "class": {"name": "PatternKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "invalidate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void invalidate() {    valid = false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isValid() {    return valid && realConnection != null && dataSource.pingConnection(this);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getRealConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "  public Connection getRealConnection() {    return realConnection;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getProxyConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "  public Connection getProxyConnection() {    return proxyConnection;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getRealHashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getRealHashCode() {    return realConnection == null ? 0 : realConnection.hashCode();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getConnectionTypeCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getConnectionTypeCode() {    return connectionTypeCode;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "setConnectionTypeCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setConnectionTypeCode(int connectionTypeCode) {    this.connectionTypeCode = connectionTypeCode;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getCreatedTimestamp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getCreatedTimestamp() {    return createdTimestamp;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "setCreatedTimestamp", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCreatedTimestamp(long createdTimestamp) {    this.createdTimestamp = createdTimestamp;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getLastUsedTimestamp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastUsedTimestamp() {    return lastUsedTimestamp;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "setLastUsedTimestamp", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLastUsedTimestamp(long lastUsedTimestamp) {    this.lastUsedTimestamp = lastUsedTimestamp;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getTimeElapsedSinceLastUse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getTimeElapsedSinceLastUse() {    return System.currentTimeMillis() - lastUsedTimestamp;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getAge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getAge() {    return System.currentTimeMillis() - createdTimestamp;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getCheckoutTimestamp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getCheckoutTimestamp() {    return checkoutTimestamp;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "setCheckoutTimestamp", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCheckoutTimestamp(long timestamp) {    this.checkoutTimestamp = timestamp;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "getCheckoutTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getCheckoutTime() {    return System.currentTimeMillis() - checkoutTimestamp;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return hashCode;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object obj) {    if (obj instanceof PooledConnection) {      return realConnection.hashCode() == ((PooledConnection) obj).realConnection.hashCode();    } else if (obj instanceof Connection) {      return hashCode == obj.hashCode();    } else {      return false;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "invoke", "params": ["Object", "Method", "Object"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {    String methodName = method.getName();    if (CLOSE.equals(methodName)) {      dataSource.pushConnection(this);      return null;    }    try {      if (!Object.class.equals(method.getDeclaringClass())) {        // issue #579 toString() should never fail        // throw an SQLException instead of a Runtime        checkConnection();      }      return method.invoke(realConnection, args);    } catch (Throwable t) {      throw ExceptionUtil.unwrapThrowable(t);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "checkConnection", "params": [], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkConnection() throws SQLException {    if (!valid) {      throw new SQLException(\"Error accessing PooledConnection. Connection is invalid.\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "stars": "15", "class": {"name": "PooledConnection", "extends": null, "implements": ["InvocationHandler"], "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUp() {        mockMvc = MockMvcBuilders.standaloneSetup(springBootController).build();    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-start/src/test/java/com/soft1851/springboot/start/controller/SpringBootControllerTest.java", "stars": "3", "class": {"name": "SpringBootControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "hello", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void hello() throws Exception {        mockMvc.perform(MockMvcRequestBuilders                .get(\"/api/hello\")                .accept(MediaType.APPLICATION_JSON))                .andExpect(MockMvcResultMatchers.status().isOk())                .andExpect(MockMvcResultMatchers.content()                        .string(\"Hello, Spring Boot!\"));    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-start/src/test/java/com/soft1851/springboot/start/controller/SpringBootControllerTest.java", "stars": "3", "class": {"name": "SpringBootControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getMaxConcurrentRunsOneFlow", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getMaxConcurrentRunsOneFlow(final Props azkProps) {    // The default threshold is set to 30 for now, in case some users are affected. We may    // decrease this number in future, to better prevent DDos attacks.    return azkProps.getInt(ConfigurationKeys.MAX_CONCURRENT_RUNS_ONEFLOW,            DEFAULT_MAX_ONCURRENT_RUNS_ONEFLOW);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "createCleanerThread", "params": [], "throws": null, "modifiers": ["private"], "return_type": "CleanerThread", "snippet": "  private CleanerThread createCleanerThread() {    final long executionLogsRetentionMs = this.azkProps.getLong(\"execution.logs.retention.ms\",            DEFAULT_EXECUTION_LOGS_RETENTION_MS);    return new CleanerThread(executionLogsRetentionMs);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAzkabanProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getAzkabanProps() {    return this.azkProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "initialize", "params": [], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "void", "snippet": "  void initialize() throws ExecutorManagerException {    if (this.initialized) {      return;    }    this.initialized = true;    this.setupExecutors();    this.loadRunningExecutions();    this.queuedFlows = new QueuedExecutions(            this.azkProps.getLong(ConfigurationKeys.WEBSERVER_QUEUE_SIZE, 100000));    this.cacheDir = new File(this.azkProps.getString(\"cache.directory\", \"cache\"));    // TODO extract QueueProcessor as a separate class, move all of this into it    setupExecutotrComparatorWeightsMap();    setupExecutorFilterList();    this.queueProcessor = setupQueueProcessor();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void start() throws ExecutorManagerException {    initialize();    this.updaterThread.start();    this.cleanerThread.start();    this.queueProcessor.start();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "findApplicationIdFromLog", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String findApplicationIdFromLog(final String logData) {    final Matcher matcher = APPLICATION_ID_PATTERN.matcher(logData);    String appId = null;    if (matcher.find()) {      appId = matcher.group().substring(12);    }    ExecutorManagerHA.logger.info(\"Application ID is \" + appId);    return appId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setupQueueProcessor", "params": [], "throws": null, "modifiers": ["private"], "return_type": "QueueProcessorThread", "snippet": "  private QueueProcessorThread setupQueueProcessor() {    return new QueueProcessorThread(            this.azkProps.getBoolean(Constants.ConfigurationKeys.QUEUEPROCESSING_ENABLED, true),            this.azkProps.getLong(Constants.ConfigurationKeys.ACTIVE_EXECUTOR_REFRESH_IN_MS, 50000),            this.azkProps.getInt(                    Constants.ConfigurationKeys.ACTIVE_EXECUTOR_REFRESH_IN_NUM_FLOW, 5),            this.azkProps.getInt(                    Constants.ConfigurationKeys.MAX_DISPATCHING_ERRORS_PERMITTED,                    this.activeExecutors.getAll().size()),            this.sleepAfterDispatchFailure);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setupExecutotrComparatorWeightsMap", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setupExecutotrComparatorWeightsMap() {    // initialize comparator feature weights for executor selector from azkaban.properties    final Map<String, String> compListStrings = this.azkProps            .getMapByPrefix(ConfigurationKeys.EXECUTOR_SELECTOR_COMPARATOR_PREFIX);    if (compListStrings != null) {      this.comparatorWeightsMap = new TreeMap<>();      for (final Map.Entry<String, String> entry : compListStrings.entrySet()) {        this.comparatorWeightsMap.put(entry.getKey(), Integer.valueOf(entry.getValue()));      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setupExecutorFilterList", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setupExecutorFilterList() {    // initialize hard filters for executor selector from azkaban.properties    final String filters = this.azkProps            .getString(ConfigurationKeys.EXECUTOR_SELECTOR_FILTERS, \"\");    if (filters != null) {      this.filterList = Arrays.asList(StringUtils.split(filters, \",\"));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "createExecutorInfoRefresherService", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ExecutorService", "snippet": "  private ExecutorService createExecutorInfoRefresherService() {    return Executors.newFixedThreadPool(this.azkProps.getInt(            ConfigurationKeys.EXECUTORINFO_REFRESH_MAX_THREADS, 5));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setupExecutors", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setupExecutors() throws ExecutorManagerException {    checkMultiExecutorMode();    this.activeExecutors.setupExecutors();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "checkMultiExecutorMode", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkMultiExecutorMode() {    if (!this.azkProps.getBoolean(Constants.ConfigurationKeys.USE_MULTIPLE_EXECUTORS, false)) {      throw new IllegalArgumentException(              Constants.ConfigurationKeys.USE_MULTIPLE_EXECUTORS +                      \" must be true. Single executor mode is not supported any more.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "refreshExecutors", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void refreshExecutors() {    final List<Pair<Executor, Future<ExecutorInfo>>> futures =            new ArrayList<>();    for (final Executor executor : this.activeExecutors.getAll()) {      // execute each executorInfo refresh task to fetch      final Future<ExecutorInfo> fetchExecutionInfo =              this.executorInfoRefresherService.submit(                      () -> this.apiGateway.callForJsonType(executor.getHost(),                              executor.getPort(), \"/serverStatistics\", null, ExecutorInfo.class));      futures.add(new Pair<>(executor,              fetchExecutionInfo));    }    boolean wasSuccess = true;    for (final Pair<Executor, Future<ExecutorInfo>> refreshPair : futures) {      final Executor executor = refreshPair.getFirst();      executor.setExecutorInfo(null); // invalidate cached ExecutorInfo      try {        // max 5 secs        final ExecutorInfo executorInfo = refreshPair.getSecond().get(5, TimeUnit.SECONDS);        // executorInfo is null if the response was empty        executor.setExecutorInfo(executorInfo);        logger.info(String.format(                \"Successfully refreshed executor: %s with executor info : %s\",                executor, executorInfo));      } catch (final TimeoutException e) {        wasSuccess = false;        logger.error(\"Timed out while waiting for ExecutorInfo refresh\"                + executor, e);      } catch (final Exception e) {        wasSuccess = false;        logger.error(\"Failed to update ExecutorInfo for executor : \"                + executor, e);      }      // update is successful for all executors      if (wasSuccess) {        this.lastSuccessfulExecutorInfoRefresh = System.currentTimeMillis();      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "disableQueueProcessorThread", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void disableQueueProcessorThread() {    this.queueProcessor.setActive(false);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "enableQueueProcessorThread", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void enableQueueProcessorThread() {    this.queueProcessor.setActive(true);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getQueueProcessorThreadState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "State", "snippet": "  public State getQueueProcessorThreadState() {    return this.queueProcessor.getState();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "isQueueProcessorThreadActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isQueueProcessorThreadActive() {    return this.queueProcessor.isActive();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getLastSuccessfulExecutorInfoRefresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastSuccessfulExecutorInfoRefresh() {    return this.lastSuccessfulExecutorInfoRefresh;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAvailableExecutorComparatorNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getAvailableExecutorComparatorNames() {    return ExecutorComparator.getAvailableComparatorNames();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAvailableExecutorFilterNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getAvailableExecutorFilterNames() {    return ExecutorFilter.getAvailableFilterNames();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutorManagerThreadState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "State", "snippet": "  public State getExecutorManagerThreadState() {    return this.updaterThread.getState();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutorThreadStage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getExecutorThreadStage() {    return this.updaterStage.get();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "isExecutorManagerThreadActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isExecutorManagerThreadActive() {    return this.updaterThread.isAlive();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getLastExecutorManagerThreadCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastExecutorManagerThreadCheckTime() {    return this.updaterThread.getLastThreadCheckTime();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAllActiveExecutors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Executor>", "snippet": "  public Collection<Executor> getAllActiveExecutors() {    return Collections.unmodifiableCollection(this.activeExecutors.getAll());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "fetchExecutor", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Executor", "snippet": "  public Executor fetchExecutor(final int executorId) throws ExecutorManagerException {    for (final Executor executor : this.activeExecutors.getAll()) {      if (executor.getId() == executorId) {        return executor;      }    }    return this.executorLoader.fetchExecutor(executorId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getPrimaryServerHosts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getPrimaryServerHosts() {    // Only one for now. More probably later.    final HashSet<String> ports = new HashSet<>();    for (final Executor executor : this.activeExecutors.getAll()) {      ports.add(executor.getHost() + \":\" + executor.getPort());    }    return ports;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAllActiveExecutorServerHosts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getAllActiveExecutorServerHosts(){    // Includes non primary server/hosts    final HashSet<String> ports = new HashSet<>();    for (final Executor executor : this.activeExecutors.getAll()) {      ports.add(executor.getHost() + \":\" + executor.getPort());    }    try {      this.loadRunningExecutions();    } catch (ExecutorManagerException e) {      logger.error(\"getAllActiveExecutorServerHosts loadQueuedFlows failed\",e);    }    // include executor which were initially active and still has flows running    for (final Pair<ExecutionReference, ExecutableFlow> running : this.runningExecutions.get()            .values()) {      final ExecutionReference ref = running.getFirst();      if (ref.getExecutor().isPresent()) {        final Executor executor = ref.getExecutor().get();        ports.add(executor.getHost() + \":\" + executor.getPort());      }    }    return ports;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "loadRunningExecutions", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadRunningExecutions() throws ExecutorManagerException {    logger.info(\"Loading running flows from database..\");    final Map<Integer, Pair<ExecutionReference, ExecutableFlow>> activeFlows = this.executorLoader            .fetchActiveFlows();    logger.info(\"Loaded \" + activeFlows.size() + \" running flows\");    this.runningExecutions.get().putAll(activeFlows);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "loadQueuedFlows", "params": [], "throws": null, "modifiers": ["private"], "return_type": "QueuedExecutions", "snippet": "  private QueuedExecutions loadQueuedFlows() {    try {      final List<Pair<ExecutionReference, ExecutableFlow>> retrievedExecutions =              this.executorLoader.fetchQueuedFlows();      if (retrievedExecutions != null) {        for (final Pair<ExecutionReference, ExecutableFlow> pair : retrievedExecutions) {          queuedFlows.enqueue(pair.getSecond(), pair.getFirst());        }      }    }catch (ExecutorManagerException e) {      logger.error(\"getActiveFlowsWithExecutor loadQueuedFlows failed\",e);    }    return queuedFlows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRunningFlows", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "  public List<Integer> getRunningFlows(final int projectId, final String flowId) {    final List<Integer> executionIds = new ArrayList<>();    try {      queuedFlows = loadQueuedFlows();      executionIds.addAll(getRunningFlowsHelper(projectId, flowId, queuedFlows.getAllEntries()));      // it's possible an execution is runningCandidate, meaning it's in dispatching state neither in queuedFlows nor runningFlows,      // so checks the runningCandidate as well.      if (this.runningCandidate != null) {        executionIds.addAll(getRunningFlowsHelper(projectId, flowId, Lists.newArrayList(this.runningCandidate)));      }      this.loadRunningExecutions();      executionIds.addAll(getRunningFlowsHelper(projectId, flowId, this.runningExecutions.get().values()));      Collections.sort(executionIds);    } catch (RuntimeException | ExecutorManagerException e) {      logger.error(\"getRunningFlows loadQueuedFlows failed\",e);    }    return executionIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRunningFlowsHelper", "params": ["int", "String", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "List<Integer>", "snippet": "  private List<Integer> getRunningFlowsHelper(final int projectId, final String flowId,                                              final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    final List<Integer> executionIds = new ArrayList<>();    for (final Pair<ExecutionReference, ExecutableFlow> ref : collection) {      if (ref.getSecond().getFlowId().equals(flowId)              && ref.getSecond().getProjectId() == projectId) {        executionIds.add(ref.getFirst().getExecId());      }    }    return executionIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getActiveFlowsWithExecutor", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "List<Pair>", "snippet": "  public List<Pair<ExecutableFlow, Optional<Executor>>> getActiveFlowsWithExecutor()          throws IOException {    final List<Pair<ExecutableFlow, Optional<Executor>>> flows =            new ArrayList<>();    queuedFlows = loadQueuedFlows();    getActiveFlowsWithExecutorHelper(flows, queuedFlows.getAllEntries());    try {      this.loadRunningExecutions();    } catch (ExecutorManagerException e) {      logger.error(\"loadRunningExecutions getActiveFlowsWithExecutor failed \" + e);    }    getActiveFlowsWithExecutorHelper(flows, this.runningExecutions.get().values());    if(null != flows && !flows.isEmpty()){      flows.stream().forEach(pair -> {        ExecutableFlow executableFlow = pair.getFirst();        Map<String, String> repeatMap = executableFlow.getRepeatOption();        if(!repeatMap.isEmpty()){          Long recoverRunDate = Long.valueOf(String.valueOf(repeatMap.get(\"startTimeLong\")));          LocalDateTime localDateTime = new LocalDateTime(new Date(recoverRunDate)).minusDays(1);          Date date = localDateTime.toDate();          executableFlow.setUpdateTime(date.getTime());        }else{          Long runDate = executableFlow.getStartTime();          if(-1 != runDate){            LocalDateTime localDateTime = new LocalDateTime(new Date(runDate)).minusDays(1);            Date date = localDateTime.toDate();            executableFlow.setUpdateTime(date.getTime());          } else {            executableFlow.setUpdateTime(runDate);          }        }      });    }    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getActiveFlowsWithExecutorHelper", "params": ["List<Pair>", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void getActiveFlowsWithExecutorHelper(          final List<Pair<ExecutableFlow, Optional<Executor>>> flows,          final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    for (final Pair<ExecutionReference, ExecutableFlow> ref : collection) {      flows.add(new Pair<>(ref.getSecond(), ref              .getFirst().getExecutor()));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "isFlowRunning", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isFlowRunning(final int projectId, final String flowId) throws ExecutorManagerException {    queuedFlows = loadQueuedFlows();    this.loadRunningExecutions();    boolean isRunning = false;    isRunning =            isRunning                    || isFlowRunningHelper(projectId, flowId, queuedFlows.getAllEntries());    isRunning =            isRunning                    || isFlowRunningHelper(projectId, flowId, this.runningExecutions.get().values());    return isRunning;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "isFlowRunningHelper", "params": ["int", "String", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isFlowRunningHelper(final int projectId, final String flowId,                                      final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    for (final Pair<ExecutionReference, ExecutableFlow> ref : collection) {      if (ref.getSecond().getProjectId() == projectId              && ref.getSecond().getFlowId().equals(flowId)) {        return true;      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlow", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getExecutableFlow(final int execId)          throws ExecutorManagerException {    return this.executorLoader.fetchExecutableFlow(execId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRunningFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getRunningFlows() {    final ArrayList<ExecutableFlow> flows = new ArrayList<>();    queuedFlows = loadQueuedFlows();    try {      this.loadRunningExecutions();    } catch (ExecutorManagerException e) {      logger.error(\"loadRunningExecutions getRunningFlows failed \" + e);    }    getActiveFlowHelper(flows, queuedFlows.getAllEntries());    getActiveFlowHelper(flows, this.runningExecutions.get().values());    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getActiveFlowHelper", "params": ["ArrayList<ExecutableFlow>", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void getActiveFlowHelper(final ArrayList<ExecutableFlow> flows,                                   final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    for (final Pair<ExecutionReference, ExecutableFlow> ref : collection) {      flows.add(ref.getSecond());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRunningFlowIds", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRunningFlowIds() throws ExecutorManagerException {    final List<Integer> allIds = new ArrayList<>();    queuedFlows = loadQueuedFlows();    this.loadRunningExecutions();    getRunningFlowsIdsHelper(allIds, queuedFlows.getAllEntries());    getRunningFlowsIdsHelper(allIds, this.runningExecutions.get().values());    Collections.sort(allIds);    return allIds.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getQueuedFlowIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getQueuedFlowIds() {    final List<Integer> allIds = new ArrayList<>();    queuedFlows = loadQueuedFlows();    getRunningFlowsIdsHelper(allIds, queuedFlows.getAllEntries());    Collections.sort(allIds);    return allIds.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getQueuedFlowSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getQueuedFlowSize() {    queuedFlows = loadQueuedFlows();    return queuedFlows.size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRunningFlowsIdsHelper", "params": ["List<Integer>", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void getRunningFlowsIdsHelper(final List<Integer> allIds,                                        final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    for (final Pair<ExecutionReference, ExecutableFlow> ref : collection) {      allIds.add(ref.getSecond().getExecutionId());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRecentlyFinishedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getRecentlyFinishedFlows() {    List<ExecutableFlow> flows = new ArrayList<>();    try {      flows = this.executorLoader.fetchRecentlyFinishedFlows(              RECENTLY_FINISHED_LIFETIME);    } catch (final ExecutorManagerException e) {      //Todo jamiesjc: fix error handling.      logger.error(\"Failed to fetch recently finished flows.\", e);    }    if(null != flows && !flows.isEmpty()){//      flows.stream().forEach(executableFlow -> {        Map<String, String> repeatMap = executableFlow.getRepeatOption();        if(!repeatMap.isEmpty()){          Long recoverRunDate = Long.valueOf(String.valueOf(repeatMap.get(\"startTimeLong\")));          LocalDateTime localDateTime = new LocalDateTime(new Date(recoverRunDate)).minusDays(1);          Date date = localDateTime.toDate();          executableFlow.setUpdateTime(date.getTime());        }else{          Long runDate = executableFlow.getStartTime();          if(-1 != runDate){            LocalDateTime localDateTime = new LocalDateTime(new Date(runDate)).minusDays(1);            Date date = localDateTime.toDate();            executableFlow.setUpdateTime(date.getTime());          } else {            executableFlow.setUpdateTime(runDate);          }        }      });    }    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["Project", "String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlows(final Project project,                                                 final String flowId, final int skip, final int size) throws ExecutorManagerException {    final List<ExecutableFlow> flows =            this.executorLoader.fetchFlowHistory(project.getId(), flowId, skip, size);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlows(final int skip, final int size)          throws ExecutorManagerException {    final List<ExecutableFlow> flows = this.executorLoader.fetchFlowHistory(skip, size);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedExecutableFlows", "params": ["String", "List<Integer>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getMaintainedExecutableFlows(String username, List<Integer> projectIds, int skip, int size)          throws ExecutorManagerException {    return this.executorLoader.fetchMaintainedFlowHistory(username, projectIds, skip, size);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlowsQuickSearch", "params": ["String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlowsQuickSearch(final String flowIdContains,                                                            final int skip, final int size) throws ExecutorManagerException {    final List<ExecutableFlow> flows =            this.executorLoader.fetchFlowHistoryQuickSearch(                    '%' + flowIdContains + '%', null, skip, size);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["String", "String", "String", "String", "String", "long", "long", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlows(final String projContain, final String flowContain,                                                 final String execIdContain, final String userContain,                                                 final String status, final long begin, final long end,                                                 final int skip, final int size, int flowType) throws ExecutorManagerException {    final List<ExecutableFlow> flows =            this.executorLoader.fetchFlowHistory(projContain, flowContain, execIdContain, userContain,                    status, begin, end, skip, size, flowType);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedExecutableFlows", "params": ["String", "String", "String", "String", "String", "long", "long", "int", "int", "int", "String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getMaintainedExecutableFlows(String projContain, String flowContain,                                                           String execIdContain, String userContain, String status, long begin, long end,                                                           int skip, int size, int flowType, String username, List<Integer> projectIds) throws ExecutorManagerException {    return this.executorLoader.fetchMaintainedFlowHistory(projContain, flowContain, execIdContain, userContain,            status, begin, end, skip, size, flowType, username, projectIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableJobs", "params": ["Project", "String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableJobInfo>", "snippet": "  public List<ExecutableJobInfo> getExecutableJobs(final Project project,                                                   final String jobId, final int skip, final int size) throws ExecutorManagerException {    final List<ExecutableJobInfo> nodes =            this.executorLoader.fetchJobHistory(project.getId(), jobId, skip, size);    return nodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableJobsMoyenneRunTime", "params": ["Project", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "long", "snippet": "  public long getExecutableJobsMoyenneRunTime(final Project project,                                              final String jobId) throws ExecutorManagerException {    final List<ExecutableJobInfo> jobInfos =            this.executorLoader.fetchJobAllHistory(project.getId(), jobId);    long moyenne = 0;    long allRunTime = 0;    int successFlowNum = 0;    if (jobInfos != null) {      for (final ExecutableJobInfo info : jobInfos) {        if(Status.SUCCEEDED.equals(info.getStatus())){          successFlowNum += 1;          allRunTime += (info.getEndTime() - info.getStartTime());        }      }      if(allRunTime !=0 && successFlowNum !=0){        moyenne = allRunTime/successFlowNum;      }    }    return moyenne;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getNumberOfJobExecutions", "params": ["Project", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumberOfJobExecutions(final Project project, final String jobId)          throws ExecutorManagerException {    return this.executorLoader.fetchNumExecutableNodes(project.getId(), jobId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getNumberOfExecutions", "params": ["Project", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumberOfExecutions(final Project project, final String flowId)          throws ExecutorManagerException {    return this.executorLoader.fetchNumExecutableFlows(project.getId(), flowId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlowLog", "params": ["ExecutableFlow", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "  public LogData getExecutableFlowLog(final ExecutableFlow exFlow, final int offset,                                      final int length) throws ExecutorManagerException {    this.loadRunningExecutions();    final Pair<ExecutionReference, ExecutableFlow> pair =            this.runningExecutions.get().get(exFlow.getExecutionId());    if (pair != null) {      final Pair<String, String> typeParam = new Pair<>(\"type\", \"flow\");      final Pair<String, String> offsetParam =              new Pair<>(\"offset\", String.valueOf(offset));      final Pair<String, String> lengthParam =              new Pair<>(\"length\", String.valueOf(length));      @SuppressWarnings(\"unchecked\") final Map<String, Object> result =              this.apiGateway.callWithReference(pair.getFirst(), ConnectorParams.LOG_ACTION,                      typeParam, offsetParam, lengthParam);      return LogData.createLogDataFromObject(result);    } else {      final LogData value =              this.executorLoader.fetchLogs(exFlow.getExecutionId(), \"\", 0, offset,                      length);      return value;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionJobLog", "params": ["ExecutableFlow", "String", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "  public LogData getExecutionJobLog(final ExecutableFlow exFlow, final String jobId,                                    final int offset, final int length, final int attempt) throws ExecutorManagerException {    this.loadRunningExecutions();    final Pair<ExecutionReference, ExecutableFlow> pair =            this.runningExecutions.get().get(exFlow.getExecutionId());    if (pair != null) {      final Pair<String, String> typeParam = new Pair<>(\"type\", \"job\");      final Pair<String, String> jobIdParam =              new Pair<>(\"jobId\", jobId);      final Pair<String, String> offsetParam =              new Pair<>(\"offset\", String.valueOf(offset));      final Pair<String, String> lengthParam =              new Pair<>(\"length\", String.valueOf(length));      final Pair<String, String> attemptParam =              new Pair<>(\"attempt\", String.valueOf(attempt));      @SuppressWarnings(\"unchecked\") final Map<String, Object> result =              this.apiGateway.callWithReference(pair.getFirst(), ConnectorParams.LOG_ACTION,                      typeParam, jobIdParam, offsetParam, lengthParam, attemptParam);      return LogData.createLogDataFromObject(result);    } else {      final LogData value =              this.executorLoader.fetchLogs(exFlow.getExecutionId(), jobId, attempt,                      offset, length);      return value;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getLatestLogOffset", "params": ["ExecutableFlow", "String", "Long", "int", "User"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getLatestLogOffset(ExecutableFlow exFlow, String jobId, Long length, int attempt, User user) throws ExecutorManagerException {    this.loadRunningExecutions();    final Pair<ExecutionReference, ExecutableFlow> pair =            this.runningExecutions.get().get(exFlow.getExecutionId());    if (pair != null) {      logger.info(\"get offset from local file.\");      Pair<String, String> jobIdParam = new Pair<>(\"jobId\", jobId);      Pair<String, String> lengthParam = new Pair<>(\"len\", String.valueOf(length));      Pair<String, String> attemptParam = new Pair<>(\"attempt\", String.valueOf(attempt));      Map<String, Object> ret = this.apiGateway.callWithReferenceByUser(pair.getFirst(), ConnectorParams.OFFSET_ACTION,              user.getUserId(), jobIdParam, lengthParam, attemptParam);      return Long.valueOf(ret.get(\"offset\").toString());    } else {      logger.info(\"get offset from db.\");      return this.executorLoader.getJobLogOffset(exFlow.getExecutionId(), jobId, attempt, length);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionJobStats", "params": ["ExecutableFlow", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<Object>", "snippet": "  public List<Object> getExecutionJobStats(final ExecutableFlow exFlow, final String jobId,                                           final int attempt) throws ExecutorManagerException {    this.loadRunningExecutions();    final Pair<ExecutionReference, ExecutableFlow> pair =            this.runningExecutions.get().get(exFlow.getExecutionId());    if (pair == null) {      return this.executorLoader.fetchAttachments(exFlow.getExecutionId(), jobId,              attempt);    }    final Pair<String, String> jobIdParam = new Pair<>(\"jobId\", jobId);    final Pair<String, String> attemptParam =            new Pair<>(\"attempt\", String.valueOf(attempt));    @SuppressWarnings(\"unchecked\") final Map<String, Object> result =            this.apiGateway.callWithReference(pair.getFirst(), ConnectorParams.ATTACHMENTS_ACTION,                    jobIdParam, attemptParam);    @SuppressWarnings(\"unchecked\") final List<Object> jobStats = (List<Object>) result            .get(\"attachments\");    return jobStats;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getJobLinkUrl", "params": ["ExecutableFlow", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobLinkUrl(final ExecutableFlow exFlow, final String jobId, final int attempt) {    if (!this.azkProps.containsKey(ConfigurationKeys.RESOURCE_MANAGER_JOB_URL) || !this.azkProps            .containsKey(ConfigurationKeys.HISTORY_SERVER_JOB_URL) || !this.azkProps            .containsKey(ConfigurationKeys.SPARK_HISTORY_SERVER_JOB_URL)) {      return null;    }    final String applicationId = getApplicationId(exFlow, jobId, attempt);    if (applicationId == null) {      return null;    }    final URL url;    final String jobLinkUrl;    boolean isRMJobLinkValid = true;    try {      url = new URL(this.azkProps.getString(ConfigurationKeys.RESOURCE_MANAGER_JOB_URL)              .replace(APPLICATION_ID, applicationId));      final String keytabPrincipal = requireNonNull(              this.azkProps.getString(ConfigurationKeys.AZKABAN_KERBEROS_PRINCIPAL));      final String keytabPath = requireNonNull(this.azkProps.getString(ConfigurationKeys              .AZKABAN_KEYTAB_PATH));      final HttpURLConnection connection = AuthenticationUtils.loginAuthenticatedURL(url,              keytabPrincipal, keytabPath);      try (final BufferedReader in = new BufferedReader(              new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {        String inputLine;        while ((inputLine = in.readLine()) != null) {          if (FAILED_TO_READ_APPLICATION_PATTERN.matcher(inputLine).find()                  || INVALID_APPLICATION_ID_PATTERN.matcher(inputLine).find()) {            this.logger.info(                    \"RM job link is invalid or has expired for application_\" + applicationId);            isRMJobLinkValid = false;            break;          }        }      }    } catch (final Exception e) {      this.logger.error(\"Failed to get job link for application_\" + applicationId, e);      return null;    }    if (isRMJobLinkValid) {      jobLinkUrl = url.toString();    } else {      // If RM job link is invalid or has expired, fetch the job link from JHS or SHS.      if (exFlow.getExecutableNode(jobId).getType().equals(SPARK_JOB_TYPE)) {        jobLinkUrl =                this.azkProps.get(ConfigurationKeys.SPARK_HISTORY_SERVER_JOB_URL).replace                        (APPLICATION_ID, applicationId);      } else {        jobLinkUrl =                this.azkProps.get(ConfigurationKeys.HISTORY_SERVER_JOB_URL).replace(APPLICATION_ID,                        applicationId);      }    }    this.logger.info(            \"Job link url is \" + jobLinkUrl + \" for execution \" + exFlow.getExecutionId() + \", job \"                    + jobId);    return jobLinkUrl;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getApplicationId", "params": ["ExecutableFlow", "String", "int"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getApplicationId(final ExecutableFlow exFlow, final String jobId,                                  final int attempt) {    String applicationId;    boolean finished = false;    int offset = 0;    try {      while (!finished) {        final LogData data = getExecutionJobLog(exFlow, jobId, offset, 50000, attempt);        if (data != null) {          applicationId = findApplicationIdFromLog(data.getData());          if (applicationId != null) {            return applicationId;          }          offset = data.getOffset() + data.getLength();          this.logger.info(\"Get application ID for execution \" + exFlow.getExecutionId() + \", job\"                  + \" \" + jobId + \", attempt \" + attempt + \", data offset \" + offset);        } else {          finished = true;        }      }    } catch (final ExecutorManagerException e) {      this.logger.error(\"Failed to get application ID for execution \" + exFlow.getExecutionId() +              \", job \" + jobId + \", attempt \" + attempt + \", data offset \" + offset, e);    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionJobMetaData", "params": ["ExecutableFlow", "String", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "JobMetaData", "snippet": "  public JobMetaData getExecutionJobMetaData(final ExecutableFlow exFlow,                                             final String jobId, final int offset, final int length, final int attempt)          throws ExecutorManagerException {    final Pair<ExecutionReference, ExecutableFlow> pair =            this.runningFlows.get(exFlow.getExecutionId());    if (pair != null) {      final Pair<String, String> typeParam = new Pair<>(\"type\", \"job\");      final Pair<String, String> jobIdParam =              new Pair<>(\"jobId\", jobId);      final Pair<String, String> offsetParam =              new Pair<>(\"offset\", String.valueOf(offset));      final Pair<String, String> lengthParam =              new Pair<>(\"length\", String.valueOf(length));      final Pair<String, String> attemptParam =              new Pair<>(\"attempt\", String.valueOf(attempt));      @SuppressWarnings(\"unchecked\") final Map<String, Object> result =              this.apiGateway.callWithReference(pair.getFirst(), ConnectorParams.METADATA_ACTION,                      typeParam, jobIdParam, offsetParam, lengthParam, attemptParam);      return JobMetaData.createJobMetaDataFromObject(result);    } else {      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "cancelFlow", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelFlow(final ExecutableFlow exFlow, final String userId)          throws ExecutorManagerException {    queuedFlows = loadQueuedFlows();    this.loadRunningExecutions();    synchronized (exFlow) {      if (this.runningExecutions.get().containsKey(exFlow.getExecutionId())) {        final Pair<ExecutionReference, ExecutableFlow> pair =                this.runningExecutions.get().get(exFlow.getExecutionId());        this.apiGateway.callWithReferenceByUser(pair.getFirst(), ConnectorParams.CANCEL_ACTION,                userId);      } else if (queuedFlows.hasExecution(exFlow.getExecutionId())) {        //\u5982\u679c\u662f\u6b63\u5728\u6392\u961f\u7684Flow \u5c31\u76f4\u63a5\u5728\u8fd9\u8fb9\u5904\u7406        //todo \u5c06 execution_flows \u8868\u4e2d\u7684\u6392\u961f\u5de5\u4f5c\u6d41\u7f6e\u4e3akilled        queuedFlows.dequeue(exFlow.getExecutionId());        this.executionFinalizer                .finalizeFlow(exFlow, \"Cancelled before dispatching to executor\", null);  // \u901a\u7528\u544a\u8b66      } else {        throw new ExecutorManagerException(\"Executor Id is[\"                + exFlow.getExecutionId() + \"] and its Flow[\" + exFlow.getFlowId()                + \"] has stop working.\");      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "resumeFlow", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void resumeFlow(final ExecutableFlow exFlow, final String userId)          throws ExecutorManagerException {    this.loadRunningExecutions();    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.runningExecutions.get().get(exFlow.getExecutionId());      if (pair == null) {        throw new ExecutorManagerException(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      this.apiGateway              .callWithReferenceByUser(pair.getFirst(), ConnectorParams.RESUME_ACTION, userId);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setFlowFailed", "params": ["ExecutableFlow", "String", "List<Pair>"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFlowFailed(ExecutableFlow exFlow, String userId, List<Pair<String, String>> param) throws Exception {    this.loadRunningExecutions();    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.runningExecutions.get().get(exFlow.getExecutionId());      if (pair == null) {        throw new Exception(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      this.apiGateway.callForJsonObjectMap(pair.getFirst().getExecutor().get().getHost(),              pair.getFirst().getExecutor().get().getPort(), \"/executor\", param);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setJobDisabled", "params": ["ExecutableFlow", "String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String setJobDisabled(ExecutableFlow exFlow, String userId, String request) throws Exception {    this.loadRunningExecutions();    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.runningExecutions.get().get(exFlow.getExecutionId());      if (pair == null) {        throw new Exception(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      String url = \"http://\" + pair.getFirst().getExecutor().get().getHost() + \":\" + pair.getFirst().getExecutor().get().getPort() + \"/executor?\"              + \"action=\" + ConnectorParams.DISABLE_JOB_ACTION + \"&execid=\" + exFlow.getExecutionId() + \"&user=\" + userId;      return this.apiGateway.httpPost(url, request);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "retryFailedJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String retryFailedJobs(ExecutableFlow exFlow, String userId, String request) throws Exception {    this.loadRunningExecutions();    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.runningExecutions.get().get(exFlow.getExecutionId());      if (pair == null) {        throw new Exception(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      String url = \"http://\" + pair.getFirst().getExecutor().get().getHost() + \":\" + pair.getFirst().getExecutor().get().getPort() + \"/executor?\"              + \"action=\" + ConnectorParams.RETRY_FAILED_JOBS_ACTION + \"&execid=\" + exFlow.getExecutionId() + \"&user=\" + userId;      return this.apiGateway.httpPost(url, request);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "skipFailedJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String skipFailedJobs(ExecutableFlow exFlow, String userId, String request) throws Exception {    this.loadRunningExecutions();    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.runningExecutions.get().get(exFlow.getExecutionId());      if (pair == null) {        throw new Exception(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      String url = \"http://\" + pair.getFirst().getExecutor().get().getHost() + \":\" + pair.getFirst().getExecutor().get().getPort() + \"/executor?\"              + \"action=\" + ConnectorParams.SKIP_FAILED_JOBS_ACTION + \"&execid=\" + exFlow.getExecutionId() + \"&user=\" + userId;      return this.apiGateway.httpPost(url, request);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "pauseFlow", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void pauseFlow(final ExecutableFlow exFlow, final String userId)          throws ExecutorManagerException {    this.loadRunningExecutions();    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.runningExecutions.get().get(exFlow.getExecutionId());      if (pair == null) {        throw new ExecutorManagerException(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      this.apiGateway              .callWithReferenceByUser(pair.getFirst(), ConnectorParams.PAUSE_ACTION, userId);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "pauseExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void pauseExecutingJobs(final ExecutableFlow exFlow, final String userId,                                 final String... jobIds) throws ExecutorManagerException {    modifyExecutingJobs(exFlow, ConnectorParams.MODIFY_PAUSE_JOBS, userId,            jobIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "resumeExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void resumeExecutingJobs(final ExecutableFlow exFlow, final String userId,                                  final String... jobIds) throws ExecutorManagerException {    modifyExecutingJobs(exFlow, ConnectorParams.MODIFY_RESUME_JOBS, userId,            jobIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "retryFailures", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void retryFailures(final ExecutableFlow exFlow, final String userId)          throws ExecutorManagerException {    modifyExecutingJobs(exFlow, ConnectorParams.MODIFY_RETRY_FAILURES, userId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "skipAllFailures", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void skipAllFailures(ExecutableFlow exFlow, String userId) throws ExecutorManagerException {    this.loadRunningExecutions();    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.runningExecutions.get().get(exFlow.getExecutionId());      if (pair == null) {        throw new ExecutorManagerException(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      this.apiGateway.callWithReferenceByUser(pair.getFirst(),              ConnectorParams.SKIPPED_ALL_FAILED_JOBS_ACTION, userId);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "retryExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void retryExecutingJobs(final ExecutableFlow exFlow, final String userId,                                 final String... jobIds) throws ExecutorManagerException {    modifyExecutingJobs(exFlow, ConnectorParams.MODIFY_RETRY_JOBS, userId,            jobIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "disableExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void disableExecutingJobs(final ExecutableFlow exFlow, final String userId,                                   final String... jobIds) throws ExecutorManagerException {    modifyExecutingJobs(exFlow, ConnectorParams.MODIFY_DISABLE_JOBS, userId,            jobIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "enableExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void enableExecutingJobs(final ExecutableFlow exFlow, final String userId,                                  final String... jobIds) throws ExecutorManagerException {    modifyExecutingJobs(exFlow, ConnectorParams.MODIFY_ENABLE_JOBS, userId,            jobIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "cancelExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelExecutingJobs(final ExecutableFlow exFlow, final String userId,                                  final String... jobIds) throws ExecutorManagerException {    modifyExecutingJobs(exFlow, ConnectorParams.MODIFY_CANCEL_JOBS, userId,            jobIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "modifyExecutingJobs", "params": ["ExecutableFlow", "String", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "Map<String,Object>", "snippet": "  private Map<String, Object> modifyExecutingJobs(final ExecutableFlow exFlow,                                                  final String command, final String userId, final String... jobIds)          throws ExecutorManagerException {    this.loadRunningExecutions();    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.runningExecutions.get().get(exFlow.getExecutionId());      if (pair == null) {        throw new ExecutorManagerException(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      final Map<String, Object> response;      if (jobIds != null && jobIds.length > 0) {        for (final String jobId : jobIds) {          if (!jobId.isEmpty()) {            final ExecutableNode node = exFlow.getExecutableNode(jobId);            if (node == null) {              throw new ExecutorManagerException(\"Job \" + jobId                      + \" doesn't exist in execution \" + exFlow.getExecutionId()                      + \".\");            }          }        }        final String ids = StringUtils.join(jobIds, ',');        response =                this.apiGateway.callWithReferenceByUser(pair.getFirst(),                        ConnectorParams.MODIFY_EXECUTION_ACTION, userId,                        new Pair<>(                                ConnectorParams.MODIFY_EXECUTION_ACTION_TYPE, command),                        new Pair<>(ConnectorParams.MODIFY_JOBS_LIST, ids));      } else {        response =                this.apiGateway.callWithReferenceByUser(pair.getFirst(),                        ConnectorParams.MODIFY_EXECUTION_ACTION, userId,                        new Pair<>(                                ConnectorParams.MODIFY_EXECUTION_ACTION_TYPE, command));      }      return response;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "submitExecutableFlow", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String submitExecutableFlow(final ExecutableFlow exflow, final String userId)          throws ExecutorManagerException {    final String exFlowKey = exflow.getProjectName() + \".\" + exflow.getId() + \".submitFlow\";    // Use project and flow name to prevent race condition when same flow is submitted by API and    // schedule at the same time    // causing two same flow submission entering this piece.    synchronized (exFlowKey.intern()) {      final String flowId = exflow.getFlowId();      logger.info(\"Submitting execution flow \" + flowId + \" by \" + userId);      String message = \"\";      if (this.queuedFlows.isFull()) {        message =                String                        .format(                                \"Failed to submit %s for project %s. Azkaban has overrun its webserver queue capacity\",                                flowId, exflow.getProjectName());        logger.error(message);        this.commonMetrics.markSubmitFlowFail();      } else {        final int projectId = exflow.getProjectId();        exflow.setSubmitUser(userId);        List<Integer> executorIds = null;        try {          executorIds = this.executorLoader.getExecutorIdsBySubmitUser(exflow.getSubmitUser());        } catch (ExecutorManagerException em) {          logger.error(\"get executorId by \" + exflow.getSubmitUser() + \", failed\", em);          throw new ExecutorManagerException(\"get executorId by \" + exflow.getSubmitUser() + \", failed\", em);        }        if (executorIds == null || executorIds.size() == 0) {          logger.error(\"can not found executorId by \" + exflow.getSubmitUser());          throw new ExecutorManagerException(\"\u7528\u6237:\" + exflow.getSubmitUser() + \"\uff0c\u6ca1\u6709\u5206\u914dexecutor\");        }        exflow.setExecutorIds(executorIds);        exflow.setSubmitTime(System.currentTimeMillis());        final List<Integer> running = getRunningFlows(projectId, flowId);        ExecutionOptions options = exflow.getExecutionOptions();        if (options == null) {          options = new ExecutionOptions();        }        if (options.getDisabledJobs() != null) {          FlowUtils.applyDisabledJobs(options.getDisabledJobs(), exflow);        }        if (!running.isEmpty()) {          if (running.size() > this.maxConcurrentRunsOneFlow) {            this.commonMetrics.markSubmitFlowSkip();            throw new ExecutorManagerException(\"Flow \" + flowId                    + \" has more than \" + this.maxConcurrentRunsOneFlow + \" concurrent runs. Skipping\",                    ExecutorManagerException.Reason.SkippedExecution);          } else if (options.getConcurrentOption().equals(                  ExecutionOptions.CONCURRENT_OPTION_PIPELINE)) {            Collections.sort(running);            final Integer runningExecId = running.get(running.size() - 1);            options.setPipelineExecutionId(runningExecId);            message =                    \"Flow \" + flowId + \" is already running with exec id \"                            + runningExecId + \". Pipelining level \"                            + options.getPipelineLevel() + \". \\n\";          } else if (options.getConcurrentOption().equals(                  ExecutionOptions.CONCURRENT_OPTION_SKIP)) {            this.commonMetrics.markSubmitFlowSkip();            throw new ExecutorManagerException(\"Flow \" + flowId                    + \" is already running. Skipping execution.\",                    ExecutorManagerException.Reason.SkippedExecution);          } else {            message =                    \"Flow \" + flowId + \" is already running with exec id \"                            + StringUtils.join(running, \",\")                            + \". Will execute concurrently. \\n\";          }        }        final boolean memoryCheck =                !ProjectWhitelist.isProjectWhitelisted(exflow.getProjectId(),                        ProjectWhitelist.WhitelistType.MemoryCheck);        options.setMemoryCheck(memoryCheck);        // The exflow id is set by the loader. So it's unavailable until after        // this call. in ha model we put it into execution_flows and return exec_id        this.executorLoader.uploadExecutableFlow(exflow);        // We create an active flow reference in the datastore. If the upload        // fails, we remove the reference.        final ExecutionReference reference =                new ExecutionReference(exflow.getExecutionId());        this.executorLoader.addActiveExecutableReference(reference);        //if it is ha mode,we insert queuedFlow into db(execution_queue)//        this.executorQueueLoader.insertExecutableQueue(exflow);        //todo \u5c06\u5de5\u4f5c\u6d41\u72b6\u6001\u53d8\u4e3apreparing        this.queuedFlows.enqueue(exflow, reference);        this.commonMetrics.markSubmitFlowSuccess();        message += \"Execution DB queued successfully with exec id \" + exflow.getExecutionId();        logger.info(message);      }      return message;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "cleanOldExecutionLogs", "params": ["long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void cleanOldExecutionLogs(final long millis) {    final long beforeDeleteLogsTimestamp = System.currentTimeMillis();    try {      final int count = this.executorLoader.removeExecutionLogsByTime(millis);      logger.info(\"Cleaned up \" + count + \" log entries.\");    } catch (final ExecutorManagerException e) {      logger.error(\"log clean up failed. \", e);    }    logger.info(            \"log clean up time: \" + (System.currentTimeMillis() - beforeDeleteLogsTimestamp) / 1000                    + \" seconds.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "callExecutorStats", "params": ["int", "String", "Pair<String,String>"], "throws": ["IOException", "ExecutorManagerException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> callExecutorStats(final int executorId, final String action,                                               final Pair<String, String>... params) throws IOException, ExecutorManagerException {    final Executor executor = fetchExecutor(executorId);    final List<Pair<String, String>> paramList =            new ArrayList<>();    // if params = null    if (params != null) {      paramList.addAll(Arrays.asList(params));    }    paramList            .add(new Pair<>(ConnectorParams.ACTION_PARAM, action));    return this.apiGateway.callForJsonObjectMap(executor.getHost(), executor.getPort(),            \"/stats\", paramList);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "callExecutorJMX", "params": ["String", "String", "String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> callExecutorJMX(final String hostPort, final String action,                                             final String mBean) throws IOException {    final List<Pair<String, String>> paramList =            new ArrayList<>();    paramList.add(new Pair<>(action, \"\"));    if (mBean != null) {      paramList.add(new Pair<>(ConnectorParams.JMX_MBEAN, mBean));    }    final String[] hostPortSplit = hostPort.split(\":\");    return this.apiGateway.callForJsonObjectMap(hostPortSplit[0],            Integer.valueOf(hostPortSplit[1]), \"/jmx\", paramList);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    this.queueProcessor.shutdown();    this.updaterThread.shutdown();    this.cleanerThread.shutdown();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "failEverything", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void failEverything(final ExecutableFlow exFlow) {    final long time = System.currentTimeMillis();    for (final ExecutableNode node : exFlow.getExecutableNodes()) {      switch (node.getStatus()) {        case SUCCEEDED:        case FAILED:        case KILLED:        case SKIPPED:        case DISABLED:        case FAILED_SKIPPED:          continue;          // case UNKNOWN:        case READY:          node.setStatus(Status.KILLING);          break;        default:          node.setStatus(Status.FAILED);          break;      }      if (node.getStartTime() == -1) {        node.setStartTime(time);      }      if (node.getEndTime() == -1) {        node.setEndTime(time);      }    }    if (exFlow.getEndTime() == -1) {      exFlow.setEndTime(time);    }    exFlow.setStatus(Status.FAILED);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "isFinished", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isFinished(final ExecutableFlow flow) {    switch (flow.getStatus()) {      case SUCCEEDED:      case FAILED:      case KILLED:        return true;      default:        return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "isFailedFinishing", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isFailedFinishing(final ExecutableFlow flow) {    switch (flow.getStatus()) {      case FAILED_FINISHING:        return true;      default:        return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "fillUpdateTimeAndExecId", "params": ["List<ExecutableFlow>", "List<Integer>", "List<Long>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void fillUpdateTimeAndExecId(final List<ExecutableFlow> flows,                                       final List<Integer> executionIds, final List<Long> updateTimes) {    for (final ExecutableFlow flow : flows) {      executionIds.add(flow.getExecutionId());      updateTimes.add(flow.getUpdateTime());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["int", "String", "int", "int", "List<ExecutableFlow>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecutableFlows(final int projectId, final String flowId, final int from,                                final int length, final List<ExecutableFlow> outputList)          throws ExecutorManagerException {    final List<ExecutableFlow> flows =            this.executorLoader.fetchFlowHistory(projectId, flowId, from, length);    outputList.addAll(flows);    return this.executorLoader.fetchNumExecutableFlows(projectId, flowId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["int", "String", "int", "int", "Status"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlows(final int projectId, final String flowId,                                                 final int from, final int length, final Status status) throws ExecutorManagerException {    return this.executorLoader.fetchFlowHistory(projectId, flowId, from, length,            status);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "dispatch", "params": ["ExecutionReference", "ExecutableFlow", "Executor"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void dispatch(final ExecutionReference reference, final ExecutableFlow exflow,                        final Executor choosenExecutor) throws ExecutorManagerException {    exflow.setUpdateTime(System.currentTimeMillis());    this.executorLoader.assignExecutor(choosenExecutor.getId(),            exflow.getExecutionId());    try {      this.apiGateway.callWithExecutable(exflow, choosenExecutor,              ConnectorParams.EXECUTE_ACTION);    } catch (final ExecutorManagerException ex) {      logger.error(\"Rolling back executor assignment for execution id:\"              + exflow.getExecutionId(), ex);      this.executorLoader.unassignExecutor(exflow.getExecutionId());      throw new ExecutorManagerException(ex);    }    reference.setExecutor(choosenExecutor);    // move from flow to running flows    this.runningExecutions.get().put(exflow.getExecutionId(), new Pair<>(reference, exflow));    synchronized (this.runningExecutions.get()) {      // Wake up RunningExecutionsUpdaterThread from wait() so that it will immediately check status      // from executor(s). Normally flows will run at least some time and can't be cleaned up      // immediately, so there will be another wait round (or many, actually), but for unit tests      // this is significant to let them run quickly.      this.runningExecutions.get().notifyAll();    }    synchronized (this) {      // wake up all internal waiting threads, too      this.notifyAll();    }    logger.info(String.format(            \"Successfully dispatched exec %d with error count %d\",            exflow.getExecutionId(), reference.getNumErrors()));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setSleepAfterDispatchFailure", "params": ["Duration"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setSleepAfterDispatchFailure(final Duration sleepAfterDispatchFailure) {    this.sleepAfterDispatchFailure = sleepAfterDispatchFailure;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlows", "params": ["int", "int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getUserExecutableFlows(int skip, int size, String user)          throws ExecutorManagerException {    List<ExecutableFlow> flows = executorLoader.fetchUserFlowHistory(skip, size, user);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlowsByAdvanceFilter", "params": ["String", "String", "String", "String", "String", "long", "long", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getUserExecutableFlowsByAdvanceFilter(String projContain, String flowContain, String execIdContain,                                                                    String userContain, String status, long begin, long end,                                                                    int skip, int size, int flowType) throws ExecutorManagerException {    List<ExecutableFlow> flows =            executorLoader.fetchUserFlowHistoryByAdvanceFilter(projContain, flowContain, execIdContain,                    userContain, status, begin, end, skip, size, flowType);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlowsQuickSearch", "params": ["String", "String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getUserExecutableFlowsQuickSearch(String flowIdContains, String user,                                                                int skip, int size) throws ExecutorManagerException {    List<ExecutableFlow> flows =            executorLoader.fetchFlowHistoryQuickSearch('%' + flowIdContains + '%', user, skip, size);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getProjectLastExecutableFlow", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getProjectLastExecutableFlow(int projectId, String flowId) throws ExecutorManagerException{    ExecutableFlow flow = executorLoader.getProjectLastExecutableFlow(projectId, flowId);    return flow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionCycleTotal", "params": ["Optional<String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecutionCycleTotal(Optional<String> usernameOp) throws ExecutorManagerException {    return executorLoader.getExecutionCycleTotal(usernameOp);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionCycleTotal", "params": ["String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecutionCycleTotal(String username, List<Integer> projectIds) throws ExecutorManagerException {    return executorLoader.getExecutionCycleTotal(username, projectIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "listExecutionCycleFlows", "params": ["Optional<String>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionCycle>", "snippet": "  public List<ExecutionCycle> listExecutionCycleFlows(Optional<String> username, int offset, int length)          throws ExecutorManagerException {    return executorLoader.listExecutionCycleFlows(username, offset, length);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "listExecutionCycleFlows", "params": ["String", "List<Integer>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionCycle>", "snippet": "  public List<ExecutionCycle> listExecutionCycleFlows(String username, List<Integer> projectIds, int offset, int length)          throws ExecutorManagerException {    return executorLoader.listExecutionCycleFlows(username, projectIds, offset, length);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "saveExecutionCycleFlow", "params": ["ExecutionCycle"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int saveExecutionCycleFlow(ExecutionCycle cycleFlow) throws ExecutorManagerException {    return executorLoader.saveExecutionCycleFlow(cycleFlow);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionCycleFlow", "params": ["String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutionCycle", "snippet": "  public ExecutionCycle getExecutionCycleFlow(String projectId, String flowId) throws ExecutorManagerException {    return executorLoader.getExecutionCycleFlow(projectId, flowId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionCycleFlow", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutionCycle", "snippet": "  public ExecutionCycle getExecutionCycleFlow(int id) throws ExecutorManagerException {    return executorLoader.getExecutionCycleFlow(id);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "updateExecutionFlow", "params": ["ExecutionCycle"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int updateExecutionFlow(ExecutionCycle executionCycle) throws ExecutorManagerException {    return executorLoader.updateExecutionFlow(executionCycle);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "stopAllCycleFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int stopAllCycleFlows() throws ExecutorManagerException {    return executorLoader.stopAllCycleFlows();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAllRunningCycleFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionCycle>", "snippet": "  public List<ExecutionCycle> getAllRunningCycleFlows() throws ExecutorManagerException {    return executorLoader.getAllRunningCycleFlows();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getDownLoadAllExecutionLog", "params": ["ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDownLoadAllExecutionLog(ExecutableFlow executableFlow) throws ExecutorManagerException {    String logZipFilePath = \"\";    //\u5faa\u73af\u83b7\u53d6\u6570\u636e\u5e93\u5206\u6bb5\u65e5\u5fd7\u6570\u636e    try {      List<String> nameList = new ArrayList<>();      //\u83b7\u53d6\u6240\u6709\u6267\u884c\u8282\u70b9      getExecutableNodeInfo(executableFlow, nameList);      //\u83b7\u53d6\u65e5\u5fd7\u6587\u4ef6\u5939      File flowLogDir = new File(\"temp\" + File.separator + executableFlow.getId() + System.currentTimeMillis());      //\u5982\u679c\u76ee\u5f55\u5b58\u5728      if(flowLogDir.exists()){        //\u5148\u5220\u9664\u76ee\u5f55        flowLogDir.delete();        //\u518d\u521b\u5efa\u6587\u4ef6\u5939        flowLogDir.mkdir();      }else{        //\u4e0d\u5b58\u5728\u5c31\u76f4\u63a5\u521b\u5efa\u6587\u4ef6\u5939        flowLogDir.mkdir();      }      for(String jobName : nameList){        //\u83b7\u53d6\u65e5\u5fd7\u6587\u672c        LogData value = executorLoader.fetchAllLogs(executableFlow.getExecutionId(), jobName, 0);        if (null != value){          //\u521b\u5efa\u65e5\u5fd7\u6587\u4ef6          final File file = new File(flowLogDir + File.separator + jobName + \".log\");          //\u628a\u65e5\u5fd7\u6587\u672c\u5199\u5165\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d          FileWrite(file.getPath(), file.getName(), value.getData());        }      }      //\u628a\u65e5\u5fd7\u6587\u4ef6\u5939\u5230\u5305\u6210Zip\u5305      logZipFilePath =              fileToZip(flowLogDir.getPath(), new File(\"temp\").getPath(), flowLogDir.getName());    } catch (Exception e) {      logger.error(\"\u4e0b\u8f7d\u6240\u6709\u65e5\u5fd7\u6570\u636e\u5931\u8d25, \u539f\u56e0\u4e3a:\" + e);    }    return logZipFilePath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "fileToZip", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String fileToZip(String sourceFilePath, String zipFilePath, String fileName){    boolean flag = false;    File sourceFile = new File(sourceFilePath);    FileInputStream fis = null;    BufferedInputStream bis = null;    FileOutputStream fos = null;    ZipOutputStream zos = null;    File zipFile = new File(zipFilePath + \"/\" + fileName +\".zip\");    if(sourceFile.exists() == false){      System.out.println(\"\u5f85\u538b\u7f29\u7684\u6587\u4ef6\u76ee\u5f55\uff1a\"+sourceFilePath+\"\u4e0d\u5b58\u5728.\");    }else{      try {        //zipFile = File.createTempFile(fileName, \".zip\", new File(\"temp\"));        if(zipFile.exists()){          System.out.println(zipFilePath + \"\u76ee\u5f55\u4e0b\u5b58\u5728\u540d\u5b57\u4e3a:\" + fileName +\".zip\" +\"\u6253\u5305\u6587\u4ef6.\");        }else{          File[] sourceFiles = sourceFile.listFiles();          if(null == sourceFiles || sourceFiles.length<1){            System.out.println(\"\u5f85\u538b\u7f29\u7684\u6587\u4ef6\u76ee\u5f55\uff1a\" + sourceFilePath + \"\u91cc\u9762\u4e0d\u5b58\u5728\u6587\u4ef6\uff0c\u65e0\u9700\u538b\u7f29.\");          }else{            fos = new FileOutputStream(zipFile);            zos = new ZipOutputStream(new BufferedOutputStream(fos));            byte[] bufs = new byte[1024*10];            for(int i=0;i<sourceFiles.length;i++){              //\u521b\u5efaZIP\u5b9e\u4f53\uff0c\u5e76\u6dfb\u52a0\u8fdb\u538b\u7f29\u5305              ZipEntry zipEntry = new ZipEntry(sourceFiles[i].getName());              zos.putNextEntry(zipEntry);              //\u8bfb\u53d6\u5f85\u538b\u7f29\u7684\u6587\u4ef6\u5e76\u5199\u8fdb\u538b\u7f29\u5305\u91cc              fis = new FileInputStream(sourceFiles[i]);              bis = new BufferedInputStream(fis, 1024*10);              int read = 0;              while((read=bis.read(bufs, 0, 1024*10)) != -1){                zos.write(bufs,0,read);              }            }            flag = true;          }        }      } catch (FileNotFoundException e) {        logger.error(\"FileNotFoundException , caused by:\" + e);        throw new RuntimeException(e);      } catch (IOException e) {        logger.error(\"IOException , caused by:\" + e);        throw new RuntimeException(e);      } finally{        //\u5173\u95ed\u6d41        try {          if(null != bis) {            bis.close();          }          if(null != zos) {            zos.close();          }        } catch (IOException e) {          logger.error(\"close io stream failed, caused by:\" + e);        }      }    }    return zipFile.getPath();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableNodeInfo", "params": ["ExecutableNode", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,Object>", "snippet": "  private Map<String, Object> getExecutableNodeInfo(final ExecutableNode node, final List<String> nameList) {    final HashMap<String, Object> nodeObj = new HashMap<>();    nodeObj.put(\"id\", node.getId());    if(null != node.getParentFlow()){      nameList.add(node.getNestedId());    }    if (node instanceof ExecutableFlowBase) {      final ExecutableFlowBase base = (ExecutableFlowBase) node;      final ArrayList<Map<String, Object>> nodeList = new ArrayList<>();      for (final ExecutableNode subNode : base.getExecutableNodes()) {        final Map<String, Object> subNodeObj = getExecutableNodeInfo(subNode, nameList);        if (!subNodeObj.isEmpty()) {          nodeList.add(subNodeObj);        }      }      nodeObj.put(\"flow\", base.getFlowId());      nodeObj.put(\"nodes\", nodeList);      nodeObj.put(\"flowId\", base.getFlowId());    }    return nodeObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "FileWrite", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void FileWrite(String allFilePath, String fileName, String fileStr) {    FileWriter fw = null;    try {      fw = new FileWriter(allFilePath);      //\u5199\u5165\u5230\u6587\u4ef6      fw.write(fileStr);    } catch (IOException e) {      e.printStackTrace();    } finally {      if (fw != null) {        try {          fw.close();        } catch (IOException e) {          logger.error(\"close io stream failed, caused by:\" + e);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getJobLogByJobId", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobLogByJobId(int execId, String jobName) throws ExecutorManagerException{    String logZipFilePath = \"\";    try {      //\u83b7\u53d6\u65e5\u5fd7\u6587\u4ef6\u5939      File flowLogDir = new File(\"temp\" + File.separator + jobName + System.currentTimeMillis());      //\u5982\u679c\u76ee\u5f55\u5b58\u5728      if(flowLogDir.exists()){        //\u5148\u5220\u9664\u76ee\u5f55        flowLogDir.delete();        //\u518d\u521b\u5efa\u6587\u4ef6\u5939        flowLogDir.mkdir();      }else{        //\u4e0d\u5b58\u5728\u5c31\u76f4\u63a5\u521b\u5efa\u6587\u4ef6\u5939        flowLogDir.mkdir();      }      //\u83b7\u53d6Job\u65e5\u5fd7\u6587\u672c      LogData value = executorLoader.fetchAllLogs(execId, jobName, 0);      if (null != value){        //\u521b\u5efa\u65e5\u5fd7\u6587\u4ef6        final File file = new File(flowLogDir + File.separator + jobName + \".txt\");        //\u628a\u65e5\u5fd7\u6587\u672c\u5199\u5165\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d        FileWrite(file.getPath(), file.getName(), value.getData());        logZipFilePath = file.getPath();      }      //\u628a\u65e5\u5fd7\u6587\u4ef6\u5939\u5230\u5305\u6210Zip\u5305//      logZipFilePath =//          fileToZip(flowLogDir.getPath(), new File(\"temp\").getPath(), flowLogDir.getName());    } catch (Exception e) {      logger.error(\"getJobLogByJobId execute failed, caused by:\" + e);    }    return logZipFilePath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAllExecutionJobLog", "params": ["ExecutableFlow", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getAllExecutionJobLog(ExecutableFlow exFlow, String jobId, int attempt) throws ExecutorManagerException {    Pair<ExecutionReference, ExecutableFlow> pair =            runningFlows.get(exFlow.getExecutionId());    StringBuilder allLogData = new StringBuilder();    int offset = 0;    int length = 50000;    //    while (true){      LogData value =              executorLoader.fetchLogs(exFlow.getExecutionId(), jobId, attempt, offset, length);      if(null == value){        break;      }      //      allLogData.append(value.getData());      offset += length;    }    return allLogData.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "listAllLogFilter", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<LogFilterEntity>", "snippet": "  public List<LogFilterEntity> listAllLogFilter() throws ExecutorManagerException {    return executorLoader.listAllLogFilter();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecHistoryTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecHistoryTotal(final Map<String, String> filterMap) throws ExecutorManagerException{    return executorLoader.getExecHistoryTotal(filterMap);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecHistoryTotal", "params": ["String", "Map<String,String>", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecHistoryTotal(String username, final Map<String, String> filterMap, List<Integer> projectIds)          throws ExecutorManagerException {    return executorLoader.getExecHistoryTotal(username, filterMap, projectIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedExecHistoryTotal", "params": ["String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaintainedExecHistoryTotal(String username, List<Integer> projectIds)          throws ExecutorManagerException {    return executorLoader.getMaintainedExecHistoryTotal(username, projectIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecHistoryQuickSerachTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecHistoryQuickSerachTotal(final Map<String, String> filterMap) throws ExecutorManagerException{    return executorLoader.getExecHistoryQuickSerachTotal(filterMap);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedFlowsQuickSearchTotal", "params": ["String", "Map<String,String>", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaintainedFlowsQuickSearchTotal(String username, final Map<String, String> filterMap, List<Integer> projectIds)          throws ExecutorManagerException {    return executorLoader.getMaintainedFlowsQuickSearchTotal(username, filterMap, projectIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedFlowsQuickSearch", "params": ["String", "int", "int", "String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getMaintainedFlowsQuickSearch(String flowIdContains, int skip, int size,                                                            String username, List<Integer> projectIds) throws ExecutorManagerException {    return this.executorLoader.fetchFlowHistoryQuickSearch('%' + flowIdContains + '%',            username, skip, size, projectIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlowsTotalByProjectIdAndFlowId", "params": ["int", "String", "int", "int", "List<ExecutableFlow>", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUserExecutableFlowsTotalByProjectIdAndFlowId(final int projectId, final String flowId, final int from,                                                             final int length, final List<ExecutableFlow> outputList, final String userName)          throws ExecutorManagerException {    final List<ExecutableFlow> flows =            this.executorLoader.fetchUserFlowHistoryByProjectIdAndFlowId(projectId, flowId, from, length, userName);    outputList.addAll(flows);    return this.executorLoader.fetchNumUserExecutableFlowsByProjectIdAndFlowId(projectId, flowId, userName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlowsMoyenneRunTime", "params": ["int", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "long", "snippet": "  public long getExecutableFlowsMoyenneRunTime(int projectId, String flowId, String user)          throws ExecutorManagerException{    final List<ExecutableFlow> exFlows =            this.executorLoader.fetchFlowAllHistory(projectId, flowId, user);    long moyenne = 0;    long allRunTime = 0;    int successFlowNum = 0;    for (final ExecutableFlow flow : exFlows) {      if(Status.SUCCEEDED.equals(flow.getStatus())){        successFlowNum += 1;        allRunTime += (flow.getEndTime() - flow.getStartTime());      }    }    if(allRunTime !=0 && successFlowNum !=0){      moyenne = allRunTime/successFlowNum;    }    return moyenne;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecHistoryTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUserExecHistoryTotal(final Map<String, String> filterMap) throws ExecutorManagerException{    return executorLoader.getUserExecHistoryTotal(filterMap);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecHistoryQuickSerachTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUserExecHistoryQuickSerachTotal(final Map<String, String> filterMap) throws ExecutorManagerException{    return executorLoader.getUserExecHistoryQuickSerachTotal(filterMap);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlows", "params": ["String", "String", "String", "String", "String", "String", "long", "long", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getUserExecutableFlows(String loginUser, String projContain,                                                     String flowContain, String execIdContain, String userContain, String status, long begin, long end,                                                     int skip, int size, int flowType) throws ExecutorManagerException {    List<ExecutableFlow> flows =            executorLoader.fetchUserFlowHistory(loginUser, projContain, flowContain, execIdContain, userContain,                    status, begin, end, skip, size, flowType);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getTodayExecutableFlowData", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getTodayExecutableFlowData(final String userName) throws ExecutorManagerException{    List<ExecutableFlow> flows =            executorLoader.getTodayExecutableFlowData(userName);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getTodayExecutableFlowDataNew", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getTodayExecutableFlowDataNew(final String userName) throws ExecutorManagerException {    return executorLoader.getTodayExecutableFlowDataNew(userName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getTodayFlowRunTimesByFlowId", "params": ["String", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getTodayFlowRunTimesByFlowId(final String projectId, String flowId, final String usename) throws ExecutorManagerException {    return executorLoader.getTodayFlowRunTimesByFlowId(projectId, flowId, usename);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRealTimeExecFlowData", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getRealTimeExecFlowData(final String userName) throws ExecutorManagerException{    List<ExecutableFlow> flows =            executorLoader.getRealTimeExecFlowData(userName);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRecentExecutableFlow", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getRecentExecutableFlow(int projectId, String flowId) throws ExecutorManagerException{    ExecutableFlow flow = executorLoader.getProjectLastExecutableFlow(projectId, flowId);    return flow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExectingFlowsData", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "List<Map>", "snippet": "  public List<Map<String, String>> getExectingFlowsData() throws IOException {    List<ExecutableFlow> flows = new ArrayList<>();    try {      flows = this.executorLoader.fetchAllUnfinishedFlows();    } catch (final ExecutorManagerException e) {      logger.error(\"Failed to get active flows with executor.\", e);    }    final List<Map<String, String>> exectingFlowList = new ArrayList<>();    WebUtils webUtils = new WebUtils();    if(null != flows && !flows.isEmpty()){      for(ExecutableFlow executableFlow : flows){        Map<String, String> repeatMap = executableFlow.getRepeatOption();        if(!repeatMap.isEmpty()){          Long recoverRunDate = Long.valueOf(String.valueOf(repeatMap.get(\"startTimeLong\")));          LocalDateTime localDateTime = new LocalDateTime(new Date(recoverRunDate)).minusDays(1);          Date date = localDateTime.toDate();          executableFlow.setUpdateTime(date.getTime());        }else{          String runDatestr = executableFlow.getExecutionOptions().getFlowParameters().get(\"run_date\");          Object runDateOther = executableFlow.getOtherOption().get(\"run_date\");          if(runDatestr!=null&&!\"\".equals(runDatestr)&&!runDatestr.isEmpty()){            try {              executableFlow.setUpdateTime(Long.parseLong(runDatestr));            } catch (Exception e) {              logger.error(\"rundate convert failed (String to long)\" + runDatestr + \"{}\"+e);            }finally {              executableFlow.setUpdateTime(0);              executableFlow.getOtherOption().put(\"run_date\",runDatestr);            }          }else if(runDateOther!=null&&!\"\".equals(runDateOther.toString())&&!runDateOther.toString().isEmpty()){            String runDateTime = (String) runDateOther;            runDateTime = runDateTime.replaceAll(\"\\'\",\"\").replaceAll(\"\\\"\",\"\");            if(SystemBuiltInParamJodeTimeUtils.dateFormatCheck(runDateTime)){              executableFlow.setUpdateTime(0);              runDateTime = runDateTime.replaceAll(\"[./-]\", \"\");              executableFlow.getOtherOption().put(\"run_date\", runDateTime);            } else {              if(-1 != executableFlow.getStartTime()) {                LocalDateTime localDateTime = new LocalDateTime(new Date(executableFlow.getStartTime())).minusDays(1);                Date date = localDateTime.toDate();                executableFlow.setUpdateTime(date.getTime());              }            }          }else{            Long runDate = executableFlow.getStartTime();            if(-1 != executableFlow.getStartTime()) {              LocalDateTime localDateTime = new LocalDateTime(new Date(executableFlow.getStartTime())).minusDays(1);              Date date = localDateTime.toDate();              executableFlow.setUpdateTime(date.getTime());            }          }        }        Map<String, String> exectingMap = new HashMap<>();        try {//          long moyenne = this.getExecutableFlowsMoyenneRunTime(//              executableFlow.getProjectId(), executableFlow.getFlowId(), null);          exectingMap.put(\"execId\", executableFlow.getExecutionId() + \"\");          String executorId = (String) executableFlow.getOtherOption().get(\"currentExecutorId\") != null ? (String)executableFlow.getOtherOption().get(\"currentExecutorId\") : \"\";          exectingMap.put(\"exectorId\", executorId);          exectingMap.put(\"flowName\", executableFlow.getFlowId());          exectingMap.put(\"projectName\", executableFlow.getProjectName());          exectingMap.put(\"submitUser\", executableFlow.getSubmitUser());          exectingMap.put(\"proxyUsers\", executableFlow.getProxyUsers().toString());          exectingMap.put(\"startTime\", webUtils.formatHistoryDateTime(executableFlow.getStartTime()));          //exectingMap.put(\"endTime\", executableFlow.getEndTime());          if(executableFlow.getOtherOption().get(\"run_date\")!=null){            exectingMap.put(\"runDate\", executableFlow.getUpdateTime()==0?executableFlow.getOtherOption().get(\"run_date\").toString():webUtils.formatRunDate(executableFlow.getUpdateTime()));          }else{            exectingMap.put(\"runDate\", webUtils.formatRunDate(executableFlow.getUpdateTime()));          }          exectingMap.put(\"duration\", Utils                  .formatDuration(executableFlow.getStartTime(), executableFlow.getEndTime()));//          exectingMap.put(\"execTime\", webUtils.formatDurationTime(executableFlow.getStartTime(), executableFlow.getEndTime()) + \"\");//          exectingMap.put(\"moyenne\", moyenne + \"\");          exectingMap.put(\"status\", executableFlow.getStatus().toString());          exectingMap.put(\"flowType\", String.valueOf(executableFlow.getFlowType()));          exectingMap.put(\"projectId\", String.valueOf(executableFlow.getProjectId()));          exectingFlowList.add(exectingMap);        } catch (Exception e) {          throw new RuntimeException(\"generate executingMap failed\"+e);        }      }    }    return exectingFlowList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "ExecutorManagerHA", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {      this.shutdown = true;      this.interrupt();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "CleanerThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {      while (!this.shutdown) {        synchronized (this) {          try {            // Cleanup old stuff.            final long currentTime = System.currentTimeMillis();            if (currentTime - CLEANER_THREAD_WAIT_INTERVAL_MS > this.lastLogCleanTime) {              cleanExecutionLogs();              this.lastLogCleanTime = currentTime;            }            wait(CLEANER_THREAD_WAIT_INTERVAL_MS);          } catch (final InterruptedException e) {            ExecutorManagerHA.logger.info(\"Interrupted. Probably to shut down.\");          }        }      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "CleanerThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "cleanExecutionLogs", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cleanExecutionLogs() {      ExecutorManagerHA.logger.info(\"Cleaning old logs from execution_logs\");      final long cutoff = System.currentTimeMillis() - this.executionLogsRetentionMs;      ExecutorManagerHA.logger.info(\"Cleaning old log files before \"              + new DateTime(cutoff).toString());      cleanOldExecutionLogs(System.currentTimeMillis()              - this.executionLogsRetentionMs);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "CleanerThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "isActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isActive() {      return this.isActive;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "setActive", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setActive(final boolean isActive) {      this.isActive = isActive;      ExecutorManagerHA.logger.info(\"QueueProcessorThreadHA active turned \" + this.isActive);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {      this.shutdown = true;      this.interrupt();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {      // Loops till QueueProcessorThread is shutdown      while (!this.shutdown) {        synchronized (this) {          try {            // start processing queue if active, other wait for sometime            if (this.isActive) {              processQueuedFlows(this.activeExecutorRefreshWindowInMillisec,                      this.activeExecutorRefreshWindowInFlows);            }            wait(QUEUE_PROCESSOR_WAIT_IN_MS);          } catch (final Exception e) {            ExecutorManagerHA.logger.error(                    \"QueueProcessorThread Interrupted. Probably to shut down.\", e);          }        }      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "processQueuedFlows", "params": ["long", "int"], "throws": ["InterruptedException", "ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void processQueuedFlows(final long activeExecutorsRefreshWindow,                                    final int maxContinuousFlowProcessed) throws InterruptedException,            ExecutorManagerException {      long lastExecutorRefreshTime = 0;      int currentContinuousFlowProcessed = 0;//      this.executorQueueLoader.insertExecutableQueue(exflow);//      try {//        queuedFlows = loadQueuedFlows();//        logger.debug(\"queuedFlows size is {} \" + queuedFlows.size());//      } catch (ExecutorManagerException e) {//        logger.error(\"getActiveFlowsWithExecutor loadQueuedFlows failed\",e);//      }////      if(queuedFlows.size() == 0 ){//          return;//      }      while (isActive() && (ExecutorManagerHA.this.runningCandidate = queuedFlows              .fetchHead()) != null) {        final ExecutionReference reference = ExecutorManagerHA.this.runningCandidate.getFirst();        final ExecutableFlow exflow = ExecutorManagerHA.this.runningCandidate.getSecond();//        String lock_resource = exflow.getExecutionId()+\":\"+exflow.getId();        final long currentTime = System.currentTimeMillis();//        DBTableDistributeLock dd = new DBTableDistributeLock(dbOperator);//        boolean lockFlag =  dd.lock(lock_resource,azkProps.getLong(Constants.ConfigurationKeys.DISTRIBUTELOCK_LOCK_TIMEOUT, 30000),//                azkProps.getLong(Constants.ConfigurationKeys.DISTRIBUTELOCK_GET_TIMEOUT, 60000));//        if(lockFlag){//          logger.info(\"request a new distributeLock successfully , lock_resource is {} \" + lock_resource);        /**         * if we have dispatched more than maxContinuousFlowProcessed or         * It has been more then activeExecutorsRefreshWindow millisec since we         * refreshed         */        if (currentTime - lastExecutorRefreshTime > activeExecutorsRefreshWindow                || currentContinuousFlowProcessed >= maxContinuousFlowProcessed) {          // Refresh executorInfo for all activeExecutors          refreshExecutors();          logger.debug(\"refreshExecutors success\");          lastExecutorRefreshTime = currentTime;          currentContinuousFlowProcessed = 0;        }        /**         * <pre>         *  TODO: Work around till we improve Filters to have a notion of GlobalSystemState.         *        Currently we try each queued flow once to infer a global busy state         * Possible improvements:-         *   1. Move system level filters in refreshExecutors and sleep if we have all executors busy after refresh         *   2. Implement GlobalSystemState in selector or in a third place to manage system filters. Basically         *      taking out all the filters which do not depend on the flow but are still being part of Selector.         * Assumptions:-         *   1. no one else except QueueProcessor is updating ExecutableFlow update time         *   2. re-attempting a flow (which has been tried before) is considered as all executors are busy         * </pre>         */        if (exflow.getUpdateTime() > lastExecutorRefreshTime) {          // put back in the queue          queuedFlows.enqueue(exflow, reference);          ExecutorManagerHA.this.runningCandidate = null;          final long sleepInterval =                  activeExecutorsRefreshWindow                          - (currentTime - lastExecutorRefreshTime);          // wait till next executor refresh          Thread.sleep(sleepInterval);          logger.debug(\"the flow updatetime is greater than lastExecutorRefreshTime\");        } else {          exflow.setUpdateTime(currentTime);          // process flow with current snapshot of activeExecutors          selectExecutorAndDispatchFlow(reference, exflow);          ExecutorManagerHA.this.runningCandidate = null;          logger.debug(\"selectExecutorAndDispatchFlow success\");        }        // do not count failed flow processsing (flows still in queue)        if (queuedFlows.getFlow(exflow.getExecutionId()) == null) {          currentContinuousFlowProcessed++;        }        //\u6267\u884c\u5b8c\u6210\u540e\u89e3\u9501//          try {//            dd.unlock(lock_resource);//            logger.debug(\"unlock successfully\");//          }catch (RuntimeException e){//            logger.info(\"unlock failed \",e);//          }//        }else{//          logger.info(\"processQueuedFlows step is running in another webserver , lock_resource is {} \" + lock_resource);//        }      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "selectExecutorAndDispatchFlow", "params": ["ExecutionReference", "ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void selectExecutorAndDispatchFlow(final ExecutionReference reference,                                               final ExecutableFlow exflow)            throws ExecutorManagerException {      // \u8fc7\u6ee4\u51fa\u8be5flow\u5206\u914d\u7684executor      final Set<Executor> flowExecutors = ExecutorManagerHA.this.activeExecutors.getAll().stream().filter(executor -> exflow.getExecutorIds().contains(executor.getId())).collect(Collectors.toSet());      final Set<Executor> remainingExecutors = new HashSet<>(flowExecutors);      ExecutorManagerHA.logger.info(\"execId: \" + exflow.getExecutionId() + \", executors: \" + remainingExecutors.toString());      Throwable lastError;      synchronized (exflow) {        do {          final Executor selectedExecutor = selectExecutor(exflow, remainingExecutors);          if (selectedExecutor == null) {            ExecutorManagerHA.this.commonMetrics.markDispatchFail();            handleNoExecutorSelectedCase(reference, exflow);            // RE-QUEUED - exit            return;          } else {            try {              dispatch(reference, exflow, selectedExecutor);              ExecutorManagerHA.this.commonMetrics.markDispatchSuccess();              // SUCCESS - exit              return;            } catch (final ExecutorManagerException e) {              lastError = e;              logFailedDispatchAttempt(reference, exflow, selectedExecutor, e);              ExecutorManagerHA.this.commonMetrics.markDispatchFail();              reference.setNumErrors(reference.getNumErrors() + 1);              // FAILED ATTEMPT - try other executors except selectedExecutor              updateRemainingExecutorsAndSleep(remainingExecutors, selectedExecutor, flowExecutors);            }          }        } while (reference.getNumErrors() < this.maxDispatchingErrors);        // GAVE UP DISPATCHING        final String message = \"Failed to dispatch queued execution \" + exflow.getId() + \" because \"                + \"reached \" + ConfigurationKeys.MAX_DISPATCHING_ERRORS_PERMITTED                + \" (tried \" + reference.getNumErrors() + \" executors)\";        ExecutorManagerHA.logger.error(message);        ExecutorManagerHA.this.executionFinalizer.finalizeFlow(exflow, message, lastError);  // \u901a\u7528\u544a\u8b66      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "updateRemainingExecutorsAndSleep", "params": ["Set<Executor>", "Executor", "Set<Executor>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateRemainingExecutorsAndSleep(final Set<Executor> remainingExecutors,                                                  final Executor selectedExecutor, final Set<Executor> flowExecutors) {      remainingExecutors.remove(selectedExecutor);      if (remainingExecutors.isEmpty()) {        remainingExecutors.addAll(flowExecutors);        sleepAfterDispatchFailure();      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "sleepAfterDispatchFailure", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sleepAfterDispatchFailure() {      try {        Thread.sleep(this.sleepAfterDispatchFailure.toMillis());      } catch (final InterruptedException e1) {        ExecutorManagerHA.logger.warn(\"Sleep after dispatch failure was interrupted - ignoring\");      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "logFailedDispatchAttempt", "params": ["ExecutionReference", "ExecutableFlow", "Executor", "ExecutorManagerException"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void logFailedDispatchAttempt(final ExecutionReference reference,                                          final ExecutableFlow exflow,                                          final Executor selectedExecutor, final ExecutorManagerException e) {      ExecutorManagerHA.logger.warn(String.format(              \"Executor %s responded with exception for exec: %d\",              selectedExecutor, exflow.getExecutionId()), e);      ExecutorManagerHA.logger.info(String.format(              \"Failed dispatch attempt for exec %d with error count %d\",              exflow.getExecutionId(), reference.getNumErrors()));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "getUserSpecifiedExecutor", "params": ["ExecutionOptions", "int"], "throws": null, "modifiers": ["private"], "return_type": "Executor", "snippet": "    private Executor getUserSpecifiedExecutor(final ExecutionOptions options,                                              final int executionId) {      Executor executor = null;      if (options != null              && options.getFlowParameters() != null              && options.getFlowParameters().containsKey(ExecutionOptions.USE_EXECUTOR)              && IS_NUMBER.matcher(options.getFlowParameters().get(ExecutionOptions.USE_EXECUTOR)).matches()) {        try {          final int executorId =                  Integer.valueOf(options.getFlowParameters().get(                          ExecutionOptions.USE_EXECUTOR));          executor = fetchExecutor(executorId);          if (executor == null) {            ExecutorManagerHA.logger                    .warn(String                            .format(                                    \"User specified executor id: %d for execution id: %d is not active, Looking up db.\",                                    executorId, executionId));            executor = ExecutorManagerHA.this.executorLoader.fetchExecutor(executorId);            if (executor == null) {              ExecutorManagerHA.logger                      .warn(String                              .format(                                      \"User specified executor id: %d for execution id: %d is missing from db. Defaulting to availableExecutors\",                                      executorId, executionId));            }          }        } catch (final ExecutorManagerException ex) {          ExecutorManagerHA.logger.error(\"Failed to fetch user specified executor for exec_id = \"                  + executionId, ex);        }      }      return executor;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "selectExecutor", "params": ["ExecutableFlow", "Set<Executor>"], "throws": null, "modifiers": ["private"], "return_type": "Executor", "snippet": "    private Executor selectExecutor(final ExecutableFlow exflow,                                    final Set<Executor> availableExecutors) {      Executor choosenExecutor =              getUserSpecifiedExecutor(exflow.getExecutionOptions(),                      exflow.getExecutionId());      // If no executor was specified by admin      if (choosenExecutor == null) {        final ExecutorSelector selector = new ExecutorSelector(ExecutorManagerHA.this.filterList,                ExecutorManagerHA.this.comparatorWeightsMap);        choosenExecutor = selector.getBest(availableExecutors, exflow);        ExecutorManagerHA.logger.info(\"Using dispatcher for execution id :\"                + exflow.getExecutionId() + \", use executor: \" + choosenExecutor);      }      return choosenExecutor;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "handleNoExecutorSelectedCase", "params": ["ExecutionReference", "ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleNoExecutorSelectedCase(final ExecutionReference reference,                                              final ExecutableFlow exflow) throws ExecutorManagerException {      ExecutorManagerHA.logger              .info(String                      .format(                              \"Reached handleNoExecutorSelectedCase stage for exec %d with error count %d\",                              exflow.getExecutionId(), reference.getNumErrors()));      // TODO: handle scenario where a high priority flow failing to get      // schedule can starve all others      queuedFlows.enqueue(exflow, reference);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutorManagerHA.java", "stars": "18", "class": {"name": "QueueProcessorThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "allocateSpace", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void allocateSpace(int capacity) {        if (capacity < 0 || capacity > 65536) {            throw new RuntimeException(\"\u5bb9\u91cf(\" + capacity + \")\u304c\u5927\u304d\u3059\u304e\u307e\u3059\u3002\");        }        instance = new Addressable[capacity];        UnmappedMemory um = new UnmappedMemory(0, capacity);        Arrays.fill(instance, um);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "registMemory", "params": ["Addressable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registMemory(Addressable m) {        Arrays.fill(instance, m.getStartAddress(), m.getEndAddress() + 1, m);        map.put(m.getClass(), m);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getMemory", "params": ["Class<Addressable>"], "throws": null, "modifiers": ["public"], "return_type": "Addressable", "snippet": "    public Addressable getMemory(Class<? extends Addressable> clazz) {        return map.get(clazz);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getMemories", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Addressable>", "snippet": "    public Collection<Addressable> getMemories() {        return map.values();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getStartAddress", "params": ["Class<Addressable>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStartAddress(Class<? extends Addressable> c) {        return map.get(c).getStartAddress();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getEndAddress", "params": ["Class<Addressable>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEndAddress(Class<? extends Addressable> c) {        return map.get(c).getEndAddress();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "load8", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte load8(int address) {        address &= 0xffff;        byte v = instance[address].load8(address);        if (debug) {            System.out.printf(\"load8: addr=%04x val=%02x\\n\", address, v);        }        return v;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "store8", "params": ["int", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store8(int address, byte value) {        address &= 0xffff;        if (debug) {            System.out.printf(\"store8: addr=%04x val=%02x\\n\", address, value & 0xff);        }        instance[address].store8(address, value);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "load16", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "short", "snippet": "    public short load16(int address) {        int a1 = address & 0xffff;        int a2 = (address + 1) & 0xffff;        short v = (short)(((instance[a1].load8(a1) & 0xff) << 8) + (instance[a2].load8(a2) & 0xff));        if (debug) {            System.out.printf(\"load16: addr=%04x val=%04x\\n\", a1, v & 0xffff);        }        return v;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "store16", "params": ["int", "short"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store16(int address, short value) {        int a1 = address & 0xffff;        int a2 = (address + 1) & 0xffff;        if (debug) {            System.out.printf(\"store16: addr=%04x val=%04x\\n\", a1, value & 0xffff);        }        instance[a1].store8(a1, (byte)((value & 0xff00) >> 8));        instance[a2].store8(a2, (byte)(value & 0xff));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/MemorySystem.java", "stars": "4", "class": {"name": "MemorySystem", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "registerContentObserver", "params": ["ContentObserver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerContentObserver(ContentObserver observer) {        super.registerContentObserver(observer);        mContentObservers.add(observer);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCursor.java", "stars": "74", "class": {"name": "NonBlockingCursor", "extends": "CursorWrapper", "implements": null, "modifiers": []}}, {"method_name": "unregisterContentObserver", "params": ["ContentObserver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unregisterContentObserver(ContentObserver observer) {        super.unregisterContentObserver(observer);        mContentObservers.remove(observer);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCursor.java", "stars": "74", "class": {"name": "NonBlockingCursor", "extends": "CursorWrapper", "implements": null, "modifiers": []}}, {"method_name": "registerDataSetObserver", "params": ["DataSetObserver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerDataSetObserver(DataSetObserver observer) {        super.registerDataSetObserver(observer);        mDataSetObservers.add(observer);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCursor.java", "stars": "74", "class": {"name": "NonBlockingCursor", "extends": "CursorWrapper", "implements": null, "modifiers": []}}, {"method_name": "unregisterDataSetObserver", "params": ["DataSetObserver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unregisterDataSetObserver(DataSetObserver observer) {        super.unregisterDataSetObserver(observer);        mDataSetObservers.remove(observer);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCursor.java", "stars": "74", "class": {"name": "NonBlockingCursor", "extends": "CursorWrapper", "implements": null, "modifiers": []}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() {        if (mClosed) {            return;        }                mClosed = true;        // Deactivate synchronously to send onInvalidated callback to observers        // on the thread that closed the cursor.        deactivate();        // DataSetObservers must be unregistered otherwise they will receive an        // onInvalidated callback on the wrong thread when the cursor is closed.        unregisterAllDataSetObservers();        // Remove ContentObservers now to prevent content change notifications        // that might happen between now and the time when the cursor is closed.        unregisterAllContentObservers();        // Close the Cursor asynchronously to avoid blocking        // in case the database is locked by a background thread.        mCloseTask.execute();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCursor.java", "stars": "74", "class": {"name": "NonBlockingCursor", "extends": "CursorWrapper", "implements": null, "modifiers": []}}, {"method_name": "unregisterAllDataSetObservers", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void unregisterAllDataSetObservers() {        for (DataSetObserver observer : mDataSetObservers) {            super.unregisterDataSetObserver(observer);        }        mDataSetObservers.clear();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCursor.java", "stars": "74", "class": {"name": "NonBlockingCursor", "extends": "CursorWrapper", "implements": null, "modifiers": []}}, {"method_name": "unregisterAllContentObservers", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void unregisterAllContentObservers() {        for (ContentObserver observer : mContentObservers) {            super.unregisterContentObserver(observer);        }        mContentObservers.clear();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCursor.java", "stars": "74", "class": {"name": "NonBlockingCursor", "extends": "CursorWrapper", "implements": null, "modifiers": []}}, {"method_name": "isClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isClosed() {        return mClosed || super.isClosed();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCursor.java", "stars": "74", "class": {"name": "NonBlockingCursor", "extends": "CursorWrapper", "implements": null, "modifiers": []}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "Void", "snippet": "        protected Void doInBackground(Void... args) {            mCursor.close();            return null;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/NonBlockingCursor.java", "stars": "74", "class": {"name": "CloseTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "updateNginxFromNacos", "params": [], "throws": ["IOException", "InterruptedException", "NacosException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateNginxFromNacos() throws IOException, InterruptedException, NacosException {        //\u5224\u65adnginx\u7684\u6307\u4ee4\u662f\u5426\u53ef\u7528        if (StringUtils.isEmpty(nginxCmd)) {            throw new IllegalArgumentException(NGINX_CMD + \" is empty\");        }        int i = -1;        try {            Process process = Runtime.getRuntime().exec(nginxCmd + \" -V\");            i = process.waitFor();        } catch (IOException | InterruptedException e) {            throw new IllegalArgumentException(NGINX_CMD + \" is incorrect\");        }        if (i != 0) {            throw new IllegalArgumentException(NGINX_CMD + \" is incorrect\");        }        NamingService namingService = nacosProperties.namingServiceInstance();        //\u83b7\u53d6\u914d\u7f6e\u9879        Set<DiscoverConfig> groupNames = upstreamConfig.getLists();        if (groupNames.size() == 0) {            throw new IllegalArgumentException(NGINX_CONFIG + \",\" + NGINX_UPSTREAM + \",\" + NACOS_SERVICE_NAME + \" are at least one group exists \");        }        //\u5f00\u59cb\u76d1\u542cnacos        for (DiscoverConfig configBO : groupNames) {            namingService.subscribe(configBO.getServiceName(),                    event -> {                        try {                            List<Instance> instances = namingService.getAllInstances(configBO.getServiceName());                            //\u66f4\u65b0nginx\u4e2d\u7684upstream                            boolean updated = refreshUpstream(instances, configBO.getUpstreamName(), configPath);                            if (updated) {                                lastReloadTime.set(System.currentTimeMillis());                                logger.info(\"upstream:{} update success!\", configBO.getServiceName());                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }            );        }        //\u8fd9\u8fb9\u4fdd\u7559\u539f\u6765\u7684\u5904\u7406\u903b\u8f91        //\u5f00\u542f\u7ebf\u7a0b\u5b9a\u65f6reload        new Thread(() -> {            Process process = null;            boolean result = false;            while (true) {                if (lastReloadTime.get() == 0L || (System.currentTimeMillis() - lastReloadTime.get()) < reloadInterval) {                    try {                        TimeUnit.MILLISECONDS.sleep(reloadInterval);                        continue;                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }                try {                    //\u5c1d\u8bd5nginx -t ,\u67e5\u770b\u662f\u5426\u6709\u8bed\u6cd5\u9519\u8bef 0\u6b63\u786e 1\u9519\u8bef                    process = Runtime.getRuntime().exec(nginxCmd + \" -t\");                    result = process.waitFor(10, TimeUnit.SECONDS);                    if (!result) {                        logger.error(\"nginx timeout , execute [{}] to get detail \", (nginxCmd + \" -t\"));                        continue;                    }                    if (process.exitValue() != 0) {                        logger.error(\"nginx syntax incorrect , execute [{}] to get detail \", (nginxCmd + \" -t\"));                        continue;                    }                    //nginx reload                    process = Runtime.getRuntime().exec(nginxCmd + \" -s reload\");                    result = process.waitFor(10, TimeUnit.SECONDS);                    if (!result) {                        logger.error(\"nginx timeout , execute [{}] to get detail \", (nginxCmd + \" -t\"));                        continue;                    }                    if (process.exitValue() != 0) {                        logger.error(\"nginx reload incorrect , execute [{}] to get detail \", (nginxCmd + \" -s reload\"));                        continue;                    }                    lastReloadTime.set(0L);                    logger.info(\"nginx reload success!\");                } catch (Exception e) {                    logger.error(\"reload nginx throw exception\", e);                }            }        }, \"reload-nginx\").start();    }", "url": "https://raw.githubusercontent.com/cyl2cyl/nginx_service_discovery/master/src/main/java/com/xm/service/discovery/service/impl/MonitorServiceImpl.java", "stars": "3", "class": {"name": "MonitorServiceImpl", "extends": null, "implements": ["MonitorService"], "modifiers": ["public"]}}, {"method_name": "refreshUpstream", "params": ["List<Instance>", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean refreshUpstream(List<Instance> instances, String nginxUpstream, String nginxConfigPath) {        //\u83b7\u53d6\u5230upstream        Pattern pattern = Pattern.compile(UPSTREAM_REG.replace(PLACEHOLDER, nginxUpstream));        //\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728        File file = new File(nginxConfigPath);        if (!file.exists() || !file.isFile()) {            throw new IllegalArgumentException(\"file : \" + nginxConfigPath + \" is not exists or not a file\");        }        Long length = file.length();        byte[] bytes = new byte[length.intValue()];        try (FileInputStream fileInputStream = new FileInputStream(file)) {            fileInputStream.read(bytes);        } catch (IOException e) {            e.printStackTrace();        }        //\u83b7\u53d6\u5230\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9        String conf = new String(bytes);        //\u5339\u914d\u5bf9\u5e94\u7684upstream        Matcher matcher = pattern.matcher(conf);        if (matcher.find()) {            String formatSymbol = \"\";            String oldUpstream = matcher.group();            //\u8ba1\u7b97\u51fa\u65e7\u7684upstream\u5230\u5de6\u8fb9\u7684\u8ddd\u79bb            int index = conf.indexOf(oldUpstream);            while (index != 0 && (conf.charAt(index - 1) == ' ' || conf.charAt(index - 1) == '\\t')) {                formatSymbol += conf.charAt(index - 1);                index--;            }            //\u62fc\u63a5\u65b0\u7684upstream            String newUpstream = UPSTREAM_FOMAT.replace(PLACEHOLDER, nginxUpstream);            StringBuffer servers = new StringBuffer();            if (instances.size() > 0) {                for (Instance instance : instances) {                    //\u4e0d\u5065\u5eb7\u6216\u4e0d\u53ef\u7528\u7684\u8df3\u8fc7                    if (!instance.isHealthy() || !instance.isEnabled()) {                        continue;                    }                    String ip = instance.getIp();                    int port = instance.getPort();                    servers.append(formatSymbol + \"    server \" + ip + \":\" + port + \" max_fails=2 fail_timeout=5s;\\n\");                }            }            if (servers.length() == 0) {                //\u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684\u670d\u52a1\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u670d\u52a1\u9632\u6b62nginx\u62a5\u9519                servers.append(formatSymbol + \"    server \" + DEFAULT_SERVER + \";\\n\");            }            servers.append(formatSymbol);            newUpstream = newUpstream.replace(PLACEHOLDER_SERVER, servers.toString());            if (oldUpstream.equals(newUpstream)) {                return false;            }            //\u66ff\u6362\u539f\u6709\u7684upstream            conf = matcher.replaceAll(newUpstream);        } else {            throw new IllegalArgumentException(\"can not found upstream:\" + nginxUpstream);        }        try (FileWriter fileWriter = new FileWriter(file, false)) {            fileWriter.write(conf);            fileWriter.flush();        } catch (IOException e) {            e.printStackTrace();        }        return true;    }", "url": "https://raw.githubusercontent.com/cyl2cyl/nginx_service_discovery/master/src/main/java/com/xm/service/discovery/service/impl/MonitorServiceImpl.java", "stars": "3", "class": {"name": "MonitorServiceImpl", "extends": null, "implements": ["MonitorService"], "modifiers": ["public"]}}, {"method_name": "copyFolder", "params": ["File", "File"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void copyFolder(File src, File dest)            throws IOException {        src.mkdirs();        if (src.isDirectory()) {            //if directory not exists, create it            if (!dest.exists()) {                dest.mkdir();                System.out.println(\"Directory copied from \"                        + src + \"  to \" + dest);            }            //list all the directory contents            String[] files = src.list();            for (String file : files) {                //construct the src and dest file structure                File srcFile = new File(src, file);                File destFile = new File(dest, file);                //recursive copy                copyFolder(srcFile, destFile);            }        } else {            //if file, then copy it            //Use bytes stream to support all file types            InputStream in = new FileInputStream(src);            OutputStream out = new FileOutputStream(dest);            byte[] buffer = new byte[1024];            int length;            //copy the file content in bytes            while ((length = in.read(buffer)) > 0) {                out.write(buffer, 0, length);            }            in.close();            out.close();            System.out.println(\"File copied from \" + src + \" to \" + dest);        }    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/manager/CopyManager.java", "stars": "4", "class": {"name": "CopyManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args){\t\t//\t\tProperties p = new Properties();//\t\tp.setProperty(\"source.type\", \"bdp\");//\t\tp.setProperty(\"data.object\", \"ad_audit_ods_mask.t_amis_plan\");//\t\t//\t\tp.setProperty(\"source.type.01\", \"bdp\");//\t\tp.setProperty(\"data.object.01\", \"ad_audit_ods_mask.t_amis_plan01\");//\t\t//\t\tp.setProperty(\"source.type.02\", \"bdp\");//\t\tp.setProperty(\"data.object.02\", \"ad_audit_ods_mask.t_amis_plan02\");//\t\t//\t\tp.setProperty(\"source.type.1\", \"bdp\");//\t\tp.setProperty(\"data.object.1\", \"ad_audit_ods_mask.t_amis_plan1\");//\t\t//\t\tp.setProperty(\"source.type.2\", \"bdp\");//\t\tp.setProperty(\"data.object.2\", \"ad_audit_ods_mask.t_amis_plan2\");\t\t\t\t//\t\tp.setProperty(\"source.type\", \"bdp\");//\t\tp.setProperty(\"data.object\", \"ad_audit_ods_mask.t_amis_plan\");\t\t//\t\tp.setProperty(\"source.type.01\", \"bdp\");//\t\tp.setProperty(\"data.object.01\", \"ad_audit_ods_mask.t_amis_plan\");\t\t//\t\tp.setProperty(\"source.type.02\", \"job\");//\t\tp.setProperty(\"data.object.2\", \"ad_report_ods_mask.rep_wepower_trans_sum\");//\t\tp.setProperty(\"source.type\", \"job\");//\t\tp.setProperty(\"data.object\", \"tpcds_text_10.store_sales\");//\t\tp.setProperty(\"source.type.01\", \"job\");//\t\tp.setProperty(\"data.object.01\", \"tpcds_text_10.store_sales\");//\t\tp.setProperty(\"source.type.2\", \"job\");//\t\tp.setProperty(\"data.object.2\", \"tpcds_text_10.store_sales\");//\t\tp.setProperty(\"data.object.2\", \"cf_ds_ods_mask.ods_rcs_online_clause\");//\t\tp.setProperty(\"data.object.3\", \"cf_ds_ods_mask.rcs_faq_tb_record{ds=20170911}\");//\t\tp.setProperty(\"data.object.4\", \"cf_ds_ods_mask.ecif_product_info{ds=20170317}\");//\t\tp.setProperty(\"data.object.5\", \"ccpd_dfqg1_safe.tbt_tm_acct_conf\");//\t\tp.setProperty(\"data.object.6\", \"dbpd_aml_dm_safe.t07_case_stcr_ky_uh_hbase_20150608_bak\");//\t\tp.setProperty(\"data.object.7\", \"hduser03ddb.report_jkc_cooperation_compensatory_detail_day\");//\t\tp.setProperty(\"data.object.8\", \"cf_ds_ods_mask.ods_rcs_online_meanless_words\");//\t\tp.setProperty(\"data.object.9\", \"cf_ds_ods_mask.ecif_contact_info{ds=20170913}\");//\t\tp.setProperty(\"data.object.9\", \"ad_report_ods_mask.rep_wepower_trans_sum\");//\t\tp.setProperty(\"data.object.10\", \"majunweidb3.mjw_pt2\");//\t\t//\t\tp.setProperty(\"bdp.datachecker.jdo.option.name\", \"bdp\");//\t\tp.setProperty(\"job.datachecker.jdo.option.url\", \"jdbc:mysql://10.107.108.111:3306/metastore\");//\t\tp.setProperty(\"job.datachecker.jdo.option.username\", \"hive\");//\t\tp.setProperty(\"job.datachecker.jdo.option.password\", \"aGl2ZSMyMDE4QDA3Cg==\");////\t\tp.setProperty(\"job.datachecker.jdo.option.name\", \"job_\");//\t\tp.setProperty(\"job.datachecker.jdo.option.url\", \"jdbc:mysql://10.107.108.111:3306/metastore\");//\t\tp.setProperty(\"job.datachecker.jdo.option.username\", \"hive\");//\t\tp.setProperty(\"job.datachecker.jdo.option.password\", \"aGl2ZSMyMDE4QDA3Cg==\");////\t\tp.setProperty(\"wait.time\", \"1\");//\t\tp.setProperty(\"query.frequency\", \"60\");\t\t//\t\tDataChecker dc = new DataChecker(\"test\", p);//\t\t//\t\tList<Properties> proList = dc.handleSeparationProperties(p);////\t\tfor(Properties stp : proList){//\t\t\tSystem.out.println(stp.toString());//\t\t}\t\t//\t\tDataChecker dc2 = new DataChecker(\"test\", p);//\t\tdc2.run();\t\tlong s = 20140506L;\t\tSystem.out.println((s+\"\").length());\t\ttry {\t\t\tfinal Base64.Decoder decoder = Base64.getDecoder();\t\t\tfinal Base64.Encoder encoder = Base64.getEncoder();\t\t\tfinal String text = \"wtssat@2019\";\t\t\tfinal byte[] textByte = text.getBytes(\"UTF-8\");\t\t\t//\u7f16\u7801\t\t\tfinal String encodedText = encoder.encodeToString(textByte);\t\t\tSystem.out.println(encodedText);\t\t\t//\u89e3\u7801\t\t\tSystem.out.println(new String(decoder.decode(\"aGl2ZSMyMDE4QDA3Cg==\"), \"UTF-8\"));\t\t}catch(Exception e){\t\t}\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/datacheck/test/DatacheckTest.java", "stars": "18", "class": {"name": "DatacheckTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onScroll", "params": ["android", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onScroll (android.widget.AbsListView p0, int p1, int p2, int p3)\t{\t\tn_onScroll (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer_ListViewScrollDetector.java", "stars": "2", "class": {"name": "ListViewRenderer_ListViewScrollDetector", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onScroll", "params": ["android", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onScroll (android.widget.AbsListView p0, int p1, int p2, int p3);\tpublic void onScrollStateChanged (android.widget.AbsListView p0, int p1)\t{\t\tn_onScrollStateChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer_ListViewScrollDetector.java", "stars": "2", "class": {"name": "ListViewRenderer_ListViewScrollDetector", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onScrollStateChanged", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onScrollStateChanged (android.widget.AbsListView p0, int p1)\t{\t\tn_onScrollStateChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer_ListViewScrollDetector.java", "stars": "2", "class": {"name": "ListViewRenderer_ListViewScrollDetector", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onScrollStateChanged", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onScrollStateChanged (android.widget.AbsListView p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer_ListViewScrollDetector.java", "stars": "2", "class": {"name": "ListViewRenderer_ListViewScrollDetector", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer_ListViewScrollDetector.java", "stars": "2", "class": {"name": "ListViewRenderer_ListViewScrollDetector", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer_ListViewScrollDetector.java", "stars": "2", "class": {"name": "ListViewRenderer_ListViewScrollDetector", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object get(Object key) {        return session.getAttribute(key.toString());    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/SessionContext.java", "stars": "13", "class": {"name": "SessionContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "onlineEventPublish", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onlineEventPublish(String deviceId, String from) {\t\tOnlineEvent onEvent = new OnlineEvent(this);\t\tonEvent.setDeviceId(deviceId);\t\tonEvent.setFrom(from);        applicationEventPublisher.publishEvent(onEvent);    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/event/EventPublisher.java", "stars": "29", "class": {"name": "EventPublisher", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "outlineEventPublish", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void outlineEventPublish(String deviceId, String from){\t\tOutlineEvent outEvent = new OutlineEvent(this);\t\toutEvent.setDeviceId(deviceId);\t\toutEvent.setFrom(from);        applicationEventPublisher.publishEvent(outEvent);    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/event/EventPublisher.java", "stars": "29", "class": {"name": "EventPublisher", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkEmail", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean checkEmail(String email) {        boolean flag = false;        try {            String check = \"^\uff08[a-z0-9A-Z]+[-|\\\\.]?\uff09+[a-z0-9A-Z]@\uff08[a-z0-9A-Z]+\uff08-[a-z0-9A-Z]+\uff09\uff1f\\\\.\uff09+[a-zA-Z]{2,}$\";            Pattern regex = Pattern.compile(check);            Matcher matcher = regex.matcher(email);            flag = matcher.matches();        } catch (Exception e) {            flag = false;        }        return flag;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/CheckMobileAndEmail.java", "stars": "1", "class": {"name": "CheckMobileAndEmail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMobileNO", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isMobileNO(String mobiles) {        boolean flag = false;        try {            Pattern p = Pattern.compile(\"^[1]([3-9])[0-9]{9}\");            Matcher m = p.matcher(mobiles);            flag = m.matches();        } catch (Exception e) {            flag = false;        }        return flag;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/CheckMobileAndEmail.java", "stars": "1", "class": {"name": "CheckMobileAndEmail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isNum", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isNum(String number) {        boolean flag = false;        try {            Pattern p = Pattern.compile(\"^[0-9]{5}$\");            Matcher m = p.matcher(number);            flag = m.matches();        } catch (Exception e) {            flag = false;        }        return flag;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/CheckMobileAndEmail.java", "stars": "1", "class": {"name": "CheckMobileAndEmail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);//        \u7ec3\u4e60\u5185\u5bb9\uff1a\u4f7f\u7528 canvas.drawPath() \u65b9\u6cd5\u753b\u5fc3\u5f62        canvas.drawPath(path, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson1/Practice9DrawPathView.java", "stars": "2", "class": {"name": "Practice9DrawPathView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "register", "params": ["Colleague"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void register(Colleague colleague) {        if (!colleagues.contains(colleague)) {            colleague.setMediator(this);            this.colleagues.add(colleague);        }    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/mediator/MediatorImpl.java", "stars": "2", "class": {"name": "MediatorImpl", "extends": null, "implements": ["Mediator"], "modifiers": ["public"]}}, {"method_name": "relay", "params": ["Colleague"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void relay(Colleague colleague) {        for(Colleague ob:colleagues) {            if(!ob.equals(colleague)) {                ((Colleague)ob).receive();            }        }    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/mediator/MediatorImpl.java", "stars": "2", "class": {"name": "MediatorImpl", "extends": null, "implements": ["Mediator"], "modifiers": ["public"]}}, {"method_name": "testParseArgumentsIllegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsIllegalArgument() {        String blankArg = \"\";        CommandTestUtils.checkArgumentInput(testCommand, false, blankArg);        String argWithSpaces = \"invalid search query\";        CommandTestUtils.checkArgumentInput(testCommand, false, argWithSpaces);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/SearchCmdBasicTest.java", "stars": "6", "class": {"name": "SearchCmdBasicTest", "extends": "SearchCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testParseArgumentsLegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsLegalArgument() {        CommandTestUtils.checkArgumentInput(testCommand, true, SINGLE_WORD_TITLE);        String argWithHyphen = \"Hundred-Dollar\";        CommandTestUtils.checkArgumentInput(testCommand, true, argWithHyphen);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/SearchCmdBasicTest.java", "stars": "6", "class": {"name": "SearchCmdBasicTest", "extends": "SearchCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteFindExactMatch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteFindExactMatch() {        String expectedConsoleOutput = SINGLE_WORD_TITLE;        CommandTestUtils.checkExecuteConsoleOutput(testCommand, testLibrary, expectedConsoleOutput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/SearchCmdBasicTest.java", "stars": "6", "class": {"name": "SearchCmdBasicTest", "extends": "SearchCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteFindWordMatch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteFindWordMatch() {        String expectedConsoleOutput = MULTI_WORD_TITLE_A;        testCommand = new SearchCmd(MULTI_WORD_SEARCH_TERM_SINGLE_HIT);        CommandTestUtils.checkExecuteConsoleOutput(testCommand, testLibrary, expectedConsoleOutput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/SearchCmdBasicTest.java", "stars": "6", "class": {"name": "SearchCmdBasicTest", "extends": "SearchCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteFindNoMatch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteFindNoMatch() {        String searchTerm = \"Unknown\";        String expectedConsoleOutput = NO_HITS_FOUND_MESSAGE + searchTerm;        testCommand = new SearchCmd(searchTerm);        CommandTestUtils.checkExecuteConsoleOutput(testCommand, testLibrary, expectedConsoleOutput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/SearchCmdBasicTest.java", "stars": "6", "class": {"name": "SearchCmdBasicTest", "extends": "SearchCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, JAPANESE_DATE, null);    verify(ps).setDate(1, DATE);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/JapaneseDateTypeHandlerTest.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getDate(\"column\")).thenReturn(DATE);    assertEquals(JAPANESE_DATE, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/JapaneseDateTypeHandlerTest.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getDate(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/JapaneseDateTypeHandlerTest.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getDate(1)).thenReturn(DATE);    assertEquals(JAPANESE_DATE, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/JapaneseDateTypeHandlerTest.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getDate(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/JapaneseDateTypeHandlerTest.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getDate(1)).thenReturn(DATE);    assertEquals(JAPANESE_DATE, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/JapaneseDateTypeHandlerTest.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getDate(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/JapaneseDateTypeHandlerTest.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDetachedFromWindow ();\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageRenderer.java", "stars": "2", "class": {"name": "PageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": ["File"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "\tprotected int getSize(File file) {\t\treturn (int) file.length();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/impl/TotalSizeLimitedDiscCache.java", "stars": "74", "class": {"name": "TotalSizeLimitedDiscCache", "extends": "LimitedDiscCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "list", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Category>", "snippet": "    public List<Category> list() {        Sort sort = null;        //sort=new Sort(Sort.Direction.DESC, \"id\");        sort = Sort.by(Sort.Direction.DESC, \"id\");        return categoryDAO.findAll(sort);    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/service/CategoryService.java", "stars": "2", "class": {"name": "CategoryService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Category", "snippet": "    public Category get(int id) {        Category c= categoryDAO.findById(id).orElse(null);        return c;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/service/CategoryService.java", "stars": "2", "class": {"name": "CategoryService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "call", "params": [], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "Void", "snippet": "    protected Void call() throws Exception {        return null;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/SyncGameState.java", "stars": "2", "class": {"name": "SyncGameState", "extends": "Task", "implements": null, "modifiers": ["public"]}}, {"method_name": "discount", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void discount();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/business/BasicDiscount.java", "stars": "2", "class": {"name": "BasicDiscount", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "start", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "VPNManager", "snippet": "    public static VPNManager start(Activity activity) {        if(activity instanceof Listener) {            VPNManager manager = new VPNManager(activity);            if(PackageUtils.isInstalled(activity, PACKAGE_VPNHT)) {                manager.init();            }            sLatestInstance = manager;            return manager;        }        throw new UnsupportedOperationException(\"Activity does not implement VPNManager.Listener\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLatestInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "VPNManager", "snippet": "    public static VPNManager getLatestInstance() {        if(sLatestInstance == null) {            sLatestInstance = new VPNManager(null);        }        return sLatestInstance;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentState", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "State", "snippet": "    public static State getCurrentState() {        return sCurrentState;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        mIsInstalled = true;        Intent serviceIntent = new Intent(IOpenVPNAPIService.class.getName());        serviceIntent.setPackage(PACKAGE_VPNHT);        mActivity.bindService(serviceIntent, mServiceConnection, Context.BIND_AUTO_CREATE);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        mListener = null;        if(mService != null) {            try {                mService.unregisterStatusCallback(mCallback);            } catch (RemoteException e) {                e.printStackTrace();            }            mActivity.unbindService(mServiceConnection);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() {        if(mActivity == null || mService == null) return;        try {            Intent intent = mService.prepareVPNService();            if (intent == null) {                onActivityResult(START_PROFILE_EMBEDDED, Activity.RESULT_OK, null);            } else {                mActivity.startActivityForResult(intent, START_PROFILE_EMBEDDED);            }        } catch(RemoteException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {        if(mService == null) return;        try {                mService.disconnect();        } catch(RemoteException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startEmbeddedProfile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startEmbeddedProfile()    {        BufferedReader br = null;        try {            InputStream conf = mActivity.getAssets().open(\"vpnht.conf\");            br = new BufferedReader(new InputStreamReader(conf));            StringBuilder config = new StringBuilder();            String line;            while(true) {                line = br.readLine();                if(line == null)                    break;                config.append(line).append(\"\\n\");            }            br.readLine();            mService.startVPN(\"Popcorn Time\", config.toString());        } catch (IOException | RemoteException e) {            e.printStackTrace();        }finally {            if (br != null) try {                br.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        if(mService != null) {            try {                return mService.isConnectedOrConnecting();            } catch (RemoteException e) {                e.printStackTrace();            }        }        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isVPNInstalled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isVPNInstalled() {        return mIsInstalled;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Bundle"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onActivityResult(int requestCode, int resultCode, Bundle data) {        if (resultCode == Activity.RESULT_OK) {            if(requestCode == START_PROFILE_EMBEDDED) {                startEmbeddedProfile();            } else if (requestCode == OPENVPN_PERMISSION) {                try {                    mService.registerStatusCallback(mCallback);                } catch (RemoteException e) {                    e.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "strToState", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "State", "snippet": "    private State strToState(String state) {        if(state.equalsIgnoreCase(\"CONNECTED\")) {            sCurrentState = State.CONNECTED;        } else if(state.equalsIgnoreCase(\"NOPROCESS\") || state.equalsIgnoreCase(\"USER_VPN_PASSWORD_CANCELLED\")) {            sCurrentState = State.DISCONNECTED;        } else {            sCurrentState = State.CONNECTING;        }        return sCurrentState;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNManager.java", "stars": "4", "class": {"name": "VPNManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createDefault", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "ImageLoaderConfiguration", "snippet": "\tpublic static ImageLoaderConfiguration createDefault(Context context) {\t\treturn new Builder(context).build();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "ImageLoaderConfiguration", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "memoryCacheExtraOptions", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache, int maxImageHeightForMemoryCache) {\t\t\tthis.maxImageWidthForMemoryCache = maxImageWidthForMemoryCache;\t\t\tthis.maxImageHeightForMemoryCache = maxImageHeightForMemoryCache;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "discCacheExtraOptions", "params": ["int", "int", "CompressFormat", "int", "BitmapProcessor"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder discCacheExtraOptions(int maxImageWidthForDiscCache, int maxImageHeightForDiscCache, CompressFormat compressFormat, int compressQuality, BitmapProcessor processorForDiscCache) {\t\t\tthis.maxImageWidthForDiscCache = maxImageWidthForDiscCache;\t\t\tthis.maxImageHeightForDiscCache = maxImageHeightForDiscCache;\t\t\tthis.imageCompressFormatForDiscCache = compressFormat;\t\t\tthis.imageQualityForDiscCache = compressQuality;\t\t\tthis.processorForDiscCache = processorForDiscCache;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "taskExecutor", "params": ["Executor"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder taskExecutor(Executor executor) {\t\t\tif (threadPoolSize != DEFAULT_THREAD_POOL_SIZE || threadPriority != DEFAULT_THREAD_PRIORITY || tasksProcessingType != DEFAULT_TASK_PROCESSING_TYPE) {\t\t\t\tL.w(WARNING_OVERLAP_EXECUTOR);\t\t\t}\t\t\tthis.taskExecutor = executor;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "taskExecutorForCachedImages", "params": ["Executor"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder taskExecutorForCachedImages(Executor executorForCachedImages) {\t\t\tif (threadPoolSize != DEFAULT_THREAD_POOL_SIZE || threadPriority != DEFAULT_THREAD_PRIORITY || tasksProcessingType != DEFAULT_TASK_PROCESSING_TYPE) {\t\t\t\tL.w(WARNING_OVERLAP_EXECUTOR);\t\t\t}\t\t\tthis.taskExecutorForCachedImages = executorForCachedImages;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "threadPoolSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder threadPoolSize(int threadPoolSize) {\t\t\tif (taskExecutor != null || taskExecutorForCachedImages != null) {\t\t\t\tL.w(WARNING_OVERLAP_EXECUTOR);\t\t\t}\t\t\tthis.threadPoolSize = threadPoolSize;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "threadPriority", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder threadPriority(int threadPriority) {\t\t\tif (taskExecutor != null || taskExecutorForCachedImages != null) {\t\t\t\tL.w(WARNING_OVERLAP_EXECUTOR);\t\t\t}\t\t\tif (threadPriority < Thread.MIN_PRIORITY) {\t\t\t\tthis.threadPriority = Thread.MIN_PRIORITY;\t\t\t} else {\t\t\t\tif (threadPriority > Thread.MAX_PRIORITY) {\t\t\t\t\tthreadPriority = Thread.MAX_PRIORITY;\t\t\t\t} else {\t\t\t\t\tthis.threadPriority = threadPriority;\t\t\t\t}\t\t\t}\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "denyCacheImageMultipleSizesInMemory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder denyCacheImageMultipleSizesInMemory() {\t\t\tthis.denyCacheImageMultipleSizesInMemory = true;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "tasksProcessingOrder", "params": ["QueueProcessingType"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder tasksProcessingOrder(QueueProcessingType tasksProcessingType) {\t\t\tif (taskExecutor != null || taskExecutorForCachedImages != null) {\t\t\t\tL.w(WARNING_OVERLAP_EXECUTOR);\t\t\t}\t\t\tthis.tasksProcessingType = tasksProcessingType;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "memoryCacheSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder memoryCacheSize(int memoryCacheSize) {\t\t\tif (memoryCacheSize <= 0) throw new IllegalArgumentException(\"memoryCacheSize must be a positive number\");\t\t\tif (memoryCache != null) {\t\t\t\tL.w(WARNING_OVERLAP_MEMORY_CACHE);\t\t\t}\t\t\tthis.memoryCacheSize = memoryCacheSize;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "memoryCacheSizePercentage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder memoryCacheSizePercentage(int avaialbleMemoryPercent) {\t\t\tif (avaialbleMemoryPercent <= 0 || avaialbleMemoryPercent >= 100)\t\t\t\tthrow new IllegalArgumentException(\"avaialbleMemoryPercent must be in range (0 < % < 100)\");\t\t\tif (memoryCache != null) {\t\t\t\tL.w(WARNING_OVERLAP_MEMORY_CACHE);\t\t\t}\t\t\tlong availableMemory = Runtime.getRuntime().maxMemory();\t\t\tmemoryCacheSize = (int) (availableMemory * (avaialbleMemoryPercent / 100f));\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "memoryCache", "params": ["MemoryCacheAware<String,Bitmap>"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder memoryCache(MemoryCacheAware<String, Bitmap> memoryCache) {\t\t\tif (memoryCacheSize != 0) {\t\t\t\tL.w(WARNING_OVERLAP_MEMORY_CACHE);\t\t\t}\t\t\tthis.memoryCache = memoryCache;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "discCacheSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder discCacheSize(int maxCacheSize) {\t\t\tif (maxCacheSize <= 0) throw new IllegalArgumentException(\"maxCacheSize must be a positive number\");\t\t\tif (discCache != null || discCacheFileCount > 0) {\t\t\t\tL.w(WARNING_OVERLAP_DISC_CACHE_PARAMS);\t\t\t}\t\t\tthis.discCacheSize = maxCacheSize;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "discCacheFileCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder discCacheFileCount(int maxFileCount) {\t\t\tif (maxFileCount <= 0) throw new IllegalArgumentException(\"maxFileCount must be a positive number\");\t\t\tif (discCache != null || discCacheSize > 0) {\t\t\t\tL.w(WARNING_OVERLAP_DISC_CACHE_PARAMS);\t\t\t}\t\t\tthis.discCacheSize = 0;\t\t\tthis.discCacheFileCount = maxFileCount;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "discCacheFileNameGenerator", "params": ["FileNameGenerator"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder discCacheFileNameGenerator(FileNameGenerator fileNameGenerator) {\t\t\tif (discCache != null) {\t\t\t\tL.w(WARNING_OVERLAP_DISC_CACHE_NAME_GENERATOR);\t\t\t}\t\t\tthis.discCacheFileNameGenerator = fileNameGenerator;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "imageDownloader", "params": ["ImageDownloader"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder imageDownloader(ImageDownloader imageDownloader) {\t\t\tthis.downloader = imageDownloader;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "imageDecoder", "params": ["ImageDecoder"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder imageDecoder(ImageDecoder imageDecoder) {\t\t\tthis.decoder = imageDecoder;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "discCache", "params": ["DiscCacheAware"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder discCache(DiscCacheAware discCache) {\t\t\tif (discCacheSize > 0 || discCacheFileCount > 0) {\t\t\t\tL.w(WARNING_OVERLAP_DISC_CACHE_PARAMS);\t\t\t}\t\t\tif (discCacheFileNameGenerator != null) {\t\t\t\tL.w(WARNING_OVERLAP_DISC_CACHE_NAME_GENERATOR);\t\t\t}\t\t\tthis.discCache = discCache;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "defaultDisplayImageOptions", "params": ["DisplayImageOptions"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder defaultDisplayImageOptions(DisplayImageOptions defaultDisplayImageOptions) {\t\t\tthis.defaultDisplayImageOptions = defaultDisplayImageOptions;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "writeDebugLogs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "\t\tpublic Builder writeDebugLogs() {\t\t\tthis.writeLogs = true;\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImageLoaderConfiguration", "snippet": "\t\tpublic ImageLoaderConfiguration build() {\t\t\tinitEmptyFieldsWithDefaultValues();\t\t\treturn new ImageLoaderConfiguration(this);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "initEmptyFieldsWithDefaultValues", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\t\tprivate void initEmptyFieldsWithDefaultValues() {\t\t\tif (taskExecutor == null) {\t\t\t\ttaskExecutor = DefaultConfigurationFactory.createExecutor(threadPoolSize, threadPriority, tasksProcessingType);\t\t\t} else {\t\t\t\tcustomExecutor = true;\t\t\t}\t\t\tif (taskExecutorForCachedImages == null) {\t\t\t\ttaskExecutorForCachedImages = DefaultConfigurationFactory.createExecutor(threadPoolSize, threadPriority, tasksProcessingType);\t\t\t} else {\t\t\t\tcustomExecutorForCachedImages = true;\t\t\t}\t\t\tif (discCache == null) {\t\t\t\tif (discCacheFileNameGenerator == null) {\t\t\t\t\tdiscCacheFileNameGenerator = DefaultConfigurationFactory.createFileNameGenerator();\t\t\t\t}\t\t\t\tdiscCache = DefaultConfigurationFactory.createDiscCache(context, discCacheFileNameGenerator, discCacheSize, discCacheFileCount);\t\t\t}\t\t\tif (memoryCache == null) {\t\t\t\tmemoryCache = DefaultConfigurationFactory.createMemoryCache(memoryCacheSize);\t\t\t}\t\t\tif (denyCacheImageMultipleSizesInMemory) {\t\t\t\tmemoryCache = new FuzzyKeyMemoryCache<String, Bitmap>(memoryCache, MemoryCacheUtil.createFuzzyKeyComparator());\t\t\t}\t\t\tif (downloader == null) {\t\t\t\tdownloader = DefaultConfigurationFactory.createImageDownloader(context);\t\t\t}\t\t\tif (decoder == null) {\t\t\t\tdecoder = DefaultConfigurationFactory.createImageDecoder(writeLogs);\t\t\t}\t\t\tif (defaultDisplayImageOptions == null) {\t\t\t\tdefaultDisplayImageOptions = DisplayImageOptions.createSimple();\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java", "stars": "74", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "createByteBuf", "params": ["AbstractNetMessage"], "throws": null, "modifiers": ["public"], "return_type": "ByteBuf", "snippet": "    public ByteBuf createByteBuf(AbstractNetMessage netProtoBufMessage) {        ByteBuf byteBuf = Unpooled.buffer(256);        NetMessageHead netMessageHead1 = new NetMessageHead();        //\u7f16\u5199head        NetMessageHead netMessageHead = netProtoBufMessage.getNetMessageHead();        byteBuf.writeShort(netMessageHead.getHead());        //\u957f\u5ea6        byteBuf.writeInt(0);        //\u8bbe\u7f6e\u5185\u5bb9        byteBuf.writeByte(netMessageHead.getVersion());        byteBuf.writeShort(netMessageHead.getCmd());        byteBuf.writeInt(netMessageHead.getSerial());        NetMessageBody netMessageBody = netProtoBufMessage.getNetMessageBody();        byteBuf.writeBytes(netMessageBody.getBytes());        //\u8bbe\u7f6e\u957f\u5ea6        int skip = 6;        int length = byteBuf.readableBytes() - skip;        byteBuf.setInt(2, length);        //\u800c slice \u64cd\u4f5c\u53ef\u4ee5\u5c06\u4e00\u4e2a ByteBuf \u5207\u7247 \u4e3a\u591a\u4e2a\u5171\u4eab\u4e00\u4e2a\u5b58\u50a8\u533a\u57df\u7684 ByteBuf \u5bf9\u8c61.        byteBuf.slice();        return byteBuf;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_client/src/main/java/com/game/encoder/MessageEncoderFactory.java", "stars": "1", "class": {"name": "MessageEncoderFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "beforeMethod", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void beforeMethod() throws IOException {    tempFile = File.createTempFile(\"test_hadoop_job_utils_find_application_id_from_log\", null);    bw = new BufferedWriter(new FileWriter(tempFile));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsFindApplicationIdFromLog.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsFindApplicationIdFromLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testNoApplicationId", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testNoApplicationId() throws IOException {    bw.write(\"28-08-2015 14:05:24 PDT spark INFO - 15/08/28 21:05:24 INFO client.RMProxy: Connecting to ResourceManager at eat1-nertzrm02.grid.linkedin.com/172.20.158.95:8032\\n\");    bw.write(\"28-08-2015 14:05:24 PDT spark INFO - 15/08/28 21:05:24 INFO yarn.Client: Requesting a new application from cluster with 134 NodeManagers\\n\");    bw.write(\"28-08-2015 14:05:24 PDT spark INFO - 15/08/28 21:05:24 INFO yarn.Client: Verifying our application has not requested more than the maximum memory capability of the cluster (55296 MB per container)\\n\");    bw.write(\"28-08-2015 14:05:24 PDT spark INFO - 15/08/28 21:05:24 INFO yarn.Client: Will allocate AM container, with 4505 MB memory including 409 MB overhead\\n\");    bw.write(\"28-08-2015 14:05:24 PDT spark INFO - 15/08/28 21:05:24 INFO yarn.Client: Setting up container launch context for our AM\\n\");    bw.write(\"28-08-2015 14:05:24 PDT spark INFO - 15/08/28 21:05:24 INFO yarn.Client: Preparing resources for our AM container\\n\");    bw.close();    Set<String> appId = HadoopJobUtils.findApplicationIdFromLog(tempFile.toString(), logger);    Assert.assertEquals(0, appId.size());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsFindApplicationIdFromLog.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsFindApplicationIdFromLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testOneApplicationId", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testOneApplicationId() throws IOException {    bw.write(\"28-08-2015 14:05:32 PDT spark INFO - 15/08/28 21:05:32 INFO spark.SecurityManager: SecurityManager: authentication enabled; ui acls enabled; users with view permissions: Set(*); users with modify permissions: Set(azkaban, jyu)\\n\");    bw.write(\"28-08-2015 14:05:32 PDT spark INFO - 15/08/28 21:05:32 INFO yarn.Client: Submitting application 3099 to ResourceManager\\n\");    bw.write(\"28-08-2015 14:05:33 PDT spark INFO - 15/08/28 21:05:33 INFO impl.YarnClientImpl: Submitted application application_1440264346270_3099\\n\");    bw.close();    Set<String> appId = HadoopJobUtils.findApplicationIdFromLog(tempFile.toString(), logger);    Assert.assertEquals(1, appId.size());    Assert.assertTrue(appId.contains(\"application_1440264346270_3099\"));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsFindApplicationIdFromLog.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsFindApplicationIdFromLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testMultipleSameApplicationIdWhenSparkStarts", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testMultipleSameApplicationIdWhenSparkStarts() throws IOException {    bw.write(\"28-08-2015 14:05:34 PDT spark INFO - 15/08/28 21:05:34 INFO yarn.Client: Application report for application_1440264346270_3099 (state: ACCEPTED)\\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO - 15/08/28 21:05:34 INFO yarn.Client: \\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO -   client token: Token { kind: YARN_CLIENT_TOKEN, service:  }\\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO -   diagnostics: N/A\\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO -   ApplicationMaster host: N/A\\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO -   ApplicationMaster RPC port: -1\\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO -   queue: default\\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO -   start time: 1440795932813\\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO -   final status: UNDEFINED\\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO -   tracking URL: http://eat1-nertzwp02.grid.linkedin.com:8080/proxy/application_1440264346270_3099/\\n\");    bw.write(\"28-08-2015 14:05:34 PDT spark INFO -   user: jyu\\n\");    bw.write(\"28-08-2015 14:05:35 PDT spark INFO - 15/08/28 21:05:35 INFO yarn.Client: Application report for application_1440264346270_3099 (state: ACCEPTED)\\n\");    bw.close();    Set<String> appId = HadoopJobUtils.findApplicationIdFromLog(tempFile.toString(), logger);    Assert.assertEquals(1, appId.size());    Assert.assertTrue(appId.contains(\"application_1440264346270_3099\"));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsFindApplicationIdFromLog.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsFindApplicationIdFromLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testMultipleSameApplicationIdForSparkAfterRunningFor17Hours", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testMultipleSameApplicationIdForSparkAfterRunningFor17Hours() throws IOException {    bw.write(\"28-08-2015 14:11:50 PDT spark INFO - 15/08/28 21:11:50 INFO yarn.Client: Application report for application_1440264346270_3099 (state: RUNNING)\\n\");    bw.write(\"28-08-2015 14:11:51 PDT spark INFO - 15/08/28 21:11:51 INFO yarn.Client: Application report for application_1440264346270_3099 (state: RUNNING)\\n\");    bw.write(\"28-08-2015 14:11:52 PDT spark INFO - 15/08/28 21:11:52 INFO yarn.Client: Application report for application_1440264346270_3099 (state: RUNNING)\\n\");    bw.write(\"28-08-2015 14:11:53 PDT spark INFO - 15/08/28 21:11:53 INFO yarn.Client: Application report for application_1440264346270_3099 (state: RUNNING)\\n\");    bw.write(\"28-08-2015 14:11:54 PDT spark INFO - 15/08/28 21:11:54 INFO yarn.Client: Application report for application_1440264346270_3099 (state: RUNNING)\\n\");    bw.close();    Set<String> appId = HadoopJobUtils.findApplicationIdFromLog(tempFile.toString(), logger);    Assert.assertEquals(1, appId.size());    Assert.assertTrue(appId.contains(\"application_1440264346270_3099\"));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsFindApplicationIdFromLog.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsFindApplicationIdFromLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testLogWithMultipleApplicationIdsAppearingMultipleTimes", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLogWithMultipleApplicationIdsAppearingMultipleTimes() throws IOException {    bw.write(\"28-08-2015 12:29:38 PDT Training_clickSelectFeatures INFO - INFO Submitted application application_1440264346270_3044\\n\");    bw.write(\"28-08-2015 12:29:38 PDT Training_clickSelectFeatures INFO - INFO The url to track the job: http://eat1-nertzwp02.grid.linkedin.com:8080/proxy/application_1440264346270_3044/\\n\");    bw.write(\"28-08-2015 12:29:38 PDT Training_clickSelectFeatures INFO - INFO See http://eat1-nertzwp02.grid.linkedin.com:8080/proxy/application_1440264346270_3044/ for details.\\n\");    bw.write(\"28-08-2015 12:29:38 PDT Training_clickSelectFeatures INFO - INFO Running job: job_1440264346270_3044\\n\");    bw.write(\"28-08-2015 12:30:21 PDT Training_clickSelectFeatures INFO - INFO Closing idle connection Socket[addr=eat1-hcl5481.grid.linkedin.com/172.20.138.228,port=42492,localport=42382] to server eat1-hcl5481.grid.linkedin.com/172.20.138.228:42492\\n\");    bw.write(\"28-08-2015 12:30:37 PDT Training_clickSelectFeatures INFO - INFO Closing idle connection Socket[addr=eat1-nertznn01.grid.linkedin.com/172.20.158.57,port=9000,localport=30453] to server eat1-nertznn01.grid.linkedin.com/172.20.158.57:9000\\n\");    bw.write(\"28-08-2015 12:31:09 PDT Training_clickSelectFeatures INFO - INFO Job job_1440264346270_3044 running in uber mode : false\\n\");    bw.write(\"28-08-2015 12:29:38 PDT Training_clickSelectFeatures INFO - INFO Submitted application application_1440264346270_3088\\n\");    bw.write(\"28-08-2015 12:29:38 PDT Training_clickSelectFeatures INFO - INFO The url to track the job: http://eat1-nertzwp02.grid.linkedin.com:8080/proxy/application_1440264346270_3088/\\n\");    bw.write(\"28-08-2015 12:29:38 PDT Training_clickSelectFeatures INFO - INFO See http://eat1-nertzwp02.grid.linkedin.com:8080/proxy/application_1440264346270_3088/ for details.\\n\");    bw.write(\"28-08-2015 12:29:38 PDT Training_clickSelectFeatures INFO - INFO Running job: job_1440264346270_3088\\n\");    bw.write(\"28-08-2015 12:30:21 PDT Training_clickSelectFeatures INFO - INFO Closing idle connection Socket[addr=eat1-hcl5481.grid.linkedin.com/172.20.138.228,port=42492,localport=42382] to server eat1-hcl5481.grid.linkedin.com/172.20.138.228:42492\\n\");    bw.write(\"28-08-2015 12:30:37 PDT Training_clickSelectFeatures INFO - INFO Closing idle connection Socket[addr=eat1-nertznn01.grid.linkedin.com/172.20.158.57,port=9000,localport=30453] to server eat1-nertznn01.grid.linkedin.com/172.20.158.57:9000\\n\");    bw.write(\"28-08-2015 12:31:09 PDT Training_clickSelectFeatures INFO - INFO Job job_1440264346270_3088 running in uber mode : false\\n\");    bw.close();    Set<String> appId = HadoopJobUtils.findApplicationIdFromLog(tempFile.toString(), logger);    Assert.assertEquals(2, appId.size());    Assert.assertTrue(appId.contains(\"application_1440264346270_3044\"));    Assert.assertTrue(appId.contains(\"application_1440264346270_3088\"));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsFindApplicationIdFromLog.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsFindApplicationIdFromLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findSnapView", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0)\t{\t\treturn n_findSnapView (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CenterSnapHelper.java", "stars": "2", "class": {"name": "CenterSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_findSnapView", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CenterSnapHelper.java", "stars": "2", "class": {"name": "CenterSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CenterSnapHelper.java", "stars": "2", "class": {"name": "CenterSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CenterSnapHelper.java", "stars": "2", "class": {"name": "CenterSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAccuracyChanged (android.hardware.Sensor p0, int p1)\t{\t\tn_onAccuracyChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/OrientationSensorListener.java", "stars": "2", "class": {"name": "OrientationSensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAccuracyChanged (android.hardware.Sensor p0, int p1);\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/OrientationSensorListener.java", "stars": "2", "class": {"name": "OrientationSensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/OrientationSensorListener.java", "stars": "2", "class": {"name": "OrientationSensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onSensorChanged (android.hardware.SensorEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/OrientationSensorListener.java", "stars": "2", "class": {"name": "OrientationSensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/OrientationSensorListener.java", "stars": "2", "class": {"name": "OrientationSensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/OrientationSensorListener.java", "stars": "2", "class": {"name": "OrientationSensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "operations", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void operations() {\t\tfinal SharedPreferences pref = mContext.getSharedPreferences(Config.OAUTH_PREF,\tContext.MODE_PRIVATE);\t\tfinal String token = pref.getString(Config.PREF_TOKEN, null);\t\tfinal String tokenSecret = pref.getString(Config.PREF_TOKENSECRET, null);\t\tfetchInfo(token, tokenSecret);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedinWebviewDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authenticationStart", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid authenticationStart() {\t\tfinal LinkedInRequestToken liToken = oAuthService.getOAuthRequestToken(Config.OAUTH_CALLBACK_URL);\t\tfinal String url = liToken.getAuthorizationUrl();\t\tmContext.getSharedPreferences(Config.OAUTH_PREF, Context.MODE_PRIVATE)\t\t.edit()\t\t.putString(Config.PREF_REQTOKENSECRET, liToken.getTokenSecret())\t\t.commit();\t\tWebviewDialog webviewDialog=new WebviewDialog(mContext,url);\t\twebviewDialog.show();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedinWebviewDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchInfo", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void fetchInfo(String token, String tokenSecret) {\t\tif (token == null || tokenSecret == null) {\t\t\tauthenticationStart();\t\t} else {\t\t\tnew AsyncGetCurrentUserInfo().execute(new LinkedInAccessToken(token, tokenSecret));\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedinWebviewDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authenticationFinish", "params": ["Uri"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid authenticationFinish(final Uri uri) {\t\tif (uri != null && uri.getScheme().equals(Config.OAUTH_CALLBACK_SCHEME)) {\t\t\tfinal String problem = uri.getQueryParameter(Config.OAUTH_QUERY_PROBLEM);\t\t\tif (problem == null) {\t\t\t\tfinal SharedPreferences pref = mContext.getSharedPreferences(Config.OAUTH_PREF, Context.MODE_PRIVATE);\t\t\t\tfinal LinkedInAccessToken accessToken = oAuthService\t\t\t\t\t\t.getOAuthAccessToken(\t\t\t\t\t\t\t\tnew LinkedInRequestToken(\t\t\t\t\t\t\t\t\t\turi.getQueryParameter(Config.OAUTH_QUERY_TOKEN),\t\t\t\t\t\t\t\t\t\tpref.getString(Config.PREF_REQTOKENSECRET, null)),\t\t\t\t\t\t\t\t\t\turi.getQueryParameter(Config.OAUTH_QUERY_VERIFIER));\t\t\t\tpref.edit()\t\t\t\t.putString(Config.PREF_TOKEN, accessToken.getToken())\t\t\t\t.putString(Config.PREF_TOKENSECRET, accessToken.getTokenSecret())\t\t\t\t.remove(Config.PREF_REQTOKENSECRET).commit();\t\t\t\tnew AsyncGetCurrentUserInfo().execute(accessToken);\t\t\t} else {\t\t\t\t\t\t\t}\t\t}else{\t\t\t//error\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedinWebviewDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVerifierListener", "params": ["OnVerifyListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setVerifierListener(OnVerifyListener data) {\t\tlisteners.add(data);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedinWebviewDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doOprations", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void doOprations() {\t\tif(callFrom.equalsIgnoreCase(SYNC_FRIENDS)){\t\t\tsetVerifierListener(new OnVerifyListener() {\t\t\t\t@Override\t\t\t\tpublic void onVerify(String verifier) {\t\t\t\t\ttry {\t\t\t\t\t\tLog.i(\"LinkedinSample\", \"verifier: \" + verifier);\t\t\t\t\t\tLinkedInAccessToken accessToken = oAuthService.getOAuthAccessToken(linkedinToken,\t\t\t\t\t\t\t\tverifier);\t\t\t\t\t\tlinkedinClient = factory.createLinkedInApiClient(accessToken);\t\t\t\t\t\tLinkedInFriends linkedInFriends=new LinkedInFriends(mContext,accessToken);\t\t\t\t\t\tlinkedInFriends.show();\t\t\t\t\t}catch (Exception e) {\t\t\t\t\t\t// TODO: handle exception\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t}\t\t\t});\t\t}else if(callFrom.equalsIgnoreCase(SHARE_STATUS)){\t\t\tsetVerifierListener(new OnVerifyListener() {\t\t\t\t@Override\t\t\t\tpublic void onVerify(String verifier) {\t\t\t\t\ttry {\t\t\t\t\t\tLog.i(\"LinkedinSample\", \"verifier: \" + verifier);\t\t\t\t\t\tLinkedInAccessToken accessToken = oAuthService.getOAuthAccessToken(linkedinToken,\t\t\t\t\t\t\t\tverifier);\t\t\t\t\t\tlinkedinClient = factory.createLinkedInApiClient(accessToken);\t\t\t\t\t\t//\t\t\t\t\t\t\tlinkedinClient.updateCurrentStatus(status);\t\t\t\t\t\t//\t\t\t\t\t\t\tcurrentStatus.setText(\"\");\t\t\t\t\t\tlinkedinClient.postNetworkUpdate(statusText);\t\t\t\t\t\tPerson profile = linkedinClient.getProfileForCurrentUser(EnumSet\t\t\t\t\t\t\t\t.of(ProfileField.FIRST_NAME,\t\t\t\t\t\t\t\t\t\tProfileField.LAST_NAME,\t\t\t\t\t\t\t\t\t\tProfileField.PICTURE_URL));\t\t\t\t\t\tLog.e(\"Name:\",\t\t\t\t\t\t\t\t\"\" + profile.getFirstName() + \" \"\t\t\t\t\t\t\t\t\t\t+ profile.getLastName());\t\t\t\t\t\t// Log.e(\"BirthDate:\", \"\" + profile.getDateOfBirth());\t\t\t\t\t\tLog.e(\"Headline:\", \"\" + profile.getHeadline());\t\t\t\t\t\tLog.e(\"Summary:\", \"\" + profile.getSummary());\t\t\t\t\t\tLog.e(\"Industry:\", \"\" + profile.getIndustry());\t\t\t\t\t\tLog.e(\"Picture url:\", \"\" + profile.getPictureUrl());\t\t\t\t\t\tString stringUrl = profile.getPictureUrl().toString();\t\t\t\t\t\tSystem.out.println(\"url test\" + stringUrl);\t\t\t\t\t\tConnections connections =linkedinClient.getConnectionsForCurrentUser(); \t\t\t\t\t\tList<String> list = new ArrayList<String>(); \t\t\t\t\t\tfor(Person p :connections.getPersonList()) {\t\t\t\t\t\t\tLog.e(\"Name\", \"\" + p.getLastName() + \" \" +p.getFirstName()); \t\t\t\t\t\t\tLog.e(\"Industry      \", \"\" + p.getIndustry()); \t\t\t\t\t\t\tLog.e(\"      \", \"\" +  \"*****************\");\t\t\t\t\t\t\tLog.e(\"currentStatus \",\"\"+p.getCurrentStatus());\t\t\t\t\t\t\tLog.e(\"link          \",\"\"+p.getPublicProfileUrl());\t\t\t\t\t\t\tLog.e(\"position      \",\"\"+p.getEducations());\t\t\t\t\t\t\tLog.e(\"id\",\"\" +p.getId());\t\t\t\t\t\t\tlist.add(p.getId());\t\t\t\t\t\t}\t\t\t\t\t\tSystem.out.println(\"list::\"+list);\t\t\t\t\t} catch (Exception e) {\t\t\t\t\t\te.printStackTrace();\t\t\t\t\t}\t\t\t\t}\t\t\t});\t\t\t//\t\t\tLinkedinWebviewDialog.this.dismiss();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedinWebviewDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onPreExecute", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPreExecute() {\t\t\tdialog = new ProgressDialog(mContext);\t\t\tdialog.setMessage(\"Please wait...\");\t\t\tdialog.setIndeterminate(true);\t\t\tdialog.setCancelable(false);\t\t\tdialog.show();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "AsyncGetCurrentUserInfo", "extends": "AsyncTask", "implements": null, "modifiers": []}}, {"method_name": "doInBackground", "params": ["LinkedInAccessToken"], "throws": null, "modifiers": ["protected"], "return_type": "Person", "snippet": "\t\tprotected Person doInBackground(LinkedInAccessToken... arg0) {\t\t\ttry{\t\t\t\taccessToken=arg0[0];\t\t\t\tlinkedinClient = factory.createLinkedInApiClient(accessToken);\t\t\t\tlinkedinClient.setAccessToken(accessToken);\t\t\t\treturn linkedinClient.getProfileForCurrentUser(ProfileParameters);\t\t\t} catch (LinkedInApiClientException ex){\t\t\t\tLog.e(TAG, \"LinkedInApiClientException: \", ex);\t\t\t\treturn null;\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "AsyncGetCurrentUserInfo", "extends": "AsyncTask", "implements": null, "modifiers": []}}, {"method_name": "onPostExecute", "params": ["Person"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPostExecute(Person person) {\t\t\tif(person == null){\t\t\t\tToast.makeText(\t\t\t\t\t\tmContext,\t\t\t\t\t\t\"application_down_due_to_linkedinapiclientexception\",\t\t\t\t\t\tToast.LENGTH_LONG).show();\t\t\t\tdialog.dismiss();\t\t\t}else{\t\t\t\tSystem.out.println(\"person info :\");\t\t\t\tSystem.out.println(\"person name\"+person.getFirstName() +\" \"+person.getLastName());\t\t\t\t//\t\t\t\tmCurrentPerson = person;\t\t\t\t//\t\t\t\tpopulateAll(person);\t\t\t\tif(callFrom.equalsIgnoreCase(SHARE_STATUS)){\t\t\t\t\tnew AsyncTask<String, String, String>() {\t\t\t\t\t\tProgressDialog progressDialog;\t\t\t\t\t\t@Override\t\t\t\t\t\tprotected void onPreExecute() {\t\t\t\t\t\t\tsuper.onPreExecute();\t\t\t\t\t\t\tprogressDialog=new ProgressDialog(mContext);\t\t\t\t\t\t}\t\t\t\t\t\t@Override\t\t\t\t\t\tprotected String doInBackground(String... params) {\t\t\t\t\t\t\ttry {\t\t\t\t\t\t\tlinkedinClient.updateCurrentStatus(\"This is Myappsco website:\"+\"www.myappsco.com\");\t\t\t\t\t\t\tlinkedinClient.postNetworkUpdate(\"This is Myappsco website:\"+\"www.myappsco.com\");\t\t\t\t\t\t\t}\t\t\t\t\t\t\tcatch (Exception e) {\t\t\t\t\t\t\t\t// TODO: handle exception\t\t\t\t\t\t\t\tSystem.out.println(\"throttle::\"+e);\t\t\t\t\t\t\t}\t\t\t\t\t\t\treturn null;\t\t\t\t\t\t}\t\t\t\t\t\t@Override\t\t\t\t\t\tprotected void onPostExecute(String result) {\t\t\t\t\t\t\tToast.makeText(\t\t\t\t\t\t\t\t\tmContext,\t\t\t\t\t\t\t\t\t\"Posted successfully...\",\t\t\t\t\t\t\t\t\tToast.LENGTH_LONG).show();\t\t\t\t\t\t\tsuper.onPostExecute(result);\t\t\t\t\t\t}\t\t\t\t\t}.execute(\"\");\t\t\t\t}else if (callFrom.equalsIgnoreCase(SYNC_FRIENDS)) {\t\t\t\t\tLinkedInFriends friends=new LinkedInFriends(mContext,accessToken);\t\t\t\t\tfriends.show();\t\t\t\t}\t\t\t\tdialog.dismiss();\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "AsyncGetCurrentUserInfo", "extends": "AsyncTask", "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onCreate(Bundle savedInstanceState) {\t\t\t// TODO Auto-generated method stub\t\t\tsuper.onCreate(savedInstanceState);\t\t\t//\tactivity=getOwnerActivity();\t\t\tsetContentView(R.layout.friends_dialog_main);\t\t\tlistViewFriends=(ListView)findViewById(R.id.listview_friends);\t\t\tarraylistFriends=new ArrayList<Person>();\t\t\tconnections = linkedinClient.getConnectionsForCurrentUser(); \t\t\tarraylistFriends=connections.getPersonList();\t\t\tsetAdapter();\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInFriends", "extends": "Dialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAdapter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setAdapter() {\t\t\tlinkedInFriendsAdapter=new LinkedInFriendsAdapter(arraylistFriends);\t\t\tlistViewFriends.setAdapter(linkedInFriendsAdapter);\t\t\tlistViewFriends.setOnItemClickListener(linkedInFriendsAdapter);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInFriends", "extends": "Dialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\t\tpublic int getCount() {\t\t\t\t// TODO Auto-generated method stub\t\t\t\treturn arrayList.size();\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInFriendsAdapter", "extends": "BaseAdapter", "implements": ["OnItemClickListener"], "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\t\tpublic Object getItem(int arg0) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\treturn arrayList.get(arg0);\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInFriendsAdapter", "extends": "BaseAdapter", "implements": ["OnItemClickListener"], "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t\t\tpublic long getItemId(int arg0) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\treturn arg0;\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInFriendsAdapter", "extends": "BaseAdapter", "implements": ["OnItemClickListener"], "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\t\tpublic View getView(int position, View view, ViewGroup viewGroup) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\t Person person = arrayList.get(position);\t\t\t\t//arrayList =  arrayList.get(position);\t\t\t\tViewHolder viewHolder;\t\t\t\tif(view==null){\t\t\t\t\tview=inflater.inflate(R.layout.friends_list, null);\t\t\t\t\tviewHolder=new ViewHolder();\t\t\t\t\tviewHolder.friendImage=(ImageView)view.findViewById(R.id.friend_image);\t\t\t\t\tviewHolder.friendText=(TextView)view.findViewById(R.id.friend_text);\t\t\t\t\tviewHolder.friendSendMessage=(Button)view.findViewById(R.id.friend_sendmessage);\t\t\t\t\tviewHolder.friendSendMessage.setOnClickListener(new SendMessageOnClick(position));\t\t\t\t\t\t\t\t\t\t\t\t\t\tview.setTag(viewHolder);\t\t\t\t}\t\t\t\telse{\t\t\t\t\tviewHolder=(ViewHolder)view.getTag();\t\t\t\t}\t\t\t\t\t\t\t\tviewHolder.friendText.setText(person.getFirstName());\t\t\t\timageLoader=new ImageLoader(context,person.getPictureUrl());\t\t\t\timageLoader.displayImage(person.getPictureUrl(), viewHolder.friendImage, false);\t\t\t\tviewHolder.friendSendMessage.setTag(person);\t\t\t\t//\timageLoader.bind(viewHolder.friendImage, person.getPictureUrl(), callback);\t\t\t\treturn view;\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInFriendsAdapter", "extends": "BaseAdapter", "implements": ["OnItemClickListener"], "modifiers": ["public"]}}, {"method_name": "onItemClick", "params": ["AdapterView<?>", "View", "int", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\tpublic void onItemClick(AdapterView<?> arg0, View arg1, int arg2,\t\t\t\t\tlong arg3) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\tarrayList.get(arg2);\t\t\t\tToast.makeText(context, \"try\", Toast.LENGTH_LONG).show();\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInFriendsAdapter", "extends": "BaseAdapter", "implements": ["OnItemClickListener"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\t\tpublic void onClick(View v) {\t\t\t\t\tSystem.out.println(\"send message click...\"+position);\t\t\t\t\tPerson p=(Person) v.getTag();\t\t\t\t\t\t\t\t\t\t  String idValue =p.getId();\t\t\t\t\t\tSystem.out.println(\"id array list\" +Arrays.asList(idValue));\t\t\t\t//\tlinkedinClient.sendMessage(Collections.addAll(arrayList, person.getId()), \"HARSHAL BENAKE DEMO\", \"my app demo HELLO\"); \t\t\ttry\t\t\t{\t\t\t\t\t\tlinkedinClient.sendMessage(Arrays.asList(idValue), \"Myappsco-abo\",\"This is Myappsco website:\"+\"www.myappsco.com\"); \t\t\t\t\t\tToast.makeText(mContext, \"Sent message successfully\", Toast.LENGTH_LONG).show();\t\t\t}\t\t\t\tcatch (Exception e) {\t\t\t\t\t// TODO: handle exception\t\t\t\t\tSystem.out.println(\"throttle::\"+e);\t\t\t\t\tToast.makeText(\t\t\t\t\t\t\tmContext,\t\t\t\t\t\t\t\"Throttle limit for calls to this resource is reached\",\t\t\t\t\t\t\tToast.LENGTH_LONG).show();\t\t\t\t}\t\t\t\t\t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "SendMessageOnClick", "extends": null, "implements": ["android"], "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onCreate(Bundle savedInstanceState) {\t\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);// must call before super.\t\t\tsuper.onCreate(savedInstanceState);\t\t\tsetContentView(R.layout.linkedin_webview);\t\t\tsetWebView(mUrl);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "WebviewDialog", "extends": "Dialog", "implements": null, "modifiers": []}}, {"method_name": "setWebView", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setWebView(String url) {\t\t\tmWebView = (WebView) findViewById(R.id.linkedin_webview);\t\t\tmWebView.getSettings().setJavaScriptEnabled(true);\t\t\tmWebView.getSettings().setAppCacheEnabled(true);\t\t\tmWebView.getSettings().setBuiltInZoomControls(true);\t\t\tmWebView.loadUrl(url);\t\t\tmWebView.setWebViewClient(new LinkedInWebViewClient());\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "WebviewDialog", "extends": "Dialog", "implements": null, "modifiers": []}}, {"method_name": "onPageStarted", "params": ["WebView", "String", "Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\tpublic void onPageStarted(WebView view, String url, Bitmap favicon) {\t\t\t\tdialog.show();\t\t\t\tsuper.onPageStarted(view, url, favicon);\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInWebViewClient", "extends": "WebViewClient", "implements": null, "modifiers": []}}, {"method_name": "onPageFinished", "params": ["WebView", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\tpublic void onPageFinished(WebView view, String url) {\t\t\t\tsuper.onPageFinished(view, url);\t\t\t\tif(dialog!=null && dialog.isShowing())\t\t\t\t\tdialog.dismiss();\t\t\t\tSystem.out.println(\"onPageFinished URL :\"+url);\t\t\t\tauthenticationFinish(Uri.parse(url));\t\t\t\t//\t\t\tdoOprations();\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInWebViewClient", "extends": "WebViewClient", "implements": null, "modifiers": []}}, {"method_name": "onReceivedError", "params": ["WebView", "int", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\tpublic void onReceivedError(WebView view, int errorCode,\t\t\t\t\tString description, String failingUrl) {\t\t\t\tif(dialog!=null && dialog.isShowing())\t\t\t\t\tdialog.dismiss();\t\t\t\tSystem.out.println(\"onReceivedError errorCode :\"+errorCode +\" description : \"+description);\t\t\t\tSystem.out.println(\"onReceivedError failingUrl :\"+failingUrl);\t\t\t\tsuper.onReceivedError(view, errorCode, description, failingUrl);\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInWebViewClient", "extends": "WebViewClient", "implements": null, "modifiers": []}}, {"method_name": "onReceivedSslError", "params": ["WebView", "SslErrorHandler", "SslError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\tpublic void onReceivedSslError(WebView view, SslErrorHandler handler,\t\t\t\t\tSslError error) {\t\t\t\tif(dialog!=null && dialog.isShowing())\t\t\t\t\tdialog.dismiss();\t\t\t\tSystem.out.println(\"onReceivedSslError error :\"+error.getPrimaryError());\t\t\t\tsuper.onReceivedSslError(view, handler, error);\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInWebViewClient", "extends": "WebViewClient", "implements": null, "modifiers": []}}, {"method_name": "shouldOverrideUrlLoading", "params": ["WebView", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\t\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\t\t\t\tif (url.contains(Config.OAUTH_CALLBACK_URL)) {\t\t\t\t\tUri uri = Uri.parse(url);\t\t\t\t\tString verifier = uri.getQueryParameter(\"oauth_verifier\");\t\t\t\t\tfor (OnVerifyListener d : listeners) {\t\t\t\t\t\t// call listener method\t\t\t\t\t\td.onVerify(verifier);\t\t\t\t\t}\t\t\t\t\tcancel();\t\t\t\t} else if (url\t\t\t\t\t\t.contains(\"www.linkedIn.com\")) {\t\t\t\t\tcancel();\t\t\t\t} else {\t\t\t\t\tLog.i(\"LinkedinSample\", \"url: \" + url);\t\t\t\t\tview.loadUrl(url);\t\t\t\t}\t\t\t\treturn true;\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/LinkedinWebviewDialog.java", "stars": "74", "class": {"name": "LinkedInWebViewClient", "extends": "WebViewClient", "implements": null, "modifiers": []}}, {"method_name": "onGameInit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onGameInit() {        gameManager.setViewGlobalData(\"event\", new Object[] { scale, speedboostGroupId, plasmaBallIds});        sendFrameData();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/AnimatedEventModule.java", "stars": "15", "class": {"name": "AnimatedEventModule", "extends": null, "implements": ["Module"], "modifiers": ["public"]}}, {"method_name": "onAfterGameTurn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAfterGameTurn() {        sendFrameData();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/AnimatedEventModule.java", "stars": "15", "class": {"name": "AnimatedEventModule", "extends": null, "implements": ["Module"], "modifiers": ["public"]}}, {"method_name": "onAfterOnEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAfterOnEnd() {    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/AnimatedEventModule.java", "stars": "15", "class": {"name": "AnimatedEventModule", "extends": null, "implements": ["Module"], "modifiers": ["public"]}}, {"method_name": "createAnimationEvent", "params": ["String", "double"], "throws": null, "modifiers": ["public"], "return_type": "ViewerEvent", "snippet": "    public ViewerEvent createAnimationEvent(String id, double t) {        ViewerEvent animEvent = new ViewerEvent(id, t);        animEvents.add(animEvent);        return animEvent;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/AnimatedEventModule.java", "stars": "15", "class": {"name": "AnimatedEventModule", "extends": null, "implements": ["Module"], "modifiers": ["public"]}}, {"method_name": "sendFrameData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendFrameData() {        if (!animEvents.isEmpty()) {            gameManager.setViewData(                \"event\",                animEvents.stream()                    .map(ViewerEvent::toString)                    .collect(Collectors.toList())            );            animEvents.clear();        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/AnimatedEventModule.java", "stars": "15", "class": {"name": "AnimatedEventModule", "extends": null, "implements": ["Module"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["double", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(double scale, int speedboostGroupId) {        this.scale = scale;        this.speedboostGroupId = speedboostGroupId;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/AnimatedEventModule.java", "stars": "15", "class": {"name": "AnimatedEventModule", "extends": null, "implements": ["Module"], "modifiers": ["public"]}}, {"method_name": "addPlasmaBall", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addPlasmaBall(int id) {        plasmaBallIds.add(id);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/AnimatedEventModule.java", "stars": "15", "class": {"name": "AnimatedEventModule", "extends": null, "implements": ["Module"], "modifiers": ["public"]}}, {"method_name": "encrypt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] encrypt(final String password) {        byte[] salt = generateSaltBytes();        byte[] hashedPassword = hashPassword(password.toCharArray(), salt);        return new String[]{getBase64EncodedBytesAsString(salt), bytesToHex(hashedPassword)};    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/PasswordCryptographyProvider.java", "stars": "2", "class": {"name": "PasswordCryptographyProvider", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encrypt", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String encrypt(final String password, String salt) {        return bytesToHex(hashPassword(password.toCharArray(), getBase64DecodedStringAsBytes(salt)));    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/PasswordCryptographyProvider.java", "stars": "2", "class": {"name": "PasswordCryptographyProvider", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateSaltBytes", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "byte", "snippet": "    private static byte[] generateSaltBytes() {        final Random random = new SecureRandom();        byte[] saltBytes = new byte[32];        random.nextBytes(saltBytes);        return saltBytes;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/PasswordCryptographyProvider.java", "stars": "2", "class": {"name": "PasswordCryptographyProvider", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashPassword", "params": ["char", "byte"], "throws": null, "modifiers": ["private", "static"], "return_type": "byte", "snippet": "    private static byte[] hashPassword(final char[] password, final byte[] salt) {        try {            SecretKeyFactory skf = SecretKeyFactory.getInstance(SECRET_KEY_ALGORITHM);            PBEKeySpec spec = new PBEKeySpec(password, salt, HASHING_ITERATIONS, HASHING_KEY_LENGTH);            SecretKey key = skf.generateSecret(spec);            byte[] res = key.getEncoded();            return res;        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/PasswordCryptographyProvider.java", "stars": "2", "class": {"name": "PasswordCryptographyProvider", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "bytesToHex", "params": ["byte"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String bytesToHex(byte[] bytes) {        char[] hexChars = new char[bytes.length * 2];        for (int j = 0; j < bytes.length; j++) {            int v = bytes[j] & 0xFF;            hexChars[j * 2] = hexArray[v >>> 4];            hexChars[j * 2 + 1] = hexArray[v & 0x0F];        }        return new String(hexChars);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/PasswordCryptographyProvider.java", "stars": "2", "class": {"name": "PasswordCryptographyProvider", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBase64EncodedBytesAsString", "params": ["byte"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String getBase64EncodedBytesAsString(byte bytes[]) {        return Base64.getEncoder().encodeToString(bytes);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/PasswordCryptographyProvider.java", "stars": "2", "class": {"name": "PasswordCryptographyProvider", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBase64DecodedStringAsBytes", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "byte", "snippet": "    private static byte[] getBase64DecodedStringAsBytes(String decode) {        return Base64.getDecoder().decode(decode);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/PasswordCryptographyProvider.java", "stars": "2", "class": {"name": "PasswordCryptographyProvider", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {        if(this.isDisposed()) return;        this.isDisposed = true;        if(this.communicationManager != null) {            this.communicationManager.dispose();            this.communicationManager = null;        }        if(this.pluginManager != null) {            this.pluginManager.dispose();            this.pluginManager = null;        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/NitroCore.java", "stars": "2", "class": {"name": "NitroCore", "extends": null, "implements": ["INitroCore"], "modifiers": ["public"]}}, {"method_name": "isDisposed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDisposed() {        return this.isDisposed;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/NitroCore.java", "stars": "2", "class": {"name": "NitroCore", "extends": null, "implements": ["INitroCore"], "modifiers": ["public"]}}, {"method_name": "getPluginManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IPluginManager", "snippet": "    public IPluginManager getPluginManager() {        return this.pluginManager;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/NitroCore.java", "stars": "2", "class": {"name": "NitroCore", "extends": null, "implements": ["INitroCore"], "modifiers": ["public"]}}, {"method_name": "getCommunicationManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ICommunicationManager", "snippet": "    public ICommunicationManager getCommunicationManager() {        return this.communicationManager;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/NitroCore.java", "stars": "2", "class": {"name": "NitroCore", "extends": null, "implements": ["INitroCore"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "ExitStatus", "snippet": "\tpublic ExitStatus run(String... args) throws Exception {\t\tSystem.err.println(\"Custom Command Hello\");\t\treturn ExitStatus.OK;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot-cli/src/test/java/cli/command/CustomCommand.java", "stars": "47572", "class": {"name": "CustomCommand", "extends": "AbstractCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "afterTextChanged", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void afterTextChanged (android.text.Editable p0)\t{\t\tn_afterTextChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRendererBase_1.java", "stars": "2", "class": {"name": "EditorRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_afterTextChanged", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_afterTextChanged (android.text.Editable p0);\tpublic void beforeTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3)\t{\t\tn_beforeTextChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRendererBase_1.java", "stars": "2", "class": {"name": "EditorRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "beforeTextChanged", "params": ["java", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void beforeTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3)\t{\t\tn_beforeTextChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRendererBase_1.java", "stars": "2", "class": {"name": "EditorRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_beforeTextChanged", "params": ["java", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_beforeTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3);\tpublic void onTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3)\t{\t\tn_onTextChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRendererBase_1.java", "stars": "2", "class": {"name": "EditorRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "onTextChanged", "params": ["java", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3)\t{\t\tn_onTextChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRendererBase_1.java", "stars": "2", "class": {"name": "EditorRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onTextChanged", "params": ["java", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRendererBase_1.java", "stars": "2", "class": {"name": "EditorRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRendererBase_1.java", "stars": "2", "class": {"name": "EditorRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EditorRendererBase_1.java", "stars": "2", "class": {"name": "EditorRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android", "android"], "modifiers": ["public", "abstract"]}}, {"method_name": "preHeadRotation", "params": ["EntityLivingBase", "double", "double", "double", "float", "float", "CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void preHeadRotation(final EntityLivingBase entity, final double x, final double y, final double z, final float entityYaw, final float partialTicks, final CallbackInfo info) {        if (entity == Minecraft.getMinecraft().player) {            this.yaw = entity.rotationYawHead;            this.pitch = entity.rotationPitch;            this.prevYaw = entity.prevRotationYawHead;            this.prevPitch = entity.prevRotationPitch;            this.yawOffset = entity.renderYawOffset;            this.prevYawOffset = entity.prevRenderYawOffset;            RotationEvent event = new RotationEvent(new Rotation(yaw, pitch), new Rotation(prevYaw, prevPitch), yawOffset, prevYawOffset);            Mercury.INSTANCE.getEventManager().fireEvent(event);            entity.rotationYawHead = event.getRotation().getYaw();            entity.rotationPitch = event.getRotation().getPitch();            entity.prevRotationYawHead = event.getPrevRotation().getYaw();            entity.prevRotationPitch = event.getPrevRotation().getPitch();            entity.renderYawOffset = event.getRenderYawOffset();            entity.prevRenderYawOffset = event.getPrevRenderYawOffset();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinRenderLivingBase.java", "stars": "12", "class": {"name": "MixinRenderLivingBase", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "postHeadRotation", "params": ["EntityLivingBase", "double", "double", "double", "float", "float", "CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void postHeadRotation(final EntityLivingBase entity, final double x, final double y, final double z, final float entityYaw, final float partialTicks, final CallbackInfo info) {        if (entity == Minecraft.getMinecraft().player) {            entity.rotationYawHead = yaw;            entity.rotationPitch = pitch;            entity.prevRotationYawHead = prevYaw;            entity.prevRotationPitch = prevPitch;            entity.renderYawOffset = yawOffset;            entity.prevRenderYawOffset = prevYawOffset;        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinRenderLivingBase.java", "stars": "12", "class": {"name": "MixinRenderLivingBase", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpBeforeClass", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUpBeforeClass() throws Exception {    final SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(SQL_MAP_CONFIG));    session = factory.openSession();    conn = session.getConnection();    BaseDataTest.runScript(factory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/overwritingproperties/create-schema-mysql.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/FooMapperTest.java", "stars": "15", "class": {"name": "FooMapperTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setUp() {    final FooMapper mapper = session.getMapper(FooMapper.class);    mapper.deleteAllFoo();    session.commit();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/FooMapperTest.java", "stars": "15", "class": {"name": "FooMapperTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testOverwriteWithDefault", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testOverwriteWithDefault() {    final FooMapper mapper = session.getMapper(FooMapper.class);    final Bar bar = new Bar(2L);    final Foo inserted = new Foo(1L, bar, 3, 4);    mapper.insertFoo(inserted);    final Foo selected = mapper.selectFoo();    // field1 is explicitly mapped properly    // <result property=\"field1\" column=\"field1\" jdbcType=\"INTEGER\"/>    Assertions.assertEquals(inserted.getField1(), selected.getField1());    // field4 is not mapped in the result map    // <result property=\"field4\" column=\"field3\" jdbcType=\"INTEGER\"/>    Assertions.assertEquals(inserted.getField3(), selected.getField4() );    // field4 is explicitly remapped to field3 in the resultmap    // <result property=\"field3\" column=\"field4\" jdbcType=\"INTEGER\"/>    Assertions.assertEquals(inserted.getField4(), selected.getField3());    // is automapped from the only column that matches... which is Field1    // probably not the intention, but it's working correctly given the code    // <association property=\"field2\" javaType=\"Bar\">    // <result property=\"field1\" column=\"bar_field1\" jdbcType=\"INTEGER\"/>    // </association>    Assertions.assertEquals(inserted.getField2().getField1(), selected.getField2().getField1());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/FooMapperTest.java", "stars": "15", "class": {"name": "FooMapperTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "tearDownAfterClass", "params": [], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "  static void tearDownAfterClass() {    try {      conn.close();    } catch (SQLException e) {      Assertions.fail(e.getMessage());    }    session.close();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/FooMapperTest.java", "stars": "15", "class": {"name": "FooMapperTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "suite", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Test", "snippet": "    public static Test suite()    {        return new TestSuite( AppTest.class );    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/test/java/com/leon/wangwang/AppTest.java", "stars": "1", "class": {"name": "AppTest", "extends": "TestCase", "implements": null, "modifiers": ["public"]}}, {"method_name": "testApp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testApp()    {        assertTrue( true );    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/test/java/com/leon/wangwang/AppTest.java", "stars": "1", "class": {"name": "AppTest", "extends": "TestCase", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBind", "params": ["int", "VideoModel"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBind(final int position, VideoModel videoModel) {        //\u589e\u52a0\u5c01\u9762        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        if (position % 2 == 0) {            imageView.setImageResource(R.mipmap.xxx1);        } else {            imageView.setImageResource(R.mipmap.xxx2);        }        if (imageView.getParent() != null) {            ViewGroup viewGroup = (ViewGroup) imageView.getParent();            viewGroup.removeView(imageView);        }        String url;        String title;        if (position % 2 == 0) {            url = \"https://res.exexm.com/cw_145225549855002\";            title = \"\u8fd9\u662ftitle\";        } else {            url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";            title = \"\u54e6\uff1fTitle\uff1f\";        }        Map<String, String> header = new HashMap<>();        header.put(\"ee\", \"33\");        //\u9632\u6b62\u9519\u4f4d\uff0c\u79bb\u5f00\u91ca\u653e        //gsyVideoPlayer.initUIState();        gsyVideoOptionBuilder                .setIsTouchWiget(false)                .setThumbImageView(imageView)                .setUrl(url)                .setVideoTitle(title)                .setCacheWithPlay(false)                .setRotateViewAuto(true)                .setLockLand(true)                .setPlayTag(TAG)                .setMapHeadData(header)                .setShowFullAnimation(true)                .setNeedLockFull(true)                .setPlayPosition(position)                .setVideoAllCallBack(new GSYSampleCallBack() {                    @Override                    public void onPrepared(String url, Object... objects) {                        super.onPrepared(url, objects);                        if (!gsyVideoPlayer.isIfCurrentIsFullscreen()) {                            //\u9759\u97f3                            GSYVideoManager.instance().setNeedMute(true);                        }                    }                    @Override                    public void onQuitFullscreen(String url, Object... objects) {                        super.onQuitFullscreen(url, objects);                        //\u5168\u5c4f\u4e0d\u9759\u97f3                        GSYVideoManager.instance().setNeedMute(true);                    }                    @Override                    public void onEnterFullscreen(String url, Object... objects) {                        super.onEnterFullscreen(url, objects);                        GSYVideoManager.instance().setNeedMute(false);                        gsyVideoPlayer.getCurrentPlayer().getTitleTextView().setText((String)objects[0]);                    }                }).build(gsyVideoPlayer);        //\u589e\u52a0title        gsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);        //\u8bbe\u7f6e\u8fd4\u56de\u952e        gsyVideoPlayer.getBackButton().setVisibility(View.GONE);        //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd        gsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                resolveFullBtn(gsyVideoPlayer);            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/holder/RecyclerItemNormalHolder.java", "stars": "2", "class": {"name": "RecyclerItemNormalHolder", "extends": "RecyclerItemBaseHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveFullBtn", "params": ["StandardGSYVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveFullBtn(final StandardGSYVideoPlayer standardGSYVideoPlayer) {        standardGSYVideoPlayer.startWindowFullscreen(context, true, true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/holder/RecyclerItemNormalHolder.java", "stars": "2", "class": {"name": "RecyclerItemNormalHolder", "extends": "RecyclerItemBaseHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeOldAuditEvents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeOldAuditEvents() {        persistenceAuditEventRepository            .findByAuditEventDateBefore(Instant.now().minus(jHipsterProperties.getAuditEvents().getRetentionPeriod(), ChronoUnit.DAYS))            .forEach(auditEvent -> {                log.debug(\"Deleting audit data {}\", auditEvent);                persistenceAuditEventRepository.delete(auditEvent);            });    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/AuditEventService.java", "stars": "2", "class": {"name": "AuditEventService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAll", "params": ["Pageable"], "throws": null, "modifiers": ["public"], "return_type": "Page<AuditEvent>", "snippet": "    public Page<AuditEvent> findAll(Pageable pageable) {        return persistenceAuditEventRepository.findAll(pageable)            .map(auditEventConverter::convertToAuditEvent);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/AuditEventService.java", "stars": "2", "class": {"name": "AuditEventService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findByDates", "params": ["Instant", "Instant", "Pageable"], "throws": null, "modifiers": ["public"], "return_type": "Page<AuditEvent>", "snippet": "    public Page<AuditEvent> findByDates(Instant fromDate, Instant toDate, Pageable pageable) {        return persistenceAuditEventRepository.findAllByAuditEventDateBetween(fromDate, toDate, pageable)            .map(auditEventConverter::convertToAuditEvent);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/AuditEventService.java", "stars": "2", "class": {"name": "AuditEventService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Optional<AuditEvent>", "snippet": "    public Optional<AuditEvent> find(Long id) {        return persistenceAuditEventRepository.findById(id)            .map(auditEventConverter::convertToAuditEvent);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/AuditEventService.java", "stars": "2", "class": {"name": "AuditEventService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() {    if (p == null) {      throw new RuntimeException(\"Properties is null. Can't continue\");    }    if (checkParamMap(p, DATABASENAME)) {      throw new RuntimeException(\"parameter \" + DATABASENAME + \" can not be empty.\");    }    if(p.getProperty(DATABASENAME).substring(p.getProperty(DATABASENAME).length()-4,p.getProperty(DATABASENAME).length()).equals(\"work\")){      logger.info(\"DATABASENAME: \" + \"work\");    }else if(p.getProperty(DATABASENAME).substring(p.getProperty(DATABASENAME).length()-3,p.getProperty(DATABASENAME).length()).equals(\"int\")){      logger.info(\"DATABASENAME: \" + \"int\");    }else{      throw new RuntimeException(\"DATABASENAME: \" + DATABASENAME + \"is not pointed Hive database\");    }    if (checkParamMap(p, TABELNAME)) {      throw new RuntimeException(\"parameter \" + TABELNAME + \" can not be empty.\");    }    if (checkParamMap(p, PARNAME)) {      throw new RuntimeException(\"parameter \" + PARNAME + \" can not be empty.\");    }    if (checkParamMap(p, URLNAME)) {      throw new RuntimeException(\"parameter \" + URLNAME + \" can not be empty.\");    }    if (checkParamMap(p, CLUSNAME)) {      throw new RuntimeException(\"parameter \" + CLUSNAME + \" can not be empty.\");    }    if (checkParamMap(p, TYPE)) {      throw new RuntimeException(\"parameter \" + TYPE + \" can not be empty.\");    }    logger.info(\"\u8f93\u5165\u53c2\u6570\u68c0\u6d4b\u901a\u8fc7\uff01\");    String HDFSUrl = p.getProperty(DATABASENAME)+p.getProperty(TABELNAME);    getFile(HDFSUrl,p.getProperty(URLNAME));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/Export.java", "stars": "18", "class": {"name": "Export", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancel() throws InterruptedException {    throw new RuntimeException(\"Kill this Export.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/Export.java", "stars": "18", "class": {"name": "Export", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPid", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getPid() {    // get name representing the running Java virtual machine.    String name = ManagementFactory.getRuntimeMXBean().getName();    System.out.println(name);    // get pid    String pid = name.split(\"@\")[0];    logger.info(\"Export Pid is:\" + pid);    return pid;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/Export.java", "stars": "18", "class": {"name": "Export", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkParamMap", "params": ["Properties", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean checkParamMap(Properties p, String key) {    boolean checkFlag = false;    if (!p.containsKey(key)) {//\u5224\u65ad\u53c2\u6570\u662f\u5426\u5b58\u5728      throw new RuntimeException(\"parameter \" + key + \" is empty.\");    }    if (p.containsKey(key)) {//\u5224\u65ad\u53c2\u6570\u662f\u5426\u4e3a\u7a7a\u5b57\u7b26\u4e32      if (StringUtils.isEmpty(p.getProperty(key))) {        checkFlag = true;      }    }//    if (!MESSAGE.equals(key) && StringUtils.contains(p.getProperty(key), \" \")) {//      throw new RuntimeException(\"\u53c2\u6570 \" + key + \" \u4e0d\u80fd\u5305\u542b\u7a7a\u683c !\");//    }//    if (!checkNoStandardStr(p.getProperty(key))) {//      throw new RuntimeException(\"\u53c2\u6570 \" + key + \" \u4e0d\u80fd\u5305\u542b\u5b57\u6bcd\u6570\u5b57_@-\u4ee5\u5916\u7684\u5b57\u7b26 !\");//    }//    if (p.getProperty(key).length() > 200) {//      throw new RuntimeException(\"\u53c2\u6570 \" + key + \" \u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7 200 !\");//    }    return checkFlag;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/Export.java", "stars": "18", "class": {"name": "Export", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isJson", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isJson(String content) {    try {      JSONObject jsonStr = JSONObject.parseObject(content);      logger.info(\"Message is Json Format \");      return true;    } catch (Exception e) {      logger.error(\"Message isn't Json Format \");      return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/Export.java", "stars": "18", "class": {"name": "Export", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFile", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void getFile(String srcFilePath,String destPath) {    Configuration conf = new Configuration();    // \u6e90\u6587\u4ef6\u8def\u5f84    Path srcPath = new Path(srcFilePath);    Path dstPath = new Path(destPath);    try {      // \u83b7\u53d6FileSystem\u5bf9\u8c61      FileSystem fs = FileSystem.get(conf);      // \u4e0b\u8f7dhdfs\u4e0a\u7684\u6587\u4ef6      fs.copyToLocalFile(srcPath, dstPath);      // \u91ca\u653e\u8d44\u6e90      fs.close();    } catch (IOException e) {      logger.error(\"\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/Export.java", "stars": "18", "class": {"name": "Export", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SoftRedSandstoneBlock.java", "stars": "2", "class": {"name": "SoftRedSandstoneBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(SoftRedSandstoneBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SoftRedSandstoneBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SoftRedSandstoneBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startActivity", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void startActivity(Context context, String type) {        Intent intent = new Intent(context, ContainerActivity.class);        intent.putExtra(EXTRA_TYPE, type);        context.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/ContainerActivity.java", "stars": "2", "class": {"name": "ContainerActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        String type = getIntent().getStringExtra(EXTRA_TYPE);        setContentView(LayoutIdUtil.getLayoutId(type));    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/ContainerActivity.java", "stars": "2", "class": {"name": "ContainerActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {/*\t\t// Testing $IntArray$\t\tif (!test_swap()) {\t\t\tSystem.err.println(\"IntArray.swap \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"IntArray.swap \\t\\t\\t [   OK   ]\");\t\tif (!test_vecswap()) {\t\t\tSystem.err.println(\"IntArray.vecswap \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"IntArray.vecswap \\t\\t\\t [   OK   ]\");\t\tif (!test_heapSort()) {\t\t\tSystem.err.println(\"IntArray.heapSort \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"IntArray.heapSort \\t\\t\\t [   OK   ]\");\t\tif (!test_pasteAtPointer()) {\t\t\tSystem.err.println(\"IntArray.pasteAtPointer \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"IntArray.pasteAtPointer \\t\\t\\t [   OK   ]\");\t\tif (!test_incrementElementAt()) {\t\t\tSystem.err.println(\"IntArray.incrementElementAt \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"IntArray.incrementElementAt \\t\\t\\t [   OK   ]\");\t\tif (!test_pushFromRight()) {\t\t\tSystem.err.println(\"IntArray.pushFromRight \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"IntArray.pushFromRight \\t\\t\\t [   OK   ]\");\t\t// Testing $Rank9$\t\tif (!test_rank9()) {\t\t\tSystem.err.println(\"Rank9.rank \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"Rank9.rank \\t\\t\\t [   OK   ]\");\t\t// Testing $HuffmanWaveletTree$\t\tif (!test_huffmanWaveletTree()) {\t\t\tSystem.err.println(\"HuffmanWaveletTree \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"HuffmanWaveletTree \\t\\t\\t [   OK   ]\");\t\t// Testing $Suffixes$\t\tif (!test_sort()) {\t\t\tSystem.err.println(\"Suffixes.sort \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"Suffixes.sort \\t\\t\\t [   OK   ]\");\t\tif (!test_buildLCPArray()) {\t\t\tSystem.err.println(\"Suffixes.buildLCPArray \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"Suffixes.buildLCPArray \\t\\t\\t [   OK   ]\");\t\tif (!test_intervalOfSuffixes()) {\t\t\tSystem.err.println(\"Suffixes.intervalOfSuffixes \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"Suffixes.intervalOfSuffixes \\t\\t\\t [   OK   ]\");\t\tif (!test_buildBinarySearchCache()) {\t\t\tSystem.err.println(\"Suffixes.buildBinarySearchCache \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"Suffixes.buildBinarySearchCache \\t\\t\\t [   OK   ]\");\t\tif (!test_assignSuffixToBlock()) {\t\t\tSystem.err.println(\"Suffixes.assignSuffixToBlock \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"Suffixes.assignSuffixToBlock \\t\\t\\t [   OK   ]\");\t\tif (!test_blockwiseBWT()) {\t\t\tSystem.err.println(\"Suffixes.blockwiseBWT \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"Suffixes.blockwiseBWT \\t\\t\\t [   OK   ]\");\t\t// Testing $Stream$\t\tif (!test_stream()) {\t\t\tSystem.err.println(\"Stream \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"Stream \\t\\t\\t [   OK   ]\");\t\t// Testing $RigidStream$\t\tif (!test_rigidStream()) {\t\t\tSystem.err.println(\"RigidStream \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"RigidStream \\t\\t\\t [   OK   ]\");\t\t// Testing $SimpleStream$\t\tif (!test_simpleStream()) {\t\t\tSystem.err.println(\"SimpleStream \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"SimpleStream \\t\\t\\t [   OK   ]\");\t\t// Testing $Substring$\t\tif (!test_substring()) {\t\t\tSystem.err.println(\"Substring \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"Substring \\t\\t\\t [   OK   ]\");\t\t// Testing $BorderSubstring$\t\tif (!test_borderSubstring()) {\t\t\tSystem.err.println(\"BorderSubstring \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"BorderSubstring \\t\\t\\t [   OK   ]\");\t\t// Testing $SubstringIterator$\t\tif (!test_substringIterator()) {\t\t\tSystem.err.println(\"SubstringIterator \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"SubstringIterator \\t\\t\\t [   OK   ]\");\t\t// Testing $RightMaximalSubstring$\t\tif (!test_rightMaximalSubstring()) {\t\t\tSystem.err.println(\"RightMaximalSubstring \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"RightMaximalSubstring \\t\\t\\t [   OK   ]\");\t\t// Testing $BorderSubstring$\t\tif (!test_rightMaximalSubstringsWithBorder()) {\t\t\tSystem.err.println(\"BorderSubstring \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"BorderSubstring \\t\\t\\t [   OK   ]\");\t\t// Testing $MinimalAbsentWord$ (subsumes a test for maximal repeats)\t\tif (!test_MinimalAbsentWord()) {\t\t\tSystem.err.println(\"TestMinimalAbsentWord \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"TestMinimalAbsentWord \\t\\t\\t [   OK   ]\");*/\t\t// Testing $BernoulliSubstring$\t\tif (!test_BernoulliSubstring()) {\t\t\tSystem.err.println(\"BernoulliSubstring \\t\\t\\t [ FAILED ]\");\t\t\tSystem.exit(1);\t\t}\t\telse System.out.println(\"BernoulliSubstring \\t\\t\\t [   OK   ]\");\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_simpleStream", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_simpleStream() {\t\tfinal int N_ELEMENTS = 10000;\t\tfinal int N_ITERATIONS = 100;\t\tfinal int MAX_INT = 100;\t\tint i, j, k, t, r, b, position, region, cell, offset;\t\tint[] numbers = new int[N_ELEMENTS];\t\tlong nElements, read;\t\tSimpleStream stream = new SimpleStream(Constants.LONGS_PER_REGION);\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (t=0; t<N_ITERATIONS; t++) {\t\t\t// Testing $push$\t\t\tstream.clear(true);\t\t\tnElements=0;\t\t\tfor (i=0; i<N_ELEMENTS; i++) {\t\t\t\tr=random.nextInt(MAX_INT);\t\t\t\tnumbers[i]=r;\t\t\t\tstream.push(r);\t\t\t\tnElements++;\t\t\t}\t\t\tif (stream.nElements()!=nElements) {\t\t\t\tSystem.err.println(\"Error in Stream.push: pushed \"+stream.nElements()+\" elements rather than \"+nElements);\t\t\t\treturn false;\t\t\t}\t\t\tfor (i=0; i<N_ELEMENTS; i++) {\t\t\t\tread=stream.getElementAt(i);\t\t\t\tif (read!=numbers[i]) {\t\t\t\t\tSystem.err.println(\"Error in Stream.push: pushed \"+read+\" rather than \"+numbers[i]+\" at position \"+i);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\t// Testing $pop$\t\t\tnElements=stream.nElements();\t\t\tj=random.nextInt(N_ELEMENTS);\t\t\tfor (i=N_ELEMENTS-1; i>=j; i--) {\t\t\t\tstream.pop();\t\t\t\tnElements--;\t\t\t}\t\t\tif (stream.nElements()!=nElements) {\t\t\t\tSystem.err.println(\"Error in Stream.pop: wrong number of elements popped.\");\t\t\t\treturn false;\t\t\t}\t\t\tfor (i=0; i<j; i++) {\t\t\t\tread=stream.getElementAt(i);\t\t\t\tif (read!=numbers[i]) {\t\t\t\t\tSystem.err.println(\"Error in Stream.read: wrong element popped.\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (i=j; i<N_ELEMENTS; i++) stream.push(numbers[i]);  // Pushing popped values back\t\t\t// Testing $binarySearch$\t\t\tfor (int x=0; x<N_ELEMENTS; x++) numbers[x]=x;\t\t\tstream.clear(true);\t\t\tfor (int x=0; x<N_ELEMENTS; x++) stream.push(numbers[x]);\t\t\tfor (int x=0; x<N_ELEMENTS/2; x++) {\t\t\t\tint p = random.nextInt(N_ELEMENTS);\t\t\t\tint value = numbers[p];\t\t\t\tlong returnedP = stream.binarySearch(0,N_ELEMENTS,value);\t\t\t\tif (returnedP!=p) {\t\t\t\t\tSystem.err.println(\"Error in Stream.binarySearch: returnedPosition=\"+returnedP+\" real position=\"+p);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_rigidStream", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_rigidStream() {\t\tfinal int N_ELEMENTS = 1000000;\t\tfinal int N_ITERATIONS = 100;\t\tfinal int MAX_INT = 100;\t\tfinal int bpi = Utils.closestPowerOfTwo(Utils.log2(MAX_INT));\t\tint i, j, k, t, r, b, position, region, cell, offset;\t\tint[] numbers = new int[N_ELEMENTS];\t\tlong nBits, read;\t\tRigidStream stream = new RigidStream(bpi,Constants.LONGS_PER_REGION);\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (t=0; t<N_ITERATIONS; t++) {\t\t\t// Testing $push$\t\t\tstream.clear(true);\t\t\tnBits=0;\t\t\tfor (i=0; i<N_ELEMENTS; i++) {\t\t\t\tr=random.nextInt(MAX_INT);\t\t\t\tnumbers[i]=r;\t\t\t\tstream.push(r);\t\t\t\tnBits+=bpi;\t\t\t}\t\t\tif (stream.nBits()!=nBits) {\t\t\t\tSystem.err.println(\"Error in Stream.push: pushed \"+stream.nBits()+\" bits rather than \"+nBits);\t\t\t\treturn false;\t\t\t}\t\t\tfor (i=0; i<N_ELEMENTS; i++) {\t\t\t\tread=stream.getElementAt(i);\t\t\t\tif (read!=numbers[i]) {\t\t\t\t\tSystem.err.println(\"Error in Stream.push: pushed \"+read+\" rather than \"+numbers[i]);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\t// Testing $pop$\t\t\tnBits=stream.nBits();\t\t\tj=random.nextInt(N_ELEMENTS);\t\t\tfor (i=N_ELEMENTS-1; i>=j; i--) {\t\t\t\tstream.pop();\t\t\t\tnBits-=bpi;\t\t\t}\t\t\tif (stream.nBits()!=nBits) {\t\t\t\tSystem.err.println(\"Error in Stream.pop: wrong number of bits popped.\");\t\t\t\treturn false;\t\t\t}\t\t\tfor (i=0; i<j; i++) {\t\t\t\tread=stream.getElementAt(i);\t\t\t\tif (read!=numbers[i]) {\t\t\t\t\tSystem.err.println(\"Error in Stream.read: wrong bit sequences popped.\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (i=j; i<N_ELEMENTS; i++) stream.push(numbers[i]);  // Pushing popped values back\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_MinimalAbsentWord", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_MinimalAbsentWord() {\t\tfinal int STRING_LENGTH = 100;\t\tfinal int N_ITERATIONS = 100;\t\tint i, j, k, c, sharpPosition;\t\tint[] alphabet = new int[] {0,1,2,3};\t\tString stringString = new String();\t\tString[] trueSubstringsArray, iteratorSubstringsArray;\t\tIntArray string;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tSubstringIterator iterator;\t\tHashSet<String> trueSubstrings;\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tstringString=\"\";\t\t\tstring.clear();\t\t\tfor (j=0; j<STRING_LENGTH; j++) { \t\t\t\tc=random.nextInt(3); \t\t\t\tstringString+=\"\"+c; \t\t\t\tstring.push(c); \t\t\t}\t\t\t// Trivial enumeration of all distinct minimal absent words\t\t\tboolean isRightMaximal;\t\t\tint position, rightChar, previousRightChar;\t\t\tString tmpString;\t\t\ttrueSubstrings = new HashSet<String>();\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tfor (k=j; k<=STRING_LENGTH; k++) {\t\t\t\t\ttmpString=stringString.substring(j,k);\t\t\t\t\tisRightMaximal=false; position=0; previousRightChar=-1;\t\t\t\t\twhile (true) {\t\t\t\t\t\tposition=stringString.indexOf(tmpString,position);\t\t\t\t\t\tif (position==-1) break;\t\t\t\t\t\tif (position+tmpString.length()==STRING_LENGTH) rightChar=Integer.MAX_VALUE;\t\t\t\t\t\telse rightChar=stringString.charAt(position+tmpString.length());\t\t\t\t\t\tif (previousRightChar!=-1 && rightChar!=previousRightChar) {\t\t\t\t\t\t\tisRightMaximal=true;\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t\tpreviousRightChar=rightChar;\t\t\t\t\t\tposition++;\t\t\t\t\t}\t\t\t\t\tif (isRightMaximal) {\t\t\t\t\t\t// Maximal repeats\t\t\t\t\t\tboolean isLeftMaximal = false;\t\t\t\t\t\tint leftChar;\t\t\t\t\t\tint previousLeftChar = -1;\t\t\t\t\t\tposition=0;\t\t\t\t\t\twhile (true) {\t\t\t\t\t\t\tposition=stringString.indexOf(tmpString,position);\t\t\t\t\t\t\tif (position<0) break;\t\t\t\t\t\t\tif (position==0) leftChar=Integer.MAX_VALUE;\t\t\t\t\t\t\telse leftChar=stringString.charAt(position-1);\t\t\t\t\t\t\tif (previousLeftChar!=-1 && leftChar!=previousLeftChar) {\t\t\t\t\t\t\t\tisLeftMaximal=true;\t\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t\t}\t\t\t\t\t\t\tpreviousLeftChar=leftChar;\t\t\t\t\t\t\tposition++;\t\t\t\t\t\t}\t\t\t\t\t\tif (isLeftMaximal) {\t\t\t\t\t\t\t// Minimal absent words\t\t\t\t\t\t\tfor (int x=0; x<alphabet.length; x++) {\t\t\t\t\t\t\t\tfor (int y=0; y<alphabet.length; y++) {\t\t\t\t\t\t\t\t\tif ( stringString.indexOf(x+\"\"+tmpString+\"\"+y)<0 &&\t\t\t\t\t\t\t\t\t\t stringString.indexOf(x+\"\"+tmpString)>=0 &&\t\t\t\t\t\t\t\t\t\t stringString.indexOf(tmpString+\"\"+y)>=0 ) trueSubstrings.add(x+\"\"+tmpString+\"\"+y);\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\ttrueSubstringsArray = new String[trueSubstrings.size()];\t\t\ttrueSubstrings.toArray(trueSubstringsArray);\t\t\tArrays.sort(trueSubstringsArray);//System.out.println(\"Trivial enumeration completed: \"+trueSubstringsArray.length+\" distinct substrings:\");//for (int x=0; x<trueSubstringsArray.length; x++) System.out.println(trueSubstringsArray[x]);\t\t\t// Running $SubstringIterator$\t\t\tConstants.N_THREADS=2;\t\t\tConstants.MAX_MEMORY=10;\t\t\titeratorSubstrings = new HashSet<String>();\t\t\titerator = new SubstringIterator(string,alphabet,4,new TestMinimalAbsentWord(4,Utils.log2(4),Utils.bitsToEncode(4),STRING_LENGTH+1,Utils.log2(STRING_LENGTH+1),Utils.bitsToEncode(STRING_LENGTH+1),stringString));\t\t\tSystem.out.print(\"(\");\t\t\titerator.run();\t\t\tSystem.out.print(\")\");\t\t\titeratorSubstringsArray = new String[iteratorSubstrings.size()];\t\t\titeratorSubstrings.toArray(iteratorSubstringsArray);\t\t\tArrays.sort(iteratorSubstringsArray);//System.out.println(\"SubstringIterator enumeration completed: \");//for (int x=0; x<iteratorSubstringsArray.length; x++) System.out.println(iteratorSubstringsArray[x]);\t\t\t// Tests\t\t\tif (iteratorSubstrings.size()!=trueSubstrings.size()) {\t\t\t\tSystem.out.println(\"Error in MinimalAbsentSubstring: correct total substrings=\"+trueSubstrings.size()+\" enumerated=\"+iteratorSubstrings.size());\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\treturn false;\t\t\t}\t\t\tfor (int x=0; x<iteratorSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(trueSubstringsArray,iteratorSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in MinimalAbsentSubstring: the enumerated substring \"+iteratorSubstringsArray[x]+\" does not exist.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (int x=0; x<trueSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(iteratorSubstringsArray,trueSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in MinimalAbsentSubstring: substring \"+trueSubstringsArray[x]+\" in the string has not been enumerated.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_BernoulliSubstring", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_BernoulliSubstring() {\t\tfinal int STRING_LENGTH = 1000;\t\tfinal int N_ITERATIONS = 100;\t\tint i, j, k, c, sharpPosition;\t\tint[] alphabet = new int[] {0,1,2,3};\t\tString stringString = new String();\t\tString[] trueSubstringsArray, iteratorSubstringsArray;\t\tIntArray string;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tSubstringIterator iterator;\t\tHashSet<String> trueSubstrings;\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tstringString=\"\";\t\t\tstring.clear();\t\t\tfor (j=0; j<STRING_LENGTH; j++) { \t\t\t\tc=random.nextInt(3); \t\t\t\tstringString+=\"\"+c; \t\t\t\tstring.push(c); \t\t\t}\t\t\t// Trivial enumeration of all distinct right-maximal substrings\t\t\tboolean isRightMaximal;\t\t\tint position, rightChar, previousRightChar;\t\t\tString tmpString;\t\t\ttrueSubstrings = new HashSet<String>();\t\t\ttrueSubstrings.add(\"\");  // Adding $\\epsilon$\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tfor (k=j+1; k<=STRING_LENGTH; k++) {\t\t\t\t\ttmpString=stringString.substring(j,k);\t\t\t\t\tisRightMaximal=false; position=0; previousRightChar=-1;\t\t\t\t\twhile (true) {\t\t\t\t\t\tposition=stringString.indexOf(tmpString,position);\t\t\t\t\t\tif (position==-1) break;\t\t\t\t\t\tif (position+tmpString.length()==STRING_LENGTH) rightChar=Integer.MAX_VALUE;\t\t\t\t\t\telse rightChar=stringString.charAt(position+tmpString.length());\t\t\t\t\t\tif (previousRightChar!=-1 && rightChar!=previousRightChar) {\t\t\t\t\t\t\tisRightMaximal=true;\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t\tpreviousRightChar=rightChar;\t\t\t\t\t\tposition++;\t\t\t\t\t}\t\t\t\t\tif (isRightMaximal) trueSubstrings.add(tmpString);\t\t\t\t}\t\t\t}\t\t\ttrueSubstringsArray = new String[trueSubstrings.size()];\t\t\ttrueSubstrings.toArray(trueSubstringsArray);\t\t\tArrays.sort(trueSubstringsArray);//System.out.println(\"Trivial enumeration completed: \"+trueSubstringsArray.length+\" distinct right-maximal strings:\");//for (int x=0; x<trueSubstringsArray.length; x++) System.out.println(trueSubstringsArray[x]);\t\t\t// Running $SubstringIterator$\t\t\tConstants.N_THREADS=2;\t\t\tConstants.MAX_MEMORY=10;\t\t\titeratorSubstrings = new HashSet<String>();\t\t\titerator = new SubstringIterator(string,alphabet,4,new TestBernoulliSubstring(4,Utils.log2(4),Utils.bitsToEncode(4),STRING_LENGTH+1,Utils.log2(STRING_LENGTH+1),Utils.bitsToEncode(STRING_LENGTH+1),stringString));\t\t\tSystem.out.print(\"(\");\t\t\titerator.run();\t\t\tSystem.out.print(\")\");\t\t\titeratorSubstringsArray = new String[iteratorSubstrings.size()];\t\t\titeratorSubstrings.toArray(iteratorSubstringsArray);\t\t\tArrays.sort(iteratorSubstringsArray);//System.out.println(\"SubstringIterator enumeration completed: \");//for (int x=0; x<iteratorSubstringsArray.length; x++) System.out.println(iteratorSubstringsArray[x]);\t\t\t// Tests\t\t\tif (iteratorSubstrings.size()!=trueSubstrings.size()) {\t\t\t\tSystem.out.println(\"Error in BernoulliSubstring: correct total right-maximal substrings=\"+trueSubstrings.size()+\" enumerated=\"+iteratorSubstrings.size());\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\treturn false;\t\t\t}\t\t\tfor (int x=0; x<iteratorSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(trueSubstringsArray,iteratorSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in BernoulliSubstring: the enumerated right-maximal substring \"+iteratorSubstringsArray[x]+\" does not exist.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (int x=0; x<trueSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(iteratorSubstringsArray,trueSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in BernoulliSubstring: right-maximal substring \"+trueSubstringsArray[x]+\" in the string has not been enumerated.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_rightMaximalSubstringsWithBorder", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_rightMaximalSubstringsWithBorder() {\t\tfinal int STRING_LENGTH = 100;\t\tfinal int N_ITERATIONS = 100;\t\tint i, j, k, c, sharpPosition;\t\tint[] alphabet = new int[] {0,1,2,3};\t\tString stringString = new String();\t\tString[] trueSubstringsArray;\t\tStringWithBorder[] iteratorSubstringsArray;\t\tIntArray string;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tSubstringIterator iterator;\t\tHashSet<String> trueSubstrings;\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tstringString=\"\";\t\t\tstring.clear();\t\t\tfor (j=0; j<STRING_LENGTH; j++) { \t\t\t\tc=random.nextInt(4); \t\t\t\tstringString+=\"\"+c; \t\t\t\tstring.push(c); \t\t\t}/*String zString = \"03033331\";stringString+=zString;for (j=0; j<zString.length(); j++) string.push(Integer.parseInt(zString.substring(j,j+1)));System.out.println(\"string.length()=\"+string.length()+\" string: \"+stringString+\" bitsToEncodeBWTLength=\"+Utils.bitsToEncode(STRING_LENGTH+1));*/\t\t\t// Trivial enumeration of all distinct right-maximal substrings\t\t\tboolean isRightMaximal;\t\t\tint position, rightChar, previousRightChar;\t\t\tString tmpString;\t\t\ttrueSubstrings = new HashSet<String>();\t\t\ttrueSubstrings.add(\"\");  // Adding $\\epsilon$\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tfor (k=j+1; k<=STRING_LENGTH; k++) {\t\t\t\t\ttmpString=stringString.substring(j,k);\t\t\t\t\tisRightMaximal=false; position=0; previousRightChar=-1;\t\t\t\t\twhile (true) {\t\t\t\t\t\tposition=stringString.indexOf(tmpString,position);\t\t\t\t\t\tif (position==-1) break;\t\t\t\t\t\tif (position+tmpString.length()==STRING_LENGTH) rightChar=Integer.MAX_VALUE;\t\t\t\t\t\telse rightChar=stringString.charAt(position+tmpString.length());\t\t\t\t\t\tif (previousRightChar!=-1 && rightChar!=previousRightChar) {\t\t\t\t\t\t\tisRightMaximal=true;\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t\tpreviousRightChar=rightChar;\t\t\t\t\t\tposition++;\t\t\t\t\t}\t\t\t\t\tif (isRightMaximal) trueSubstrings.add(tmpString);\t\t\t\t}\t\t\t}\t\t\ttrueSubstringsArray = new String[trueSubstrings.size()];\t\t\ttrueSubstrings.toArray(trueSubstringsArray);\t\t\tArrays.sort(trueSubstringsArray);//System.out.println(\"Trivial enumeration completed: \"+trueSubstringsArray.length+\" distinct right-maximal strings:\");//for (int x=0; x<trueSubstringsArray.length; x++) System.out.println(trueSubstringsArray[x]);\t\t\t// Running $SubstringIterator$\t\t\tConstants.N_THREADS=2;\t\t\tConstants.MAX_MEMORY=10;\t\t\titeratorSubstringsWithBorder = new HashSet<StringWithBorder>();\t\t\titerator = new SubstringIterator(string,alphabet,4,new TestBorderSubstring(4,Utils.log2(4),Utils.bitsToEncode(4),STRING_LENGTH+1,Utils.log2(STRING_LENGTH+1),Utils.bitsToEncode(STRING_LENGTH+1),stringString));\t\t\tSystem.out.print(\"(\");\t\t\titerator.run();\t\t\tSystem.out.print(\")\");\t\t\titeratorSubstringsArray = new StringWithBorder[iteratorSubstringsWithBorder.size()];\t\t\titeratorSubstringsWithBorder.toArray(iteratorSubstringsArray);\t\t\tArrays.sort(iteratorSubstringsArray);//System.out.println(\"SubstringIterator enumeration completed: \");//for (int x=0; x<iteratorSubstringsArray.length; x++) System.out.println(iteratorSubstringsArray[x]);\t\t\t// Tests\t\t\tif (iteratorSubstringsWithBorder.size()!=trueSubstrings.size()) {\t\t\t\tSystem.out.println(\"Error in BorderSubstring: correct total right-maximal substrings=\"+trueSubstrings.size()+\" enumerated=\"+iteratorSubstringsWithBorder.size());\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\treturn false;\t\t\t}\t\t\tfor (int x=0; x<iteratorSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(trueSubstringsArray,iteratorSubstringsArray[x].string)<0) {\t\t\t\t\tSystem.out.println(\"Error in BorderSubstring: the enumerated right-maximal substring \"+iteratorSubstringsArray[x].string+\" does not exist.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (int x=0; x<trueSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(iteratorSubstringsArray,trueSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in BorderSubstring: right-maximal substring \"+trueSubstringsArray[x]+\" in the string has not been enumerated.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\t// Checking border lengths\t\t\tfor (int x=0; x<iteratorSubstringsArray.length; x++) {\t\t\t\tint ell = iteratorSubstringsArray[x].string.length();\t\t\t\tif (ell==0) continue;\t\t\t\tfor (int a=1; a<ell; a++) {\t\t\t\t\tboolean complete = true;\t\t\t\t\tfor (int b=0; b<ell-a; b++) {\t\t\t\t\t\tif (iteratorSubstringsArray[x].string.charAt(b)!=iteratorSubstringsArray[x].string.charAt(a+b)) {\t\t\t\t\t\t\tcomplete=false;\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tif (complete) {\t\t\t\t\t\tif (iteratorSubstringsArray[x].border!=ell-a) {\t\t\t\t\t\t\tSystem.err.println(\"String \"+iteratorSubstringsArray[x].string+\" has border \"+(ell-a)+\", but iterator reports border \"+iteratorSubstringsArray[x].border);\t\t\t\t\t\t\treturn false;\t\t\t\t\t\t}\t\t\t\t\t\tif (iteratorSubstringsArray[x].rightCharacter!=Integer.parseInt(\"\"+iteratorSubstringsArray[x].string.charAt(a-1))) {\t\t\t\t\t\t\tSystem.err.println(\"String \"+iteratorSubstringsArray[x].string+\" has right character \"+(iteratorSubstringsArray[x].string.charAt(a-1))+\", but iterator reports right character \"+iteratorSubstringsArray[x].rightCharacter);\t\t\t\t\t\t\treturn false;\t\t\t\t\t\t}/*\t\t\t\t\t\tif (iteratorSubstringsArray[x].leftCharacter!=Integer.parseInt(\"\"+iteratorSubstringsArray[x].string.charAt(ell-a))) {\t\t\t\t\t\t\tSystem.err.println(\"String \"+iteratorSubstringsArray[x].string+\" has left character \"+(iteratorSubstringsArray[x].string.charAt(ell-a))+\", but iterator reports left character \"+iteratorSubstringsArray[x].leftCharacter);\t\t\t\t\t\t\treturn false;\t\t\t\t\t\t}*/\t\t\t\t\t\tbreak;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_borderSubstring", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_borderSubstring() {\t\tfinal int N_ELEMENTS = 1000;\t\tfinal int N_ITERATIONS = 100;\t\tfinal int N_TESTS = 100;\t\tint i, j, t, index;\t\tlong previous;\t\tint[] extensionBuffer = new int[4+1];\t\tfor (i=0; i<=4; i++) extensionBuffer[i]=-1;\t\tBorderSubstring[] substrings = new BorderSubstring[N_ELEMENTS];\t\tStream stack = new Stream(512);\t\tRigidStream characterStack = new RigidStream(2,2);\t\tSimpleStream pointerStack = new SimpleStream(2);\t\tBorderSubstring w = new BorderSubstring(4,Utils.log2(4),Utils.bitsToEncode(4),N_ELEMENTS+1,Utils.log2(N_ELEMENTS+1),Utils.bitsToEncode(N_ELEMENTS+1));\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (t=0; t<N_ITERATIONS; t++) {\t\t\t// Pushing random $BorderSubstring$ objects on the stack\t\t\tstack.clear(true); stack.setPosition(0L);\t\t\tcharacterStack.clear(true); pointerStack.clear(true);\t\t\tprevious=0;\t\t\tsubstrings[0] = (BorderSubstring)(w.getEpsilon(new long[4]));  // $\\epsilon$\t\t\tfor (i=0; i<substrings[0].nIntervals; i++) {\t\t\t\tsubstrings[0].bwtIntervals[i][0]=0;\t\t\t\tsubstrings[0].bwtIntervals[i][1]=0;\t\t\t}\t\t\tsubstrings[0].hasBeenExtended=true;\t\t\tsubstrings[0].push(stack,null);\t\t\tfor (i=1; i<N_ELEMENTS; i++) {\t\t\t\tsubstrings[i] = (BorderSubstring)(w.getInstance());\t\t\t\tsubstrings[i].bwtIntervals[0][0]=random.nextInt(N_ELEMENTS);\t\t\t\tdo { substrings[i].bwtIntervals[0][1]=random.nextInt(N_ELEMENTS); }\t\t\t\twhile (substrings[i].bwtIntervals[0][1]<substrings[i].bwtIntervals[0][0]);\t\t\t\tsubstrings[i].previousAddress=previous;\t\t\t\tsubstrings[i].hasBeenExtended=random.nextBoolean();\t\t\t\tfor (j=i-1; j>=0; j--) {\t\t\t\t\tif (substrings[j].hasBeenExtended) {\t\t\t\t\t\tsubstrings[j].fillBuffer(extensionBuffer,true);\t\t\t\t\t\tsubstrings[i].initAfterExtending(substrings[j],random.nextInt(4),characterStack,extensionBuffer);\t\t\t\t\t\tif (substrings[i].hasBeenExtended) substrings[i].initAfterReading(stack,characterStack,pointerStack,null);\t\t\t\t\t\tsubstrings[j].emptyBuffer(extensionBuffer,true);\t\t\t\t\t\tbreak;\t\t\t\t\t}\t\t\t\t}\t\t\t\tsubstrings[i].push(stack,null);\t\t\t\tprevious=substrings[i].address;\t\t\t}\t\t\t// Testing $read$\t\t\tfor (i=0; i<N_TESTS; i++) {\t\t\t\tindex=random.nextInt(N_ELEMENTS);\t\t\t\tstack.setPosition(substrings[index].address);\t\t\t\tw.read(stack,null,false,false,false);\t\t\t\tif (!w.equals(substrings[index])) {\t\t\t\t\tSystem.err.println(\"Error in reading \"+index+\"th string. Real string:\");\t\t\t\t\tSystem.err.println(substrings[index]);\t\t\t\t\tSystem.err.println(\"nRight=\"+substrings[index].nRight);\t\t\t\t\tSystem.out.println(\"Read string:\");\t\t\t\t\tSystem.err.println(w);\t\t\t\t\tSystem.err.println(\"nRight=\"+w.nRight);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\tstack.setPosition(substrings[index].address);\t\t\t\tw.read(stack,null,true,true,true);\t\t\t\tif (w.frequency()==0||!w.equals(substrings[index])) {\t\t\t\t\tSystem.err.println(\"Error in readFast\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\t// Testing $pop$\t\t\tfor (i=0; i<N_TESTS; i++) {\t\t\t\tindex=random.nextInt(N_ELEMENTS);\t\t\t\tstack.setPosition(substrings[N_ELEMENTS-1].address);\t\t\t\tfor (j=N_ELEMENTS-1; j>index; j--) substrings[j].pop(stack,null);\t\t\t\tif (stack.getPosition()!=substrings[index].address) {\t\t\t\t\tSystem.err.println(\"Error in pop\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\tw.read(stack,null,false,false,false);\t\t\t\tif (!w.equals(substrings[index])) {\t\t\t\t\tSystem.err.println(\"Error in pop\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\t// Pushing back the remaining substrings\t\t\t\tfor (j=index+1; j<N_ELEMENTS; j++) substrings[j].push(stack,null);\t\t\t}/*\t\t\t// Testing $skip$\t\t\tfor (i=0; i<N_TESTS; i++) {\t\t\t\tindex=random.nextInt(N_ELEMENTS-1);\t\t\t\tstack.setPosition(substrings[index].stackPointers[0]);\t\t\t\tsubstrings[index].skip(stack);\t\t\t\tif (stack.getPosition()!=substrings[index+1].stackPointers[0]) {\t\t\t\t\tSystem.err.println(\"Error in skip. Reported position: \"+stack.getPosition()+\" correct position: \"+substrings[index+1].stackPointers[0]);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}*/\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_rightMaximalSubstring", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_rightMaximalSubstring() {\t\tfinal int STRING_LENGTH = 100;\t\tfinal int N_ITERATIONS = 100;\t\tint i, j, k, c, sharpPosition;\t\tint[] alphabet = new int[] {0,1,2,3};\t\tString stringString = new String();\t\tString[] trueSubstringsArray, iteratorSubstringsArray;\t\tIntArray string;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tSubstringIterator iterator;\t\tHashSet<String> trueSubstrings;\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tstringString=\"\";\t\t\tstring.clear();\t\t\tfor (j=0; j<STRING_LENGTH; j++) { \t\t\t\tc=random.nextInt(3); \t\t\t\tstringString+=\"\"+c; \t\t\t\tstring.push(c); \t\t\t}//stringString=\"2131313\";//for (j=0; j<stringString.length(); j++) string.push(Integer.parseInt(stringString.substring(j,j+1)));\t\t\t// Trivial enumeration of all distinct right-maximal substrings\t\t\tboolean isRightMaximal;\t\t\tint position, rightChar, previousRightChar;\t\t\tString tmpString;\t\t\ttrueSubstrings = new HashSet<String>();\t\t\ttrueSubstrings.add(\"\");  // Adding $\\epsilon$\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tfor (k=j+1; k<=STRING_LENGTH; k++) {\t\t\t\t\ttmpString=stringString.substring(j,k);\t\t\t\t\tisRightMaximal=false; position=0; previousRightChar=-1;\t\t\t\t\twhile (true) {\t\t\t\t\t\tposition=stringString.indexOf(tmpString,position);\t\t\t\t\t\tif (position==-1) break;\t\t\t\t\t\tif (position+tmpString.length()==STRING_LENGTH) rightChar=Integer.MAX_VALUE;\t\t\t\t\t\telse rightChar=stringString.charAt(position+tmpString.length());\t\t\t\t\t\tif (previousRightChar!=-1 && rightChar!=previousRightChar) {\t\t\t\t\t\t\tisRightMaximal=true;\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t\tpreviousRightChar=rightChar;\t\t\t\t\t\tposition++;\t\t\t\t\t}\t\t\t\t\tif (isRightMaximal) trueSubstrings.add(tmpString);\t\t\t\t}\t\t\t}\t\t\ttrueSubstringsArray = new String[trueSubstrings.size()];\t\t\ttrueSubstrings.toArray(trueSubstringsArray);\t\t\tArrays.sort(trueSubstringsArray);//System.out.println(\"Trivial enumeration completed: \"+trueSubstringsArray.length+\" distinct right-maximal strings:\");//for (int x=0; x<trueSubstringsArray.length; x++) System.out.println(trueSubstringsArray[x]);// Building BWT for reporting/*IntArray bwt = new IntArray(STRING_LENGTH+1,2,true);sharpPosition=(int)(Suffixes.blockwiseBWT(string,alphabet,4,2,2,bwt,null,null,null,null,null));System.out.print(\"BWT: \");for (int x=0; x<STRING_LENGTH+1; x++) System.out.print(bwt.getElementAt(x)+\"\");System.out.println();*/\t\t\t// Running $SubstringIterator$\t\t\tConstants.N_THREADS=2;\t\t\tConstants.MAX_MEMORY=10;\t\t\titeratorSubstrings = new HashSet<String>();\t\t\titerator = new SubstringIterator(string,alphabet,4,new TestRightMaximalSubstring(4,Utils.log2(4),Utils.bitsToEncode(2),STRING_LENGTH+1,Utils.log2(STRING_LENGTH+1),Utils.bitsToEncode(STRING_LENGTH+1),stringString));\t\t\tSystem.out.print(\"(\");\t\t\titerator.run();\t\t\tSystem.out.print(\")\");\t\t\titeratorSubstringsArray = new String[iteratorSubstrings.size()];\t\t\titeratorSubstrings.toArray(iteratorSubstringsArray);\t\t\tArrays.sort(iteratorSubstringsArray);//System.out.println(\"SubstringIterator enumeration completed: \");//for (int x=0; x<iteratorSubstringsArray.length; x++) System.out.println(iteratorSubstringsArray[x]);\t\t\t// Tests\t\t\tif (iteratorSubstrings.size()!=trueSubstrings.size()) {\t\t\t\tSystem.out.println(\"Error in RightMaximalSubstring: correct total right-maximal substrings=\"+trueSubstrings.size()+\" enumerated=\"+iteratorSubstrings.size());\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\treturn false;\t\t\t}\t\t\tfor (int x=0; x<iteratorSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(trueSubstringsArray,iteratorSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in RightMaximalSubstring: the enumerated right-maximal substring \"+iteratorSubstringsArray[x]+\" does not exist.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (int x=0; x<trueSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(iteratorSubstringsArray,trueSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in RightMaximalSubstring: right-maximal substring \"+trueSubstringsArray[x]+\" in the string has not been enumerated.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_substringIterator", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_substringIterator() {\t\tfinal int STRING_LENGTH = 100;\t\tfinal int N_ITERATIONS = 100;\t\tint i, j, k, c, sharpPosition;\t\tint[] alphabet = new int[] {0,1,2,3};\t\tString stringString = new String();\t\tString[] trueSubstringsArray, iteratorSubstringsArray;\t\tIntArray string;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tSubstringIterator iterator;\t\tHashSet<String> trueSubstrings;\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tstringString=\"\";\t\t\tstring.clear(); \t\t\tfor (j=0; j<STRING_LENGTH; j++) { \t\t\t\tc=random.nextInt(3); \t\t\t\tstringString+=\"\"+c; \t\t\t\tstring.push(c); \t\t\t}\t\t\t// Trivial enumeration of all distinct substrings\t\t\ttrueSubstrings = new HashSet<String>();\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tfor (k=j+1; k<=STRING_LENGTH; k++) trueSubstrings.add(stringString.substring(j,k));\t\t\t}\t\t\tfor (k=1; k<=STRING_LENGTH; k++) trueSubstrings.add(\"#\"+stringString.substring(0,k));\t\t\ttrueSubstrings.add(\"#\");\t\t\ttrueSubstringsArray = new String[trueSubstrings.size()];\t\t\ttrueSubstrings.toArray(trueSubstringsArray);\t\t\tArrays.sort(trueSubstringsArray);//System.out.println(\"Trivial enumeration completed: \"+trueSubstringsArray.length+\" distinct strings:\");//for (int x=0; x<trueSubstringsArray.length; x++) System.out.println(trueSubstringsArray[x]);\t\t\t// Building BWT for reporting\t\t\tIntArray bwt = new IntArray(STRING_LENGTH+1,2,true);\t\t\tsharpPosition=(int)(Suffixes.blockwiseBWT(string,alphabet,4,2,2,bwt,null,null,null,null,null));//System.out.println(\"BWT: \"); bwt.print(); System.out.println();/*\t\t\t// Running $SubstringIterator$ with one thread\t\t\tConstants.N_THREADS=1;\t\t\tConstants.MAX_MEMORY=10;\t\t\titeratorSubstrings = new HashSet<String>();\t\t\titerator = new SubstringIterator(string,alphabet,4,new TestSubstring(4,2,STRING_LENGTH+1,Utils.log2(STRING_LENGTH+1),stringString));\t\t\titerator.run();\t\t\titeratorSubstringsArray = new String[iteratorSubstrings.size()];\t\t\titeratorSubstrings.toArray(iteratorSubstringsArray);\t\t\tArrays.sort(iteratorSubstringsArray);//System.out.println(\"SubstringIterator enumeration completed: \");//for (int x=0; x<iteratorSubstringsArray.length; x++) System.out.println(iteratorSubstringsArray[x]);\t\t\t// Tests\t\t\tif (iteratorSubstrings.size()!=trueSubstrings.size()) {\t\t\t\tSystem.out.println(\"Error in SubstringIterator with one thread: correct total substrings=\"+trueSubstrings.size()+\" enumerated=\"+iteratorSubstrings.size());\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\treturn false;\t\t\t}\t\t\tfor (int x=0; x<iteratorSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(trueSubstringsArray,iteratorSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in SubstringIterator with one thread: the enumerated substring \"+iteratorSubstringsArray[x]+\" does not exist.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (int x=0; x<trueSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(iteratorSubstringsArray,trueSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in SubstringIterator with one thread: substring \"+trueSubstringsArray[x]+\" in the string has not been enumerated.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}*/\t\t\t// Running $SubstringIterator$ with multiple threads\t\t\tConstants.N_THREADS=2;\t\t\tConstants.MAX_MEMORY=10;\t\t\titeratorSubstrings = new HashSet<String>();\t\t\titerator = new SubstringIterator(string,alphabet,4,new TestSubstring(4,Utils.log2(4),Utils.bitsToEncode(4),STRING_LENGTH+1,Utils.log2(STRING_LENGTH+1),Utils.bitsToEncode(STRING_LENGTH+1),stringString));\t\t\tSystem.out.print(\"(\");\t\t\titerator.run();\t\t\tSystem.out.print(\")\");\t\t\titeratorSubstringsArray = new String[iteratorSubstrings.size()];\t\t\titeratorSubstrings.toArray(iteratorSubstringsArray);\t\t\tArrays.sort(iteratorSubstringsArray);//System.out.println(\"SubstringIterator enumeration completed: \");//for (int x=0; x<iteratorSubstringsArray.length; x++) System.out.println(iteratorSubstringsArray[x]);\t\t\t// Tests\t\t\tif (iteratorSubstrings.size()!=trueSubstrings.size()) {\t\t\t\tSystem.out.println(\"Error in SubstringIterator with two threads: correct total substrings=\"+trueSubstrings.size()+\" enumerated=\"+iteratorSubstrings.size());\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\treturn false;\t\t\t}\t\t\tfor (int x=0; x<iteratorSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(trueSubstringsArray,iteratorSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in SubstringIterator with two threads: the enumerated substring \"+iteratorSubstringsArray[x]+\" does not exist.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (int x=0; x<trueSubstringsArray.length; x++) {\t\t\t\tif (Arrays.binarySearch(iteratorSubstringsArray,trueSubstringsArray[x])<0) {\t\t\t\t\tSystem.out.println(\"Error in SubstringIterator with two threads: substring \"+trueSubstringsArray[x]+\" in the string has not been enumerated.\");\t\t\t\t\tSystem.out.println(\"string: \"+stringString);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_substring", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_substring() {\t\tfinal int N_ELEMENTS = 10000;\t\tfinal int N_ITERATIONS = 100;\t\tfinal int N_TESTS = 1000;\t\tint i, j, t, index;\t\tlong previous;\t\tint[] extensionBuffer = new int[4+1];\t\tfor (i=0; i<=4; i++) extensionBuffer[i]=-1;\t\tSubstring[] substrings = new Substring[N_ELEMENTS];\t\tStream stack = new Stream(512);\t\tRigidStream characterStack = new RigidStream(2,2);\t\tSimpleStream pointerStack = new SimpleStream(2);\t\tSubstring w = new Substring(4,Utils.log2(4),Utils.bitsToEncode(4),N_ELEMENTS+1,Utils.log2(N_ELEMENTS+1),Utils.bitsToEncode(N_ELEMENTS+1));\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (t=0; t<N_ITERATIONS; t++) {\t\t\t// Pushing random $Substring$ objects on the stack\t\t\tstack.clear(true); stack.setPosition(0L);\t\t\tcharacterStack.clear(true); pointerStack.clear(true);\t\t\tsubstrings[0] = w.getEpsilon(new long[0]);\t\t\tsubstrings[0].push(stack,null);\t\t\tprevious=0L;\t\t\tfor (i=1; i<N_ELEMENTS; i++) {\t\t\t\tsubstrings[i] = new Substring(4,Utils.log2(4),Utils.bitsToEncode(4),N_ELEMENTS+1,Utils.log2(N_ELEMENTS+1),Utils.bitsToEncode(N_ELEMENTS+1));\t\t\t\tsubstrings[i].bwtIntervals[0][0]=random.nextInt(N_ELEMENTS);\t\t\t\tdo { substrings[i].bwtIntervals[0][1]=random.nextInt(N_ELEMENTS); }\t\t\t\twhile (substrings[i].bwtIntervals[0][1]<substrings[i].bwtIntervals[0][0]);\t\t\t\tsubstrings[i].previousAddress=previous;\t\t\t\tsubstrings[i].initAfterExtending(substrings[random.nextInt(i)],random.nextInt(4),characterStack,extensionBuffer);\t\t\t\tsubstrings[i].hasBeenExtended=random.nextBoolean();\t\t\t\tsubstrings[i].push(stack,null);\t\t\t\tprevious=substrings[i].address;\t\t\t}\t\t\t// Testing $read$\t\t\tfor (i=0; i<N_TESTS; i++) {\t\t\t\tindex=random.nextInt(N_ELEMENTS);\t\t\t\tstack.setPosition(substrings[index].address);\t\t\t\tw.read(stack,null,false,false,false);\t\t\t\tif (w.frequency()==0||!w.equals(substrings[index])) {\t\t\t\t\tSystem.err.println(\"Error in read\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\tstack.setPosition(substrings[index].address);\t\t\t\tw.read(stack,null,true,true,true);\t\t\t\tif (w.frequency()==0||!w.equals(substrings[index])) {\t\t\t\t\tSystem.err.println(\"Error in readFast\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\t// Testing $pop$\t\t\tfor (i=0; i<N_TESTS; i++) {\t\t\t\tindex=random.nextInt(N_ELEMENTS);\t\t\t\tstack.setPosition(substrings[N_ELEMENTS-1].address);\t\t\t\tfor (j=N_ELEMENTS-1; j>index; j--) substrings[j].pop(stack,null);\t\t\t\tif (stack.getPosition()!=substrings[index].address) {\t\t\t\t\tSystem.err.println(\"Error in pop\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\tw.read(stack,null,false,false,false);\t\t\t\tif (!w.equals(substrings[index])) {\t\t\t\t\tSystem.err.println(\"Error in pop\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\t// Pushing back the remaining substrings\t\t\t\tfor (j=index+1; j<N_ELEMENTS; j++) substrings[j].push(stack,null);\t\t\t}/*\t\t\t// Testing $skip$\t\t\tfor (i=0; i<N_TESTS; i++) {\t\t\t\tindex=random.nextInt(N_ELEMENTS-1);\t\t\t\tstack.setPosition(substrings[index].stackPointers[0]);\t\t\t\tsubstrings[index].skip(stack);\t\t\t\tif (stack.getPosition()!=substrings[index+1].stackPointers[0]) {\t\t\t\t\tSystem.err.println(\"Error in skip from position \"+substrings[index].stackPointers[0]+\" (log2address=\"+substrings[index].log2address+\", nPointers=\"+substrings[index].nPointers+\"). Reported position: \"+stack.getPosition()+\" correct position: \"+substrings[index+1].stackPointers[0]);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}*/\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_stream", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_stream() {\t\tfinal int N_ELEMENTS = 14782125;\t\tfinal int N_ITERATIONS = 100;\t\tfinal int MAX_INT = 14782125;\t\tint i, j, k, t, r, b, position, region, cell, offset;\t\tint[] numbers = new int[N_ELEMENTS];\t\tlong nBits, read;\t\tStream stream = new Stream(Constants.LONGS_PER_REGION);\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (t=0; t<N_ITERATIONS; t++) {\t\t\t// Testing $push$\t\t\tstream.clear(true);\t\t\tnBits=0;\t\t\tfor (i=0; i<N_ELEMENTS; i++) {\t\t\t\tr=random.nextInt(MAX_INT);\t\t\t\tnumbers[i]=r;\t\t\t\tstream.push(r,Utils.bitsToEncode(r));\t\t\t\tnBits+=Utils.bitsToEncode(r);\t\t\t}\t\t\tif (stream.nBits()!=nBits) {\t\t\t\tSystem.err.println(\"Error in Stream.push: pushed \"+stream.nBits()+\" bits rather than \"+nBits);\t\t\t\treturn false;\t\t\t}\t\t\tstream.setPosition(0L);\t\t\tfor (i=0; i<N_ELEMENTS; i++) {\t\t\t\tread=stream.read(Utils.bitsToEncode(numbers[i]));\t\t\t\tif (read!=numbers[i]) {\t\t\t\t\tSystem.err.println(\"Error in Stream.push: pushed \"+read+\" rather than \"+numbers[i]);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\t// Testing $pop$\t\t\tnBits=stream.nBits();\t\t\tj=random.nextInt(N_ELEMENTS);\t\t\tfor (i=N_ELEMENTS-1; i>=j; i--) {\t\t\t\tstream.pop(Utils.bitsToEncode(numbers[i]));\t\t\t\tnBits-=Utils.bitsToEncode(numbers[i]);\t\t\t}\t\t\tif (stream.nBits()!=nBits) {\t\t\t\tSystem.err.println(\"Error in Stream.pop: wrong number of bits popped.\");\t\t\t\treturn false;\t\t\t}\t\t\tstream.setPosition(0);\t\t\tfor (i=0; i<j; i++) {\t\t\t\tread=stream.read(Utils.bitsToEncode(numbers[i]));\t\t\t\tif (read!=numbers[i]) {\t\t\t\t\tSystem.err.println(\"Error in Stream.read: wrong bit sequences popped.\");\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (i=j; i<N_ELEMENTS; i++) stream.push(numbers[i],Utils.bitsToEncode(numbers[i]));  // Pushing popped values back\t\t\t// Testing $setPosition$ and $getPosition$\t\t\tj=random.nextInt(N_ELEMENTS);\t\t\tnBits=0;\t\t\tfor (i=0; i<j; i++) nBits+=Utils.bitsToEncode(numbers[i]);\t\t\tstream.setPosition(nBits);\t\t\tif (stream.getPosition()!=nBits) {\t\t\t\tSystem.err.println(\"Error in Stream.setPosition: wrong position\");\t\t\t\treturn false;\t\t\t}\t\t\tread=stream.read(Utils.bitsToEncode(numbers[j]));\t\t\tif (read!=numbers[j]) {\t\t\t\tSystem.err.println(\"Error in Stream.setPosition: read \"+read+\" rather than \"+numbers[j]+\".\");\t\t\t\treturn false;\t\t\t}\t\t\t// Testing $setBit$\t\t\tposition=(int)stream.getPosition();\t\t\tj=random.nextInt((int)stream.nBits());\t\t\tstream.setPosition(j);\t\t\tregion=stream.pointerRegion;\t\t\tcell=stream.pointerCell;\t\t\toffset=stream.pointerOffset;\t\t\tstream.setPosition(position);\t\t\tstream.setBit(j);\t\t\tif ((stream.regions[region][cell]&Utils.oneSelectors1[64-offset-1])==0L) {\t\t\t\tString str = Long.toBinaryString(stream.regions[region][cell]);\t\t\t\twhile (str.length()<64) str=\"0\"+str;\t\t\t\tSystem.err.println(\"Error in Stream.setBit: cell=\"+str+\" offset=\"+offset+\" position%64=\"+(j%64));\t\t\t\treturn false;\t\t\t}\t\t\t/*// Testing $binarySearch$ with 64-bit numbers\t\t\tfor (int x=0; x<N_ELEMENTS; x++) numbers[x]=x;\t\t\tstream.clear(true);\t\t\tfor (int x=0; x<N_ELEMENTS; x++) stream.push(numbers[x],64);\t\t\tfor (int x=0; x<N_ELEMENTS/2; x++) {\t\t\t\tint p = random.nextInt(N_ELEMENTS);\t\t\t\tint value = numbers[p];\t\t\t\tlong returnedP = stream.binarySearch(0,N_ELEMENTS,value,64,6);\t\t\t\tif (returnedP/64!=p) {\t\t\t\t\tSystem.err.println(\"Error in Stream.binarySearch: returnedPosition=\"+(returnedP/64)+\" real position=\"+p);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}*/\t\t\t/*System.out.print(\"Testing $skip$... \");\t\t\tk=(int)(Math.random()*N_ELEMENTS/4);\t\t\tj=(int)(Math.random()*(N_ELEMENTS-k))+1;\t\t\tnBits=0;\t\t\tfor (i=1; i<j; i++) nBits+=Utils.bitsToEncode(i);\t\t\tstack.setPosition(nBits);\t\t\tif (stack.getPosition()!=nBits) { System.err.println(\"ERROR!\"); System.exit(1); }\t\t\tfor (i=j; i<j+k; i++) {\t\t\t\tstack.skip(Utils.bitsToEncode(i));\t\t\t\tnBits+=Utils.bitsToEncode(i);\t\t\t}\t\t\tif (stack.getPosition()!=nBits) { System.err.println(\"ERROR!\"); System.exit(1); }*/\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_huffmanWaveletTree", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_huffmanWaveletTree() {\t\tfinal int STRING_LENGTH = 10000;\t\tfinal int N_ITERATIONS = 100;\t\tfinal int N_POSITIONS = 1000;\t\tint i, j, c, cPrime, p, pPrime, maxCodeLength;\t\tint[] fullAlphabet = new int[] {0,1,2,3};\t\tint[] alphabet = new int[] {0,2,3};\t\tIntArray counts = new IntArray(alphabet.length,Utils.log2(STRING_LENGTH),true);\t\tlong[] ones;\t\tlong[][] stack, output, trueOutput;\t\tIntArray string;\t\tHuffmanWaveletTree tree;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\t// Test string: 03300 20032\t\t//string.push(0); string.push(3); string.push(3); string.push(0); string.push(0);\t\t//string.push(2); string.push(0); string.push(0); string.push(3); string.push(2);\t\t//counts.setElementAt(0,5); counts.setElementAt(1,2); counts.setElementAt(2,3);\t\tstack = new long[fullAlphabet.length-1][1+N_POSITIONS];\t\toutput = new long[fullAlphabet.length][N_POSITIONS];\t\tones = new long[N_POSITIONS];\t\ttrueOutput = new long[fullAlphabet.length][N_POSITIONS];\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tstring.clear();\t\t\tfor (j=0; j<alphabet.length; j++) counts.setElementAt(j,0);\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tc=random.nextInt(alphabet.length);\t\t\t\tcounts.incrementElementAt(c);\t\t\t\tstring.push(alphabet[c]);\t\t\t}\t\t\ttree = new HuffmanWaveletTree(string,alphabet,counts);\t\t\t// Testing $access$\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tif (tree.access(j)!=string.getElementAt(j)) {\t\t\t\t\tSystem.err.println(\"The strings differ at position \"+j+\":\");\t\t\t\t\tSystem.err.print(\"true string: \"); string.print(); System.err.println();\t\t\t\t\tSystem.err.print(\"  wt string: \");\t\t\t\t\tfor (int x=0; x<STRING_LENGTH; x++) System.out.print(tree.access(j)+\"\");\t\t\t\t\tSystem.err.println();\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\t// Testing $multirank$\t\t\tmaxCodeLength=tree.maxCodeLength;\t\t\tfor (p=0; p<N_POSITIONS; p++) stack[0][1+p]=random.nextInt(STRING_LENGTH);\t\t\tfor (int x=0; x<output.length; x++) {\t\t\t\tfor (int y=0; y<output[x].length; y++) output[x][y]=0;\t\t\t}\t\t\ttree.multirank(fullAlphabet.length,N_POSITIONS,stack,output,ones);\t\t\tfor (p=0; p<N_POSITIONS; p++) {\t\t\t\tfor (c=0; c<fullAlphabet.length; c++) trueOutput[c][p]=0;\t\t\t\tfor (j=0; j<stack[0][1+p]; j++) trueOutput[(int)(string.getElementAt(j))][p]++;\t\t\t}\t\t\tfor (c=0; c<fullAlphabet.length; c++) {\t\t\t\tfor (p=0; p<N_POSITIONS; p++) {\t\t\t\t\tif (output[c][p]!=trueOutput[c][p]) {\t\t\t\t\t\tSystem.err.println(\"Error in multirank, character=\"+c+\" position=\"+stack[0][1+p]+\": (pos,true,estimated)\");\t\t\t\t\t\tfor (cPrime=0; cPrime<fullAlphabet.length; cPrime++) {\t\t\t\t\t\t\tSystem.out.print(\"char \"+cPrime+\": \");\t\t\t\t\t\t\tfor (pPrime=0; pPrime<N_POSITIONS; pPrime++) System.out.print(\"(\"+stack[0][1+pPrime]+\",\"+trueOutput[cPrime][pPrime]+\",\"+output[cPrime][pPrime]+\") \");\t\t\t\t\t\t\tSystem.out.println();\t\t\t\t\t\t}\t\t\t\t\t\treturn false;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_blockwiseBWT", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_blockwiseBWT() {\t\tfinal int STRING_LENGTH = 10;\t\tfinal int N_ITERATIONS = 100000;\t\tfinal int BLOCK_SIZE = 2;\t\tfinal int N_THREADS = 2;\t\tint N_BLOCKS = (int)(Utils.divideAndRoundUp(STRING_LENGTH,BLOCK_SIZE));\t\tif (N_BLOCKS<4) N_BLOCKS=4;\t\t//System.err.println(\"N_BLOCKS=\"+N_BLOCKS);\t\tint i, j, sharpPosition1, sharpPosition2, suffix;\t\tint[] alphabet = new int[] {0,1,2,3};\t\tlong[] sharp;\t\tIntArray string, bwt, suffixes, blockStarts, bitVector;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tRank9 blockBoundaries;\t\tHuffmanWaveletTree[] waveletTrees;\t\tIntArray[] localBlockCounts;\t\tsuffixes = new IntArray(STRING_LENGTH,Utils.log2(STRING_LENGTH),false);\t\tfor (i=0; i<STRING_LENGTH; i++) suffixes.push(i);\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\t\tfor (j=0; j<STRING_LENGTH; j++) string.push(random.nextInt(4));\t\t\tbwt = new IntArray(STRING_LENGTH+1,2,true);\t\t\t// Checking $SortBWTBlockThread$\t\t\tsharpPosition1=(int)(Suffixes.blockwiseBWT(string,alphabet,4,2,BLOCK_SIZE,bwt,null,null,null,null,null));\t\t\tSuffixes.sort(suffixes,string,random);\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tsuffix=(int)(suffixes.getElementAt(j));\t\t\t\tif (suffix==0) {\t\t\t\t\tif (sharpPosition1!=j+1) {\t\t\t\t\t\tSystem.err.println(\"Error in sharp position=\"+sharpPosition1+\" (computed|correct)\");\t\t\t\t\t\tprintBWTandSuffixes(bwt,sharpPosition1,suffixes,string);\t\t\t\t\t\treturn false;\t\t\t\t\t}\t\t\t\t}\t\t\t\telse if (string.getElementAt(suffix-1)!=bwt.getElementAt(j+1)) {\t\t\t\t\tSystem.err.println(\"Error in BWT characters: (computed|correct)\");\t\t\t\t\tprintBWTandSuffixes(bwt,sharpPosition1,suffixes,string);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\t// Checking $WaveletBWTBlockThread$\t\t\tbitVector = new IntArray(STRING_LENGTH+1,1,true);\t\t\twaveletTrees = new HuffmanWaveletTree[N_BLOCKS];\t\t\tblockStarts = new IntArray(N_BLOCKS,Utils.log2(STRING_LENGTH),true);\t\t\tsharp = new long[3];\t\t\tlocalBlockCounts = new IntArray[N_BLOCKS];\t\t\tsharpPosition2=(int)(Suffixes.blockwiseBWT(string,alphabet,4,2,BLOCK_SIZE,null,waveletTrees,blockStarts,bitVector,localBlockCounts,sharp));\t\t\tblockBoundaries = new Rank9(bitVector);\t\t\tboolean isOK = true;\t\t\tfor (int x=0; x<STRING_LENGTH+1; x++) {\t\t\t\tif (x<sharpPosition2) {\t\t\t\t\tint y = (int)blockBoundaries.rank(x+1)-1;\t\t\t\t\tint z = waveletTrees[y].access(x-blockStarts.getElementAt(y));\t\t\t\t\tif (z!=bwt.getElementAt(x)) {\t\t\t\t\t\tSystem.err.println(\"Error 1: wavelet tree BWT differs from real BWT: \");\t\t\t\t\t\tisOK=false;\t\t\t\t\t\tbreak;\t\t\t\t\t}\t\t\t\t}\t\t\t\telse if (x>sharpPosition2) {\t\t\t\t\tint y = (int)blockBoundaries.rank(x+1)-1;\t\t\t\t\tint z = waveletTrees[y].access((y==sharp[1]?x-1:x)-blockStarts.getElementAt(y));\t\t\t\t\tif (z!=bwt.getElementAt(x)) {\t\t\t\t\t\tSystem.err.println(\"Error 2: wavelet tree BWT differs from real BWT\");\t\t\t\t\t\tisOK=false;\t\t\t\t\t\tbreak;\t\t\t\t\t}\t\t\t\t}\t\t\t\telse {\t\t\t\t\tint y = (int)blockBoundaries.rank(sharpPosition2+1)-1;\t\t\t\t\tif (sharpPosition1!=sharp[0] || y!=sharp[1] || sharpPosition1-blockStarts.getElementAt(y)!=sharp[2]) {\t\t\t\t\t\tSystem.err.println(\"Error 3: sharp position in the wavelet tree BWT differs from the real sharp position\");\t\t\t\t\t\tSystem.err.println(\"sharp[0]=\"+sharp[0]+\" sharp[1]=\"+sharp[1]+\" sharp[2]=\"+sharp[2]);\t\t\t\t\t\tisOK=false;\t\t\t\t\t\tbreak;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\tif (!isOK) {\t\t\t\tSystem.out.println(\"Real BWT: (sharp=\"+sharpPosition1+\")\");\t\t\t\tfor (int l=0; l<STRING_LENGTH+1; l++) System.out.print(l==sharpPosition1?\"#\":bwt.getElementAt(l));\t\t\t\tSystem.out.println();\t\t\t\tSystem.out.println(\"Wavelet tree: (sharp=\"+sharpPosition2+\")\");\t\t\t\tfor (int l=0; l<STRING_LENGTH+1; l++) {\t\t\t\t\tif (l==sharpPosition2) System.out.print(\"#\");\t\t\t\t\telse if (l<sharpPosition2) {\t\t\t\t\t\tint b = (int)blockBoundaries.rank(l+1)-1;\t\t\t\t\t\tSystem.out.print(waveletTrees[b].access(l-blockStarts.getElementAt(b)));\t\t\t\t\t}\t\t\t\t\telse {\t\t\t\t\t\tint b = (int)blockBoundaries.rank(l+1)-1;\t\t\t\t\t\tSystem.out.print(waveletTrees[b].access((b==sharp[1]?l-1:l)-blockStarts.getElementAt(b)));\t\t\t\t\t}\t\t\t\t}\t\t\t\tSystem.out.println();\t\t\t\treturn false;\t\t\t}\t\t\tif (blockStarts.length()!=blockBoundaries.numOnes) {\t\t\t\tSystem.out.println(\"Error: blockStarts has \"+blockStarts.length()+\" entries, but bitVector has \"+blockBoundaries.numOnes+\" ones\");\t\t\t\tSystem.out.print(\"blockStarts: \"); blockStarts.print(); System.out.println();\t\t\t\tSystem.out.print(\"bitVector: \"); bitVector.printBits(); System.out.println();\t\t\t\treturn false;\t\t\t}\t\t\tfor (int x=1; x<blockStarts.length(); x++) {\t\t\t\tif (blockStarts.getElementAt(x)<blockStarts.getElementAt(x-1)) {\t\t\t\t\tSystem.out.println(\"Error in blockStarts: not monotonically increasing\"); blockStarts.print(); System.out.println();\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tfor (int x=0; x<blockStarts.length(); x++) {\t\t\t\tif (blockStarts.getElementAt(x)>STRING_LENGTH) {\t\t\t\t\tSystem.out.println(\"Error: blockStarts contains a value >= the length of the BWT\");\t\t\t\t\tSystem.out.print(\"blockStarts: \"); blockStarts.print(); System.out.println();\t\t\t\t\tSystem.out.print(\"bitVector: \"); bitVector.printBits(); System.out.println();\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\tif (blockBoundaries.rank(blockStarts.getElementAt(x)+1)!=x+1) {\t\t\t\t\tSystem.out.println(\"Error: bits in blockStarts and in bitVector not aligned\");\t\t\t\t\tSystem.out.print(\"blockStarts: \"); blockStarts.print(); System.out.println();\t\t\t\t\tSystem.out.print(\"bitVector: \"); bitVector.printBits(); System.out.println();\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\tint nNulls = 0;\t\t\tfor (int x=0; x<blockStarts.length(); x++) {\t\t\t\tif (waveletTrees[x]==null) nNulls++;\t\t\t}\t\t\tif (nNulls>1) {\t\t\t\tSystem.out.println(\"Error: waveletTrees contains \"+nNulls+\" null elements\");\t\t\t\treturn false;\t\t\t}\t\t\tnNulls=0;\t\t\tfor (int x=0; x<blockStarts.length(); x++) {\t\t\t\tif (localBlockCounts[x]==null) nNulls++;\t\t\t}\t\t\tif (nNulls>1) {\t\t\t\tSystem.out.println(\"Error: localBlockCounts contains \"+nNulls+\" null elements\");\t\t\t\treturn false;\t\t\t}\t\t\tfor (int x=0; x<blockStarts.length(); x++) {\t\t\t\tint y=(int)(blockStarts.getElementAt(x));\t\t\t\tint[] counts = new int[4];\t\t\t\twhile (y<bwt.length() && (int)blockBoundaries.rank(y+1)-1==x) {\t\t\t\t\tif (y!=sharpPosition1) counts[(int)(bwt.getElementAt(y))]++;\t\t\t\t\ty++;\t\t\t\t}\t\t\t\tfor (y=0; y<4; y++) {\t\t\t\t\tif (counts[y]!=localBlockCounts[x].getElementAt(y)) {\t\t\t\t\t\tSystem.out.println(\"Error: localBlockCounts[\"+x+\"] contains wrong counts:\");\t\t\t\t\t\tSystem.out.print(\"localBlockCounts[\"+x+\"]: \"); localBlockCounts[x].print(); System.out.println();\t\t\t\t\t\tSystem.out.print(\"true count: \");\t\t\t\t\t\tfor (int z=0; z<4; z++) System.out.print(counts[z]+\" \");\t\t\t\t\t\tSystem.out.println();\t\t\t\t\t\treturn false;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printBWTandSuffixes", "params": ["IntArray", "int", "IntArray", "IntArray"], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "void", "snippet": "\tprivate static final void printBWTandSuffixes(IntArray bwt, int sharpPosition, IntArray suffixes, IntArray string) {\t\tint i, suffix;\t\tString bwtString, correctString;\t\tSystem.err.println(\"0: \"+bwt.getElementAt(0)+\" \"+string.getElementAt(string.length()-1)+\" \"+(bwt.getElementAt(0)==string.getElementAt(string.length()-1)?\"\":\"<<<\"));\t\tfor (i=1; i<bwt.length(); i++) {\t\t\tsuffix=(int)(suffixes.getElementAt(i-1));\t\t\tbwtString=i==sharpPosition?\"#\":bwt.getElementAt(i)+\"\";\t\t\tcorrectString=suffix==0?\"#\":string.getElementAt(suffix-1)+\"\";\t\t\tSystem.err.println(i+\": \"+bwtString+\" \"+correctString+\" \"+(bwtString.equalsIgnoreCase(correctString)?\"\":\"<<<\"));\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_pasteAtPointer", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_pasteAtPointer() {\t\tfinal int STRING_LENGTH = 10000;\t\tfinal int N_ITERATIONS = 1000;\t\tfinal int MAX_BLOCK_LENGTH = 100;\t\tint i, j, value, position, blockLength;\t\tint[] array, blockArray;\t\tIntArray string, block;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\t// Building a new string\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tarray = new int[STRING_LENGTH];\t\tblock = new IntArray(10*MAX_BLOCK_LENGTH,2,false);\t\tblockArray = new int[10*MAX_BLOCK_LENGTH];\t\tfor (i=0; i<STRING_LENGTH; i++) {\t\t\tvalue=random.nextInt(4);\t\t\tstring.push(value);\t\t\tarray[i]=value;\t\t}\t\t// Testing\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tblockLength=1+random.nextInt(MAX_BLOCK_LENGTH-1);\t\t\tposition=random.nextInt(STRING_LENGTH-blockLength+1);\t\t\tstring.setPointer(position);\t\t\tblock.clear(string.pointerOffset);\t\t\tfor (j=0; j<blockLength; j++) {\t\t\t\tvalue=random.nextInt(4);\t\t\t\tblock.push(value);\t\t\t\tblockArray[j]=value;\t\t\t}/*\t\t\tSystem.err.println(\"Block to paste at position \"+position+\":\");\t\t\tfor (j=0; j<blockLength; j++) System.err.print(blockArray[j]);\t\t\tSystem.err.println();\t\t\tSystem.err.println(\"Before pasteAtPointer:\");\t\t\tfor (j=0; j<STRING_LENGTH; j++) System.err.print(string.getElementAt(j));\t\t\tSystem.err.println();*/\t\t\tstring.pasteAtPointer(block);/*\t\t\tSystem.err.println(\"After pasteAtPointer:\");\t\t\tfor (j=0; j<STRING_LENGTH; j++) System.err.print(string.getElementAt(j));\t\t\tSystem.err.println();*/\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tif ((j<position||j>=position+blockLength) && string.getElementAt(j)!=array[j]) return false;\t\t\t\tif (j>=position && j<position+blockLength && string.getElementAt(j)!=blockArray[j-position]) return false;\t\t\t}\t\t\tfor (j=0; j<blockLength; j++) array[position+j]=blockArray[j];\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_assignSuffixToBlock", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_assignSuffixToBlock() {\t\tfinal int STRING_LENGTH = 10000;\t\tfinal int N_ITERATIONS = 100;\t\tfinal int N_SPLITTERS = 100;\t\tboolean lowOK, highOK, inInterval;\t\tint i, j, h, suffix, block;\t\tIntArray string, splitters, cache;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\t// Building a new string\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tfor (i=0; i<STRING_LENGTH; i++) string.push(random.nextInt(4));\t\tsplitters = new IntArray(N_SPLITTERS,Utils.log2(STRING_LENGTH),false);\t\tcache=null;\t\t// Testing\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tsplitters.clear();\t\t\tfor (j=0; j<N_SPLITTERS; j++) splitters.push(random.nextInt(STRING_LENGTH));\t\t\tSuffixes.sort(splitters,string,random);\t\t\tif (cache!=null) cache.clear(); cache=Suffixes.buildBinarySearchCache(splitters,string);\t\t\tfor (suffix=0; suffix<STRING_LENGTH; suffix++) {\t\t\t\tif (splitters.linearSearch(suffix)>=0) continue;\t\t\t\tblock=Suffixes.assignSuffixToBlock(suffix,splitters,cache,string);\t\t\t\tif (block==0) inInterval=(string.lcp(splitters.getElementAt(0),suffix,true)&Utils.MSB_INT_ONE)!=0x00000000;\t\t\t\telse if (block==N_SPLITTERS) inInterval=(string.lcp(suffix,splitters.getElementAt(N_SPLITTERS-1),true)&Utils.MSB_INT_ONE)!=0x00000000;\t\t\t\telse {\t\t\t\t\tlowOK=(string.lcp(suffix,splitters.getElementAt(block-1),true)&Utils.MSB_INT_ONE)!=0x00000000;\t\t\t\t\thighOK=(string.lcp(splitters.getElementAt(block),suffix,true)&Utils.MSB_INT_ONE)!=0x00000000;\t\t\t\t\tinInterval=lowOK&&highOK;\t\t\t\t}\t\t\t\tif (!inInterval) {\t\t\t\t\tSystem.err.println(\"Error: string[\"+suffix+\"] does not belong to block (\"+\t\t\t\t\t\t\t\t\t    (block==0?\"\\\\infty\":\"string[\"+splitters.getElementAt(block-1)+\",]\")+\t\t\t\t\t\t\t\t\t    \", \"+\t\t\t\t\t\t\t\t\t    (block==N_SPLITTERS?\"\\\\infty\":\"string[\"+splitters.getElementAt(block)+\",]\")+\t\t\t\t\t\t\t\t\t    \"), but the algorithm thinks so.\");\t\t\t\t\tif (block>0) {\t\t\t\t\t\tSystem.err.println(\"string[\"+splitters.getElementAt(block-1)+\",]:\");\t\t\t\t\t\tfor (h=(int)(splitters.getElementAt(block-1)); h<STRING_LENGTH; h++) System.err.print(string.getElementAt(h));\t\t\t\t\t\tSystem.err.println();\t\t\t\t\t}\t\t\t\t\tSystem.err.println(\"string[\"+suffix+\",]:\");\t\t\t\t\tfor (h=suffix; h<STRING_LENGTH; h++) System.err.print(string.getElementAt(h));\t\t\t\t\tSystem.err.println();\t\t\t\t\tif (block<N_SPLITTERS) {\t\t\t\t\t\tSystem.err.println(\"string[\"+splitters.getElementAt(block)+\",]:\");\t\t\t\t\t\tfor (h=(int)(splitters.getElementAt(block)); h<STRING_LENGTH; h++) System.err.print(string.getElementAt(h));\t\t\t\t\t\tSystem.err.println();\t\t\t\t\t}\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_buildBinarySearchCache", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_buildBinarySearchCache() {\t\tfinal int STRING_LENGTH = 10000;\t\tfinal int N_ITERATIONS = 10;\t\tfinal int N_SPLITTERS = 1000;\t\tboolean lowOK, highOK, inInterval;\t\tint i, j, h, suffix, block;\t\tIntArray string, splitters, cache;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\t// Building a new string\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tfor (i=0; i<STRING_LENGTH; i++) string.push(random.nextInt(4));\t\tsplitters = new IntArray(N_SPLITTERS,Utils.log2(STRING_LENGTH),false);\t\tcache=null;\t\t// Testing\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tsplitters.clear();\t\t\tfor (j=0; j<N_SPLITTERS; j++) splitters.push(random.nextInt(STRING_LENGTH));\t\t\tSuffixes.sort(splitters,string,random);\t\t\tif (cache!=null) cache.clear();\t\t\tcache=Suffixes.buildBinarySearchCache(splitters,string);\t\t\tif (cache.length()!=2*(splitters.length()-2)) {\t\t\t\tSystem.err.println(\"Length error\");\t\t\t\treturn false;\t\t\t}\t\t\tif (!checkBinarySearchCache(0,N_SPLITTERS-1,splitters,cache,string)) return false;\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkBinarySearchCache", "params": ["int", "int", "IntArray", "IntArray", "IntArray"], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean checkBinarySearchCache(int left, int right, IntArray splitters, IntArray cache, IntArray string) {\t\tint mid = (left+right)>>1;\t\tint midLeftLCP = (int)(string.lcp(splitters.getElementAt(mid),splitters.getElementAt(left),false));\t\tif (cache.getElementAt(2*(mid-1))!=midLeftLCP) return false;\t\tint midRightLCP = (int)(string.lcp(splitters.getElementAt(mid),splitters.getElementAt(right),false));\t\tif (cache.getElementAt(2*(mid-1)+1)!=midRightLCP) return false;\t\tboolean out = true;\t\tif (mid-left>1) out&=checkBinarySearchCache(left,mid,splitters,cache,string);\t\tif (right-mid>1) out&=checkBinarySearchCache(mid,right,splitters,cache,string);\t\treturn out;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_intervalOfSuffixes", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_intervalOfSuffixes() {\t\tint STRING_LENGTH = 10;\t\tfinal int N_INTERVALS = 10;\t\tboolean inInterval, inOut;\t\tint i, j, h, low, high;\t\tIntArray string, lcpLow, lcpHigh, out;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\t// Building a new string\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tfor (i=0; i<STRING_LENGTH; i++) string.push(random.nextInt(4));\t\tlcpLow = new IntArray(Constants.DISTINGUISHING_PREFIX+1,Utils.log2(STRING_LENGTH<<1),false);\t\tlcpHigh = new IntArray(Constants.DISTINGUISHING_PREFIX+1,Utils.log2(STRING_LENGTH<<1),false);\t\tout = new IntArray(STRING_LENGTH-2,Utils.log2(STRING_LENGTH),false);\t\t// Testing\t\tfor (i=0; i<N_INTERVALS; i++) {\t\t\tlow=random.nextInt(STRING_LENGTH);\t\t\tdo { high=random.nextInt(STRING_LENGTH); } while (high==low);\t\t\tlcpLow.clear(); Suffixes.buildLCPArray(low,string,lcpLow);\t\t\tlcpHigh.clear(); Suffixes.buildLCPArray(high,string,lcpHigh);\t\t\tout.clear(); Suffixes.intervalOfSuffixes(low,high,lcpLow,lcpHigh,string,out);\t\t\tif (!checkSuffixesInOut(low,high,out,string)) return false;\t\t\tout.clear(); Suffixes.intervalOfSuffixes(-1,low,null,lcpLow,string,out);\t\t\tif (!checkSuffixesInOut(-1,low,out,string)) return false;\t\t\tout.clear(); Suffixes.intervalOfSuffixes(high,-1,lcpHigh,null,string,out);\t\t\tif (!checkSuffixesInOut(high,-1,out,string)) return false;\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkSuffixesInOut", "params": ["int", "int", "IntArray", "IntArray"], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean checkSuffixesInOut(int low, int high, IntArray out, IntArray string) {\t\tfinal int STRING_LENGTH = (int)(string.length());\t\tboolean lowOK, highOK, inInterval, inOut;\t\tint j, h;\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\tlowOK=low<0?true:(string.lcp(j,low,true)&Utils.MSB_INT_ONE)!=0x00000000;\t\t\thighOK=high<0?true:(string.lcp(high,j,true)&Utils.MSB_INT_ONE)!=0x00000000;\t\t\tinInterval=lowOK&&highOK;\t\t\tinOut=out.linearSearch(j)>=0;\t\t\tif (inInterval&&!inOut) {\t\t\t\tSystem.err.println(\"Error: string[\"+low+\"]<string[\"+j+\",]<string[\"+high+\",], but \"+j+\" does not appear in the output\");\t\t\t\tif (low>=0) {\t\t\t\t\tSystem.err.println(\"string[\"+low+\",]:\");\t\t\t\t\tfor (h=low; h<STRING_LENGTH; h++) System.err.print(string.getElementAt(h));\t\t\t\t\tSystem.err.println();\t\t\t\t}\t\t\t\tSystem.err.println(\"string[\"+j+\",]:\");\t\t\t\tfor (h=j; h<STRING_LENGTH; h++) System.err.print(string.getElementAt(h));\t\t\t\tSystem.err.println();\t\t\t\tif (high>=0) {\t\t\t\t\tSystem.err.println(\"string[\"+high+\",]:\");\t\t\t\t\tfor (h=high; h<STRING_LENGTH; h++) System.err.print(string.getElementAt(h));\t\t\t\t\tSystem.err.println();\t\t\t\t}\t\t\t\treturn false;\t\t\t}\t\t\telse if (!inInterval&&inOut) {\t\t\t\tSystem.err.println(\"Error: string[\"+j+\",] does not belong to interval (string[\"+low+\",],string[\"+high+\",]), but \"+j+\" appears in the output\");\t\t\t\tif (low>=0) {\t\t\t\t\tSystem.err.println(\"string[\"+low+\",]:\");\t\t\t\t\tfor (h=low; h<STRING_LENGTH; h++) System.err.print(string.getElementAt(h));\t\t\t\t\tSystem.err.println();\t\t\t\t}\t\t\t\tSystem.err.println(\"string[\"+j+\",]:\");\t\t\t\tfor (h=j; h<STRING_LENGTH; h++) System.err.print(string.getElementAt(h));\t\t\t\tSystem.err.println();\t\t\t\tif (high>=0) {\t\t\t\t\tSystem.err.println(\"string[\"+high+\",]:\");\t\t\t\t\tfor (h=high; h<STRING_LENGTH; h++) System.err.print(string.getElementAt(h));\t\t\t\t\tSystem.err.println();\t\t\t\t}\t\t\t\treturn false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_buildLCPArray", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_buildLCPArray() {\t\tint STRING_LENGTH = 16;  // These values came from a failure with string 1^{9}2 and similar, now fixed. Works for larger values, as well.\t\tfinal int N_SUFFIXES = 10;\t\tint i, j, k, h, tmp, length, suffix, sign, predictedSign, predictedLCP, lcp, lcpArray;\t\tIntArray string, out;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\t// Building a new string\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\tfor (j=0; j<STRING_LENGTH; j++) string.push(random.nextInt(4));\t\tout = new IntArray(STRING_LENGTH,Utils.log2(STRING_LENGTH<<1),false);\t\tfinal int SELECT_SIGN = Utils.MSB_INT_ONE>>>(32-out.bitsPerInt);\t\tfinal int SELECT_LENGTH = 0xFFFFFFFF>>>(32-out.bitsPerInt+1);\t\t// Testing LCP values\t\tfor (i=0; i<N_SUFFIXES; i++) {\t\t\tsuffix=random.nextInt(STRING_LENGTH-Constants.DISTINGUISHING_PREFIX+1);\t\t\tout.clear();\t\t\tSuffixes.buildLCPArray(suffix,string,out);\t\t\tfor (j=1; j<=Constants.DISTINGUISHING_PREFIX; j++) {\t\t\t\tlcp=(int)(string.lcp(suffix,suffix+j,true));\t\t\t\tlength=lcp&Utils.MSB_INT_ZERO;\t\t\t\tsign=lcp&Utils.MSB_INT_ONE;\t\t\t\tlcpArray=(int)(out.getElementAt(j));\t\t\t\tif ((lcpArray&SELECT_LENGTH)!=length) {\t\t\t\t\tSystem.out.println(\"Length error: lcp=\"+Integer.toBinaryString(lcp)+\" lcpArray=\"+Integer.toBinaryString(lcpArray));\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\tif (((lcpArray&SELECT_SIGN)==0&&sign!=0) || ((lcpArray&SELECT_SIGN)!=0&&sign==0)) {\t\t\t\t\tSystem.out.println(\"Sign error: lcp=\"+Integer.toBinaryString(lcp)+\" lcpArray=\"+Integer.toBinaryString(lcpArray)+\" suffix=\"+suffix+\" j=\"+j);\t\t\t\t\tfor (h=suffix; h<STRING_LENGTH; h++) System.out.print(string.getElementAt(h));\t\t\t\t\tSystem.out.println();\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_heapSort", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_heapSort() {\t\tfinal int N_ITERATIONS = 100;\t\tfinal int ARRAY_LENGTH = 10000;\t\tfinal int MAX_VALUE = 1000;\t\tint i, j, k;\t\tIntArray intArray;\t\tint[] array;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (i=0; i<N_ITERATIONS; i++) {\t\t\tintArray = new IntArray(ARRAY_LENGTH,Utils.log2(MAX_VALUE),false);\t\t\tarray = new int[ARRAY_LENGTH];\t\t\tfor (j=0; j<ARRAY_LENGTH; j++) {\t\t\t\tk=random.nextInt(MAX_VALUE);\t\t\t\tintArray.push(k);\t\t\t\tarray[j]=k;\t\t\t}\t\t\tintArray.heapSort(0,ARRAY_LENGTH);\t\t\tArrays.sort(array);\t\t\tfor (j=0; j<ARRAY_LENGTH; j++) {\t\t\t\tif (intArray.getElementAt(j)!=array[j]) return false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_swap", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_swap() {\t\tfinal int N_RANDOM_STRINGS = 10;\t\tfinal int STRING_LENGTH = 100;\t\tfinal int N_RANDOM_SWAPS = 100;\t\tfinal int BITS_PER_INT = 64;\t\tint i, j, tmp, from, to;\t\tIntArray string;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (i=0; i<N_RANDOM_STRINGS; i++) {\t\t\t// Building a new string\t\t\tstring = new IntArray(STRING_LENGTH,BITS_PER_INT,false);\t\t\tint[] stringArray = new int[STRING_LENGTH];\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\ttmp=random.nextInt(4);\t\t\t\tstring.push(tmp);\t\t\t\tstringArray[j]=tmp;\t\t\t}\t\t\t// Random swaps\t\t\tfor (j=0; j<N_RANDOM_SWAPS; j++) {\t\t\t\tfrom=random.nextInt(STRING_LENGTH);\t\t\t\tdo { to=random.nextInt(STRING_LENGTH); } while (to!=from);\t\t\t\tstring.swap(from,to);\t\t\t\ttmp=stringArray[from]; stringArray[from]=stringArray[to]; stringArray[to]=tmp;\t\t\t}\t\t\t// Testing equivalence\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tif (string.getElementAt(j)!=stringArray[j]) return false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_vecswap", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_vecswap() {\t\tfinal int N_RANDOM_STRINGS = 10;\t\tfinal int STRING_LENGTH = 100;\t\tfinal int N_RANDOM_SWAPS = 100;\t\tfinal int BITS_PER_INT = 64;\t\tint i, j, k, n, tmp, from1, from2;\t\tIntArray string;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (i=0; i<N_RANDOM_STRINGS; i++) {\t\t\t// Building a new string\t\t\tstring = new IntArray(STRING_LENGTH,BITS_PER_INT,false);\t\t\tint[] stringArray = new int[STRING_LENGTH];\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\ttmp=random.nextInt(4);\t\t\t\tstring.push(tmp);\t\t\t\tstringArray[j]=tmp;\t\t\t}\t\t\t// Random swaps\t\t\tfor (j=0; j<N_RANDOM_SWAPS; j++) {\t\t\t\tn=random.nextInt(STRING_LENGTH/4);\t\t\t\tdo { from1=random.nextInt(STRING_LENGTH); } while (from1>STRING_LENGTH-n);\t\t\t\tdo { from2=random.nextInt(STRING_LENGTH); } while ((from2>=from1 && from2<from1+n) || (from1>=from2 && from1<from2+n) || (from2>STRING_LENGTH-n));\t\t\t\tstring.vecswap(from1,from2,n);\t\t\t\tint[] vector = new int[n];\t\t\t\tfor (k=0; k<n; k++) vector[k]=stringArray[from1+k];\t\t\t\tfor (k=0; k<n; k++) stringArray[from1+k]=stringArray[from2+k];\t\t\t\tfor (k=0; k<n; k++) stringArray[from2+k]=vector[k];\t\t\t}\t\t\t// Testing equivalence\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tif (string.getElementAt(j)!=stringArray[j]) return false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_incrementElementAt", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_incrementElementAt() {\t\tfinal int N_RANDOM_ARRAYS = 100;\t\tfinal int N_RANDOM_INCREMENTS = 100000;\t\tfinal int ARRAY_LENGTH = 100;\t\tfinal int MAX_VALUE = 100;\t\tfinal int BITS_PER_INT = 64;\t\tint i, j, k, tmp;\t\tIntArray array;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (i=0; i<N_RANDOM_ARRAYS; i++) {\t\t\t// Building a new array\t\t\tarray = new IntArray(ARRAY_LENGTH,BITS_PER_INT,false);\t\t\tint[] realArray = new int[ARRAY_LENGTH];\t\t\tfor (j=0; j<ARRAY_LENGTH; j++) {\t\t\t\ttmp=random.nextInt(MAX_VALUE);\t\t\t\tarray.push(tmp);\t\t\t\trealArray[j]=tmp;\t\t\t}\t\t\t// Random increments\t\t\tfor (j=0; j<N_RANDOM_INCREMENTS; j++) {\t\t\t\tk=random.nextInt(ARRAY_LENGTH);\t\t\t\tarray.incrementElementAt(k);\t\t\t\trealArray[k]++;\t\t\t}\t\t\t// Testing equivalence\t\t\tfor (j=0; j<ARRAY_LENGTH; j++) {\t\t\t\tif (array.getElementAt(j)!=realArray[j]) return false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_pushFromRight", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_pushFromRight() {\t\tfinal int N_RANDOM_ARRAYS = 1000;\t\tfinal int ARRAY_LENGTH = 10000;\t\tfinal int MAX_VALUE = 100;\t\tfinal int BITS_PER_INT = 64;\t\tint i, j, k, tmp;\t\tIntArray array;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (i=0; i<N_RANDOM_ARRAYS; i++) {\t\t\t// Building a new array\t\t\tarray = new IntArray(ARRAY_LENGTH,BITS_PER_INT,false);\t\t\tint[] realArray = new int[ARRAY_LENGTH];\t\t\tfor (j=0; j<ARRAY_LENGTH; j++) {\t\t\t\ttmp=random.nextInt(MAX_VALUE);\t\t\t\tarray.pushFromRight(tmp);\t\t\t\trealArray[j]=tmp;\t\t\t}\t\t\t// Testing equivalence\t\t\tfor (j=0; j<ARRAY_LENGTH; j+=64/BITS_PER_INT) {\t\t\t\tfor (k=0; k<64/BITS_PER_INT; k++) {\t\t\t\t\tif (array.getElementAt(j+k)!=realArray[j+64/BITS_PER_INT-1-k]) return false;\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_rank9", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_rank9() {\t\tfinal int N_RANDOM_ARRAYS = 1000;\t\tfinal int ARRAY_LENGTH = 10000;\t\tint i, j, tmp;\t\tIntArray array;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (i=0; i<N_RANDOM_ARRAYS; i++) {\t\t\t// Building a new array\t\t\tarray = new IntArray(ARRAY_LENGTH,1,false);\t\t\tint[] ranks = new int[ARRAY_LENGTH];\t\t\tfor (j=0; j<ARRAY_LENGTH; j++) {\t\t\t\ttmp=random.nextInt(1);\t\t\t\tarray.pushFromRight(tmp);\t\t\t\tif (j<ARRAY_LENGTH-1) ranks[j+1]=ranks[j]+(tmp==1?1:0);\t\t\t}\t\t\tRank9 rankDS = new Rank9(array);\t\t\t// Testing equivalence\t\t\tfor (j=0; j<ARRAY_LENGTH; j++) {\t\t\t\tif (rankDS.rank(j)!=ranks[j]) return false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test_sort", "params": [], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "boolean", "snippet": "\tprivate static final boolean test_sort() {\t\tfinal int N_RANDOM_STRINGS = 100;\t\tfinal int STRING_LENGTH = 1000;\t\tint i, j;\t\tIntArray string, suffixes_quicksort, suffixes_inssort, suffixes_heapsort;\t\tIntArray cache_quicksort, cache_inssort, cache_heapsort;\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tfor (i=0; i<N_RANDOM_STRINGS; i++) {\t\t\t// Building a new string\t\t\t//System.out.println(\"-- -- -- -- --\");\t\t\tstring = new IntArray(STRING_LENGTH,2,false);\t\t\tfor (j=0; j<STRING_LENGTH; j++) string.push(random.nextInt(4));\t\t\t// ccgt ataa aa\t\t\t//string.push(1); string.push(1); string.push(2); string.push(3);\t\t\t//string.push(0); string.push(3); string.push(0); string.push(0);\t\t\t//string.push(0); string.push(0);\t\t\t// quicksort\t\t\tsuffixes_quicksort = new IntArray(STRING_LENGTH,Utils.log2(STRING_LENGTH));\t\t\tfor (j=0; j<STRING_LENGTH; j++) suffixes_quicksort.push(j);\t\t\tcache_quicksort = new IntArray(STRING_LENGTH,64,true);\t\t\tfor (j=0; j<STRING_LENGTH; j++) cache_quicksort.setElementAt(j,string.load63(j<<string.log2BitsPerInt));\t\t\tSuffixes.quicksort(suffixes_quicksort,0,STRING_LENGTH,0,0,string,cache_quicksort,    Integer.MAX_VALUE,1,random);  //Suffixes.QUICKSORT_HEAPSORT_SCALE*Utils.log2(STRING_LENGTH), Suffixes.STOP_QUICKSORT_AT_SIZE, random);\t\t\t// insertionSort\t\t\tsuffixes_inssort = new IntArray(STRING_LENGTH,Utils.log2(STRING_LENGTH));\t\t\tfor (j=0; j<STRING_LENGTH; j++) suffixes_inssort.push(j);\t\t\tcache_inssort = new IntArray(STRING_LENGTH,64,true);\t\t\tfor (j=0; j<STRING_LENGTH; j++) cache_inssort.setElementAt(j,string.load63(j<<string.log2BitsPerInt));\t\t\tSuffixes.insertionSort(suffixes_inssort,0,STRING_LENGTH,string,cache_inssort);\t\t\t// heapSort\t\t\tsuffixes_heapsort = new IntArray(STRING_LENGTH,Utils.log2(STRING_LENGTH));\t\t\tfor (j=0; j<STRING_LENGTH; j++) suffixes_heapsort.push(j);\t\t\tcache_heapsort = new IntArray(STRING_LENGTH,64,true);\t\t\tfor (j=0; j<STRING_LENGTH; j++) cache_heapsort.setElementAt(j,string.load63(j<<string.log2BitsPerInt));\t\t\tSuffixes.heapSort(suffixes_heapsort,0,STRING_LENGTH,string,cache_heapsort);\t\t\t// Testing equivalence\t\t\tfor (j=0; j<STRING_LENGTH; j++) {\t\t\t\tif (suffixes_inssort.getElementAt(j)!=suffixes_heapsort.getElementAt(j)) {\t\t\t\t\tSystem.err.println(\"MISMATCH inssort-heapsort\");\t\t\t\t\tSystem.err.println(\"inssort:\");\t\t\t\t\tsuffixes_inssort.printAsDNASuffixes(string);\t\t\t\t\tSystem.err.println(\"heapsort:\");\t\t\t\t\tsuffixes_heapsort.printAsDNASuffixes(string);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\tif (suffixes_inssort.getElementAt(j)!=suffixes_quicksort.getElementAt(j)) {\t\t\t\t\tSystem.err.println(\"MISMATCH inssort-quicksort\");\t\t\t\t\tSystem.err.println(\"inssort:\");\t\t\t\t\tsuffixes_inssort.printAsDNASuffixes(string);\t\t\t\t\tSystem.err.println(\"quicksort:\");\t\t\t\t\tsuffixes_quicksort.printAsDNASuffixes(string);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "Tests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\t\tprotected Substring getInstance() {\t\t\treturn new TestMinimalAbsentWord(alphabetLength,log2alphabetLength,bitsToEncodeAlphabetLength,bwtLength,log2BWTLength,bitsToEncodeBWTLength,text);\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestMinimalAbsentWord", "extends": "MinimalAbsentWord", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "visited", "params": ["Stream", "RigidStream", "SimpleStream", "Substring", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void visited(Stream stack, RigidStream characterStack, SimpleStream pointerStack, Substring[] cache, Substring[] leftExtensions) {\t\t\tsuper.visited(stack,characterStack,pointerStack,cache,leftExtensions);\t\t\tif (leftContext<2) return;\t\t\tif (length>bwtLength) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A RIGHT-MAXIMAL SUBSTRING LONGER THAN THE TEXT PLUS ONE: (length=\"+length+\")\");\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t\t// Reconstructing the sequence\t\t\tboolean startsWithSharp;\t\t\tString str;\t\t\tIntArray sequence = new IntArray((int)length,log2alphabetLength,false);\t\t\tstartsWithSharp=getSequence(characterStack,sequence);\t\t\tif (startsWithSharp) str=\"#\";\t\t\telse str=\"\";\t\t\tfor (int i=0; i<(startsWithSharp?length-1:length); i++) str+=\"\"+sequence.getElementAt(i);/*System.out.println(\"generated substring \"+str+\" with the following intervals: (isRightMaximal=\"+isRightMaximal+\", stackPointers[2]=\"+stackPointers[2]+\" sequence.bitsPerInt=\"+sequence.bitsPerInt+\")\");for (int x=0; x<=alphabetLength; x++) {\tSystem.out.print(\"[\"+bwtIntervals[x][0]+\"..\"+bwtIntervals[x][1]+\"] \");}System.out.println();*/\t\t\t// Right-maximality\t\t\tif (startsWithSharp) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A RIGHT-MAXIMAL SUBSTRING THAT STARTS WITH #: \"+str);\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t\tsynchronized(iteratorSubstrings) {\t\t\t\tfor (int i=0; i<=lastMinimalAbsent; i++) iteratorSubstrings.add(minimalAbsent[i][0]+str+minimalAbsent[i][1]);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestMinimalAbsentWord", "extends": "MinimalAbsentWord", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\t\tprotected Substring getInstance() {\t\t\treturn new TestBernoulliSubstring(alphabetLength,log2alphabetLength,bitsToEncodeAlphabetLength,bwtLength,log2BWTLength,bitsToEncodeBWTLength,text);\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestBernoulliSubstring", "extends": "BernoulliSubstring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "visited", "params": ["Stream", "RigidStream", "SimpleStream", "Substring", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void visited(Stream stack, RigidStream characterStack, SimpleStream pointerStack, Substring[] cache, Substring[] leftExtensions) {\t\t\tsuper.visited(stack,characterStack,pointerStack,cache,leftExtensions);\t\t\tif (length>bwtLength) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A RIGHT-MAXIMAL SUBSTRING LONGER THAN THE TEXT PLUS ONE: (length=\"+length+\")\");\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t\t// Reconstructing the sequence\t\t\tboolean startsWithSharp;\t\t\tString str;\t\t\tIntArray sequence = new IntArray((int)length,log2alphabetLength,false);\t\t\tstartsWithSharp=getSequence(characterStack,sequence);\t\t\tif (startsWithSharp) str=\"#\";\t\t\telse str=\"\";\t\t\tfor (int i=0; i<(startsWithSharp?length-1:length); i++) str+=\"\"+sequence.getElementAt(i);/*System.out.println(\"generated substring \"+str+\" with the following intervals: (isRightMaximal=\"+isRightMaximal+\", stackPointers[2]=\"+stackPointers[2]+\" sequence.bitsPerInt=\"+sequence.bitsPerInt+\")\");for (int x=0; x<=alphabetLength; x++) {\tSystem.out.print(\"[\"+bwtIntervals[x][0]+\"..\"+bwtIntervals[x][1]+\"] \");}System.out.println();*/\t\t\t// Adding $\\epsilon$\t\t\tif (length==0) {\t\t\t\tsynchronized(iteratorSubstrings) { iteratorSubstrings.add(\"\"); }\t\t\t\treturn;\t\t\t}\t\t\t// Right-maximality\t\t\tif (startsWithSharp) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A RIGHT-MAXIMAL SUBSTRING THAT STARTS WITH #: \"+str);\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t\tsynchronized(iteratorSubstrings) { iteratorSubstrings.add(str); }\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestBernoulliSubstring", "extends": "BernoulliSubstring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\t\tprotected Substring getInstance() {\t\t\treturn new TestBorderSubstring(alphabetLength,log2alphabetLength,bitsToEncodeAlphabetLength,bwtLength,log2BWTLength,bitsToEncodeBWTLength,text);\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestBorderSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "visited", "params": ["Stream", "RigidStream", "SimpleStream", "Substring", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void visited(Stream stack, RigidStream characterStack, SimpleStream pointerStack, Substring[] cache, Substring[] leftExtensions) {\t\t\tsuper.visited(stack,characterStack,pointerStack,cache,leftExtensions);\t\t\tif (length>bwtLength) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A RIGHT-MAXIMAL SUBSTRING LONGER THAN THE TEXT PLUS ONE: (length=\"+length+\")\");\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t\t// Reconstructing the sequence\t\t\tboolean startsWithSharp;\t\t\tIntArray sequence = new IntArray((int)length,log2alphabetLength,false);\t\t\tstartsWithSharp=getSequence(characterStack,sequence);\t\t\tif (startsWithSharp) str=\"#\";\t\t\telse str=\"\";\t\t\tfor (int i=0; i<(startsWithSharp?length-1:length); i++) str+=\"\"+sequence.getElementAt(i);/*computeRightContext();System.out.println(\"generated substring \"+str+\" with the following intervals: (rightContext=\"+rightContext+\")\");for (int x=0; x<=alphabetLength; x++) {\tSystem.out.print(\"[\"+bwtIntervals[x][0]+\"..\"+bwtIntervals[x][1]+\"] \");}System.out.println();*//*if (str.equals(\"0\")) {\tsynchronized(iteratorSubstringsWithBorder) {\t\tSystem.out.println(Thread.currentThread()+\">0----------------howWasInit=\"+howWasInit);\t\tSystem.out.println(\"rightCharacters:\");\t\tfor (int x=0; x<rightLength; x++) {\t\t\tSystem.out.println(\"rightCharacters[\"+x+\"]=\"+rightCharacters[x]+\" stackPointer=\"+stackPointers[MIN_POINTERS+x]);\t\t}\t\tSystem.out.println(\"longestBorder=\"+(longestBorder==null?\"null\":longestBorder.stackPointers[0])+\" length=\"+(longestBorder==null?\"\":longestBorder.length));\t\tSystem.out.println(\"stacks:\");\t\tfor (int x=0; x<characterStack.nElements(); x++) System.out.print(\"(\"+characterStack.getElementAt(x)+\",\"+pointerStack.getElementAt(x)+\") \");\t\tSystem.out.println();\t}}if (str.equals(\"00\")) {\tsynchronized(iteratorSubstringsWithBorder) {\t\tSystem.out.println(Thread.currentThread()+\">00----------------howWasInit=\"+howWasInit);\t\tSystem.out.println(\"rightCharacters:\");\t\tfor (int x=0; x<rightLength; x++) {\t\t\tSystem.out.println(\"rightCharacters[\"+x+\"]=\"+rightCharacters[x]+\" stackPointer=\"+stackPointers[MIN_POINTERS+x]);\t\t}\t\tSystem.out.println(\"longestBorder=\"+(longestBorder==null?\"null\":longestBorder.stackPointers[0])+\" length=\"+(longestBorder==null?\"\":longestBorder.length));\t\tSystem.out.println(\"stacks:\");\t\tfor (int x=0; x<characterStack.nElements(); x++) System.out.print(\"(\"+characterStack.getElementAt(x)+\",\"+pointerStack.getElementAt(x)+\") \");\t\tSystem.out.println();\t\tBorderSubstring mine = (BorderSubstring)getInstance();\t\tlong backupPointer = stack.getPosition();\t\tstack.setPosition(0);\t\twhile (stack.getPosition()<228) {\t\t\tmine.read(stack);\t\t\tSystem.out.println(\"(\"+mine.stackPointers[0]+\"|\"+mine.hasBeenExtended+\"|\"+mine.hasBeenStolen+\"|\"+mine.firstCharacter+\"|\"+mine.length+\"|\"+mine.rightLength+\"||\"+mine.stackPointers[MIN_POINTERS]);\t\t}\t\tstack.setPosition(backupPointer);\t}}if (str.equals(\"000\")) {\tsynchronized(iteratorSubstringsWithBorder) {\t\tSystem.out.println(Thread.currentThread()+\">000----------------howWasInit=\"+howWasInit+\" lbp=\"+lbp+\" suffix=\"+suff+\" rl=\"+rl);\t\tSystem.out.println(\"rightCharacters:\");\t\tfor (int x=0; x<rightLength; x++) {\t\t\tSystem.out.println(\"rightCharacters[\"+x+\"]=\"+rightCharacters[x]+\" stackPointer=\"+stackPointers[MIN_POINTERS+x]);\t\t}\t\tSystem.out.println(\"longestBorder=\"+(longestBorder==null?\"null\":longestBorder.stackPointers[0])+\" length=\"+(longestBorder==null?\"\":longestBorder.length));\t\tSystem.out.println(\"stacks:\");\t\tfor (int x=0; x<characterStack.nElements(); x++) System.out.print(\"(\"+characterStack.getElementAt(x)+\",\"+pointerStack.getElementAt(x)+\") \");\t\tSystem.out.println();\t\tBorderSubstring mine = (BorderSubstring)getInstance();\t\tlong backupPointer = stack.getPosition();\t\tstack.setPosition(0);\t\twhile (stack.getPosition()<=228) {\t\t\tmine.read(stack);\t\t\tSystem.out.println(\"(\"+mine.stackPointers[0]+\"|\"+mine.hasBeenExtended+\"|\"+mine.hasBeenStolen+\"|\"+mine.firstCharacter+\"|\"+mine.length+\"|\"+mine.rightLength+\"||\"+mine.stackPointers[MIN_POINTERS]);\t\t}\t\tstack.setPosition(backupPointer);\t}}*/\t\t\t// Adding $\\epsilon$\t\t\tif (length==0) {\t\t\t\tsynchronized(iteratorSubstringsWithBorder) { iteratorSubstringsWithBorder.add(new StringWithBorder(\"\",-1,-1,-1)); }\t\t\t\treturn;\t\t\t}\t\t\t// Right-maximality\t\t\tif (startsWithSharp) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A RIGHT-MAXIMAL SUBSTRING THAT STARTS WITH #: \"+str);\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t\tsynchronized(iteratorSubstringsWithBorder) {//System.out.println(\"{\"+longestBorderLeftCharacter+\",\"+longestBorderRightCharacter+\",\"+rightLength+\",\"+longestBorderLength+\",\"+(longestBorder==null?\"\":longestBorder.length)+\"} \"+str);\t\t\t\tif (longestBorderLength==0) iteratorSubstringsWithBorder.add(new StringWithBorder(str,0,-1,-1));\t\t\t\telse iteratorSubstringsWithBorder.add(new StringWithBorder(str,longestBorderLength,longestBorderLeftCharacter,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   longestBorderRightCharacter));\t\t\t}\t\t\tif (longestBorderLength==length) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A RIGHT-MAXIMAL SUBSTRING WITH LONGEST BORDER EQUAL TO THE SUBSTRING: \"+str+\" longestBorder.length=\"+longestBorder.length+\" longestBorderLength=\"+longestBorderLength);\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestBorderSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "compareTo", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int compareTo(Object other) {\t\t\tif (other instanceof StringWithBorder) {\t\t\t\tStringWithBorder otherSWB = (StringWithBorder)other;\t\t\t\treturn string.compareTo(otherSWB.string);\t\t\t}\t\t\telse if (other instanceof String) return string.compareTo((String)other);\t\t\treturn -1;\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "StringWithBorder", "extends": null, "implements": ["Comparable"], "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String toString() {\t\t\treturn string;\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "StringWithBorder", "extends": null, "implements": ["Comparable"], "modifiers": ["public", "static"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean equals(Object other) {\t\t\tif (other instanceof StringWithBorder) {\t\t\t\tStringWithBorder otherSWB = (StringWithBorder)other;\t\t\t\treturn string.equals(otherSWB.string);\t\t\t}\t\t\telse if (other instanceof String) return string.equals((String)other);\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "StringWithBorder", "extends": null, "implements": ["Comparable"], "modifiers": ["public", "static"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\t\tprotected Substring getInstance() {\t\t\treturn new TestRightMaximalSubstring(alphabetLength,log2alphabetLength,bitsToEncodeAlphabetLength,bwtLength,log2BWTLength,bitsToEncodeBWTLength,text);\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestRightMaximalSubstring", "extends": "RightMaximalSubstring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "visited", "params": ["Stream", "RigidStream", "SimpleStream", "Substring", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void visited(Stream stack, RigidStream characterStack, SimpleStream pointerStack, Substring[] cache, Substring[] leftExtensions) {\t\t\tsuper.visited(stack,characterStack,pointerStack,cache,leftExtensions);\t\t\tif (length>bwtLength) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A RIGHT-MAXIMAL SUBSTRING LONGER THAN THE TEXT PLUS ONE: (length=\"+length+\")\");\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t\t// Reconstructing the sequence\t\t\tboolean startsWithSharp;\t\t\tString str;\t\t\tIntArray sequence = new IntArray((int)length,log2alphabetLength,false);\t\t\tstartsWithSharp=getSequence(characterStack,sequence);\t\t\tif (startsWithSharp) str=\"#\";\t\t\telse str=\"\";\t\t\tfor (int i=0; i<(startsWithSharp?length-1:length); i++) str+=\"\"+sequence.getElementAt(i);/*System.out.println(\"generated substring \"+str+\" with the following intervals: (isRightMaximal=\"+isRightMaximal+\", stackPointers[2]=\"+stackPointers[2]+\" sequence.bitsPerInt=\"+sequence.bitsPerInt+\")\");for (int x=0; x<=alphabetLength; x++) {\tSystem.out.print(\"[\"+bwtIntervals[x][0]+\"..\"+bwtIntervals[x][1]+\"] \");}System.out.println();*/if (str.equals(\"31313\") || str.equals(\"1313\") || str.equals(\"313\") || str.equals(\"13\") || str.equals(\"3\")) {\tSystem.out.print(\"string \"+str+\" \");\tcomputeRightContext();\tSystem.out.println(\"rightContext=\"+rightContext+\" frequency=\"+frequency());\tSystem.out.println(\"bwtIntervals:\");\tfor (int x=0; x<5; x++) {\t\tSystem.out.println(bwtIntervals[x][0]+\" \"+bwtIntervals[x][1]);\t}}\t\t\t// Adding $\\epsilon$\t\t\tif (length==0) {\t\t\t\tsynchronized(iteratorSubstrings) { iteratorSubstrings.add(\"\"); }\t\t\t\treturn;\t\t\t}\t\t\t// Right-maximality\t\t\tif (startsWithSharp) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A RIGHT-MAXIMAL SUBSTRING THAT STARTS WITH #: \"+str);\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t\tsynchronized(iteratorSubstrings) { iteratorSubstrings.add(str); }\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestRightMaximalSubstring", "extends": "RightMaximalSubstring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\t\tprotected Substring getInstance() {\t\t\treturn new TestSubstring(alphabetLength,log2alphabetLength,bitsToEncodeAlphabetLength,bwtLength,log2BWTLength,bitsToEncodeBWTLength,text);\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestSubstring", "extends": "Substring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "initAfterExtending", "params": ["Substring", "int", "RigidStream", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void initAfterExtending(Substring suffix, int firstCharacter, RigidStream characterStack, int[] buffer) {\t\t\tsuper.initAfterExtending(suffix,firstCharacter,characterStack,buffer);\t\t\tif (length>bwtLength) {\t\t\t\tSystem.err.println(\"ERROR: GENERATED A SUBSTRING LONGER THAN THE TEXT PLUS ONE: (length=\"+length+\")\");\t\t\t\tSystem.err.println(\"text: \"+text);\t\t\t\tSystem.exit(1);\t\t\t}\t\t\telse if (length==0) return;  // Not counting $\\epsilon$\t\t\tboolean startsWithSharp;\t\t\tString str;\t\t\tIntArray sequence = new IntArray((int)length,log2alphabetLength,false);\t\t\tstartsWithSharp=getSequence(characterStack,sequence);\t\t\tif (startsWithSharp) str=\"#\";\t\t\telse str=\"\";\t\t\tfor (int i=0; i<(startsWithSharp?length-1:length); i++) str+=\"\"+sequence.getElementAt(i);//System.out.println(\"TestSubstring> outputting sequence \"+str);\t\t\tsynchronized(iteratorSubstrings) { iteratorSubstrings.add(str); }\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Tests.java", "stars": "2", "class": {"name": "TestSubstring", "extends": "Substring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getMapperInterface", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<T>", "snippet": "  public Class<T> getMapperInterface() {    return mapperInterface;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxyFactory.java", "stars": "15", "class": {"name": "MapperProxyFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMethodCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<Method,MapperMethodInvoker>", "snippet": "  public Map<Method, MapperMethodInvoker> getMethodCache() {    return methodCache;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxyFactory.java", "stars": "15", "class": {"name": "MapperProxyFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["MapperProxy<T>"], "throws": null, "modifiers": ["protected"], "return_type": "T", "snippet": "  protected T newInstance(MapperProxy<T> mapperProxy) {    return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxyFactory.java", "stars": "15", "class": {"name": "MapperProxyFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["SqlSession"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T newInstance(SqlSession sqlSession) {    final MapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface, methodCache);    return newInstance(mapperProxy);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxyFactory.java", "stars": "15", "class": {"name": "MapperProxyFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void draw(int mouseX, int mouseY, float partialTicks) {        frames.forEach(frame -> frame.drawScreen(mouseX, mouseY, partialTicks));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/ModulesPanel.java", "stars": "12", "class": {"name": "ModulesPanel", "extends": "Panel", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseClicked(final int mouseX, final int mouseY, final int mouseButton) {        frames.forEach(frame -> frame.mouseClicked(mouseX, mouseY, mouseButton));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/ModulesPanel.java", "stars": "12", "class": {"name": "ModulesPanel", "extends": "Panel", "implements": null, "modifiers": ["public"]}}, {"method_name": "keyTyped", "params": ["char", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyTyped(final char typedChar, final int keyCode) {        frames.forEach(frame -> frame.keyTyped(typedChar, keyCode));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/ModulesPanel.java", "stars": "12", "class": {"name": "ModulesPanel", "extends": "Panel", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseReleased", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseReleased(final int mouseX, final int mouseY, final int state) {        frames.forEach(frame -> frame.mouseReleased(mouseX, mouseY, state));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/ModulesPanel.java", "stars": "12", "class": {"name": "ModulesPanel", "extends": "Panel", "implements": null, "modifiers": ["public"]}}, {"method_name": "onGuiClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onGuiClosed() {        frames.forEach(frame -> {            frame.onGuiClosed();            frame.setDragging(false);        });    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/ModulesPanel.java", "stars": "12", "class": {"name": "ModulesPanel", "extends": "Panel", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseFile", "params": ["String", "String"], "throws": ["FatalParsingException"], "modifiers": ["public"], "return_type": "TimedTextObject", "snippet": "    public TimedTextObject parseFile(String fileName, String[] inputString) throws FatalParsingException {        TimedTextObject tto = new TimedTextObject();        tto.fileName = fileName;        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();        DocumentBuilder dBuilder;        try {            dBuilder = dbFactory.newDocumentBuilder();            Document doc = dBuilder.parse(new InputSource(new StringReader(join(inputString, \"\\n\"))));            doc.getDocumentElement().normalize();            //we recover the metadata            Node node = doc.getElementsByTagName(\"ttm:title\").item(0);            if (node != null) tto.title = node.getTextContent();            node = doc.getElementsByTagName(\"ttm:copyright\").item(0);            if (node != null) tto.copyright = node.getTextContent();            node = doc.getElementsByTagName(\"ttm:desc\").item(0);            if (node != null) tto.description = node.getTextContent();            //we recover the styles            NodeList styleN = doc.getElementsByTagName(\"style\");            //we recover the timed text elements            NodeList captionsN = doc.getElementsByTagName(\"p\");            //regions of the layout could also be recovered this way            tto.warnings += \"Styling attributes are only recognized inside a style definition, to be referenced later in the captions.\\n\\n\";            //we parse the styles            for (int i = 0; i < styleN.getLength(); i++) {                Style style = new Style(Style.defaultID());                node = styleN.item(i);                NamedNodeMap attr = node.getAttributes();                //we get the id                Node currentAtr = attr.getNamedItem(\"id\");                if (currentAtr != null)                    style.iD = currentAtr.getNodeValue();                currentAtr = attr.getNamedItem(\"xml:id\");                if (currentAtr != null)                    style.iD = currentAtr.getNodeValue();                //we get the style it may be based upon                currentAtr = attr.getNamedItem(\"style\");                if (currentAtr != null)                    if (tto.styling.containsKey(currentAtr.getNodeValue()))                        style = new Style(style.iD, tto.styling.get(currentAtr.getNodeValue()));                //we check for background color                currentAtr = attr.getNamedItem(\"tts:backgroundColor\");                if (currentAtr != null)                    style.backgroundColor = parseColor(currentAtr.getNodeValue(), tto);                //we check for color                currentAtr = attr.getNamedItem(\"tts:color\");                if (currentAtr != null)                    style.color = parseColor(currentAtr.getNodeValue(), tto);                //we check for font family                currentAtr = attr.getNamedItem(\"tts:fontFamily\");                if (currentAtr != null)                    style.font = currentAtr.getNodeValue();                //we check for font size                currentAtr = attr.getNamedItem(\"tts:fontSize\");                if (currentAtr != null)                    style.fontSize = currentAtr.getNodeValue();                //we check for italics                currentAtr = attr.getNamedItem(\"tts:fontStyle\");                if (currentAtr != null)                    if (currentAtr.getNodeValue().equalsIgnoreCase(\"italic\") || currentAtr.getNodeValue().equalsIgnoreCase(\"oblique\"))                        style.italic = true;                    else if (currentAtr.getNodeValue().equalsIgnoreCase(\"normal\"))                        style.italic = false;                //we check for bold                currentAtr = attr.getNamedItem(\"tts:fontWeight\");                if (currentAtr != null)                    if (currentAtr.getNodeValue().equalsIgnoreCase(\"bold\"))                        style.bold = true;                    else if (currentAtr.getNodeValue().equalsIgnoreCase(\"normal\"))                        style.bold = false;                //we check opacity (to set the alpha)                currentAtr = attr.getNamedItem(\"tts:opacity\");                if (currentAtr != null) {                    try {                        //a number between 1.0 and 0                        float alpha = Float.parseFloat(currentAtr.getNodeValue());                        if (alpha > 1)                            alpha = 1;                        else if (alpha < 0)                            alpha = 0;                        String aa = Integer.toHexString((int) (alpha * 255));                        if (aa.length() < 2)                            aa = \"0\" + aa;                        style.color = style.color.substring(0, 6) + aa;                        style.backgroundColor = style.backgroundColor.substring(0, 6) + aa;                    } catch (NumberFormatException e) {                        //ignore the alpha                    }                }                //we check for text align                currentAtr = attr.getNamedItem(\"tts:textAlign\");                if (currentAtr != null)                    if (currentAtr.getNodeValue().equalsIgnoreCase(\"left\") || currentAtr.getNodeValue().equalsIgnoreCase(\"start\"))                        style.textAlign = \"bottom-left\";                    else if (currentAtr.getNodeValue().equalsIgnoreCase(\"right\") || currentAtr.getNodeValue().equalsIgnoreCase(\"end\"))                        style.textAlign = \"bottom-right\";                //we check for underline                currentAtr = attr.getNamedItem(\"tts:textDecoration\");                if (currentAtr != null)                    if (currentAtr.getNodeValue().equalsIgnoreCase(\"underline\"))                        style.underline = true;                    else if (currentAtr.getNodeValue().equalsIgnoreCase(\"noUnderline\"))                        style.underline = false;                //we add the style                tto.styling.put(style.iD, style);            }            //we parse the captions            for (int i = 0; i < captionsN.getLength(); i++) {                Caption caption = new Caption();                caption.content = \"\";                boolean validCaption = true;                node = captionsN.item(i);                NamedNodeMap attr = node.getAttributes();                //we get the begin time                Node currentAtr = attr.getNamedItem(\"begin\");                //if no begin is present, 0 is assumed                caption.start = new Time(\"\", \"\");                caption.end = new Time(\"\", \"\");                if (currentAtr != null)                    caption.start.mseconds = parseTimeExpression(currentAtr.getNodeValue(), tto, doc);                //we get the end time, if present, duration is ignored, otherwise end is calculated from duration                currentAtr = attr.getNamedItem(\"end\");                if (currentAtr != null)                    caption.end.mseconds = parseTimeExpression(currentAtr.getNodeValue(), tto, doc);                else {                    currentAtr = attr.getNamedItem(\"dur\");                    if (currentAtr != null)                        caption.end.mseconds = caption.start.mseconds + parseTimeExpression(currentAtr.getNodeValue(), tto, doc);                    else                        //no end or duration, invalid format, caption is discarded                        validCaption = false;                }                //we get the style                currentAtr = attr.getNamedItem(\"style\");                if (currentAtr != null) {                    Style style = tto.styling.get(currentAtr.getNodeValue());                    if (style != null)                        caption.style = style;                    else                        //unrecognized style                        tto.warnings += \"unrecoginzed style referenced: \" + currentAtr.getNodeValue() + \"\\n\\n\";                }                //we save the text                NodeList textN = node.getChildNodes();                for (int j = 0; j < textN.getLength(); j++) {                    if (textN.item(j).getNodeName().equals(\"#text\"))                        caption.content += textN.item(j).getTextContent().trim();                    else if (textN.item(j).getNodeName().equals(\"br\"))                        caption.content += \"<br />\";                }                //is this check worth it?                if (caption.content.replaceAll(\"<br />\", \"\").trim().isEmpty())                    validCaption = false;                //and save the caption                if (validCaption) {                    int key = caption.start.mseconds;                    //in case the key is already there, we increase it by a millisecond, since no duplicates are allowed                    while (tto.captions.containsKey(key)) key++;                    tto.captions.put(key, caption);                }            }        } catch (Exception e) {            e.printStackTrace();            //this could be a fatal error...            throw new FatalParsingException(\"Error during parsing: \" + e.getMessage());        }        tto.built = true;        return tto;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatTTML.java", "stars": "4", "class": {"name": "FormatTTML", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "toFile", "params": ["TimedTextObject"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] toFile(TimedTextObject tto) {        //first we check if the TimedTextObject had been built, otherwise...        if (!tto.built)            return null;        //we will write the lines in an ArrayList        int index = 0;        //the minimum size of the file is the number of captions and styles + lines for sections and formats and the metadata, so we'll take some extra space.        ArrayList<String> file = new ArrayList<>(30 + tto.styling.size() + tto.captions.size());        //identification line is placed        file.add(index++, \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");        //root element is placed        file.add(index++, \"<tt xml:lang=\\\"\" + tto.language + \"\\\" xmlns=\\\"http://www.w3.org/ns/ttml\\\" xmlns:tts=\\\"http://www.w3.org/ns/ttml#styling\\\">\");        //head        file.add(index++, \"\\t<head>\");        //metadata        file.add(index++, \"\\t\\t<metadata xmlns:ttm=\\\"http://www.w3.org/ns/ttml#metadata\\\">\");        //title        String title;        if (tto.title == null || tto.title.isEmpty())            title = tto.fileName;        else title = tto.title;        file.add(index++, \"\\t\\t\\t<ttm:title>\" + title + \"</ttm:title>\");        //Copyright        if (tto.copyright != null && !tto.copyright.isEmpty())            file.add(index++, \"\\t\\t\\t<ttm:copyright>\" + tto.copyright + \"</ttm:copyright>\");        //additional info        String desc = \"Converted by the Online Subtitle Converter developed by J. David Requejo\\n\";        if (tto.author != null && !tto.author.isEmpty())            desc += \"\\n Original file by: \" + tto.author + \"\\n\";        if (tto.description != null && !tto.description.isEmpty())            desc += tto.description + \"\\n\";        file.add(index++, \"\\t\\t\\t<ttm:desc>\" + desc + \"\\t\\t\\t</ttm:desc>\");        //metadata closes        file.add(index++, \"\\t\\t</metadata>\");        //styling opens        file.add(index++, \"\\t\\t<styling>\");        String line;        //Next we iterate over the styles        for (Style style : tto.styling.values()) {            //we add the attributes            line = \"\\t\\t\\t<style xml:id=\\\"\" + style.iD + \"\\\"\";            if (style.color != null)                line += \" tts:color=\\\"#\" + style.color + \"\\\"\";            if (style.backgroundColor != null)                line += \" tts:backgroundColor=\\\"#\" + style.backgroundColor + \"\\\"\";            if (style.font != null)                line += \" tts:fontFamily=\\\"\" + style.font + \"\\\"\";            if (style.fontSize != null)                line += \" tts:fontSize=\\\"\" + style.fontSize + \"\\\"\";            if (style.italic)                line += \" tts:fontStyle=\\\"italic\\\"\";            if (style.bold)                line += \" tts:fontWeight=\\\"bold\\\"\";            line += \" tts:textAlign=\\\"\";            if (style.textAlign.contains(\"left\"))                line += \"left\\\"\";            else if (style.textAlign.contains(\"right\"))                line += \"rigth\\\"\";            else line += \"center\\\"\";            if (style.underline)                line += \" tts:textDecoration=\\\"underline\\\"\";            //style is ready, we close it.            line += \" />\";            //we insert it            file.add(index++, line);        }        //styling closes        file.add(index++, \"\\t\\t</styling>\");        //head closes        file.add(index++, \"\\t</head>\");        //body opens        file.add(index++, \"\\t<body>\");        //unique div opens        file.add(index++, \"\\t\\t<div>\");        //Next we iterate over the captions        for (Caption caption : tto.captions.values()) {            //we open the subtitle line            line = \"\\t\\t\\t<p begin=\\\"\" + caption.start.getTime(\"hh:mm:ss,ms\").replace(',', '.') + \"\\\"\";            line += \" end=\\\"\" + caption.end.getTime(\"hh:mm:ss,ms\").replace(',', '.') + \"\\\"\";            if (caption.style != null)                line += \" style=\\\"\" + caption.style.iD + \"\\\"\";            //attributes are done being inserted, if region was implemented it should be added before this.            line += \" >\" + caption.content + \"</p>\\n\";            //we write the line            file.add(index++, line);        }        //unique div closes        file.add(index++, \"\\t\\t</div>\");        //body closes        file.add(index++, \"\\t</body>\");        //root closes        file.add(index++, \"</tt>\");        //an empty line is added        file.add(index++, \"\");        String[] toReturn = new String[file.size()];        for (int i = 0; i < toReturn.length; i++) {            toReturn[i] = file.get(i);        }        return toReturn;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatTTML.java", "stars": "4", "class": {"name": "FormatTTML", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseColor", "params": ["String", "TimedTextObject"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String parseColor(String color, TimedTextObject tto) {        String value = \"\";        String[] values;        if (color.startsWith(\"#\")) {            if (color.length() == 7)                value = color.substring(1) + \"ff\";            else if (color.length() == 9)                value = color.substring(1);            else {                //unrecognized format                value = \"ffffffff\";                tto.warnings += \"Unrecoginzed format: \" + color + \"\\n\\n\";            }        } else if (color.startsWith(\"rgb\")) {            boolean alpha = false;            if (color.startsWith(\"rgba\"))                alpha = true;            try {                values = color.split(\"\\\\(\")[1].split(\",\");                int r, g, b, a = 255;                r = Integer.parseInt(values[0]);                g = Integer.parseInt(values[1]);                b = Integer.parseInt(values[2].substring(0, 2));                if (alpha) a = Integer.parseInt(values[3].substring(0, 2));                values[0] = Integer.toHexString(r);                values[1] = Integer.toHexString(g);                values[2] = Integer.toHexString(b);                if (alpha) values[2] = Integer.toHexString(a);                for (int i = 0; i < values.length; i++) {                    if (values[i].length() < 2)                        values[i] = \"0\" + values[i];                    value += values[i];                }                if (!alpha)                    value += \"ff\";            } catch (Exception e) {                value = \"ffffffff\";                tto.warnings += \"Unrecoginzed color: \" + color + \"\\n\\n\";            }        } else {            //it should be a named color so...            value = Style.getRGBValue(\"name\", color);            //if not recognized named color            if (value == null || value.isEmpty()) {                value = \"ffffffff\";                tto.warnings += \"Unrecoginzed color: \" + color + \"\\n\\n\";            }        }        return value;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatTTML.java", "stars": "4", "class": {"name": "FormatTTML", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseTimeExpression", "params": ["String", "TimedTextObject", "Document"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int parseTimeExpression(String timeExpression, TimedTextObject tto, Document doc) {        int mSeconds = 0;        if (timeExpression.contains(\":\")) {            //it is a clock time            String[] parts = timeExpression.split(\":\");            if (parts.length == 3) {                //we have h:m:s.fraction                int h, m;                float s;                h = Integer.parseInt(parts[0]);                m = Integer.parseInt(parts[1]);                s = Float.parseFloat(parts[2]);                mSeconds = h * 3600000 + m * 60000 + (int) (s * 1000);            } else if (parts.length == 4) {                //we have h:m:s:f.fraction                int h, m, s;                float f;                int frameRate = 25;                //we recover the frame rate                Node n = doc.getElementsByTagName(\"ttp:frameRate\").item(0);                if (n != null) {                    //used as auxiliary string                    String aux = n.getNodeValue();                    try {                        frameRate = Integer.parseInt(aux);                    } catch (NumberFormatException e) {                        //should not happen, but if it does, use default value...                    }                }                h = Integer.parseInt(parts[0]);                m = Integer.parseInt(parts[1]);                s = Integer.parseInt(parts[2]);                f = Float.parseFloat(parts[3]);                mSeconds = h * 3600000 + m * 60000 + s * 1000 + (int) (f * 1000 / frameRate);            } else {                Timber.w(\"Unrecognized clock time format\");            }        } else {            //it is an offset - time, this is composed of a number and a metric            String metric = timeExpression.substring(timeExpression.length() - 1);            timeExpression = timeExpression.substring(0, timeExpression.length() - 1).replace(',', '.').trim();            double time;            try {                time = Double.parseDouble(timeExpression);                if (metric.equalsIgnoreCase(\"h\"))                    mSeconds = (int) (time * 3600000);                else if (metric.equalsIgnoreCase(\"m\"))                    mSeconds = (int) (time * 60000);                else if (metric.equalsIgnoreCase(\"s\"))                    mSeconds = (int) (time * 1000);                else if (metric.equalsIgnoreCase(\"ms\"))                    mSeconds = (int) time;                else if (metric.equalsIgnoreCase(\"f\")) {                    int frameRate;                    //we recover the frame rate                    Node n = doc.getElementsByTagName(\"ttp:frameRate\").item(0);                    if (n != null) {                        //used as auxiliary string                        String s = n.getNodeValue();                        frameRate = Integer.parseInt(s);                        mSeconds = (int) (time * 1000 / frameRate);                    }                } else if (metric.equalsIgnoreCase(\"t\")) {                    int tickRate;                    //we recover the tick rate                    Node n = doc.getElementsByTagName(\"ttp:tickRate\").item(0);                    if (n != null) {                        //used as auxiliary string                        String s = n.getNodeValue();                        tickRate = Integer.parseInt(s);                        mSeconds = (int) (time * 1000 / tickRate);                    }                } else {                    Timber.w(\"Imvalid metric\");                }            } catch (NumberFormatException e) {                //incorrect format for offset time            }        }        return mSeconds;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatTTML.java", "stars": "4", "class": {"name": "FormatTTML", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "newBuilder", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "LettuceRedis<Object,Object>", "snippet": "  public static LettuceRedis<Object, Object> newBuilder() {    return new LettuceRedis<>();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "redisURI", "params": ["RedisURI"], "throws": null, "modifiers": ["public"], "return_type": "LettuceRedis<K,V>", "snippet": "  public LettuceRedis<K, V> redisURI(RedisURI redisURI) {    requireNonNull(redisURI, \"The Redis uri configuration of redis is required.\");    requireState(redisURI.getPort() >= 0 && redisURI.getPort() <= 65533,            \"Port number must be available: %s\", redisURI.getPort());    Integer port = Objects.requireNonNullElse(redisURI.getPort(), withPort);    redisURI.setPort(port);    this.redisUri = redisURI;    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "withPort", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "LettuceRedis<K,V>", "snippet": "  public LettuceRedis<K, V> withPort(int withPort) {    requireState(withPort >= 0 && withPort <= 65533,            \"Port number must be available: %s\", withPort);    this.withPort = withPort;    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "withHost", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "LettuceRedis<K,V>", "snippet": "  public LettuceRedis<K, V> withHost(String withHost) {    requireNonNull(withHost, \"The connection address of redis is required.\");    if (withHost.contains(\":\")) {      String[] split = withHost.split(\":\");      if (split[0].contains(\".\")) this.withHost = split[0];    }    this.withHost = withHost;    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "withTimeout", "params": ["Duration"], "throws": null, "modifiers": ["public"], "return_type": "LettuceRedis<K,V>", "snippet": "  public LettuceRedis<K, V> withTimeout(Duration duration) {    requireNonNull(duration, \"Tne with timeout of redis is required. \");    this.withTimeout = duration;    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RedisCommands<K1,V1>", "snippet": "  public <K1 extends K, V1 extends V> RedisCommands<K1, V1> build() {    StatefulRedisConnection<K1, V1> connection = getGenericConnection();    return connection.sync();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildAsync", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RedisAsyncCommands<K1,V1>", "snippet": "  public <K1 extends K, V1 extends V> RedisAsyncCommands<K1, V1> buildAsync() {    StatefulRedisConnection<K1, V1> connection = getGenericConnection();    return connection.async();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildReactive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RedisReactiveCommands<K1,V1>", "snippet": "  public <K1 extends K, V1 extends V> RedisReactiveCommands<K1, V1> buildReactive() {    StatefulRedisConnection<K1, V1> connection = getGenericConnection();    return connection.reactive();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGenericConnection", "params": [], "throws": null, "modifiers": ["private"], "return_type": "StatefulRedisConnection<K1,V1>", "snippet": "  private <K1 extends K, V1 extends V> StatefulRedisConnection<K1, V1> getGenericConnection() {    RedisCodec<K1, V1> redisCodec = new LettuceRedisCodec<>();    StatefulRedisConnection<K1, V1> connect = redisClient.connect(redisCodec);    this.connection = connect;    return connect;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void release() {    if (!Objects.isNull(connection)) {      this.connection.close();      this.redisClient.shutdown();    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/LettuceRedis.java", "stars": "3", "class": {"name": "LettuceRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onFileChange", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFileChange(File file) {        log.info(\"{} is changed\", file.getPath());        Site site = null;        try {            site = Site.load(file.getPath());        } catch (Exception e) {            log.error(e.getMessage());        }        if (Objects.nonNull(site)) {            Bored.env().setSiteConfig(site);        }        log.info(\"{} is reload\", file.getPath());    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/listen/ConfigListener.java", "stars": "2", "class": {"name": "ConfigListener", "extends": "FileAlterationListenerAdaptor", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "\tpublic Long getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(Long id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEstado", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getEstado() {\t\treturn estado;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEstado", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setEstado(String estado) {\t\tthis.estado = estado;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCidade", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getCidade() {\t\treturn cidade;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCidade", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCidade(String cidade) {\t\tthis.cidade = cidade;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCep", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getCep() {\t\treturn cep;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCep", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCep(String cep) {\t\tthis.cep = cep;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumero", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getNumero() {\t\treturn numero;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNumero", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setNumero(Integer numero) {\t\tthis.numero = numero;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogradouro", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getLogradouro() {\t\treturn logradouro;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogradouro", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setLogradouro(String logradouro) {\t\tthis.logradouro = logradouro;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getComplemento", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getComplemento() {\t\treturn complemento;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setComplemento", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setComplemento(String complemento) {\t\tthis.complemento = complemento;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int hashCode() {\t\tfinal int prime = 31;\t\tint result = 1;\t\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean equals(Object obj) {\t\tif (this == obj)\t\t\treturn true;\t\tif (obj == null)\t\t\treturn false;\t\tif (getClass() != obj.getClass())\t\t\treturn false;\t\tEndereco other = (Endereco) obj;\t\tif (id == null) {\t\t\tif (other.id != null)\t\t\t\treturn false;\t\t} else if (!id.equals(other.id))\t\t\treturn false;\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Endereco.java", "stars": "1", "class": {"name": "Endereco", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "injectCbtModels", "params": ["Profiler", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void injectCbtModels(Profiler on, String str) {\t\ton.swap(\"ctm\");\t\tList<CTMConfig> data = new ArrayList<>();\t\tCollection<Identifier> propertiesIds = resourceManager.findResources(\"optifine/ctm\", s -> s.endsWith(\".properties\"));\t\tfor(Identifier id : propertiesIds) {\t\t\ttry {\t\t\t\tdata.add(CTMConfig.load(id, resourceManager));\t\t\t} catch(Exception e) {\t\t\t\tConnectedBlockTextures.LOGGER.error(\"Error loading connected textures config at \" + id, e);\t\t\t}\t\t}\t\t\t\tMutableCachingSupplier<Collection<SpriteIdentifier>> textureCached = new MutableCachingSupplier<>();\t\tunbakedModels.forEach((id, model) -> {\t\t\tif(id instanceof ModelIdentifier) {\t\t\t\tModelIdentifier modelId = (ModelIdentifier) id;\t\t\t\tif(!modelId.getVariant().equals(\"inventory\")) {\t\t\t\t\tSortedSet<CTMConfig> configs = new TreeSet<>();\t\t\t\t\ttextureCached.set(() -> model.getTextureDependencies(((ModelLoader) (Object) this)::getOrLoadModel, VoidSet.get()));\t\t\t\t\tfor(CTMConfig c : data) {\t\t\t\t\t\ttry {\t\t\t\t\t\t\tif(c.affectsModel(modelId, textureCached) && CBTUtil.allMatchThrowable(textureCached.get(), s -> checkPack(s, c.getResourcePackPriority()))) {\t\t\t\t\t\t\t\tconfigs.add(c);\t\t\t\t\t\t\t}\t\t\t\t\t\t} catch (IOException e) {\t\t\t\t\t\t\tConnectedBlockTextures.LOGGER.error(\"Error checking resource pack priority\", e);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tif(!configs.isEmpty()) {\t\t\t\t\t\tUnbakedModel newModel = new CBTUnbakedModel(model, configs.toArray(new CTMConfig[configs.size()]));\t\t\t\t\t\tunbakedModels.put(id, newModel);\t\t\t\t\t\tmodelsToBake.put(id, newModel);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t});\t\ton.swap(str);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/mixin/ModelLoaderMixin.java", "stars": "3", "class": {"name": "ModelLoaderMixin", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "checkPack", "params": ["SpriteIdentifier", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean checkPack(SpriteIdentifier spriteId, int ctmPackPriority) throws IOException {\t\tIdentifier texId = spriteId.getTextureId();\t\tString spritePack = resourceManager.getResource(new Identifier(texId.getNamespace(), \"textures/\" + texId.getPath() + \".png\")).getResourcePackName();\t\treturn ConnectedBlockTextures.RESOURCE_PACK_PRIORITY_MAP.getInt(spritePack) <= ctmPackPriority;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/mixin/ModelLoaderMixin.java", "stars": "3", "class": {"name": "ModelLoaderMixin", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getItemCount ()\t{\t\treturn n_getItemCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getItemCount ();\tpublic void onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0)\t{\t\tn_onViewRecycled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onViewRecycled", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0)\t{\t\tn_onViewRecycled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onViewRecycled", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0);\tpublic void onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1)\t{\t\tn_onBindViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1)\t{\t\tn_onBindViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onBindViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1);\tpublic android.support.v7.widget.RecyclerView.ViewHolder onCreateViewHolder (android.view.ViewGroup p0, int p1)\t{\t\treturn n_onCreateViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.support.v7.widget.RecyclerView.ViewHolder onCreateViewHolder (android.view.ViewGroup p0, int p1)\t{\t\treturn n_onCreateViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onCreateViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.support.v7.widget.RecyclerView.ViewHolder n_onCreateViewHolder (android.view.ViewGroup p0, int p1);\tpublic int getItemViewType (int p0)\t{\t\treturn n_getItemViewType (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getItemViewType (int p0)\t{\t\treturn n_getItemViewType (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemViewType", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getItemViewType (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EmptyViewAdapter.java", "stars": "2", "class": {"name": "EmptyViewAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getErrCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getErrCode() {        return businessError.getErrCode();    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/error/BusinessException.java", "stars": "1", "class": {"name": "BusinessException", "extends": "Exception", "implements": ["CommonError"], "modifiers": ["public"]}}, {"method_name": "getErrMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getErrMsg() {        return businessError.getErrMsg();    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/error/BusinessException.java", "stars": "1", "class": {"name": "BusinessException", "extends": "Exception", "implements": ["CommonError"], "modifiers": ["public"]}}, {"method_name": "setErrMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "CommonError", "snippet": "    public CommonError setErrMsg(String errMsg) {        this.businessError.setErrMsg(errMsg);        return this;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/error/BusinessException.java", "stars": "1", "class": {"name": "BusinessException", "extends": "Exception", "implements": ["CommonError"], "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["Record", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Record", "snippet": "    public Record evaluate(Record record, Object... paras) {        if (groovyTransformer == null) {            //\u5168\u5c40\u552f\u4e00            if (paras.length < 1 || paras.length > 2) {                throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_ILLEGAL_PARAMETER, \"dx_groovy paras must be 1 or 2 . now paras is: \" + Arrays.asList(paras).toString());            }            synchronized (this) {                if (groovyTransformer == null) {                    String code = (String) paras[0];                    @SuppressWarnings(\"unchecked\") List<String> extraPackage = paras.length == 2 ? (List<String>) paras[1] : null;                    initGroovyTransformer(code, extraPackage);                }            }        }        return this.groovyTransformer.evaluate(record);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/GroovyTransformer.java", "stars": "23", "class": {"name": "GroovyTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "initGroovyTransformer", "params": ["String", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initGroovyTransformer(String code, List<String> extraPackage) {        GroovyClassLoader loader = new GroovyClassLoader(GroovyTransformer.class.getClassLoader());        String groovyRule = getGroovyRule(code, extraPackage);        Class groovyClass;        try {            groovyClass = loader.parseClass(groovyRule);        } catch (CompilationFailedException cfe) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_GROOVY_INIT_EXCEPTION, cfe);        }        try {            Object t = groovyClass.newInstance();            if (!(t instanceof Transformer)) {                throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_GROOVY_INIT_EXCEPTION, \"datax bug! contact askdatax\");            }            this.groovyTransformer = (Transformer) t;        } catch (Throwable ex) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_GROOVY_INIT_EXCEPTION, ex);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/GroovyTransformer.java", "stars": "23", "class": {"name": "GroovyTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGroovyRule", "params": ["String", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getGroovyRule(String expression, List<String> extraPackagesStrList) {        StringBuffer sb = new StringBuffer();        if (extraPackagesStrList != null) {            for (String extraPackagesStr : extraPackagesStrList) {                if (StringUtils.isNotEmpty(extraPackagesStr)) {                    sb.append(extraPackagesStr);                }            }        }        sb.append(\"import static com.alibaba.datax.core.transport.transformer.GroovyTransformerStaticUtil.*;\");        sb.append(\"import com.alibaba.datax.common.element.*;\");        sb.append(\"import DataXException;\");        sb.append(\"import Transformer;\");        sb.append(\"import java.util.*;\");        sb.append(\"static class RULE extends Transformer\").append(\"{\");        sb.append(\"static Record evaluate(Record record, Object... paras) {\");        sb.append(expression);        sb.append(\"}}\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/GroovyTransformer.java", "stars": "23", "class": {"name": "GroovyTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, DATE, null);    verify(ps).setTimestamp(1, new java.sql.Timestamp(DATE.getTime()));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateTypeHandlerTest.java", "stars": "15", "class": {"name": "DateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getTimestamp(\"column\")).thenReturn(TIMESTAMP);    assertEquals(DATE, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateTypeHandlerTest.java", "stars": "15", "class": {"name": "DateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getTimestamp(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateTypeHandlerTest.java", "stars": "15", "class": {"name": "DateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getTimestamp(1)).thenReturn(TIMESTAMP);    assertEquals(DATE, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateTypeHandlerTest.java", "stars": "15", "class": {"name": "DateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getTimestamp(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateTypeHandlerTest.java", "stars": "15", "class": {"name": "DateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getTimestamp(1)).thenReturn(TIMESTAMP);    assertEquals(DATE, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateTypeHandlerTest.java", "stars": "15", "class": {"name": "DateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getTimestamp(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateTypeHandlerTest.java", "stars": "15", "class": {"name": "DateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "onApplicationEvent", "params": ["ContextRefreshedEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onApplicationEvent(ContextRefreshedEvent event) {        log.info(\">>>>>>>>>>>>>>>> refresh applicationContext,Hello World: \" + event.getApplicationContext().getId() +                \", timestamp: \" + event.getTimestamp());    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/listener/HelloWorldApplicationListener.java", "stars": "3", "class": {"name": "HelloWorldApplicationListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoads() {\t}", "url": "https://raw.githubusercontent.com/chandureddys/spring-boot-doc-appointment/master/src/test/java/com/docappointment/project/DocAppointmentApplicationTests.java", "stars": "2", "class": {"name": "DocAppointmentApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getNodeId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getNodeId() {        return nodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTab.java", "stars": "23", "class": {"name": "ExecNodeTab", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNodeId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNodeId(Integer nodeId) {        this.nodeId = nodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTab.java", "stars": "23", "class": {"name": "ExecNodeTab", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTabId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getTabId() {        return tabId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTab.java", "stars": "23", "class": {"name": "ExecNodeTab", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTabId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTabId(Integer tabId) {        this.tabId = tabId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTab.java", "stars": "23", "class": {"name": "ExecNodeTab", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTabName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTabName() {        return tabName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTab.java", "stars": "23", "class": {"name": "ExecNodeTab", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTabName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTabName(String tabName) {        this.tabName = tabName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTab.java", "stars": "23", "class": {"name": "ExecNodeTab", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTab.java", "stars": "23", "class": {"name": "ExecNodeTab", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Date createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTab.java", "stars": "23", "class": {"name": "ExecNodeTab", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        RedisDelayQueue redisDelay = new RedisDelayQueue();        redisDelay.pushOrderQueue();        redisDelay.pollOrderQueue();        redisDelay.deleteZSet();    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/redis/RedisDelayQueue.java", "stars": "7", "class": {"name": "RedisDelayQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteZSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteZSet() {        Jedis jedis = jedisPool.getResource();        jedis.del(DELAY_QUEUE);    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/redis/RedisDelayQueue.java", "stars": "7", "class": {"name": "RedisDelayQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pushOrderQueue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pushOrderQueue() {        Jedis jedis = jedisPool.getResource();        Calendar cal1 = Calendar.getInstance();        cal1.add(Calendar.SECOND, 10);        int order1 = (int) (cal1.getTimeInMillis() / 1000);        Calendar cal2 = Calendar.getInstance();        cal2.add(Calendar.SECOND, 20);        int order2 = (int) (cal2.getTimeInMillis() / 1000);        Calendar cal3 = Calendar.getInstance();        cal3.add(Calendar.SECOND, 30);        int order3 = (int) (cal3.getTimeInMillis() / 1000);        jedis.zadd(DELAY_QUEUE, order1, \"order1\");        jedis.zadd(DELAY_QUEUE, order2, \"order2\");        jedis.zadd(DELAY_QUEUE, order3, \"order3\");        System.out.println(sdf.format(new Date()) + \" add finished.\");    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/redis/RedisDelayQueue.java", "stars": "7", "class": {"name": "RedisDelayQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pollOrderQueue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pollOrderQueue() {        Jedis jedis = jedisPool.getResource();        while (true) {            Set<Tuple> set = jedis.zrangeWithScores(DELAY_QUEUE, 0, 0);            String value = ((Tuple) set.toArray()[0]).getElement();            int score = (int) ((Tuple) set.toArray()[0]).getScore();            Calendar cal = Calendar.getInstance();            int nowSecond = (int) (cal.getTimeInMillis() / 1000);            if (nowSecond >= score) {                jedis.zrem(DELAY_QUEUE, value);                System.out.println(sdf.format(new Date()) + \" removed key:\" + value);            }            if (jedis.zcard(DELAY_QUEUE) <= 0) {                System.out.println(sdf.format(new Date()) + \" zset empty \");                return;            }            try {                Thread.sleep(1000);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/redis/RedisDelayQueue.java", "stars": "7", "class": {"name": "RedisDelayQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ViewRenderer_2.java", "stars": "2", "class": {"name": "ViewRenderer_2", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ViewRenderer_2.java", "stars": "2", "class": {"name": "ViewRenderer_2", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "testHandleLeasingWebhook", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testHandleLeasingWebhook() {        when(stripeService.checkWebhookSignature(any())).thenReturn(Optional.empty());        stripeWebhookService.handleLeasingWebhook(\"test\", \"signature handler\");        verify(stripeService).checkWebhookSignature(any());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/StripeWebhookServiceTest.java", "stars": "2", "class": {"name": "StripeWebhookServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMusic", "params": ["MusicEntity"], "throws": null, "modifiers": ["public"], "return_type": "MusicEntity", "snippet": "\t@Override public MusicEntity createMusic(MusicEntity musicEntity) {\t\tentityManager.persist(musicEntity);\t\treturn musicEntity;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/dao/MusicDaoImpl.java", "stars": "2", "class": {"name": "MusicDaoImpl", "extends": null, "implements": ["MusicDao"], "modifiers": ["public"]}}, {"method_name": "getUserAuthToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "UserAuthTokenEntity", "snippet": "\t@Override public UserAuthTokenEntity getUserAuthToken(String accesstoken) {\t\ttry {\t\t\treturn entityManager.createNamedQuery(\"userAuthTokenByAccessToken\", UserAuthTokenEntity.class)\t\t\t\t\t.setParameter(\"accessToken\", accesstoken).getSingleResult();\t\t} catch (NoResultException nre) {\t\t\treturn null;\t\t}\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/dao/MusicDaoImpl.java", "stars": "2", "class": {"name": "MusicDaoImpl", "extends": null, "implements": ["MusicDao"], "modifiers": ["public"]}}, {"method_name": "getMusic", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MusicEntity", "snippet": "\t@Override public MusicEntity getMusic(String musicUuid) {\t\ttry {\t\t\treturn entityManager.createNamedQuery(\"MusicEntityByUuid\", MusicEntity.class)\t\t\t\t\t.setParameter(\"uuid\", musicUuid).getSingleResult();\t\t} catch (NoResultException nre) {\t\t\treturn null;\t\t}\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/dao/MusicDaoImpl.java", "stars": "2", "class": {"name": "MusicDaoImpl", "extends": null, "implements": ["MusicDao"], "modifiers": ["public"]}}, {"method_name": "getMusicById", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "MusicEntity", "snippet": "\t@Override public MusicEntity getMusicById(long Id) {\t\ttry {\t\t\treturn entityManager.createNamedQuery(\"MusicEntityByid\", MusicEntity.class).setParameter(\"id\", Id)\t\t\t\t\t.getSingleResult();\t\t} catch (NoResultException nre) {\t\t\treturn null;\t\t}\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/dao/MusicDaoImpl.java", "stars": "2", "class": {"name": "MusicDaoImpl", "extends": null, "implements": ["MusicDao"], "modifiers": ["public"]}}, {"method_name": "updateMusic", "params": ["MusicEntity"], "throws": null, "modifiers": ["public"], "return_type": "MusicEntity", "snippet": "\t@Override public MusicEntity updateMusic(final MusicEntity musicEntity) {\t\treturn entityManager.merge(musicEntity);\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/dao/MusicDaoImpl.java", "stars": "2", "class": {"name": "MusicDaoImpl", "extends": null, "implements": ["MusicDao"], "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {        this.prevTime = -1;        for (int i = 0, len = this.ticks.length; i < len; i++) {            this.ticks[i] = 0.0f;        }        Mercury.INSTANCE.getEventManager().registerListener(this);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/tickrate/TickRateManager.java", "stars": "12", "class": {"name": "TickRateManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "final"]}}, {"method_name": "getTickRate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getTickRate() {        int tickCount = 0;        float tickRate = 0.0f;        for (int i = 0; i < this.ticks.length; i++) {            final float tick = this.ticks[i];            if (tick > 0.0f) {                tickRate += tick;                tickCount++;            }        }        return MathHelper.clamp((tickRate / tickCount), 0.0f, 20.0f);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/tickrate/TickRateManager.java", "stars": "12", "class": {"name": "TickRateManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "final"]}}, {"method_name": "unload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unload() {        Mercury.INSTANCE.getEventManager().deregisterListener(this);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/tickrate/TickRateManager.java", "stars": "12", "class": {"name": "TickRateManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "final"]}}, {"method_name": "receivePacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void receivePacket(PacketEvent event) {        if (event.getType().equals(PacketEvent.Type.INCOMING)) {            if (event.getPacket() instanceof SPacketTimeUpdate) {                if (this.prevTime != -1) {                    this.ticks[this.currentTick % this.ticks.length] = MathHelper.clamp((20.0f / ((float) (System.currentTimeMillis() - this.prevTime) / 1000.0f)), 0.0f, 20.0f);                    this.currentTick++;                }                this.prevTime = System.currentTimeMillis();            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/tickrate/TickRateManager.java", "stars": "12", "class": {"name": "TickRateManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "final"]}}, {"method_name": "createData", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "AnyData", "snippet": "    public AnyData createData() throws Exception {        if (!isOk())            return null;        return new Country(                nameField.getText(),                presidentField.getText(),                capitalField.getText()        );    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/CountryDlg.java", "stars": "2", "class": {"name": "CountryDlg", "extends": "Dlg", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrientation", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrientation(int orientation) {        if (orientation != HORIZONTAL_LIST && orientation != VERTICAL_LIST) {            throw new IllegalArgumentException(\"invalid orientation\");        }        mOrientation = orientation;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/decorators/DividerItemDecoration.java", "stars": "4", "class": {"name": "DividerItemDecoration", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas", "RecyclerView", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {        if (mOrientation == VERTICAL_LIST) {            drawVertical(c, parent);        } else {            drawHorizontal(c, parent);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/decorators/DividerItemDecoration.java", "stars": "4", "class": {"name": "DividerItemDecoration", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawVertical", "params": ["Canvas", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawVertical(Canvas c, RecyclerView parent) {        final int left = parent.getPaddingLeft();        final int right = parent.getWidth() - parent.getPaddingRight();        final int childCount = parent.getChildCount();        for (int i = 0; i < childCount; i++) {            final View child = parent.getChildAt(i);            final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();            final int top = child.getBottom() + params.bottomMargin;            final int bottom = top + mDivider.getIntrinsicHeight();            mDivider.setBounds(left, top, right, bottom);            mDivider.draw(c);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/decorators/DividerItemDecoration.java", "stars": "4", "class": {"name": "DividerItemDecoration", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawHorizontal", "params": ["Canvas", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawHorizontal(Canvas c, RecyclerView parent) {        final int top = parent.getPaddingTop();        final int bottom = parent.getHeight() - parent.getPaddingBottom();        final int childCount = parent.getChildCount();        for (int i = 0; i < childCount; i++) {            final View child = parent.getChildAt(i);            final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child                    .getLayoutParams();            final int left = child.getRight() + params.rightMargin;            final int right = left + mDivider.getIntrinsicHeight();            mDivider.setBounds(left, top, right, bottom);            mDivider.draw(c);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/decorators/DividerItemDecoration.java", "stars": "4", "class": {"name": "DividerItemDecoration", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemOffsets", "params": ["Rect", "View", "RecyclerView", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {        if (mOrientation == VERTICAL_LIST) {            outRect.set(0, 0, 0, mDivider.getIntrinsicHeight());        } else {            outRect.set(0, 0, mDivider.getIntrinsicWidth(), 0);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/decorators/DividerItemDecoration.java", "stars": "4", "class": {"name": "DividerItemDecoration", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void init() {            // making dialog            dialog = new BottomSheetDialog(activity, R.style.SheetDialog);            // init view            view = activity.getLayoutInflater().inflate(R.layout.dialog, null);            // set view for dialog            dialog.setContentView(view);            // set dialog window background NULL            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(null);            // inflating views            root = view.findViewById(R.id.root);            dialogTitle = view.findViewById(R.id.dialogTitle); // dialog title text view            scrollView = view.findViewById(R.id.scrollview); // scrollview where contentView            ok = view.findViewById(R.id.ok_button);            cancel = view.findViewById(R.id.cancel_button);            // setup default settings for dialog            setSettings(new Settings());            // set default theme            setTheme(new Theme());        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setTitle (@StringRes int res) {            dialogTitle.setText(res);            dialogTitle.setVisibility(View.VISIBLE);            return this;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setTitle (String title) {            dialogTitle.setText(title);            return this;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setContentView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setContentView (View contentView) {            this.contentView = contentView;            updateView();            return this;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "updateView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void updateView () {            scrollView.removeAllViews();            scrollView.addView(contentView);        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setSettings", "params": ["Settings"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setSettings (Settings settings) {            this.settings = settings;            return this;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSettings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Settings", "snippet": "        public Settings getSettings () {            return settings;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder show() {            dialog.show();            return this;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "dismiss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder dismiss () {            dialog.dismiss();            return this;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "updateViewsInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void updateViewsInfo () {            dialogTitle.setTextColor(theme.titleTextColor);            ok.setTextColor(theme.buttonOkTextColor);            cancel.setTextColor(theme.defaultButtonTextColor);            root.setBackgroundTintList(ColorStateList.valueOf(theme.dialogBackground));        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTheme", "params": ["Theme"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setTheme(Theme theme) {            this.theme = theme;            updateViewsInfo();            return this;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setupMenu", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "MenuViewer", "snippet": "        public MenuViewer setupMenu (@MenuRes int res) {            return new MenuViewer(activity, this)                    .setMenu(res);        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/builders/AppBottomDialog.java", "stars": "4", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getCorrelationId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getCorrelationId() {\t\treturn correlationId;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContext.java", "stars": "2", "class": {"name": "UserContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCorrelationId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCorrelationId(String correlationId) {\t\tthis.correlationId = correlationId;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContext.java", "stars": "2", "class": {"name": "UserContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAuthToken() {\t\treturn authToken;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContext.java", "stars": "2", "class": {"name": "UserContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAuthToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAuthToken(String authToken) {\t\tthis.authToken = authToken;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContext.java", "stars": "2", "class": {"name": "UserContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getUserId() {\t\treturn userId;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContext.java", "stars": "2", "class": {"name": "UserContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUserId(String userId) {\t\tthis.userId = userId;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContext.java", "stars": "2", "class": {"name": "UserContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "genFinalParas", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void genFinalParas() {        /**         * groovy\u4e0d\u652f\u6301\u4f20\u53c2         */        if (transformerInfo.getTransformer().getTransformerName().equals(\"dx_groovy\")) {            finalParas = new Object[2];            finalParas[0] = transformerExecutionParas.getCode();            finalParas[1] = transformerExecutionParas.getExtraPackage();            return;        }        /**         * \u5176\u4ed6function\uff0c\u6309\u7167columnIndex\u548cpara\u7684\u987a\u5e8f\uff0c\u5982\u679ccolumnIndex\u4e3a\u7a7a\uff0c\u8df3\u8fc7conlumnIndex         */        if (transformerExecutionParas.getColumnIndex() != null) {            if (transformerExecutionParas.getParas() != null) {                finalParas = new Object[transformerExecutionParas.getParas().length + 1];                System.arraycopy(transformerExecutionParas.getParas(), 0, finalParas, 1, transformerExecutionParas.getParas().length);            } else {                finalParas = new Object[1];            }            finalParas[0] = transformerExecutionParas.getColumnIndex();        } else {            if (transformerExecutionParas.getParas() != null) {                finalParas = transformerExecutionParas.getParas();            } else {                finalParas = null;            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFinalParas", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object[] getFinalParas() {        return finalParas;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExaustedTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getExaustedTime() {        return exaustedTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSuccessRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getSuccessRecords() {        return successRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFailedRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getFailedRecords() {        return failedRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFilterRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getFilterRecords() {        return filterRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsChecked", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsChecked(boolean isChecked) {        this.isChecked = isChecked;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isChecked", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isChecked() {        return isChecked;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassLoader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ClassLoader", "snippet": "    public ClassLoader getClassLoader() {        return transformerInfo.getClassLoader();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColumnIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getColumnIndex() {        return transformerExecutionParas.getColumnIndex();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransformerName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTransformerName() {        return transformerInfo.getTransformer().getTransformerName();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransformer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ComplexTransformer", "snippet": "    public ComplexTransformer getTransformer() {        return transformerInfo.getTransformer();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gettContext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> gettContext() {        return transformerExecutionParas.gettContext();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerExecution.java", "stars": "23", "class": {"name": "TransformerExecution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initFromAttributes", "params": ["Context", "AttributeSet"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initFromAttributes(Context context, AttributeSet attrs) {        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.GraceViewPager);        float pageHeightWidthRatio = typedArray.getFloat(R.styleable.GraceViewPager_gvp_pageHeightWidthRatio, 0);        if (pageHeightWidthRatio < 0) {            pageHeightWidthRatio = 0;        }        int pageHorizontalMinMargin = typedArray.getDimensionPixelSize(R.styleable.GraceViewPager_gvp_pageHorizontalMinMargin, 0);        int pageVerticalMinMargin = typedArray.getDimensionPixelSize(R.styleable.GraceViewPager_gvp_pageVerticalMinMargin, 0);        typedArray.recycle();        // init MultiPagePlugin        mMultiPagePlugin = new GraceMultiPagePlugin.Builder(this)                .pageHeightWidthRatio(pageHeightWidthRatio)                .pageHorizontalMinMargin(pageHorizontalMinMargin)                .pageVerticalMinMargin(pageVerticalMinMargin)                .build();    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        int width = MeasureSpec.getSize(widthMeasureSpec);        int height = MeasureSpec.getSize(heightMeasureSpec);        mMultiPagePlugin.determinePageSize(width, height);        super.onMeasure(widthMeasureSpec, heightMeasureSpec);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onLayout(boolean changed, int l, int t, int r, int b) {        super.onLayout(changed, l, t, r, b);        int width = r - l;        // \u54cd\u5e94\u5bbd\u5ea6\u53d8\u5316\u4ee5\u4fbf\u4fee\u6b63\u6eda\u52a8\u4f4d\u7f6e        mSizeChangeHandler.onSizeChange(this, width);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageMargin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageMargin(int marginPixels) {        super.setPageMargin(marginPixels);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGracePageMargin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGracePageMargin(int marginPixels) {        GraceViewPagerSupport.setPageMargin(this, marginPixels);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageTransformer", "params": ["boolean", "PageTransformer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageTransformer(boolean reverseDrawingOrder, @Nullable PageTransformer transformer) {        super.setPageTransformer(reverseDrawingOrder, transformer);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageTransformer", "params": ["boolean", "PageTransformer", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageTransformer(boolean reverseDrawingOrder, @Nullable PageTransformer transformer, int pageLayerType) {        super.setPageTransformer(reverseDrawingOrder, transformer, pageLayerType);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGracePageTransformer", "params": ["boolean", "GracePageTransformer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGracePageTransformer(boolean reverseDrawingOrder, @Nullable GracePageTransformer transformer) {        super.setPageTransformer(reverseDrawingOrder, transformer);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGracePageTransformer", "params": ["boolean", "GracePageTransformer", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGracePageTransformer(boolean reverseDrawingOrder, @Nullable GracePageTransformer transformer, int pageLayerType) {        super.setPageTransformer(reverseDrawingOrder, transformer, pageLayerType);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAdapter", "params": ["PagerAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdapter(@Nullable PagerAdapter adapter) {        super.setAdapter(adapter);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGraceAdapter", "params": ["GracePagerAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGraceAdapter(@NonNull GracePagerAdapter adapter) {        setAdapter(adapter);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageHeightWidthRatio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPageHeightWidthRatio() {        return mMultiPagePlugin.getPageHeightWidthRatio();    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageHeightWidthRatio", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageHeightWidthRatio(float pageHeightWidthRatio) {        mMultiPagePlugin.setPageHeightWidthRatio(pageHeightWidthRatio);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageHorizontalMinMargin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageHorizontalMinMargin() {        return mMultiPagePlugin.getPageHorizontalMinMargin();    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageHorizontalMinMargin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageHorizontalMinMargin(int pageHorizontalMinMargin) {        mMultiPagePlugin.setPageHorizontalMinMargin(pageHorizontalMinMargin);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageVerticalMinMargin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageVerticalMinMargin() {        return mMultiPagePlugin.getPageVerticalMinMargin();    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageVerticalMinMargin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageVerticalMinMargin(int pageVerticalMinMargin) {        mMultiPagePlugin.setPageVerticalMinMargin(pageVerticalMinMargin);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSaveInstanceState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Parcelable", "snippet": "    public Parcelable onSaveInstanceState() {        Parcelable superState = super.onSaveInstanceState();        SavedState ss = new SavedState(superState);        ss.mPageHeightWidthRatio = mMultiPagePlugin.getPageHeightWidthRatio();        ss.mPageHorizontalMinMargin = mMultiPagePlugin.getPageHorizontalMinMargin();        ss.mPageVerticalMinMargin = mMultiPagePlugin.getPageVerticalMinMargin();        return ss;    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRestoreInstanceState", "params": ["Parcelable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRestoreInstanceState(Parcelable state) {        if (!(state instanceof SavedState)) {            super.onRestoreInstanceState(state);            return;        }        SavedState ss = (SavedState) state;        super.onRestoreInstanceState(ss.getSuperState());        mMultiPagePlugin.setPageHeightWidthRatio(ss.mPageHeightWidthRatio);        mMultiPagePlugin.setPageHorizontalMinMargin(ss.mPageHorizontalMinMargin);        mMultiPagePlugin.setPageVerticalMinMargin(ss.mPageVerticalMinMargin);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "GraceViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeToParcel", "params": ["Parcel", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void writeToParcel(Parcel out, int flags) {            super.writeToParcel(out, flags);            out.writeFloat(mPageHeightWidthRatio);            out.writeInt(mPageHorizontalMinMargin);            out.writeInt(mPageVerticalMinMargin);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceViewPager.java", "stars": "331", "class": {"name": "SavedState", "extends": "AbsSavedState", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "goToVideoPlayer", "params": ["Activity", "View"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToVideoPlayer(Activity activity, View view) {        Intent intent = new Intent(activity, PlayActivity.class);        intent.putExtra(PlayActivity.TRANSITION, true);        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {            Pair pair = new Pair<>(view, PlayActivity.IMG_TRANSITION);            ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(                    activity, pair);            ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());        } else {            activity.startActivity(intent);            activity.overridePendingTransition(R.anim.abc_fade_in, R.anim.abc_fade_out);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToVideoPickPlayer", "params": ["Activity", "View"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToVideoPickPlayer(Activity activity, View view) {        Intent intent = new Intent(activity, PlayPickActivity.class);        intent.putExtra(PlayActivity.TRANSITION, true);        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {            Pair pair = new Pair<>(view, PlayActivity.IMG_TRANSITION);            ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(                    activity, pair);            ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());        } else {            activity.startActivity(intent);            activity.overridePendingTransition(R.anim.abc_fade_in, R.anim.abc_fade_out);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToPlayEmptyControlActivity", "params": ["Activity", "View"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToPlayEmptyControlActivity(Activity activity, View view) {        Intent intent = new Intent(activity, PlayEmptyControlActivity.class);        intent.putExtra(PlayActivity.TRANSITION, true);        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {            Pair pair = new Pair<>(view, PlayActivity.IMG_TRANSITION);            ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(                    activity, pair);            ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());        } else {            activity.startActivity(intent);            activity.overridePendingTransition(R.anim.abc_fade_in, R.anim.abc_fade_out);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToVideoPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToVideoPlayer(Activity activity) {        Intent intent = new Intent(activity, ListVideoActivity.class);        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(activity);        ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToAutoVideoPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToAutoVideoPlayer(Activity activity) {        Intent intent = new Intent(activity, AutoPlayRecyclerViewActivity.class);        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(activity);        ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToVideoPlayer2", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToVideoPlayer2(Activity activity) {        Intent intent = new Intent(activity, ListVideo2Activity.class);        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(activity);        ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToVideoRecyclerPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToVideoRecyclerPlayer(Activity activity) {        Intent intent = new Intent(activity, RecyclerViewActivity.class);        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(activity);        ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToVideoRecyclerPlayer2", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToVideoRecyclerPlayer2(Activity activity) {        Intent intent = new Intent(activity, RecyclerView2Activity.class);        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(activity);        ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goMediaCodec", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goMediaCodec(Activity activity) {        Intent intent = new Intent(activity, RecyclerView3Activity.class);        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(activity);        ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToDetailPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToDetailPlayer(Activity activity) {        Intent intent = new Intent(activity, DetailPlayer.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToScrollDetailPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToScrollDetailPlayer(Activity activity) {        Intent intent = new Intent(activity, ScrollingActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToVideoADPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToVideoADPlayer(Activity activity) {        Intent intent = new Intent(activity, DetailADPlayer.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToMultiVideoPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToMultiVideoPlayer(Activity activity) {        Intent intent = new Intent(activity, ListMultiVideoActivity.class);        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(activity);        ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToADListVideoPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToADListVideoPlayer(Activity activity) {        //Intent intent = new Intent(activity, ListADVideoActivity.class);        Intent intent = new Intent(activity, ListADVideoActivity2.class);        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(activity);        ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToScrollWindow", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToScrollWindow(Activity activity) {        Intent intent = new Intent(activity, WindowActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToDetailListPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToDetailListPlayer(Activity activity) {        Intent intent = new Intent(activity, DetailListPlayer.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToDetailNormalActivity", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToDetailNormalActivity(Activity activity) {        Intent intent = new Intent(activity, DetailNormalActivityPlayer.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToDetailDownloadActivity", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToDetailDownloadActivity(Activity activity) {        Intent intent = new Intent(activity, DetailDownloadPlayer.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToDetailAudioActivity", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToDetailAudioActivity(Activity activity) {        Intent intent = new Intent(activity, AudioDetailPlayer.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToDetailExoListPlayer", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToDetailExoListPlayer(Activity activity) {        Intent intent = new Intent(activity, DetailExoListPlayer.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToVideoADPlayer2", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToVideoADPlayer2(Activity activity) {        Intent intent = new Intent(activity, DetailADPlayer2.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gotoWebDetail", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void gotoWebDetail(Activity activity) {        Intent intent = new Intent(activity, WebDetailActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gotoDanmaku", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void gotoDanmaku(Activity activity) {        Intent intent = new Intent(activity, DanmkuVideoActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gotoFragment", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void gotoFragment(Activity activity) {        Intent intent = new Intent(activity, FragmentVideoActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gotoMoreType", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void gotoMoreType(Activity activity) {        Intent intent = new Intent(activity, DetailMoreTypeActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gotoInput", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void gotoInput(Activity activity) {        Intent intent = new Intent(activity, InputUrlDetailActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gotoControl", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void gotoControl(Activity activity) {        Intent intent = new Intent(activity, DetailControlActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gotoFilter", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void gotoFilter(Activity activity) {        Intent intent = new Intent(activity, DetailFilterActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "goToSwitch", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void goToSwitch(Activity activity) {        Intent intent = new Intent(activity, SwitchListVideoActivity.class);        activity.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/JumpUtils.java", "stars": "2", "class": {"name": "JumpUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enable", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void enable() {        DEBUG_TAG = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disable", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void disable() {        DEBUG_TAG = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDebugMode", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean getDebugMode() {        return DEBUG_TAG;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfLog", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfLog(String tag, String log) {        if (DEBUG_TAG && log != null) {            if (!TextUtils.isEmpty(log))                Log.i(tag, log);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfLog", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfLog(String log) {        printfLog(LOG_TAG, log);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfWarning", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfWarning(String tag, String log) {        if (DEBUG_TAG && log != null) {            if (!TextUtils.isEmpty(log))                Log.w(tag, log);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfWarning", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfWarning(String log) {        printfWarning(LOG_TAG, log);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfError", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfError(String log) {        if (DEBUG_TAG) {            if (!TextUtils.isEmpty(log))                Log.e(LOG_TAG, log);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfError", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfError(String Tag, String log) {        if (DEBUG_TAG) {            if (!TextUtils.isEmpty(log))                Log.e(Tag, log);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfError", "params": ["String", "Exception"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfError(String log, Exception e) {        if (DEBUG_TAG) {            if (!TextUtils.isEmpty(log))                Log.e(LOG_TAG, log);            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Toast", "params": ["Activity", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void Toast(Activity activity, String log) {        if (DEBUG_TAG) {            if (!TextUtils.isEmpty(log))                Toast.makeText(activity, log, Toast.LENGTH_SHORT).show();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheDebuger.java", "stars": "2", "class": {"name": "HttpProxyCacheDebuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstallationPath", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getInstallationPath() {    try {      return PACKAGE_JAR.getCanonicalPath();    } catch (final IOException e) {      log.error(\"Unable to obtain canonical path. Reporting absolute path instead\", e);      return PACKAGE_JAR.getAbsolutePath();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/StatusService.java", "stars": "18", "class": {"name": "StatusService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status getStatus() {    final String version = jarVersion == null ? \"unknown\" : jarVersion;    final Runtime runtime = Runtime.getRuntime();    final long usedMemory = runtime.totalMemory() - runtime.freeMemory();    // Build the status object    return new Status(version,        getPid(),        getInstallationPath(),        usedMemory,        runtime.maxMemory(),        getDbStatus(),        getActiveExecutors());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/StatusService.java", "stars": "18", "class": {"name": "StatusService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPid", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getPid() {    final File libDir = PACKAGE_JAR.getParentFile();    final File installDir = libDir.getParentFile();    final File pidFile = new File(installDir, this.pidFilename);    try {      return Files.readFirstLine(pidFile, StandardCharsets.UTF_8).trim();    } catch (final IOException e) {      log.error(\"Unable to obtain PID\", e);      return \"unknown\";    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/StatusService.java", "stars": "18", "class": {"name": "StatusService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActiveExecutors", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Map<Integer,Executor>", "snippet": "  private Map<Integer, Executor> getActiveExecutors() {    final Map<Integer, Executor> executorMap = new HashMap<>();    try {      final List<Executor> executors = this.executorLoader.fetchActiveExecutors();      for (final Executor executor : executors) {        executorMap.put(executor.getId(), executor);      }    } catch (final ExecutorManagerException e) {      log.error(\"Fetching executors failed!\", e);    }    return executorMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/StatusService.java", "stars": "18", "class": {"name": "StatusService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDbStatus", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean getDbStatus() {    try {      return this.dbOperator.query(\"SELECT 1\", rs -> true);    } catch (final SQLException e) {      log.error(\"DB Error\", e);    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/StatusService.java", "stars": "18", "class": {"name": "StatusService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "instantiate", "params": ["String", "Class<T>", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T instantiate(String className, Class<T> t,                                    Object... args) {        try {            Constructor constructor = (Constructor) Class.forName(className)                    .getConstructor(ClassUtil.toClassType(args));            return (T) constructor.newInstance(args);        } catch (Exception e) {            throw new IllegalArgumentException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ClassUtil.java", "stars": "23", "class": {"name": "ClassUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "instantiate", "params": ["String", "Class<T>", "ClassLoader", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T instantiate(String className, Class<T> t, ClassLoader classLoader,                                    Object... args) {        try {            Constructor constructor = (Constructor) Class.forName(className, true, classLoader)                    .getConstructor(ClassUtil.toClassType(args));            return (T) constructor.newInstance(args);        } catch (Exception e) {            throw new IllegalArgumentException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ClassUtil.java", "stars": "23", "class": {"name": "ClassUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "toClassType", "params": ["Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "Class<?>", "snippet": "    private static Class<?>[] toClassType(Object[] args) {        Class<?>[] clazzs = new Class<?>[args.length];        for (int i = 0, length = args.length; i < length; i++) {            clazzs[i] = args[i].getClass();        }        return clazzs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ClassUtil.java", "stars": "23", "class": {"name": "ClassUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "storeImage", "params": ["Long", "MultipartFile"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String storeImage(Long gardenFieldId, MultipartFile file) {        securityHelperService.checkAuthorityByGardenFieldId(gardenFieldId);        checkImageValidity(file.getContentType());        if (file.getSize() > 2000000) {            throw new ImageStorageServiceException(\"Image is too large. Only images with less than 2MB are allowed\");        }        //create folders        Path gardenFieldPath = fileStorageLocation.resolve(gardenFieldId.toString());        Path thumbnailPath = gardenFieldPath.resolve(this.thumbnailFolderName);        try {            Files.createDirectories(gardenFieldPath);            Files.createDirectories(thumbnailPath);        } catch (IOException ex) {            throw new ImageStorageServiceException(\"Could not create the directory where the uploaded files will be stored.\", ex);        }        // create random uuid, which is used as the new image filename        UUID uuid = UUID.randomUUID();        String fileExtension = FilenameUtils.getExtension(file.getOriginalFilename());        if (fileExtension == null || fileExtension.isEmpty()) {            fileExtension = \"jpg\";        }        String fileName = String.format(\"%s.%s\", uuid, fileExtension);        try {            //create thumbnail            File thumbnail = thumbnailPath.resolve(fileName).toFile();            Thumbnails.of(file.getInputStream())                .outputQuality(thumbnailQuality)                .size(thumbnailMaxWidth, thumbnailMaxHeight)                .toFile(thumbnail);            // Copy file to the target location (Replacing existing file with the same name)            Path imageTargetPath = gardenFieldPath.resolve(fileName);            Files.copy(file.getInputStream(), imageTargetPath, StandardCopyOption.REPLACE_EXISTING);            updateCoverImage(gardenFieldId);            return fileName;        } catch (IOException ex) {            throw new ImageStorageServiceException(\"Could not store image \" + fileName + \". Please try again!\", ex);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadImage", "params": ["Long", "String"], "throws": null, "modifiers": ["public"], "return_type": "Resource", "snippet": "    public Resource loadImage(Long gardenFieldId, String imageName) {        return getResource(getImagePath(gardenFieldId, imageName));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadThumbnail", "params": ["Long", "String"], "throws": null, "modifiers": ["public"], "return_type": "Resource", "snippet": "    public Resource loadThumbnail(Long gardenFieldId, String imageName) {        return getResource(getThumbnailPath(gardenFieldId, imageName));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImageFilenames", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getImageFilenames(Long gardenFieldId) {        gardenFieldRepository.findById(gardenFieldId).orElseThrow(GardenFieldNotFoundServiceException::new);        try (Stream<Path> walk = Files.walk(fileStorageLocation.resolve(gardenFieldId.toString()), 1)) {            return walk.filter(Files::isRegularFile)                .map(path -> path.getFileName().toString()).collect(Collectors.toList());        } catch (NoSuchFileException ex) {            return new ArrayList<>();        } catch (IOException e) {            throw new ImageStorageServiceException(\"Could not get image filenames\", e);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteImages", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteImages(Long gardenFieldId) {        AtomicInteger exceptionCounter = new AtomicInteger();        getImageFilenames(gardenFieldId).forEach(image -> {            try {                this.deleteImageAndThumbnail(gardenFieldId, image);            } catch (ImageStorageServiceException ex) {                exceptionCounter.incrementAndGet();            }        });        if (exceptionCounter.get() > 0) {            throw new ImageStorageServiceDeletionException(String.format(\"Could not delete all files. %d failed\", exceptionCounter.get()));        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteImageAndThumbnail", "params": ["Long", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteImageAndThumbnail(Long gardenFieldId, String imageName) {        this.securityHelperService.checkAuthorityByGardenFieldId(gardenFieldId);        try {            Files.deleteIfExists(getImagePath(gardenFieldId, imageName));            Files.deleteIfExists(getThumbnailPath(gardenFieldId, imageName));        } catch (IOException ex) {            throw new ImageStorageServiceDeletionException(String.format(\"Could not delete image with name %s\", imageName), ex);        }        updateCoverImage(gardenFieldId);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResource", "params": ["Path"], "throws": null, "modifiers": ["private"], "return_type": "Resource", "snippet": "    private Resource getResource(Path resourcePath) {        try {            Resource resource = new UrlResource(resourcePath.toUri());            if (resource.exists()) {                return resource;            }        } catch (MalformedURLException ex) {            throw new ImageNotFoundServiceException(String.format(\"Invalid resource path %s\", resourcePath), ex);        }        throw new ImageNotFoundServiceException(String.format(\"Could not find resource at %s\", resourcePath));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkImageValidity", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkImageValidity(String contentType) {        if (contentType == null || !(contentType.equals(\"image/pjpeg\") || contentType.equals(\"image/jpeg\") || contentType.equals(\"image/jpg\")            || contentType.equals(\"image/png\") || contentType.equals(\"image/gif\") || contentType.equals(\"image/bmp\")            || contentType.equals(\"image/x-png\") || contentType.equals(\"image/x-icon\"))) {            throw new NotAnImageServiceException(\"The file-format must one of the following: pjpeg, jpeg, jpg, \" +                \"png, gif, bmp, x-png, x-icon\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImagePath", "params": ["Long", "String"], "throws": null, "modifiers": ["private"], "return_type": "Path", "snippet": "    private Path getImagePath(Long gardenFieldId, String imageName) {        return fileStorageLocation.resolve(gardenFieldId.toString())            .resolve(imageName)            .normalize();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThumbnailPath", "params": ["Long", "String"], "throws": null, "modifiers": ["private"], "return_type": "Path", "snippet": "    private Path getThumbnailPath(Long gardenFieldId, String imageName) {        return fileStorageLocation.resolve(gardenFieldId.toString())            .resolve(this.thumbnailFolderName)            .resolve(imageName)            .normalize();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "chooseCoverImage", "params": ["Long"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String chooseCoverImage(Long gardenFieldId) {        try (Stream<Path> walk = Files.walk(fileStorageLocation.resolve(gardenFieldId.toString()), 1)) {            return walk.filter(Files::isRegularFile).findAny().map(path -> path.getFileName().toString()).get();        } catch (NoSuchElementException ex) {            throw new CoverNotFoundServiceException();        } catch (IOException e) {            throw new ImageStorageServiceException(\"Could not get image filenames\", e);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateCoverImage", "params": ["Long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateCoverImage(Long gardenFieldId) {        GardenField gardenField = gardenFieldRepository.findById(gardenFieldId)            .orElseThrow(GardenFieldNotFoundServiceException::new);        String coverImage;        try {            coverImage = chooseCoverImage(gardenFieldId);        }catch (CoverNotFoundServiceException ex){            coverImage = null;        }        gardenField.setCoverImage(coverImage);        gardenFieldRepository.save(gardenField);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCoverImage", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCoverImage(Long gardenFieldId) {        GardenField gardenField = gardenFieldRepository.findById(gardenFieldId)            .orElseThrow(GardenFieldNotFoundServiceException::new);        String coverImage = gardenField.getCoverImage();        if (coverImage == null) {            coverImage = chooseCoverImage(gardenFieldId);            gardenField.setCoverImage(coverImage);            gardenFieldRepository.save(gardenField);        }        return coverImage;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/ImageStorageService.java", "stars": "2", "class": {"name": "ImageStorageService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(String... args) throws Exception {\t\tSecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(\"user\", \"N/A\",\t\t\t\tAuthorityUtils.commaSeparatedStringToAuthorityList(\"ROLE_USER\")));\t\ttry {\t\t\tSystem.out.println(this.service.secure());\t\t}\t\tfinally {\t\t\tSecurityContextHolder.clearContext();\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure/src/main/java/smoketest/secure/SampleSecureApplication.java", "stars": "47572", "class": {"name": "SampleSecureApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleSecureApplication.class, \"--debug\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure/src/main/java/smoketest/secure/SampleSecureApplication.java", "stars": "47572", "class": {"name": "SampleSecureApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // \u4f7f\u7528 Paint.getFillPath() \u83b7\u53d6\u5b9e\u9645\u7ed8\u5236\u7684 Path        paint.setStyle(Paint.Style.FILL_AND_STROKE);        paint.setStrokeWidth(0);        // \u7b2c\u4e00\u5904\uff1a\u83b7\u53d6 Path        paint.getFillPath(path, path1);        canvas.drawPath(path, paint);        canvas.save();        canvas.translate(500, 0);        canvas.drawPath(path1, pathPaint);        canvas.restore();        canvas.save();        canvas.translate(0, 200);        paint.setStyle(Paint.Style.STROKE);        // \u7b2c\u4e8c\u5904\uff1a\u8bbe\u7f6e Style \u4e3a STROKE \u540e\u518d\u83b7\u53d6 Path        paint.getFillPath(path, path2);        canvas.drawPath(path, paint);        canvas.restore();        canvas.save();        canvas.translate(500, 200);        canvas.drawPath(path2, pathPaint);        canvas.restore();        canvas.save();        canvas.translate(0, 400);        paint.setStrokeWidth(40);        // \u7b2c\u4e09\u5904\uff1aStyle \u4e3a STROKE \u5e76\u4e14\u7ebf\u6761\u5bbd\u5ea6\u4e3a 40 \u65f6\u7684 Path        paint.getFillPath(path, path3);        canvas.drawPath(path, paint);        canvas.restore();        canvas.save();        canvas.translate(500, 400);        canvas.drawPath(path3, pathPaint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice15FillPathView.java", "stars": "2", "class": {"name": "Practice15FillPathView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/StudentConstructor.java", "stars": "15", "class": {"name": "StudentConstructor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/StudentConstructor.java", "stars": "15", "class": {"name": "StudentConstructor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/StudentConstructor.java", "stars": "15", "class": {"name": "StudentConstructor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTeacher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Teacher", "snippet": "  public Teacher getTeacher() {    return teacher;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/StudentConstructor.java", "stars": "15", "class": {"name": "StudentConstructor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTeacher", "params": ["Teacher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTeacher(Teacher teacher) {    this.teacher = teacher;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/StudentConstructor.java", "stars": "15", "class": {"name": "StudentConstructor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConstructors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Constructor>", "snippet": "  public List<Constructor> getConstructors() {    return constructors;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/StudentConstructor.java", "stars": "15", "class": {"name": "StudentConstructor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "raizQuadrada", "params": ["double", "double"], "throws": null, "modifiers": ["static"], "return_type": "double", "snippet": "    static double raizQuadrada(double a, double epsilon) {        // escreva seu c\u00f3digo aqui        /*            controle if-else faz a verifica\u00e7\u00e3o das entradas            entrada invalida retorna codigo de erro -1            entrada valida retorna o resultado da raiz quadrada         */        if (a < 0 || epsilon <= 0 || epsilon >= 1) {            return -1;        } else if (a == 0) {            return 0;        } else {            // declara e inicia as variaveis necessarias para a execucao da formula            double x0 = a / 2;            double x1 = 0;            double diferenca = 0;            // laco do-while            // repete o processo enquanto a variavel diferenca for maior que o epsilon fornecido            do {                x1 = (x0 + a / x0) / 2;                diferenca = x1 - x0;                // controlador if fornece o valor absoluto da variavel diferenca                if (diferenca < 0) {                    diferenca *= -1;                }                x0 = x1;            } while (diferenca >= epsilon);            return x1;        }    }", "url": "https://raw.githubusercontent.com/raulmel1o/epIP/master/ep2/Raiz.java", "stars": "2", "class": {"name": "Raiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        // escreva seu c\u00f3digo (para testes) aqui        // Exemplo de teste:        double valor = 1;        double precisao = 0.00000001;        System.out.println(\"Raiz de : \"+valor+\" = \"+raizQuadrada(valor, precisao));    }", "url": "https://raw.githubusercontent.com/raulmel1o/epIP/master/ep2/Raiz.java", "stars": "2", "class": {"name": "Raiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "User", "snippet": "  public User getUser() {    return this.user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/Session.java", "stars": "18", "class": {"name": "Session", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSessionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSessionId() {    return this.sessionId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/Session.java", "stars": "18", "class": {"name": "Session", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getIp() {    return this.ip;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/Session.java", "stars": "18", "class": {"name": "Session", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSessionData", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSessionData(final String key, final Object value) {    this.sessionData.put(key, value);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/Session.java", "stars": "18", "class": {"name": "Session", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSessionData", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getSessionData(final String key) {    return this.sessionData.get(key);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/Session.java", "stars": "18", "class": {"name": "Session", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "method", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void method() {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/SingleClickAspect.java", "stars": "1", "class": {"name": "SingleClickAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "aroundJoinPoint", "params": ["ProceedingJoinPoint", "SingleClick"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void aroundJoinPoint(ProceedingJoinPoint joinPoint, SingleClick singleClick) throws Throwable {        View view = null;        for (Object arg : joinPoint.getArgs()) {            if (arg instanceof View) {                view = (View) arg;            }        }        if (view != null) {            long currentTime = Calendar.getInstance().getTimeInMillis();            if (currentTime - mLastTime < singleClick.value() && view.getId()                    == mLastId) {                Log.i(\"SingleClick\", \"\u53d1\u751f\u5feb\u901f\u70b9\u51fb\");                return;            }            mLastTime = currentTime;            mLastId = view.getId();            //\u6267\u884c\u539f\u65b9\u6cd5            joinPoint.proceed();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/SingleClickAspect.java", "stars": "1", "class": {"name": "SingleClickAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "from", "params": ["Instant"], "throws": null, "modifiers": ["public"], "return_type": "Leasing", "snippet": "    public Leasing from(Instant from) {        this.from = from;        return this;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "to", "params": ["Instant"], "throws": null, "modifiers": ["public"], "return_type": "Leasing", "snippet": "    public Leasing to(Instant to) {        this.to = to;        return this;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "status", "params": ["LeasingStatus"], "throws": null, "modifiers": ["public"], "return_type": "Leasing", "snippet": "    public Leasing status(LeasingStatus status) {        this.status = status;        return this;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "messages", "params": ["Set<Message>"], "throws": null, "modifiers": ["public"], "return_type": "Leasing", "snippet": "    public Leasing messages(Set<Message> messages) {        this.messages = messages;        return this;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "addMessage", "params": ["Message"], "throws": null, "modifiers": ["public"], "return_type": "Leasing", "snippet": "    public Leasing addMessage(Message message) {        this.messages.add(message);        message.setLeasing(this);        return this;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "gardenField", "params": ["GardenField"], "throws": null, "modifiers": ["public"], "return_type": "Leasing", "snippet": "    public Leasing gardenField(GardenField gardenField) {        this.gardenField = gardenField;        return this;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "user", "params": ["User"], "throws": null, "modifiers": ["public"], "return_type": "Leasing", "snippet": "    public Leasing user(User user) {        this.user = user;        return this;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "paymentSessionId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Leasing", "snippet": "    public Leasing paymentSessionId(String paymentSessionId) {        this.paymentSessionId = paymentSessionId;        return this;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPeriodInDays", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getPeriodInDays() {        return ChronoUnit.DAYS.between(from, to.plus(1, ChronoUnit.DAYS));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPriceSumInCents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getPriceSumInCents() {        return (int) (this.getGardenField().getSizeInM2() * this.getGardenField().getPricePerM2()            * this.getPeriodInDays() * 100);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Leasing leasing = (Leasing) o;        return Objects.equals(id, leasing.id);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return Objects.hash(id);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Leasing.java", "stars": "2", "class": {"name": "Leasing", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        StringBuilder builder = new StringBuilder(\"\u0412\u0432\u0435\u0434\u0456\u0442\u044c \u0434\u0430\u043d\u0456 \u0437\u0430 \u0442\u0430\u043a\u0438\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u043c:\\n\");        builder.append(\"\u041f\u0440\u0456\u0437\u0432\u0438\u0449\u0435 \u0442\u0430 \u0456\u043c'\u044f/\u043a\u0456\u043b\u044c\u043a.\u043d\u0435\u0437\u0430\u0434\u043e\u0432./\u0441\u0435\u0440\u0435\u0434\u043d\u0456\u0439 \u0431\u0430\u043b/\\n\");        builder.append(\"\u041f\u0440\u0438\u043a\u043b\u0430\u0434: \\n\\t\u041a\u0456\u0442 \u0411\u0430\u0437\u0456\u043b\u0456\u043e/2/2,4/\");        System.out.println(builder);        Scanner scanner = new Scanner(System.in);        scanner.useDelimiter(\"/\");        String name = scanner.next();        int n = scanner.nextInt();        float b = scanner.nextFloat();        scanner.close();        System.out.println(name + \": \u0434\u0432\u0456\u0439\u043e\u043a \" + n + \"; \u0441\u0440.\u0431\u0430\u043b=\" + b);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab1/src/test/java/com/demkom58/lab1/test/ScannerTest.java", "stars": "2", "class": {"name": "ScannerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImageDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImageDir() {        return imageDir;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/ImageStorageProperties.java", "stars": "2", "class": {"name": "ImageStorageProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImageDir", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImageDir(String imageDir) {        this.imageDir = imageDir;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/ImageStorageProperties.java", "stars": "2", "class": {"name": "ImageStorageProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeInternal", "params": ["JobExecutionContext"], "throws": ["JobExecutionException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void executeInternal(JobExecutionContext context) throws JobExecutionException {        try{            JobDataMap payloadData = context.getJobDetail().getJobDataMap();            int threshold = payloadData.getIntValue(SchedulerClusterConstants.REPAIR_POLL_THRESHOLD);            //Search from db directly            ElementDao elementDao = AppUtil.getBean(ElementDao.class);            LOG.info(\"Task queue repair threshold [{}]\", threshold);            List<QueueElement> elements = elementDao.selectWaitForComplete(threshold);            if(!elements.isEmpty()){                EurekaDiscoveryClient client = AppUtil.getBean(EurekaDiscoveryClient.class);                ExecuteService executeService = AppUtil.getBean(ExecuteService.class);                JobTaskDao jobTaskDao = AppUtil.getBean(JobTaskDao.class);                JobInfoServiceImpl jobInfoService = AppUtil.getBean(JobInfoServiceImpl.class);                elements.forEach((element) ->{                    try {                        LOG.info(\"Repair queue element {}\", Json.toJson(element, null));                        List<ServiceInstance> instances = client.getInstances(JobConstants.EXECUTOR_NAME);                        JobTask jobTask = jobTaskDao.selectOne(element.getId());                        if (null != jobTask && jobTask.getStatus().equalsIgnoreCase(ExecuteStatus.COMMIT.name())) {                            boolean exists = false;                            String hostPort = null;                            for (ServiceInstance instance : instances) {                                hostPort = instance.getHost() + \":\" + instance.getPort();                                Response<Boolean> response = executeService.alive(hostPort, jobTask.getJobId(), jobTask.getId());                                if(response.getData() != null){                                    exists = response.getData();                                }                                if(exists){                                    break;                                }                            }                            if(jobTask.isDisposable()){                                jobInfoService.delete(Collections.singletonList(jobTask.getJobId()));                            }                            if(exists){                                jobTask.setStatus(ExecuteStatus.RUNNING.name());                                jobTask.setExecuterAddress(hostPort);                                if(jobTaskDao.update(jobTask) > 0){                                    LOG.info(\"Change task [{}] status to RUNNING\", jobTask.getId());                                }                            }else{                                jobTask.setStatus(ExecuteStatus.FAILD.name());                                if(jobTaskDao.update(jobTask) > 0){                                    LOG.info(\"Change task [{}] status to FAILD\", jobTask.getId());                                    jobInfoService.sendInfoToAlarm(jobTask.getId(),                                            jobTask.getJobId(), AlarmTemplate.TITLE_TASK_RUN_FAID,                                            PatternInjectUtils.inject(AlarmTemplate.TASK_RUN_FAID,                                                    new Object[]{jobTask.getJobName(), jobTask.getJobId(), jobTask.getId()}, false, false, true));                                    elementDao.delete(Collections.singletonList(element.getId()));                                }                            }                        } else if (null == jobTask) {                            LOG.info(\"Delete duplicate element {}\", Json.toJson(element, null));                            elementDao.delete(Collections.singletonList(element.getId()));                        } else if (jobTask.getStatus().equalsIgnoreCase(ExecuteStatus.FAILD.name()) ||                                jobTask.getStatus().equalsIgnoreCase(ExecuteStatus.SUCCESS.name())){                            LOG.info(\"Delete duplicate element {}\", Json.toJson(element, null));                            elementDao.delete(Collections.singletonList(element.getId()));                            if(jobTask.isDisposable()){                                jobInfoService.delete(Collections.singletonList(jobTask.getJobId()));                            }                        }                    }catch(Exception e){                        LOG.error(\"Repair queue element {} failed , message: {}\",                                Json.toJson(element, null) , e.getMessage());                    }                });            }        }catch(Exception e){            LOG.error(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/bean/TaskQueueRepairBean.java", "stars": "23", "class": {"name": "TaskQueueRepairBean", "extends": "QuartzJobBean", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFontAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getFontAddress() {        return 0xe000;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/BasicRom.java", "stars": "4", "class": {"name": "BasicRom", "extends": "ROM", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "readByLittleEndian", "params": ["InputStream"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int readByLittleEndian(InputStream in) throws IOException {        int value1 = in.read();        int value2 = in.read();        int value3 = in.read();        int value4 = in.read();        return value1 + (value2 << 8) + (value3 << 16) + (value4 << 24);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/BasicRom.java", "stars": "4", "class": {"name": "BasicRom", "extends": "ROM", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkFile", "params": ["FileInputStream"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean checkFile(FileInputStream in) throws IOException {        byte[] id = new byte[4];        in.read(id);        if (!new String(id).equals(PROG_FILE_ID)) {            return false;        }        // \u73fe\u5728\u306e\u3068\u3053\u308d\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\u3002        in.skip(4);        return true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/BasicRom.java", "stars": "4", "class": {"name": "BasicRom", "extends": "ROM", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "readROM", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readROM(String filename) {        try {            FileInputStream in = new FileInputStream(filename);            if (!checkFile(in)) {                throw new IOException(\"invalid file format\");            }            int nlen = readByLittleEndian(in);            byte[] pname_array = new byte[nlen];            in.read(pname_array);            int startAddress = readByLittleEndian(in);            int length = readByLittleEndian(in);            if (startAddress < 0 || startAddress > 65535) {                throw new IOException(\"invalid address: \" + startAddress);            }            if (length < 0 || startAddress + length > 65536) {                throw new IOException(\"invalid length: \" + length);            }            readByLittleEndian(in);            for (int i = 0; i < length; i++) {                int v = in.read();                data[i] = (byte)(v & 0xff);            }            in.close();        }        catch (IOException e) {            return ;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/BasicRom.java", "stars": "4", "class": {"name": "BasicRom", "extends": "ROM", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "index", "params": ["HttpServletRequest", "Model", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String index(HttpServletRequest request, Model model, @RequestParam(required = false, defaultValue = \"0\") Integer jobId) {\t\t// \u6267\u884c\u5668\u5217\u8868\t\tList<XxlJobGroup> jobGroupList_all =  xxlJobGroupDao.findAll();\t\t// filter group\t\tList<XxlJobGroup> jobGroupList = JobInfoController.filterJobGroupByRole(request, jobGroupList_all);//\t\tif (jobGroupList==null || jobGroupList.size()==0) {//\t\t\tthrow new XxlJobException(I18nUtil.getString(\"jobgroup_empty\"));//\t\t}\t\tmodel.addAttribute(\"JobGroupList\", jobGroupList);\t\t// \u4efb\u52a1\t\tif (jobId > 0) {\t\t\tXxlJobInfo jobInfo = xxlJobInfoDao.loadById(jobId);\t\t\tif (jobInfo == null) {\t\t\t\tthrow new RuntimeException(I18nUtil.getString(\"jobinfo_field_id\") + I18nUtil.getString(\"system_unvalid\"));\t\t\t}\t\t\tmodel.addAttribute(\"jobInfo\", jobInfo);\t\t\t// valid permission\t\t\tJobInfoController.validPermission(request, jobInfo.getJobGroup());\t\t}\t\treturn \"joblog/joblog.index\";\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobLogController.java", "stars": "1", "class": {"name": "JobLogController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobsByGroup", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<List>", "snippet": "\tpublic ReturnT<List<XxlJobInfo>> getJobsByGroup(int jobGroup){\t\tList<XxlJobInfo> list = xxlJobInfoDao.getJobsByGroup(jobGroup);\t\treturn new ReturnT<List<XxlJobInfo>>(list);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobLogController.java", "stars": "1", "class": {"name": "JobLogController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pageList", "params": ["HttpServletRequest", "int", "int", "int", "int", "int", "String"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "\tpublic Map<String, Object> pageList(HttpServletRequest request,\t\t\t\t\t\t\t\t\t\t@RequestParam(required = false, defaultValue = \"0\") int start,\t\t\t\t\t\t\t\t\t\t@RequestParam(required = false, defaultValue = \"10\") int length,\t\t\t\t\t\t\t\t\t\tint jobGroup, int jobId, int logStatus, String filterTime) {\t\t// valid permission\t\tJobInfoController.validPermission(request, jobGroup);\t// \u4ec5\u7ba1\u7406\u5458\u652f\u6301\u67e5\u8be2\u5168\u90e8\uff1b\u666e\u901a\u7528\u6237\u4ec5\u652f\u6301\u67e5\u8be2\u6709\u6743\u9650\u7684 jobGroup\t\t\t\t// parse param\t\tDate triggerTimeStart = null;\t\tDate triggerTimeEnd = null;\t\tif (filterTime!=null && filterTime.trim().length()>0) {\t\t\tString[] temp = filterTime.split(\" - \");\t\t\tif (temp.length == 2) {\t\t\t\ttriggerTimeStart = DateUtil.parseDateTime(temp[0]);\t\t\t\ttriggerTimeEnd = DateUtil.parseDateTime(temp[1]);\t\t\t}\t\t}\t\t\t\t// page query\t\tList<XxlJobLog> list = xxlJobLogDao.pageList(start, length, jobGroup, jobId, triggerTimeStart, triggerTimeEnd, logStatus);\t\tint list_count = xxlJobLogDao.pageListCount(start, length, jobGroup, jobId, triggerTimeStart, triggerTimeEnd, logStatus);\t\t\t\t// package result\t\tMap<String, Object> maps = new HashMap<String, Object>();\t    maps.put(\"recordsTotal\", list_count);\t\t// \u603b\u8bb0\u5f55\u6570\t    maps.put(\"recordsFiltered\", list_count);\t// \u8fc7\u6ee4\u540e\u7684\u603b\u8bb0\u5f55\u6570\t    maps.put(\"data\", list);  \t\t\t\t\t// \u5206\u9875\u5217\u8868\t\treturn maps;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobLogController.java", "stars": "1", "class": {"name": "JobLogController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logDetailPage", "params": ["int", "Model"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String logDetailPage(int id, Model model){\t\t// base check\t\tReturnT<String> logStatue = ReturnT.SUCCESS;\t\tXxlJobLog jobLog = xxlJobLogDao.load(id);\t\tif (jobLog == null) {            throw new RuntimeException(I18nUtil.getString(\"joblog_logid_unvalid\"));\t\t}        model.addAttribute(\"triggerCode\", jobLog.getTriggerCode());        model.addAttribute(\"handleCode\", jobLog.getHandleCode());        model.addAttribute(\"executorAddress\", jobLog.getExecutorAddress());        model.addAttribute(\"triggerTime\", jobLog.getTriggerTime().getTime());        model.addAttribute(\"logId\", jobLog.getId());\t\treturn \"joblog/joblog.detail\";\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobLogController.java", "stars": "1", "class": {"name": "JobLogController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logDetailCat", "params": ["String", "long", "long", "int"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<LogResult>", "snippet": "\tpublic ReturnT<LogResult> logDetailCat(String executorAddress, long triggerTime, long logId, int fromLineNum){\t\ttry {\t\t\tExecutorBiz executorBiz = XxlJobScheduler.getExecutorBiz(executorAddress);\t\t\tReturnT<LogResult> logResult = executorBiz.log(triggerTime, logId, fromLineNum);\t\t\t// is end            if (logResult.getContent()!=null && logResult.getContent().getFromLineNum() > logResult.getContent().getToLineNum()) {                XxlJobLog jobLog = xxlJobLogDao.load(logId);                if (jobLog.getHandleCode() > 0) {                    logResult.getContent().setEnd(true);                }            }\t\t\treturn logResult;\t\t} catch (Exception e) {\t\t\tlogger.error(e.getMessage(), e);\t\t\treturn new ReturnT<LogResult>(ReturnT.FAIL_CODE, e.getMessage());\t\t}\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobLogController.java", "stars": "1", "class": {"name": "JobLogController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logKill", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> logKill(int id){\t\t// base check\t\tXxlJobLog log = xxlJobLogDao.load(id);\t\tXxlJobInfo jobInfo = xxlJobInfoDao.loadById(log.getJobId());\t\tif (jobInfo==null) {\t\t\treturn new ReturnT<String>(500, I18nUtil.getString(\"jobinfo_glue_jobid_unvalid\"));\t\t}\t\tif (ReturnT.SUCCESS_CODE != log.getTriggerCode()) {\t\t\treturn new ReturnT<String>(500, I18nUtil.getString(\"joblog_kill_log_limit\"));\t\t}\t\t// request of kill\t\tReturnT<String> runResult = null;\t\ttry {\t\t\tExecutorBiz executorBiz = XxlJobScheduler.getExecutorBiz(log.getExecutorAddress());\t\t\trunResult = executorBiz.kill(jobInfo.getId());\t\t} catch (Exception e) {\t\t\tlogger.error(e.getMessage(), e);\t\t\trunResult = new ReturnT<String>(500, e.getMessage());\t\t}\t\tif (ReturnT.SUCCESS_CODE == runResult.getCode()) {\t\t\tlog.setHandleCode(ReturnT.FAIL_CODE);\t\t\tlog.setHandleMsg( I18nUtil.getString(\"joblog_kill_log_byman\")+\":\" + (runResult.getMsg()!=null?runResult.getMsg():\"\"));\t\t\tlog.setHandleTime(new Date());\t\t\txxlJobLogDao.updateHandleInfo(log);\t\t\treturn new ReturnT<String>(runResult.getMsg());\t\t} else {\t\t\treturn new ReturnT<String>(500, runResult.getMsg());\t\t}\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobLogController.java", "stars": "1", "class": {"name": "JobLogController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearLog", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> clearLog(int jobGroup, int jobId, int type){\t\tDate clearBeforeTime = null;\t\tint clearBeforeNum = 0;\t\tif (type == 1) {\t\t\tclearBeforeTime = DateUtil.addMonths(new Date(), -1);\t// \u6e05\u7406\u4e00\u4e2a\u6708\u4e4b\u524d\u65e5\u5fd7\u6570\u636e\t\t} else if (type == 2) {\t\t\tclearBeforeTime = DateUtil.addMonths(new Date(), -3);\t// \u6e05\u7406\u4e09\u4e2a\u6708\u4e4b\u524d\u65e5\u5fd7\u6570\u636e\t\t} else if (type == 3) {\t\t\tclearBeforeTime = DateUtil.addMonths(new Date(), -6);\t// \u6e05\u7406\u516d\u4e2a\u6708\u4e4b\u524d\u65e5\u5fd7\u6570\u636e\t\t} else if (type == 4) {\t\t\tclearBeforeTime = DateUtil.addYears(new Date(), -1);\t// \u6e05\u7406\u4e00\u5e74\u4e4b\u524d\u65e5\u5fd7\u6570\u636e\t\t} else if (type == 5) {\t\t\tclearBeforeNum = 1000;\t\t// \u6e05\u7406\u4e00\u5343\u6761\u4ee5\u524d\u65e5\u5fd7\u6570\u636e\t\t} else if (type == 6) {\t\t\tclearBeforeNum = 10000;\t\t// \u6e05\u7406\u4e00\u4e07\u6761\u4ee5\u524d\u65e5\u5fd7\u6570\u636e\t\t} else if (type == 7) {\t\t\tclearBeforeNum = 30000;\t\t// \u6e05\u7406\u4e09\u4e07\u6761\u4ee5\u524d\u65e5\u5fd7\u6570\u636e\t\t} else if (type == 8) {\t\t\tclearBeforeNum = 100000;\t// \u6e05\u7406\u5341\u4e07\u6761\u4ee5\u524d\u65e5\u5fd7\u6570\u636e\t\t} else if (type == 9) {\t\t\tclearBeforeNum = 0;\t\t\t// \u6e05\u7406\u6240\u6709\u65e5\u5fd7\u6570\u636e\t\t} else {\t\t\treturn new ReturnT<String>(ReturnT.FAIL_CODE, I18nUtil.getString(\"joblog_clean_type_unvalid\"));\t\t}\t\tList<Long> logIds = null;\t\tdo {\t\t\tlogIds = xxlJobLogDao.findClearLogIds(jobGroup, jobId, clearBeforeTime, clearBeforeNum, 1000);\t\t\tif (logIds!=null && logIds.size()>0) {\t\t\t\txxlJobLogDao.clearLog(logIds);\t\t\t}\t\t} while (logIds!=null && logIds.size()>0);\t\treturn ReturnT.SUCCESS;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobLogController.java", "stars": "1", "class": {"name": "JobLogController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //1.\u521b\u5efa\u4e00\u4e2aFileOutputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5199\u5165\u6570\u636e\u7684\u76ee\u7684\u5730        FileOutputStream fos = new FileOutputStream(\"09_IOAndProperties\\\\a.txt\");        //2.\u8c03\u7528FileOutputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5write,\u628a\u6570\u636e\u5199\u5165\u5230\u6587\u4ef6\u4e2d        //public abstract void write(int b) \uff1a\u5c06\u6307\u5b9a\u7684\u5b57\u8282\u8f93\u51fa\u6d41\u3002        fos.write(97);        //3.\u91ca\u653e\u8d44\u6e90(\u6d41\u4f7f\u7528\u4f1a\u5360\u7528\u4e00\u5b9a\u7684\u5185\u5b58,\u4f7f\u7528\u5b8c\u6bd5\u8981\u628a\u5185\u5b58\u6e05\u7a7a,\u63d0\u4f9b\u7a0b\u5e8f\u7684\u6548\u7387)        //fos.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/demo01/OutputStream/Demo01OutputStream.java", "stars": "2", "class": {"name": "Demo01OutputStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "View", "snippet": "    private View initView() {        LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.view_contract_kind_pop_window, null);        ListView listView= (ListView) view.findViewById(R.id.lv_kind);        ImageView iv_up= (ImageView) view.findViewById(R.id.iv_up);        //TODO test start        List<ClearingBean> mDatas=new ArrayList<>();        mDatas.add(new ClearingBean(1,\"BTC/USDT\",\"\u6c38\u7eed\",\"25533.5\",\"+0.33%\"));        mDatas.add(new ClearingBean(1,\"BTC/USDT\",\"\u6c38\u7eed\",\"25533.5\",\"+0.33%\"));        mDatas.add(new ClearingBean(1,\"BTC/USDT\",\"\u6c38\u7eed\",\"25533.5\",\"+0.33%\"));        mDatas.add(new ClearingBean(1,\"BTC/USDT\",\"\u6c38\u7eed\",\"25533.5\",\"+0.33%\"));        mDatas.add(new ClearingBean(1,\"BTC/USDT\",\"\u6c38\u7eed\",\"25533.5\",\"+0.33%\"));        mDatas.add(new ClearingBean(1,\"BTC/USDT\",\"\u6c38\u7eed\",\"25533.5\",\"+0.33%\"));        mDatas.add(new ClearingBean(1,\"BTC/USDT\",\"\u6c38\u7eed\",\"25533.5\",\"+0.33%\"));        //TODO test end        listView.setAdapter(new ClearingDropDownAdapter(mContext,mDatas));        RxView.clicks(iv_up).throttleFirst(1, TimeUnit.SECONDS)                .subscribe(new Observer<Object>() {                    @Override                    public void onSubscribe(Disposable d) {}                    @Override                    public void onNext(Object o) {                        dismiss();                    }                    @Override                    public void onError(Throwable e) {}                    @Override                    public void onComplete() {}                });        return view;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/ContractKindPopWindow.java", "stars": "1", "class": {"name": "ContractKindPopWindow", "extends": "PopupWindow", "implements": null, "modifiers": ["public"]}}, {"method_name": "showContractKindPopWindow", "params": ["View", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showContractKindPopWindow(View anchor, int xoff, int yoff){        this.showAsDropDown(anchor,xoff,yoff);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/ContractKindPopWindow.java", "stars": "1", "class": {"name": "ContractKindPopWindow", "extends": "PopupWindow", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "PmsBrandExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNull() {            addCriterion(\"name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNotNull() {            addCriterion(\"name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameEqualTo(String value) {            addCriterion(\"name =\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotEqualTo(String value) {            addCriterion(\"name <>\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThan(String value) {            addCriterion(\"name >\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThanOrEqualTo(String value) {            addCriterion(\"name >=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThan(String value) {            addCriterion(\"name <\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThanOrEqualTo(String value) {            addCriterion(\"name <=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLike(String value) {            addCriterion(\"name like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotLike(String value) {            addCriterion(\"name not like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIn(List<String> values) {            addCriterion(\"name in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotIn(List<String> values) {            addCriterion(\"name not in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameBetween(String value1, String value2) {            addCriterion(\"name between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotBetween(String value1, String value2) {            addCriterion(\"name not between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterIsNull() {            addCriterion(\"first_letter is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterIsNotNull() {            addCriterion(\"first_letter is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterEqualTo(String value) {            addCriterion(\"first_letter =\", value, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterNotEqualTo(String value) {            addCriterion(\"first_letter <>\", value, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterGreaterThan(String value) {            addCriterion(\"first_letter >\", value, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterGreaterThanOrEqualTo(String value) {            addCriterion(\"first_letter >=\", value, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterLessThan(String value) {            addCriterion(\"first_letter <\", value, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterLessThanOrEqualTo(String value) {            addCriterion(\"first_letter <=\", value, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterLike(String value) {            addCriterion(\"first_letter like\", value, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterNotLike(String value) {            addCriterion(\"first_letter not like\", value, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterIn(List<String> values) {            addCriterion(\"first_letter in\", values, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterNotIn(List<String> values) {            addCriterion(\"first_letter not in\", values, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterBetween(String value1, String value2) {            addCriterion(\"first_letter between\", value1, value2, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFirstLetterNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFirstLetterNotBetween(String value1, String value2) {            addCriterion(\"first_letter not between\", value1, value2, \"firstLetter\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIsNull() {            addCriterion(\"sort is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIsNotNull() {            addCriterion(\"sort is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortEqualTo(Integer value) {            addCriterion(\"sort =\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotEqualTo(Integer value) {            addCriterion(\"sort <>\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortGreaterThan(Integer value) {            addCriterion(\"sort >\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortGreaterThanOrEqualTo(Integer value) {            addCriterion(\"sort >=\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortLessThan(Integer value) {            addCriterion(\"sort <\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortLessThanOrEqualTo(Integer value) {            addCriterion(\"sort <=\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIn(List<Integer> values) {            addCriterion(\"sort in\", values, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotIn(List<Integer> values) {            addCriterion(\"sort not in\", values, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortBetween(Integer value1, Integer value2) {            addCriterion(\"sort between\", value1, value2, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotBetween(Integer value1, Integer value2) {            addCriterion(\"sort not between\", value1, value2, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusIsNull() {            addCriterion(\"factory_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusIsNotNull() {            addCriterion(\"factory_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusEqualTo(Integer value) {            addCriterion(\"factory_status =\", value, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusNotEqualTo(Integer value) {            addCriterion(\"factory_status <>\", value, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusGreaterThan(Integer value) {            addCriterion(\"factory_status >\", value, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"factory_status >=\", value, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusLessThan(Integer value) {            addCriterion(\"factory_status <\", value, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"factory_status <=\", value, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusIn(List<Integer> values) {            addCriterion(\"factory_status in\", values, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusNotIn(List<Integer> values) {            addCriterion(\"factory_status not in\", values, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusBetween(Integer value1, Integer value2) {            addCriterion(\"factory_status between\", value1, value2, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFactoryStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFactoryStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"factory_status not between\", value1, value2, \"factoryStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusIsNull() {            addCriterion(\"show_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusIsNotNull() {            addCriterion(\"show_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusEqualTo(Integer value) {            addCriterion(\"show_status =\", value, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusNotEqualTo(Integer value) {            addCriterion(\"show_status <>\", value, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusGreaterThan(Integer value) {            addCriterion(\"show_status >\", value, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"show_status >=\", value, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusLessThan(Integer value) {            addCriterion(\"show_status <\", value, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"show_status <=\", value, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusIn(List<Integer> values) {            addCriterion(\"show_status in\", values, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusNotIn(List<Integer> values) {            addCriterion(\"show_status not in\", values, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusBetween(Integer value1, Integer value2) {            addCriterion(\"show_status between\", value1, value2, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andShowStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andShowStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"show_status not between\", value1, value2, \"showStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountIsNull() {            addCriterion(\"product_count is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountIsNotNull() {            addCriterion(\"product_count is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountEqualTo(Integer value) {            addCriterion(\"product_count =\", value, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountNotEqualTo(Integer value) {            addCriterion(\"product_count <>\", value, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountGreaterThan(Integer value) {            addCriterion(\"product_count >\", value, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountGreaterThanOrEqualTo(Integer value) {            addCriterion(\"product_count >=\", value, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountLessThan(Integer value) {            addCriterion(\"product_count <\", value, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountLessThanOrEqualTo(Integer value) {            addCriterion(\"product_count <=\", value, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountIn(List<Integer> values) {            addCriterion(\"product_count in\", values, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountNotIn(List<Integer> values) {            addCriterion(\"product_count not in\", values, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountBetween(Integer value1, Integer value2) {            addCriterion(\"product_count between\", value1, value2, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCountNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCountNotBetween(Integer value1, Integer value2) {            addCriterion(\"product_count not between\", value1, value2, \"productCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountIsNull() {            addCriterion(\"product_comment_count is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountIsNotNull() {            addCriterion(\"product_comment_count is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountEqualTo(Integer value) {            addCriterion(\"product_comment_count =\", value, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountNotEqualTo(Integer value) {            addCriterion(\"product_comment_count <>\", value, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountGreaterThan(Integer value) {            addCriterion(\"product_comment_count >\", value, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountGreaterThanOrEqualTo(Integer value) {            addCriterion(\"product_comment_count >=\", value, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountLessThan(Integer value) {            addCriterion(\"product_comment_count <\", value, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountLessThanOrEqualTo(Integer value) {            addCriterion(\"product_comment_count <=\", value, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountIn(List<Integer> values) {            addCriterion(\"product_comment_count in\", values, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountNotIn(List<Integer> values) {            addCriterion(\"product_comment_count not in\", values, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountBetween(Integer value1, Integer value2) {            addCriterion(\"product_comment_count between\", value1, value2, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCommentCountNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCommentCountNotBetween(Integer value1, Integer value2) {            addCriterion(\"product_comment_count not between\", value1, value2, \"productCommentCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoIsNull() {            addCriterion(\"logo is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoIsNotNull() {            addCriterion(\"logo is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoEqualTo(String value) {            addCriterion(\"logo =\", value, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoNotEqualTo(String value) {            addCriterion(\"logo <>\", value, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoGreaterThan(String value) {            addCriterion(\"logo >\", value, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoGreaterThanOrEqualTo(String value) {            addCriterion(\"logo >=\", value, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoLessThan(String value) {            addCriterion(\"logo <\", value, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoLessThanOrEqualTo(String value) {            addCriterion(\"logo <=\", value, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoLike(String value) {            addCriterion(\"logo like\", value, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoNotLike(String value) {            addCriterion(\"logo not like\", value, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoIn(List<String> values) {            addCriterion(\"logo in\", values, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoNotIn(List<String> values) {            addCriterion(\"logo not in\", values, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoBetween(String value1, String value2) {            addCriterion(\"logo between\", value1, value2, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLogoNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLogoNotBetween(String value1, String value2) {            addCriterion(\"logo not between\", value1, value2, \"logo\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicIsNull() {            addCriterion(\"big_pic is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicIsNotNull() {            addCriterion(\"big_pic is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicEqualTo(String value) {            addCriterion(\"big_pic =\", value, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicNotEqualTo(String value) {            addCriterion(\"big_pic <>\", value, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicGreaterThan(String value) {            addCriterion(\"big_pic >\", value, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicGreaterThanOrEqualTo(String value) {            addCriterion(\"big_pic >=\", value, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicLessThan(String value) {            addCriterion(\"big_pic <\", value, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicLessThanOrEqualTo(String value) {            addCriterion(\"big_pic <=\", value, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicLike(String value) {            addCriterion(\"big_pic like\", value, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicNotLike(String value) {            addCriterion(\"big_pic not like\", value, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicIn(List<String> values) {            addCriterion(\"big_pic in\", values, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicNotIn(List<String> values) {            addCriterion(\"big_pic not in\", values, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicBetween(String value1, String value2) {            addCriterion(\"big_pic between\", value1, value2, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBigPicNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBigPicNotBetween(String value1, String value2) {            addCriterion(\"big_pic not between\", value1, value2, \"bigPic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsBrandExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "operation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void operation() {        this.str = \"CoinHallHandler:{\u8fdb\u5165\u5927\u5385}\";    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/impl/CoinHallHandler.java", "stars": "1", "class": {"name": "CoinHallHandler", "extends": "Handler", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        hallServiceNew = this.hallService;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/impl/CoinHallHandler.java", "stars": "1", "class": {"name": "CoinHallHandler", "extends": "Handler", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlerMessage", "params": ["RequestMessageData"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handlerMessage(RequestMessageData requestMessageData) {        super.handlerMessage(requestMessageData);       log.info(\"\u52a0\u5165\u5927\u5385\");        DataPacket dataPacket = requestMessageData.getDataPacket();        hallServiceNew.joinHall(requestMessageData.getRequest(),JSONObject.parseObject(JSONObject.toJSONString(dataPacket)));    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/impl/CoinHallHandler.java", "stars": "1", "class": {"name": "CoinHallHandler", "extends": "Handler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getJobId() {        return jobId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "schedule", "params": ["List<Configuration>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void schedule(List<Configuration> configurations) {        Validate.notNull(configurations,                \"scheduler\u914d\u7f6e\u4e0d\u80fd\u4e3a\u7a7a\");        int jobReportIntervalInMillSec = configurations.get(0).getInt(                CoreConstant.DATAX_CORE_CONTAINER_JOB_REPORTINTERVAL, 30000);        int jobSleepIntervalInMillSec = configurations.get(0).getInt(                CoreConstant.DATAX_CORE_CONTAINER_JOB_SLEEPINTERVAL, 10000);        this.jobId = configurations.get(0).getLong(                CoreConstant.DATAX_CORE_CONTAINER_JOB_ID);        errorLimit = new ErrorRecordChecker(configurations.get(0));        /**         * \u7ed9 taskGroupContainer \u7684 Communication \u6ce8\u518c         */        this.containerCommunicator.registerCommunication(configurations);        int totalTasks = calculateTaskCount(configurations);        startAllTaskGroup(configurations);        Communication lastJobContainerCommunication = new Communication();        long lastReportTimeStamp = System.currentTimeMillis();        scheduable = true;        try {            while (scheduable) {                /*                  step 1: collect job stat                  step 2: getReport info, then report it                  step 3: errorLimit do check                  step 4: dealSucceedStat();                  step 5: dealKillingStat();                  step 6: dealFailedStat();                  step 7: refresh last job stat, and then sleep for next while                  above steps, some ones should report info to DS                 */                Communication nowJobContainerCommunication = this.containerCommunicator.collect();                nowJobContainerCommunication.setTimestamp(System.currentTimeMillis());                LOG.debug(nowJobContainerCommunication.toString());                //reporting cycle                long now = System.currentTimeMillis();                if (now - lastReportTimeStamp > jobReportIntervalInMillSec) {                    Communication reportCommunication = CommunicationTool                            .getReportCommunication(nowJobContainerCommunication, lastJobContainerCommunication, totalTasks);                    this.containerCommunicator.report(reportCommunication);                    lastReportTimeStamp = now;                    lastJobContainerCommunication = nowJobContainerCommunication;                }                errorLimit.checkRecordLimit(nowJobContainerCommunication);                if (nowJobContainerCommunication.getState() == State.SUCCEEDED) {                    LOG.info(\"Scheduler accomplished all tasks.\");                    break;                }                if (isJobKilling(this.getJobId())) {                    dealKillingStat(this.containerCommunicator, totalTasks);                } else if (nowJobContainerCommunication.getState() == State.FAILED) {                    dealFailedStat(this.containerCommunicator, nowJobContainerCommunication.getThrowable());                }                Configuration configuration = this.containerCommunicator.getConfiguration();                boolean adjust = variableTaskGroupSpeedStrategy.adjustSpeed(nowJobContainerCommunication, configuration);                if(adjust){                    adjustTaskGroupSpeed(configuration.getLong(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_BYTE, 0),                            configuration.getLong(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_RECORD, 0));                }                Thread.sleep(jobSleepIntervalInMillSec);            }        } catch (InterruptedException e) {            LOG.error(\"Catch InterruptedException exception\", e);            Thread.currentThread().interrupt();            throw DataXException.asDataXException(                    FrameworkErrorCode.RUNTIME_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "stopSchedule", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public  void stopSchedule(){        scheduable = false;        cancelAllTaskGroup();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "startAllTaskGroup", "params": ["List<Configuration>"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void startAllTaskGroup(List<Configuration> configurations);    /**     * cancel all task groups     */    protected abstract void cancelAllTaskGroup();    /**     * deal the fail status     * @param frameworkCollector     * @param throwable     */    protected abstract void dealFailedStat(AbstractContainerCommunicator frameworkCollector, Throwable throwable);    /**     * deal the kill status     * @param frameworkCollector     * @param totalTasks     */    protected abstract void dealKillingStat(AbstractContainerCommunicator frameworkCollector, int totalTasks);    /**     * adjust speed     * @param byteSpeed     * @param recordSpeed     */    protected abstract void adjustTaskGroupSpeed(long byteSpeed, long recordSpeed);    /**     * if the job has been killed     * @param jobId     * @return     */    protected abstract boolean isJobKilling(Long jobId);    private int calculateTaskCount(List<Configuration> configurations) {        int totalTasks = 0;        for (Configuration taskGroupConfiguration : configurations) {            totalTasks += taskGroupConfiguration.getListConfiguration(                    CoreConstant.DATAX_JOB_CONTENT).size();        }        return totalTasks;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cancelAllTaskGroup", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void cancelAllTaskGroup();    /**     * deal the fail status     * @param frameworkCollector     * @param throwable     */    protected abstract void dealFailedStat(AbstractContainerCommunicator frameworkCollector, Throwable throwable);    /**     * deal the kill status     * @param frameworkCollector     * @param totalTasks     */    protected abstract void dealKillingStat(AbstractContainerCommunicator frameworkCollector, int totalTasks);    /**     * adjust speed     * @param byteSpeed     * @param recordSpeed     */    protected abstract void adjustTaskGroupSpeed(long byteSpeed, long recordSpeed);    /**     * if the job has been killed     * @param jobId     * @return     */    protected abstract boolean isJobKilling(Long jobId);    private int calculateTaskCount(List<Configuration> configurations) {        int totalTasks = 0;        for (Configuration taskGroupConfiguration : configurations) {            totalTasks += taskGroupConfiguration.getListConfiguration(                    CoreConstant.DATAX_JOB_CONTENT).size();        }        return totalTasks;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "dealFailedStat", "params": ["AbstractContainerCommunicator", "Throwable"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void dealFailedStat(AbstractContainerCommunicator frameworkCollector, Throwable throwable);    /**     * deal the kill status     * @param frameworkCollector     * @param totalTasks     */    protected abstract void dealKillingStat(AbstractContainerCommunicator frameworkCollector, int totalTasks);    /**     * adjust speed     * @param byteSpeed     * @param recordSpeed     */    protected abstract void adjustTaskGroupSpeed(long byteSpeed, long recordSpeed);    /**     * if the job has been killed     * @param jobId     * @return     */    protected abstract boolean isJobKilling(Long jobId);    private int calculateTaskCount(List<Configuration> configurations) {        int totalTasks = 0;        for (Configuration taskGroupConfiguration : configurations) {            totalTasks += taskGroupConfiguration.getListConfiguration(                    CoreConstant.DATAX_JOB_CONTENT).size();        }        return totalTasks;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "dealKillingStat", "params": ["AbstractContainerCommunicator", "int"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void dealKillingStat(AbstractContainerCommunicator frameworkCollector, int totalTasks);    /**     * adjust speed     * @param byteSpeed     * @param recordSpeed     */    protected abstract void adjustTaskGroupSpeed(long byteSpeed, long recordSpeed);    /**     * if the job has been killed     * @param jobId     * @return     */    protected abstract boolean isJobKilling(Long jobId);    private int calculateTaskCount(List<Configuration> configurations) {        int totalTasks = 0;        for (Configuration taskGroupConfiguration : configurations) {            totalTasks += taskGroupConfiguration.getListConfiguration(                    CoreConstant.DATAX_JOB_CONTENT).size();        }        return totalTasks;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "adjustTaskGroupSpeed", "params": ["long", "long"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void adjustTaskGroupSpeed(long byteSpeed, long recordSpeed);    /**     * if the job has been killed     * @param jobId     * @return     */    protected abstract boolean isJobKilling(Long jobId);    private int calculateTaskCount(List<Configuration> configurations) {        int totalTasks = 0;        for (Configuration taskGroupConfiguration : configurations) {            totalTasks += taskGroupConfiguration.getListConfiguration(                    CoreConstant.DATAX_JOB_CONTENT).size();        }        return totalTasks;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isJobKilling", "params": ["Long"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "boolean", "snippet": "    protected abstract boolean isJobKilling(Long jobId);    private int calculateTaskCount(List<Configuration> configurations) {        int totalTasks = 0;        for (Configuration taskGroupConfiguration : configurations) {            totalTasks += taskGroupConfiguration.getListConfiguration(                    CoreConstant.DATAX_JOB_CONTENT).size();        }        return totalTasks;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "calculateTaskCount", "params": ["List<Configuration>"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int calculateTaskCount(List<Configuration> configurations) {        int totalTasks = 0;        for (Configuration taskGroupConfiguration : configurations) {            totalTasks += taskGroupConfiguration.getListConfiguration(                    CoreConstant.DATAX_JOB_CONTENT).size();        }        return totalTasks;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/AbstractScheduler.java", "stars": "23", "class": {"name": "AbstractScheduler", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "matchIntersectsWithRange", "params": ["RuleMatch", "Range", "DocumentPositionCalculator"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean matchIntersectsWithRange(RuleMatch match, Range range,      DocumentPositionCalculator positionCalculator) {    // false iff match is completely before range or completely after range    return !(positionLower(positionCalculator.getPosition(match.getToPos()), range.getStart()) ||        positionLower(range.getEnd(), positionCalculator.getPosition(match.getFromPos())));  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "positionLower", "params": ["Position", "Position"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean positionLower(Position position1, Position position2) {    return ((position1.getLine() < position2.getLine()) ||        ((position1.getLine() == position2.getLine()) &&        (position1.getCharacter() < position2.getCharacter())));  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "createDiagnostic", "params": ["RuleMatch", "DocumentPositionCalculator"], "throws": null, "modifiers": ["private"], "return_type": "Diagnostic", "snippet": "  private Diagnostic createDiagnostic(      RuleMatch match, DocumentPositionCalculator positionCalculator) {    Diagnostic ret = new Diagnostic();    ret.setRange(new Range(        positionCalculator.getPosition(match.getFromPos()),        positionCalculator.getPosition(match.getToPos())));    ret.setSeverity(settings.getDiagnosticSeverity());    ret.setSource(\"LTeX - \" + match.getRule().getId());    ret.setMessage(match.getMessage().replaceAll(\"<suggestion>(.*?)</suggestion>\", \"'$1'\"));    return ret;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "invertAnnotatedText", "params": ["AnnotatedText"], "throws": null, "modifiers": ["private"], "return_type": "AnnotatedText", "snippet": "  private AnnotatedText invertAnnotatedText(AnnotatedText annotatedText) {    List<Map.Entry<Integer, Integer>> mapping = annotatedText.getMapping();    List<Map.Entry<Integer, Integer>> inverseMapping = new ArrayList<>();    for (Map.Entry<Integer, Integer> entry : mapping) {      inverseMapping.add(new AbstractMap.SimpleEntry<>(entry.getValue(), entry.getKey()));    }    return new AnnotatedText(Collections.emptyList(), inverseMapping, Collections.emptyMap(),        Collections.emptyMap());  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "getPlainTextPositionFor", "params": ["int", "AnnotatedText"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getPlainTextPositionFor(int originalTextPosition,      AnnotatedText inverseAnnotatedText) {    return inverseAnnotatedText.getOriginalTextPositionFor(originalTextPosition);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["InitializeParams"], "throws": null, "modifiers": ["public"], "return_type": "CompletableFuture<InitializeResult>", "snippet": "  public CompletableFuture<InitializeResult> initialize(InitializeParams params) {    ServerCapabilities capabilities = new ServerCapabilities();    capabilities.setTextDocumentSync(TextDocumentSyncKind.Full);    capabilities.setCodeActionProvider(        new CodeActionOptions(Arrays.asList(          acceptSuggestionCodeActionKind, addToDictionaryCodeActionKind,          disableRuleCodeActionKind, ignoreRuleInSentenceCodeActionKind)));    capabilities.setExecuteCommandProvider(        new ExecuteCommandOptions(Arrays.asList(          addToDictionaryCommandName, disableRuleCommandName, ignoreRuleInSentenceCommandName)));    // Until it is specified in the LSP that the locale is automatically sent with    // the initialization request, we have to do that manually.    // See https://github.com/microsoft/language-server-protocol/issues/754.    JsonObject initializationOptions = (JsonObject) params.getInitializationOptions();    if ((initializationOptions != null) && initializationOptions.has(\"locale\")) {      String localeLanguage = initializationOptions.get(\"locale\").getAsString();      Locale locale = Locale.forLanguageTag(localeLanguage);      Tools.logger.info(Tools.i18n(\"settingLocale\", locale.getLanguage()));      Tools.setLocale(locale);    }    reinitialize();    String language = settings.getLanguageShortCode();    settingsMap.put(language, settings);    languageToolMap.put(language, languageTool);    return CompletableFuture.completedFuture(new InitializeResult(capabilities));  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "reinitialize", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void reinitialize() {    languageTool = null;    if (!Languages.isLanguageSupported(settings.getLanguageShortCode())) {      Tools.logger.severe(Tools.i18n(\"notARecognizedLanguage\", settings.getLanguageShortCode()));      return;    }    Language language = Languages.getLanguageForShortCode(settings.getLanguageShortCode());    String motherTongueShortCode = settings.getMotherTongueShortCode();    Language motherTongue = ((motherTongueShortCode != null) ?        Languages.getLanguageForShortCode(motherTongueShortCode) : null);    ResultCache resultCache = new ResultCache(settings.getSentenceCacheSize(),        resultCacheExpireAfterMinutes, TimeUnit.MINUTES);    UserConfig userConfig = new UserConfig(settings.getDictionary());    languageTool = new JLanguageTool(language, motherTongue, resultCache, userConfig);    if (settings.getLanguageModelRulesDirectory() == null) {      if (motherTongue != null) {        // from JLanguageTool.activateDefaultFalseFriendRules (which is private)        String falseFriendRulePath = JLanguageTool.getDataBroker().getRulesDir() + \"/\" +            JLanguageTool.FALSE_FRIEND_FILE;        try {          List<AbstractPatternRule> falseFriendRules = languageTool.loadFalseFriendRules(              falseFriendRulePath);          for (Rule rule : falseFriendRules) languageTool.addRule(rule);        } catch (ParserConfigurationException | SAXException | IOException e) {          Tools.logger.warning(Tools.i18n(\"couldNotLoadFalseFriendRules\",              falseFriendRulePath, e.getMessage()));          e.printStackTrace();        }      }    } else {      try {        languageTool.activateLanguageModelRules(            new File(settings.getLanguageModelRulesDirectory()));      } catch (IOException | RuntimeException e) {        Tools.logger.warning(Tools.i18n(\"couldNotLoadLanguageModel\",            settings.getLanguageModelRulesDirectory(), e.getMessage()));        e.printStackTrace();      }    }    if (settings.getNeuralNetworkModelRulesDirectory() != null) {      try {        languageTool.activateNeuralNetworkRules(            new File(settings.getNeuralNetworkModelRulesDirectory()));      } catch (IOException | RuntimeException e) {        Tools.logger.warning(Tools.i18n(\"couldNotLoadNeuralNetworkModel\",            settings.getNeuralNetworkModelRulesDirectory(), e.getMessage()));        e.printStackTrace();      }    }    if (settings.getWord2VecModelRulesDirectory() != null) {      try {        languageTool.activateWord2VecModelRules(            new File(settings.getWord2VecModelRulesDirectory()));      } catch (IOException | RuntimeException e) {        Tools.logger.warning(Tools.i18n(\"couldNotLoadWord2VecModel\",            settings.getWord2VecModelRulesDirectory(), e.getMessage()));        e.printStackTrace();      }    }    // for strange reasons there is no JLanguageTool.enableRules    for (String ruleId : settings.getEnabledRules()) {      languageTool.enableRule(ruleId);    }    languageTool.disableRules(settings.getDisabledRules());  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CompletableFuture<Object>", "snippet": "  public CompletableFuture<Object> shutdown() {    // Per https://github.com/eclipse/lsp4j/issues/18    return CompletableFuture.completedFuture(new Object());  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "exit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void exit() {    System.exit(0);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "getTextDocumentService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TextDocumentService", "snippet": "  public TextDocumentService getTextDocumentService() {    return new FullTextDocumentService(documents) {      @Override      public CompletableFuture<List<Either<Command, CodeAction>>> codeAction(          CodeActionParams params) {        if (params.getContext().getDiagnostics().isEmpty()) {          return CompletableFuture.completedFuture(Collections.emptyList());        }        TextDocumentItem document = documents.get(params.getTextDocument().getUri());        VersionedTextDocumentIdentifier textDocument = new VersionedTextDocumentIdentifier(            document.getUri(), document.getVersion());        return validateDocument(document).thenApply(            (Pair<List<RuleMatch>, AnnotatedText> validateResult) -> {              if (validateResult.getValue() == null) {                return Collections.emptyList();              }              String text = document.getText();              String plainText = validateResult.getValue().getPlainText();              DocumentPositionCalculator positionCalculator = new DocumentPositionCalculator(text);              List<Either<Command, CodeAction>> result =                  new ArrayList<Either<Command, CodeAction>>();              List<RuleMatch> addWordToDictionaryMatches = new ArrayList<>();              List<RuleMatch> ignoreRuleInThisSentenceMatches = new ArrayList<>();              List<RuleMatch> disableRuleMatches = new ArrayList<>();              Map<String, List<RuleMatch>> useWordMatchesMap = new LinkedHashMap<>();              for (RuleMatch match : validateResult.getKey()) {                if (matchIntersectsWithRange(match, params.getRange(), positionCalculator)) {                  String ruleId = match.getRule().getId();                  if (ruleId.startsWith(\"MORFOLOGIK_\") || ruleId.startsWith(\"HUNSPELL_\") ||                      ruleId.startsWith(\"GERMAN_SPELLER_\")) {                    addWordToDictionaryMatches.add(match);                  }                  if (match.getSentence() != null) {                    ignoreRuleInThisSentenceMatches.add(match);                  }                  disableRuleMatches.add(match);                  for (String newWord : match.getSuggestedReplacements()) {                    useWordMatchesMap.putIfAbsent(newWord, new ArrayList<>());                    useWordMatchesMap.get(newWord).add(match);                  }                }              }              if (!addWordToDictionaryMatches.isEmpty()) {                AnnotatedText inverseAnnotatedText = invertAnnotatedText(validateResult.getValue());                List<String> unknownWords = new ArrayList<>();                JsonArray unknownWordsJson = new JsonArray();                List<Diagnostic> diagnostics = new ArrayList<>();                for (RuleMatch match : addWordToDictionaryMatches) {                  String word = plainText.substring(                      getPlainTextPositionFor(match.getFromPos(), inverseAnnotatedText),                      getPlainTextPositionFor(match.getToPos(), inverseAnnotatedText));                  if (!unknownWords.contains(word)) {                    unknownWords.add(word);                    unknownWordsJson.add(word);                  }                  diagnostics.add(createDiagnostic(match, positionCalculator));                }                Command command = new Command(((unknownWords.size() == 1) ?                    Tools.i18n(\"addWordToDictionary\", unknownWords.get(0)) :                    Tools.i18n(\"addAllUnknownWordsInSelectionToDictionary\")),                    addToDictionaryCommandName);                JsonObject arguments = new JsonObject();                arguments.addProperty(\"commandName\", addToDictionaryCommandName);                arguments.addProperty(\"uri\", document.getUri());                arguments.add(\"word\", unknownWordsJson);                command.setArguments(Arrays.asList(arguments));                CodeAction codeAction = new CodeAction(command.getTitle());                codeAction.setKind(addToDictionaryCodeActionKind);                codeAction.setDiagnostics(diagnostics);                codeAction.setCommand(command);                result.add(Either.forRight(codeAction));              }              if (!ignoreRuleInThisSentenceMatches.isEmpty()) {                List<Pair<String, String>> ruleIdSentencePairs = new ArrayList<>();                List<String> ruleIds = new ArrayList<>();                JsonArray ruleIdsJson = new JsonArray();                List<String> sentencePatternStrings = new ArrayList<>();                JsonArray sentencePatternStringsJson = new JsonArray();                List<Diagnostic> diagnostics = new ArrayList<>();                for (RuleMatch match : ignoreRuleInThisSentenceMatches) {                  String ruleId = match.getRule().getId();                  String sentence = match.getSentence().getText().trim();                  Pair<String, String> pair = new Pair<>(ruleId, sentence);                  if (!ruleIdSentencePairs.contains(pair)) {                    Matcher matcher = Pattern.compile(\"Dummy[0-9]+\").matcher(sentence);                    StringBuilder sentencePatternStringBuilder = new StringBuilder();                    int lastEnd = 0;                    while (matcher.find()) {                      sentencePatternStringBuilder.append(Pattern.quote(                          sentence.substring(lastEnd, matcher.start())));                      sentencePatternStringBuilder.append(\"Dummy[0-9]+\");                      lastEnd = matcher.end();                    }                    if (lastEnd < sentence.length()) {                      sentencePatternStringBuilder.append(Pattern.quote(                          sentence.substring(lastEnd)));                    }                    ruleIdSentencePairs.add(pair);                    ruleIds.add(ruleId);                    ruleIdsJson.add(ruleId);                    String sentencePatternString =                        \"^\" + sentencePatternStringBuilder.toString() + \"$\";                    sentencePatternStrings.add(sentencePatternString);                    sentencePatternStringsJson.add(sentencePatternString);                  }                  diagnostics.add(createDiagnostic(match, positionCalculator));                }                Command command = new Command(((ruleIdSentencePairs.size() == 1) ?                    Tools.i18n(\"ignoreRuleInThisSentence\") :                    Tools.i18n(\"ignoreAllRulesInTheSelectedSentences\")),                    ignoreRuleInSentenceCommandName);                JsonObject arguments = new JsonObject();                arguments.addProperty(\"commandName\", ignoreRuleInSentenceCommandName);                arguments.addProperty(\"uri\", document.getUri());                arguments.add(\"ruleId\", ruleIdsJson);                arguments.add(\"sentencePattern\", sentencePatternStringsJson);                command.setArguments(Arrays.asList(arguments));                CodeAction codeAction = new CodeAction(command.getTitle());                codeAction.setKind(ignoreRuleInSentenceCodeActionKind);                codeAction.setDiagnostics(diagnostics);                codeAction.setCommand(command);                result.add(Either.forRight(codeAction));              }              if (!disableRuleMatches.isEmpty()) {                List<String> ruleIds = new ArrayList<>();                JsonArray ruleIdsJson = new JsonArray();                List<Diagnostic> diagnostics = new ArrayList<>();                for (RuleMatch match : disableRuleMatches) {                  String ruleId = match.getRule().getId();                  if (!ruleIds.contains(ruleId)) {                    ruleIds.add(ruleId);                    ruleIdsJson.add(ruleId);                  }                  diagnostics.add(createDiagnostic(match, positionCalculator));                }                Command command = new Command(((ruleIds.size() == 1) ?                    Tools.i18n(\"disableRule\") :                    Tools.i18n(\"disableAllRulesWithMatchesInSelection\")),                    disableRuleCommandName);                JsonObject arguments = new JsonObject();                arguments.addProperty(\"commandName\", disableRuleCommandName);                arguments.addProperty(\"uri\", document.getUri());                arguments.add(\"ruleId\", ruleIdsJson);                command.setArguments(Arrays.asList(arguments));                CodeAction codeAction = new CodeAction(command.getTitle());                codeAction.setKind(disableRuleCodeActionKind);                codeAction.setDiagnostics(diagnostics);                codeAction.setCommand(command);                result.add(Either.forRight(codeAction));              }              for (Map.Entry<String, List<RuleMatch>> entry : useWordMatchesMap.entrySet()) {                String newWord = entry.getKey();                List<RuleMatch> useWordMatches = entry.getValue();                List<Diagnostic> diagnostics = new ArrayList<>();                List<Either<TextDocumentEdit, ResourceOperation>> documentChanges =                    new ArrayList<>();                for (RuleMatch match : useWordMatches) {                  Diagnostic diagnostic = createDiagnostic(match, positionCalculator);                  Range range = diagnostic.getRange();                  diagnostics.add(diagnostic);                  documentChanges.add(Either.forLeft(new TextDocumentEdit(textDocument,                      Collections.singletonList(new TextEdit(range, newWord)))));                }                CodeAction codeAction = new CodeAction((useWordMatches.size() == 1) ?                    Tools.i18n(\"useWord\", newWord) :                    Tools.i18n(\"useWordAllSelectedMatches\", newWord));                codeAction.setKind(acceptSuggestionCodeActionKind);                codeAction.setDiagnostics(diagnostics);                codeAction.setEdit(new WorkspaceEdit(documentChanges));                result.add(Either.forRight(codeAction));              }              return result;            });      }      @Override      public void didOpen(DidOpenTextDocumentParams params) {        super.didOpen(params);        publishIssues(params.getTextDocument().getUri());      }      @Override      public void didChange(DidChangeTextDocumentParams params) {        super.didChange(params);        publishIssues(params.getTextDocument().getUri());      }      @Override      public void didClose(DidCloseTextDocumentParams params) {        super.didClose(params);        String uri = params.getTextDocument().getUri();        client.publishDiagnostics(new PublishDiagnosticsParams(uri, Collections.emptyList()));      }      private void publishIssues(String uri) {        TextDocumentItem document = documents.get(uri);        LanguageToolLanguageServer.this.publishIssues(document);      }    };  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "publishIssues", "params": ["TextDocumentItem"], "throws": null, "modifiers": ["private"], "return_type": "CompletableFuture<Void>", "snippet": "  private CompletableFuture<Void> publishIssues(TextDocumentItem document) {    return getIssues(document).thenApply(        (List<Diagnostic> diagnostics) -> {          client.publishDiagnostics(new PublishDiagnosticsParams(document.getUri(), diagnostics));          return null;        });  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "getIssues", "params": ["TextDocumentItem"], "throws": null, "modifiers": ["private"], "return_type": "CompletableFuture<List>", "snippet": "  private CompletableFuture<List<Diagnostic>> getIssues(TextDocumentItem document) {    return validateDocument(document).thenApply(        (Pair<List<RuleMatch>, AnnotatedText> validateResult) -> {          List<RuleMatch> matches = validateResult.getKey();          DocumentPositionCalculator positionCalculator =              new DocumentPositionCalculator(document.getText());          return matches.stream().map(              match -> createDiagnostic(match, positionCalculator)).collect(Collectors.toList());        });  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "enableEasterEgg", "params": ["JLanguageTool"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void enableEasterEgg(JLanguageTool languageTool) {    languageTool.addRule(new Rule() {      public String getId() { return \"bspline\"; };      public String getDescription() { return \"Unknown basis function\"; };      public RuleMatch[] match(AnalyzedSentence sentence) {        List<RuleMatch> matches = new ArrayList<>();        for (AnalyzedTokenReadings token : sentence.getTokens()) {          if (token.getToken().equalsIgnoreCase(\"hat\")) {            matches.add(new RuleMatch(this, sentence, token.getStartPos(), token.getEndPos(),                \"Unknown basis function. Did you mean <suggestion>B-spline</suggestion>?\"));          }        }        return matches.toArray(new RuleMatch[]{});      }    });    languageTool.addRule(new Rule() {      public String getId() { return \"ungendered\"; };      public String getDescription() { return \"Ungendered variant\"; };      public RuleMatch[] match(AnalyzedSentence sentence) {        List<RuleMatch> matches = new ArrayList<>();        for (AnalyzedTokenReadings token : sentence.getTokens()) {          String s = token.getToken();          if ((s.length() >= 2) &&              (s.substring(s.length() - 2, s.length()).equalsIgnoreCase(\"er\"))) {            matches.add(new RuleMatch(this, sentence, token.getStartPos(), token.getEndPos(),                \"Ungendered variant detected. \" +                \"Did you mean <suggestion>\" + s + \"*in</suggestion>?\"));          }        }        return matches.toArray(new RuleMatch[]{});      }    });  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "validateDocument", "params": ["TextDocumentItem"], "throws": null, "modifiers": ["private"], "return_type": "CompletableFuture<Pair>", "snippet": "  private CompletableFuture<Pair<List<RuleMatch>, AnnotatedText>> validateDocument(      TextDocumentItem document) {    ConfigurationItem configurationItem = new ConfigurationItem();    configurationItem.setSection(\"ltex\");    configurationItem.setScopeUri(document.getUri());    CompletableFuture<List<Object>> configurationFuture = client.configuration(        new ConfigurationParams(Arrays.asList(configurationItem)));    return configurationFuture.thenApply(        (List<Object> configuration) -> {          setSettings((JsonElement) configuration.get(0));          if (languageTool == null) {            Tools.logger.warning(Tools.i18n(\"skippingTextCheck\"));            return new Pair<>(Collections.emptyList(), null);          }          String codeLanguageId = document.getLanguageId();          AnnotatedText annotatedText;          switch (codeLanguageId) {            case \"plaintext\": {              AnnotatedTextBuilder builder = new AnnotatedTextBuilder();              annotatedText = builder.addText(document.getText()).build();              break;            }            case \"markdown\": {              Parser p = Parser.builder().build();              Document mdDocument = p.parse(document.getText());              MarkdownAnnotatedTextBuilder builder = new MarkdownAnnotatedTextBuilder();              builder.language = settings.getLanguageShortCode();              builder.dummyNodeTypes.addAll(settings.getDummyMarkdownNodeTypes());              builder.ignoreNodeTypes.addAll(settings.getIgnoreMarkdownNodeTypes());              builder.visit(mdDocument);              annotatedText = builder.getAnnotatedText();              break;            }            case \"latex\":            case \"rsweave\": {              LatexAnnotatedTextBuilder builder = new LatexAnnotatedTextBuilder();              builder.language = settings.getLanguageShortCode();              builder.codeLanguageId = codeLanguageId;              for (String commandPrototype : settings.getDummyCommandPrototypes()) {                builder.commandSignatures.add(new LatexCommandSignature(commandPrototype,                    LatexCommandSignature.Action.DUMMY));              }              for (String commandPrototype : settings.getIgnoreCommandPrototypes()) {                builder.commandSignatures.add(new LatexCommandSignature(commandPrototype,                    LatexCommandSignature.Action.IGNORE));              }              builder.ignoreEnvironments.addAll(settings.getIgnoreEnvironments());              ExecutorService executor = Executors.newCachedThreadPool();              Future<Object> builderFuture = executor.submit(new Callable<Object>() {                public Object call() throws InterruptedException {                  builder.addCode(document.getText());                  return null;                }              });              try {                builderFuture.get(10, TimeUnit.SECONDS);              } catch (TimeoutException | InterruptedException | ExecutionException e) {                throw new RuntimeException(Tools.i18n(\"latexAnnotatedTextBuilderFailed\"), e);              } finally {                builderFuture.cancel(true);              }              annotatedText = builder.getAnnotatedText();              break;            }            default: {              throw new UnsupportedOperationException(Tools.i18n(                  \"codeLanguageNotSupported\", codeLanguageId));            }          }          if ((settings.getDictionary().size() >= 1) &&              \"BsPlInEs\".equals(settings.getDictionary().get(0))) {            enableEasterEgg(languageTool);          }          {            int logTextMaxLength = 100;            String logText = annotatedText.getPlainText();            String postfix = \"\";            if (logText.length() > logTextMaxLength) {              logText = logText.substring(0, logTextMaxLength);              postfix = Tools.i18n(\"truncatedPostfix\", logTextMaxLength);            }            Tools.logger.info(Tools.i18n(\"checkingText\",                settings.getLanguageShortCode(), StringEscapeUtils.escapeJava(logText), postfix));          }          try {            List<RuleMatch> result = languageTool.check(annotatedText);            Tools.logger.info((result.size() == 1) ? Tools.i18n(\"obtainedRuleMatch\") :                Tools.i18n(\"obtainedRuleMatches\", result.size()));            List<IgnoreRuleSentencePair> ignoreRuleSentencePairs =                settings.getIgnoreRuleSentencePairs();            if (!result.isEmpty() && !ignoreRuleSentencePairs.isEmpty()) {              List<RuleMatch> ignoreMatches = new ArrayList<>();              for (RuleMatch match : result) {                if (match.getSentence() != null) {                  String ruleId = match.getRule().getId();                  String sentence = match.getSentence().getText().trim();                  for (IgnoreRuleSentencePair pair : ignoreRuleSentencePairs) {                    if (pair.getRuleId().equals(ruleId) &&                          pair.getSentencePattern().matcher(sentence).find()) {                      Tools.logger.info(Tools.i18n(\"removingIgnoredRuleMatch\", ruleId, sentence));                      ignoreMatches.add(match);                      break;                    }                  }                }              }              if (!ignoreMatches.isEmpty()) {                Tools.logger.info((ignoreMatches.size() == 1) ?                    Tools.i18n(\"removedIgnoredRuleMatch\") :                    Tools.i18n(\"removedIgnoredRuleMatches\", ignoreMatches.size()));                for (RuleMatch match : ignoreMatches) result.remove(match);              }            }            return new Pair<>(result, annotatedText);          } catch (RuntimeException | IOException e) {            Tools.logger.severe(Tools.i18n(\"languageToolFailed\", e.getMessage()));            e.printStackTrace();            return new Pair<>(Collections.emptyList(), annotatedText);          }        });  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "getWorkspaceService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "WorkspaceService", "snippet": "  public WorkspaceService getWorkspaceService() {    return new NoOpWorkspaceService() {      @Override      public void didChangeConfiguration(DidChangeConfigurationParams params) {        super.didChangeConfiguration(params);        setSettings(((JsonObject) params.getSettings()).get(\"ltex\"));        documents.values().forEach(LanguageToolLanguageServer.this::publishIssues);      }      @Override      public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {        if (params.getCommand().equals(addToDictionaryCommandName) ||            params.getCommand().equals(disableRuleCommandName) ||            params.getCommand().equals(ignoreRuleInSentenceCommandName)) {          client.telemetryEvent(params.getArguments().get(0));          return CompletableFuture.completedFuture(true);        } else {          return CompletableFuture.completedFuture(false);        }      }    };  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "setSettings", "params": ["JsonElement"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setSettings(JsonElement jsonSettings) {    Settings newSettings = new Settings(jsonSettings);    String newLanguage = newSettings.getLanguageShortCode();    Settings oldSettings = settingsMap.getOrDefault(newLanguage, null);    if (newSettings.equals(oldSettings)) {      settings = oldSettings;      languageTool = languageToolMap.get(newLanguage);    } else {      settingsMap.put(newLanguage, newSettings);      settings = newSettings;      reinitialize();      languageToolMap.put(newLanguage, languageTool);    }  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "connect", "params": ["LanguageClient"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void connect(LanguageClient client) {    this.client = client;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/LanguageToolLanguageServer.java", "stars": "3", "class": {"name": "LanguageToolLanguageServer", "extends": null, "implements": ["LanguageServer", "LanguageClientAware"], "modifiers": ["public"]}}, {"method_name": "getMessageSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResourceBundleMessageSource", "snippet": "    public ResourceBundleMessageSource getMessageSource() {        ResourceBundleMessageSource resourceBundleMessageSource = new ResourceBundleMessageSource();        resourceBundleMessageSource.setDefaultEncoding(\"UTF-8\");        resourceBundleMessageSource.setBasenames(\"i18n/messages\");        return resourceBundleMessageSource;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/i18n/I18nConfiguration.java", "stars": "23", "class": {"name": "I18nConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "localeResolver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocaleResolver", "snippet": "    public LocaleResolver localeResolver(){        return new CustomLocaleResolver(\"Content-language\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/i18n/I18nConfiguration.java", "stars": "23", "class": {"name": "I18nConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "localValidatorFactoryBean", "params": ["ResourceBundleMessageSource"], "throws": null, "modifiers": ["public"], "return_type": "LocalValidatorFactoryBean", "snippet": "    public LocalValidatorFactoryBean localValidatorFactoryBean(ResourceBundleMessageSource resourceBundleMessageSource){        LocalValidatorFactoryBean localValidatorFactoryBean = new LocalValidatorFactoryBean();        localValidatorFactoryBean.getValidationPropertyMap().put(\"hibernate.validator.fail_fast\", \"true\");        localValidatorFactoryBean.setMessageInterpolator(new ResourceBundleMessageInterpolator(new MessageSourceResourceBundleLocator                (resourceBundleMessageSource), true, new ExpressionFactoryImpl()));        return localValidatorFactoryBean;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/i18n/I18nConfiguration.java", "stars": "23", "class": {"name": "I18nConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "general_profileAdapter", "snippet": "    public general_profileAdapter.myHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        LayoutInflater myInflater = LayoutInflater.from(ctx);        View myView = myInflater.inflate(R.layout.general_profile_ui,parent,false);        return new myHolder(myView);    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/general_profileAdapter.java", "stars": "2", "class": {"name": "general_profileAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["general_profileAdapter", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NonNull general_profileAdapter.myHolder holder, int position) {        holder.t1.setText(names.get(position));        TextDrawable drawable =TextDrawable.builder().buildRound(names.get(position).substring(0,1).toUpperCase(), Color.rgb(15,167,255));        holder.cimg.setBackground(drawable);    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/general_profileAdapter.java", "stars": "2", "class": {"name": "general_profileAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return names.size();    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/general_profileAdapter.java", "stars": "2", "class": {"name": "general_profileAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpStatus", "snippet": "    public HttpStatus getStatus() {        return HttpStatus.NOT_FOUND;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/exception/NotFoundException.java", "stars": "1", "class": {"name": "NotFoundException", "extends": "BaseException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExcelId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getExcelId() {        return excelId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExcelId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExcelId(Integer excelId) {        this.excelId = excelId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUserId() {        return userId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserId(String userId) {        this.userId = userId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFullName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFullName() {        return fullName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFullName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFullName(String fullName) {        this.fullName = fullName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepartmentName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDepartmentName() {        return departmentName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDepartmentName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDepartmentName(String departmentName) {        this.departmentName = departmentName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProxyUsers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProxyUsers() {        return proxyUsers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setProxyUsers", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProxyUsers(String proxyUsers) {        this.proxyUsers = proxyUsers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRoleName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRoleName() {        return roleName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRoleName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoleName(String roleName) {        this.roleName = roleName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRightAccess", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRightAccess() {        return rightAccess;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRightAccess", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRightAccess(String rightAccess) {        this.rightAccess = rightAccess;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEmail() {        return email;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEmail(String email) {        this.email = email;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getModifyType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModifyType() {        return modifyType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setModifyType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModifyType(String modifyType) {        this.modifyType = modifyType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/dto/ModifyWtssUserDto.java", "stars": "18", "class": {"name": "ModifyWtssUserDto", "extends": "BaseRowModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Connection conn = null;        Statement stmt = null;        try {            //1\u3001\u6ce8\u518c\u9a71\u52a8            Class.forName(\"com.mysql.cj.jdbc.Driver\");            //2\u3001\u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61            conn = DriverManager.getConnection(\"jdbc:mysql:///db1\", \"root\", \"\");            //3\u3001\u5b9a\u4e49 sql            String sql = \"create table student2 (id int, name varchar(20))\";            //4\u3001\u83b7\u53d6\u6267\u884c sql \u5bf9\u8c61            stmt = conn.createStatement();            //5\u3001\u6267\u884c sql            int count = stmt.executeUpdate(sql);            System.out.println(count);            if (count > 0) {                System.out.println(\"\u4fee\u6539\u6210\u529f\uff01\");            }else{                System.out.println(\"\u4fee\u6539\u5931\u8d25\uff01\");            }        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (SQLException throwables) {            throwables.printStackTrace();        } finally {            if(stmt != null){                try {                    stmt.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }            if(conn != null){                try {                    conn.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Demo/JdbcDemo5.java", "stars": "2", "class": {"name": "JdbcDemo5", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isStateful", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isStateful ()\t{\t\treturn n_isStateful ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_isStateful", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_isStateful ();\tpublic int getOpacity ()\t{\t\treturn n_getOpacity ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getOpacity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getOpacity ()\t{\t\treturn n_getOpacity ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getOpacity", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getOpacity ();\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "draw", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_draw", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_draw (android.graphics.Canvas p0);\tpublic void setAlpha (int p0)\t{\t\tn_setAlpha (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setAlpha", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAlpha (int p0)\t{\t\tn_setAlpha (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_setAlpha", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_setAlpha (int p0);\tpublic void setColorFilter (android.graphics.ColorFilter p0)\t{\t\tn_setColorFilter (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setColorFilter", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setColorFilter (android.graphics.ColorFilter p0)\t{\t\tn_setColorFilter (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_setColorFilter", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_setColorFilter (android.graphics.ColorFilter p0);\tpublic boolean onStateChange (int[] p0)\t{\t\treturn n_onStateChange (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onStateChange", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onStateChange (int[] p0)\t{\t\treturn n_onStateChange (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onStateChange", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onStateChange (int[] p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BorderDrawable.java", "stars": "2", "class": {"name": "BorderDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void contextLoads() {\t}", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/test/java/cn/blog/MySiteApplicationTests.java", "stars": "2", "class": {"name": "MySiteApplicationTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPropertyOfUseExtendedRam", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean getPropertyOfUseExtendedRam() {        String m = Application.getProperties().getProperty(PROPERTY_EXTENDED_RAM);        if (m == null) {            return false;        }        else {            return Boolean.parseBoolean(m);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100.java", "stars": "4", "class": {"name": "JR100", "extends": "Computer", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setPropertyOfUseExtendedRam", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPropertyOfUseExtendedRam(boolean value) {        Application.getProperties().setProperty(PROPERTY_EXTENDED_RAM, Boolean.toString(value));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100.java", "stars": "4", "class": {"name": "JR100", "extends": "Computer", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPropertyOfCpuClockFrequency", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getPropertyOfCpuClockFrequency() {        String m = Application.getProperties().getProperty(PROPERTY_CPU_CLOCK_FREQUENCY);        if (m == null) {            return DEFAULT_CPU_CLOCK;        }        else {            return Integer.parseInt(m);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100.java", "stars": "4", "class": {"name": "JR100", "extends": "Computer", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setPropertyOfCpuClockFrequency", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPropertyOfCpuClockFrequency(int value) {        Application.getProperties().setProperty(PROPERTY_CPU_CLOCK_FREQUENCY, Integer.toString(value));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100.java", "stars": "4", "class": {"name": "JR100", "extends": "Computer", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getClockFrequency", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getClockFrequency() {        return clockFrequency;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100.java", "stars": "4", "class": {"name": "JR100", "extends": "Computer", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setClockFrequency", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setClockFrequency(int f) {        clockFrequency = f;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100.java", "stars": "4", "class": {"name": "JR100", "extends": "Computer", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "powerOn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void powerOn() {        setClockFrequency(getPropertyOfCpuClockFrequency());        if (getPropertyOfUseExtendedRam()) {            getHardware().getMemory().registMemory(new MainRam(0x0000, 0x8000));        }        else {            getHardware().getMemory().registMemory(new MainRam(0x0000, 0x4000));            getHardware().getMemory().registMemory(new UnmappedMemory(0x4000, 0x4000));        }        super.powerOn();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100.java", "stars": "4", "class": {"name": "JR100", "extends": "Computer", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "matchFromPosition", "params": ["Pattern"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String matchFromPosition(Pattern pattern) {    return matchFromPosition(pattern, pos);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "matchFromPosition", "params": ["Pattern", "int"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String matchFromPosition(Pattern pattern, int pos) {    Matcher matcher = pattern.matcher(text.substring(pos));    return (matcher.find() ? matcher.group() : \"\");  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateDummy", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String generateDummy() {    String dummy;    if (isTextMode(curMode)) {      dummy = Tools.generateDummy(language, dummyCounter++);    } else if (isMathEmpty) {      if (curMode == Mode.DISPLAY_MATH) {        dummy = (lastSpace.isEmpty() ? \" \" : \"\");      } else {        dummy = \"\";      }    } else if (curMode == Mode.DISPLAY_MATH) {      dummy = ((lastSpace.isEmpty() ? \" \" : \"\")) + Tools.generateDummy(language, dummyCounter++) +          dummyLastPunctuation + ((modeStack.peek() == Mode.INLINE_TEXT) ? dummyLastSpace : \" \");    } else {      dummy = Tools.generateDummy(language, dummyCounter++) + dummyLastPunctuation + dummyLastSpace;    }    dummyLastSpace = \"\";    dummyLastPunctuation = \"\";    return dummy;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addText", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "LatexAnnotatedTextBuilder", "snippet": "  private LatexAnnotatedTextBuilder addText(String text) {    if (text.isEmpty()) return this;    builder.addText(text);    pos += text.length();    textAdded(text);    return this;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMarkup", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "LatexAnnotatedTextBuilder", "snippet": "  private LatexAnnotatedTextBuilder addMarkup(String markup) {    if (markup.isEmpty()) return this;    builder.addMarkup(markup);    pos += markup.length();    if (preserveDummyLast) {      preserveDummyLast = false;    } else {      dummyLastSpace = \"\";      dummyLastPunctuation = \"\";    }    return this;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMarkup", "params": ["String", "String"], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "LatexAnnotatedTextBuilder", "snippet": "  private LatexAnnotatedTextBuilder addMarkup(String markup, String interpretAs)      throws InterruptedException {    if (interpretAs.isEmpty()) {      return addMarkup(markup);    } else {      builder.addMarkup(markup, interpretAs);      pos += markup.length();      preserveDummyLast = false;      textAdded(interpretAs);      return this;    }  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "textAdded", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void textAdded(String text) {    if (text.isEmpty()) return;    char lastChar = text.charAt(text.length() - 1);    lastSpace = (((lastChar == ' ') || (lastChar == '\\n') || (lastChar == '\\r')) ? \" \" : \"\");    lastPunctuation = (isPunctuation(lastChar) ? \" \" : \"\");  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "popMode", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void popMode() {    modeStack.pop();    if (modeStack.isEmpty()) modeStack.push(Mode.PARAGRAPH_TEXT);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPunctuation", "params": ["char"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean isPunctuation(char ch) {    return ((ch == '.') || (ch == ',') || (ch == ':') || (ch == ';'));  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMathMode", "params": ["Mode"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean isMathMode(Mode mode) {    return ((mode == Mode.INLINE_MATH) || (mode == Mode.DISPLAY_MATH));  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isIgnoreEnvironmentMode", "params": ["Mode"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean isIgnoreEnvironmentMode(Mode mode) {    return (mode == Mode.IGNORE_ENVIRONMENT);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isRsweaveMode", "params": ["Mode"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean isRsweaveMode(Mode mode) {    return (mode == Mode.RSWEAVE);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isTextMode", "params": ["Mode"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean isTextMode(Mode mode) {    return !isMathMode(mode) && !isIgnoreEnvironmentMode(mode);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enterDisplayMath", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void enterDisplayMath() {    modeStack.push(Mode.DISPLAY_MATH);    isMathEmpty = true;    canInsertSpaceBeforeDummy = true;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enterInlineMath", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void enterInlineMath() {    modeStack.push(Mode.INLINE_MATH);    isMathEmpty = true;    canInsertSpaceBeforeDummy = true;    isMathCharTrivial = true;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDebugInformation", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getDebugInformation(String text) {    String remainingText = StringEscapeUtils.escapeJava(        text.substring(pos, Math.min(pos + 100, text.length())));    return \"Remaining text = \\\"\" + remainingText +        \"\\\", pos = \" + pos + \", dummyCounter = \" + dummyCounter + \", lastSpace = \\\"\" + lastSpace +        \"\\\", lastPunctuation = \\\"\" + lastPunctuation + \"\\\", dummyLastSpace = \\\"\" + dummyLastSpace +        \"\\\", dummyLastPunctuation = \\\"\" + dummyLastPunctuation +        \"\\\", isMathEmpty = \" + isMathEmpty + \", preserveDummyLast = \" + preserveDummyLast +        \", canInsertSpaceBeforeDummy = \" + canInsertSpaceBeforeDummy +        \", isMathCharTrivial = \" + isMathCharTrivial + \", modeStack = \" + modeStack +        \", curChar = \\\"\" + curChar + \"\\\", curString = \\\"\" + curString + \"\\\", curMode = \" + curMode;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "containsTwoEndsOfLine", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean containsTwoEndsOfLine(String text) {    return (text.contains(\"\\n\\n\") || text.contains(\"\\r\\r\") || text.contains(\"\\r\\n\\r\\n\"));  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addCode", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "LatexAnnotatedTextBuilder", "snippet": "  public LatexAnnotatedTextBuilder addCode(String text) throws InterruptedException {    this.text = text;    pos = 0;    dummyCounter = 0;    lastSpace = \"\";    lastPunctuation = \"\";    dummyLastSpace = \"\";    dummyLastPunctuation = \"\";    isMathEmpty = true;    preserveDummyLast = false;    canInsertSpaceBeforeDummy = false;    isMathCharTrivial = false;    modeStack = new Stack<>();    modeStack.push(Mode.PARAGRAPH_TEXT);    Pattern ignoreEnvironmentEndPattern = null;    int lastPos = -1;    while (pos < text.length()) {      if (Thread.currentThread().isInterrupted()) throw new InterruptedException();      curChar = text.charAt(pos);      curString = String.valueOf(curChar);      curMode = modeStack.peek();      isMathCharTrivial = false;      lastPos = pos;      if (isIgnoreEnvironmentMode(curMode)) {        String ignoreEnvironmentEnd = matchFromPosition(ignoreEnvironmentEndPattern);        if (ignoreEnvironmentEnd.isEmpty()) {          addMarkup(curString);        } else {          popMode();          addMarkup(ignoreEnvironmentEnd);        }      } else if (codeLanguageId.equals(\"rsweave\") && isRsweaveMode(curMode)) {        String rsweaveEnd = matchFromPosition(rsweaveEndPattern);        if (rsweaveEnd.isEmpty()) {          addMarkup(curString);        } else {          popMode();          addMarkup(rsweaveEnd);        }      } else {        switch (curChar) {          case '\\\\': {            String command = matchFromPosition(commandPattern);            if (command.equals(\"\\\\begin\") || command.equals(\"\\\\end\")) {              preserveDummyLast = true;              addMarkup(command);              String argument = matchFromPosition(argumentPattern);              String environmentName = argument.substring(1, argument.length() - 1);              String interpretAs = \"\";              if (Arrays.asList(mathEnvironments).contains(environmentName)) {                if (command.equals(\"\\\\begin\")) {                  if (environmentName.equals(\"math\")) {                    enterInlineMath();                  } else {                    enterDisplayMath();                  }                } else {                  popMode();                  interpretAs = generateDummy();                }              } else if (command.equals(\"\\\\begin\") &&                  ignoreEnvironments.contains(environmentName)) {                modeStack.push(Mode.IGNORE_ENVIRONMENT);                ignoreEnvironmentEndPattern = Pattern.compile(                    \"^\\\\\\\\end\\\\{\" + Pattern.quote(environmentName) + \"\\\\}\");              } else {                if (command.equals(\"\\\\begin\")) modeStack.push(curMode);                else popMode();              }              if (!isIgnoreEnvironmentMode(modeStack.peek())) {                isMathCharTrivial = true;                preserveDummyLast = true;                addMarkup(argument, interpretAs);                if (command.equals(\"\\\\begin\")) {                  while (pos < text.length()) {                    if (Thread.currentThread().isInterrupted()) throw new InterruptedException();                    String environmentArgument = LatexCommandSignature.matchArgumentFromPosition(                        text, pos, LatexCommandSignature.ArgumentType.BRACE);                    if (!environmentArgument.isEmpty()) {                      addMarkup(environmentArgument);                    } else {                      environmentArgument = LatexCommandSignature.matchArgumentFromPosition(                          text, pos, LatexCommandSignature.ArgumentType.BRACKET);                      if (!environmentArgument.isEmpty()) {                        addMarkup(environmentArgument);                      } else {                        break;                      }                    }                  }                }              }            } else if (command.equals(\"\\\\$\") || command.equals(\"\\\\%\") || command.equals(\"\\\\&\")) {              addMarkup(command, command.substring(1));            } else if (command.equals(\"\\\\[\") || command.equals(\"\\\\]\") ||                command.equals(\"\\\\(\") || command.equals(\"\\\\)\")) {              if (command.equals(\"\\\\[\")) {                enterDisplayMath();                addMarkup(command);              } else if (command.equals(\"\\\\(\")) {                enterInlineMath();                addMarkup(command);              } else {                popMode();                addMarkup(command, generateDummy());              }            } else if (command.equals(\"\\\\AA\")) {              addMarkup(command, \"\\u00c5\");            } else if (command.equals(\"\\\\O\")) {              addMarkup(command, \"\\u00d8\");            } else if (command.equals(\"\\\\aa\")) {              addMarkup(command, \"\\u00e5\");            } else if (command.equals(\"\\\\ss\")) {              addMarkup(command, \"\\u00df\");            } else if (command.equals(\"\\\\o\")) {              addMarkup(command, \"\\u00f8\");            } else if (command.equals(\"\\\\`\") || command.equals(\"\\\\'\") || command.equals(\"\\\\^\") ||                command.equals(\"\\\\~\") || command.equals(\"\\\\\\\"\") || command.equals(\"\\\\=\") ||                command.equals(\"\\\\.\")) {              Matcher matcher = accentPattern1.matcher(text.substring(pos));              if (matcher.find()) {                String accentCommand = matcher.group(1);                String letter = ((matcher.group(3) != null) ? matcher.group(3) : matcher.group(5));                String interpretAs = \"\";                switch (accentCommand.charAt(1)) {                  case '`': {                    if (letter.equals(\"A\")) interpretAs = \"\\u00c0\";                    else if (letter.equals(\"E\")) interpretAs = \"\\u00c8\";                    else if (letter.equals(\"I\")) interpretAs = \"\\u00cc\";                    else if (letter.equals(\"O\")) interpretAs = \"\\u00d2\";                    else if (letter.equals(\"U\")) interpretAs = \"\\u00d9\";                    else if (letter.equals(\"a\")) interpretAs = \"\\u00e0\";                    else if (letter.equals(\"e\")) interpretAs = \"\\u00e8\";                    else if (letter.equals(\"i\") || letter.equals(\"\\\\i\")) interpretAs = \"\\u00ec\";                    else if (letter.equals(\"o\")) interpretAs = \"\\u00f2\";                    else if (letter.equals(\"u\")) interpretAs = \"\\u00f9\";                    break;                  }                  case '\\'': {                    if (letter.equals(\"A\")) interpretAs = \"\\u00c1\";                    else if (letter.equals(\"E\")) interpretAs = \"\\u00c9\";                    else if (letter.equals(\"I\")) interpretAs = \"\\u00cd\";                    else if (letter.equals(\"O\")) interpretAs = \"\\u00d3\";                    else if (letter.equals(\"U\")) interpretAs = \"\\u00da\";                    else if (letter.equals(\"Y\")) interpretAs = \"\\u00dd\";                    else if (letter.equals(\"a\")) interpretAs = \"\\u00e1\";                    else if (letter.equals(\"e\")) interpretAs = \"\\u00e9\";                    else if (letter.equals(\"i\") || letter.equals(\"\\\\i\")) interpretAs = \"\\u00ed\";                    else if (letter.equals(\"o\")) interpretAs = \"\\u00f3\";                    else if (letter.equals(\"u\")) interpretAs = \"\\u00fa\";                    else if (letter.equals(\"y\")) interpretAs = \"\\u00fd\";                    break;                  }                  case '^': {                    if (letter.equals(\"A\")) interpretAs = \"\\u00c2\";                    else if (letter.equals(\"E\")) interpretAs = \"\\u00ca\";                    else if (letter.equals(\"I\")) interpretAs = \"\\u00ce\";                    else if (letter.equals(\"O\")) interpretAs = \"\\u00d4\";                    else if (letter.equals(\"U\")) interpretAs = \"\\u00db\";                    else if (letter.equals(\"Y\")) interpretAs = \"\\u0176\";                    else if (letter.equals(\"a\")) interpretAs = \"\\u00e2\";                    else if (letter.equals(\"e\")) interpretAs = \"\\u00ea\";                    else if (letter.equals(\"i\") || letter.equals(\"\\\\i\")) interpretAs = \"\\u00ee\";                    else if (letter.equals(\"o\")) interpretAs = \"\\u00f4\";                    else if (letter.equals(\"u\")) interpretAs = \"\\u00fb\";                    else if (letter.equals(\"y\")) interpretAs = \"\\u0177\";                    break;                  }                  case '~': {                    if (letter.equals(\"A\")) interpretAs = \"\\u00c3\";                    else if (letter.equals(\"E\")) interpretAs = \"\\u1ebc\";                    else if (letter.equals(\"I\")) interpretAs = \"\\u0128\";                    else if (letter.equals(\"N\")) interpretAs = \"\\u00d1\";                    else if (letter.equals(\"O\")) interpretAs = \"\\u00d5\";                    else if (letter.equals(\"U\")) interpretAs = \"\\u0168\";                    else if (letter.equals(\"a\")) interpretAs = \"\\u00e3\";                    else if (letter.equals(\"e\")) interpretAs = \"\\u1ebd\";                    else if (letter.equals(\"i\") || letter.equals(\"\\\\i\")) interpretAs = \"\\u0129\";                    else if (letter.equals(\"n\")) interpretAs = \"\\u00f1\";                    else if (letter.equals(\"o\")) interpretAs = \"\\u00f5\";                    else if (letter.equals(\"u\")) interpretAs = \"\\u0169\";                    break;                  }                  case '\"': {                    if (letter.equals(\"A\")) interpretAs = \"\\u00c4\";                    else if (letter.equals(\"E\")) interpretAs = \"\\u00cb\";                    else if (letter.equals(\"I\")) interpretAs = \"\\u00cf\";                    else if (letter.equals(\"O\")) interpretAs = \"\\u00d6\";                    else if (letter.equals(\"U\")) interpretAs = \"\\u00dc\";                    else if (letter.equals(\"Y\")) interpretAs = \"\\u0178\";                    else if (letter.equals(\"a\")) interpretAs = \"\\u00e4\";                    else if (letter.equals(\"e\")) interpretAs = \"\\u00eb\";                    else if (letter.equals(\"i\") || letter.equals(\"\\\\i\")) interpretAs = \"\\u00ef\";                    else if (letter.equals(\"o\")) interpretAs = \"\\u00f6\";                    else if (letter.equals(\"u\")) interpretAs = \"\\u00fc\";                    else if (letter.equals(\"y\")) interpretAs = \"\\u00ff\";                    break;                  }                  case '=': {                    if (letter.equals(\"A\")) interpretAs = \"\\u0100\";                    else if (letter.equals(\"E\")) interpretAs = \"\\u0112\";                    else if (letter.equals(\"I\")) interpretAs = \"\\u012a\";                    else if (letter.equals(\"O\")) interpretAs = \"\\u014c\";                    else if (letter.equals(\"U\")) interpretAs = \"\\u016a\";                    else if (letter.equals(\"Y\")) interpretAs = \"\\u0232\";                    else if (letter.equals(\"a\")) interpretAs = \"\\u0101\";                    else if (letter.equals(\"e\")) interpretAs = \"\\u0113\";                    else if (letter.equals(\"i\") || letter.equals(\"\\\\i\")) interpretAs = \"\\u012b\";                    else if (letter.equals(\"o\")) interpretAs = \"\\u014d\";                    else if (letter.equals(\"u\")) interpretAs = \"\\u016b\";                    else if (letter.equals(\"y\")) interpretAs = \"\\u0233\";                    break;                  }                  case '.': {                    if (letter.equals(\"A\")) interpretAs = \"\\u0226\";                    else if (letter.equals(\"E\")) interpretAs = \"\\u0116\";                    else if (letter.equals(\"I\")) interpretAs = \"\\u0130\";                    else if (letter.equals(\"O\")) interpretAs = \"\\u022e\";                    else if (letter.equals(\"a\")) interpretAs = \"\\u0227\";                    else if (letter.equals(\"e\")) interpretAs = \"\\u0117\";                    else if (letter.equals(\"o\")) interpretAs = \"\\u022f\";                    break;                  }                }                addMarkup(matcher.group(), interpretAs);              } else {                addMarkup(command);              }            } else if (command.equals(\"\\\\c\") || command.equals(\"\\\\r\")) {              Matcher matcher = accentPattern2.matcher(text.substring(pos));              if (matcher.find()) {                String accentCommand = matcher.group(1);                String letter = ((matcher.group(3) != null) ? matcher.group(3) : matcher.group(4));                String interpretAs = \"\";                switch (accentCommand.charAt(1)) {                  case 'c': {                    if (letter.equals(\"C\")) interpretAs = \"\\u00c7\";                    else if (letter.equals(\"c\")) interpretAs = \"\\u00e7\";                    break;                  }                  case 'r': {                    if (letter.equals(\"A\")) interpretAs = \"\\u00c5\";                    else if (letter.equals(\"U\")) interpretAs = \"\\u016e\";                    else if (letter.equals(\"a\")) interpretAs = \"\\u00e5\";                    else if (letter.equals(\"u\")) interpretAs = \"\\u016f\";                    break;                  }                }                addMarkup(matcher.group(), interpretAs);              } else {                addMarkup(command);              }            } else if (command.equals(\"\\\\-\")) {              addMarkup(command);            } else if (command.equals(\"\\\\ \") || command.equals(\"\\\\,\") || command.equals(\"\\\\;\") ||                command.equals(\"\\\\\\\\\") || command.equals(\"\\\\hfill\") || command.equals(\"\\\\hspace\") ||                command.equals(\"\\\\hspace*\") || command.equals(\"\\\\quad\") ||                command.equals(\"\\\\qquad\") || command.equals(\"\\\\newline\")) {              if (command.equals(\"\\\\hspace\") || command.equals(\"\\\\hspace*\")) {                String argument = matchFromPosition(argumentPattern, pos + command.length());                command += argument;              }              if (isMathMode(curMode) && lastSpace.isEmpty() && canInsertSpaceBeforeDummy) {                addMarkup(command, \" \");              } else {                preserveDummyLast = true;                if (isMathMode(curMode)) {                  addMarkup(command);                  dummyLastSpace = \" \";                } else {                  String space = \" \";                  if (!lastSpace.isEmpty()) {                    space = \"\";                  } else if (command.equals(\"\\\\,\")) {                    space = \"\\u202f\";                  }                  addMarkup(command, space);                }              }            } else if (command.equals(\"\\\\dots\")) {              String interpretAs = (isMathMode(curMode) ? \"\" : \"...\");              addMarkup(command, interpretAs);            } else if (command.equals(\"\\\\euro\")) {              addMarkup(command, \"\\u20ac\");            } else if (command.equals(\"\\\\footnote\")) {              modeStack.push(Mode.INLINE_TEXT);              String interpretAs = (isMathMode(curMode) ? generateDummy() :                  (lastSpace.isEmpty() ? \" \" : \"\"));              addMarkup(command + \"{\", interpretAs);            } else if (command.equals(\"\\\\notag\") || command.equals(\"\\\\qed\")) {              preserveDummyLast = true;              addMarkup(command);            } else if (command.equals(\"\\\\part\") || command.equals(\"\\\\chapter\") ||                command.equals(\"\\\\section\") || command.equals(\"\\\\subsection\") ||                command.equals(\"\\\\subsubsection\") || command.equals(\"\\\\paragraph\") ||                command.equals(\"\\\\subparagraph\") ||                command.equals(\"\\\\part*\") || command.equals(\"\\\\chapter*\") ||                command.equals(\"\\\\section*\") || command.equals(\"\\\\subsection*\") ||                command.equals(\"\\\\subsubsection*\") || command.equals(\"\\\\paragraph*\") ||                command.equals(\"\\\\subparagraph*\")) {              modeStack.push(Mode.HEADING);              addMarkup(command + \"{\");            } else if (command.equals(\"\\\\text\") || command.equals(\"\\\\intertext\")) {              modeStack.push(Mode.INLINE_TEXT);              String interpretAs = (isMathMode(curMode) ? generateDummy() : \"\");              addMarkup(command + \"{\", interpretAs);            } else if (command.equals(\"\\\\verb\")) {              String verbCommand = matchFromPosition(verbCommandPattern);              addMarkup(verbCommand, generateDummy());            } else {              String match = \"\";              LatexCommandSignature matchingCommand = null;              for (LatexCommandSignature LatexCommandSignature : commandSignatures) {                if (Thread.currentThread().isInterrupted()) throw new InterruptedException();                if (LatexCommandSignature.name.equals(command)) {                  String curMatch = LatexCommandSignature.matchFromPosition(text, pos);                  if (curMatch.length() > match.length()) {                    match = curMatch;                    matchingCommand = LatexCommandSignature;                  }                }              }              if (matchingCommand == null) {                addMarkup(command);              } else {                switch (matchingCommand.action) {                  case IGNORE: {                    addMarkup(match);                    break;                  }                  case DUMMY: {                    addMarkup(match, generateDummy());                    break;                  }                }              }            }            break;          }          case '{': {            String length = matchFromPosition(lengthInBracePattern);            if (!length.isEmpty()) {              addMarkup(length);            } else {              modeStack.push(curMode);              addMarkup(curString);            }            break;          }          case '}': {            String interpretAs = \"\";            if ((curMode == Mode.HEADING) && lastPunctuation.isEmpty()) interpretAs = \".\";            popMode();            addMarkup(curString, interpretAs);            canInsertSpaceBeforeDummy = true;            if (isTextMode(curMode) && isMathMode(modeStack.peek())) isMathEmpty = true;            isMathCharTrivial = true;            break;          }          case '$': {            String displayMath = matchFromPosition(displayMathPattern);            if (!displayMath.isEmpty()) {              if (curMode == Mode.DISPLAY_MATH) {                popMode();                addMarkup(displayMath, generateDummy());              } else {                enterDisplayMath();                addMarkup(displayMath);              }            } else {              if (curMode == Mode.INLINE_MATH) {                popMode();                addMarkup(curString, generateDummy());              } else {                enterInlineMath();                addMarkup(curString);              }            }            break;          }          case '%': {            String comment = matchFromPosition(commentPattern);            preserveDummyLast = true;            isMathCharTrivial = true;            addMarkup(comment, (containsTwoEndsOfLine(comment) ? \"\\n\\n\" : \"\"));            break;          }          case ' ':          case '&':          case '~':          case '\\n':          case '\\r':          case '\\t': {            String whiteSpace = (((curChar != '~') && (curChar != '&')) ?                matchFromPosition(whiteSpacePattern) : curString);            preserveDummyLast = true;            isMathCharTrivial = true;            if (isTextMode(curMode)) {              if (containsTwoEndsOfLine(whiteSpace)) {                addMarkup(whiteSpace, \"\\n\\n\");              } else {                addMarkup(whiteSpace, (lastSpace.isEmpty() ? \" \" : \"\"));              }            } else {              addMarkup(whiteSpace);            }            if ((curChar == '~') || (curChar == '&')) {              dummyLastSpace = \" \";            }            break;          }          case '`':          case '\\'':          case '\"': {            if (isTextMode(curMode)) {              String quote = \"\";              String smartQuote = \"\";              if (pos + 1 < text.length()) {                quote = text.substring(pos, pos + 2);                if (quote.equals(\"``\") || quote.equals(\"\\\"'\")) {                  smartQuote = \"\\u201c\";                } else if (quote.equals(\"''\")) {                  smartQuote = \"\\u201d\";                } else if (quote.equals(\"\\\"`\")) {                  smartQuote = \"\\u201e\";                } else {                  quote = \"\";                }              }              if (quote.isEmpty()) addText(curString);              else addMarkup(quote, smartQuote);            } else {              addMarkup(curString);            }            break;          }          case '-': {            String emDash = matchFromPosition(emDashPattern);            if (isTextMode(curMode)) {              if (!emDash.isEmpty()) {                addMarkup(emDash, \"\\u2014\");                break;              } else {                String enDash = matchFromPosition(enDashPattern);                if (!enDash.isEmpty()) {                  addMarkup(enDash, \"\\u2013\");                  break;                }              }            }          }          case '[': {            String length = matchFromPosition(lengthInBracketPattern);            if (!length.isEmpty()) {              isMathCharTrivial = true;              preserveDummyLast = true;              addMarkup(length);              break;            }          }          case '<': {            if (codeLanguageId.equals(\"rsweave\")) {              String rsweaveBegin = matchFromPosition(rsweaveBeginPattern);              if (!rsweaveBegin.isEmpty()) {                modeStack.push(Mode.RSWEAVE);                addMarkup(rsweaveBegin);                break;              }            }          }          default: {            if (isTextMode(curMode)) {              addText(curString);              if (isPunctuation(curChar)) lastPunctuation = curString;            } else {              addMarkup(curString);              if (isPunctuation(curChar)) dummyLastPunctuation = curString;            }            break;          }        }      }      if (!isMathCharTrivial) {        canInsertSpaceBeforeDummy = false;        isMathEmpty = false;      }      if (pos == lastPos) {        if (isInStrictMode) {          throw new RuntimeException(Tools.i18n(              \"latexAnnotatedTextBuilderInfiniteLoop\", getDebugInformation(text)));        } else {          Tools.logger.warning(Tools.i18n(              \"latexAnnotatedTextBuilderPreventedInfiniteLoop\", getDebugInformation(text)));          pos++;        }      }    }    return this;  }  public AnnotatedText getAnnotatedText() {    return builder.build();  }}", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAnnotatedText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AnnotatedText", "snippet": "  public AnnotatedText getAnnotatedText() {    return builder.build();  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/latex/LatexAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "LatexAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isVisible", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "\tpublic final boolean isVisible() {\t\tAnimation currentAnim = getAnimation();\t\tif (null != currentAnim) {\t\t\treturn mInAnim == currentAnim;\t\t}\t\treturn getVisibility() == View.VISIBLE;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java", "stars": "74", "class": {"name": "IndicatorLayout", "extends": "FrameLayout", "implements": ["AnimationListener"], "modifiers": ["public"]}}, {"method_name": "hide", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void hide() {\t\tstartAnimation(mOutAnim);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java", "stars": "74", "class": {"name": "IndicatorLayout", "extends": "FrameLayout", "implements": ["AnimationListener"], "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void show() {\t\tmArrowImageView.clearAnimation();\t\tstartAnimation(mInAnim);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java", "stars": "74", "class": {"name": "IndicatorLayout", "extends": "FrameLayout", "implements": ["AnimationListener"], "modifiers": ["public"]}}, {"method_name": "onAnimationEnd", "params": ["Animation"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationEnd(Animation animation) {\t\tif (animation == mOutAnim) {\t\t\tmArrowImageView.clearAnimation();\t\t\tsetVisibility(View.GONE);\t\t} else if (animation == mInAnim) {\t\t\tsetVisibility(View.VISIBLE);\t\t}\t\tclearAnimation();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java", "stars": "74", "class": {"name": "IndicatorLayout", "extends": "FrameLayout", "implements": ["AnimationListener"], "modifiers": ["public"]}}, {"method_name": "onAnimationRepeat", "params": ["Animation"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationRepeat(Animation animation) {\t\t// NO-OP\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java", "stars": "74", "class": {"name": "IndicatorLayout", "extends": "FrameLayout", "implements": ["AnimationListener"], "modifiers": ["public"]}}, {"method_name": "onAnimationStart", "params": ["Animation"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationStart(Animation animation) {\t\tsetVisibility(View.VISIBLE);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java", "stars": "74", "class": {"name": "IndicatorLayout", "extends": "FrameLayout", "implements": ["AnimationListener"], "modifiers": ["public"]}}, {"method_name": "releaseToRefresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void releaseToRefresh() {\t\tmArrowImageView.startAnimation(mRotateAnimation);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java", "stars": "74", "class": {"name": "IndicatorLayout", "extends": "FrameLayout", "implements": ["AnimationListener"], "modifiers": ["public"]}}, {"method_name": "pullToRefresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void pullToRefresh() {\t\tmArrowImageView.startAnimation(mResetRotateAnimation);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java", "stars": "74", "class": {"name": "IndicatorLayout", "extends": "FrameLayout", "implements": ["AnimationListener"], "modifiers": ["public"]}}, {"method_name": "checkObjectAndTypeParameters", "params": ["Object", "Class<?>", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void checkObjectAndTypeParameters(Object obj, Class<?> type, String fieldName) {        Objects.requireNonNull(obj, \"Given object must not be null.\");        Objects.requireNonNull(type, \"Given class type must not be null.\");        Objects.requireNonNull(fieldName, \"Given field name must not be null.\");    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/FieldTestUtils.java", "stars": "6", "class": {"name": "FieldTestUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkObjectParameters", "params": ["Object", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void checkObjectParameters(Object getObject, String fieldName) {        Objects.requireNonNull(getObject, \"Given object must not be null.\");        Objects.requireNonNull(fieldName, \"Given field name must not be null.\");    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/FieldTestUtils.java", "stars": "6", "class": {"name": "FieldTestUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPrivateField", "params": ["Object", "Class<?>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object getPrivateField(Object getObj, Class<?> type, String fieldName) {        checkObjectAndTypeParameters(getObj, type, fieldName);        try {            Field field = type.getDeclaredField(fieldName);            field.setAccessible(true);            return field.get(getObj);        } catch (Exception e) {            System.err.println(\"ERROR: retrieving private int field \" + fieldName + \": \" + e);            return null;        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/FieldTestUtils.java", "stars": "6", "class": {"name": "FieldTestUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setPrivateField", "params": ["Object", "Class<?>", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPrivateField(Object setObj, Class<?> type, String fieldName, Object value) {        checkObjectAndTypeParameters(setObj, type, fieldName);        try {            Field field = type.getDeclaredField(fieldName);            field.setAccessible(true);            field.set(setObj, value);        } catch (Exception e) {            System.err.println(\"ERROR: setting private field \" + fieldName + \": \" + e);        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/FieldTestUtils.java", "stars": "6", "class": {"name": "FieldTestUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkFieldType", "params": ["Object", "Class<?>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void checkFieldType(Object checkObj, Class<?> type, String fieldName) {        checkObjectAndTypeParameters(checkObj, type, fieldName);        try {            Field field = checkObj.getClass().getDeclaredField(fieldName);            Class<?> fClass = field.getType();            assertEquals(fieldName + \" has unexpected type.\", type, fClass);        } catch (NoSuchFieldException e) {            String message = checkObj.getClass() + \" must have field called \" + fieldName;            System.err.println(message);            fail(message);        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/FieldTestUtils.java", "stars": "6", "class": {"name": "FieldTestUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkFieldAccessModifier", "params": ["Object", "int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void checkFieldAccessModifier(Object checkObj, int modifierType, String fieldName) {        checkObjectParameters(checkObj, fieldName);        try {            Field field = checkObj.getClass().getDeclaredField(fieldName);            int modifierId = field.getModifiers();            switch (modifierType) {                case Modifier.PRIVATE:                    assertTrue(fieldName + \" must be private\", Modifier.isPrivate(modifierId));                    break;                case Modifier.PROTECTED:                    assertTrue(fieldName + \" must be private\", Modifier.isProtected(modifierId));                    break;                case Modifier.PUBLIC:                    assertTrue(fieldName + \" must be private\", Modifier.isPublic(modifierId));                    break;                default:                    throw new RuntimeException(\"Unhandled modifier type: \" + modifierType);            }        } catch (NoSuchFieldException e) {            String message = checkObj.getClass() + \" must have field called \" + fieldName;            System.err.println(message);            fail(message);        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/FieldTestUtils.java", "stars": "6", "class": {"name": "FieldTestUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkFieldFinalModifier", "params": ["Object", "boolean", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void checkFieldFinalModifier(Object checkObj, boolean isFinal, String fieldName) {        checkObjectParameters(checkObj, fieldName);        try {            Field field = checkObj.getClass().getDeclaredField(fieldName);            int modifierId = field.getModifiers();            assertEquals(fieldName + \" must \" + (isFinal ? \"\" : \"not \") + \"be final\", isFinal,                    Modifier.isFinal(modifierId));        } catch (NoSuchFieldException e) {            String message = checkObj.getClass() + \" must have field called \" + fieldName;            System.err.println(message);            fail(message);        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/FieldTestUtils.java", "stars": "6", "class": {"name": "FieldTestUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkFieldStaticModifier", "params": ["Object", "boolean", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void checkFieldStaticModifier(Object checkObj, boolean isStatic, String fieldName) {        checkObjectParameters(checkObj, fieldName);        try {            Field field = checkObj.getClass().getDeclaredField(fieldName);            int modifierId = field.getModifiers();            assertEquals(fieldName + \" must \" + (isStatic ? \"\" : \"not \") + \"be static\", isStatic,                    Modifier.isStatic(modifierId));        } catch (NoSuchFieldException e) {            String message = checkObj.getClass() + \" must have field called \" + fieldName;            System.err.println(message);            fail(message);        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/FieldTestUtils.java", "stars": "6", "class": {"name": "FieldTestUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "testSave", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSave() {        Message message = Message.builder().msgText(\"\u8f6f\u4ef61851\").msgSummary(\"\u6c89\u8ff7\u5b66\u4e60\").build();        // \u4fdd\u5b58\u5355\u4e2a\u5bf9\u8c61        messageRepository.save(message);        List<Message> messages = new ArrayList<>(Arrays.asList(                Message.builder().msgText(\"\u540e\u7aef\").msgSummary(\"SpringBoot\").build(),                Message.builder().msgText(\"\u524d\u7aef\").msgSummary(\"Vue.js\").build(),                Message.builder().msgText(\"\u79fb\u52a8\u7aef\").msgSummary(\"Flutter\").build()));        // \u4fdd\u5b58\u591a\u4e2a        messageRepository.saveAll(messages);    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-jpa/src/test/java/com/soft1851/springboot/jpa/dao/MessageRepositoryTest.java", "stars": "3", "class": {"name": "MessageRepositoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testDelete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testDelete() {        Message message = Message.builder().msgId(1)                .msgText(\"\u8f6f\u4ef61851\").msgSummary(\"\u6c89\u8ff7\u5b66\u4e60\").build();        // \u5220\u9664\u5355\u6761\u8bb0\u5f55        // \u6839\u636e\u4e3b\u952e\u5220\u9664        messageRepository.deleteById(1);        // \u6216\u8005\u53c2\u6570\u4e3a\u5bf9\u8c61\uff0c\u6839\u636e\u4e3b\u952e\u5220\u9664        messageRepository.delete(message);        // \u5220\u9664\u96c6\u5408        message = Message.builder().msgId(5)                .msgText(\"Monday\").msgSummary(\"study\").build();        List<Message> messages = new ArrayList<>();        messages.add(message);        message = Message.builder().msgId(6)                .msgText(\"Tuesday\").msgSummary(\"study\").build();        messages.add(message);        // \u5220\u9664\u96c6\u5408\uff1a\u4e00\u6761\u4e00\u6761\u5220\u9664        messageRepository.deleteAll(messages);        // \u5220\u9664\u96c6\u5408\uff1a\u4e00\u6761 sql\uff0c\u62fc\u63a5 or\u8bed\u53e5        messageRepository.deleteInBatch(messages);        // \u5220\u9664\u5168\u90e8        // \u5220\u9664\u6240\u6709\uff1a\u5148findAll\uff0c\u7136\u540e\u4e00\u6761\u4e00\u6761\u5220\u9664\uff0c\u6700\u540e\u63d0\u4ea4\u4e8b\u52a1        messageRepository.deleteAll();        // \u5220\u9664\u6240\u6709\uff1a\u4f7f\u7528\u4e00\u6761 sql        messageRepository.deleteAllInBatch();    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-jpa/src/test/java/com/soft1851/springboot/jpa/dao/MessageRepositoryTest.java", "stars": "3", "class": {"name": "MessageRepositoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testUpdate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdate() {        // \u6839\u636e\u4e3b\u952e\u66f4\u65b0        Message message = Message.builder().msgId(2)                .msgText(\"\u540e\u7aef\u67b6\u6784\").msgSummary(\"SpringCloud\").build();        messageRepository.saveAndFlush(message);        // \u6279\u91cf\u66f4\u65b0        List<Message> messages = new ArrayList<>();        messages.add(Message.builder().msgId(5).msgText(\"workday\").msgSummary(\"study\").build());        messages.add(Message.builder().msgId(6).msgText(\"weekend\").msgSummary(\"play\").build());        messageService.batchUpdate(messages);    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-jpa/src/test/java/com/soft1851/springboot/jpa/dao/MessageRepositoryTest.java", "stars": "3", "class": {"name": "MessageRepositoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSelect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSelect() {        // \u67e5\u8be2\u6240\u6709        messageRepository.findAll().forEach(msg -> log.info(msg.toString()));        // \u5206\u9875\u67e5\u8be2\u5168\u90e8\uff0c\u8fd4\u56de\u5c01\u88c5\u4e86\u7684\u5206\u9875\u4fe1\u606f\uff0c jpa\u9875\u7801\u4ece0\u5f00\u59cb        Page<Message> pageInfo = messageRepository.findAll(                PageRequest.of(1, 3, Sort.Direction.ASC, \"msgId\"));        log.info(\"\u603b\u8bb0\u5f55\u6570\uff1a {}\", pageInfo.getTotalElements());        log.info(\"\u5f53\u524d\u9875\u8bb0\u5f55\u6570\uff1a {}\", pageInfo.getNumberOfElements());        log.info(\"\u6bcf\u9875\u8bb0\u5f55\u6570\uff1a {}\", pageInfo.getSize());        log.info(\"\u83b7\u53d6\u603b\u9875\u6570\uff1a {}\", pageInfo.getTotalPages());        log.info(\"\u67e5\u8be2\u7ed3\u679c\uff1a {}\", pageInfo.getContent());        log.info(\"\u5f53\u524d\u9875\uff08\u4ece0\u5f00\u59cb\u8ba1\uff09\uff1a {}\", pageInfo.getNumber());        log.info(\"\u662f\u5426\u4e3a\u9996\u9875\uff1a {}\", pageInfo.isFirst());        log.info(\"\u662f\u5426\u4e3a\u5c3e\u9875\uff1a {}\", pageInfo.isLast());        // \u6761\u4ef6\u67e5\u8be2        Message message = Message.builder().msgSummary(\"study\").build();        List<Message> messages = messageRepository.findAll(Example.of(message));        log.info(\"\u6ee1\u8db3\u6761\u4ef6\u7684\u8bb0\u5f55\u6709\uff1a\");        messages.forEach(msg -> log.info(msg.toString()));        // \u5355\u4e2a\u67e5\u8be2        Message msg = Message.builder().msgId(2).build();        Optional<Message> optionalMessage = messageRepository.findOne(Example.of(msg));        log.info(\"\u5355\u4e2a\u67e5\u8be2\u7ed3\u679c\uff1a {}\", optionalMessage.orElse(null));    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-jpa/src/test/java/com/soft1851/springboot/jpa/dao/MessageRepositoryTest.java", "stars": "3", "class": {"name": "MessageRepositoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCustomSQL", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCustomSQL() {        Integer num = messageRepository.insertMessage(\"\u81ea\u5b9a\u4e49SQL\", \"JPA\");        log.info(\"\u589e\u52a0\u7684\u6570\u636e\u6761\u6570\uff1a {}\", num);        Integer updateNum = messageRepository.updateName(\"JPQL\", 1);        log.info(\"\u4fee\u6539\u7684\u6570\u636e\u6761\u6570\uff1a {}\", updateNum);    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-jpa/src/test/java/com/soft1851/springboot/jpa/dao/MessageRepositoryTest.java", "stars": "3", "class": {"name": "MessageRepositoryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "hasTileEntity", "params": ["IBlockState"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasTileEntity(IBlockState state) {        return super.hasTileEntity(state);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Block/BlockEVETest/BlockARadTest.java", "stars": "2", "class": {"name": "BlockARadTest", "extends": "PhaseTiledBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "createNewTileEntity", "params": ["World", "int"], "throws": null, "modifiers": ["public"], "return_type": "TileEntity", "snippet": "    public TileEntity createNewTileEntity(World worldIn, int meta) {        return new TileARadTest();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Block/BlockEVETest/BlockARadTest.java", "stars": "2", "class": {"name": "BlockARadTest", "extends": "PhaseTiledBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBlockActivated", "params": ["World", "BlockPos", "IBlockState", "EntityPlayer", "EnumHand", "EnumFacing", "float", "float", "float"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {        if (!worldIn.isRemote) {            ((TileARadTest) worldIn.getTileEntity(pos)).check();        }        return true;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Block/BlockEVETest/BlockARadTest.java", "stars": "2", "class": {"name": "BlockARadTest", "extends": "PhaseTiledBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-quartz/src/main/java/smoketest/quartz/SampleJob.java", "stars": "47572", "class": {"name": "SampleJob", "extends": "QuartzJobBean", "implements": null, "modifiers": ["public"]}}, {"method_name": "executeInternal", "params": ["JobExecutionContext"], "throws": ["JobExecutionException"], "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void executeInternal(JobExecutionContext context) throws JobExecutionException {\t\tSystem.out.println(String.format(\"Hello %s!\", this.name));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-quartz/src/main/java/smoketest/quartz/SampleJob.java", "stars": "47572", "class": {"name": "SampleJob", "extends": "QuartzJobBean", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources      .getResourceAsReader(\"org/apache/ibatis/submitted/resolution/deepresultmap/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),      \"org/apache/ibatis/submitted/resolution/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/resolution/deepresultmap/DeepResultMapTest.java", "stars": "15", "class": {"name": "DeepResultMapTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      MapperA mapper = sqlSession.getMapper(MapperA.class);      User user = mapper.getUser(1);      Assertions.assertEquals(Integer.valueOf(1), user.getId());      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/resolution/deepresultmap/DeepResultMapTest.java", "stars": "15", "class": {"name": "DeepResultMapTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailForDuplicatedPropertyNames", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailForDuplicatedPropertyNames() {    Configuration configuration = new Configuration();    Assertions.assertThrows(PersistenceException.class,        () -> configuration.addMapper(DuplicatedIncludePropertiesMapper.class));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyErrorTest.java", "stars": "15", "class": {"name": "IncludePropertyErrorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getUserName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUserName() {        return userName;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/BaseDto.java", "stars": "2", "class": {"name": "BaseDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserName(String userName) {        this.userName = userName;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/BaseDto.java", "stars": "2", "class": {"name": "BaseDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        super.onCreateView(inflater, container, savedInstanceState);        view = inflater.inflate(R.layout.fragment_categories, null);        findViews();        initLogic();        return view;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/CategoriesFragment.java", "stars": "4", "class": {"name": "CategoriesFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "findViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void findViews () {        recyclerView = view.findViewById(R.id.categories);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/CategoriesFragment.java", "stars": "4", "class": {"name": "CategoriesFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "initLogic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initLogic () {        projectsManager = ProjectsManager.getInstance();        initList();    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/CategoriesFragment.java", "stars": "4", "class": {"name": "CategoriesFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "initList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initList () {        MainActivity.frameLayout.setVisibility(View.GONE);        MainActivity.progressBar.setVisibility(View.VISIBLE);        projectsManager.getApi()                .getCategories()                .enqueue(new Callback<ArrayList<Category>>() {                    @Override                    public void onResponse(Call<ArrayList<Category>> call, Response<ArrayList<Category>> response) {                        if(response.code() == 200 && response.body() != null) {                            categories = response.body();                            new ThreadLoader(() -> {                                recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));                                adapter = new CategoriesAdapter(categories);                            }, () -> {                                recyclerView.setAdapter(adapter);                                MainActivity.frameLayout.setVisibility(View.VISIBLE);                                MainActivity.progressBar.setVisibility(View.GONE);                            });                        } else {                            initList();                        }                    }                    @Override                    public void onFailure(Call<ArrayList<Category>> call, Throwable t) {                        initList();                    }                });    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/CategoriesFragment.java", "stars": "4", "class": {"name": "CategoriesFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRun", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRun(final String[] args) {        if (args.length <= 1) {            ChatUtil.print(\"Not enough args.\");            return;        }        boolean bypass = args.length > 2 && args[2].equalsIgnoreCase(\"bypass\");        try {            final double blocks = Double.parseDouble(args[1]);            boolean ground = mc.player.onGround;            double[] dir = MotionUtil.forward(blocks);            Block block = mc.world.getBlockState(new BlockPos(mc.player.posX + dir[0], mc.player.posY - 0.1, mc.player.posZ + dir[1])).getBlock();            //ground = !(block instanceof BlockAir || block instanceof BlockLiquid);            if (bypass) {                for (double x = 0.0625; x < blocks; x += 0.262) {                    double[] dir2 = MotionUtil.forward(x);                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX + dir2[0], mc.player.posY, mc.player.posZ + dir2[1], ground));                    mc.player.setPositionAndUpdate(mc.player.posX + dir2[0], mc.player.posY, mc.player.posZ + dir2[1]);                }                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX + mc.player.motionX, 0, mc.player.posZ + mc.player.motionZ, ground));                ChatUtil.print(\"Zoomed \" + blocks + \" blocks (Bypass).\");            } else {                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX + dir[0], mc.player.posY, mc.player.posZ + dir[1], ground));                mc.player.setPositionAndUpdate(mc.player.posX + dir[0], mc.player.posY, mc.player.posZ + dir[1]);                ChatUtil.print(\"Zoomed \" + blocks + \" blocks.\");            }        } catch (NumberFormatException ex) {            ChatUtil.print(\"Invalid number \" + ChatFormatting.GRAY + args[1]);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/commands/HClipCommand.java", "stars": "12", "class": {"name": "HClipCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "analyze", "params": ["String", "MethodNode"], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "Frame<AbstractValue>", "snippet": "\tpublic Frame<AbstractValue>[] analyze(String owner, MethodNode method) throws AnalyzerException {\t\tFrame<AbstractValue>[] values = super.analyze(owner, method);\t\t// If the interpeter has problems, check if they've been resolved by checking frames\t\tif (interpreter.hasReportedProblems()) {\t\t\t// Check if the error logged no longer applies given the stack analysis results\t\t\t// (due to flow control most likely)\t\t\tfor(Map.Entry<AbstractInsnNode, AnalyzerException> e :\t\t\t\t\tnew HashSet<>(interpreter.getProblemInsns().entrySet())) {\t\t\t\tif (e.getValue() instanceof ResolvableAnalyzerException) {\t\t\t\t\tif (((ResolvableAnalyzerException) e.getValue()).validate(method, values)) {\t\t\t\t\t\tinterpreter.getProblemInsns().remove(e.getKey());\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\t// Check one last time\t\t\tif (throwUnresolvedAnalyzerErrors && !interpreter.getProblemInsns().isEmpty())\t\t\t\tthrow interpreter.getProblemInsns().values().iterator().next();\t\t}\t\treturn values;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "newFrame", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "SimFrame", "snippet": "\tprotected SimFrame newFrame(final int numLocals, final int numStack) {\t\treturn new SimFrame(numLocals, numStack);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "newFrame", "params": ["Frame<AbstractValue>"], "throws": null, "modifiers": ["protected"], "return_type": "SimFrame", "snippet": "\tprotected SimFrame newFrame(final Frame<? extends AbstractValue> frame) {\t\treturn new SimFrame((SimFrame) frame);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "newControlFlowEdge", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void newControlFlowEdge(int insnIndex, int successorIndex) {\t\tif (skipDeadCodeBlocks) {\t\t\topaqueHandler.onVisitControlFlowEdge(insnIndex, successorIndex);\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "createExceptionFactory", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ResolvableExceptionFactory", "snippet": "\tprotected ResolvableExceptionFactory createExceptionFactory() {\t\treturn new ResolvableExceptionFactory(createTypeChecker());\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "createStaticInvokeFactory", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "StaticInvokeFactory", "snippet": "\tprotected StaticInvokeFactory createStaticInvokeFactory() {\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "createStaticGetFactory", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "StaticGetFactory", "snippet": "\tprotected StaticGetFactory createStaticGetFactory() {\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "createTypeChecker", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "TypeChecker", "snippet": "\tprotected TypeChecker createTypeChecker() {\t\treturn (parent, child) -> {\t\t\ttry {\t\t\t\tClass<?> clsParent = Class.forName(parent.getClassName(), false,\t\t\t\t\t\tClassLoader.getSystemClassLoader());\t\t\t\tClass<?> clsChild = Class.forName(child.getClassName(), false,\t\t\t\t\t\tClassLoader.getSystemClassLoader());\t\t\t\treturn clsParent.isAssignableFrom(clsChild);\t\t\t} catch(Throwable t) {\t\t\t\tt.printStackTrace();\t\t\t\treturn false;\t\t\t}\t\t};\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setThrowUnresolvedAnalyzerErrors", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setThrowUnresolvedAnalyzerErrors(boolean throwUnresolvedAnalyzerErrors) {\t\tthis.throwUnresolvedAnalyzerErrors = throwUnresolvedAnalyzerErrors;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSkipDeadCodeBlocks", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setSkipDeadCodeBlocks(boolean skipDeadCodeBlocks) {\t\tthis.skipDeadCodeBlocks = skipDeadCodeBlocks;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOpaqueJump", "params": ["AbstractInsnNode", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setOpaqueJump(AbstractInsnNode insn, boolean gotoDestination) {\t\topaqueHandler.setOpaqueJump(insn, gotoDestination);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOpaqueHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "OpaqueHandler", "snippet": "\tpublic OpaqueHandler getOpaqueHandler() {\t\treturn opaqueHandler;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimAnalyzer.java", "stars": "12", "class": {"name": "SimAnalyzer", "extends": "Analyzer", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\t//fill the staff array with three Employee objects\t\tEmployee[] staff = new Employee[3];\t\t\t\tstaff[0] = new Employee(\"Wang\", 60000, 2015, 12, 15);\t\tstaff[1] = new Employee(\"Yang\", 50000, 2017, 10, 1);\t\tstaff[2] = new Employee(\"Liu\", 40000, 2019, 3, 15);\t\t\t\t//raise everyone's salary by 5%\t\tfor (Employee e : staff)\t\t\te.raiseSalary(5);\t\t\t\t//print out information about all Employee object\t\tfor (Employee e : staff)\t\t\tSystem.out.println(\"name=\" + e.getName() + \",salary\" + e.getSalary() +\",hireDay=\" + e.gethireDay());\t\t\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/EmployeeTest.java", "stars": "2", "class": {"name": "EmployeeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/EmployeeTest.java", "stars": "2", "class": {"name": "Employee", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSalary", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getSalary() {\t\treturn salary;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/EmployeeTest.java", "stars": "2", "class": {"name": "Employee", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "gethireDay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDate", "snippet": "\tpublic LocalDate gethireDay()\t{\t\treturn hireDay;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/EmployeeTest.java", "stars": "2", "class": {"name": "Employee", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "raiseSalary", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void raiseSalary(double byPercent)\t{\t\tdouble raise = salary * byPercent / 100;\t\tsalary += raise;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/EmployeeTest.java", "stars": "2", "class": {"name": "Employee", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSecurityType", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String getSecurityType() {        return \"DES\";    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/DesSecurityUtil.java", "stars": "2", "class": {"name": "DesSecurityUtil", "extends": "BaseSecurityAdvancedUtil", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateKey", "params": ["String"], "throws": null, "modifiers": [], "return_type": "Key", "snippet": "    Key generateKey(String keyStr) {        if (StringUtils.isEmpty(keyStr)) {            keyStr = UUID.randomUUID().toString();        }        log.info(\"DES Key: {}\", keyStr);        byte[] keyArray = keyStr.getBytes();        // \u521b\u5efa\u4e00\u4e2a\u7a7a\u76848\u4f4d\u5b57\u8282\u6570\u7ec4\uff08\u9ed8\u8ba4\u503c\u4e3a0\uff09        byte[] byteArray = new byte[8];        // \u5c06\u539f\u59cb\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3a8\u4f4d        for (int i = 0; i < keyArray.length && i < byteArray.length; ++i) {            byteArray[i] = keyArray[i];        }        // \u751f\u6210\u5bc6\u94a5        return new javax.crypto.spec.SecretKeySpec(byteArray, getSecurityType());    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/DesSecurityUtil.java", "stars": "2", "class": {"name": "DesSecurityUtil", "extends": "BaseSecurityAdvancedUtil", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        /*            Person\u7c7b\u9ed8\u8ba4\u7ee7\u627f\u4e86Object\u7c7b,\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528Object\u7c7b\u7684equals\u65b9\u6cd5            boolean equals(Object obj) \u6307\u793a\u5176\u4ed6\u67d0\u4e2a\u5bf9\u8c61\u662f\u5426\u4e0e\u6b64\u5bf9\u8c61\u201c\u76f8\u7b49\u201d\u3002            equals\u65b9\u6cd5\u6e90\u7801:                public boolean equals(Object obj) {                    return (this == obj);                }                \u53c2\u6570:                    Object obj:\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u7684\u5bf9\u8c61                    == \u6bd4\u8f83\u8fd0\u7b97\u7b26,\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5e03\u5c14\u503c true false                    \u57fa\u672c\u6570\u636e\u7c7b\u578b:\u6bd4\u8f83\u7684\u662f\u503c                    \u5f15\u7528\u6570\u636e\u7c7b\u578b:\u6bd4\u4ef7\u7684\u662f\u4e24\u4e2a\u5bf9\u8c61\u7684\u5730\u5740\u503c               this\u662f\u8c01?\u90a3\u4e2a\u5bf9\u8c61\u8c03\u7528\u7684\u65b9\u6cd5,\u65b9\u6cd5\u4e2d\u7684this\u5c31\u662f\u90a3\u4e2a\u5bf9\u8c61;p1\u8c03\u7528\u7684equals\u65b9\u6cd5\u6240\u4ee5this\u5c31\u662fp1               obj\u662f\u8c01?\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570p2               this==obj -->p1==p2         */        Person p1 = new Person(\"\u8fea\u4e3d\u70ed\u5df4\",18);        //Person p2 = new Person(\"\u53e4\u529b\u5a1c\u624e\",19);        Person p2 = new Person(\"\u8fea\u4e3d\u70ed\u5df4\",18);        System.out.println(\"p1:\"+p1);//p1:com.itheima.demo01.Object.Person@58ceff1        System.out.println(\"p2:\"+p2);//p2:com.itheima.demo01.Object.Person@7c30a502        //p1=p2;//\u628ap2\u7684\u5730\u5740\u503c\u8d4b\u503c\u7ed9p1        ArrayList<String> list = new ArrayList<>();        boolean b = p1.equals(p1);        System.out.println(b);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo01/Object/Demo02Equals.java", "stars": "2", "class": {"name": "Demo02Equals", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name)    {        this.name = name;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername()    {        return username;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username)    {        this.username = username;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPhoneNo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPhoneNo()    {        return phoneNo;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPhoneNo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPhoneNo(String phoneNo)    {        this.phoneNo = phoneNo;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEmail()    {        return email;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEmail(String email)    {        this.email = email;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword()    {        return password;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password)    {        this.password = password;    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/UserHelperClass.java", "stars": "3", "class": {"name": "UserHelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCount ()\t{\t\treturn n_getCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getCount ();\tpublic java.lang.Object getItem (int p0)\t{\t\treturn n_getItem (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "\tpublic java.lang.Object getItem (int p0)\t{\t\treturn n_getItem (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItem", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "java", "snippet": "\tprivate native java.lang.Object n_getItem (int p0);\tpublic int getViewTypeCount ()\t{\t\treturn n_getViewTypeCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getViewTypeCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getViewTypeCount ()\t{\t\treturn n_getViewTypeCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getViewTypeCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getViewTypeCount ();\tpublic boolean areAllItemsEnabled ()\t{\t\treturn n_areAllItemsEnabled ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "areAllItemsEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean areAllItemsEnabled ()\t{\t\treturn n_areAllItemsEnabled ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_areAllItemsEnabled", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_areAllItemsEnabled ();\tpublic long getItemId (int p0)\t{\t\treturn n_getItemId (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long getItemId (int p0)\t{\t\treturn n_getItemId (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemId", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "long", "snippet": "\tprivate native long n_getItemId (int p0);\tpublic android.view.View getView (int p0, android.view.View p1, android.view.ViewGroup p2)\t{\t\treturn n_getView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View getView (int p0, android.view.View p1, android.view.ViewGroup p2)\t{\t\treturn n_getView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getView", "params": ["int", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_getView (int p0, android.view.View p1, android.view.ViewGroup p2);\tpublic boolean isEnabled (int p0)\t{\t\treturn n_isEnabled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "isEnabled", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isEnabled (int p0)\t{\t\treturn n_isEnabled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_isEnabled", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_isEnabled (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewModelRenderer.java", "stars": "2", "class": {"name": "TableViewModelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "handle", "params": ["String", "Request", "HttpServletRequest", "HttpServletResponse"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException {        response.sendRedirect(\"/404.html\");    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/server/handler/NotFoundHandler.java", "stars": "2", "class": {"name": "NotFoundHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getServerGuiElement", "params": ["int", "EntityPlayer", "World", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getServerGuiElement(int ID, EntityPlayer player, World world, int x, int y, int z) {        EnumHand hand = x == 1 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;        ItemStack stack = player.getHeldItem(hand);        switch (ID) {            case GUILib.GUI_COLLICULUS:                if (stack.getItem() == ItemColliculus.itemInst)                    return new ContainerColliculus(player, new InventoryColliculus(stack));            case GUILib.GUI_MATRIX:                if (stack.getItem() instanceof ItemMatrix)                    return new ContainerMatrix(player, new InventoryMatrix(stack));        }        return null;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/GuiHandler.java", "stars": "2", "class": {"name": "GuiHandler", "extends": null, "implements": ["IGuiHandler"], "modifiers": ["public"]}}, {"method_name": "getClientGuiElement", "params": ["int", "EntityPlayer", "World", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getClientGuiElement(int ID, EntityPlayer player, World world, int x, int y, int z) {        EnumHand hand = x == 1 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;        ItemStack stack = player.getHeldItem(hand);        switch (ID) {            case GUILib.GUI_COLLICULUS:                if (stack.getItem() == ItemColliculus.itemInst)                    return new GuiColliculus(player, new InventoryColliculus(stack));            case GUILib.GUI_MATRIX:                if (stack.getItem() == ItemMatrix.itemInst)                    return new GuiMatrix(player, new InventoryMatrix(stack));            case GUILib.GUI_PICKER:                if (stack.getItem() == ItemColorPicker.itemInst)                    return new GuiColorPicker(stack);        }        return null;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/GuiHandler.java", "stars": "2", "class": {"name": "GuiHandler", "extends": null, "implements": ["IGuiHandler"], "modifiers": ["public"]}}, {"method_name": "openConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openConnection() {        try {            if (!file.exists())                file.createNewFile();            Class.forName(\"org.sqlite.JDBC\");            connect();            createTables();        } catch (Exception exception) {            exception.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/database/impl/SQLiteConnection.java", "stars": "2", "class": {"name": "SQLiteConnection", "extends": null, "implements": ["DatabaseConnection"], "modifiers": ["public"]}}, {"method_name": "getConnection", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getConnection(boolean autoCommit) {        try {            if (connection == null || connection.isClosed())                connect();            connection.setAutoCommit(autoCommit);            return connection;        } catch (Exception exception) {            return null;        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/database/impl/SQLiteConnection.java", "stars": "2", "class": {"name": "SQLiteConnection", "extends": null, "implements": ["DatabaseConnection"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void connect() throws SQLException {        connection = DriverManager.getConnection(\"jdbc:sqlite:\" + file.getAbsolutePath());    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/database/impl/SQLiteConnection.java", "stars": "2", "class": {"name": "SQLiteConnection", "extends": null, "implements": ["DatabaseConnection"], "modifiers": ["public"]}}, {"method_name": "createTables", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createTables() {        try (Statement statement = connection.createStatement()) {            statement.executeUpdate(\"CREATE TABLE IF NOT EXISTS vips (\" +                    \"uuid VARCHAR(36) NOT NULL, \" +                    \"vip_type VARCHAR(50) NOT NULL, \" +                    \"time BIGINT(19) NOT NULL,\" +                    \"primary key (uuid, vip_type) \" +                    \")\");        } catch (Exception exception) {            // TODO: log        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/database/impl/SQLiteConnection.java", "stars": "2", "class": {"name": "SQLiteConnection", "extends": null, "implements": ["DatabaseConnection"], "modifiers": ["public"]}}, {"method_name": "channelRegistered", "params": ["ChannelHandlerContext"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {        log.info(\"\u6ce8\u518c\u7528\u6237 channelRegistered:{}\",ctx);        //\u8fd9\u91cc\u53ef\u4ee5\u653e\u5165Redis\u54ea\u4e2a\u6e38\u620f\u7684\u7528\u6237\u4e0a\u7ebf        ctx.fireChannelRegistered();        //\u7ed1\u5b9a        long sessionId = id_gen.incrementAndGet();        ctx.channel().attr(channel_session_id).set(sessionId);        Request request = Request.builder().channelHandlerContext(ctx).sessionId(sessionId).build();        concurrentHashMap.put(sessionId,request);        //\u53ef\u4ee5\u6dfb\u52a0\u4e8b\u4ef6 \u961f\u5217//        EventParam<NettyTcpSession> sessionEventParam = new EventParam<>();//        SessionRegisterEvent sessionRegisterEvent = new SessionRegisterEvent(l, l, sessionEventParam);//        BlockingQueue<SingleEvent> queue = new ArrayBlockingQueue(10);//        queue.put(sessionRegisterEvent);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketFrameServerHandler.java", "stars": "1", "class": {"name": "WebSocketFrameServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "userEventTriggered", "params": ["ChannelHandlerContext", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void userEventTriggered(ChannelHandlerContext ctx, Object obj) throws Exception {//        if (obj instanceof IdleStateEvent) {//            IdleStateEvent event = (IdleStateEvent) obj;//            //\u5982\u679c\u8bfb\u901a\u9053\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u8bf4\u660e\u6ca1\u6709\u63a5\u6536\u5230\u5fc3\u8df3\u547d\u4ee4//            if (IdleState.READER_IDLE.equals(event.state())) {//                System.out.println(\"\u5df2\u7ecf5\u79d2\u6ca1\u6709\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u7684\u4fe1\u606f\u4e86\");//                if (idle_count > 2) {//                    System.out.println(\"\u5173\u95ed\u8fd9\u4e2a\u4e0d\u6d3b\u8dc3\u7684channel\");//                    ctx.channel().close();//                }//                idle_count++;//            }//        } else {//            super.userEventTriggered(ctx, obj);//        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketFrameServerHandler.java", "stars": "1", "class": {"name": "WebSocketFrameServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelRead0", "params": ["ChannelHandlerContext", "WebSocketFrame"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame msg) throws Exception {        handleWebSocketFrame(ctx, msg);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketFrameServerHandler.java", "stars": "1", "class": {"name": "WebSocketFrameServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleWebSocketFrame", "params": ["ChannelHandlerContext", "WebSocketFrame"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleWebSocketFrame(ChannelHandlerContext ctx, WebSocketFrame frame) {        Long aLong = ctx.channel().attr(channel_session_id).get();        Request request = concurrentHashMap.get(aLong);        if (frame instanceof CloseWebSocketFrame) {            WebSocketHttpServerHandler webSocketServerHandler = (WebSocketHttpServerHandler) ctx.pipeline().get(\"WebSocketHttpServerHandler\");            WebSocketServerHandshaker handShaker = webSocketServerHandler.getHandshaker();            handShaker.close(ctx.channel(), (CloseWebSocketFrame) frame.retain());            return;        }        if(frame instanceof PingWebSocketFrame) {            ctx.write(new PongWebSocketFrame(frame.content().retain()));            return;        }        if (frame instanceof TextWebSocketFrame) {            log.info(\"\u5ba2\u6237\u7aef\u53d1\u8fc7\u6765\u7684\u6d88\u606f TextWebSocketFrame:{}\",frame.retain());            String message = ((TextWebSocketFrame) frame).text();            DataPacket dataPacket = null;            try {                log.info(\"\u7528\u6237\u62ff\u53d6\u5230\u7684\u6d88\u606f message:{}\",message);                dataPacket = JSONObject.parseObject(message, DataPacket.class);                handlerDispatcher.getMessageQueue().add(new RequestMessageData(request,dataPacket));            } catch (Exception e) {                ctx.writeAndFlush(new TextWebSocketFrame(message));                e.printStackTrace();            }            return;        }        if (frame instanceof BinaryWebSocketFrame) {            BinaryWebSocketFrame binaryWebSocketFrame = (BinaryWebSocketFrame) frame;            ByteBuf buf = binaryWebSocketFrame.content();            handlerDispatcher.getMessageQueue().add(new RequestMessageByte(request,buf));        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketFrameServerHandler.java", "stars": "1", "class": {"name": "WebSocketFrameServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelUnregistered", "params": ["ChannelHandlerContext"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {        //\u5220\u9664\u5185\u5b58\u7528\u6237        Long aLong = ctx.channel().attr(channel_session_id).get();        concurrentHashMap.remove(aLong);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketFrameServerHandler.java", "stars": "1", "class": {"name": "WebSocketFrameServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/dynsql2/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/dynsql2/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/DynSqlTest.java", "stars": "15", "class": {"name": "DynSqlTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testDynamicSelectWithTypeHandler", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testDynamicSelectWithTypeHandler() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<Name> names = new ArrayList<>();      Name name = new Name();      name.setFirstName(\"Fred\");      name.setLastName(\"Flintstone\");      names.add(name);      name = new Name();      name.setFirstName(\"Barney\");      name.setLastName(\"Rubble\");      names.add(name);      Parameter parameter = new Parameter();      parameter.setNames(names);      List<Map<String, Object>> answer = sqlSession.selectList(\"org.apache.ibatis.submitted.dynsql2.dynamicSelectWithTypeHandler\", parameter);      assertEquals(2, answer.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/DynSqlTest.java", "stars": "15", "class": {"name": "DynSqlTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSimpleSelect", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testSimpleSelect() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Map<String, Object> answer = sqlSession.selectOne(\"org.apache.ibatis.submitted.dynsql2.simpleSelect\", 1);      assertEquals(answer.get(\"ID\"), 1);      assertEquals(answer.get(\"FIRSTNAME\"), \"Fred\");      assertEquals(answer.get(\"LASTNAME\"), \"Flintstone\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/DynSqlTest.java", "stars": "15", "class": {"name": "DynSqlTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String args[])  {      System.out.print(\"121321\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/DynSqlTest.java", "stars": "15", "class": {"name": "DynSqlTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "entrar", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String entrar(HttpServletRequest request, HttpServletResponse response) {        try {            String login = request.getParameter(\"login\");\t\t\t            String password = request.getParameter(\"senha\");\t\t\t\t\t\tUsuario user = userService.execute(login, password);            \t\t\tHttpSession session = request.getSession(true);            \t\t\tsession.setAttribute(\"usuario\", user);            return \"restrict/home.jsp\";        } catch (Exception e) {                    \tString msgStr = \"Usuario nao autorizado. Login ou Senha invalidos.\";                    \trequest.setAttribute(\"msg\", msgStr);                    \treturn \"index.jsp\";        }    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/LoginAction.java", "stars": "2", "class": {"name": "LoginAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "sair", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String sair(HttpServletRequest request, HttpServletResponse response) {                request.getSession().invalidate();                return \"index.jsp\";    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/LoginAction.java", "stars": "2", "class": {"name": "LoginAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "selectAll", "params": ["DataSourceOwnerQuery", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> selectAll(DataSourceOwnerQuery pageQuery, HttpServletRequest request) {        List<DataSourceOwner> data = dataSourceOwnerService.selectAllList(pageQuery);        return new Response<>().successResponse(data);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceOwnerController.java", "stars": "23", "class": {"name": "DataSourceOwnerController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindWebSocket", "params": ["Integer", "Request", "Integer", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void bindWebSocket(Integer userId, Request request, Integer gameId, Integer gameNum) {        String newUserId = String.valueOf(userId);        requestConcurrentHashMap.put(newUserId, request);        request.setUserId(userId);        String StringOldAddress = redisUtils.getHash(RedisKey.USER_ONLINE.getKey(), newUserId);        if (!StringUtils.isEmpty(StringOldAddress) || !StringOldAddress.equals(getGameServerStr(gameId, gameNum))) {            //todo \u73a9\u5bb6\u4e0b\u7ebf        }        redisUtils.putMap(RedisKey.USER_ONLINE.getKey(), newUserId, getGameServerStr(gameId, gameNum));    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketManager.java", "stars": "1", "class": {"name": "WebSocketManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWebSocket", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Request", "snippet": "    public static Request getWebSocket(int userId) {        return requestConcurrentHashMap.get(String.valueOf(userId));    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketManager.java", "stars": "1", "class": {"name": "WebSocketManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Request"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void remove(Request request) {        Integer userId = request.getUserId();        //\u5220\u9664\u7528\u6237\u7ed1\u5b9a\u72b6\u6001        requestConcurrentHashMap.remove(String.valueOf(userId));        //\u5220\u9664\u7528\u6237\u5728\u7ebf\u72b6\u6001        redisUtils.deleteMap(RedisKey.USER_ONLINE.getKey(),String.valueOf(userId));        //\u73a9\u5bb6\u79bb\u7ebf\u63a8\u9001\u6d41\u6c34    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketManager.java", "stars": "1", "class": {"name": "WebSocketManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGameServerStr", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getGameServerStr(Integer gameId, Integer gameNum) {        return gameId + \":\" + gameNum;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketManager.java", "stars": "1", "class": {"name": "WebSocketManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUp() throws Exception {//        this.queryRunner = mock(QueryRunner.class);        this.queryRunner = new QueryRunner(this.datasource);        this.conn = this.datasource.getConnection();//        final DataSource mockDataSource = mock(this.datasource.getClass());//        when(this.queryRunner.getDataSource()).thenReturn(mockDataSource);//        when(mockDataSource.getConnection()).thenReturn(this.conn);        this.dbOperator = new DatabaseOperator(this.queryRunner);        list.add(index_1);        list.add(index_2);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/DistributeLockTest.java", "stars": "18", "class": {"name": "DistributeLockTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testValidQuery", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testValidQuery() throws Exception {        int ss = dbOperator.query(\"select * from distribute_lock where lock_resource = ?\", this.handler,1);        System.out.println(\"~~~~~~~~\" + ss);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/DistributeLockTest.java", "stars": "18", "class": {"name": "DistributeLockTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test1() {        DBTableDistributeLock dd = new DBTableDistributeLock(dbOperator);        String requestid = dd.getRequestId();        String lock_key = \"myflowname\";        for (int i = 0; i < 2; i++) {            dd.lock(lock_key, 10000L, 1000);        }        for (int i = 0; i < 2; i++) {            dd.unlock(lock_key);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/DistributeLockTest.java", "stars": "18", "class": {"name": "DistributeLockTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test2", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void test2() throws Exception {        DBTableDistributeLock dd = new DBTableDistributeLock(dbOperator);        String lock_key = \"queue_lock_key\";        dd.lock(lock_key, 5000L, 1000);        Thread thread1 = new Thread(() -> {            try {                try {                    dd.lock(lock_key, 5000L, 7000);                } finally {                    dd.unlock(lock_key);                }            } catch (Exception e) {                e.printStackTrace();            }        });        thread1.setName(\"thread1\");        thread1.start();        thread1.join();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/DistributeLockTest.java", "stars": "18", "class": {"name": "DistributeLockTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testtime", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testtime() throws Exception {        long time1 = System.currentTimeMillis();        Thread.sleep(5000);        long time2 = System.currentTimeMillis();        System.out.println(time1 + \":\" + time2);        System.out.println(time1 - time2);        System.out.println((time2-time1)/1000 * 60 * 60);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/DistributeLockTest.java", "stars": "18", "class": {"name": "DistributeLockTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testThread", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testThread() throws Exception {        DBTableDistributeLock dd = new DBTableDistributeLock(dbOperator);        for (int i = 0; i < 10; i++) {            ThreadA thread1 = new ThreadA(dd);            thread1.setName(\"thread-\" + i);            thread1.start();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/DistributeLockTest.java", "stars": "18", "class": {"name": "DistributeLockTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            String lock_key = \"myflowname\";            dd.lock(lock_key, 5000L, 10000L);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/DistributeLockTest.java", "stars": "18", "class": {"name": "ThreadA", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldThrowErrorWhenBothResultMapAndNestedSelectAreSet", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldThrowErrorWhenBothResultMapAndNestedSelectAreSet() {    Assertions.assertThrows(IllegalStateException.class, () -> {      new ResultMapping.Builder(configuration, \"prop\")        .nestedQueryId(\"nested query ID\")        .nestedResultMapId(\"nested resultMap\")        .build();    });  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/mapping/ResultMappingTest.java", "stars": "15", "class": {"name": "ResultMappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailWithAMissingColumnInNetstedSelect", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailWithAMissingColumnInNetstedSelect() {    Assertions.assertThrows(IllegalStateException.class, () -> new ResultMapping.Builder(configuration, \"prop\")        .nestedQueryId(\"nested query ID\")        .build());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/mapping/ResultMappingTest.java", "stars": "15", "class": {"name": "ResultMappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "doGetAuthorizationInfo", "params": ["PrincipalCollection"], "throws": null, "modifiers": ["protected"], "return_type": "AuthorizationInfo", "snippet": "    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {        System.out.println(\"\u6388\u6743doGetAuthorizationInfo\");        Users userName = (Users)principalCollection.getPrimaryPrincipal();        Users info = userService.getUserInfoByUsername(userName.getUsername());        List<String> roleList = new ArrayList<>();        List<String> permissionList = new ArrayList<>();        info.getRoleList().forEach(role->{            roleList.add(role.getRoleName());            permissionList.addAll(role.getPermissionList()                    .stream()                    .map(Permission::getName)                    .collect(Collectors.toList()));        });        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();        simpleAuthorizationInfo.addRoles(roleList);        simpleAuthorizationInfo.addStringPermissions(permissionList);        return simpleAuthorizationInfo;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/config/CustomRealm.java", "stars": "2", "class": {"name": "CustomRealm", "extends": "AuthorizingRealm", "implements": null, "modifiers": ["public"]}}, {"method_name": "doGetAuthenticationInfo", "params": ["AuthenticationToken"], "throws": ["AuthenticationException"], "modifiers": ["protected"], "return_type": "AuthenticationInfo", "snippet": "    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {        System.out.println(\"\u7528\u6237\u8ba4\u8bc1doGetAuthenticationInfo\");        String username = (String)authenticationToken.getPrincipal();        Users info = userService.getUserInfoByUsername(username);        String pwd = info.getPassword();        if(pwd == null || \"\".equals(pwd)){            return null;        }        return new SimpleAuthenticationInfo(info,info.getPassword(),this.getClass().getName());    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/config/CustomRealm.java", "stars": "2", "class": {"name": "CustomRealm", "extends": "AuthorizingRealm", "implements": null, "modifiers": ["public"]}}, {"method_name": "trace", "params": ["Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String trace(Throwable ex) {        StringWriter sw = new StringWriter(STRING_BUFFER);        PrintWriter pw = new PrintWriter(sw);        ex.printStackTrace(pw);        return sw.toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ExceptionTracker.java", "stars": "23", "class": {"name": "ExceptionTracker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void start() {\t\t// TODO Auto-generated method stub\t\t\t\ttotalTime = 0;\t\telapsedTime = System.nanoTime();\t\tpaused = false;\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/timing/Timing.java", "stars": "2", "class": {"name": "Timing", "extends": null, "implements": ["ITiming"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long stop() {\t\t// TODO Auto-generated method stub\t\t\t\tlong temp = System.nanoTime();\t\tif(paused)\t\t\treturn totalTime;\t\t totalTime+= temp - elapsedTime;\t\t\t\treturn totalTime;\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/timing/Timing.java", "stars": "2", "class": {"name": "Timing", "extends": null, "implements": ["ITiming"], "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long pause() {\t\t// TODO Auto-generated method stub\t\tlong temp = System.nanoTime() - elapsedTime;\t\ttotalTime += temp;\t\tpaused = true;\t\treturn temp;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/timing/Timing.java", "stars": "2", "class": {"name": "Timing", "extends": null, "implements": ["ITiming"], "modifiers": ["public"]}}, {"method_name": "resume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void resume() {\t\t// TODO Auto-generated method stub\t\t\t\telapsedTime = System.nanoTime();\t\tpaused = false;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/timing/Timing.java", "stars": "2", "class": {"name": "Timing", "extends": null, "implements": ["ITiming"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \" elapseTime \";\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/timing/Timing.java", "stars": "2", "class": {"name": "Timing", "extends": null, "implements": ["ITiming"], "modifiers": ["public"]}}, {"method_name": "join", "params": ["Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    static private String join(Object... args) {        return Stream.of(args).map(String::valueOf).collect(Collectors.joining(\" \"));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/ViewerEvent.java", "stars": "15", "class": {"name": "ViewerEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formatFrameTime", "params": ["double"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String formatFrameTime(double t) {        return decimalFormat.format(t);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/ViewerEvent.java", "stars": "15", "class": {"name": "ViewerEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getT", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getT() {        return t;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/ViewerEvent.java", "stars": "15", "class": {"name": "ViewerEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setT", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setT(double t) {        this.t = t;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/ViewerEvent.java", "stars": "15", "class": {"name": "ViewerEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getId() {        return id;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/ViewerEvent.java", "stars": "15", "class": {"name": "ViewerEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(String id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/ViewerEvent.java", "stars": "15", "class": {"name": "ViewerEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParams", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getParams() {        return params;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/ViewerEvent.java", "stars": "15", "class": {"name": "ViewerEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        String serializedParams = params.entrySet().stream()            .sorted(Entry.comparingByKey())            .map(Entry::getValue)            .map(String::valueOf)            .collect(Collectors.joining(\" \"));        return join(formatFrameTime(t), id, serializedParams);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/event/ViewerEvent.java", "stars": "15", "class": {"name": "ViewerEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGUI", "params": ["IGUICallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGUI(IGUICallback back) {        callback = back;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "render", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void render(int x, int y, float partialTicks) {        drawTextBox();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "renderForeground", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void renderForeground(int x, int y, float partialTicks) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "getClickAwareRange", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Pairs<Range,Range>", "snippet": "    public Pairs<Range, Range> getClickAwareRange() {        return new Pairs<>(new Range(x, x + width), new Range(y, y + width));    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClicked(int mouseX, int mouseY, int mouseButton) {        mouseClicked(mouseX, mouseY, mouseButton);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onClickedOutside", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickedOutside(int mouseX, int mouseY, int mouseButton) {        onClicked(mouseX, mouseY, mouseButton);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onKeyInput", "params": ["char", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onKeyInput(char key, int keyCode) {        if (textboxKeyTyped(key, keyCode)) {            callback.update(this);            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "update", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void update() {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getID() {        return 1;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getValue() {        return getText();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementTextField.java", "stars": "2", "class": {"name": "ElementTextField", "extends": "GuiTextField", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "settings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void settings() {        size (500, 500);    }", "url": "https://raw.githubusercontent.com/MiladFarazian/Bound/master/JavaProcessing/src/MyFirstProject.java", "stars": "1", "class": {"name": "MyFirstProject", "extends": "PApplet", "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        background(40,50,140);        font = createFont(\"Impact\", 16, true);        String[] fontList = PFont.list();        demoBox1 = new BouncingBox();        demoBox2 = new BouncingBox();        demoBox3 = new BouncingBox();        demoBox4 = new BouncingBox();        demoBox5 = new BouncingBox();        demoBox6 = new BouncingBox();        box1 = new BouncingBox();        box2 = new BouncingBox();        box3 = new BouncingBox();        box4 = new BouncingBox();        box5 = new BouncingBox();        box6 = new BouncingBox();        MODE = \"MENU\";        printArray(fontList);        playerX = 250;        score = 0;    }", "url": "https://raw.githubusercontent.com/MiladFarazian/Bound/master/JavaProcessing/src/MyFirstProject.java", "stars": "1", "class": {"name": "MyFirstProject", "extends": "PApplet", "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void draw() {        //frame.setLocation((int)score * 20, 0);        if(MODE == \"MENU\") {            background(255, 255, 255);            noStroke();            playerX = mouseX;            if (playerX + 30 > 500) {                playerX = 470;            }            //Boxes            demoBox1.updateBox();            demoBox2.updateBox();            demoBox3.updateBox();            demoBox4.updateBox();            demoBox5.updateBox();            demoBox6.updateBox();            shake = demoBox1.shouldShake() || demoBox2.shouldShake() || demoBox3.shouldShake() || demoBox4.shouldShake() || demoBox5.shouldShake() || demoBox6.shouldShake();            if(shake) {                pushMatrix();                translate(random(-5,5), random(-5,5));            }            fill(0,0,0);            rect(0,0,width,height);            fill(255, 255, 255);            rect(demoBox1.boxX, demoBox1.boxY, demoBox1.boxWidth, demoBox1.boxHeight);            rect(demoBox2.boxX, demoBox2.boxY, demoBox2.boxWidth, demoBox2.boxHeight);            rect(demoBox3.boxX, demoBox3.boxY, demoBox3.boxWidth, demoBox3.boxHeight);            rect(demoBox4.boxX, demoBox4.boxY, demoBox4.boxWidth, demoBox4.boxHeight);            rect(demoBox5.boxX, demoBox5.boxY, demoBox5.boxWidth, demoBox5.boxHeight);            rect(demoBox6.boxX, demoBox6.boxY, demoBox6.boxWidth, demoBox6.boxHeight);            fill(255, 255, 255);            rect(playerX, 470, 30, 30);            textAlign(CENTER);            textFont(font, 150);            text(\"BOUND\", 250, 150);            if(mouseX < 300 && mouseX > 200 && mouseY > 355 && mouseY < 405) {                fill(255,255,255);                rect(200,355,100,50);                fill(0,0,0);                textFont(font, 50);                text(\"PLAY\", 250, 400);                if(mousePressed) {                    MODE = \"PLAYING\";                    delay(500);                }            } else {                fill(255,255,255);                textFont(font, 50);                text(\"PLAY\", 250, 400);            }            if(shake) {                popMatrix();            }        }        if(MODE == \"PLAYING\") {            // Background            background(255, 255, 255);            noStroke();            // Player Box            playerX = mouseX;            if (playerX + 30 > 500) {                playerX = 470;            }            //Boxes            if(box1.touchingPlayer(playerX) || box2.touchingPlayer(playerX) || box2.touchingPlayer(playerX) || box3.touchingPlayer(playerX) || box4.touchingPlayer(playerX)) {                MODE = \"PAUSE\";            }            if(score > 5) {                if(box5.touchingPlayer(playerX)) {                    MODE = \"PAUSE\";                }            }            if (score > 10) {                if(box6.touchingPlayer(playerX)) {                    MODE = \"PAUSE\";                }            }            box1.updateBox();            box2.updateBox();            box3.updateBox();            box4.updateBox();            shake = box1.shouldShake() || box2.shouldShake() || box3.shouldShake() || box4.shouldShake();            if(score > 10) {                box6.updateBox();                if(box6.shouldShake()) {                    shake = true;                }            }            if(score > 5) {                box5.updateBox();                if(box5.shouldShake()) {                    shake = true;                }            }            if(shake) {                pushMatrix();                translate(random(-5,5), random(-5,5));            }            fill(0,0,0);            rect(0,0,width,height);            fill(255, 255, 255);            rect(playerX, 470, 30, 30);            rect(box1.boxX, box1.boxY, box1.boxWidth, box1.boxHeight);            rect(box2.boxX, box2.boxY, box2.boxWidth, box2.boxHeight);            rect(box3.boxX, box3.boxY, box3.boxWidth, box3.boxHeight);            rect(box4.boxX, box4.boxY, box4.boxWidth, box4.boxHeight);            if(score > 5) {                rect(box5.boxX, box5.boxY, box5.boxWidth, box5.boxHeight);            }            if(score > 10) {                rect(box6.boxX, box6.boxY, box6.boxWidth, box6.boxHeight);            }            score+= 0.01;            textAlign(CENTER);            textFont(font, 150);            text((int)score, 250, 150);            if(score == 5) {                box5 = new BouncingBox();            }            if(score == 10) {                box6 = new BouncingBox();            }            if(shake) {                popMatrix();            }            if(MODE == \"PAUSE\") {                fill(255, 255, 255);                rect(box1.boxX, box1.boxY, box1.boxWidth, box1.boxHeight);                rect(box2.boxX, box2.boxY, box2.boxWidth, box2.boxHeight);                rect(box3.boxX, box3.boxY, box3.boxWidth, box3.boxHeight);                rect(box4.boxX, box4.boxY, box4.boxWidth, box4.boxHeight);                fill(255,255,255);                if(score > 5) {                    rect(box5.boxX, box5.boxY, box5.boxWidth, box5.boxHeight);                }                if(score > 10) {                    rect(box6.boxX, box6.boxY, box6.boxWidth, box6.boxHeight);                }                fill(255, 0, 0);                rect(playerX, 470, 30, 30);            }        } else if(MODE == \"PAUSE\") {            screenSlideX = 0;            delay(1000);            MODE = \"SLIDE\";        }        if(MODE == \"SLIDE\") {            screenSlideX += (500 - screenSlideX) / 30;            background(255, 255, 255);            pushMatrix();            translate(screenSlideX, 0);            fill(0,0,0);            rect(0,0,width,height);            fill(255, 255, 255);            rect(box1.boxX, box1.boxY, box1.boxWidth, box1.boxHeight);            rect(box2.boxX, box2.boxY, box2.boxWidth, box2.boxHeight);            rect(box3.boxX, box3.boxY, box3.boxWidth, box3.boxHeight);            rect(box4.boxX, box4.boxY, box4.boxWidth, box4.boxHeight);            fill(255, 0, 0);            rect(playerX, 470, 30, 30);            fill(255,255,255);            if(score > 5) {                rect(box5.boxX, box5.boxY, box5.boxWidth, box5.boxHeight);            }            if(score > 10) {                rect(box6.boxX, box6.boxY, box6.boxWidth, box6.boxHeight);            }            textAlign(CENTER);            textFont(font, 150);            text((int)score, 250, 150);            popMatrix();            if(round(screenSlideX) == 500) {                MODE = \"GAME OVER\";                overSlideY = -150;                scoreSlideY = 1000;                score2SlideY = 7000;                menuButtonSlideY = 15000;            }        }        if(MODE == \"GAME OVER\") {            overSlideY += (0 - overSlideY) / 10;            scoreSlideY += (0-scoreSlideY / 10);            score2SlideY += (0 - score2SlideY / 10);            menuButtonSlideY += (0 - menuButtonSlideY) / 10;            background(255, 255, 255);            fill(0,0,0);            textAlign(CENTER);            textFont(font, 100);            pushMatrix();            translate(0,overSlideY);            text(\"GAME OVER\", 250, 150);            popMatrix();            textFont(font, 75);            pushMatrix();            translate(0,scoreSlideY);            text(\"Score:\", 250, 250);            popMatrix();            textFont(font, 70);            pushMatrix();            translate(0,score2SlideY);            text((int)score, 250, 350);            popMatrix();            pushMatrix();            translate(0,menuButtonSlideY);            if(mouseX < 310 && mouseX > 190 && mouseY > 395 && mouseY < 445) {                fill(0,0,0);                rect(190,395,120,50);                fill(255,255,255);                textFont(font, 50);                text(\"MENU\", 250, 440);                if(mousePressed) {                    delay(300);                    setup();                }            } else {                fill(0,0,0);                textFont(font, 50);                text(\"MENU\", 250, 440);            }            popMatrix();        }        //rect(mouseX, mouseY, 20, 20);        /*        textFont(font, 50);        fill(200,100,0);        String text1 = \"X = \" + mouseX + \", Y = \" + mouseY;        text(text1, mouseX, mouseY);        */    }", "url": "https://raw.githubusercontent.com/MiladFarazian/Bound/master/JavaProcessing/src/MyFirstProject.java", "stars": "1", "class": {"name": "MyFirstProject", "extends": "PApplet", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(int port) {        Bored.env(new CompleteEnvironment());        Loader.start();        startListener();        Server server = new Server(port);        HandlerList handlers = new HandlerList();        handlers.addHandler(new URLHandler());        handlers.addHandler(new NotFoundHandler());        server.setStopTimeout(300000);        //\u8bbe\u7f6ehandler        server.setHandler(handlers);        //\u542f\u52a8\u670d\u52a1\u5668        server.start();        log.info(\"listening port {}, click http://127.0.0.1:{}\", port, port);        //\u963b\u585eJetty server\u7684\u7ebf\u7a0b\u6c60\uff0c\u76f4\u5230\u7ebf\u7a0b\u6c60\u505c\u6b62        server.join();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/server/BoredServer.java", "stars": "2", "class": {"name": "BoredServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startListener", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void startListener() {        //\u6bcf\u96941000\u6beb\u79d2\u626b\u63cf\u4e00\u6b21        FileAlterationMonitor monitor = new FileAlterationMonitor(1000L);        FileFilter filter = FileFilterUtils.and(new ConfigFilter());        FileAlterationObserver observer = new FileAlterationObserver(Bored.env().getRoot(), filter);        observer.addListener(new ConfigListener());        monitor.addObserver(observer);        try {            monitor.start();        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/server/BoredServer.java", "stars": "2", "class": {"name": "BoredServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Bored.env(new CompleteEnvironment());        startListener();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/server/BoredServer.java", "stars": "2", "class": {"name": "BoredServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "about_us", "snippet": "    public static about_us newInstance() {        about_us fragment = new about_us();        return fragment;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/about_us.java", "stars": "2", "class": {"name": "about_us", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/about_us.java", "stars": "2", "class": {"name": "about_us", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_about_us, container, false);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/about_us.java", "stars": "2", "class": {"name": "about_us", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onButtonPressed", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onButtonPressed(Uri uri) {    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/about_us.java", "stars": "2", "class": {"name": "about_us", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/about_us.java", "stars": "2", "class": {"name": "about_us", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/about_us.java", "stars": "2", "class": {"name": "about_us", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMapperType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getMapperType() {    return mapperType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderContext.java", "stars": "15", "class": {"name": "ProviderContext", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getMapperMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Method", "snippet": "  public Method getMapperMethod() {    return mapperMethod;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderContext.java", "stars": "15", "class": {"name": "ProviderContext", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDatabaseId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDatabaseId() {    return databaseId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/annotation/ProviderContext.java", "stars": "15", "class": {"name": "ProviderContext", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getUUID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUUID() {        return uuid;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileARadBase.java", "stars": "2", "class": {"name": "TileARadBase", "extends": "TileEveBase", "implements": ["IARadEffective"], "modifiers": ["public"]}}, {"method_name": "onARadNetworkChange", "params": ["ARadNetworkManager", "IARadEffective"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onARadNetworkChange(ARadNetworkManager.NetworkEventType type, IARadEffective toAdd) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileARadBase.java", "stars": "2", "class": {"name": "TileARadBase", "extends": "TileEveBase", "implements": ["IARadEffective"], "modifiers": ["public"]}}, {"method_name": "onRegister", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRegister() {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileARadBase.java", "stars": "2", "class": {"name": "TileARadBase", "extends": "TileEveBase", "implements": ["IARadEffective"], "modifiers": ["public"]}}, {"method_name": "onRemove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRemove() {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileARadBase.java", "stars": "2", "class": {"name": "TileARadBase", "extends": "TileEveBase", "implements": ["IARadEffective"], "modifiers": ["public"]}}, {"method_name": "readSyncNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readSyncNBT(NBTTagCompound compound) {        super.readSyncNBT(compound);        uuid = NBTHelper.getOrDefault(compound, TAG_UUID, UUID.randomUUID().toString());    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileARadBase.java", "stars": "2", "class": {"name": "TileARadBase", "extends": "TileEveBase", "implements": ["IARadEffective"], "modifiers": ["public"]}}, {"method_name": "writeSyncNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeSyncNBT(NBTTagCompound compound) {        super.writeSyncNBT(compound);        compound.setString(TAG_UUID, uuid == null || uuid.isEmpty() ? UUID.randomUUID().toString() : uuid);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileARadBase.java", "stars": "2", "class": {"name": "TileARadBase", "extends": "TileEveBase", "implements": ["IARadEffective"], "modifiers": ["public"]}}, {"method_name": "validate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void validate() {        super.validate();        this.readFromNBT(getUpdateTag());        if (!world.isRemote) {            ARadNetworkManager.instance.register(this.uuid, this);        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileARadBase.java", "stars": "2", "class": {"name": "TileARadBase", "extends": "TileEveBase", "implements": ["IARadEffective"], "modifiers": ["public"]}}, {"method_name": "invalidate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void invalidate() {        super.invalidate();        if (!world.isRemote)            ARadNetworkManager.instance.remove(this.uuid);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileARadBase.java", "stars": "2", "class": {"name": "TileARadBase", "extends": "TileEveBase", "implements": ["IARadEffective"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        this.task = new Thread(this::doInstallThread);        this.task.start();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstallPackageFilePath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getInstallPackageFilePath() {        FileUtil.makeFilePath(modeService.getInstallPath(), false);        return modeService.getInstallPath() + INSTALL_PACKAGE_FILE_NAME;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMasterServer", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMasterServer(String server) {        this.masterServer = server;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doInstallThread", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doInstallThread() {        this.initConfigFile = FileUtil.reviseDir(this.initConfigFile);        // http \u670d\u52a1\u7aef\u53e3\u6dfb\u52a0\u9632\u706b\u5899        environmentService.addPortIntoFirewall(this.httpServerPort);        // \u4e3b\u8282\u70b9        if (this.globalConfig.getMaster() == 1) {            File configFile = new File(this.initConfigFile);            if (!configFile.exists() || !configFile.isFile()) {                // log.error(String.format(\"initconfig.propertise(\u4f20\u5165\u7684\u8def\u5f84\uff1a%s)\u6587\u4ef6\u4e0d\u5b58\u5728, \u8bf7\u6309\u4efb\u610f\u952e\u7ed3\u675f\uff0c\u91cd\u65b0\u8fd0\u884c\", this.initConfigFile));                log.error(String.format(\"initconfig.propertise(Incoming path:%s) the file does not exist, please press any key to end and re-run\", this.initConfigFile));                this.finished.set(true);                return;            }            try {                this.configEntity = initConfigService.parseConfigFile(this.initConfigFile);                if (configEntity == null) {                    // log.error(\"\u89e3\u6790\u521d\u59cb\u5316\u914d\u7f6e\u6587\u4ef6\u5931\u8d25\");                    log.error(\"Failed to parse the initialization configuration file\");                    this.doEnd();                    return;                }                //\u6821\u9a8c\u914d\u7f6e\u4fe1\u606f\u683c\u5f0f                if (!initConfigService.isCorrectConfig(configEntity)) {                    this.doEnd();                    return;                }                if (this.configEntity.getOrdererHostConfig().size() < 3) {                    // log.error(\"orderer \u8282\u70b9\u4e0d\u80fd\u5c11\u4e8e3\u4e2a\uff0c\u8bf7\u91cd\u65b0\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff0c\u7ed3\u675f\u5b89\u88c5\");                    log.error(\"There must be at least 3 orderer nodes, please edit the configuration file again to end the installation\");                    this.doEnd();                    return;                }                if (this.configEntity.getPeerHostConfig().size() < 2) {                    // log.error(\"peer \u8282\u70b9\u4e0d\u80fd\u5c11\u4e8e2\u4e2a\uff0c\u8bf7\u91cd\u65b0\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff0c\u7ed3\u675f\u5b89\u88c5\");                    log.error(\"There must be at least two peer nodes. please edit the configuration file again to end the installation\");                    this.doEnd();                    return;                }                InstallMode installModeAction = null;                if (\"newInstall\".equalsIgnoreCase(this.installMode)) {                    installModeAction = (InstallMode) SpringUtil.getBean(\"newInstallBiz\");                } else {                    if (checkModifyInstall()) {                        installModeAction = (InstallMode) SpringUtil.getBean(\"updateNetworkBiz\");                    } else {                        // System.out.println(\"\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6ca1\u6709\u627e\u5230\u9700\u8981\u66f4\u65b0\u7684\u4fe1\u606f\");                        System.out.println(\"No information needed to be updated in the configuration file\");                    }                }                if (installModeAction != null) {                    installModeAction.run(configEntity);                    this.doEnd();                }            } catch (Exception e) {                // log.error(\"\u5b89\u88c5\u8fc7\u7a0b\u53d1\u751f\u5f02\u5e38\", e);                log.error(\"An exception occurred during the installation process\", e);                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkModifyInstall", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean checkModifyInstall() {        try {            return !this.checkPointDb.nodesTableEmpty();        } catch (SQLException e) {            // log.error(\"\u67e5\u8be2\u672c\u5730\u6570\u636e\u5e93\u5931\u8d25\", e);            log.error(\"Fail to query the local database\", e);            e.printStackTrace();        }        return false;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "slaveInstall", "params": ["RoleEnum", "List<String>", "Map<String,String>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void slaveInstall(RoleEnum role, List<String> ports, Map<String, String> hosts, String roleFolderName) {        new Thread(() -> {            // log.info(String.format(\"\u4ece\u8282\u70b9\u5f00\u59cb\u8fdb\u884c\u89d2\u8272 %s \u7684\u5b89\u88c5\", role.name()));            log.info(String.format(\"Begin to install the role %s in the slave node\", role.name()));            if (this.startInstall(role, ports, hosts, roleFolderName)) {                InstallResult result = new InstallResult();                result.setRole(role);                result.setSuccess(true);                try {                    do {                        String res = httpClient.postJson(this.masterServer + \"/v1/install/finished\", JSONObject.toJSONString(result), false);                        if (!StringUtils.isEmpty(res)) {                            HttpInstallResponse response = JSONObject.parseObject(res, HttpInstallResponse.class);                            if (ResponseCode.SUCCESS.getCode().equals(response.getCode())) {                                // log.info(String.format(\"\u5411\u4e3b\u8282\u70b9\u62a5\u544a\u5b89\u88c5 %s \u72b6\u6001\u6210\u529f\", role.name()));                                log.info(String.format(\"Report install1 %s success to the master node\", role.name()));                                break;                            }                        }                        // log.info(String.format(\"\u5411\u4e3b\u8282\u70b9\u62a5\u544a\u5b89\u88c5 %s \u72b6\u6001\u5931\u8d25\uff0c\u7a0d\u540e\u91cd\u8bd5...\", role.name()));                        log.info(String.format(\"Fail to report the status of %s to the master node, try again later ...\", role.name()));                        try {                            Thread.sleep(5000);                        } catch (Exception e) {                            e.printStackTrace();                        }                    } while (true);                } catch (Exception e) {                    // log.error(\"\u5411\u4e3b\u670d\u52a1\u5668\u53d1\u9001\u5b89\u88c5\u5b8c\u6210\u72b6\u6001\u5f02\u5e38\", e);                    log.error(\"Exception occur when send  status to the main server after install complete\", e);                    e.printStackTrace();                }            }        }).start();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startInstall", "params": ["RoleEnum", "List<String>", "Map<String,String>", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean startInstall(RoleEnum role, List<String> rolePorts, Map<String, String> hosts, String roleFolderName) {        return installService.startRole(role, rolePorts, hosts, roleFolderName);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isFinished", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFinished() {        return this.finished.get();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "installPackageReady", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void installPackageReady() {        String packageFilePath = modeService.getInstallPath() + INSTALL_PACKAGE_FILE_NAME;        FileUtil.tarGzDecompress(packageFilePath, modeService.getInstallPath(), false);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateOrderers", "params": ["UpdateCmd"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateOrderers(UpdateCmd updateCmd) {        for (String orderName : updateCmd.getPeerHostConfig().keySet()) {            String ipPort = updateCmd.getPeerHostConfig().get(orderName);            String ip = ipPort.substring(0, ipPort.lastIndexOf(\":\"));            if (\"127.0.0.1\".equals(ip)) {                ip = NetUtil.getMyNormalIP();            }            updateOrderConfig(orderName, ip, updateCmd.getCurrentHost());        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateOrderConfig", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateOrderConfig(String newOrderName, String ip, String currentOrdererName) {        try {            ProcessUtil.Result result = ProcessUtil.execCmd(\"docker exec \" + currentOrdererName + \" bash updateOrdererHost.sh \" + newOrderName + \" \" + ip, null, modeService.getInstallPath());            if (result.getCode() == 0) {                // log.info(String.format(\"\u66f4\u65b0 docker \u5bb9\u5668 %s \u7684 Hosts \u6210\u529f: \", currentOrdererName));                log.info(String.format(\"Successfully updated Hosts of docker container %s: \", currentOrdererName));            } else {                // log.error(String.format(\"\u66f4\u65b0 docker \u5bb9\u5668 %s \u7684 Hosts \u5931\u8d25: \" + result.getData(), currentOrdererName));                log.error(String.format(\"Failed to update Hosts of docker container %s: \" + result.getData(), currentOrdererName));            }        } catch (Exception e) {            // log.error(String.format(\"\u66f4\u65b0 docker \u5bb9\u5668 %s \u7684 HostsPath \u5f02\u5e38\", currentOrdererName), e);            log.error(String.format(\"Exception occur when update HostsPath  of docker container %s\", currentOrdererName), e);            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleUpdate", "params": ["UpdateCmd", "Part"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleUpdate(UpdateCmd cmd, Part part) {        try {            if (cmd.getRole() == RoleEnum.ORDER) {                String filePath = \"/var/run/updateOrdererHost.sh\";                File updateHostFile = new File(filePath);                if (updateHostFile.exists()) {                    updateHostFile.delete();                }                part.write(filePath);                this.updateOrderers(cmd);            }            this.doEnd();        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void doEnd() {        this.finished.set(true);        // System.out.println(\"*****\u5b89\u88c5\u670d\u52a1\u5df2\u5b8c\u6210*****\");        System.out.println(\"*****Installation service is complete*****\");    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InstallBiz.java", "stars": "7", "class": {"name": "InstallBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java", "stars": "15", "class": {"name": "PerpetualCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSize() {    return cache.size();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java", "stars": "15", "class": {"name": "PerpetualCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "putObject", "params": ["Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putObject(Object key, Object value) {    cache.put(key, value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java", "stars": "15", "class": {"name": "PerpetualCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getObject(Object key) {    return cache.get(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java", "stars": "15", "class": {"name": "PerpetualCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "removeObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object removeObject(Object key) {    return cache.remove(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java", "stars": "15", "class": {"name": "PerpetualCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clear() {    cache.clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java", "stars": "15", "class": {"name": "PerpetualCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (getId() == null) {      throw new CacheException(\"Cache instances require an ID.\");    }    if (this == o) {      return true;    }    if (!(o instanceof Cache)) {      return false;    }    Cache otherCache = (Cache) o;    return getId().equals(otherCache.getId());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java", "stars": "15", "class": {"name": "PerpetualCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    if (getId() == null) {      throw new CacheException(\"Cache instances require an ID.\");    }    return getId().hashCode();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java", "stars": "15", "class": {"name": "PerpetualCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, INSTANT, null);    verify(ps).setString(1, INSTANT.toString());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearMonthTypeHandlerTest.java", "stars": "15", "class": {"name": "YearMonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getString(\"column\")).thenReturn(INSTANT.toString());    assertEquals(INSTANT, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearMonthTypeHandlerTest.java", "stars": "15", "class": {"name": "YearMonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearMonthTypeHandlerTest.java", "stars": "15", "class": {"name": "YearMonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getString(1)).thenReturn(INSTANT.toString());    assertEquals(INSTANT, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearMonthTypeHandlerTest.java", "stars": "15", "class": {"name": "YearMonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearMonthTypeHandlerTest.java", "stars": "15", "class": {"name": "YearMonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getString(1)).thenReturn(INSTANT.toString());    assertEquals(INSTANT, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearMonthTypeHandlerTest.java", "stars": "15", "class": {"name": "YearMonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearMonthTypeHandlerTest.java", "stars": "15", "class": {"name": "YearMonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onReceive(Context context, Intent intent) {        int resultCode = this.getResultCode();        boolean successfullySent = resultCode == Activity.RESULT_OK;        //That boolean up there indicates the status of the message        MainActivity.getAppContext().unregisterReceiver(this);        //Notice how I get the app context again here and unregister this broadcast        //receiver to clear it from the system since it won't be used again    }", "url": "https://raw.githubusercontent.com/zhackerx/upi_payment/master/app/src/main/java/com/millionq/upi_payment/MessageSentListener.java", "stars": "1", "class": {"name": "MessageSentListener", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/extend/ExtendConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/extend/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extend/ExtendTest.java", "stars": "15", "class": {"name": "ExtendTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testExtend", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testExtend() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      ExtendMapper mapper = sqlSession.getMapper(ExtendMapper.class);      Child answer = mapper.selectChild();      assertEquals(answer.getMyProperty(), \"last\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extend/ExtendTest.java", "stars": "15", "class": {"name": "ExtendTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setDurationMillis", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDurationMillis(long durationMillis) {        mValues[TimeComponents.HOURS.getPosition()] = TimeUnit.MILLISECONDS.toHours(durationMillis);        durationMillis %= TimeUnit.HOURS.toMillis(1);        mValues[TimeComponents.MINUTES.getPosition()] =                TimeUnit.MILLISECONDS.toMinutes(durationMillis);        durationMillis %= TimeUnit.MINUTES.toMillis(1);        mValues[TimeComponents.SECONDS.getPosition()] =                TimeUnit.MILLISECONDS.toSeconds(durationMillis);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerScrollAdapter.java", "stars": "74", "class": {"name": "SetTimerScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDurationMillis", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getDurationMillis() {        return TimeUnit.HOURS.toMillis(mValues[TimeComponents.HOURS.getPosition()])                + TimeUnit.MINUTES.toMillis(mValues[TimeComponents.MINUTES.getPosition()])                + TimeUnit.SECONDS.toMillis(mValues[TimeComponents.SECONDS.getPosition()]);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerScrollAdapter.java", "stars": "74", "class": {"name": "SetTimerScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimeComponent", "params": ["TimeComponents", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimeComponent(TimeComponents component, int value) {        mValues[component.getPosition()] = value;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerScrollAdapter.java", "stars": "74", "class": {"name": "SetTimerScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimeComponent", "params": ["TimeComponents"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getTimeComponent(TimeComponents component) {        return mValues[component.getPosition()];    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerScrollAdapter.java", "stars": "74", "class": {"name": "SetTimerScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return mValues.length;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerScrollAdapter.java", "stars": "74", "class": {"name": "SetTimerScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getItem(int position) {        if (position >= 0 && position < mValues.length) {            return TimeComponents.values()[position];        }        return null;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerScrollAdapter.java", "stars": "74", "class": {"name": "SetTimerScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        if (convertView == null) {            convertView = LayoutInflater.from(mContext).inflate(R.layout.card_timer, parent);        }        final TextView[] views = new TextView[] {            (TextView) convertView.findViewById(R.id.hours),            (TextView) convertView.findViewById(R.id.minutes),            (TextView) convertView.findViewById(R.id.seconds)        };        final TextView tipView = (TextView) convertView.findViewById(R.id.tip);        final String tipLabel = mContext.getResources().getString(                ((TimeComponents) getItem(position)).getLabelResourceId());        tipView.setText(tipLabel);        for (int i = 0; i < 3; ++i) {            views[i].setText(String.format(\"%02d\", mValues[i]));            views[i].setTextColor(mContext.getResources().getColor(R.color.gray));        }        views[position].setTextColor(mContext.getResources().getColor(R.color.white));        return setItemOnCard(this, convertView);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerScrollAdapter.java", "stars": "74", "class": {"name": "SetTimerScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "findIdPosition", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int findIdPosition(Object id) {        if (id instanceof TimeComponents) {            TimeComponents component = (TimeComponents) id;            return component.getPosition();        }        return AdapterView.INVALID_POSITION;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerScrollAdapter.java", "stars": "74", "class": {"name": "SetTimerScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "findItemPosition", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int findItemPosition(Object item) {        return findIdPosition(item);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerScrollAdapter.java", "stars": "74", "class": {"name": "SetTimerScrollAdapter", "extends": "CardScrollAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "sortColors", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sortColors(int[] nums) {        int[] colors = new int[3];        for(int i = 0; i < nums.length; i ++) {            colors[nums[i]] ++;        }        int k = 0;        while(colors[0] > 0) {            nums[k ++] = 0;            colors[0] --;        }        while(colors[1] > 0) {            nums[k ++] = 1;            colors[1] --;        }        while(colors[2] > 0) {            nums[k ++] = 2;            colors[2] --;        }    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/SortColors.java", "stars": "1", "class": {"name": "SortColors", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getId() {        return id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/ResponseItem.java", "stars": "4", "class": {"name": "ResponseItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(String id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/ResponseItem.java", "stars": "4", "class": {"name": "ResponseItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/ResponseItem.java", "stars": "4", "class": {"name": "ResponseItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/ResponseItem.java", "stars": "4", "class": {"name": "ResponseItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAzkaban", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AzkabanWebServer", "snippet": "  public AzkabanWebServer getAzkaban() {    return AzkabanWebServer.getInstance();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/restli/java/azkaban/restli/ProjectManagerResource.java", "stars": "18", "class": {"name": "ProjectManagerResource", "extends": "ResourceContextHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "deploy", "params": ["String", "String", "String"], "throws": ["ProjectManagerException", "RestLiServiceException", "UserManagerException", "ServletException", "IOException", "SchedulerException", "ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String deploy(@ActionParam(\"sessionId\") final String sessionId,      @ActionParam(\"projectName\") final String projectName,      @ActionParam(\"packageUrl\") final String packageUrl)      throws ProjectManagerException, RestLiServiceException, UserManagerException,      ServletException, IOException, SchedulerException, ExecutorManagerException {    logger.info(\"Deploy called. {projectName: \" + projectName + \", packageUrl:\" + packageUrl + \"}\");    final String ip = ResourceUtils.getRealClientIpAddr(this.getContext());    final User user = ResourceUtils.getUserFromSessionId(sessionId);    final ProjectManager projectManager = getAzkaban().getProjectManager();    final Project project = projectManager.getProject(projectName);    final FlowTriggerScheduler scheduler = getAzkaban().getScheduler();    final boolean enableQuartz = getAzkaban().getServerProps().getBoolean(ConfigurationKeys        .ENABLE_QUARTZ, false);    logger.info(\"Deploy: reference of project \" + projectName + \" is \" + System.identityHashCode        (project));    if (project == null) {      final String errorMsg = \"Project '\" + projectName + \"' not found.\";      throw new RestLiServiceException(HttpStatus.S_400_BAD_REQUEST, errorMsg);    }    if (!project.isActive()) {      final String errorMsg =          \"Installation Failed. Project '\" + projectName + \"' was already removed.\";      throw new RestLiServiceException(HttpStatus.S_410_GONE, errorMsg);    }    if (!ResourceUtils.hasPermission(project, user, Permission.Type.WRITE)) {      final String errorMsg =          \"User \" + user.getUserId()              + \" has no permission to write to project \" + project.getName();      logger.error(errorMsg);      throw new RestLiServiceException(HttpStatus.S_400_BAD_REQUEST, errorMsg);    }    logger.info(\"Target package URL is \" + packageUrl);    URL url = null;    try {      url = new URL(packageUrl);    } catch (final MalformedURLException e) {      final String errorMsg = \"URL \" + packageUrl + \" is malformed.\";      logger.error(errorMsg, e);      throw new RestLiServiceException(HttpStatus.S_400_BAD_REQUEST, errorMsg);    }    final String filename = getFileName(url.getFile());    final File tempDir = Utils.createTempDir();    final File archiveFile = new File(tempDir, filename);    try {      // Since zip files can be large, don't specify an explicit read or      // connection      // timeout. This will cause the call to block until the download is      // complete.      logger.info(\"Downloading package from \" + packageUrl);      FileUtils.copyURLToFile(url, archiveFile);      logger.info(\"Downloaded to \" + archiveFile.toString());    } catch (final IOException e) {      final String errorMsg =          \"Download of URL \" + packageUrl + \" to \" + archiveFile.toString()              + \" failed\";      logger.error(errorMsg, e);      if (tempDir.exists()) {        FileUtils.deleteDirectory(tempDir);      }      throw new RestLiServiceException(HttpStatus.S_400_BAD_REQUEST, errorMsg, e);    }    try {      if (enableQuartz) {        //todo chengren311: should maintain atomicity,        // e.g, if uploadProject fails, associated schedule shouldn't be added.        scheduler.unscheduleAll(project);      }      // Check if project upload runs into any errors, such as the file      // having blacklisted jars      final Props props = new Props();      final Map<String, ValidationReport> reports = projectManager          .uploadProject(project, archiveFile, \"zip\", user, props);      if (enableQuartz) {        scheduler.scheduleAll(project, user.getUserId());      }      checkReports(reports);      logger.info(\"Deploy: project \" + projectName + \" version is \" + project.getVersion()          + \", reference is \" + System.identityHashCode(project));      return Integer.toString(project.getVersion());    } catch (final ProjectManagerException | SchedulerException | ExecutorManagerException e) {      final String errorMsg = \"Upload of project \" + project + \" from \" + archiveFile + \" failed\";      logger.error(errorMsg, e);      throw e;    } finally {      if (tempDir.exists()) {        FileUtils.deleteDirectory(tempDir);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/restli/java/azkaban/restli/ProjectManagerResource.java", "stars": "18", "class": {"name": "ProjectManagerResource", "extends": "ResourceContextHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkReports", "params": ["Map<String,ValidationReport>"], "throws": ["RestLiServiceException"], "modifiers": [], "return_type": "void", "snippet": "  void checkReports(final Map<String, ValidationReport> reports) throws RestLiServiceException {    final StringBuffer errorMsgs = new StringBuffer();    for (final Map.Entry<String, ValidationReport> reportEntry : reports.entrySet()) {      final ValidationReport report = reportEntry.getValue();      if (!report.getErrorMsgs().isEmpty()) {        errorMsgs.append(\"\u6821\u9a8c \" + reportEntry.getKey() + \" \u62a5\u544a\u9519\u8bef: \");        for (final String msg : report.getErrorMsgs()) {          errorMsgs.append(msg + System.getProperty(\"line.separator\"));        }      }    }    if (errorMsgs.length() > 0) {      throw new RestLiServiceException(HttpStatus.S_400_BAD_REQUEST, errorMsgs.toString());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/restli/java/azkaban/restli/ProjectManagerResource.java", "stars": "18", "class": {"name": "ProjectManagerResource", "extends": "ResourceContextHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileName", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getFileName(final String file) {    return file.substring(file.lastIndexOf(\"/\") + 1);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/restli/java/azkaban/restli/ProjectManagerResource.java", "stars": "18", "class": {"name": "ProjectManagerResource", "extends": "ResourceContextHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getProjectId() {    return this.projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getVersion() {    return this.version;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUploadTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getUploadTime() {    return this.uploadTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFileType() {    return this.fileType;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFileName() {    return this.fileName;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMd5Hash", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "  public byte[] getMd5Hash() {    return this.md5Hash;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocalFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File getLocalFile() {    return this.localFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLocalFile", "params": ["File"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void setLocalFile(final File localFile) {    this.localFile = localFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteLocalFile", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void deleteLocalFile() {    if (this.localFile != null) {      this.localFile.delete();      this.localFile = null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUploader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUploader() {    return this.uploader;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumChunks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumChunks() {    return this.numChunks;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getResourceId() {    return this.resourceId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectFileHandler.java", "stars": "18", "class": {"name": "ProjectFileHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": ["WxMpXmlMessage"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String process(WxMpXmlMessage inMessage) throws Exception {        String result = \"\u53d1\u9001\u6210\u529f\";        String content = inMessage.getContent();        // taoiot:get_token        if (StringUtils.startsWithIgnoreCase(content, \"taoiot\")) {            // \u83b7\u53d6token            if (\"taoiot:get_token\".equals(content)) {                return \"userId: \" + SecurityUtil.getUser().getId() + \", token: \" + SecurityUtil.getUser().getToken();            }        }        // \u683c\u5f0f: mqtt:${topic}:${context}        if (StringUtils.startsWithIgnoreCase(content, \"mqtt\")) {            mqttProcess(content);        }        return result;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/mp/handler/MpTextHandler.java", "stars": "6", "class": {"name": "MpTextHandler", "extends": null, "implements": ["MpHandler"], "modifiers": ["public"]}}, {"method_name": "mqttProcess", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void mqttProcess(String content) {        Integer userId = SecurityUtil.getUserId();        String[] split = content.split(\":\");        if (split.length > 2) {            String topic = split[1];            if (\"/\".startsWith(topic)) {                topic = userId + topic;            } else {                topic = userId + \"/\" + topic;            }            String msg = content.substring(StringUtils.ordinalIndexOf(content, \":\", 2) + 1);            MqttMessage mqttMessage = MqttMessageFactory.newMessage(                    new MqttFixedHeader(MqttMessageType.PUBLISH, false, MqttQoS.AT_MOST_ONCE, false, 0),                    new MqttPublishVariableHeader(topic, 0),                    Unpooled.buffer().writeBytes(msg.getBytes()));            ChannelGroup channelGroup = NettyMqttHandler.TOPICS.get(topic);            if (channelGroup != null) {                channelGroup.writeAndFlush(mqttMessage);            }            log.debug(\"PUBLISH - topic: {}, Qos: {}, channels: {}\",                    topic,                    MqttQoS.AT_MOST_ONCE,                    channelGroup == null ? 0 : channelGroup.size());        }    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/mp/handler/MpTextHandler.java", "stars": "6", "class": {"name": "MpTextHandler", "extends": null, "implements": ["MpHandler"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run() {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUDigitsOfPi.java", "stars": "2", "class": {"name": "CPUDigitsOfPi", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["Object"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(Object... params) throws IOException {\t\t// TODO Auto-generated method stub\t\t\t\tint option = (Integer) params[0];\t\t\t\tswitch (option) {\t\tcase 0:\t\t\tComputePiSeries((int)params[1]);\t\t\tbreak;\t\tcase 1:\t\t\tPiDigitsBigDecimal( (int) params[1] );\t\t\tbreak;\t\tdefault:  \t\t\tthrow new IllegalArgumentException(\"Option is invalid, must be between 0-1\");\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUDigitsOfPi.java", "stars": "2", "class": {"name": "CPUDigitsOfPi", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "ComputePiSeries", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void ComputePiSeries( int n) {\t\t\t\tint odd = 1;\t\tdouble pi = 0.0;\t\tdouble current = 0.0;\t\t\t\tfor( int i=0; i<n; i++)\t\t{\t\t\tcurrent = 4.0/odd;\t\t\tif( i%2 == 0 )\t\t\t\tpi += current;\t\t\telse pi -= current;\t\t\t\t\t\todd += 2;\t\t}\t\t\t\tSystem.out.println(pi);\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUDigitsOfPi.java", "stars": "2", "class": {"name": "CPUDigitsOfPi", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "PiDigitsBigDecimal", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void PiDigitsBigDecimal(int n){\t\t\t\tBigDecimal odd = new BigDecimal(\"1.0\");\t\tBigDecimal pi = new BigDecimal(\"0.0\") ;\t\tBigDecimal current = new BigDecimal(\"0.0\");\t\tBigDecimal two = new BigDecimal(\"2.0\");\t\tMathContext mc = new MathContext(20, RoundingMode.FLOOR);\t\t\t\t\t\tfor( int i=0; i<n; i++)\t\t{\t\t\tcurrent = new BigDecimal( \"4.0\" );\t\t\tcurrent = current.divide(odd, mc);\t\t\t//System.out.println(current+\"---\"+odd);\t\t\tif( i%2 == 0 )\t\t\t\tpi = pi.add(current);\t\t\telse pi = pi.subtract(current);\t\t\t\t\t\todd = odd.add( two );\t\t}\t\t\t\tSystem.out.println(pi);\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUDigitsOfPi.java", "stars": "2", "class": {"name": "CPUDigitsOfPi", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initialize(Object... params) {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUDigitsOfPi.java", "stars": "2", "class": {"name": "CPUDigitsOfPi", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "clean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clean() {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUDigitsOfPi.java", "stars": "2", "class": {"name": "CPUDigitsOfPi", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void cancel() {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUDigitsOfPi.java", "stars": "2", "class": {"name": "CPUDigitsOfPi", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "warmUp", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void warmUp() throws IOException {\t\t// TODO Auto-generated method stub\t\t\t\tfor(int i=0; i<5; ++i) {\t\t\trun(1,5000000);\t\t\trun(0,5000000);\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUDigitsOfPi.java", "stars": "2", "class": {"name": "CPUDigitsOfPi", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getResult() {\t\t// TODO Auto-generated method stub\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUDigitsOfPi.java", "stars": "2", "class": {"name": "CPUDigitsOfPi", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "move", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void move() {\t\tSystem.out.println(\"\u00b6\u00af\u00ce\u00ef\u00d4\u00da\u00d2\u00c6\u00b6\u00af\u00a3\u00a1\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/duotai/Animal.java", "stars": "2", "class": {"name": "Animal", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //1.\u521b\u5efaFileInputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8bfb\u53d6\u7684\u6570\u636e\u6e90        FileInputStream fis = new FileInputStream(\"09_IOAndProperties\\\\c.txt\");        //2.\u4f7f\u7528FileInputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read,\u8bfb\u53d6\u6587\u4ef6        //int read()\u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u4e00\u4e2a\u5b57\u8282\u5e76\u8fd4\u56de,\u8bfb\u53d6\u5230\u6587\u4ef6\u7684\u672b\u5c3e\u8fd4\u56de-1        /*int len = fis.read();        System.out.println(len);//97 a        len = fis.read();        System.out.println(len);// 98 b        len = fis.read();        System.out.println(len);//99 c        len = fis.read();        System.out.println(len);//-1        len = fis.read();        System.out.println(len);//-1*/        /*            \u53d1\u73b0\u4ee5\u4e0a\u8bfb\u53d6\u6587\u4ef6\u662f\u4e00\u4e2a\u91cd\u590d\u7684\u8fc7\u7a0b,\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u4f18\u5316            \u4e0d\u77e5\u9053\u6587\u4ef6\u4e2d\u6709\u591a\u5c11\u5b57\u8282,\u4f7f\u7528while\u5faa\u73af            while\u5faa\u73af\u7ed3\u675f\u6761\u4ef6,\u8bfb\u53d6\u5230-1\u7684\u65f6\u5019\u7ed3\u675f            \u5e03\u5c14\u8868\u8fbe\u5f0f(len = fis.read())!=-1                1.fis.read():\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282                2.len = fis.read():\u628a\u8bfb\u53d6\u5230\u7684\u5b57\u8282\u8d4b\u503c\u7ed9\u53d8\u91cflen                3.(len = fis.read())!=-1:\u5224\u65ad\u53d8\u91cflen\u662f\u5426\u4e0d\u7b49\u4e8e-1         */        int len = 0; //\u8bb0\u5f55\u8bfb\u53d6\u5230\u7684\u5b57\u8282        while((len = fis.read())!=-1){            System.out.print(len);//abc        }        //3.\u91ca\u653e\u8d44\u6e90        fis.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/demo02/InputStream/Demo01InputStream.java", "stars": "2", "class": {"name": "Demo01InputStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.activity_ptr_expandable_list);\t\tmPullRefreshListView = (PullToRefreshExpandableListView) findViewById(R.id.pull_refresh_expandable_list);\t\t// Set a listener to be invoked when the list should be refreshed.\t\tmPullRefreshListView.setOnRefreshListener(new OnRefreshListener<ExpandableListView>() {\t\t\t@Override\t\t\tpublic void onRefresh(PullToRefreshBase<ExpandableListView> refreshView) {\t\t\t\t// Do work to refresh the list here.\t\t\t\tnew GetDataTask().execute();\t\t\t}\t\t});\t\tfor (String group : mGroupStrings) {\t\t\tMap<String, String> groupMap1 = new HashMap<String, String>();\t\t\tgroupData.add(groupMap1);\t\t\tgroupMap1.put(KEY, group);\t\t\tList<Map<String, String>> childList = new ArrayList<Map<String, String>>();\t\t\tfor (String string : mChildStrings) {\t\t\t\tMap<String, String> childMap = new HashMap<String, String>();\t\t\t\tchildList.add(childMap);\t\t\t\tchildMap.put(KEY, string);\t\t\t}\t\t\tchildData.add(childList);\t\t}\t\tmAdapter = new SimpleExpandableListAdapter(this, groupData, android.R.layout.simple_expandable_list_item_1,\t\t\t\tnew String[] { KEY }, new int[] { android.R.id.text1 }, childData,\t\t\t\tandroid.R.layout.simple_expandable_list_item_2, new String[] { KEY }, new int[] { android.R.id.text1 });\t\tsetListAdapter(mAdapter);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshExpandableListActivity.java", "stars": "74", "class": {"name": "PullToRefreshExpandableListActivity", "extends": "ExpandableListActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\t\tprotected String[] doInBackground(Void... params) {\t\t\t// Simulates a background job.\t\t\ttry {\t\t\t\tThread.sleep(2000);\t\t\t} catch (InterruptedException e) {\t\t\t}\t\t\treturn mChildStrings;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshExpandableListActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPostExecute(String[] result) {\t\t\tMap<String, String> newMap = new HashMap<String, String>();\t\t\tnewMap.put(KEY, \"Added after refresh...\");\t\t\tgroupData.add(newMap);\t\t\tList<Map<String, String>> childList = new ArrayList<Map<String, String>>();\t\t\tfor (String string : mChildStrings) {\t\t\t\tMap<String, String> childMap = new HashMap<String, String>();\t\t\t\tchildMap.put(KEY, string);\t\t\t\tchildList.add(childMap);\t\t\t}\t\t\tchildData.add(childList);\t\t\tmAdapter.notifyDataSetChanged();\t\t\t// Call onRefreshComplete when the list has been refreshed.\t\t\tmPullRefreshListView.onRefreshComplete();\t\t\tsuper.onPostExecute(result);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshExpandableListActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "initialize", "params": ["URL", "ResourceBundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(URL location, ResourceBundle resources) {    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/UserInterface/ConfirmPageController.java", "stars": "2", "class": {"name": "ConfirmPageController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "confirm", "params": ["ActionEvent"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void confirm(ActionEvent event) {        new Thread(new ClientFileUploader(mainWindowController, client, file, isPublic, list)).start();        final Node source = (Node) event.getSource();        final Stage currentStage = (Stage) source.getScene().getWindow();        currentStage.close();    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/UserInterface/ConfirmPageController.java", "stars": "2", "class": {"name": "ConfirmPageController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "discard", "params": ["ActionEvent"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void discard(ActionEvent event) {        final Node source = (Node) event.getSource();        final Stage currentStage = (Stage) source.getScene().getWindow();        String discard = String.format(\"Sending %s canceled!\", file.getName());        //And show a message from client which contains cancellation message        mainWindowController.showPrivateMessage(new Message(                \"Client\",                new String[]{client.getUserName()},                discard,                discard.length(),                PRIVATE        ));        currentStage.close();    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/UserInterface/ConfirmPageController.java", "stars": "2", "class": {"name": "ConfirmPageController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "exit", "params": ["WindowEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void exit(WindowEvent windowEvent) {        discard(new ActionEvent(discardButton, windowEvent.getTarget()));    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/UserInterface/ConfirmPageController.java", "stars": "2", "class": {"name": "ConfirmPageController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": ["MainWindowController", "Client", "File", "boolean", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUp(MainWindowController mainWindowController, Client client, File file,                      boolean isPublic, String... receivers) {        this.mainWindowController = mainWindowController;        this.client = client;        this.file = file;        this.fileName.setText(file.getName());        this.fileSize.setText(handlingFileSize(file.length()));        this.isPublic = isPublic;        this.sendAs.setText((isPublic) ? \"Public\" : \"Private\");        if (!isPublic) {            this.receivers.setText(Utils.convertListToString(receivers));        } else            this.receivers.setText(\"Public\");        this.list = receivers;        if (!isPublic) {            if (receivers.length < 1)                confirmButton.setDisable(true);        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/UserInterface/ConfirmPageController.java", "stars": "2", "class": {"name": "ConfirmPageController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "handlingFileSize", "params": ["long"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String handlingFileSize(long fileSize) {        if (fileSize < KILO) {            unit.setText(\"B\");            return String.valueOf(fileSize);        } else if (fileSize < MEGA) {            unit.setText(\"KB\");            return String.format(\"%.2f\", (float) fileSize / KILO);        } else if (fileSize < GIGA) {            unit.setText(\"MB\");            return String.format(\"%.2f\", (float) fileSize / MEGA);        } else {            unit.setText(\"GB\");            return String.format(\"%.2f\", (float) fileSize / GIGA);        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/UserInterface/ConfirmPageController.java", "stars": "2", "class": {"name": "ConfirmPageController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "PmsProductExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdIsNull() {            addCriterion(\"brand_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdIsNotNull() {            addCriterion(\"brand_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdEqualTo(Long value) {            addCriterion(\"brand_id =\", value, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdNotEqualTo(Long value) {            addCriterion(\"brand_id <>\", value, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdGreaterThan(Long value) {            addCriterion(\"brand_id >\", value, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"brand_id >=\", value, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdLessThan(Long value) {            addCriterion(\"brand_id <\", value, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdLessThanOrEqualTo(Long value) {            addCriterion(\"brand_id <=\", value, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdIn(List<Long> values) {            addCriterion(\"brand_id in\", values, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdNotIn(List<Long> values) {            addCriterion(\"brand_id not in\", values, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdBetween(Long value1, Long value2) {            addCriterion(\"brand_id between\", value1, value2, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandIdNotBetween(Long value1, Long value2) {            addCriterion(\"brand_id not between\", value1, value2, \"brandId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdIsNull() {            addCriterion(\"product_category_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdIsNotNull() {            addCriterion(\"product_category_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdEqualTo(Long value) {            addCriterion(\"product_category_id =\", value, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdNotEqualTo(Long value) {            addCriterion(\"product_category_id <>\", value, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdGreaterThan(Long value) {            addCriterion(\"product_category_id >\", value, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"product_category_id >=\", value, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdLessThan(Long value) {            addCriterion(\"product_category_id <\", value, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdLessThanOrEqualTo(Long value) {            addCriterion(\"product_category_id <=\", value, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdIn(List<Long> values) {            addCriterion(\"product_category_id in\", values, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdNotIn(List<Long> values) {            addCriterion(\"product_category_id not in\", values, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdBetween(Long value1, Long value2) {            addCriterion(\"product_category_id between\", value1, value2, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryIdNotBetween(Long value1, Long value2) {            addCriterion(\"product_category_id not between\", value1, value2, \"productCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdIsNull() {            addCriterion(\"feight_template_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdIsNotNull() {            addCriterion(\"feight_template_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdEqualTo(Long value) {            addCriterion(\"feight_template_id =\", value, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdNotEqualTo(Long value) {            addCriterion(\"feight_template_id <>\", value, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdGreaterThan(Long value) {            addCriterion(\"feight_template_id >\", value, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"feight_template_id >=\", value, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdLessThan(Long value) {            addCriterion(\"feight_template_id <\", value, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdLessThanOrEqualTo(Long value) {            addCriterion(\"feight_template_id <=\", value, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdIn(List<Long> values) {            addCriterion(\"feight_template_id in\", values, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdNotIn(List<Long> values) {            addCriterion(\"feight_template_id not in\", values, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdBetween(Long value1, Long value2) {            addCriterion(\"feight_template_id between\", value1, value2, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFeightTemplateIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFeightTemplateIdNotBetween(Long value1, Long value2) {            addCriterion(\"feight_template_id not between\", value1, value2, \"feightTemplateId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdIsNull() {            addCriterion(\"product_attribute_category_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdIsNotNull() {            addCriterion(\"product_attribute_category_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdEqualTo(Long value) {            addCriterion(\"product_attribute_category_id =\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdNotEqualTo(Long value) {            addCriterion(\"product_attribute_category_id <>\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdGreaterThan(Long value) {            addCriterion(\"product_attribute_category_id >\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"product_attribute_category_id >=\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdLessThan(Long value) {            addCriterion(\"product_attribute_category_id <\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdLessThanOrEqualTo(Long value) {            addCriterion(\"product_attribute_category_id <=\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdIn(List<Long> values) {            addCriterion(\"product_attribute_category_id in\", values, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdNotIn(List<Long> values) {            addCriterion(\"product_attribute_category_id not in\", values, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdBetween(Long value1, Long value2) {            addCriterion(\"product_attribute_category_id between\", value1, value2, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdNotBetween(Long value1, Long value2) {            addCriterion(\"product_attribute_category_id not between\", value1, value2, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNull() {            addCriterion(\"name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNotNull() {            addCriterion(\"name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameEqualTo(String value) {            addCriterion(\"name =\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotEqualTo(String value) {            addCriterion(\"name <>\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThan(String value) {            addCriterion(\"name >\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThanOrEqualTo(String value) {            addCriterion(\"name >=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThan(String value) {            addCriterion(\"name <\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThanOrEqualTo(String value) {            addCriterion(\"name <=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLike(String value) {            addCriterion(\"name like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotLike(String value) {            addCriterion(\"name not like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIn(List<String> values) {            addCriterion(\"name in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotIn(List<String> values) {            addCriterion(\"name not in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameBetween(String value1, String value2) {            addCriterion(\"name between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotBetween(String value1, String value2) {            addCriterion(\"name not between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicIsNull() {            addCriterion(\"pic is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicIsNotNull() {            addCriterion(\"pic is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicEqualTo(String value) {            addCriterion(\"pic =\", value, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicNotEqualTo(String value) {            addCriterion(\"pic <>\", value, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicGreaterThan(String value) {            addCriterion(\"pic >\", value, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicGreaterThanOrEqualTo(String value) {            addCriterion(\"pic >=\", value, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicLessThan(String value) {            addCriterion(\"pic <\", value, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicLessThanOrEqualTo(String value) {            addCriterion(\"pic <=\", value, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicLike(String value) {            addCriterion(\"pic like\", value, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicNotLike(String value) {            addCriterion(\"pic not like\", value, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicIn(List<String> values) {            addCriterion(\"pic in\", values, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicNotIn(List<String> values) {            addCriterion(\"pic not in\", values, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicBetween(String value1, String value2) {            addCriterion(\"pic between\", value1, value2, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPicNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPicNotBetween(String value1, String value2) {            addCriterion(\"pic not between\", value1, value2, \"pic\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnIsNull() {            addCriterion(\"product_sn is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnIsNotNull() {            addCriterion(\"product_sn is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnEqualTo(String value) {            addCriterion(\"product_sn =\", value, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnNotEqualTo(String value) {            addCriterion(\"product_sn <>\", value, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnGreaterThan(String value) {            addCriterion(\"product_sn >\", value, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnGreaterThanOrEqualTo(String value) {            addCriterion(\"product_sn >=\", value, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnLessThan(String value) {            addCriterion(\"product_sn <\", value, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnLessThanOrEqualTo(String value) {            addCriterion(\"product_sn <=\", value, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnLike(String value) {            addCriterion(\"product_sn like\", value, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnNotLike(String value) {            addCriterion(\"product_sn not like\", value, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnIn(List<String> values) {            addCriterion(\"product_sn in\", values, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnNotIn(List<String> values) {            addCriterion(\"product_sn not in\", values, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnBetween(String value1, String value2) {            addCriterion(\"product_sn between\", value1, value2, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductSnNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductSnNotBetween(String value1, String value2) {            addCriterion(\"product_sn not between\", value1, value2, \"productSn\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusIsNull() {            addCriterion(\"delete_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusIsNotNull() {            addCriterion(\"delete_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusEqualTo(Integer value) {            addCriterion(\"delete_status =\", value, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusNotEqualTo(Integer value) {            addCriterion(\"delete_status <>\", value, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusGreaterThan(Integer value) {            addCriterion(\"delete_status >\", value, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"delete_status >=\", value, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusLessThan(Integer value) {            addCriterion(\"delete_status <\", value, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"delete_status <=\", value, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusIn(List<Integer> values) {            addCriterion(\"delete_status in\", values, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusNotIn(List<Integer> values) {            addCriterion(\"delete_status not in\", values, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusBetween(Integer value1, Integer value2) {            addCriterion(\"delete_status between\", value1, value2, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDeleteStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDeleteStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"delete_status not between\", value1, value2, \"deleteStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusIsNull() {            addCriterion(\"publish_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusIsNotNull() {            addCriterion(\"publish_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusEqualTo(Integer value) {            addCriterion(\"publish_status =\", value, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusNotEqualTo(Integer value) {            addCriterion(\"publish_status <>\", value, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusGreaterThan(Integer value) {            addCriterion(\"publish_status >\", value, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"publish_status >=\", value, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusLessThan(Integer value) {            addCriterion(\"publish_status <\", value, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"publish_status <=\", value, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusIn(List<Integer> values) {            addCriterion(\"publish_status in\", values, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusNotIn(List<Integer> values) {            addCriterion(\"publish_status not in\", values, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusBetween(Integer value1, Integer value2) {            addCriterion(\"publish_status between\", value1, value2, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPublishStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPublishStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"publish_status not between\", value1, value2, \"publishStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusIsNull() {            addCriterion(\"new_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusIsNotNull() {            addCriterion(\"new_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusEqualTo(Integer value) {            addCriterion(\"new_status =\", value, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusNotEqualTo(Integer value) {            addCriterion(\"new_status <>\", value, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusGreaterThan(Integer value) {            addCriterion(\"new_status >\", value, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"new_status >=\", value, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusLessThan(Integer value) {            addCriterion(\"new_status <\", value, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"new_status <=\", value, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusIn(List<Integer> values) {            addCriterion(\"new_status in\", values, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusNotIn(List<Integer> values) {            addCriterion(\"new_status not in\", values, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusBetween(Integer value1, Integer value2) {            addCriterion(\"new_status between\", value1, value2, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNewStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNewStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"new_status not between\", value1, value2, \"newStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusIsNull() {            addCriterion(\"recommand_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusIsNotNull() {            addCriterion(\"recommand_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusEqualTo(Integer value) {            addCriterion(\"recommand_status =\", value, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusNotEqualTo(Integer value) {            addCriterion(\"recommand_status <>\", value, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusGreaterThan(Integer value) {            addCriterion(\"recommand_status >\", value, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"recommand_status >=\", value, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusLessThan(Integer value) {            addCriterion(\"recommand_status <\", value, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"recommand_status <=\", value, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusIn(List<Integer> values) {            addCriterion(\"recommand_status in\", values, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusNotIn(List<Integer> values) {            addCriterion(\"recommand_status not in\", values, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusBetween(Integer value1, Integer value2) {            addCriterion(\"recommand_status between\", value1, value2, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRecommandStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRecommandStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"recommand_status not between\", value1, value2, \"recommandStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusIsNull() {            addCriterion(\"verify_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusIsNotNull() {            addCriterion(\"verify_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusEqualTo(Integer value) {            addCriterion(\"verify_status =\", value, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusNotEqualTo(Integer value) {            addCriterion(\"verify_status <>\", value, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusGreaterThan(Integer value) {            addCriterion(\"verify_status >\", value, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"verify_status >=\", value, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusLessThan(Integer value) {            addCriterion(\"verify_status <\", value, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"verify_status <=\", value, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusIn(List<Integer> values) {            addCriterion(\"verify_status in\", values, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusNotIn(List<Integer> values) {            addCriterion(\"verify_status not in\", values, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusBetween(Integer value1, Integer value2) {            addCriterion(\"verify_status between\", value1, value2, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andVerifyStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andVerifyStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"verify_status not between\", value1, value2, \"verifyStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIsNull() {            addCriterion(\"sort is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIsNotNull() {            addCriterion(\"sort is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortEqualTo(Integer value) {            addCriterion(\"sort =\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotEqualTo(Integer value) {            addCriterion(\"sort <>\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortGreaterThan(Integer value) {            addCriterion(\"sort >\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortGreaterThanOrEqualTo(Integer value) {            addCriterion(\"sort >=\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortLessThan(Integer value) {            addCriterion(\"sort <\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortLessThanOrEqualTo(Integer value) {            addCriterion(\"sort <=\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIn(List<Integer> values) {            addCriterion(\"sort in\", values, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotIn(List<Integer> values) {            addCriterion(\"sort not in\", values, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortBetween(Integer value1, Integer value2) {            addCriterion(\"sort between\", value1, value2, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotBetween(Integer value1, Integer value2) {            addCriterion(\"sort not between\", value1, value2, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleIsNull() {            addCriterion(\"sale is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleIsNotNull() {            addCriterion(\"sale is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleEqualTo(Integer value) {            addCriterion(\"sale =\", value, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleNotEqualTo(Integer value) {            addCriterion(\"sale <>\", value, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleGreaterThan(Integer value) {            addCriterion(\"sale >\", value, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleGreaterThanOrEqualTo(Integer value) {            addCriterion(\"sale >=\", value, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleLessThan(Integer value) {            addCriterion(\"sale <\", value, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleLessThanOrEqualTo(Integer value) {            addCriterion(\"sale <=\", value, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleIn(List<Integer> values) {            addCriterion(\"sale in\", values, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleNotIn(List<Integer> values) {            addCriterion(\"sale not in\", values, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleBetween(Integer value1, Integer value2) {            addCriterion(\"sale between\", value1, value2, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSaleNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSaleNotBetween(Integer value1, Integer value2) {            addCriterion(\"sale not between\", value1, value2, \"sale\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceIsNull() {            addCriterion(\"price is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceIsNotNull() {            addCriterion(\"price is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceEqualTo(BigDecimal value) {            addCriterion(\"price =\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceNotEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceNotEqualTo(BigDecimal value) {            addCriterion(\"price <>\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceGreaterThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceGreaterThan(BigDecimal value) {            addCriterion(\"price >\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceGreaterThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceGreaterThanOrEqualTo(BigDecimal value) {            addCriterion(\"price >=\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceLessThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceLessThan(BigDecimal value) {            addCriterion(\"price <\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceLessThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceLessThanOrEqualTo(BigDecimal value) {            addCriterion(\"price <=\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceIn(List<BigDecimal> values) {            addCriterion(\"price in\", values, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceNotIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceNotIn(List<BigDecimal> values) {            addCriterion(\"price not in\", values, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"price between\", value1, value2, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceNotBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceNotBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"price not between\", value1, value2, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceIsNull() {            addCriterion(\"promotion_price is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceIsNotNull() {            addCriterion(\"promotion_price is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceEqualTo(BigDecimal value) {            addCriterion(\"promotion_price =\", value, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceNotEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceNotEqualTo(BigDecimal value) {            addCriterion(\"promotion_price <>\", value, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceGreaterThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceGreaterThan(BigDecimal value) {            addCriterion(\"promotion_price >\", value, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceGreaterThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceGreaterThanOrEqualTo(BigDecimal value) {            addCriterion(\"promotion_price >=\", value, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceLessThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceLessThan(BigDecimal value) {            addCriterion(\"promotion_price <\", value, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceLessThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceLessThanOrEqualTo(BigDecimal value) {            addCriterion(\"promotion_price <=\", value, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceIn(List<BigDecimal> values) {            addCriterion(\"promotion_price in\", values, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceNotIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceNotIn(List<BigDecimal> values) {            addCriterion(\"promotion_price not in\", values, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"promotion_price between\", value1, value2, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPriceNotBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPriceNotBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"promotion_price not between\", value1, value2, \"promotionPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthIsNull() {            addCriterion(\"gift_growth is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthIsNotNull() {            addCriterion(\"gift_growth is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthEqualTo(Integer value) {            addCriterion(\"gift_growth =\", value, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthNotEqualTo(Integer value) {            addCriterion(\"gift_growth <>\", value, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthGreaterThan(Integer value) {            addCriterion(\"gift_growth >\", value, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthGreaterThanOrEqualTo(Integer value) {            addCriterion(\"gift_growth >=\", value, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthLessThan(Integer value) {            addCriterion(\"gift_growth <\", value, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthLessThanOrEqualTo(Integer value) {            addCriterion(\"gift_growth <=\", value, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthIn(List<Integer> values) {            addCriterion(\"gift_growth in\", values, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthNotIn(List<Integer> values) {            addCriterion(\"gift_growth not in\", values, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthBetween(Integer value1, Integer value2) {            addCriterion(\"gift_growth between\", value1, value2, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftGrowthNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftGrowthNotBetween(Integer value1, Integer value2) {            addCriterion(\"gift_growth not between\", value1, value2, \"giftGrowth\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointIsNull() {            addCriterion(\"gift_point is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointIsNotNull() {            addCriterion(\"gift_point is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointEqualTo(Integer value) {            addCriterion(\"gift_point =\", value, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointNotEqualTo(Integer value) {            addCriterion(\"gift_point <>\", value, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointGreaterThan(Integer value) {            addCriterion(\"gift_point >\", value, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointGreaterThanOrEqualTo(Integer value) {            addCriterion(\"gift_point >=\", value, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointLessThan(Integer value) {            addCriterion(\"gift_point <\", value, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointLessThanOrEqualTo(Integer value) {            addCriterion(\"gift_point <=\", value, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointIn(List<Integer> values) {            addCriterion(\"gift_point in\", values, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointNotIn(List<Integer> values) {            addCriterion(\"gift_point not in\", values, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointBetween(Integer value1, Integer value2) {            addCriterion(\"gift_point between\", value1, value2, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGiftPointNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGiftPointNotBetween(Integer value1, Integer value2) {            addCriterion(\"gift_point not between\", value1, value2, \"giftPoint\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitIsNull() {            addCriterion(\"use_point_limit is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitIsNotNull() {            addCriterion(\"use_point_limit is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitEqualTo(Integer value) {            addCriterion(\"use_point_limit =\", value, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitNotEqualTo(Integer value) {            addCriterion(\"use_point_limit <>\", value, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitGreaterThan(Integer value) {            addCriterion(\"use_point_limit >\", value, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitGreaterThanOrEqualTo(Integer value) {            addCriterion(\"use_point_limit >=\", value, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitLessThan(Integer value) {            addCriterion(\"use_point_limit <\", value, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitLessThanOrEqualTo(Integer value) {            addCriterion(\"use_point_limit <=\", value, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitIn(List<Integer> values) {            addCriterion(\"use_point_limit in\", values, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitNotIn(List<Integer> values) {            addCriterion(\"use_point_limit not in\", values, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitBetween(Integer value1, Integer value2) {            addCriterion(\"use_point_limit between\", value1, value2, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUsePointLimitNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUsePointLimitNotBetween(Integer value1, Integer value2) {            addCriterion(\"use_point_limit not between\", value1, value2, \"usePointLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleIsNull() {            addCriterion(\"sub_title is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleIsNotNull() {            addCriterion(\"sub_title is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleEqualTo(String value) {            addCriterion(\"sub_title =\", value, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleNotEqualTo(String value) {            addCriterion(\"sub_title <>\", value, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleGreaterThan(String value) {            addCriterion(\"sub_title >\", value, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleGreaterThanOrEqualTo(String value) {            addCriterion(\"sub_title >=\", value, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleLessThan(String value) {            addCriterion(\"sub_title <\", value, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleLessThanOrEqualTo(String value) {            addCriterion(\"sub_title <=\", value, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleLike(String value) {            addCriterion(\"sub_title like\", value, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleNotLike(String value) {            addCriterion(\"sub_title not like\", value, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleIn(List<String> values) {            addCriterion(\"sub_title in\", values, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleNotIn(List<String> values) {            addCriterion(\"sub_title not in\", values, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleBetween(String value1, String value2) {            addCriterion(\"sub_title between\", value1, value2, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSubTitleNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSubTitleNotBetween(String value1, String value2) {            addCriterion(\"sub_title not between\", value1, value2, \"subTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceIsNull() {            addCriterion(\"original_price is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceIsNotNull() {            addCriterion(\"original_price is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceEqualTo(BigDecimal value) {            addCriterion(\"original_price =\", value, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceNotEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceNotEqualTo(BigDecimal value) {            addCriterion(\"original_price <>\", value, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceGreaterThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceGreaterThan(BigDecimal value) {            addCriterion(\"original_price >\", value, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceGreaterThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceGreaterThanOrEqualTo(BigDecimal value) {            addCriterion(\"original_price >=\", value, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceLessThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceLessThan(BigDecimal value) {            addCriterion(\"original_price <\", value, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceLessThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceLessThanOrEqualTo(BigDecimal value) {            addCriterion(\"original_price <=\", value, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceIn(List<BigDecimal> values) {            addCriterion(\"original_price in\", values, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceNotIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceNotIn(List<BigDecimal> values) {            addCriterion(\"original_price not in\", values, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"original_price between\", value1, value2, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOriginalPriceNotBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOriginalPriceNotBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"original_price not between\", value1, value2, \"originalPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockIsNull() {            addCriterion(\"stock is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockIsNotNull() {            addCriterion(\"stock is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockEqualTo(Integer value) {            addCriterion(\"stock =\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockNotEqualTo(Integer value) {            addCriterion(\"stock <>\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockGreaterThan(Integer value) {            addCriterion(\"stock >\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockGreaterThanOrEqualTo(Integer value) {            addCriterion(\"stock >=\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockLessThan(Integer value) {            addCriterion(\"stock <\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockLessThanOrEqualTo(Integer value) {            addCriterion(\"stock <=\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockIn(List<Integer> values) {            addCriterion(\"stock in\", values, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockNotIn(List<Integer> values) {            addCriterion(\"stock not in\", values, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockBetween(Integer value1, Integer value2) {            addCriterion(\"stock between\", value1, value2, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockNotBetween(Integer value1, Integer value2) {            addCriterion(\"stock not between\", value1, value2, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockIsNull() {            addCriterion(\"low_stock is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockIsNotNull() {            addCriterion(\"low_stock is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockEqualTo(Integer value) {            addCriterion(\"low_stock =\", value, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockNotEqualTo(Integer value) {            addCriterion(\"low_stock <>\", value, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockGreaterThan(Integer value) {            addCriterion(\"low_stock >\", value, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockGreaterThanOrEqualTo(Integer value) {            addCriterion(\"low_stock >=\", value, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockLessThan(Integer value) {            addCriterion(\"low_stock <\", value, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockLessThanOrEqualTo(Integer value) {            addCriterion(\"low_stock <=\", value, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockIn(List<Integer> values) {            addCriterion(\"low_stock in\", values, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockNotIn(List<Integer> values) {            addCriterion(\"low_stock not in\", values, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockBetween(Integer value1, Integer value2) {            addCriterion(\"low_stock between\", value1, value2, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andLowStockNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andLowStockNotBetween(Integer value1, Integer value2) {            addCriterion(\"low_stock not between\", value1, value2, \"lowStock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitIsNull() {            addCriterion(\"unit is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitIsNotNull() {            addCriterion(\"unit is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitEqualTo(String value) {            addCriterion(\"unit =\", value, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitNotEqualTo(String value) {            addCriterion(\"unit <>\", value, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitGreaterThan(String value) {            addCriterion(\"unit >\", value, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitGreaterThanOrEqualTo(String value) {            addCriterion(\"unit >=\", value, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitLessThan(String value) {            addCriterion(\"unit <\", value, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitLessThanOrEqualTo(String value) {            addCriterion(\"unit <=\", value, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitLike(String value) {            addCriterion(\"unit like\", value, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitNotLike(String value) {            addCriterion(\"unit not like\", value, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitIn(List<String> values) {            addCriterion(\"unit in\", values, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitNotIn(List<String> values) {            addCriterion(\"unit not in\", values, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitBetween(String value1, String value2) {            addCriterion(\"unit between\", value1, value2, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUnitNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUnitNotBetween(String value1, String value2) {            addCriterion(\"unit not between\", value1, value2, \"unit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightIsNull() {            addCriterion(\"weight is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightIsNotNull() {            addCriterion(\"weight is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightEqualTo(BigDecimal value) {            addCriterion(\"weight =\", value, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightNotEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightNotEqualTo(BigDecimal value) {            addCriterion(\"weight <>\", value, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightGreaterThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightGreaterThan(BigDecimal value) {            addCriterion(\"weight >\", value, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightGreaterThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightGreaterThanOrEqualTo(BigDecimal value) {            addCriterion(\"weight >=\", value, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightLessThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightLessThan(BigDecimal value) {            addCriterion(\"weight <\", value, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightLessThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightLessThanOrEqualTo(BigDecimal value) {            addCriterion(\"weight <=\", value, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightIn(List<BigDecimal> values) {            addCriterion(\"weight in\", values, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightNotIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightNotIn(List<BigDecimal> values) {            addCriterion(\"weight not in\", values, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"weight between\", value1, value2, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andWeightNotBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andWeightNotBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"weight not between\", value1, value2, \"weight\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusIsNull() {            addCriterion(\"preview_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusIsNotNull() {            addCriterion(\"preview_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusEqualTo(Integer value) {            addCriterion(\"preview_status =\", value, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusNotEqualTo(Integer value) {            addCriterion(\"preview_status <>\", value, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusGreaterThan(Integer value) {            addCriterion(\"preview_status >\", value, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"preview_status >=\", value, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusLessThan(Integer value) {            addCriterion(\"preview_status <\", value, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"preview_status <=\", value, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusIn(List<Integer> values) {            addCriterion(\"preview_status in\", values, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusNotIn(List<Integer> values) {            addCriterion(\"preview_status not in\", values, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusBetween(Integer value1, Integer value2) {            addCriterion(\"preview_status between\", value1, value2, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPreviewStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPreviewStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"preview_status not between\", value1, value2, \"previewStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsIsNull() {            addCriterion(\"service_ids is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsIsNotNull() {            addCriterion(\"service_ids is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsEqualTo(String value) {            addCriterion(\"service_ids =\", value, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsNotEqualTo(String value) {            addCriterion(\"service_ids <>\", value, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsGreaterThan(String value) {            addCriterion(\"service_ids >\", value, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsGreaterThanOrEqualTo(String value) {            addCriterion(\"service_ids >=\", value, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsLessThan(String value) {            addCriterion(\"service_ids <\", value, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsLessThanOrEqualTo(String value) {            addCriterion(\"service_ids <=\", value, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsLike(String value) {            addCriterion(\"service_ids like\", value, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsNotLike(String value) {            addCriterion(\"service_ids not like\", value, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsIn(List<String> values) {            addCriterion(\"service_ids in\", values, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsNotIn(List<String> values) {            addCriterion(\"service_ids not in\", values, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsBetween(String value1, String value2) {            addCriterion(\"service_ids between\", value1, value2, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andServiceIdsNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andServiceIdsNotBetween(String value1, String value2) {            addCriterion(\"service_ids not between\", value1, value2, \"serviceIds\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsIsNull() {            addCriterion(\"keywords is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsIsNotNull() {            addCriterion(\"keywords is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsEqualTo(String value) {            addCriterion(\"keywords =\", value, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsNotEqualTo(String value) {            addCriterion(\"keywords <>\", value, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsGreaterThan(String value) {            addCriterion(\"keywords >\", value, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsGreaterThanOrEqualTo(String value) {            addCriterion(\"keywords >=\", value, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsLessThan(String value) {            addCriterion(\"keywords <\", value, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsLessThanOrEqualTo(String value) {            addCriterion(\"keywords <=\", value, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsLike(String value) {            addCriterion(\"keywords like\", value, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsNotLike(String value) {            addCriterion(\"keywords not like\", value, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsIn(List<String> values) {            addCriterion(\"keywords in\", values, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsNotIn(List<String> values) {            addCriterion(\"keywords not in\", values, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsBetween(String value1, String value2) {            addCriterion(\"keywords between\", value1, value2, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andKeywordsNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andKeywordsNotBetween(String value1, String value2) {            addCriterion(\"keywords not between\", value1, value2, \"keywords\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteIsNull() {            addCriterion(\"note is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteIsNotNull() {            addCriterion(\"note is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteEqualTo(String value) {            addCriterion(\"note =\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteNotEqualTo(String value) {            addCriterion(\"note <>\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteGreaterThan(String value) {            addCriterion(\"note >\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteGreaterThanOrEqualTo(String value) {            addCriterion(\"note >=\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteLessThan(String value) {            addCriterion(\"note <\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteLessThanOrEqualTo(String value) {            addCriterion(\"note <=\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteLike(String value) {            addCriterion(\"note like\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteNotLike(String value) {            addCriterion(\"note not like\", value, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteIn(List<String> values) {            addCriterion(\"note in\", values, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteNotIn(List<String> values) {            addCriterion(\"note not in\", values, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteBetween(String value1, String value2) {            addCriterion(\"note between\", value1, value2, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNoteNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNoteNotBetween(String value1, String value2) {            addCriterion(\"note not between\", value1, value2, \"note\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsIsNull() {            addCriterion(\"album_pics is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsIsNotNull() {            addCriterion(\"album_pics is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsEqualTo(String value) {            addCriterion(\"album_pics =\", value, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsNotEqualTo(String value) {            addCriterion(\"album_pics <>\", value, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsGreaterThan(String value) {            addCriterion(\"album_pics >\", value, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsGreaterThanOrEqualTo(String value) {            addCriterion(\"album_pics >=\", value, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsLessThan(String value) {            addCriterion(\"album_pics <\", value, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsLessThanOrEqualTo(String value) {            addCriterion(\"album_pics <=\", value, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsLike(String value) {            addCriterion(\"album_pics like\", value, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsNotLike(String value) {            addCriterion(\"album_pics not like\", value, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsIn(List<String> values) {            addCriterion(\"album_pics in\", values, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsNotIn(List<String> values) {            addCriterion(\"album_pics not in\", values, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsBetween(String value1, String value2) {            addCriterion(\"album_pics between\", value1, value2, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAlbumPicsNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAlbumPicsNotBetween(String value1, String value2) {            addCriterion(\"album_pics not between\", value1, value2, \"albumPics\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleIsNull() {            addCriterion(\"detail_title is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleIsNotNull() {            addCriterion(\"detail_title is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleEqualTo(String value) {            addCriterion(\"detail_title =\", value, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleNotEqualTo(String value) {            addCriterion(\"detail_title <>\", value, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleGreaterThan(String value) {            addCriterion(\"detail_title >\", value, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleGreaterThanOrEqualTo(String value) {            addCriterion(\"detail_title >=\", value, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleLessThan(String value) {            addCriterion(\"detail_title <\", value, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleLessThanOrEqualTo(String value) {            addCriterion(\"detail_title <=\", value, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleLike(String value) {            addCriterion(\"detail_title like\", value, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleNotLike(String value) {            addCriterion(\"detail_title not like\", value, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleIn(List<String> values) {            addCriterion(\"detail_title in\", values, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleNotIn(List<String> values) {            addCriterion(\"detail_title not in\", values, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleBetween(String value1, String value2) {            addCriterion(\"detail_title between\", value1, value2, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDetailTitleNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDetailTitleNotBetween(String value1, String value2) {            addCriterion(\"detail_title not between\", value1, value2, \"detailTitle\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeIsNull() {            addCriterion(\"promotion_start_time is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeIsNotNull() {            addCriterion(\"promotion_start_time is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeEqualTo(Date value) {            addCriterion(\"promotion_start_time =\", value, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeNotEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeNotEqualTo(Date value) {            addCriterion(\"promotion_start_time <>\", value, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeGreaterThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeGreaterThan(Date value) {            addCriterion(\"promotion_start_time >\", value, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeGreaterThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeGreaterThanOrEqualTo(Date value) {            addCriterion(\"promotion_start_time >=\", value, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeLessThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeLessThan(Date value) {            addCriterion(\"promotion_start_time <\", value, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeLessThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeLessThanOrEqualTo(Date value) {            addCriterion(\"promotion_start_time <=\", value, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeIn(List<Date> values) {            addCriterion(\"promotion_start_time in\", values, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeNotIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeNotIn(List<Date> values) {            addCriterion(\"promotion_start_time not in\", values, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeBetween(Date value1, Date value2) {            addCriterion(\"promotion_start_time between\", value1, value2, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionStartTimeNotBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionStartTimeNotBetween(Date value1, Date value2) {            addCriterion(\"promotion_start_time not between\", value1, value2, \"promotionStartTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeIsNull() {            addCriterion(\"promotion_end_time is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeIsNotNull() {            addCriterion(\"promotion_end_time is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeEqualTo(Date value) {            addCriterion(\"promotion_end_time =\", value, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeNotEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeNotEqualTo(Date value) {            addCriterion(\"promotion_end_time <>\", value, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeGreaterThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeGreaterThan(Date value) {            addCriterion(\"promotion_end_time >\", value, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeGreaterThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeGreaterThanOrEqualTo(Date value) {            addCriterion(\"promotion_end_time >=\", value, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeLessThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeLessThan(Date value) {            addCriterion(\"promotion_end_time <\", value, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeLessThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeLessThanOrEqualTo(Date value) {            addCriterion(\"promotion_end_time <=\", value, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeIn(List<Date> values) {            addCriterion(\"promotion_end_time in\", values, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeNotIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeNotIn(List<Date> values) {            addCriterion(\"promotion_end_time not in\", values, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeBetween(Date value1, Date value2) {            addCriterion(\"promotion_end_time between\", value1, value2, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionEndTimeNotBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionEndTimeNotBetween(Date value1, Date value2) {            addCriterion(\"promotion_end_time not between\", value1, value2, \"promotionEndTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitIsNull() {            addCriterion(\"promotion_per_limit is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitIsNotNull() {            addCriterion(\"promotion_per_limit is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitEqualTo(Integer value) {            addCriterion(\"promotion_per_limit =\", value, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitNotEqualTo(Integer value) {            addCriterion(\"promotion_per_limit <>\", value, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitGreaterThan(Integer value) {            addCriterion(\"promotion_per_limit >\", value, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitGreaterThanOrEqualTo(Integer value) {            addCriterion(\"promotion_per_limit >=\", value, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitLessThan(Integer value) {            addCriterion(\"promotion_per_limit <\", value, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitLessThanOrEqualTo(Integer value) {            addCriterion(\"promotion_per_limit <=\", value, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitIn(List<Integer> values) {            addCriterion(\"promotion_per_limit in\", values, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitNotIn(List<Integer> values) {            addCriterion(\"promotion_per_limit not in\", values, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitBetween(Integer value1, Integer value2) {            addCriterion(\"promotion_per_limit between\", value1, value2, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionPerLimitNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionPerLimitNotBetween(Integer value1, Integer value2) {            addCriterion(\"promotion_per_limit not between\", value1, value2, \"promotionPerLimit\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeIsNull() {            addCriterion(\"promotion_type is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeIsNotNull() {            addCriterion(\"promotion_type is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeEqualTo(Integer value) {            addCriterion(\"promotion_type =\", value, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeNotEqualTo(Integer value) {            addCriterion(\"promotion_type <>\", value, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeGreaterThan(Integer value) {            addCriterion(\"promotion_type >\", value, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeGreaterThanOrEqualTo(Integer value) {            addCriterion(\"promotion_type >=\", value, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeLessThan(Integer value) {            addCriterion(\"promotion_type <\", value, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeLessThanOrEqualTo(Integer value) {            addCriterion(\"promotion_type <=\", value, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeIn(List<Integer> values) {            addCriterion(\"promotion_type in\", values, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeNotIn(List<Integer> values) {            addCriterion(\"promotion_type not in\", values, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeBetween(Integer value1, Integer value2) {            addCriterion(\"promotion_type between\", value1, value2, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromotionTypeNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromotionTypeNotBetween(Integer value1, Integer value2) {            addCriterion(\"promotion_type not between\", value1, value2, \"promotionType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameIsNull() {            addCriterion(\"brand_name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameIsNotNull() {            addCriterion(\"brand_name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameEqualTo(String value) {            addCriterion(\"brand_name =\", value, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameNotEqualTo(String value) {            addCriterion(\"brand_name <>\", value, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameGreaterThan(String value) {            addCriterion(\"brand_name >\", value, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameGreaterThanOrEqualTo(String value) {            addCriterion(\"brand_name >=\", value, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameLessThan(String value) {            addCriterion(\"brand_name <\", value, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameLessThanOrEqualTo(String value) {            addCriterion(\"brand_name <=\", value, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameLike(String value) {            addCriterion(\"brand_name like\", value, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameNotLike(String value) {            addCriterion(\"brand_name not like\", value, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameIn(List<String> values) {            addCriterion(\"brand_name in\", values, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameNotIn(List<String> values) {            addCriterion(\"brand_name not in\", values, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameBetween(String value1, String value2) {            addCriterion(\"brand_name between\", value1, value2, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andBrandNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andBrandNameNotBetween(String value1, String value2) {            addCriterion(\"brand_name not between\", value1, value2, \"brandName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameIsNull() {            addCriterion(\"product_category_name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameIsNotNull() {            addCriterion(\"product_category_name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameEqualTo(String value) {            addCriterion(\"product_category_name =\", value, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameNotEqualTo(String value) {            addCriterion(\"product_category_name <>\", value, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameGreaterThan(String value) {            addCriterion(\"product_category_name >\", value, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameGreaterThanOrEqualTo(String value) {            addCriterion(\"product_category_name >=\", value, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameLessThan(String value) {            addCriterion(\"product_category_name <\", value, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameLessThanOrEqualTo(String value) {            addCriterion(\"product_category_name <=\", value, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameLike(String value) {            addCriterion(\"product_category_name like\", value, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameNotLike(String value) {            addCriterion(\"product_category_name not like\", value, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameIn(List<String> values) {            addCriterion(\"product_category_name in\", values, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameNotIn(List<String> values) {            addCriterion(\"product_category_name not in\", values, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameBetween(String value1, String value2) {            addCriterion(\"product_category_name between\", value1, value2, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductCategoryNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductCategoryNameNotBetween(String value1, String value2) {            addCriterion(\"product_category_name not between\", value1, value2, \"productCategoryName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return ID;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "getServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "WireMockApp", "snippet": "  public WireMockApp getServer() {    return app;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "loadMapping", "params": ["Resource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void loadMapping(Resource file) {    Optional.ofNullable(file.getChild(JcrUtils.JCR_CONTENT))      .flatMap(fileContent -> Optional.of(fileContent)        .map(r -> r.adaptTo(InputStream.class))        .map(BufferedInputStream::new))      .ifPresent(input -> {        app.mappingFrom((stubMappings) -> {          try {            MappingCollection stubCollection = Json.read(IOUtils.toString(input, StandardCharsets.UTF_8.displayName()), MappingCollection.class);            for (StubMapping mapping : stubCollection.getMappings()) {              mapping.setDirty(false);              stubMappings.addMapping(mapping);            }          } catch (JsonException | IOException e) {            throw new StubsException(String.format(\"Cannot load AEM Stubs mapping from resource at path '%s'!\", file.getPath()), e);          }        });      });  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "runScript", "params": ["Resource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void runScript(Resource resource) {    final StubScript script = new StubScript(resource, manager, this);    script.getCompilerConfig().addCompilationCustomizers(new ImportCustomizer()      .addStaticStars(WireMockUtils.class.getName())      .addStarImports(Request.class.getPackage().getName())    );    script.run();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "activate", "params": ["Config"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void activate(Config config) {    this.config = config;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "modify", "params": ["Config"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void modify(Config config) {    this.config = config;    manager.reload(this);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "deactivate", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void deactivate() {    stop();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void start() {    LOG.info(\"Starting AEM Stubs WireMock Servlet\");    app = new WireMockApp(resolverAccessor, manager.getRootPath() + \"/\" + getId(), config.globalTransformer());    servletPath = getServletPath(config.path());    try {      httpService.registerServlet(servletPath, createServlet(), null, null);    } catch (ServletException | NamespaceException e) {      LOG.error(\"Cannot register AEM Stubs WireMock Servlet at path {}\", servletPath, e);    }  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void stop() {    LOG.info(\"Stopping AEM Stubs WireMock Servlet\");    if (servletPath != null) {      httpService.unregister(servletPath);      servletPath = null;    }    if (app != null) {      app = null;    }  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "initServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void initServer() {    stop();    start();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "startServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void startServer() {    // already started on init  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "getServletPath", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getServletPath(String path) {    return String.format(\"%s/*\", path);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "createServlet", "params": [], "throws": null, "modifiers": ["private"], "return_type": "WireMockServlet", "snippet": "  private WireMockServlet createServlet() {    return new WireMockServlet(config.path(), app.buildStubRequestHandler());  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockStubs.java", "stars": "8", "class": {"name": "WireMockStubs", "extends": null, "implements": ["Stubs"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/ThatchBlock.java", "stars": "2", "class": {"name": "ThatchBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/ThatchBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "set", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void set() {        User user = new User();        user.setName(\"harry\");        user.setEmail(\"923243595@qq.com\");        user.setPhoneNumber(\"17879502601\");        boolean result = redisUtil.set(\"hello\", user);        Assert.isTrue(result, \"redis\u63d2\u5165\u6570\u636e\u5931\u8d25\");    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/test/java/com/harry/renthouse/util/RedisUtilTest.java", "stars": "3", "class": {"name": "RedisUtilTest", "extends": "RentHouseApplicationTests", "implements": null, "modifiers": []}}, {"method_name": "hasKey", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void hasKey() {        boolean hasKey = redisUtil.hasKey(\"52cbc2725f1243da8132e741984f0289\");        Assert.isTrue(hasKey, \"redis key\u4e0d\u5b58\u5728\");    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/test/java/com/harry/renthouse/util/RedisUtilTest.java", "stars": "3", "class": {"name": "RedisUtilTest", "extends": "RentHouseApplicationTests", "implements": null, "modifiers": []}}, {"method_name": "isEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEnabled() {        return enabled;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/autoconfigure/EtcdConfigProperties.java", "stars": "4", "class": {"name": "EtcdConfigProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnabled(boolean enabled) {        this.enabled = enabled;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/autoconfigure/EtcdConfigProperties.java", "stars": "4", "class": {"name": "EtcdConfigProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getServerAddr", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getServerAddr() {        return serverAddr;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/autoconfigure/EtcdConfigProperties.java", "stars": "4", "class": {"name": "EtcdConfigProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setServerAddr", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServerAddr(List<String> serverAddr) {        this.serverAddr = serverAddr;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/autoconfigure/EtcdConfigProperties.java", "stars": "4", "class": {"name": "EtcdConfigProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return username;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/autoconfigure/EtcdConfigProperties.java", "stars": "4", "class": {"name": "EtcdConfigProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username) {        this.username = username;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/autoconfigure/EtcdConfigProperties.java", "stars": "4", "class": {"name": "EtcdConfigProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/autoconfigure/EtcdConfigProperties.java", "stars": "4", "class": {"name": "EtcdConfigProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/autoconfigure/EtcdConfigProperties.java", "stars": "4", "class": {"name": "EtcdConfigProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"ImEtcdConfigProperties{\" +                \"enabled=\" + enabled +                \", serverAddr=\" + serverAddr +                \", username='\" + username + '\\'' +                \", password='\" + \"******\" + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/autoconfigure/EtcdConfigProperties.java", "stars": "4", "class": {"name": "EtcdConfigProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickSlabBlock.java", "stars": "2", "class": {"name": "CharredNetherBrickSlabBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "criar", "params": ["OrdemServicoInput"], "throws": null, "modifiers": ["public"], "return_type": "OrdemServicoModel", "snippet": "\tpublic OrdemServicoModel criar(@Valid @RequestBody OrdemServicoInput ordemServicoInput) {\t\tOrdemServico ordemServico = toEntity(ordemServicoInput);\t\treturn toModel(gestaoOrdemServicoService.criar(ordemServico));\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/controller/OrdemServicoController.java", "stars": "2", "class": {"name": "OrdemServicoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<OrdemServicoModel>", "snippet": "\tpublic List<OrdemServicoModel> listar() {\t\treturn toCollectionModel(ordemServicoRepository.findAll());\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/controller/OrdemServicoController.java", "stars": "2", "class": {"name": "OrdemServicoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscar", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<OrdemServicoModel>", "snippet": "\tpublic ResponseEntity<OrdemServicoModel> buscar(@PathVariable Long ordemServicoId) {\t\tOptional<OrdemServico> ordemServico = ordemServicoRepository.findById(ordemServicoId);\t\tif (ordemServico.isPresent()) {\t\t\tOrdemServicoModel ordemServicoModel = toModel(ordemServico.get());\t\t\treturn ResponseEntity.ok(ordemServicoModel);\t\t}\t\treturn ResponseEntity.notFound().build();\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/controller/OrdemServicoController.java", "stars": "2", "class": {"name": "OrdemServicoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "finalizar", "params": ["Long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void finalizar(@PathVariable Long ordemServicoId) {\t\tgestaoOrdemServicoService.finalizar(ordemServicoId);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/controller/OrdemServicoController.java", "stars": "2", "class": {"name": "OrdemServicoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toModel", "params": ["OrdemServico"], "throws": null, "modifiers": ["private"], "return_type": "OrdemServicoModel", "snippet": "\tprivate OrdemServicoModel toModel(OrdemServico ordemServico) {\t\treturn modelMapper.map(ordemServico, OrdemServicoModel.class);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/controller/OrdemServicoController.java", "stars": "2", "class": {"name": "OrdemServicoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toCollectionModel", "params": ["List<OrdemServico>"], "throws": null, "modifiers": ["private"], "return_type": "List<OrdemServicoModel>", "snippet": "\tprivate List<OrdemServicoModel> toCollectionModel(List<OrdemServico> ordensServico) {\t\treturn ordensServico.stream().map(ordemServico -> toModel(ordemServico)).collect(Collectors.toList());\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/controller/OrdemServicoController.java", "stars": "2", "class": {"name": "OrdemServicoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toEntity", "params": ["OrdemServicoInput"], "throws": null, "modifiers": ["private"], "return_type": "OrdemServico", "snippet": "\tprivate OrdemServico toEntity(OrdemServicoInput ordemServicoInput) {\t\treturn modelMapper.map(ordemServicoInput, OrdemServico.class);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/controller/OrdemServicoController.java", "stars": "2", "class": {"name": "OrdemServicoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(MybatisApplication.class, args);    }", "url": "https://raw.githubusercontent.com/wanzicong/mybatis-study/master/src/main/java/com/mybatis/MybatisApplication.java", "stars": "1", "class": {"name": "MybatisApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        float fade_gamma = 0.3f;        float amt = 1.0f - strength;        float mult = 1.0f / (amt * 0.7f + 0.3f);        float faded = fade_gamma + (1.0f - fade_gamma) * mult;        float igamma = 1.0f / faded;        String multString = \"mult = \" + mult + \";\\n\";        String igammaString = \"igamma = \" + igamma + \";\\n\";        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\"                + \" float mult;\\n\"                + \" float igamma;\\n\"                + \"varying vec2 vTextureCoord;\\n\"                + \"void main()\\n\"                + \"{\\n\"                // Parameters that were created above                + multString                + igammaString                + \"  const vec3 color_weights = vec3(0.25, 0.5, 0.25);\\n\"                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  float lightmask = dot(color.rgb, color_weights);\\n\"                + \"  float backmask = (1.0 - lightmask);\\n\"                + \"  vec3 ones = vec3(1.0, 1.0, 1.0);\\n\"                + \"  vec3 diff = pow(mult * color.rgb, igamma * ones) - color.rgb;\\n\"                + \"  diff = min(diff, 1.0);\\n\"                + \"  vec3 new_color = min(color.rgb + diff * backmask, 1.0);\\n\"                + \"  gl_FragColor = vec4(new_color, color.a);\\n\" + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/FillLightEffect.java", "stars": "2", "class": {"name": "FillLightEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getIp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getIp() {\t\treturn ip;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/Host.java", "stars": "29", "class": {"name": "Host", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIp", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setIp(String ip) {\t\tthis.ip = ip;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/Host.java", "stars": "29", "class": {"name": "Host", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getPort() {\t\treturn port;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/Host.java", "stars": "29", "class": {"name": "Host", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPort", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPort(int port) {\t\tthis.port = port;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/Host.java", "stars": "29", "class": {"name": "Host", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAddress() {\t\treturn address;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/Host.java", "stars": "29", "class": {"name": "Host", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAddress(String address) {\t\tthis.address = address;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/Host.java", "stars": "29", "class": {"name": "Host", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {        targets.clear();        target = null;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/KillAura.java", "stars": "12", "class": {"name": "KillAura", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/KillAura.java", "stars": "12", "class": {"name": "KillAura", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (event.getType().equals(PacketEvent.Type.OUTGOING)) {            if (event.getPacket() instanceof CPacketPlayer.Rotation) {                CPacketPlayer.Rotation packet = (CPacketPlayer.Rotation) event.getPacket();                yaw = packet.yaw;                pitch = packet.pitch;            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/KillAura.java", "stars": "12", "class": {"name": "KillAura", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (mc.player == null) {            target = null;        }        if (event.getTiming().equals(EventTiming.PRE)) {            targets = getTargets();            if (targets.size() > maxTargets) {                if (index >= maxTargets) {                    index = 0;                }            } else if (index >= targets.size()) {                index = 0;            }            if (!targets.isEmpty()) {                target = targets.get(index);                Vec3d vec = AngleUtil.resolveBestHitVec(target, 3, walls);                if (vec != null) {                    float[] rotation = AngleUtil.getRotationFromPosition(vec.x, vec.z, vec.y - mc.player.getEyeHeight());                    event.getRotation().setYaw(!silent ? mc.player.rotationYaw = rotation[0] : rotation[0]);                    event.getRotation().setPitch(!silent ? mc.player.rotationPitch = mc.player.getDistance(target) <= 0.5 ? 90 : rotation[1] : mc.player.getDistance(target) <= 0.5 ? 90 : rotation[1]);                    final float ticks = 20.0f - Mercury.INSTANCE.getTickRateManager().getTickRate();                    final boolean canAttack = mc.player.getCooledAttackStrength(sync ? -ticks : 0.0f) >= 1 && AngleUtil.rayTrace(event.getRotation().getYaw(), event.getRotation().getPitch(), reach) != null;                    if (canAttack) {                        if (Mercury.INSTANCE.getModuleManager().find(Criticals.class).isEnabled() && target != null) {                            if (Criticals.mode.equalsIgnoreCase(\"edit\") && Criticals.canCrit(target)) {                                if (mc.player.fallDistance != 0) {                                    Criticals.waitDelay = 2;                                }                                //if (Block.isFullBlock(mc.world.getb) && !BlockUtil.getBlock(mc.player.posX, mc.player.posY + 1, mc.player.posZ).isFullBlock()) {                                if (Criticals.waitDelay <= 0) {                                    Criticals.waitDelay = 0;                                    if (Criticals.canCrit(target)) {                                        event.getLocation().setOnGround(false);                                        Criticals.groundTicks += 1;                                        if (Criticals.groundTicks == 1) {                                            event.getLocation().setOnGround(false);                                            event.getLocation().setY(event.getLocation().getY() + 0.0625101D);                                        } else if (Criticals.groundTicks == 2) {                                            event.getLocation().setOnGround(false);                                            event.getLocation().setY(event.getLocation().getY() + 0.062666);                                        } else if (Criticals.groundTicks == 3) {                                            event.getLocation().setOnGround(false);                                            event.getLocation().setY(event.getLocation().getY() + 0.0001);                                        } else if (Criticals.groundTicks >= 4) {                                            event.getLocation().setOnGround(false);                                            event.getLocation().setY(event.getLocation().getY() + 0.0001);                                            Criticals.groundTicks = 0;                                        }                                    } else {                                        Criticals.waitDelay = 2;                                    }                                } else {                                    Criticals.waitDelay -= 1;                                }                        /*} else if (Criticals.groundTicks != 0) {                            Criticals.waitDelay = 4;                            Criticals.groundTicks = 0;                        }*/                            }                        }                        if (crits && !mc.player.onGround && mc.player.fallDistance < 0.1)                            return;                        if (AngleUtil.rayTrace(event.getRotation().getYaw(), event.getRotation().getPitch(), reach) != null)                        attack(target);                        hits++;                    }                }            } else if (target != null)                target = null;        }        if (target != null) {            if (targets.size() > 0 && hits > switchSwings) {                ++index;                hits = 0;            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/KillAura.java", "stars": "12", "class": {"name": "KillAura", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "attack", "params": ["Entity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void attack(Entity entity) {        mc.player.connection.sendPacket(new CPacketUseEntity(entity));        mc.player.swingArm(EnumHand.MAIN_HAND);        if (Mercury.INSTANCE.getModuleManager().find(Criticals.class).isEnabled() && Criticals.canCrit(entity) && Criticals.mode.equalsIgnoreCase(\"edit\") && Criticals.groundTicks != 0) {            mc.world.playSound(null, mc.player.posX, mc.player.posY, mc.player.posZ, SoundEvents.ENTITY_PLAYER_ATTACK_CRIT, mc.player.getSoundCategory(), 1.0F, 1.0F);            mc.player.onCriticalHit(entity);        }        mc.player.resetCooldown();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/KillAura.java", "stars": "12", "class": {"name": "KillAura", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTargets", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<EntityLivingBase>", "snippet": "    public List<EntityLivingBase> getTargets() {        List<EntityLivingBase> targets = new ArrayList<>();        for (Object o : mc.world.getLoadedEntityList()) {            if (o instanceof EntityLivingBase) {                EntityLivingBase entity = (EntityLivingBase) o;                if (doesQualify(entity)) {                    targets.add(entity);                }            }        }        targets.sort((o1, o2) -> {            float[] rot1 = AngleUtil.getRotations(o1);            float[] rot2 = AngleUtil.getRotations(o2);            return Float.compare(rot2[0], rot1[0]);        });        return targets;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/KillAura.java", "stars": "12", "class": {"name": "KillAura", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "doesQualify", "params": ["EntityLivingBase"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean doesQualify(EntityLivingBase entity) {        final double d = reach;        return entity != null && entity.isEntityAlive() && AngleUtil.isEntityInFov(entity, fov)                && entity.isEntityAlive() && entity.getHealth() > 0.0f && entity != mc.player                && ((entity instanceof EntityPlayer && players) || ((entity instanceof EntityAnimal                || entity instanceof EntityMob || entity instanceof EntitySlime || entity instanceof EntityVillager) && mobs))                && entity.getDistanceSq(mc.player) <= d * d                && (!entity.isInvisible() || invisibles) && !Mercury.INSTANCE.getFriendManager().isFriend(entity.getName());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/KillAura.java", "stars": "12", "class": {"name": "KillAura", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result = \"\";\t\tresult += super.generateCode();\t\tswitch (expr.getType().getTypeCode()) {\t\tcase POINTER:\t\t\tresult += tab() + expr.generateCode() \t\t\t\t\t+ \" = (\" + expr.getType().generatePrefCode()\t\t\t\t\t+ \")malloc(\" + expr.getType().getLeft().getSize() + \");\" + NL;\t\t\tbreak;\t\tdefault:\t\t\tthrow new CodeException(\"new\");\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmNEW.java", "stars": "3", "class": {"name": "StmNEW", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\texpr.checkType();\t\texpr.getType().assertType(this, TypeCode.POINTER);\t\texpr.checkType();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmNEW.java", "stars": "3", "class": {"name": "StmNEW", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"new \" + expr;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmNEW.java", "stars": "3", "class": {"name": "StmNEW", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        bindService(new Intent(this, TimerService.class), mConnection, 0);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        mResumed = true;        openOptionsMenu();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        super.onPause();        mResumed = false;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "openOptionsMenu", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openOptionsMenu() {        if (mResumed && mTimer != null) {            super.openOptionsMenu();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater inflater = getMenuInflater();        inflater.inflate(R.menu.timer, menu);        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPrepareOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onPrepareOptionsMenu(Menu menu) {        final boolean timeSet = mTimer.getDurationMillis() != 0;        menu.setGroupVisible(R.id.no_time_set, !timeSet);        menu.setGroupVisible(R.id.time_set, timeSet);        if (timeSet) {            menu.findItem(R.id.start).setVisible(!mTimer.isRunning() && !mTimer.isStarted());            menu.findItem(R.id.resume).setVisible(!mTimer.isRunning() && mTimer.isStarted());            menu.findItem(R.id.pause).setVisible(                    mTimer.isRunning() && mTimer.getRemainingTimeMillis() > 0);            menu.findItem(R.id.reset).setVisible(mTimer.isStarted());        }        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onOptionsItemSelected(MenuItem item) {        // Handle item selection.        switch (item.getItemId()) {            case R.id.change_timer:            case R.id.set_timer:                mTimer.reset();                setTimer();                return true;            case R.id.start:            case R.id.resume:                mTimer.start();                return true;            case R.id.pause:                mTimer.pause();                return true;            case R.id.reset:                mTimer.reset();                return true;            case R.id.stop:                stopService(new Intent(this, TimerService.class));                return true;            default:                return super.onOptionsItemSelected(item);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onOptionsMenuClosed", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onOptionsMenuClosed(Menu menu) {        if (!mSettingTimer) {            // Nothing else to do, closing the Activity.            finish();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityResult(int requestCode, int resultCode, Intent data) {        if (resultCode == RESULT_OK && requestCode == SET_TIMER) {            mTimer.setDurationMillis(data.getLongExtra(SetTimerActivity.EXTRA_DURATION_MILLIS, 0));        }        finish();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setTimer() {        Intent setTimerIntent = new Intent(this, SetTimerActivity.class);        setTimerIntent.putExtra(SetTimerActivity.EXTRA_DURATION_MILLIS, mTimer.getDurationMillis());        startActivityForResult(setTimerIntent, SET_TIMER);        mSettingTimer = true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/MenuActivity.java", "stars": "74", "class": {"name": "MenuActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "select", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T extends Instance> T select(T[] instances) {        return null;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/schedule/lb/WeightRoundRobinLoadBalancer.java", "stars": "3", "class": {"name": "WeightRoundRobinLoadBalancer", "extends": null, "implements": ["LoadBalancer"], "modifiers": ["public"]}}, {"method_name": "testRun", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRun() throws Exception{        Properties p = new Properties();        p.put(\"database.name\", \"abcwork\");        p.put(\"table.name\", \"abc\");        p.put(\"partition.name\", \"\");        p.put(\"partition.value\", \"\");        p.put(\"export.file.path\", \"abc\");        p.put(\"export.file.name\", \"abc\");        p.put(\"type\", \"abc\");        p.put(\"driver.memory\", \"30\");        p.put(\"executor.memory\", \"30\");        p.put(\"executor.cores\", \"30\");//        HiveExport hiveExport = new HiveExport(\"run spark-submit\", p);//        HiveExport.exeCmd(\"echo hello\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/utils/TestHiveExport.java", "stars": "18", "class": {"name": "TestHiveExport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/AcaciaParquetStairsBlock.java", "stars": "2", "class": {"name": "AcaciaParquetStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/AcaciaParquetStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "execute", "params": ["int", "boolean"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void execute(int tempoExecucaoEmMilisegundos,boolean lancaException) throws InterruptedException {\t\tThread.sleep(tempoExecucaoEmMilisegundos);\t\t\t\tif(lancaException) {\t\t\t\t\t\t\t\tthrow new RuntimeException(\"resista a esse problema!!!\");\t\t}\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/FakeGatewayAcquirerSubAcquirerController.java", "stars": "9", "class": {"name": "FakeGatewayAcquirerSubAcquirerController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMediaRouter", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "MediaRouter", "snippet": "    protected MediaRouter createMediaRouter(Context context) {        return MediaRouter.getInstance(context);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        if (isRunning)             return;        isRunning = true;        if (mMediaRouteSelector == null) {            try {                mMediaRouteSelector = new MediaRouteSelector.Builder()                .addControlCategory(CastMediaControlIntent.categoryForCast(                        CastService.getApplicationID()))                .build();            } catch (IllegalArgumentException e) {                Log.w(Util.T, \"Invalid application ID: \" + CastService.getApplicationID());                for (DiscoveryProviderListener listener : serviceListeners) {                    listener.onServiceDiscoveryFailed(this, new ServiceCommandError(0,                            \"Invalid application ID: \" + CastService.getApplicationID(), null));                }                return;            }        }        rescan();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        isRunning = false;        if (removeRoutesTimer != null) {            removeRoutesTimer.cancel();            removeRoutesTimer = null;        }        if (mMediaRouter != null) {            Util.runOnUI(new Runnable() {                @Override                public void run() {                    mMediaRouter.removeCallback(mMediaRouterCallback);                }            });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "restart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void restart() {        stop();        start();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {        stop();        foundServices.clear();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "rescan", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rescan() {        Util.runOnUI(new Runnable() {            @Override            public void run() {                mMediaRouter.addCallback(mMediaRouteSelector, mMediaRouterCallback,                        MediaRouter.CALLBACK_FLAG_REQUEST_DISCOVERY);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "addListener", "params": ["DiscoveryProviderListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addListener(DiscoveryProviderListener listener) {        serviceListeners.add(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "removeListener", "params": ["DiscoveryProviderListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeListener(DiscoveryProviderListener listener) {        serviceListeners.remove(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "addDeviceFilter", "params": ["DiscoveryFilter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDeviceFilter(DiscoveryFilter filter) {}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "removeDeviceFilter", "params": ["DiscoveryFilter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeDeviceFilter(DiscoveryFilter filter) {}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "setFilters", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFilters(java.util.List<DiscoveryFilter> filters) {}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "CastDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "onRouteAdded", "params": ["MediaRouter", "RouteInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onRouteAdded(MediaRouter router, RouteInfo route) {            super.onRouteAdded(router, route);            CastDevice castDevice = CastDevice.getFromBundle(route.getExtras());            String uuid = castDevice.getDeviceId();            removedUUID.remove(uuid);            ServiceDescription foundService = foundServices.get(uuid);            boolean isNew = foundService == null;            boolean listUpdateFlag = false;            if (isNew) {                foundService = new ServiceDescription(CastService.ID, uuid,                        castDevice.getIpAddress().getHostAddress());                foundService.setFriendlyName(castDevice.getFriendlyName());                foundService.setModelName(castDevice.getModelName());                foundService.setModelNumber(castDevice.getDeviceVersion());                foundService.setModelDescription(route.getDescription());                foundService.setPort(castDevice.getServicePort());                foundService.setServiceID(CastService.ID);                foundService.setDevice(castDevice);                listUpdateFlag = true;            }            else {                if (!foundService.getFriendlyName().equals(castDevice.getFriendlyName())) {                    foundService.setFriendlyName(castDevice.getFriendlyName());                    listUpdateFlag = true;                }                foundService.setDevice(castDevice);            }            foundService.setLastDetection(new Date().getTime());            foundServices.put(uuid, foundService);            if (listUpdateFlag) {                for (DiscoveryProviderListener listenter: serviceListeners) {                    listenter.onServiceAdded(CastDiscoveryProvider.this, foundService);                }            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "MediaRouterCallback", "extends": "MediaRouter", "implements": null, "modifiers": ["private"]}}, {"method_name": "onRouteChanged", "params": ["MediaRouter", "RouteInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onRouteChanged(MediaRouter router, RouteInfo route) {            super.onRouteChanged(router, route);            CastDevice castDevice = CastDevice.getFromBundle(route.getExtras());            String uuid = castDevice.getDeviceId();            ServiceDescription foundService = foundServices.get(uuid);            boolean isNew = foundService == null;            boolean listUpdateFlag = false;            if (!isNew) {                foundService.setIpAddress(castDevice.getIpAddress().getHostAddress());                foundService.setModelName(castDevice.getModelName());                foundService.setModelNumber(castDevice.getDeviceVersion());                foundService.setModelDescription(route.getDescription());                foundService.setPort(castDevice.getServicePort());                foundService.setDevice(castDevice);                if (!foundService.getFriendlyName().equals(castDevice.getFriendlyName())) {                    foundService.setFriendlyName(castDevice.getFriendlyName());                    listUpdateFlag = true;                }                foundService.setLastDetection(new Date().getTime());                foundServices.put(uuid, foundService);                if (listUpdateFlag) {                    for (DiscoveryProviderListener listenter: serviceListeners) {                        listenter.onServiceAdded(CastDiscoveryProvider.this, foundService);                    }                }            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "MediaRouterCallback", "extends": "MediaRouter", "implements": null, "modifiers": ["private"]}}, {"method_name": "onRoutePresentationDisplayChanged", "params": ["MediaRouter", "RouteInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onRoutePresentationDisplayChanged(MediaRouter router,                RouteInfo route) {            Log.d(Util.T, \"onRoutePresentationDisplayChanged: [\" + route.getName() + \"] [\"                    + route.getDescription() + \"]\");            super.onRoutePresentationDisplayChanged(router, route);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "MediaRouterCallback", "extends": "MediaRouter", "implements": null, "modifiers": ["private"]}}, {"method_name": "onRouteRemoved", "params": ["MediaRouter", "RouteInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onRouteRemoved(final MediaRouter router, final RouteInfo route) {            super.onRouteRemoved(router, route);            CastDevice castDevice = CastDevice.getFromBundle(route.getExtras());            String uuid = castDevice.getDeviceId();            removedUUID.add(uuid);            // Prevent immediate removing. There are some cases when service is removed and added            // again after a second.            if (removeRoutesTimer == null) {                removeRoutesTimer = new Timer();                removeRoutesTimer.schedule(new TimerTask() {                    @Override                    public void run() {                        removeServices(route);                    }                }, ROUTE_REMOVE_INTERVAL);            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "MediaRouterCallback", "extends": "MediaRouter", "implements": null, "modifiers": ["private"]}}, {"method_name": "onRouteVolumeChanged", "params": ["MediaRouter", "RouteInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onRouteVolumeChanged(MediaRouter router, RouteInfo route) {            Log.d(Util.T, \"onRouteVolumeChanged: [\" + route.getName() + \"] [\"                    + route.getDescription() + \"]\");            super.onRouteVolumeChanged(router, route);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "MediaRouterCallback", "extends": "MediaRouter", "implements": null, "modifiers": ["private"]}}, {"method_name": "removeServices", "params": ["RouteInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void removeServices(RouteInfo route) {            for (String uuid : removedUUID) {                final ServiceDescription service = foundServices.get(uuid);                if (service != null) {                    Log.d(Util.T, \"Service [\" + route.getName() + \"] has been removed\");                    Util.runOnUI(new Runnable() {                        @Override                        public void run() {                            for (DiscoveryProviderListener listener : serviceListeners) {                                listener.onServiceRemoved(CastDiscoveryProvider.this, service);                            }                        }                    });                    foundServices.remove(uuid);                }            }            removedUUID.clear();        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/discovery/provider/CastDiscoveryProvider.java", "stars": "4", "class": {"name": "MediaRouterCallback", "extends": "MediaRouter", "implements": null, "modifiers": ["private"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/AcaciaParquetBlock.java", "stars": "2", "class": {"name": "AcaciaParquetBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/AcaciaParquetBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "enqueue", "params": ["PendingPost"], "throws": null, "modifiers": ["synchronized"], "return_type": "void", "snippet": "    synchronized void enqueue(PendingPost pendingPost) {        if (pendingPost == null) {            throw new NullPointerException(\"null cannot be enqueued\");        }        if (tail != null) {            tail.next = pendingPost;            tail = pendingPost;        } else if (head == null) {            head = tail = pendingPost;        } else {            throw new IllegalStateException(\"Head present, but no tail\");        }        notifyAll();    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/PendingPostQueue.java", "stars": "7", "class": {"name": "PendingPostQueue", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "poll", "params": [], "throws": null, "modifiers": ["synchronized"], "return_type": "PendingPost", "snippet": "    synchronized PendingPost poll() {        PendingPost pendingPost = head;        if (head != null) {            head = head.next;            if (head == null) {                tail = null;            }        }        return pendingPost;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/PendingPostQueue.java", "stars": "7", "class": {"name": "PendingPostQueue", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "poll", "params": ["int"], "throws": ["InterruptedException"], "modifiers": ["synchronized"], "return_type": "PendingPost", "snippet": "    synchronized PendingPost poll(int maxMillisToWait) throws InterruptedException {        if (head == null) {            wait(maxMillisToWait);        }        return poll();    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/PendingPostQueue.java", "stars": "7", "class": {"name": "PendingPostQueue", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "onInitialize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onInitialize() {\t\t//connection modes\t\tCTMConfig.registerConfigLoader(\"ctm\", MainTextureConnectingCTMConfig.loaderForFactory(FullCTMSpriteProvider::new));\t\tCTMConfig.registerConfigLoader(\"top\", MainTextureConnectingCTMConfig.loaderForFactory(TopCTMSpriteProvider::new));\t\tCTMConfig.registerConfigLoader(\"horizontal\", MainTextureConnectingCTMConfig.loaderForFactory(HorizontalCTMSpriteProvider::new));\t\tCTMConfig.registerConfigLoader(\"ctm_compact\", MainTextureConnectingCTMConfig.loaderForFactory(FullCTMSpriteProvider::new));\t\tCTMConfig.registerConfigLoader(\"vertical\", MainTextureConnectingCTMConfig.loaderForFactory(VerticalCTMSpriteProvider::new));\t\tCTMConfig.registerConfigLoader(\"horizontal+vertical\", MainTextureConnectingCTMConfig.loaderForFactory(HorizontalVerticalCTMSpriteProvider::new));\t\tCTMConfig.registerConfigLoader(\"vertical+horizontal\", MainTextureConnectingCTMConfig.loaderForFactory(VerticalHorizontalCTMSpriteProvider::new));\t\t//legacy random textures/texture replacement modes\t\tCTMConfig.registerConfigLoader(\"fixed\", RandomCTMConfig.loaderForFactory(RandomSpriteProvider::new));\t\tCTMConfig.registerConfigLoader(\"random\", RandomCTMConfig.loaderForFactory(RandomSpriteProvider::new));\t\t//repeating pattern\t\tCTMConfig.registerConfigLoader(\"repeat\", RepeatingCTMConfig.loaderForFactory(RepeatingCTMSpriteProvider::new));\t\t\t\tTileProvider.registerTileProviderFactory(\"ctm_compact\", CompactTileProvider::new);\t\t\t\tTileLoader.registerSpecialTileLoader(\"$CBT_SPECIAL_DYNAMIC_GLASS\", DynamicGlassTileLoader::new);\t\tTileLoader.registerSpecialTileLoader(\"$CBT_SPECIAL_DYNAMIC_SANDSTONE\", DynamicSandstoneTileLoader::new);\t\tTileLoader.registerSpecialTileLoader(\"$CBT_SPECIAL_DYNAMIC_BOOKSHELF\", DynamicBookshelfTileLoader::new);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/ConnectedBlockTextures.java", "stars": "3", "class": {"name": "ConnectedBlockTextures", "extends": null, "implements": ["ModInitializer"], "modifiers": ["public"]}}, {"method_name": "id", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Identifier", "snippet": "\tpublic static Identifier id(String string) {\t\treturn new Identifier(\"connected_block_textures\", string);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/ConnectedBlockTextures.java", "stars": "3", "class": {"name": "ConnectedBlockTextures", "extends": null, "implements": ["ModInitializer"], "modifiers": ["public"]}}, {"method_name": "breakpointHack", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void breakpointHack() {\t\tSystem.out.println(\"bp\");\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/ConnectedBlockTextures.java", "stars": "3", "class": {"name": "ConnectedBlockTextures", "extends": null, "implements": ["ModInitializer"], "modifiers": ["public"]}}, {"method_name": "starting", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void starting() {        log.info(\">>>>>>>>>>>>>>>>> HelloWorldRunListener.staring()...\");    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/run/HelloWorldRunListener.java", "stars": "3", "class": {"name": "HelloWorldRunListener", "extends": null, "implements": ["SpringApplicationRunListener"], "modifiers": ["public"]}}, {"method_name": "environmentPrepared", "params": ["ConfigurableEnvironment"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void environmentPrepared(ConfigurableEnvironment environment) {        log.info(\">>>>>>>>>>>>>>>> environmentPrepared\");    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/run/HelloWorldRunListener.java", "stars": "3", "class": {"name": "HelloWorldRunListener", "extends": null, "implements": ["SpringApplicationRunListener"], "modifiers": ["public"]}}, {"method_name": "contextPrepared", "params": ["ConfigurableApplicationContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void contextPrepared(ConfigurableApplicationContext context) {        log.info(\">>>>>>>>>>>>>>>>>>>>> contextPrepared...\");    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/run/HelloWorldRunListener.java", "stars": "3", "class": {"name": "HelloWorldRunListener", "extends": null, "implements": ["SpringApplicationRunListener"], "modifiers": ["public"]}}, {"method_name": "contextLoaded", "params": ["ConfigurableApplicationContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void contextLoaded(ConfigurableApplicationContext context) {        log.info(\">>>>>>>>>>>>>>>>>>> contextLoaded... \");    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/run/HelloWorldRunListener.java", "stars": "3", "class": {"name": "HelloWorldRunListener", "extends": null, "implements": ["SpringApplicationRunListener"], "modifiers": ["public"]}}, {"method_name": "started", "params": ["ConfigurableApplicationContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void started(ConfigurableApplicationContext context) {        log.info(\">>>>>>>>>>>>>>> started...\");    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/run/HelloWorldRunListener.java", "stars": "3", "class": {"name": "HelloWorldRunListener", "extends": null, "implements": ["SpringApplicationRunListener"], "modifiers": ["public"]}}, {"method_name": "running", "params": ["ConfigurableApplicationContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void running(ConfigurableApplicationContext context) {        log.info(\">>>>>>>>>>>>>>>>>>> running...\");    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/run/HelloWorldRunListener.java", "stars": "3", "class": {"name": "HelloWorldRunListener", "extends": null, "implements": ["SpringApplicationRunListener"], "modifiers": ["public"]}}, {"method_name": "failed", "params": ["ConfigurableApplicationContext", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void failed(ConfigurableApplicationContext context, Throwable exception) {    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/run/HelloWorldRunListener.java", "stars": "3", "class": {"name": "HelloWorldRunListener", "extends": null, "implements": ["SpringApplicationRunListener"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tnew SampleJerseyApplication().configure(new SpringApplicationBuilder(SampleJerseyApplication.class)).run(args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jersey/src/main/java/smoketest/jersey/SampleJerseyApplication.java", "stars": "47572", "class": {"name": "SampleJerseyApplication", "extends": "SpringBootServletInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "processEvent", "params": ["CMEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void processEvent(CMEvent arg0) {\t\t// TODO Auto-generated method stub\t}", "url": "https://raw.githubusercontent.com/leejaeseung/2VS2_OMOK/master/OMOK_Client/src/ClientEventHandler.java", "stars": "3", "class": {"name": "ClientEventHandler", "extends": null, "implements": ["CMAppEventHandler"], "modifiers": ["public"]}}, {"method_name": "create", "params": ["Payment"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int create(Payment payment)    {        return paymentDao.create(payment);    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-provider-paymeny8001/src/main/java/com/atguigu/springcloud/service/impl/PaymentServiceImpl.java", "stars": "1", "class": {"name": "PaymentServiceImpl", "extends": null, "implements": ["PaymentService"], "modifiers": ["public"]}}, {"method_name": "getPaymentById", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Payment", "snippet": "    public Payment getPaymentById(Long id)    {        return paymentDao.getPaymentById(id);    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-provider-paymeny8001/src/main/java/com/atguigu/springcloud/service/impl/PaymentServiceImpl.java", "stars": "1", "class": {"name": "PaymentServiceImpl", "extends": null, "implements": ["PaymentService"], "modifiers": ["public"]}}, {"method_name": "handle", "params": ["WxMpXmlMessage", "Map<String,Object>", "WxMpService", "WxSessionManager"], "throws": ["WxErrorException"], "modifiers": ["public"], "return_type": "WxMpXmlOutMessage", "snippet": "\t  public WxMpXmlOutMessage handle(WxMpXmlMessage wxMessage,                                      Map<String, Object> context, WxMpService weixinService,                                      WxSessionManager sessionManager) throws WxErrorException {\t\t\t\tthis.logger.info(\"ScanHandler\");\t\tthis.logger.info(\"ScanHandler\");\t\tthis.logger.info(\"ScanHandler\");\t    return null;\t  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/handler/ScanHandler.java", "stars": "2", "class": {"name": "ScanHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "JobScheduleHelper", "snippet": "    public static JobScheduleHelper getInstance(){        return instance;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobScheduleHelper.java", "stars": "1", "class": {"name": "JobScheduleHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start(){        // schedule thread        scheduleThread = new Thread(new Runnable() {            @Override            public void run() {                try {                    TimeUnit.MILLISECONDS.sleep(5000 - System.currentTimeMillis()%1000 );                } catch (InterruptedException e) {                    if (!scheduleThreadToStop) {                        logger.error(e.getMessage(), e);                    }                }                logger.info(\">>>>>>>>> init xxl-job admin scheduler success.\");                // pre-read count: treadpool-size * trigger-qps (each trigger cost 50ms, qps = 1000/50 = 20)                int preReadCount = (XxlJobAdminConfig.getAdminConfig().getTriggerPoolFastMax() + XxlJobAdminConfig.getAdminConfig().getTriggerPoolSlowMax()) * 20;                while (!scheduleThreadToStop) {                    // Scan Job                    long start = System.currentTimeMillis();                    Connection conn = null;                    Boolean connAutoCommit = null;                    PreparedStatement preparedStatement = null;                    boolean preReadSuc = true;                    try {//                        conn = XxlJobAdminConfig.getAdminConfig().getDataSource().getConnection();//                        connAutoCommit = conn.getAutoCommit();//                        conn.setAutoCommit(false);////                        preparedStatement = conn.prepareStatement(  \"select * from xxl_job_lock where lock_name = 'schedule_lock' for update\" );//                        preparedStatement.execute();                        // tx start                        // 1\u3001pre read                        long nowTime = System.currentTimeMillis();                        List<XxlJobInfo> scheduleList = XxlJobAdminConfig.getAdminConfig().getXxlJobInfoDao().scheduleJobQuery(nowTime + PRE_READ_MS, preReadCount);                        if (scheduleList!=null && scheduleList.size()>0) {                            // 2\u3001push time-ring                            for (XxlJobInfo jobInfo: scheduleList) {                                // time-ring jump                                if (nowTime > jobInfo.getTriggerNextTime() + PRE_READ_MS) {                                    // 2.1\u3001trigger-expire > 5s\uff1apass && make next-trigger-time                                    logger.warn(\">>>>>>>>>>> xxl-job, schedule misfire, jobId = \" + jobInfo.getId());                                    // fresh next                                    refreshNextValidTime(jobInfo, new Date());                                } else if (nowTime > jobInfo.getTriggerNextTime()) {                                    // 2.2\u3001trigger-expire < 5s\uff1adirect-trigger && make next-trigger-time                                    // 1\u3001trigger                                    JobTriggerPoolHelper.trigger(jobInfo.getId(), TriggerTypeEnum.CRON, -1, null, null);                                    logger.debug(\">>>>>>>>>>> xxl-job, schedule push trigger : jobId = \" + jobInfo.getId() );                                    // 2\u3001fresh next                                    refreshNextValidTime(jobInfo, new Date());                                    // next-trigger-time in 5s, pre-read again                                    if (jobInfo.getTriggerStatus()==1 && nowTime + PRE_READ_MS > jobInfo.getTriggerNextTime()) {                                        // 1\u3001make ring second                                        int ringSecond = (int)((jobInfo.getTriggerNextTime()/1000)%60);                                        // 2\u3001push time ring                                        pushTimeRing(ringSecond, jobInfo.getId());                                        // 3\u3001fresh next                                        refreshNextValidTime(jobInfo, new Date(jobInfo.getTriggerNextTime()));                                    }                                } else {                                    // 2.3\u3001trigger-pre-read\uff1atime-ring trigger && make next-trigger-time                                    // 1\u3001make ring second                                    int ringSecond = (int)((jobInfo.getTriggerNextTime()/1000)%60);                                    // 2\u3001push time ring                                    pushTimeRing(ringSecond, jobInfo.getId());                                    // 3\u3001fresh next                                    refreshNextValidTime(jobInfo, new Date(jobInfo.getTriggerNextTime()));                                }                            }                            // 3\u3001update trigger info                            for (XxlJobInfo jobInfo: scheduleList) {                                XxlJobAdminConfig.getAdminConfig().getXxlJobInfoDao().scheduleUpdate(jobInfo);                            }                        } else {                            preReadSuc = false;                        }                        // tx stop                    } catch (Exception e) {                        if (!scheduleThreadToStop) {                            logger.error(\">>>>>>>>>>> xxl-job, JobScheduleHelper#scheduleThread error:{}\", e);                        }                    } finally {                        // commit                        if (conn != null) {                            try {                                conn.commit();                            } catch (SQLException e) {                                if (!scheduleThreadToStop) {                                    logger.error(e.getMessage(), e);                                }                            }                            try {                                conn.setAutoCommit(connAutoCommit);                            } catch (SQLException e) {                                if (!scheduleThreadToStop) {                                    logger.error(e.getMessage(), e);                                }                            }                            try {                                conn.close();                            } catch (SQLException e) {                                if (!scheduleThreadToStop) {                                    logger.error(e.getMessage(), e);                                }                            }                        }                        // close PreparedStatement                        if (null != preparedStatement) {                            try {                                preparedStatement.close();                            } catch (SQLException e) {                                if (!scheduleThreadToStop) {                                    logger.error(e.getMessage(), e);                                }                            }                        }                    }                    long cost = System.currentTimeMillis()-start;                    // Wait seconds, align second                    if (cost < 1000) {  // scan-overtime, not wait                        try {                            // pre-read period: success > scan each second; fail > skip this period;                            TimeUnit.MILLISECONDS.sleep((preReadSuc?1000:PRE_READ_MS) - System.currentTimeMillis()%1000);                        } catch (InterruptedException e) {                            if (!scheduleThreadToStop) {                                logger.error(e.getMessage(), e);                            }                        }                    }                }                logger.info(\">>>>>>>>>>> xxl-job, JobScheduleHelper#scheduleThread stop\");            }        });        scheduleThread.setDaemon(true);        scheduleThread.setName(\"xxl-job, admin JobScheduleHelper#scheduleThread\");        scheduleThread.start();        // ring thread        ringThread = new Thread(new Runnable() {            @Override            public void run() {                // align second                try {                    TimeUnit.MILLISECONDS.sleep(1000 - System.currentTimeMillis()%1000 );                } catch (InterruptedException e) {                    if (!ringThreadToStop) {                        logger.error(e.getMessage(), e);                    }                }                while (!ringThreadToStop) {                    try {                        // second data                        List<Integer> ringItemData = new ArrayList<>();                        int nowSecond = Calendar.getInstance().get(Calendar.SECOND);   // \u907f\u514d\u5904\u7406\u8017\u65f6\u592a\u957f\uff0c\u8de8\u8fc7\u523b\u5ea6\uff0c\u5411\u524d\u6821\u9a8c\u4e00\u4e2a\u523b\u5ea6\uff1b                        for (int i = 0; i < 2; i++) {                            List<Integer> tmpData = ringData.remove( (nowSecond+60-i)%60 );                            if (tmpData != null) {                                ringItemData.addAll(tmpData);                            }                        }                        // ring trigger                        logger.debug(\">>>>>>>>>>> xxl-job, time-ring beat : \" + nowSecond + \" = \" + Arrays.asList(ringItemData) );                        if (ringItemData.size() > 0) {                            // do trigger                            for (int jobId: ringItemData) {                                // do trigger                                JobTriggerPoolHelper.trigger(jobId, TriggerTypeEnum.CRON, -1, null, null);                            }                            // clear                            ringItemData.clear();                        }                    } catch (Exception e) {                        if (!ringThreadToStop) {                            logger.error(\">>>>>>>>>>> xxl-job, JobScheduleHelper#ringThread error:{}\", e);                        }                    }                    // next second, align second                    try {                        TimeUnit.MILLISECONDS.sleep(1000 - System.currentTimeMillis()%1000);                    } catch (InterruptedException e) {                        if (!ringThreadToStop) {                            logger.error(e.getMessage(), e);                        }                    }                }                logger.info(\">>>>>>>>>>> xxl-job, JobScheduleHelper#ringThread stop\");            }        });        ringThread.setDaemon(true);        ringThread.setName(\"xxl-job, admin JobScheduleHelper#ringThread\");        ringThread.start();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobScheduleHelper.java", "stars": "1", "class": {"name": "JobScheduleHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "refreshNextValidTime", "params": ["XxlJobInfo", "Date"], "throws": ["ParseException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void refreshNextValidTime(XxlJobInfo jobInfo, Date fromTime) throws ParseException {        Date nextValidTime = new CronExpression(jobInfo.getJobCron()).getNextValidTimeAfter(fromTime);        if (nextValidTime != null) {            jobInfo.setTriggerLastTime(jobInfo.getTriggerNextTime());            jobInfo.setTriggerNextTime(nextValidTime.getTime());        } else {            jobInfo.setTriggerStatus(0);            jobInfo.setTriggerLastTime(0);            jobInfo.setTriggerNextTime(0);        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobScheduleHelper.java", "stars": "1", "class": {"name": "JobScheduleHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pushTimeRing", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void pushTimeRing(int ringSecond, int jobId){        // push async ring        List<Integer> ringItemData = ringData.get(ringSecond);        if (ringItemData == null) {            ringItemData = new ArrayList<Integer>();            ringData.put(ringSecond, ringItemData);        }        ringItemData.add(jobId);        logger.debug(\">>>>>>>>>>> xxl-job, schedule push time-ring : \" + ringSecond + \" = \" + Arrays.asList(ringItemData) );    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobScheduleHelper.java", "stars": "1", "class": {"name": "JobScheduleHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toStop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void toStop(){        // 1\u3001stop schedule        scheduleThreadToStop = true;        try {            TimeUnit.SECONDS.sleep(1);  // wait        } catch (InterruptedException e) {            logger.error(e.getMessage(), e);        }        if (scheduleThread.getState() != Thread.State.TERMINATED){            // interrupt and wait            scheduleThread.interrupt();            try {                scheduleThread.join();            } catch (InterruptedException e) {                logger.error(e.getMessage(), e);            }        }        // if has ring data        boolean hasRingData = false;        if (!ringData.isEmpty()) {            for (int second : ringData.keySet()) {                List<Integer> tmpData = ringData.get(second);                if (tmpData!=null && tmpData.size()>0) {                    hasRingData = true;                    break;                }            }        }        if (hasRingData) {            try {                TimeUnit.SECONDS.sleep(8);            } catch (InterruptedException e) {                logger.error(e.getMessage(), e);            }        }        // stop ring (wait job-in-memory stop)        ringThreadToStop = true;        try {            TimeUnit.SECONDS.sleep(1);        } catch (InterruptedException e) {            logger.error(e.getMessage(), e);        }        if (ringThread.getState() != Thread.State.TERMINATED){            // interrupt and wait            ringThread.interrupt();            try {                ringThread.join();            } catch (InterruptedException e) {                logger.error(e.getMessage(), e);            }        }        logger.info(\">>>>>>>>>>> xxl-job, JobScheduleHelper stop\");    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobScheduleHelper.java", "stars": "1", "class": {"name": "JobScheduleHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toSRT", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] toSRT() {        return new FormatSRT().toFile(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/TimedTextObject.java", "stars": "4", "class": {"name": "TimedTextObject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toASS", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] toASS() {        return new FormatASS().toFile(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/TimedTextObject.java", "stars": "4", "class": {"name": "TimedTextObject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toVTT", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] toVTT() {        return new FormatVTT().toFile(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/TimedTextObject.java", "stars": "4", "class": {"name": "TimedTextObject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanUnusedStyles", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void cleanUnusedStyles() {        //here all used styles will be stored        Hashtable<String, Style> usedStyles = new Hashtable<>();        //we iterate over the captions        for (Caption current : captions.values()) {            //new caption            //if it has a style            if (current.style != null) {                String iD = current.style.iD;                //if we haven't saved it yet                if (!usedStyles.containsKey(iD))                    usedStyles.put(iD, current.style);            }        }        //we saved the used styles        this.styling = usedStyles;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/TimedTextObject.java", "stars": "4", "class": {"name": "TimedTextObject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "RegisterX", "snippet": "    public static synchronized RegisterX getInstance() {        if (instance == null) {            instance = new RegisterX();        }        return instance;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/RegisterX.java", "stars": "4", "class": {"name": "RegisterX", "extends": "Register", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadPagination", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Pagination>", "snippet": "    public static List<Pagination> loadPagination(String templatePath) {        var paginations = new ArrayList<Pagination>();        var env = Bored.env();        var pageSize = env.getSiteConfig().getPageSize();        int pageCount = getPageCount(env.getPages(), pageSize);        for (int i = 1; i <= pageCount; i++) {            var pagina = new Pagination();            pagina.setUri(getPaginationUrl(i));            pagina.setCurrent(i);            pagina.setPageCount(pageCount);            pagina.setData(startPage(env.getPages(), i, pageSize));            if (i == 1) {                pagina.setHasPrev(false);                pagina.setHasNext(true);                pagina.setNext(getPaginationUrl(i + 1));            } else if (i == pageCount) {                pagina.setHasPrev(true);                pagina.setHasNext(false);                pagina.setPrev(getPaginationUrl(i - 1));            } else {                pagina.setHasPrev(true);                pagina.setHasNext(true);                pagina.setPrev(getPaginationUrl(i - 1));                pagina.setNext(getPaginationUrl(i + 1));            }            pagina.setTemplatePath(templatePath);            paginations.add(pagina);        }        return paginations;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/util/PaginationUtil.java", "stars": "2", "class": {"name": "PaginationUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPaginationUrl", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String getPaginationUrl(int pageSize) {        return \"/page/\" + pageSize + Bored.env().getSiteConfig().getURLSuffix();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/util/PaginationUtil.java", "stars": "2", "class": {"name": "PaginationUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startPage", "params": ["List<Page>", "Integer", "Integer"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<Page>", "snippet": "    private static List<Page> startPage(@NotNull List<Page> list, Integer pageNum, Integer pageSize) {        //\u8bb0\u5f55\u603b\u6570        int count = list.size();        //\u9875\u6570        Integer pageCount = getPageCount(list, pageSize);        //\u5f00\u59cb\u7d22\u5f15        int fromIndex;        //\u7ed3\u675f\u7d22\u5f15        int toIndex;        if (pageNum > pageCount) {            pageNum = pageCount;        }        if (!pageNum.equals(pageCount)) {            fromIndex = (pageNum - 1) * pageSize;            toIndex = fromIndex + pageSize;        } else {            fromIndex = (pageNum - 1) * pageSize;            toIndex = count;        }        return list.subList(fromIndex, toIndex);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/util/PaginationUtil.java", "stars": "2", "class": {"name": "PaginationUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageCount", "params": ["List<Page>", "Integer"], "throws": null, "modifiers": ["private", "static"], "return_type": "Integer", "snippet": "    private static Integer getPageCount(List<Page> list, Integer pageSize) {        //\u8bb0\u5f55\u603b\u6570        Integer count = list.size();        //\u9875\u6570        int pageCount;        if (count % pageSize == 0) {            pageCount = count / pageSize;        } else {            pageCount = count / pageSize + 1;        }        return pageCount;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/util/PaginationUtil.java", "stars": "2", "class": {"name": "PaginationUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save_devrait_enregistrer_une_distribution_masque_avec_un_identifiant_technique", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void save_devrait_enregistrer_une_distribution_masque_avec_un_identifiant_technique() {        // Given        DistributionMasqueDatabase distributionMasqueDatabase = aDistributionMasqueDatabase();        // When        DistributionMasqueDatabase result = distributionMasqueDatabaseRepository.save(distributionMasqueDatabase);        // Then        assertThat(result.getId()).isNotNull();        assertThat(result).isEqualToIgnoringGivenFields(distributionMasqueDatabase, \"id\");    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasqueDatabaseRepositoryTest.java", "stars": "5", "class": {"name": "DistributionMasqueDatabaseRepositoryTest", "extends": "RepositoryTest", "implements": null, "modifiers": []}}, {"method_name": "findByDemandeur_devrait_retourner_uniquement_les_distributions_masques_du_demandeur_des_15_derniers_jours", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void findByDemandeur_devrait_retourner_uniquement_les_distributions_masques_du_demandeur_des_15_derniers_jours() {        // Given        String demandeur1 = \"08c71b89ac55b6826a2daa9fe89edea26de\";        String demandeur2 = \"89c71b89ac55b6826a2daa9fe89edea26de\";        distributionMasqueDatabaseRepository.save(aDistributionMasqueDatabase(demandeur1));        distributionMasqueDatabaseRepository.save(aDistributionMasqueDatabase(demandeur1));        DistributionMasqueDatabase distributionMasqueDatabaseHorsPeriode = aDistributionMasqueDatabase(demandeur1);        distributionMasqueDatabaseHorsPeriode.setDateDistribution(ClockFixture.now().minusDays(16));        distributionMasqueDatabaseRepository.save(distributionMasqueDatabaseHorsPeriode);        distributionMasqueDatabaseRepository.save(aDistributionMasqueDatabase(demandeur2));        LocalDateTime dateDistribution = ClockFixture.now().minusDays(15);        // When        List<DistributionMasqueDatabase> result = distributionMasqueDatabaseRepository.findByDemandeurAndDateDistributionIsGreaterThanEqual(demandeur1, dateDistribution);        // Then        assertThat(result).hasSize(2);        assertThat(result.get(0)).extracting(\"demandeur\").isEqualTo(demandeur1);        assertThat(result.get(1)).extracting(\"demandeur\").isEqualTo(demandeur1);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasqueDatabaseRepositoryTest.java", "stars": "5", "class": {"name": "DistributionMasqueDatabaseRepositoryTest", "extends": "RepositoryTest", "implements": null, "modifiers": []}}, {"method_name": "pageProvider", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PageProvider", "snippet": "    public PageProvider pageProvider() {        PageConfig pageConfig = properties.getPageConfig();        return new DefaultPageProvider(pageConfig.getPage(), pageConfig.getSize(), pageConfig.getDefaultPage(), pageConfig.getDefaultSize());    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8AutoConfiguration.java", "stars": "2", "class": {"name": "S8AutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "requestExecutor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RequestExecutor", "snippet": "    public RequestExecutor requestExecutor() {        RequestExecutor requestExecutor = new RequestExecutor();        // \u975e\u7a7a\u9a8c\u8bc1        requestExecutor.addValidator(new NotNullValidator());        // \u6700\u5927\u957f\u5ea6\u9a8c\u8bc1        requestExecutor.addValidator(new MaxLenValidator());        // \u6700\u5c0f\u957f\u5ea6\u9a8c\u8bc1        requestExecutor.addValidator(new MinLenValidator());        // \u6b63\u5219\u9a8c\u8bc1        requestExecutor.addValidator(new RegxValidator());        if (this.validators != null) {            this.validators.forEach(requestExecutor::addValidator);        }        if(this.requestInterceptors != null){            this.requestInterceptors.forEach(requestExecutor::addRequestInterceptor);        }        return requestExecutor;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8AutoConfiguration.java", "stars": "2", "class": {"name": "S8AutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "expressionEngine", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExpressionEngine", "snippet": "    public ExpressionEngine expressionEngine() {        return new ExpressionEngine();    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8AutoConfiguration.java", "stars": "2", "class": {"name": "S8AutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dynamicDataSource", "params": ["DataSource"], "throws": null, "modifiers": ["public"], "return_type": "DynamicDataSource", "snippet": "    public DynamicDataSource dynamicDataSource(DataSource dataSource){        DynamicDataSource dynamicDataSource = new DynamicDataSource();        dynamicDataSource.put(null,dataSource);        return dynamicDataSource;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8AutoConfiguration.java", "stars": "2", "class": {"name": "S8AutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "statementExecutor", "params": ["DynamicDataSource", "PageProvider", "ApplicationContext"], "throws": null, "modifiers": ["public"], "return_type": "StatementExecutor", "snippet": "    public StatementExecutor statementExecutor(DynamicDataSource dynamicDataSource, PageProvider pageProvider, ApplicationContext context) {        SqlExecutor sqlExecutor = new SqlExecutor(dynamicDataSource);        // \u6ce8\u518cUUID\u751f\u6210\u7b56\u7565        sqlExecutor.addKeyProvider(new UUIDKeyProvider());        if(this.keyProviders != null){            // \u6ce8\u518c\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e\u751f\u6210\u7b56\u7565            keyProviders.forEach(sqlExecutor::addKeyProvider);        }        sqlExecutor.setMapUnderscoreToCamelCase(properties.isMapUnderscoreToCamelCase());        return new StatementExecutor(sqlExecutor, pageProvider, context);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8AutoConfiguration.java", "stars": "2", "class": {"name": "S8AutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configuration", "params": ["StatementExecutor", "ExpressionEngine", "RequestExecutor", "RequestMappingHandlerMapping"], "throws": ["NoSuchMethodException"], "modifiers": ["public"], "return_type": "Configuration", "snippet": "    public Configuration configuration(StatementExecutor statementExecutor, ExpressionEngine expressionEngine, RequestExecutor requestExecutor, RequestMappingHandlerMapping requestMappingHandlerMapping) throws NoSuchMethodException {        Configuration configuration = new Configuration();        configuration.setRequestMappingHandlerMapping(requestMappingHandlerMapping);        configuration.setRequestHandler(requestExecutor);        configuration.setXmlLocations(properties.getXmlLocations());        configuration.setEnableRefresh(properties.isEnableRefresh());        configuration.setThrowException(properties.isThrowException());        configuration.setBanner(properties.isBanner());        configuration.setRequestWithRequestBodyHandleMethod(RequestExecutor.class.getDeclaredMethod(\"invoke\", HttpServletRequest.class, Object.class));        configuration.setRequestHandleMethod(RequestExecutor.class.getDeclaredMethod(\"invoke\", HttpServletRequest.class));        statementExecutor.setConfiguration(configuration);        requestExecutor.setConfiguration(configuration);        requestExecutor.setExpressionEngine(expressionEngine);        requestExecutor.setStatementExecutor(statementExecutor);        return configuration;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8AutoConfiguration.java", "stars": "2", "class": {"name": "S8AutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["OnListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setIgnoreDay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setIgnoreDay() {            mDayView.setVisibility(View.GONE);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setDate", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDate(long date) {            if (date > 0) {                setDate(new SimpleDateFormat(\"yyyyMMdd\", Locale.getDefault()).format(new Date(date)));            }            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDate(String date) {            // 20190519            if (date.matches(\"\\\\d{8}\")) {                setYear(date.substring(0, 4));                setMonth(date.substring(4, 6));                setDay(date.substring(6, 8));            // 2019-05-19            } else if (date.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {                setYear(date.substring(0, 4));                setMonth(date.substring(5, 7));                setDay(date.substring(8, 10));            }            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setYear", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setYear(String year) {            return setYear(Integer.valueOf(year));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setYear", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setYear(int year) {            int index = year - mStartYear;            if (index < 0) {                index = 0;            } else if (index > mYearAdapter.getItemCount() - 1) {                index = mYearAdapter.getItemCount() - 1;            }            mYearView.scrollToPosition(index);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMonth", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMonth(String month) {            return setMonth(Integer.valueOf(month));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMonth", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMonth(int month) {            int index = month - 1;            if (index < 0) {                index = 0;            } else if (index > mMonthAdapter.getItemCount() - 1) {                index = mMonthAdapter.getItemCount() - 1;            }            mMonthView.scrollToPosition(index);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setDay", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDay(String day) {            return setDay(Integer.valueOf(day));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setDay", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDay(int day) {            int index = day - 1;            if (index < 0) {                index = 0;            } else if (index > mDayAdapter.getItemCount() - 1) {                index = mDayAdapter.getItemCount() - 1;            }            mDayView.scrollToPosition(index);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onPicked", "params": ["RecyclerView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPicked(RecyclerView recyclerView, int position) {            // \u83b7\u53d6\u8fd9\u4e2a\u6708\u6700\u591a\u6709\u591a\u5c11\u5929            Calendar calendar = Calendar.getInstance(Locale.CHINA);            if (recyclerView == mYearView) {                calendar.set(mStartYear + position, mMonthManager.getPickedPosition(), 1);            } else if (recyclerView == mMonthView) {                calendar.set(mStartYear + mYearManager.getPickedPosition(), position, 1);            }            int day = calendar.getActualMaximum(Calendar.DATE);            if (mDayAdapter.getItemCount() != day) {                ArrayList<String> dayData = new ArrayList<>(day);                for (int i = 1; i <= day; i++) {                    dayData.add(i + \" \" + getString(R.string.common_day));                }                mDayAdapter.setData(dayData);            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View v) {            switch (v.getId()) {                case R.id.tv_ui_confirm:                    autoDismiss();                    if (mListener != null) {                        mListener.onSelected(getDialog(), mStartYear + mYearManager.getPickedPosition(), mMonthManager.getPickedPosition() + 1, mDayManager.getPickedPosition() + 1);                    }                    break;                case R.id.tv_ui_cancel:                    autoDismiss();                    if (mListener != null) {                        mListener.onCancel(getDialog());                    }                    break;                default:                    break;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": ["PickerLayoutManager"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "            public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {                return new ViewHolder();            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "PickerAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "                public void onBindView(int position) {                    mPickerView.setText(getItem(position));                }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/DateDialog.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "enableLogging", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void enableLogging() {\t\tDISABLED = false;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/L.java", "stars": "74", "class": {"name": "L", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "disableLogging", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void disableLogging() {\t\tDISABLED = true;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/L.java", "stars": "74", "class": {"name": "L", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "d", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void d(String message, Object... args) {\t\tlog(Log.DEBUG, null, message, args);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/L.java", "stars": "74", "class": {"name": "L", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "i", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void i(String message, Object... args) {\t\tlog(Log.INFO, null, message, args);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/L.java", "stars": "74", "class": {"name": "L", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "w", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void w(String message, Object... args) {\t\tlog(Log.WARN, null, message, args);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/L.java", "stars": "74", "class": {"name": "L", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "e", "params": ["Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void e(Throwable ex) {\t\tlog(Log.ERROR, ex, null);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/L.java", "stars": "74", "class": {"name": "L", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "e", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void e(String message, Object... args) {\t\tlog(Log.ERROR, null, message, args);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/L.java", "stars": "74", "class": {"name": "L", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "e", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void e(Throwable ex, String message, Object... args) {\t\tlog(Log.ERROR, ex, message, args);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/L.java", "stars": "74", "class": {"name": "L", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "log", "params": ["int", "Throwable", "String", "Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "\tprivate static void log(int priority, Throwable ex, String message, Object... args) {\t\tif (DISABLED) return;\t\tif (args.length > 0) {\t\t\tmessage = String.format(message, args);\t\t}\t\tString log;\t\tif (ex == null) {\t\t\tlog = message;\t\t} else {\t\t\tString logMessage = message == null ? ex.getMessage() : message;\t\t\tString logBody = Log.getStackTraceString(ex);\t\t\tlog = String.format(LOG_FORMAT, logMessage, logBody);\t\t}\t\tLog.println(priority, ImageLoader.TAG, log);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/L.java", "stars": "74", "class": {"name": "L", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        JOptionPane.showMessageDialog(null, \"Bienvenidos a matematicas locas\");        JOptionPane.showMessageDialog(null, \"Por favor ingresa tus datos\");        String nombre = JOptionPane.showInputDialog(\"Nombre\");        int edad = Integer.parseInt(JOptionPane.showInputDialog(\"edad\"));;        registoUsuario ni\u00f1o = new registoUsuario(nombre, edad);        System.out.println(ni\u00f1o.toString());        JOptionPane.showMessageDialog(null, \"para comenzar vamos a ingresar 2 numeros\");        double uno = Double.parseDouble(JOptionPane.showInputDialog(\"Escribe el primer numero\"));        double dos = Double.parseDouble(JOptionPane.showInputDialog(\"Escribe el segundo numero numero\"));        for(int i=0;i<=4;i++){                            int menu = Integer.parseInt(JOptionPane.showInputDialog(\"MENU\\nIngrese el n\u00famero correspondiente para \\n 1.Rngo numeros\\n 2.Operaciones basicas \\n 3.numeros pares o impares\"));        switch (menu) {            case 1:                JOptionPane.showMessageDialog(null, \"Conocer los numeros ejemplo escibiste 10 y 20\\n te mostraremos los numeros que se encuentren en ese rango\\n 11,12,13,14,15,16,17,18,19,20\");                rangoNumeros n = new rangoNumeros(uno, dos);                n.mostrarNumeros(uno, dos);                break;            case 2:                operacionesBasicas y = new operacionesBasicas(uno, dos);                int opcion = Integer.parseInt(JOptionPane.showInputDialog(\"MENU\\nElige la opcion que quieras \\n 1.sumar\\n 2.restar \\n 3multiplicar\\n dividir\"));                switch (opcion) {                    case 1:                        System.out.println(y.suma(uno, dos));                        break;                    case 2:                        System.out.println(y.resta(uno, dos));                        break;                    case 3:                        System.out.println(y.multiplicacion(uno, dos));                        break;                    case 4:                        System.out.println(y.division(uno, dos));                        break;                                      }                break;            case 3:                numerosParesEimpares x = new numerosParesEimpares(uno, dos);                int opc = Integer.parseInt(JOptionPane.showInputDialog(\"MENU\\nElige la opcion que quieras \\n 1.Conocer numeros Pares\\n 2.Conocer numeros impares\"));                switch (opc) {                    case 1:                        System.out.println(\"numeros pares\");                        x.mostrarNumerosPares(uno, dos);                        break;                    case 2:                        System.out.println(\"mostar impares\");                        x.mostrarNumerosIPares(uno, dos);                        break;                }        }        }    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/MatematicasLocas.java", "stars": "2", "class": {"name": "MatematicasLocas", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGiftId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGiftId() {        return giftId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGiftId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiftId(String giftId) {        this.giftId = giftId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGiftName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGiftName() {        return giftName;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGiftName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiftName(String giftName) {        this.giftName = giftName;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGiftDesc", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGiftDesc() {        return giftDesc;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGiftDesc", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiftDesc(String giftDesc) {        this.giftDesc = giftDesc;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGiftType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getGiftType() {        return giftType;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGiftType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiftType(int giftType) {        this.giftType = giftType;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPrice() {        return price;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPrice", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPrice(int price) {        this.price = price;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGiftUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGiftUrl() {        return giftUrl;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGiftUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiftUrl(String giftUrl) {        this.giftUrl = giftUrl;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getEnglish", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEnglish() {        return english;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setEnglish", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnglish(String english) {        this.english = english;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getTaditional", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTaditional() {        return taditional;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setTaditional", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTaditional(String taditional) {        this.taditional = taditional;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSvgaUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSvgaUrl() {        return svgaUrl;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSvgaUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSvgaUrl(String svgaUrl) {        this.svgaUrl = svgaUrl;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(@Nullable Object obj) {        if (obj instanceof Gift && !TextUtils.isEmpty(giftId)) {            final Gift gift = (Gift) obj;            return giftId.equals(gift.getGiftId());        }        return super.equals(obj);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "isSelected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSelected() {        return selected;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSelected", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSelected(boolean selected) {        this.selected = selected;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/Gift.java", "stars": "1", "class": {"name": "Gift", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/test/java/pl/com/nur/internationalspacestation/internationalspacestation/InternationalspacestationApplicationTests.java", "stars": "1", "class": {"name": "InternationalspacestationApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_list_video);        videoList = (ListView)findViewById(R.id.video_list);        listNormalAdapter = new SimpleListVideoModeAdapter(this);        videoList.setAdapter(listNormalAdapter);        videoList.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView view, int scrollState) {            }            @Override            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {                int lastVisibleItem = firstVisibleItem + visibleItemCount;                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e                if (GSYVideoManager.instance().getPlayPosition() >= 0) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = GSYVideoManager.instance().getPlayPosition();                    //\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                    if (GSYVideoManager.instance().getPlayTag().equals(SimpleListVideoModeAdapter.TAG)                            && (position < firstVisibleItem || position > lastVisibleItem)) {                        if(GSYVideoManager.isFullState(SimpleListVideoActivityMode1.this)) {                            return;                        }                        //\u5982\u679c\u6ed1\u51fa\u53bb\u4e86\u4e0a\u9762\u548c\u4e0b\u9762\u5c31\u662f\u5426\uff0c\u548c\u4eca\u65e5\u5934\u6761\u4e00\u6837                        GSYVideoManager.releaseAllVideos();                        listNormalAdapter.notifyDataSetChanged();                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleListVideoActivityMode1.java", "stars": "2", "class": {"name": "SimpleListVideoActivityMode1", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleListVideoActivityMode1.java", "stars": "2", "class": {"name": "SimpleListVideoActivityMode1", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        GSYVideoManager.onPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleListVideoActivityMode1.java", "stars": "2", "class": {"name": "SimpleListVideoActivityMode1", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        GSYVideoManager.onResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleListVideoActivityMode1.java", "stars": "2", "class": {"name": "SimpleListVideoActivityMode1", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        GSYVideoManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleListVideoActivityMode1.java", "stars": "2", "class": {"name": "SimpleListVideoActivityMode1", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {//        SpringApplication.run(SpringBootConfigApplication.class, args);        new SpringApplicationBuilder(SpringBootConfigApplication.class)                .bannerMode(Banner.Mode.CONSOLE).run(args);    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-config/src/main/java/com/soft1851/springboot/config/SpringBootConfigApplication.java", "stars": "3", "class": {"name": "SpringBootConfigApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Application"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void init(Application application) {        try {            Bundle metaData = application.getPackageManager().getApplicationInfo(application.getPackageName(), PackageManager.GET_META_DATA).metaData;            // \u53cb\u76df\u7edf\u8ba1\uff0cAPI \u8bf4\u660e\uff1ahttps://developer.umeng.com/docs/66632/detail/101814#h1-u521Du59CBu5316u53CAu901Au7528u63A5u53E32            UMConfigure.init(application, String.valueOf(metaData.get(\"UMENG_APPKEY\")),\"umeng\",UMConfigure.DEVICE_TYPE_PHONE,\"\");            // \u521d\u59cb\u5316\u5404\u4e2a\u5e73\u53f0\u7684 Key            PlatformConfig.setWeixin(String.valueOf(metaData.get(\"WX_APPID\")), String.valueOf(metaData.get(\"WX_APPKEY\")));            PlatformConfig.setQQZone(String.valueOf(metaData.get(\"QQ_APPID\")), String.valueOf(metaData.get(\"QQ_APPKEY\")));            //PlatformConfig.setSinaWeibo(String.valueOf(metaData.get(\"SN_APPID\")), String.valueOf(metaData.get(\"SN_APPKEY\")),\"http://sns.whalecloud.com\");            // \u8c46\u74e3RENREN\u5e73\u53f0\u76ee\u524d\u53ea\u80fd\u5728\u670d\u52a1\u5668\u7aef\u914d\u7f6e            //PlatformConfig.setYixin(\"yxc0614e80c9304c11b0391514d09f13bf\");            //PlatformConfig.setTwitter(\"3aIN7fuF685MuZ7jtXkQxalyi\", \"MK6FEYG63eWcpDFgRYw4w9puJhzDl0tyuqWjZ3M7XJuuG7mMbO\");            //PlatformConfig.setAlipay(\"2015111700822536\");            //PlatformConfig.setLaiwang(\"laiwangd497e70d4\", \"d497e70d4c3e4efeab1381476bac4c5e\");            //PlatformConfig.setPinterest(\"1439206\");            //PlatformConfig.setKakao(\"e4f60e065048eb031e235c806b31c70f\");            //PlatformConfig.setDing(\"dingoalmlnohc0wggfedpk\");            //PlatformConfig.setVKontakte(\"5764965\",\"5My6SNliAaLxEm3Lyd9J\");            //PlatformConfig.setDropbox(\"oz8v5apet3arcdy\",\"h7p2pjbzkkxt02a\");        } catch (PackageManager.NameNotFoundException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onResume", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onResume(Activity activity) {        // \u624b\u52a8\u7edf\u8ba1\u9875\u9762         MobclickAgent.onPageStart(activity.getTitle().toString());        // \u53cb\u76df\u7edf\u8ba1        MobclickAgent.onResume(activity);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onPause", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onPause(Activity activity) {        // \u624b\u52a8\u7edf\u8ba1\u9875\u9762\uff0c\u5fc5\u987b\u4fdd\u8bc1 onPageEnd \u5728 onPause \u4e4b\u524d\u8c03\u7528\uff0c\u56e0\u4e3aSDK\u4f1a\u5728 onPause \u4e2d\u4fdd\u5b58onPageEnd\u7edf\u8ba1\u5230\u7684\u9875\u9762\u6570\u636e        MobclickAgent.onPageStart(activity.getTitle().toString());        // \u53cb\u76df\u7edf\u8ba1        MobclickAgent.onPause(activity);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onResume", "params": ["Fragment"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onResume(Fragment fragment) {        // \u53cb\u76df\u7edf\u8ba1        MobclickAgent.onResume(fragment.getContext());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onPause", "params": ["Fragment"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onPause(Fragment fragment) {        // \u53cb\u76df\u7edf\u8ba1        MobclickAgent.onPause(fragment.getContext());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "share", "params": ["Activity", "Platform", "UmengShare", "UmengShare"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void share(Activity activity, Platform platform, UmengShare.ShareData data, UmengShare.OnShareListener listener) {        if (isAppInstalled(activity, platform.getPackageName())) {            new ShareAction(activity)                    .setPlatform(platform.getThirdParty())                    .withMedia(data.create())                    .setCallback(listener != null ? new UmengShare.ShareListenerWrapper(platform.getThirdParty(), listener) : null)                    .share();        } else {            // \u5f53\u5206\u4eab\u7684\u5e73\u53f0\u8f6f\u4ef6\u53ef\u80fd\u6ca1\u6709\u88ab\u5b89\u88c5\u7684\u65f6\u5019            if (listener != null) {                listener.onError(platform, new PackageManager.NameNotFoundException(\"Is not installed\"));            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "login", "params": ["Activity", "Platform", "UmengLogin"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void login(Activity activity, Platform platform, UmengLogin.OnLoginListener listener) {        if (isAppInstalled(activity, platform)) {            try {                // \u5220\u9664\u65e7\u7684\u7b2c\u4e09\u65b9\u767b\u5f55\u6388\u6743                UMShareAPI.get(activity).deleteOauth(activity, platform.getThirdParty(), null);                // \u8981\u5148\u7b49\u4e0a\u9762\u7684\u4ee3\u7801\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e                Thread.sleep(200);                // \u5f00\u542f\u65b0\u7684\u7b2c\u4e09\u65b9\u767b\u5f55\u6388\u6743                UMShareAPI.get(activity).getPlatformInfo(activity, platform.getThirdParty(), listener != null ? new UmengLogin.LoginListenerWrapper(platform.getThirdParty(), listener) : null);            } catch (InterruptedException ignored) {}        } else {            // \u5f53\u767b\u5f55\u7684\u5e73\u53f0\u8f6f\u4ef6\u53ef\u80fd\u6ca1\u6709\u88ab\u5b89\u88c5\u7684\u65f6\u5019            if (listener != null) {                listener.onError(platform, new PackageManager.NameNotFoundException(\"Is not installed\"));            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onActivityResult", "params": ["Activity", "int", "int", "Intent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onActivityResult(Activity activity, int requestCode, int resultCode, @Nullable Intent data) {        UMShareAPI.get(activity).onActivityResult(requestCode, resultCode, data);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isAppInstalled", "params": ["Context", "Platform"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isAppInstalled(Context context, Platform platform) {        return isAppInstalled(context, platform.getPackageName());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isAppInstalled", "params": ["Context", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isAppInstalled(Context context, @NonNull final String packageName) {        try {            context.getPackageManager().getApplicationInfo(packageName, 0);            return true;        } catch (PackageManager.NameNotFoundException ignored) {            return false;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/umeng/src/main/java/com/hjq/umeng/UmengClient.java", "stars": "1", "class": {"name": "UmengClient", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getErrorCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ErrorCode", "snippet": "    public ErrorCode getErrorCode() {        return errorCode;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/common/UnexpectedException.java", "stars": "2", "class": {"name": "UnexpectedException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage() {        return MessageFormat.format(errorCode.getDefaultMessage(), this.parameters);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/common/UnexpectedException.java", "stars": "2", "class": {"name": "UnexpectedException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Throwable", "snippet": "    public Throwable getCause() {        return cause;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/common/UnexpectedException.java", "stars": "2", "class": {"name": "UnexpectedException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "printStackTrace", "params": ["PrintStream"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void printStackTrace(final PrintStream stream) {        super.printStackTrace(stream);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/common/UnexpectedException.java", "stars": "2", "class": {"name": "UnexpectedException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "printStackTrace", "params": ["PrintWriter"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void printStackTrace(final PrintWriter writer) {        super.printStackTrace(writer);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/common/UnexpectedException.java", "stars": "2", "class": {"name": "UnexpectedException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExternalExtendsXmlConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testExternalExtendsXmlConfig() throws Exception {    testCrossReference(getSqlSessionFactoryXmlConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsTest.java", "stars": "15", "class": {"name": "ResultMapExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testExternalExtendsJavaConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testExternalExtendsJavaConfig() throws Exception {    testCrossReference(getSqlSessionFactoryJavaConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsTest.java", "stars": "15", "class": {"name": "ResultMapExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCrossReference", "params": ["SqlSessionFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void testCrossReference(SqlSessionFactory sqlSessionFactory) {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      ResultMapReferencePersonMapper personMapper = sqlSession.getMapper(ResultMapReferencePersonMapper.class);      Pet pet = personMapper.selectPet(1);      assertEquals(Integer.valueOf(1), pet.getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsTest.java", "stars": "15", "class": {"name": "ResultMapExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryXmlConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {    try (Reader configReader = Resources            .getResourceAsReader(\"org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsMapperConfig.xml\")) {      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader);      initDb(sqlSessionFactory);      return sqlSessionFactory;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsTest.java", "stars": "15", "class": {"name": "ResultMapExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryJavaConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(), new UnpooledDataSource(        \"org.hsqldb.jdbcDriver\", \"jdbc:hsqldb:mem:xmlextref\", null));    configuration.setEnvironment(environment);    configuration.addMapper(ResultMapReferencePersonMapper.class);    configuration.addMapper(ResultMapReferencePetMapper.class);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    initDb(sqlSessionFactory);    return sqlSessionFactory;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsTest.java", "stars": "15", "class": {"name": "ResultMapExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initDb", "params": ["SqlSessionFactory"], "throws": ["IOException", "SQLException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void initDb(SqlSessionFactory sqlSessionFactory) throws IOException, SQLException {    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/xml_external_ref/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsTest.java", "stars": "15", "class": {"name": "ResultMapExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "add", "params": ["AbstractFile"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void add(AbstractFile file) {        throw new UnsupportedOperationException(\"\u4e0d\u652f\u6301\u8be5\u64cd\u4f5c\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/AudioFile.java", "stars": "2", "class": {"name": "AudioFile", "extends": "AbstractFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["AbstractFile"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void remove(AbstractFile file) {        throw new UnsupportedOperationException(\"\u4e0d\u652f\u6301\u8be5\u64cd\u4f5c\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/AudioFile.java", "stars": "2", "class": {"name": "AudioFile", "extends": "AbstractFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "getChild", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "AbstractFile", "snippet": "    public AbstractFile getChild(int i) {        throw new UnsupportedOperationException(\"\u4e0d\u652f\u6301\u8be5\u64cd\u4f5c\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/AudioFile.java", "stars": "2", "class": {"name": "AudioFile", "extends": "AbstractFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "killVirus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void killVirus() {        System.out.println(\"**\u5bf9\u97f3\u9891\u6587\u4ef6\" + name + \"\u8fdb\u884c\u6740\u6bd2\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/AudioFile.java", "stars": "2", "class": {"name": "AudioFile", "extends": "AbstractFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "assignExecutor", "params": ["int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void assignExecutor(final int executorId, final int executionId)      throws ExecutorManagerException {    final String UPDATE =        \"UPDATE execution_flows SET executor_id=? where exec_id=?\";    try {      if (this.executorDao.fetchExecutor(executorId) == null) {        throw new ExecutorManagerException(String.format(            \"Failed to assign non-existent executor Id: %d to execution : %d  \",            executorId, executionId));      }      if (this.dbOperator.update(UPDATE, executorId, executionId) == 0) {        throw new ExecutorManagerException(String.format(            \"Failed to assign executor Id: %d to non-existent execution : %d  \",            executorId, executionId));      }    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error updating executor id \"          + executorId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/AssignExecutorDao.java", "stars": "18", "class": {"name": "AssignExecutorDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unassignExecutor", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "void", "snippet": "  void unassignExecutor(final int executionId) throws ExecutorManagerException {    final String UPDATE = \"UPDATE execution_flows SET executor_id=NULL where exec_id=?\";    try {      final int rows = this.dbOperator.update(UPDATE, executionId);      if (rows == 0) {        throw new ExecutorManagerException(String.format(            \"Failed to unassign executor for execution : %d  \", executionId));      }    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error updating execution id \" + executionId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/AssignExecutorDao.java", "stars": "18", "class": {"name": "AssignExecutorDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateToken", "params": ["String", "ZonedDateTime", "ZonedDateTime"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String generateToken(final String userUuid, final ZonedDateTime issuedDateTime, final ZonedDateTime expiresDateTime) {        final Date issuedAt = new Date(issuedDateTime.getLong(ChronoField.INSTANT_SECONDS));        final Date expiresAt = new Date(expiresDateTime.getLong(ChronoField.INSTANT_SECONDS));        return JWT.create().withIssuer(TOKEN_ISSUER) //                .withKeyId(UUID.randomUUID().toString())                .withAudience(userUuid) //                .withIssuedAt(issuedAt).withExpiresAt(expiresAt).sign(algorithm);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/JwtTokenProvider.java", "stars": "2", "class": {"name": "JwtTokenProvider", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setupAllMetrics", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setupAllMetrics() {    this.dbConnectionMeter = this.metricsManager.addMeter(\"DB-Connection-meter\");    this.dbConnectionFailMeter = this.metricsManager.addMeter(\"DB-Fail-Connection-meter\");    this.queryFailMeter = this.metricsManager.addMeter(\"DB-Fail-Query-meter\");    this.updateFailMeter = this.metricsManager.addMeter(\"DB-Fail-Update-meter\");    this.transactionFailMeter = this.metricsManager.addMeter(\"DB-Fail-Transaction-meter\");    this.metricsManager.addGauge(\"dbConnectionTime\", this.dbConnectionTime::get);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DBMetrics.java", "stars": "18", "class": {"name": "DBMetrics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markDBConnection", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void markDBConnection() {    /*     * This method should be Thread Safe.     * Two reasons that we don't make this function call synchronized:     * 1). drop wizard metrics deals with concurrency internally;     * 2). mark is basically a math addition operation, which should not cause race condition issue.     */    this.dbConnectionMeter.mark();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DBMetrics.java", "stars": "18", "class": {"name": "DBMetrics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markDBFailQuery", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void markDBFailQuery() {    this.queryFailMeter.mark();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DBMetrics.java", "stars": "18", "class": {"name": "DBMetrics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markDBFailUpdate", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void markDBFailUpdate() {    this.updateFailMeter.mark();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DBMetrics.java", "stars": "18", "class": {"name": "DBMetrics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markDBFailTransaction", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void markDBFailTransaction() {    this.transactionFailMeter.mark();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DBMetrics.java", "stars": "18", "class": {"name": "DBMetrics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "markDBFailConnection", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void markDBFailConnection() {    this.dbConnectionFailMeter.mark();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DBMetrics.java", "stars": "18", "class": {"name": "DBMetrics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDBConnectionTime", "params": ["long"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setDBConnectionTime(final long milliseconds) {    this.dbConnectionTime.set(milliseconds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DBMetrics.java", "stars": "18", "class": {"name": "DBMetrics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        return  \"#extension GL_OES_EGL_image_external : require\\n\" +                \"precision mediump float;\\n\" +                \"             uniform samplerExternalOES sTexture; \\n\" +                \"             varying vec2 vTextureCoord; \\n\" +                \"  \\n\" +                \"             void main() \\n\" +                \"             { \\n\" +                \"              vec4 sample0,sample1,sample2,sample3; \\n\" +                \"              float fstep=\" + fstep +\"; \\n\" +                \"              sample0=texture2D(sTexture,vec2(vTextureCoord.x-fstep,vTextureCoord.y-fstep)); \\n\" +                \"              sample1=texture2D(sTexture,vec2(vTextureCoord.x+fstep,vTextureCoord.y-fstep)); \\n\" +                \"              sample2=texture2D(sTexture,vec2(vTextureCoord.x+fstep,vTextureCoord.y+fstep)); \\n\" +                \"              sample3=texture2D(sTexture,vec2(vTextureCoord.x-fstep,vTextureCoord.y+fstep)); \\n\" +                \"              vec4 color=(sample0+sample1+sample2+sample3) / 4.0; \\n\" +                \"              gl_FragColor=color; \\n\" +                \"             } \";    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/OverlayEffect.java", "stars": "2", "class": {"name": "OverlayEffect", "extends": null, "implements": ["GSYVideoGLView"], "modifiers": ["public"]}}, {"method_name": "setTarget", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTarget(Object target) {        this.target = target;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/proxy/dynamicproxy/DynamicProxy.java", "stars": "2", "class": {"name": "DynamicProxy", "extends": null, "implements": ["InvocationHandler"], "modifiers": ["public"]}}, {"method_name": "getProxy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getProxy(){        return Proxy.newProxyInstance(this.getClass().getClassLoader(),                target.getClass().getInterfaces(),this);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/proxy/dynamicproxy/DynamicProxy.java", "stars": "2", "class": {"name": "DynamicProxy", "extends": null, "implements": ["InvocationHandler"], "modifiers": ["public"]}}, {"method_name": "invoke", "params": ["Object", "Method", "Object"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        seeHouse();        Object invoke = method.invoke(target, args);        charge();        return invoke;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/proxy/dynamicproxy/DynamicProxy.java", "stars": "2", "class": {"name": "DynamicProxy", "extends": null, "implements": ["InvocationHandler"], "modifiers": ["public"]}}, {"method_name": "seeHouse", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void seeHouse(){        System.out.println(\"\u4e2d\u4ecb\u5e26\u4f60\u770b\u623f\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/proxy/dynamicproxy/DynamicProxy.java", "stars": "2", "class": {"name": "DynamicProxy", "extends": null, "implements": ["InvocationHandler"], "modifiers": ["public"]}}, {"method_name": "charge", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void charge(){        //\u662f\u5426\u6536\u8d39\u5e94\u6839\u636e\u7528\u6237\u662f\u5426\u6ee1\u610f\u7b49\u8fdb\u884c\u903b\u8f91\u5224\u65ad\uff0c\u6b64\u5904\u5c31\u4e0d\u505a\u8fc7\u591a\u5904\u7406\u4e86        System.out.println(\"\u6536\u53d6\u8d39\u7528\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/proxy/dynamicproxy/DynamicProxy.java", "stars": "2", "class": {"name": "DynamicProxy", "extends": null, "implements": ["InvocationHandler"], "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getLeft().checkType();\t\tthis.getRight().checkType();\t\tTypeCode[] typeCodes = {TypeCode.INTEGER, TypeCode.FLOAT};\t\tgetLeft().getType().assertType(this, typeCodes);\t\tgetLeft().getType().assertType(this, getRight().getType());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprLE.java", "stars": "3", "class": {"name": "ExprLE", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = \"(\" + getLeft().generateCode()\t\t\t\t+ \" <= \" + getRight().generateCode() + \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprLE.java", "stars": "3", "class": {"name": "ExprLE", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o1 = getLeft().constEval(environment);\t\tObject o2 = getRight().constEval(environment);\t\tif ((o1 instanceof Integer) && (o2 instanceof Integer)) \t\t\treturn new Boolean((Integer)o1 <= (Integer)o2);\t\telse if ((o1 instanceof Float) && (o2 instanceof Float)) \t\t\treturn new Boolean((Float)o1 <= (Float)o2);\t\telse\t\t\tthrow new TypeException(\"Impossible de calculer la constante, erreur de type\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprLE.java", "stars": "3", "class": {"name": "ExprLE", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"(\" + this.getLeft() + \" <= \" + this.getRight() + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprLE.java", "stars": "3", "class": {"name": "ExprLE", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "isDebug", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isDebug() {        return BuildConfig.DEBUG;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/AppConfig.java", "stars": "1", "class": {"name": "AppConfig", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPackageName", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getPackageName() {        return BuildConfig.APPLICATION_ID;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/AppConfig.java", "stars": "1", "class": {"name": "AppConfig", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getVersionName", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getVersionName() {        return BuildConfig.VERSION_NAME;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/AppConfig.java", "stars": "1", "class": {"name": "AppConfig", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getVersionCode", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getVersionCode() {        return BuildConfig.VERSION_CODE;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/AppConfig.java", "stars": "1", "class": {"name": "AppConfig", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getProductFlavors", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getProductFlavors() {        return BuildConfig.FLAVOR;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/AppConfig.java", "stars": "1", "class": {"name": "AppConfig", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getBuglyId", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getBuglyId() {        return BuildConfig.BUGLY_ID;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/AppConfig.java", "stars": "1", "class": {"name": "AppConfig", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        long s = System.currentTimeMillis();        //1.\u521b\u5efa\u5b57\u8282\u7f13\u51b2\u8f93\u5165\u6d41\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u5165\u6d41        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"c:\\\\1.jpg\"));        //2.\u521b\u5efa\u5b57\u8282\u7f13\u51b2\u8f93\u51fa\u6d41\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u51fa\u6d41        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"d:\\\\1.jpg\"));        //3.\u4f7f\u7528\u5b57\u8282\u7f13\u51b2\u8f93\u5165\u6d41\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read,\u8bfb\u53d6\u6587\u4ef6        //\u4e00\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5199\u5165\u4e00\u4e2a\u5b57\u8282\u7684\u65b9\u5f0f        /*int len = 0;        while((len = bis.read())!=-1){            bos.write(len);        }*/        //\u4f7f\u7528\u6570\u7ec4\u7f13\u51b2\u8bfb\u53d6\u591a\u4e2a\u5b57\u8282,\u5199\u5165\u591a\u4e2a\u5b57\u8282        byte[] bytes = new byte[1024];        int len = 0;        while((len = bis.read(bytes))!=-1){            bos.write(bytes,0,len);        }        bos.close();        bis.close();        long e = System.currentTimeMillis();        System.out.println(\"\u590d\u5236\u6587\u4ef6\u5171\u8017\u65f6:\"+(e-s)+\"\u6beb\u79d2\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo02/CopyFile/Demo02CopyFile.java", "stars": "2", "class": {"name": "Demo02CopyFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tTVButterApplication.getAppContext()\t\t\t\t.getComponent()\t\t\t\t.inject(this);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onActivityCreated(Bundle savedInstanceState) {\t\tsuper.onActivityCreated(savedInstanceState);\t\tmBackgroundUpdater.initialise(getActivity(), R.color.black);\t\tListRowPresenter mListRowPresenter = new ListRowPresenter();\t\tmListRowPresenter.setShadowEnabled(false);\t\tmRowsAdapter = new ArrayObjectAdapter(mListRowPresenter);\t\tsetSearchResultProvider(this);\t\tsetOnItemViewClickedListener(getDefaultItemClickedListener());\t\tsetOnItemViewSelectedListener(new ItemViewSelectedListener());\t\tmDelayedLoad = new SearchRunnable();\t\t//setup row to use for loading\t\tmLoadingRow = createLoadingRow();\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "getResultsAdapter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ObjectAdapter", "snippet": "\tpublic ObjectAdapter getResultsAdapter() {\t\treturn mRowsAdapter;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "createLoadingRow", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ListRow", "snippet": "\tprivate ListRow createLoadingRow() {\t\tHeaderItem loadingHeader = new HeaderItem(0, getString(R.string.search_results));\t\tArrayObjectAdapter loadingRowAdapter = new ArrayObjectAdapter(new MediaCardPresenter(getActivity()));\t\tloadingRowAdapter.add(new MediaCardPresenter.MediaCardItem(true));\t\treturn new ListRow(loadingHeader, loadingRowAdapter);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "queryByWords", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void queryByWords(String words) {\t\tmRowsAdapter.clear();\t\tif (!TextUtils.isEmpty(words)) {\t\t\tmDelayedLoad.setSearchQuery(words);\t\t\tmHandler.removeCallbacks(mDelayedLoad);\t\t\tmHandler.postDelayed(mDelayedLoad, SEARCH_DELAY_MS);\t\t}\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "onQueryTextChange", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onQueryTextChange(String newQuery) {\t\tif (newQuery.length() > 3)\t\t\tqueryByWords(newQuery);\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "onQueryTextSubmit", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onQueryTextSubmit(String query) {\t\tqueryByWords(query);\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "loadRows", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void loadRows(String query) {\t\t//mShowsProvider.cancel();\t\tmRowsAdapter.clear();\t\taddLoadingRow();\t\tmSearchFilter.setKeywords(query);\t\tmSearchFilter.setPage(1);\t\tif (providerManager.hasProvider(ProviderManager.PROVIDER_TYPE_SHOW)) {\t\t\tMediaProvider mediaProvider = providerManager.getMediaProvider(ProviderManager.PROVIDER_TYPE_SHOW);\t\t\t//noinspection ConstantConditions\t\t\tmediaProvider.cancel();\t\t\tmediaProvider.getList(mSearchFilter, new MediaProvider.Callback() {\t\t\t\t@Override\t\t\t\tpublic void onSuccess(MediaProvider.Filters filters, ArrayList<Media> items) {\t\t\t\t\tList<MediaCardPresenter.MediaCardItem> list = MediaCardPresenter.convertMediaToOverview(items);\t\t\t\t\taddRow(getString(R.string.show_results), list);\t\t\t\t}\t\t\t\t@Override\t\t\t\tpublic void onFailure(Exception e) {\t\t\t\t}\t\t\t});\t\t}\t\tif (providerManager.hasProvider(ProviderManager.PROVIDER_TYPE_MOVIE)) {\t\t\tMediaProvider mediaProvider = providerManager.getMediaProvider(ProviderManager.PROVIDER_TYPE_MOVIE);\t\t\t//noinspection ConstantConditions\t\t\tmediaProvider.cancel();\t\t\tmediaProvider.getList(mSearchFilter, new MediaProvider.Callback() {\t\t\t\t@Override\t\t\t\tpublic void onSuccess(MediaProvider.Filters filters, ArrayList<Media> items) {\t\t\t\t\tList<MediaCardPresenter.MediaCardItem> list = MediaCardPresenter.convertMediaToOverview(items);\t\t\t\t\taddRow(getString(R.string.movie_results), list);\t\t\t\t}\t\t\t\t@Override\t\t\t\tpublic void onFailure(Exception e) {\t\t\t\t}\t\t\t});\t\t}\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "addRow", "params": ["String", "List<MediaCardPresenter>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void addRow(String title, List<MediaCardPresenter.MediaCardItem> items) {\t\tmRowsAdapter.remove(mLoadingRow);\t\tHeaderItem header = new HeaderItem(0, title);\t\tArrayObjectAdapter listRowAdapter = new ArrayObjectAdapter(new MediaCardPresenter(getActivity()));\t\tlistRowAdapter.addAll(0, items);\t\tmRowsAdapter.add(new ListRow(header, listRowAdapter));\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "addLoadingRow", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void addLoadingRow() {\t\tmRowsAdapter.add(mLoadingRow);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "getDefaultItemClickedListener", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "OnItemViewClickedListener", "snippet": "\tprotected OnItemViewClickedListener getDefaultItemClickedListener() {\t\treturn new OnItemViewClickedListener() {\t\t\t@Override public void onItemClicked(Presenter.ViewHolder itemViewHolder, Object object, RowPresenter.ViewHolder rowViewHolder,\t\t\t\t\tRow row) {\t\t\t\tif (object instanceof MediaCardPresenter.MediaCardItem) {\t\t\t\t\tMediaCardPresenter.MediaCardItem item = (MediaCardPresenter.MediaCardItem) object;\t\t\t\t\tMedia media = item.getMedia();\t\t\t\t\tTVMediaDetailActivity.startActivity(getActivity(), media);\t\t\t\t}\t\t\t}\t\t};\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "TVSearchFragment", "extends": "androidx", "implements": ["androidx"], "modifiers": ["public"]}}, {"method_name": "onItemSelected", "params": ["Presenter", "Object", "RowPresenter", "Row"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onItemSelected(Presenter.ViewHolder itemViewHolder, Object item,\t\t\t\tRowPresenter.ViewHolder rowViewHolder, Row row) {\t\t\tif (item instanceof MediaCardPresenter.MediaCardItem) {\t\t\t\tMediaCardPresenter.MediaCardItem overviewItem = (MediaCardPresenter.MediaCardItem) item;\t\t\t\tif (overviewItem.isLoading()) return;\t\t\t\tmBackgroundUpdater.updateBackgroundAsync(overviewItem.getMedia().headerImage);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "ItemViewSelectedListener", "extends": null, "implements": ["OnItemViewSelectedListener"], "modifiers": ["private", "final"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void run() {\t\t\tloadRows(searchQuery);\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "SearchRunnable", "extends": null, "implements": ["Runnable"], "modifiers": ["private"]}}, {"method_name": "setSearchQuery", "params": ["String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid setSearchQuery(String value) {\t\t\tthis.searchQuery = value;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVSearchFragment.java", "stars": "4", "class": {"name": "SearchRunnable", "extends": null, "implements": ["Runnable"], "modifiers": ["private"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        super.init();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/NumberComponent.java", "stars": "12", "class": {"name": "NumberComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "moved", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moved(float x, float y) {        super.moved(x, y);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/NumberComponent.java", "stars": "12", "class": {"name": "NumberComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawScreen", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawScreen(int mx, int my, float partialTicks) {        super.drawScreen(mx, my, partialTicks);        float length = MathHelper.floor((((Number) numberProperty.getValue()).floatValue() - numberProperty.getMinimum().floatValue()) / (numberProperty.getMaximum().floatValue() - numberProperty.getMinimum().floatValue()) * (getW() - 1));        RenderUtil.drawRect2(getX(), getY(), getW(), getH(), new Color(5, 5, 5, 200).getRGB());        RenderUtil.drawRect2(getX() + .5f, getY() + getH() - 1.5f, length, 1, Color.WHITE.getRGB());        Menu.font.drawStringWithShadow(getLabel() + \": \" + numberProperty.getValue(), getX() + 2, getY() + getH() / 2 - Menu.font.getHeight() / 2 + 1,  -1);        if (sliding) {            if (numberProperty.getValue() instanceof Float) {                float preval = ((mx - getX()) * (numberProperty.getMaximum().floatValue() - numberProperty.getMinimum().floatValue()) / getW() + numberProperty.getMinimum().floatValue());                numberProperty.setValue(MathUtil.roundFloat(preval, 2));            } else if (numberProperty.getValue() instanceof Integer) {                int preval = (int) ((mx - getX()) * (numberProperty.getMaximum().intValue() - numberProperty.getMinimum().intValue()) / getW() + numberProperty.getMinimum().intValue());                numberProperty.setValue(preval);            } else if (numberProperty.getValue() instanceof Double) {                double preval = ((mx - getX()) * (numberProperty.getMaximum().doubleValue() - numberProperty.getMinimum().doubleValue()) / getW() + numberProperty.getMinimum().doubleValue());                numberProperty.setValue(MathUtil.roundDouble(preval, 2));            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/NumberComponent.java", "stars": "12", "class": {"name": "NumberComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseClicked(int mx, int my, int button) {        super.mouseClicked(mx, my, button);        if ((MouseUtil.withinBounds(mx, my, getX(), getY(), getW(), getH())) && button == 0) sliding = true;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/NumberComponent.java", "stars": "12", "class": {"name": "NumberComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseReleased", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseReleased(int mx, int my, int button) {        super.mouseReleased(mx, my, button);        if (sliding) sliding = false;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/NumberComponent.java", "stars": "12", "class": {"name": "NumberComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "onGuiClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onGuiClosed() {        super.onGuiClosed();        if (sliding) sliding = false;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/NumberComponent.java", "stars": "12", "class": {"name": "NumberComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutResId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutResId() {        return R.layout.activity_member_list;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/MemberListActivity.java", "stars": "2", "class": {"name": "MemberListActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        Toolbar toolbar = findViewById(R.id.toolbar);        mToolbarTitle = findViewById(R.id.toolbar_title);        toolbar.setTitle(\"\");        mToolbarTitle.setText(\"\u6210\u5458\u5217\u8868\");        toolbar.setNavigationOnClickListener(v -> finish());        recyclerView = findViewById(R.id.recyclerView_members);        adapter = new RoomMemberAdapter(new ArrayList<>(), MemberListActivity.this);        LinearLayoutManager layoutManager = new LinearLayoutManager(this);        layoutManager.setOrientation(OrientationHelper.VERTICAL);        recyclerView.setLayoutManager(layoutManager);        recyclerView.addItemDecoration(new DividerItemDecoration(this, DividerItemDecoration.VERTICAL));        recyclerView.setAdapter(adapter);        recyclerView.setItemAnimator(new DefaultItemAnimator());        adapter.setOnItemChildClickListener(new RoomMemberAdapter.OnItemChildClickListener() {            @Override            public void onItemChildClick(View view, int position) {                android.util.Log.d(TAG, \"onItemChildClick: \" + view.getId());                switch (view.getId()) {                    case R.id.btn_muted:                        mutedMember(adapter.getData().get(position).getUid(), position);                        break;                    case R.id.btn_kicked:                        if (mRemoteUid == adapter.getData().get(position).getUid() && isSubscribeRemote) {                            Toast.makeText(MemberListActivity.this, \"\u8bf7\u5148\u53d6\u6d88\u4e0e\u8be5\u7528\u6237\u8ba2\u9605\u72b6\u6001\", Toast.LENGTH_SHORT).show();                        } else {                            kickMember(adapter.getData().get(position).getUid(), position);                        }                        break;                    case R.id.btn_closeroom:                        if (isLive) {                            Toast.makeText(MemberListActivity.this, \"\u8bf7\u5173\u95ed\u76f4\u64ad\u518d\u9500\u6bc1\u623f\u95f4\", Toast.LENGTH_SHORT).show();                            return;                        }                        if (isSubscribeRemote) {                            Toast.makeText(MemberListActivity.this, \"\u8bf7\u53d6\u6d88\u8ba2\u9605\u518d\u9000\u51fa\u623f\u95f4\", Toast.LENGTH_SHORT).show();                            return;                        }                        HMR.getService(ChatRoomService.class).dismissChatRoom(mChatRoom, new HMR.Completion() {                            @Override                            public void onSuccess() {                                finish();                            }                            @Override                            public void onFailed(Error err) {                                Toast.makeText(MemberListActivity.this, \"\u9500\u6bc1\u623f\u95f4\u5931\u8d25\", Toast.LENGTH_SHORT).show();                            }                        });                        break;                }            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/MemberListActivity.java", "stars": "2", "class": {"name": "MemberListActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        Intent intent = getIntent();        roomId = intent.getStringExtra(Constant.ROOMID_KEY);        ownerId = intent.getLongExtra(Constant.ROOMOWNERID_KEY, 0);        mRemoteUid = intent.getLongExtra(Constant.ROOMISSUBCRIBE_MREMOTEUID_KEY, 0);        isLive = intent.getBooleanExtra(Constant.ROOMISLIVE_KEY, false);        isSubscribeRemote = intent.getBooleanExtra(Constant.ROOMISSUBCRIBE_KEY, false);        mChatRoom = new ChatRoom(Long.parseLong(roomId));        android.util.Log.d(TAG, \"initData: \" + ownerId);        HummerManager.getInstance().obtainMemberList(MemberListActivity.this, mChatRoom, userInfos, ownerId, adapter);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/MemberListActivity.java", "stars": "2", "class": {"name": "MemberListActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "kickMember", "params": ["long", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void kickMember(long uid, int position) {        HMR.getService(ChatRoomService.class).kick(mChatRoom, new User(uid), null, new HMR.Completion() {            @Override            public void onSuccess() {                Log.i(\"kickMember\", String.format(Locale.US, \"success, roomId:%d\", mChatRoom.getId()));                if (adapter.getData().get(position).getUid() == uid) {                    adapter.getData().remove(position);                    adapter.notifyDataSetChanged();                }            }            @Override            public void onFailed(Error err) {                Toast.makeText(MemberListActivity.this, \"\u8e22\u51fa\u623f\u95f4\u5931\u8d25\", Toast.LENGTH_SHORT).show();                Log.i(\"kickMember\", String.format(Locale.US, \"failed, err:%s\", err.toString()));            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/MemberListActivity.java", "stars": "2", "class": {"name": "MemberListActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "mutedMember", "params": ["long", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void mutedMember(long uid, int position) {        if (adapter.getData().get(position).isMuted()) {            HMR.getService(ChatRoomService.class).unmuteMember(mChatRoom, new User(uid), null,                    new HMR.Completion() {                        @Override                        public void onSuccess() {                            if (adapter.getData().get(position).getUid() == uid) {                                adapter.getData().get(position).setMuted(false);                                adapter.notifyItemChanged(position, adapter.getData().get(position));//diff\u5237\u65b0\u810f\u6570\u636e                            }                        }                        @Override                        public void onFailed(Error err) {                            String str = adapter.getData().get(position).isMuted() ? \"\u6062\u590d\u53d1\u8a00\u5931\u8d25\" : \"\u7981\u8a00\u5931\u8d25\";                            Toast.makeText(MemberListActivity.this, str, Toast.LENGTH_SHORT).show();                            Log.i(TAG, Trace.once().method(\"unmuteMember\").msg(\"failed, err:%s\", err.toString()));                        }                    });        } else {            HMR.getService(ChatRoomService.class).muteMember(mChatRoom, new User(uid), null, new HMR.Completion() {                @Override                public void onSuccess() {                    if (adapter.getData().get(position).getUid() == uid) {                        adapter.getData().get(position).setMuted(true);                        adapter.notifyItemChanged(position, adapter.getData().get(position));//diff\u5237\u65b0\u810f\u6570\u636e                    }                }                @Override                public void onFailed(Error err) {                    Log.i(TAG, Trace.once().method(\"muteMember\").msg(\"failed, err:%s\", err.toString()));                }            });        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/ui/MemberListActivity.java", "stars": "2", "class": {"name": "MemberListActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "useJumpping", "params": ["Jumpping"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void useJumpping(Jumpping J){        J.Jump();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/cc1021/Interface/JumppingOperate.java", "stars": "2", "class": {"name": "JumppingOperate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        user = new User();        user.setLogin(DEFAULT_LOGIN);        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(DEFAULT_EMAIL);        user.setFirstName(DEFAULT_FIRSTNAME);        user.setLastName(DEFAULT_LASTNAME);        user.setLangKey(DEFAULT_LANGKEY);        user.setBankAccountIBAN(DEFAULT_IBAN);        when(dateTimeProvider.getNow()).thenReturn(Optional.of(LocalDateTime.now()));        auditingHandler.setDateTimeProvider(dateTimeProvider);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/UserServiceIT.java", "stars": "2", "class": {"name": "UserServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatUserMustExistToResetPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatUserMustExistToResetPassword() {        userRepository.saveAndFlush(user);        Optional<User> maybeUser = userService.requestPasswordReset(\"invalid.login@localhost\");        assertThat(maybeUser).isNotPresent();        maybeUser = userService.requestPasswordReset(user.getEmail());        assertThat(maybeUser).isPresent();        assertThat(maybeUser.orElse(null).getEmail()).isEqualTo(user.getEmail());        assertThat(maybeUser.orElse(null).getPasswordResetTimestamp()).isNotNull();        assertThat(maybeUser.orElse(null).getResetKey()).isNotNull();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/UserServiceIT.java", "stars": "2", "class": {"name": "UserServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatOnlyActivatedUserCanRequestPasswordReset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatOnlyActivatedUserCanRequestPasswordReset() {        user.setActivated(false);        userRepository.saveAndFlush(user);        Optional<User> maybeUser = userService.requestPasswordReset(user.getLogin());        assertThat(maybeUser).isNotPresent();        userRepository.delete(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/UserServiceIT.java", "stars": "2", "class": {"name": "UserServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatResetKeyMustNotBeOlderThan24Hours", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatResetKeyMustNotBeOlderThan24Hours() {        Instant daysAgo = Instant.now().minus(25, ChronoUnit.HOURS);        String resetKey = RandomUtil.generateResetKey();        user.setActivated(true);        user.setPasswordResetTimestamp(daysAgo);        user.setResetKey(resetKey);        userRepository.saveAndFlush(user);        Optional<User> maybeUser = userService.completePasswordReset(\"johndoe2\", user.getResetKey());        assertThat(maybeUser).isNotPresent();        userRepository.delete(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/UserServiceIT.java", "stars": "2", "class": {"name": "UserServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatResetKeyMustBeValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatResetKeyMustBeValid() {        Instant daysAgo = Instant.now().minus(25, ChronoUnit.HOURS);        user.setActivated(true);        user.setPasswordResetTimestamp(daysAgo);        user.setResetKey(\"1234\");        userRepository.saveAndFlush(user);        Optional<User> maybeUser = userService.completePasswordReset(\"johndoe2\", user.getResetKey());        assertThat(maybeUser).isNotPresent();        userRepository.delete(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/UserServiceIT.java", "stars": "2", "class": {"name": "UserServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatUserCanResetPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatUserCanResetPassword() {        String oldPassword = user.getPassword();        Instant daysAgo = Instant.now().minus(2, ChronoUnit.HOURS);        String resetKey = RandomUtil.generateResetKey();        user.setActivated(true);        user.setPasswordResetTimestamp(daysAgo);        user.setResetKey(resetKey);        userRepository.saveAndFlush(user);        Optional<User> maybeUser = userService.completePasswordReset(\"johndoe2\", user.getResetKey());        assertThat(maybeUser).isPresent();        assertThat(maybeUser.orElse(null).getPasswordResetTimestamp()).isNull();        assertThat(maybeUser.orElse(null).getResetKey()).isNull();        assertThat(maybeUser.orElse(null).getPassword()).isNotEqualTo(oldPassword);        userRepository.delete(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/UserServiceIT.java", "stars": "2", "class": {"name": "UserServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatNotActivatedUsersWithNotNullActivationKeyCreatedBefore3DaysAreDeleted", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatNotActivatedUsersWithNotNullActivationKeyCreatedBefore3DaysAreDeleted() {        Instant now = Instant.now();        when(dateTimeProvider.getNow()).thenReturn(Optional.of(now.minus(4, ChronoUnit.DAYS)));        user.setActivated(false);        user.setActivationKey(RandomStringUtils.random(20));        User dbUser = userRepository.saveAndFlush(user);        dbUser.setCreatedDate(now.minus(4, ChronoUnit.DAYS));        userRepository.saveAndFlush(user);        List<User> users = userRepository.findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(now.minus(3, ChronoUnit.DAYS));        assertThat(users).isNotEmpty();        userService.removeNotActivatedUsers();        users = userRepository.findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(now.minus(3, ChronoUnit.DAYS));        assertThat(users).isEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/UserServiceIT.java", "stars": "2", "class": {"name": "UserServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatNotActivatedUsersWithNullActivationKeyCreatedBefore3DaysAreNotDeleted", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatNotActivatedUsersWithNullActivationKeyCreatedBefore3DaysAreNotDeleted() {        Instant now = Instant.now();        when(dateTimeProvider.getNow()).thenReturn(Optional.of(now.minus(4, ChronoUnit.DAYS)));        user.setActivated(false);        User dbUser = userRepository.saveAndFlush(user);        dbUser.setCreatedDate(now.minus(4, ChronoUnit.DAYS));        userRepository.saveAndFlush(user);        List<User> users = userRepository.findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(now.minus(3, ChronoUnit.DAYS));        assertThat(users).isEmpty();        userService.removeNotActivatedUsers();        Optional<User> maybeDbUser = userRepository.findById(dbUser.getId());        assertThat(maybeDbUser).contains(dbUser);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/UserServiceIT.java", "stars": "2", "class": {"name": "UserServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatAnonymousUserIsNotGet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatAnonymousUserIsNotGet() {        user.setLogin(Constants.ANONYMOUS_USER);        if (!userRepository.findOneByLogin(Constants.ANONYMOUS_USER).isPresent()) {            userRepository.saveAndFlush(user);        }        final PageRequest pageable = PageRequest.of(0, (int) userRepository.count());        final Page<UserDTO> allManagedUsers = userService.getAllManagedUsers(pageable);        assertThat(allManagedUsers.getContent().stream()            .noneMatch(user -> Constants.ANONYMOUS_USER.equals(user.getLogin())))            .isTrue();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/UserServiceIT.java", "stars": "2", "class": {"name": "UserServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadUserByUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "UserDetails", "snippet": "    public UserDetails loadUserByUsername(final String login) {        log.debug(\"Authenticating {}\", login);        if (new EmailValidator().isValid(login, null)) {            return userRepository.findOneWithAuthoritiesByEmailIgnoreCase(login)                .map(user -> createSpringSecurityUser(login, user))                .orElseThrow(() -> new UsernameNotFoundException(\"User with email \" + login + \" was not found in the database\"));        }        String lowercaseLogin = login.toLowerCase(Locale.ENGLISH);        return userRepository.findOneWithAuthoritiesByLogin(lowercaseLogin)            .map(user -> createSpringSecurityUser(lowercaseLogin, user))            .orElseThrow(() -> new UsernameNotFoundException(\"User \" + lowercaseLogin + \" was not found in the database\"));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/DomainUserDetailsService.java", "stars": "2", "class": {"name": "DomainUserDetailsService", "extends": null, "implements": ["UserDetailsService"], "modifiers": ["public"]}}, {"method_name": "createSpringSecurityUser", "params": ["String", "User"], "throws": null, "modifiers": ["private"], "return_type": "org", "snippet": "    private org.springframework.security.core.userdetails.User createSpringSecurityUser(String lowercaseLogin, User user) {        if (!user.isActivated()) {            throw new UserNotActivatedException(\"User \" + lowercaseLogin + \" was not activated\");        }        List<GrantedAuthority> grantedAuthorities = user.getAuthorities().stream()            .map(authority -> new SimpleGrantedAuthority(authority.getName()))            .collect(Collectors.toList());        return new org.springframework.security.core.userdetails.User(user.getLogin(),            user.getPassword(),            grantedAuthorities);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/DomainUserDetailsService.java", "stars": "2", "class": {"name": "DomainUserDetailsService", "extends": null, "implements": ["UserDetailsService"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efaGenericMethod\u5bf9\u8c61        GenericMethod gm = new GenericMethod();        /*            \u8c03\u7528\u542b\u6709\u6cdb\u578b\u7684\u65b9\u6cd5method01            \u4f20\u9012\u4ec0\u4e48\u7c7b\u578b,\u6cdb\u578b\u5c31\u662f\u4ec0\u4e48\u7c7b\u578b         */        gm.method01(10);        gm.method01(\"abc\");        gm.method01(8.8);        gm.method01(true);        gm.method02(\"\u9759\u6001\u65b9\u6cd5,\u4e0d\u5efa\u8bae\u521b\u5efa\u5bf9\u8c61\u4f7f\u7528\");        //\u9759\u6001\u65b9\u6cd5,\u901a\u8fc7\u7c7b\u540d.\u65b9\u6cd5\u540d(\u53c2\u6570)\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528        GenericMethod.method02(\"\u9759\u6001\u65b9\u6cd5\");        GenericMethod.method02(1);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/Demo03GenericMethod.java", "stars": "2", "class": {"name": "Demo03GenericMethod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "surfaceChanged", "params": ["SurfaceHolder", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {        // Measure and layout the view with the canvas dimensions.        int measuredWidth = View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY);        int measuredHeight = View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY);        mCountDownView.measure(measuredWidth, measuredHeight);        mCountDownView.layout(                0, 0, mCountDownView.getMeasuredWidth(), mCountDownView.getMeasuredHeight());        mChronometerView.measure(measuredWidth, measuredHeight);        mChronometerView.layout(                0, 0, mChronometerView.getMeasuredWidth(), mChronometerView.getMeasuredHeight());    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Stopwatch/src/com/google/android/glass/sample/stopwatch/ChronometerDrawer.java", "stars": "74", "class": {"name": "ChronometerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "surfaceCreated", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceCreated(SurfaceHolder holder) {        Log.d(TAG, \"Surface created\");        mHolder = holder;        if (mCountDownDone) {            mChronometerView.start();        } else {            mCountDownView.start();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Stopwatch/src/com/google/android/glass/sample/stopwatch/ChronometerDrawer.java", "stars": "74", "class": {"name": "ChronometerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "surfaceDestroyed", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceDestroyed(SurfaceHolder holder) {        Log.d(TAG, \"Surface destroyed\");        mChronometerView.stop();        mHolder = null;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Stopwatch/src/com/google/android/glass/sample/stopwatch/ChronometerDrawer.java", "stars": "74", "class": {"name": "ChronometerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "draw", "params": ["View"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void draw(View view) {        Canvas canvas;        try {            canvas = mHolder.lockCanvas();        } catch (Exception e) {            return;        }        if (canvas != null) {            view.draw(canvas);            mHolder.unlockCanvasAndPost(canvas);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Stopwatch/src/com/google/android/glass/sample/stopwatch/ChronometerDrawer.java", "stars": "74", "class": {"name": "ChronometerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "playSound", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void playSound(int soundId) {        mSoundPool.play(soundId,                        1 /* leftVolume */,                        1 /* rightVolume */,                        SOUND_PRIORITY,                        0 /* loop */,                        1 /* rate */);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Stopwatch/src/com/google/android/glass/sample/stopwatch/ChronometerDrawer.java", "stars": "74", "class": {"name": "ChronometerDrawer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "authority", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String authority() {        return name + \"\u6709\u6700\u9ad8\u6743\u9650\";    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/strategy/AdminRole.java", "stars": "2", "class": {"name": "AdminRole", "extends": null, "implements": ["Role"], "modifiers": ["public"]}}, {"method_name": "setOnPreparedListener", "params": ["OnPreparedListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setOnPreparedListener(OnPreparedListener listener) {        mOnPreparedListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnCompletionListener", "params": ["OnCompletionListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setOnCompletionListener(OnCompletionListener listener) {        mOnCompletionListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnBufferingUpdateListener", "params": ["OnBufferingUpdateListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setOnBufferingUpdateListener(            OnBufferingUpdateListener listener) {        mOnBufferingUpdateListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnSeekCompleteListener", "params": ["OnSeekCompleteListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setOnSeekCompleteListener(OnSeekCompleteListener listener) {        mOnSeekCompleteListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnVideoSizeChangedListener", "params": ["OnVideoSizeChangedListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setOnVideoSizeChangedListener(            OnVideoSizeChangedListener listener) {        mOnVideoSizeChangedListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnErrorListener", "params": ["OnErrorListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setOnErrorListener(OnErrorListener listener) {        mOnErrorListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnInfoListener", "params": ["OnInfoListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setOnInfoListener(OnInfoListener listener) {        mOnInfoListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnTimedTextListener", "params": ["OnTimedTextListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setOnTimedTextListener(OnTimedTextListener listener) {        mOnTimedTextListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "resetListeners", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void resetListeners() {        mOnPreparedListener = null;        mOnBufferingUpdateListener = null;        mOnCompletionListener = null;        mOnSeekCompleteListener = null;        mOnVideoSizeChangedListener = null;        mOnErrorListener = null;        mOnInfoListener = null;        mOnTimedTextListener = null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyOnPrepared", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "void", "snippet": "    protected final void notifyOnPrepared() {        if (mOnPreparedListener != null)            mOnPreparedListener.onPrepared(this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyOnCompletion", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "void", "snippet": "    protected final void notifyOnCompletion() {        if (mOnCompletionListener != null)            mOnCompletionListener.onCompletion(this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyOnBufferingUpdate", "params": ["int"], "throws": null, "modifiers": ["final", "protected"], "return_type": "void", "snippet": "    protected final void notifyOnBufferingUpdate(int percent) {        if (mOnBufferingUpdateListener != null)            mOnBufferingUpdateListener.onBufferingUpdate(this, percent);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyOnSeekComplete", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "void", "snippet": "    protected final void notifyOnSeekComplete() {        if (mOnSeekCompleteListener != null)            mOnSeekCompleteListener.onSeekComplete(this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyOnVideoSizeChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["final", "protected"], "return_type": "void", "snippet": "    protected final void notifyOnVideoSizeChanged(int width, int height,                                                  int sarNum, int sarDen) {        if (mOnVideoSizeChangedListener != null)            mOnVideoSizeChangedListener.onVideoSizeChanged(this, width, height,                    sarNum, sarDen);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyOnError", "params": ["int", "int"], "throws": null, "modifiers": ["final", "protected"], "return_type": "boolean", "snippet": "    protected final boolean notifyOnError(int what, int extra) {        return mOnErrorListener != null && mOnErrorListener.onError(this, what, extra);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyOnInfo", "params": ["int", "int"], "throws": null, "modifiers": ["final", "protected"], "return_type": "boolean", "snippet": "    protected final boolean notifyOnInfo(int what, int extra) {        return mOnInfoListener != null && mOnInfoListener.onInfo(this, what, extra);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyOnTimedText", "params": ["IjkTimedText"], "throws": null, "modifiers": ["final", "protected"], "return_type": "void", "snippet": "    protected final void notifyOnTimedText(IjkTimedText text) {        if (mOnTimedTextListener != null)            mOnTimedTextListener.onTimedText(this, text);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "setDataSource", "params": ["IMediaDataSource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(IMediaDataSource mediaDataSource) {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AbstractMediaPlayer.java", "stars": "2", "class": {"name": "AbstractMediaPlayer", "extends": null, "implements": ["IMediaPlayer"], "modifiers": ["public", "abstract"]}}, {"method_name": "authenticate", "params": ["String", "String"], "throws": ["AuthenticationFailedException"], "modifiers": ["public"], "return_type": "UserAuthTokenEntity", "snippet": "\tpublic UserAuthTokenEntity authenticate(String username, String password)\t\t\tthrows AuthenticationFailedException {\t\tUserEntity userEntity = userDao.getUserByEmail(username);\t\tif (userEntity == null) {\t\t\tthrow new AuthenticationFailedException(\"ATH-001\", \"User with email not found\");\t\t}\t\tfinal String encryptedPassword = CryptographyProvider.encrypt(password, userEntity.getSalt());\t\tif (encryptedPassword.equals(userEntity.getPassword())) {\t\t\tJwtTokenProvider jwtTokenProvider = new JwtTokenProvider(encryptedPassword);\t\t\tUserAuthTokenEntity userAuthTokenEntity = new UserAuthTokenEntity();\t\t\tuserAuthTokenEntity.setUser(userEntity);\t\t\tfinal ZonedDateTime now = ZonedDateTime.now();\t\t\tfinal ZonedDateTime expiresAt = now.plusHours(8);\t\t\tuserAuthTokenEntity.setAccessToken(jwtTokenProvider.generateToken(userEntity.getUuid(), now, expiresAt));\t\t\tuserAuthTokenEntity.setLoginAt(now);\t\t\tuserAuthTokenEntity.setExpiresAt(expiresAt);\t\t\tuserDao.createAuthToken(userAuthTokenEntity);\t\t\tuserDao.updateUser(userEntity);\t\t\tuserEntity.setLastLoginAt(now);\t\t\treturn userAuthTokenEntity;\t\t} else {\t\t\tthrow new AuthenticationFailedException(\"ATH-002\", \"Password failed\");\t\t}\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/business/AuthenticationServiceImpl.java", "stars": "2", "class": {"name": "AuthenticationServiceImpl", "extends": null, "implements": ["AuthenticationService"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.activity_ptr_scrollview);\t\tmPullRefreshScrollView = (PullToRefreshScrollView) findViewById(R.id.pull_refresh_scrollview);\t\tmPullRefreshScrollView.setOnRefreshListener(new OnRefreshListener<ScrollView>() {\t\t\t@Override\t\t\tpublic void onRefresh(PullToRefreshBase<ScrollView> refreshView) {\t\t\t\tnew GetDataTask().execute();\t\t\t}\t\t});\t\tmScrollView = mPullRefreshScrollView.getRefreshableView();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshScrollViewActivity.java", "stars": "74", "class": {"name": "PullToRefreshScrollViewActivity", "extends": "Activity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\t\tprotected String[] doInBackground(Void... params) {\t\t\t// Simulates a background job.\t\t\ttry {\t\t\t\tThread.sleep(4000);\t\t\t} catch (InterruptedException e) {\t\t\t}\t\t\treturn null;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshScrollViewActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPostExecute(String[] result) {\t\t\t// Do some stuff here\t\t\t// Call onRefreshComplete when the list has been refreshed.\t\t\tmPullRefreshScrollView.onRefreshComplete();\t\t\tsuper.onPostExecute(result);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshScrollViewActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onApplicationEvent", "params": ["ContextRefreshedEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onApplicationEvent(ContextRefreshedEvent event) {        log.info(\"After Hello World: \" + event.getApplicationContext().getId() + \",timestamp: \" + event.getTimestamp());    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/listener/AfterApplicationListener.java", "stars": "3", "class": {"name": "AfterApplicationListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "BEGIN", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void BEGIN() {    RESET();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "RESET", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void RESET() {    localSQL.set(new SQL());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "UPDATE", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void UPDATE(String table) {    sql().UPDATE(table);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "SET", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void SET(String sets) {    sql().SET(sets);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "SQL", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String SQL() {    try {      return sql().toString();    } finally {        RESET();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "INSERT_INTO", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void INSERT_INTO(String tableName) {    sql().INSERT_INTO(tableName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "VALUES", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void VALUES(String columns, String values) {    sql().VALUES(columns, values);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "SELECT", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void SELECT(String columns) {    sql().SELECT(columns);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "SELECT_DISTINCT", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void SELECT_DISTINCT(String columns) {    sql().SELECT_DISTINCT(columns);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "DELETE_FROM", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void DELETE_FROM(String table) {    sql().DELETE_FROM(table);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "FROM", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void FROM(String table) {    sql().FROM(table);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "JOIN", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void JOIN(String join) {    sql().JOIN(join);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "INNER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void INNER_JOIN(String join) {    sql().INNER_JOIN(join);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "LEFT_OUTER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void LEFT_OUTER_JOIN(String join) {    sql().LEFT_OUTER_JOIN(join);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "RIGHT_OUTER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void RIGHT_OUTER_JOIN(String join) {    sql().RIGHT_OUTER_JOIN(join);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "OUTER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void OUTER_JOIN(String join) {    sql().OUTER_JOIN(join);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "WHERE", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void WHERE(String conditions) {    sql().WHERE(conditions);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "OR", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void OR() {    sql().OR();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "AND", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void AND() {    sql().AND();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "GROUP_BY", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void GROUP_BY(String columns) {    sql().GROUP_BY(columns);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "HAVING", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void HAVING(String conditions) {    sql().HAVING(conditions);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ORDER_BY", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void ORDER_BY(String columns) {    sql().ORDER_BY(columns);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sql", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "SQL", "snippet": "  private static SQL sql() {    return localSQL.get();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java", "stars": "15", "class": {"name": "SqlBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictyperesolution/Entity.java", "stars": "15", "class": {"name": "Entity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(T id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictyperesolution/Entity.java", "stars": "15", "class": {"name": "Entity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictyperesolution/Entity.java", "stars": "15", "class": {"name": "Entity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictyperesolution/Entity.java", "stars": "15", "class": {"name": "Entity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFld1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T getFld1() {    return fld1;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictyperesolution/Entity.java", "stars": "15", "class": {"name": "Entity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        return new ViewHolder();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/StatusAdapter.java", "stars": "1", "class": {"name": "StatusAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onBindView(int position) {            mTextView.setText(getItem(position));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/StatusAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "offer", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean offer(T e) {\t\treturn super.offerFirst(e);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LIFOLinkedBlockingDeque.java", "stars": "74", "class": {"name": "LIFOLinkedBlockingDeque", "extends": "LinkedBlockingDeque", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "\tpublic T remove() {\t\treturn super.removeFirst();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LIFOLinkedBlockingDeque.java", "stars": "74", "class": {"name": "LIFOLinkedBlockingDeque", "extends": "LinkedBlockingDeque", "implements": null, "modifiers": ["public"]}}, {"method_name": "unauthenticatedAccessToRSocketEndpoint", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid unauthenticatedAccessToRSocketEndpoint() {\t\tRSocketRequester requester = this.builder.connectTcp(\"localhost\", this.port).block(Duration.ofSeconds(5));\t\tMono<Project> result = requester.route(\"find.project.spring-boot\").retrieveMono(Project.class);\t\tStepVerifier.create(result).expectErrorMessage(\"Access Denied\").verify();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-rsocket/src/test/java/smoketest/rsocket/SampleRSocketApplicationTests.java", "stars": "47572", "class": {"name": "SampleRSocketApplicationTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rSocketEndpoint", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid rSocketEndpoint() {\t\tRSocketRequester requester = this.builder\t\t\t\t.rsocketStrategies((builder) -> builder.encoder(new SimpleAuthenticationEncoder()))\t\t\t\t.setupMetadata(new UsernamePasswordMetadata(\"user\", \"password\"),\t\t\t\t\t\tMimeTypeUtils.parseMimeType(WellKnownMimeType.MESSAGE_RSOCKET_AUTHENTICATION.getString()))\t\t\t\t.connectTcp(\"localhost\", this.port).block(Duration.ofSeconds(5));\t\tMono<Project> result = requester.route(\"find.project.spring-boot\").retrieveMono(Project.class);\t\tStepVerifier.create(result)\t\t\t\t.assertNext((project) -> Assertions.assertThat(project.getName()).isEqualTo(\"spring-boot\"))\t\t\t\t.verifyComplete();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-rsocket/src/test/java/smoketest/rsocket/SampleRSocketApplicationTests.java", "stars": "47572", "class": {"name": "SampleRSocketApplicationTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPos", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPos(float x, float y) {        pos.x = x;        pos.y = y;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPos", "params": ["Point2D"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPos(Point2D pos) {        this.pos = pos;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Point2D", "snippet": "    public Point2D getPos() {        return pos;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateRandom", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Flower", "snippet": "    public static Flower generateRandom() {        Flower f = new Flower();        //generate the position        f.setPos(                random2D(                        Drawer2D.FLOWER_SIZE,                        Drawer2D.FLOWER_SIZE,                        Drawer2D.FIELD_SIZE - Drawer2D.FLOWER_SIZE,                        Drawer2D.FIELD_SIZE - Drawer2D.FLOWER_SIZE                )        );        //generate the color        f.setDNA(new Trait());        return f;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "random2D", "params": ["float", "float", "float", "float"], "throws": null, "modifiers": ["private", "static"], "return_type": "Point2D", "snippet": "    private static Point2D random2D(float xmin, float ymin, float xmax, float ymax) {        return new Point2D(                (float) Math.random() * xmax,                (float) Math.random() * ymax        );    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDNA", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Trait", "snippet": "    public Trait getDNA() {        return dna;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGenes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Genes", "snippet": "    public Genes getGenes() {        return genes;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDNA", "params": ["Trait"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDNA(Trait t) {        dna = t;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "passDay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void passDay() {        days_remaining--;        dead = days_remaining <= 0;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDead", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDead() {        return dead;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Flower.java", "stars": "2", "class": {"name": "Flower", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeNthFromEnd", "params": ["ListNode", "int"], "throws": null, "modifiers": ["public"], "return_type": "ListNode", "snippet": "    public ListNode removeNthFromEnd(ListNode head, int n) {        if(head == null) {            return null;        }        ListNode first = head, second = head;        for(int i = 0; i <= n; i ++) {            if(first == null) {                return head.next;            }            first = first.next;        }        while(first != null) {            first = first.next;            second = second.next;        }        second.next = second.next.next;        return head;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/RemoveNthNodeFromEndOfList.java", "stars": "1", "class": {"name": "RemoveNthNodeFromEndOfList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buyByAli", "params": ["PayTradeOrder"], "throws": null, "modifiers": ["public"], "return_type": "HashMap<String,Object>", "snippet": "    public HashMap<String, Object> buyByAli(PayTradeOrder order) {        order.setChannelType(BrowserUAEnum.ALIPAY.getName());        order.setChannelMchNo(payProperties.getAli().getAppId());        AlipayTradeCreateModel alipayTradeCreateModel = new AlipayTradeCreateModel();        alipayTradeCreateModel.setSubject(order.getOrderSubject());        alipayTradeCreateModel.setOutTradeNo(order.getOrderId());        alipayTradeCreateModel.setBuyerId(order.getOpenId());        alipayTradeCreateModel.setTimeoutExpress(\"1m\");        alipayTradeCreateModel.setTotalAmount(NumberUtil.div(order.getOrderAmount().toString(), \"100\", 2).toString());        AlipayTradeCreateRequest alipayTradeCreateRequest = new AlipayTradeCreateRequest();        alipayTradeCreateRequest.setNotifyUrl(payProperties.getAli().getNotifyUrl());        alipayTradeCreateRequest.setBizModel(alipayTradeCreateModel);        try {            AlipayTradeCreateResponse alipayTradeCreateResponse = aliPayClient.execute(alipayTradeCreateRequest);            HashMap<String, Object> map = new HashMap<>();            map.put(\"type\", order.getChannelType());            map.put(\"order\", order);            map.put(\"params\", alipayTradeCreateResponse.getTradeNo());            order.setChannelOrderNo(alipayTradeCreateResponse.getTradeNo());            order.updateById();            return map;        } catch (AlipayApiException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/pay/service/impl/PayTradeOrderServiceImpl.java", "stars": "6", "class": {"name": "PayTradeOrderServiceImpl", "extends": "ServiceImpl", "implements": ["PayTradeOrderService"], "modifiers": ["public"]}}, {"method_name": "buyByWx", "params": ["PayTradeOrder"], "throws": null, "modifiers": ["public"], "return_type": "HashMap<String,Object>", "snippet": "    public HashMap<String, Object> buyByWx(PayTradeOrder order) {        order.setChannelType(BrowserUAEnum.WECHAT.getName());        PayProperties.WxPayApiConfig wxPay = payProperties.getWx();        order.setChannelMchNo(wxPay.getMchId());        // \u5fae\u4fe1\u652f\u4ed8\u8ba2\u5355        Map<String, String> params = UnifiedOrderModel.builder()                .body(order.getOrderSubject())                .spbill_create_ip(ServletUtil.getClientIP(request))                .total_fee(order.getOrderAmount().toString())                .openid(order.getOpenId())                .nonce_str(IdUtil.fastSimpleUUID())                .trade_type(TradeType.JSAPI.getTradeType())                .notify_url(wxPay.getNotifyUrl())                .out_trade_no(order.getOrderId())                .appid(wxPay.getAppId())                .mch_id(wxPay.getMchId())                .build().createSign(wxPay.getPartnerKey(), SignType.MD5);        String xmlResult = WxPayApi.pushOrder(false, params);        log.info(\"WxPayApi pushOrder: {}\", xmlResult);        Map<String, String> resultMap = WxPayKit.xmlToMap(xmlResult);        String prepayId = resultMap.get(\"prepay_id\");        Map<String, String> prepayIdCreateSignMap = WxPayKit.prepayIdCreateSign(prepayId,                wxPay.getAppId(),                wxPay.getPartnerKey(),                SignType.MD5        );        order.setChannelOrderNo(prepayId);        order.updateById();        HashMap<String, Object> map = new HashMap<>();        map.put(\"type\", order.getChannelType());        map.put(\"order\", order);        map.put(\"params\", prepayIdCreateSignMap);        return map;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/pay/service/impl/PayTradeOrderServiceImpl.java", "stars": "6", "class": {"name": "PayTradeOrderServiceImpl", "extends": "ServiceImpl", "implements": ["PayTradeOrderService"], "modifiers": ["public"]}}, {"method_name": "refund", "params": ["PayTradeOrder"], "throws": null, "modifiers": ["public"], "return_type": "R", "snippet": "    public R refund(PayTradeOrder tradeOrder) {        if (tradeOrder.getChannelType().equals(BrowserUAEnum.WECHAT.getName())) {            // \u5fae\u4fe1\u9000\u6b3e            PayProperties.WxPayApiConfig wxPayApiConfig = payProperties.getWx();            Map<String, String> params = RefundModel.builder()                    .appid(wxPayApiConfig.getAppId())                    .mch_id(wxPayApiConfig.getMchId())                    .nonce_str(String.valueOf(System.currentTimeMillis()))                    .out_trade_no(tradeOrder.getOrderId())                    .out_refund_no(String.valueOf(System.currentTimeMillis()))                    .total_fee(tradeOrder.getOrderAmount().toString())                    .refund_fee(tradeOrder.getOrderAmount().toString())                    .build()                    .createSign(wxPayApiConfig.getPartnerKey(), SignType.MD5);            String refund = WxPayApi.orderRefund(false,                    params,                    wxPayApiConfig.getCertPath(),                    wxPayApiConfig.getMchId()            );            log.debug(refund);            tradeOrder.setOrderStatus(PayTradeStatusEnum.REFUND_COMPLETE.getStatus());            tradeOrder.updateById();            return null;        } else if (tradeOrder.getChannelType().equals(BrowserUAEnum.ALIPAY.getName())) {            // \u652f\u4ed8\u5b9d\u9000\u6b3e            AlipayTradeRefundModel model = new AlipayTradeRefundModel();            model.setOutTradeNo(tradeOrder.getOrderId());            model.setRefundAmount(NumberUtil.div(tradeOrder.getOrderAmount().toString(), \"100\", 2).toString());            try {                AlipayTradeRefundRequest request = new AlipayTradeRefundRequest();                request.setBizModel(model);                // \u751f\u6210\u652f\u4ed8\u53c2\u6570\uff0c\u5e76\u4e14\u76f4\u63a5\u8df3\u8f6c\u5230\u652f\u4ed8\u754c\u9762                AlipayTradeRefundResponse alipayTradeRefundResponse = aliPayClient.execute(request);                log.debug(\"\u652f\u4ed8\u5305\u9000\u6b3e\uff1a {}\", alipayTradeRefundResponse);            } catch (AlipayApiException e) {                log.error(\"\u652f\u4ed8\u5b9d\u9000\u6b3e\u5931\u8d25\", e);            }            return R.ok(\"\u652f\u4ed8\u5b9d\u9000\u6b3e\");        } else {            return R.err(\"\u4e0d\u652f\u6301\u9000\u6b3e\u7c7b\u578b\");        }    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/pay/service/impl/PayTradeOrderServiceImpl.java", "stars": "6", "class": {"name": "PayTradeOrderServiceImpl", "extends": "ServiceImpl", "implements": ["PayTradeOrderService"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.activity_ptr_webview);\t\tmPullRefreshWebView = (PullToRefreshWebView) findViewById(R.id.pull_refresh_webview);\t\tmWebView = mPullRefreshWebView.getRefreshableView();\t\tmWebView.getSettings().setJavaScriptEnabled(true);\t\tmWebView.setWebViewClient(new SampleWebViewClient());\t\tmWebView.loadUrl(\"http://www.google.com\");\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshWebViewActivity.java", "stars": "74", "class": {"name": "PullToRefreshWebViewActivity", "extends": "Activity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "shouldOverrideUrlLoading", "params": ["WebView", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\t\t\tview.loadUrl(url);\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshWebViewActivity.java", "stars": "74", "class": {"name": "SampleWebViewClient", "extends": "WebViewClient", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "update", "params": ["Statement"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int update(Statement statement) throws SQLException {    String sql = boundSql.getSql();    Object parameterObject = boundSql.getParameterObject();    KeyGenerator keyGenerator = mappedStatement.getKeyGenerator();    int rows;    if (keyGenerator instanceof Jdbc3KeyGenerator) {      statement.execute(sql, Statement.RETURN_GENERATED_KEYS);      rows = statement.getUpdateCount();      keyGenerator.processAfter(executor, mappedStatement, statement, parameterObject);    } else if (keyGenerator instanceof SelectKeyGenerator) {      statement.execute(sql);      rows = statement.getUpdateCount();      keyGenerator.processAfter(executor, mappedStatement, statement, parameterObject);    } else {      statement.execute(sql);      rows = statement.getUpdateCount();    }    return rows;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java", "stars": "15", "class": {"name": "SimpleStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "batch", "params": ["Statement"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void batch(Statement statement) throws SQLException {    String sql = boundSql.getSql();    statement.addBatch(sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java", "stars": "15", "class": {"name": "SimpleStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "query", "params": ["Statement", "ResultHandler"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<E>", "snippet": "  public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {    String sql = boundSql.getSql();    statement.execute(sql);    return resultSetHandler.handleResultSets(statement);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java", "stars": "15", "class": {"name": "SimpleStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "queryCursor", "params": ["Statement"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Cursor<E>", "snippet": "  public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {    String sql = boundSql.getSql();    statement.execute(sql);    return resultSetHandler.handleCursorResultSets(statement);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java", "stars": "15", "class": {"name": "SimpleStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "instantiateStatement", "params": ["Connection"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "Statement", "snippet": "  protected Statement instantiateStatement(Connection connection) throws SQLException {    if (mappedStatement.getResultSetType() == ResultSetType.DEFAULT) {      return connection.createStatement();    } else {      return connection.createStatement(mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java", "stars": "15", "class": {"name": "SimpleStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "parameterize", "params": ["Statement"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void parameterize(Statement statement) {    // N/A  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java", "stars": "15", "class": {"name": "SimpleStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "TestGetByUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void TestGetByUsername() {        User beyond = userService.getByUsernameOfNonNull(\"beyond1\");        System.out.println(beyond);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/test/java/cn/tsxygfy/beyond/AdminServiceTest.java", "stars": "1", "class": {"name": "AdminServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": ["ScheduleManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() throws ScheduleManagerException {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "updateLocal", "params": [], "throws": ["ScheduleManagerException"], "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void updateLocal() throws ScheduleManagerException {        final List<Schedule> updates = this.loader.loadUpdatedSchedules();        for (final Schedule s : updates) {            if (s.getStatus().equals(TriggerStatus.EXPIRED.toString())) {                onScheduleExpire(s);            } else {                internalSchedule(s);            }        }        if(azkprops.getBoolean(Constants.ConfigurationKeys.WEBSERVER_HA_MODEL, false)){            filterInvalidSchedules();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "filterInvalidSchedules", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void filterInvalidSchedules(){        try {            List<Integer> schedulesId = this.loader.loadAllSchedulesId();            if(scheduleIDMap != null && scheduleIDMap.size() != 0){                Set<Integer> tmpScheduleIDSet = scheduleIDMap.keySet();                for (int scheduleId : tmpScheduleIDSet){                        if (schedulesId != null && schedulesId.size() != 0) {                            if(schedulesId.contains(scheduleId)){                                continue;                            }else{                                scheduleIDMap.remove(scheduleId);                            }                        }else{                            scheduleIDMap.clear();                        }                    }                }            if(scheduleIdentityPairMap != null && scheduleIdentityPairMap.size() != 0){                Collection<Schedule> tmpScheduleIdentityPairSet = scheduleIdentityPairMap.values();                for (Schedule schedule : tmpScheduleIdentityPairSet){                    if (schedulesId != null && schedulesId.size() != 0) {                        if(schedulesId.contains(schedule.getScheduleId())){                            continue;                        }else{                            scheduleIdentityPairMap.remove(schedule);                        }                    }else{                        scheduleIdentityPairMap.clear();                    }                }            }        } catch (TriggerLoaderException e) {            logger.error(\"filterInvalidSchedules failed \" + e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "onScheduleExpire", "params": ["Schedule"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onScheduleExpire(final Schedule s) {        removeSchedule(s);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "getSchedules", "params": [], "throws": ["ScheduleManagerException"], "modifiers": ["synchronized", "public"], "return_type": "List<Schedule>", "snippet": "    public synchronized List<Schedule> getSchedules() throws ScheduleManagerException {        updateLocal();        return new ArrayList<>(this.scheduleIDMap.values());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "getSchedule", "params": ["int", "String"], "throws": ["ScheduleManagerException"], "modifiers": ["public"], "return_type": "Schedule", "snippet": "    public Schedule getSchedule(final int projectId, final String flowId) throws ScheduleManagerException {        updateLocal();        return this.scheduleIdentityPairMap.get(new Pair<>(projectId, flowId));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "getSchedule", "params": ["int"], "throws": ["ScheduleManagerException"], "modifiers": ["public"], "return_type": "Schedule", "snippet": "    public Schedule getSchedule(final int scheduleId) throws ScheduleManagerException {        updateLocal();        return this.scheduleIDMap.get(scheduleId);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "removeSchedule", "params": ["Schedule"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeSchedule(final Schedule sched) {        final Pair<Integer, String> identityPairMap = sched.getScheduleIdentityPair();        final Schedule schedule = this.scheduleIdentityPairMap.get(identityPairMap);        if (schedule != null) {            this.scheduleIdentityPairMap.remove(identityPairMap);        }        this.scheduleIDMap.remove(sched.getScheduleId());        try {            this.loader.removeSchedule(sched);        } catch (final ScheduleManagerException e) {            logger.error(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "scheduleFlow", "params": ["int", "int", "String", "String", "String", "long", "long", "DateTimeZone", "ReadablePeriod", "long", "long", "long", "String", "ExecutionOptions", "List<SlaOption>"], "throws": null, "modifiers": ["public"], "return_type": "Schedule", "snippet": "    public Schedule scheduleFlow(final int scheduleId,                                 final int projectId,                                 final String projectName,                                 final String flowName,                                 final String status,                                 final long firstSchedTime,                                 final long endSchedTime,                                 final DateTimeZone timezone,                                 final ReadablePeriod period,                                 final long lastModifyTime,                                 final long nextExecTime,                                 final long submitTime,                                 final String submitUser,                                 final ExecutionOptions execOptions,                                 final List<SlaOption> slaOptions) {        final Schedule sched = new Schedule(scheduleId, projectId, projectName, flowName, status,                firstSchedTime, endSchedTime, timezone, period, lastModifyTime, nextExecTime,                submitTime, submitUser, execOptions, slaOptions, null);        logger.info(\"Scheduling flow '\" + sched.getScheduleName() + \"' for \"                + this._dateFormat.print(firstSchedTime) + \" with a period of \" + (period == null ? \"(non-recurring)\" : period));        insertSchedule(sched);        return sched;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "cronScheduleFlow", "params": ["int", "int", "String", "String", "String", "long", "long", "DateTimeZone", "long", "long", "long", "String", "ExecutionOptions", "List<SlaOption>", "String"], "throws": null, "modifiers": ["public"], "return_type": "Schedule", "snippet": "    public Schedule cronScheduleFlow(final int scheduleId,                                     final int projectId,                                     final String projectName,                                     final String flowName,                                     final String status,                                     final long firstSchedTime,                                     final long endSchedTime,                                     final DateTimeZone timezone,                                     final long lastModifyTime,                                     final long nextExecTime,                                     final long submitTime,                                     final String submitUser,                                     final ExecutionOptions execOptions,                                     final List<SlaOption> slaOptions,                                     final String cronExpression) {        final Schedule sched = new Schedule(scheduleId, projectId, projectName, flowName, status,                firstSchedTime, endSchedTime, timezone, null, lastModifyTime, nextExecTime,                submitTime, submitUser, execOptions, slaOptions, cronExpression);        logger.info(\"Scheduling flow '\" + sched.getScheduleName() + \"' for \"                + this._dateFormat.print(firstSchedTime) + \" cron Expression = \" + cronExpression);        insertSchedule(sched);        return sched;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "cronScheduleFlow", "params": ["int", "int", "String", "String", "String", "long", "long", "DateTimeZone", "long", "long", "long", "String", "ExecutionOptions", "List<SlaOption>", "String", "Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "Schedule", "snippet": "    public Schedule cronScheduleFlow(final int scheduleId,                                     final int projectId,                                     final String projectName,                                     final String flowName,                                     final String status,                                     final long firstSchedTime,                                     final long endSchedTime,                                     final DateTimeZone timezone,                                     final long lastModifyTime,                                     final long nextExecTime,                                     final long submitTime,                                     final String submitUser,                                     final ExecutionOptions execOptions,                                     final List<SlaOption> slaOptions,                                     final String cronExpression,                                     final Map<String, Object> otherOption) {        final Schedule sched = new Schedule(scheduleId, projectId, projectName, flowName, status,                firstSchedTime, endSchedTime, timezone, null, lastModifyTime, nextExecTime,                submitTime, submitUser, execOptions, slaOptions, cronExpression, otherOption);        logger.info(\"Scheduling flow '\" + sched.getScheduleName() + \"' for \"                + this._dateFormat.print(firstSchedTime) + \" cron Expression = \" + cronExpression);        insertSchedule(sched);        return sched;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "internalSchedule", "params": ["Schedule"], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void internalSchedule(final Schedule s) {        this.scheduleIDMap.put(s.getScheduleId(), s);        this.scheduleIdentityPairMap.put(s.getScheduleIdentityPair(), s);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "insertSchedule", "params": ["Schedule"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void insertSchedule(final Schedule s) {        final Schedule exist = this.scheduleIdentityPairMap.get(s.getScheduleIdentityPair());        if (s.updateTime()) {            try {                if (exist == null) {//\u5b9a\u65f6\u4efb\u52a1\u4e0d\u5b58\u5728 \u5219\u63d2\u5165\u6570\u636e\u5e93                    this.loader.insertSchedule(s);                    internalSchedule(s);                } else {//\u5b9a\u65f6\u4efb\u52a1\u5df2\u5b58\u5728 \u66f4\u65b0\u6570\u636e\u5e93                    s.setScheduleId(exist.getScheduleId());                    this.loader.updateSchedule(s);                    internalSchedule(s);//\u66f4\u65b0\u7f13\u5b58                }            } catch (final ScheduleManagerException e) {                logger.error(e);            }        } else {            logger.error(\"The provided schedule is non-recurring and the scheduled time already passed. \" + s.getScheduleName());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "loadTriggerFromProps", "params": ["Props"], "throws": ["ScheduleManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadTriggerFromProps(final Props props) throws ScheduleManagerException {        throw new ScheduleManagerException(\"create \" + getTriggerSource() + \" from json not supported yet\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "getTriggerSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTriggerSource() {        return SIMPLE_TIME_TRIGGER;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "getSchedulesByUser", "params": ["User"], "throws": ["ScheduleManagerException"], "modifiers": ["synchronized", "public"], "return_type": "List<Schedule>", "snippet": "    public synchronized List<Schedule> getSchedulesByUser(User user)            throws ScheduleManagerException {        updateLocal();        List<Schedule> scheduleList = new ArrayList<>(this.scheduleIDMap.values());        List<Schedule> userScheduleList = scheduleList.stream()                .filter(schedule -> user.getUserId().equals(schedule.getSubmitUser()))                .collect(Collectors.toList());        return userScheduleList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/ScheduleManager.java", "stars": "18", "class": {"name": "ScheduleManager", "extends": null, "implements": ["TriggerAgent"], "modifiers": ["public"]}}, {"method_name": "setImmediateUpdate", "params": ["AppUpdateManager", "Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setImmediateUpdate(AppUpdateManager appUpdateManager, Activity activity) {        appUpdateManager                .getAppUpdateInfo()                .addOnSuccessListener(                        appUpdateInfo -> {                            // Checks that the platform will allow the specified type of update.                            if ((appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE)                                    && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)) {                                // Request the update.                                try {                                    appUpdateManager.startUpdateFlowForResult(                                            appUpdateInfo,                                            AppUpdateType.IMMEDIATE,                                            activity,                                            REQUEST_APP_UPDATE);                                } catch (IntentSender.SendIntentException e) {                                    e.printStackTrace();                                }                            }                        });    }", "url": "https://raw.githubusercontent.com/myinnos/Android-InApp-Update/master/inappupdate/src/main/java/in/myinnos/inappupdate/InAppUpdate.java", "stars": "3", "class": {"name": "InAppUpdate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImmediateUpdateOnResume", "params": ["AppUpdateManager", "Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setImmediateUpdateOnResume(AppUpdateManager appUpdateManager, Activity activity) {        appUpdateManager                .getAppUpdateInfo()                .addOnSuccessListener(                        appUpdateInfo -> {                            if (appUpdateInfo.updateAvailability()                                    == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS) {                                // If an in-app update is already running, resume the update.                                try {                                    appUpdateManager.startUpdateFlowForResult(                                            appUpdateInfo,                                            AppUpdateType.IMMEDIATE,                                            activity,                                            REQUEST_APP_UPDATE);                                } catch (IntentSender.SendIntentException e) {                                    e.printStackTrace();                                }                            }                        });    }", "url": "https://raw.githubusercontent.com/myinnos/Android-InApp-Update/master/inappupdate/src/main/java/in/myinnos/inappupdate/InAppUpdate.java", "stars": "3", "class": {"name": "InAppUpdate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlexibleUpdate", "params": ["AppUpdateManager", "Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setFlexibleUpdate(AppUpdateManager appUpdateManager, Activity activity) {        InstallStateUpdatedListener installStateUpdatedListener = installState -> {            if (installState.installStatus() == InstallStatus.DOWNLOADED) {                Snackbar snackbar =                        Snackbar.make(                                activity.findViewById(android.R.id.content),                                activity.getString(R.string.in_app_snack_bar_message),                                Snackbar.LENGTH_INDEFINITE);                //lambda operation used for below action                snackbar.setAction(activity.getString(R.string.in_app_snack_bar_action_title), view ->                        appUpdateManager.completeUpdate());                snackbar.setActionTextColor(activity.getResources().getColor(R.color.in_app_snack_bar_text_color))                ;                snackbar.show();            } else                Log.e(\"UPDATE\", \"Not downloaded yet\");        };        appUpdateManager                .getAppUpdateInfo()                .addOnSuccessListener(                        appUpdateInfo -> {                            // Checks that the platform will allow the specified type of update.                            if ((appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE)                                    && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.FLEXIBLE)) {                                // Request the update.                                try {                                    appUpdateManager.startUpdateFlowForResult(                                            appUpdateInfo,                                            AppUpdateType.FLEXIBLE,                                            activity,                                            REQUEST_APP_UPDATE);                                } catch (IntentSender.SendIntentException e) {                                    e.printStackTrace();                                }                            }                        });        appUpdateManager.registerListener(installStateUpdatedListener);    }", "url": "https://raw.githubusercontent.com/myinnos/Android-InApp-Update/master/inappupdate/src/main/java/in/myinnos/inappupdate/InAppUpdate.java", "stars": "3", "class": {"name": "InAppUpdate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlexibleUpdateOnResume", "params": ["AppUpdateManager", "Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setFlexibleUpdateOnResume(AppUpdateManager appUpdateManager, Activity activity) {        appUpdateManager                .getAppUpdateInfo()                .addOnSuccessListener(                        appUpdateInfo -> {                            if (appUpdateInfo.updateAvailability()                                    == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS) {                                // If an in-app update is already running, resume the update.                                try {                                    appUpdateManager.startUpdateFlowForResult(                                            appUpdateInfo,                                            AppUpdateType.FLEXIBLE,                                            activity,                                            REQUEST_APP_UPDATE);                                } catch (IntentSender.SendIntentException e) {                                    e.printStackTrace();                                }                            }                        });    }", "url": "https://raw.githubusercontent.com/myinnos/Android-InApp-Update/master/inappupdate/src/main/java/in/myinnos/inappupdate/InAppUpdate.java", "stars": "3", "class": {"name": "InAppUpdate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDisplay", "params": ["JR100Display"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDisplay(JR100Display display) {        this.display = display;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/VideoRam.java", "stars": "4", "class": {"name": "VideoRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public", "final"]}}, {"method_name": "store8", "params": ["int", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store8(int address, byte value) {        data[address - start] = value;        display.updateFont((address - (start - 0x100)) / 8, (address - (start - 0x100)) % 8, value);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/VideoRam.java", "stars": "4", "class": {"name": "VideoRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public", "final"]}}, {"method_name": "store16", "params": ["int", "short"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store16(int address, short value) {        data[address - start] = (byte)(value >> 8);        display.updateFont((address - start) / 8, (address - start) % 8, value >> 8);        data[address - getStartAddress() + 1] = (byte)(value & 0xff);        display.updateFont((address - (start - 0x100)) / 8, (address - (start - 0x100)) % 8, value & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/VideoRam.java", "stars": "4", "class": {"name": "VideoRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public", "final"]}}, {"method_name": "saveState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveState(StateSet ss) {        ss.set(\"VideoRam.start_addr\", start);        ss.set(\"VideoRam.length\", length);        ss.set(\"VideoRam.data\", data);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/VideoRam.java", "stars": "4", "class": {"name": "VideoRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public", "final"]}}, {"method_name": "loadState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadState(StateSet ss) {        start = (Integer)ss.get(\"VideoRam.start_addr\");        length = (Integer)ss.get(\"VideoRam.length\");        data = (byte[])ss.get(\"VideoRam.data\");    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/VideoRam.java", "stars": "4", "class": {"name": "VideoRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public", "final"]}}, {"method_name": "getParser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SecurityMachineParser", "snippet": "    public SecurityMachineParser getParser() {        return (SecurityMachineParser) this.parser;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/incoming/security/SecurityMachineEvent.java", "stars": "2", "class": {"name": "SecurityMachineEvent", "extends": "MessageEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleLogDataFilter", "params": ["String", "String", "List<LogFilterEntity>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String handleLogDataFilter(String logData, String logType, List<LogFilterEntity> logFilterList){    String logResult = \"\";    if(\"error\".equals(logType)){      logResult = handleErrorLog(logData, logFilterList);    }else if(\"info\".equals(logType)){      logResult = handleInfoLog(logData, logFilterList);    }    return logResult;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleInfoLog", "params": ["String", "List<LogFilterEntity>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String handleInfoLog(String logData, List<LogFilterEntity> logFilterList){    String infoLog = \"\";    StringBuilder sb = new StringBuilder();    String[] handleData = logData.split(\"\\n\");    String infoBegin = \"\";    for(String lineLog : handleData){      if(lineLog.contains(\"Error in query\")){        infoBegin = \"ErrorQuery\";      }      if(lineLog.contains(\" INFO - \") && !lineLog.contains(\"Exception\") && !lineLog.contains(\" INFO - \\t\")          && !lineLog.contains(\"Error\")){        // \u6309\u884c\u5339\u914d\u65e5\u5fd7        if(\"ErrorQuery\".equals(infoBegin)){          infoBegin = \"End\";        }else{          lineLog = handleAllLogFilter(lineLog, logFilterList);          // \u5982\u679c\u8fd9\u884c\u65e5\u5fd7\u88ab\u5220\u9664 \u5c31\u4e0d\u7528\u6362\u884c\u4e86          if(!\"\".equals(lineLog)){            sb.append(lineLog).append(\"\\n\");          }        }      }    }    infoLog = sb.toString();    return infoLog;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleErrorLog", "params": ["String", "List<LogFilterEntity>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String handleErrorLog(String logData, List<LogFilterEntity> logFilterList){    String errorLog = \"\";    String nowCutType = \"\";    StringBuilder sb = new StringBuilder();    String[] handleData = logData.split(\"\\n\");    String errorBegin = \"\";    for(String lineLog : handleData){      //ERROR\u65e5\u5fd7\u5207\u5272      if(lineLog.contains(\" ERROR - \")){        errorBegin = \"START\";        nowCutType = \"ERROR\";        sb.append(handleExecptionLogFilter(lineLog, logFilterList)).append(\"\\n\");        handleExecptionLogFilterAndErrorCode(sb, lineLog, logFilterList);      }else if((lineLog.contains(\" ERROR - \") || lineLog.contains(\" INFO - \")) && \"START\".equals(errorBegin) && \"ERROR\".equals(nowCutType)){        errorBegin = \"END\";      }else if(\"START\".equals(errorBegin) && \"ERROR\".equals(nowCutType)){        sb.append(handleExecptionLogFilter(lineLog, logFilterList)).append(\"\\n\");        handleExecptionLogFilterAndErrorCode(sb, lineLog, logFilterList);      }      //INFO \u65e5\u5fd7\u91cc\u7684\u5f02\u5e38\u60c5\u51b5      if(lineLog.contains(\" INFO - \") && (lineLog.contains(\"Exception\") || lineLog.contains(\"Error\"))){        errorBegin = \"START\";        nowCutType = \"INFO\";        if(lineLog.contains(\"Error in query\")){          errorBegin = \"ErrorQuery\";        }        sb.append(handleExecptionLogFilter(lineLog, logFilterList)).append(\"\\n\");        handleExecptionLogFilterAndErrorCode(sb, lineLog, logFilterList);      }else if(lineLog.contains(\" INFO - \") && !lineLog.contains(\"Exception\") && !lineLog.contains(\" INFO - \\t\")          && \"INFO\".equals(nowCutType) && !\"ErrorQuery\".equals(errorBegin)){        errorBegin = \"END\";      }else if((\"START\".equals(errorBegin) || \"ErrorQuery\".equals(errorBegin)) && \"INFO\".equals(nowCutType)){        sb.append(handleExecptionLogFilter(lineLog, logFilterList)).append(\"\\n\");        handleExecptionLogFilterAndErrorCode(sb, lineLog, logFilterList);        if( \"ErrorQuery\".equals(errorBegin)){          errorBegin = \"END\";        }      }    }    errorLog = sb.toString();    return  errorLog;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleExecptionLogFilterAndErrorCode", "params": ["StringBuilder", "String", "List<LogFilterEntity>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void handleExecptionLogFilterAndErrorCode(StringBuilder sb, String logLine, List<LogFilterEntity> logFilterList){    for(LogFilterEntity logFilter : logFilterList){      if(LogCodeType.ERROR == logFilter.getCodeType()){        //\u6b63\u5219\u5339\u914d\u5bf9\u4e8e\u7684\u9519\u8bef\u5173\u952e\u65e5\u5fd7        List<String> result = regexMathc(logLine, logFilter.getCompareText());        if(result.size() > 0){          if(OperateType.ADD == logFilter.getOperateType()){            sb.append(\"<font color='red'>\");            sb.append(\"\u9519\u8bef\u7801: \" + logFilter.getLogCode() + \" \u9519\u8bef\u8bf4\u660e: \"                + logKeyWordReplace(logFilter.getLogNotice(), result) + \"\\n\");            sb.append(\"</font>\");          }        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleExecptionLogFilter", "params": ["String", "List<LogFilterEntity>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String handleExecptionLogFilter(String logLine, List<LogFilterEntity> logFilterList){    String filterLog = logLine;    for(LogFilterEntity logFilter : logFilterList){      if(LogCodeType.ERROR == logFilter.getCodeType()){        if(logLine.contains(logFilter.getCompareText())){          if(OperateType.REMOVE == logFilter.getOperateType()){            // \u83b7\u53d6\u9700\u8981\u5207\u5272\u65e5\u5fd7\u7684\u672b\u5c3e            int azkabanLog = logLine.indexOf(logFilter.getCompareText()) + logFilter.getCompareText().length();            // \u5207\u5272\u539f\u59cb\u65e5\u5fd7            filterLog = logLine.substring(azkabanLog, logLine.length());          }        }      }    }    return filterLog;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleAllLogFilter", "params": ["String", "List<LogFilterEntity>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String handleAllLogFilter(String logLine, List<LogFilterEntity> logFilterList){    String filterLog = logLine;    for(LogFilterEntity logFilter : logFilterList){      if(LogCodeType.INFO == logFilter.getCodeType()){        if(filterLog.contains(logFilter.getCompareText())){          if(OperateType.REMOVE == logFilter.getOperateType()){            // \u83b7\u53d6\u9700\u8981\u5207\u5272\u65e5\u5fd7\u7684\u672b\u5c3e            int azkabanLog = filterLog.indexOf(logFilter.getCompareText()) + logFilter.getCompareText().length();            // \u5207\u5272\u539f\u59cb\u65e5\u5fd7            filterLog = filterLog.substring(azkabanLog, filterLog.length());          }          if(OperateType.REMOVE_ALL == logFilter.getOperateType()){            //\u5220\u9664\u6574\u884c\u65e5\u5fd7            filterLog = \"\";          }        }      }    }    return filterLog;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "regexMathc", "params": ["String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<String>", "snippet": "  private static List<String> regexMathc(String linglog, String regex){    List<String> result = new ArrayList<>();    Pattern datePattern = Pattern.compile(regex);    Matcher dateMatcher = datePattern.matcher(linglog);    while(dateMatcher.find()) {      result.add(dateMatcher.group().trim());    }    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logKeyWordReplace", "params": ["String", "List<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String logKeyWordReplace(String logNotic, List<String> keyWord){    for(int i=0; i<keyWord.size(); i++){      logNotic = logNotic.replace(\"#\" + i +\"#\", keyWord.get(i));    }    return logNotic;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleErrorLogMarkedRed", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String handleErrorLogMarkedRed(String logData){    String logResult = \"\";    logResult = errorLogRedFont(logData);    return logResult;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "errorLogRedFont", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String errorLogRedFont(String logData){    String errorLog = \"\";    String nowCutType = \"\";    StringBuilder sb = new StringBuilder();    String[] handleData = logData.split(\"\\n\");    String errorBegin = \"\";    for(String lineLog : handleData){      //ERROR\u65e5\u5fd7\u5207\u5272      if(lineLog.contains(\" ERROR - \")){        errorBegin = \"START\";        nowCutType = \"ERROR\";        handleExecptionLogRedFont(sb, lineLog);      }else if((lineLog.contains(\" ERROR - \") || lineLog.contains(\" INFO - \")) && \"START\".equals(errorBegin) && \"ERROR\".equals(nowCutType)){        errorBegin = \"END\";        sb.append(lineLog).append(\"\\n\");      }else if(\"START\".equals(errorBegin) && \"ERROR\".equals(nowCutType)){        handleExecptionLogRedFont(sb, lineLog);      }      //INFO \u65e5\u5fd7\u91cc\u7684\u5f02\u5e38\u60c5\u51b5      else if(lineLog.contains(\" INFO - \") && (lineLog.contains(\"Exception\") || lineLog.contains(\"Error\") || lineLog.contains(\"Execution\"))){        errorBegin = \"START\";        nowCutType = \"INFO\";        if(lineLog.contains(\"Error in query\")){          errorBegin = \"ErrorQuery\";        }        handleExecptionLogRedFont(sb, lineLog);      }else if(lineLog.contains(\" INFO - \") && !lineLog.contains(\"Exception\") && !lineLog.contains(\" INFO - \\t\")          && \"INFO\".equals(nowCutType) && !\"ErrorQuery\".equals(errorBegin)){        errorBegin = \"END\";        sb.append(lineLog).append(\"\\n\");      }else if((\"START\".equals(errorBegin) || \"ErrorQuery\".equals(errorBegin)) && \"INFO\".equals(nowCutType)){        handleExecptionLogRedFont(sb, lineLog);        if( \"ErrorQuery\".equals(errorBegin)){          errorBegin = \"END\";        }      }else {        sb.append(lineLog).append(\"\\n\");      }    }    errorLog = sb.toString();    return  errorLog;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleExecptionLogRedFont", "params": ["StringBuilder", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void handleExecptionLogRedFont(StringBuilder sb, String lineLog){    sb.append(\"<font color='red'>\");    sb.append(lineLog);    sb.append(\"</font>\").append(\"\\n\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleYarnLogDataFilter", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String handleYarnLogDataFilter(String logData){    String logResult = \"\";    StringBuilder sb = new StringBuilder();    Set<String> yarnSet = new HashSet<>();    String[] handleData = logData.split(\"\\n\");    //application\u5f00\u5934\u7684\u53f7    Pattern APPLICATION_ID_PATTERN = Pattern.compile(\"(application_\\\\d+_\\\\d+).*\");    for(String lineLog : handleData){      // \u6309\u884c\u5339\u914d\u65e5\u5fd7      Matcher m = APPLICATION_ID_PATTERN.matcher(lineLog);      if (m.find()) {        String appId = m.group(1);        //sb.append(appId).append(\"\\n\");        yarnSet.add(appId);      }    }    //job\u5f00\u5934\u7684\u53f7    Pattern Job_ID_PATTERN = Pattern.compile(\"(job_\\\\d+_\\\\d+).*\");    for(String lineLog : handleData){      // \u6309\u884c\u5339\u914d\u65e5\u5fd7      Matcher m = Job_ID_PATTERN.matcher(lineLog);      if (m.find()) {        String appId = m.group(1);        appId = appId.replace(\"job\",\"application\");        //sb.append(appId).append(\"\\n\");        yarnSet.add(appId);      }    }    for(String appId : yarnSet){      sb.append(appId).append(\"\\n\");    }    logResult = sb.toString();    return logResult;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LogErrorCodeFilterUtils.java", "stars": "18", "class": {"name": "LogErrorCodeFilterUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testThrowsByDefault", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testThrowsByDefault() throws AnalyzerException {\t\tClassNode node = getFromName(\"bin/custom/misc/WrongCallArgType.class\");\t\tfor(MethodNode mn : node.methods) {\t\t\tSimAnalyzer analyzer = new SimAnalyzer(new SimInterpreter());\t\t\tassertThrows(AnalyzerException.class, () -> analyzer.analyze(node.name, mn));\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/design/TestExceptionFactory.java", "stars": "12", "class": {"name": "TestExceptionFactory", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "testCustomFactorySupppressesException", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testCustomFactorySupppressesException() throws AnalyzerException {\t\tClassNode node = getFromName(\"bin/custom/misc/WrongCallArgType.class\");\t\tfor(MethodNode mn : node.methods) {\t\t\tSimAnalyzer analyzer = new SimAnalyzer(new SimInterpreter()) {\t\t\t\t@Override\t\t\t\tprotected ResolvableExceptionFactory createExceptionFactory() {\t\t\t\t\treturn new ResolvableExceptionFactoryTestImpl(createTypeChecker());\t\t\t\t}\t\t\t};\t\t\tassertDoesNotThrow(() -> analyzer.analyze(node.name, mn));\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/design/TestExceptionFactory.java", "stars": "12", "class": {"name": "TestExceptionFactory", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "unexpectedMethodArgType", "params": ["Type", "Type", "AbstractInsnNode", "AbstractValue", "List<AbstractValue>", "int", "TypeMismatchKind"], "throws": null, "modifiers": ["public"], "return_type": "AnalyzerException", "snippet": "\t\tpublic AnalyzerException unexpectedMethodArgType(Type expectedType,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Type actualType,\t\t\t\t\t\t\t\t\t\t\t\t\t\t AbstractInsnNode insn,\t\t\t\t\t\t\t\t\t\t\t\t\t\t AbstractValue actualValue,\t\t\t\t\t\t\t\t\t\t\t\t\t\t List<? extends AbstractValue> stackValues,\t\t\t\t\t\t\t\t\t\t\t\t\t\t int argIndex,\t\t\t\t\t\t\t\t\t\t\t\t\t\t TypeMismatchKind errorType) {\t\t\treturn new ResolvableAnalyzerException((methodNode, frames) -> true, insn, \"\");\t\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/design/TestExceptionFactory.java", "stars": "12", "class": {"name": "ResolvableExceptionFactoryTestImpl", "extends": "ResolvableExceptionFactory", "implements": null, "modifiers": ["static"]}}, {"method_name": "userSignup", "params": ["SignupUserRequest"], "throws": ["SignUpRestrictedException"], "modifiers": ["public"], "return_type": "ResponseEntity<SignupUserResponse>", "snippet": "    public ResponseEntity<SignupUserResponse> userSignup(@RequestBody(required = false) final SignupUserRequest signupUserRequest)            throws SignUpRestrictedException {        final UserEntity userEntity = new UserEntity();        userEntity.setUuid(UUID.randomUUID().toString());        userEntity.setFirstName(signupUserRequest.getFirstName());        userEntity.setLastName(signupUserRequest.getLastName());        userEntity.setEmail(signupUserRequest.getEmailAddress());        userEntity.setPassword(signupUserRequest.getPassword());        userEntity.setMobilePhone(signupUserRequest.getMobileNumber());        userEntity.setSalt(\"1234abc\");        userEntity.setRole(\"nonadmin\");        final UserEntity createdUserEntity = signupBusinessService.signup(userEntity);        SignupUserResponse userResponse = new SignupUserResponse().id(createdUserEntity.getUuid()).status(\"USER SUCCESSFULLY REGISTERED\");        return new ResponseEntity<SignupUserResponse>(userResponse, HttpStatus.CREATED);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/src/main/java/com/upgrad/musichoster/api/controller/SignupController.java", "stars": "2", "class": {"name": "SignupController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSuccessfullyLoadMinimalXMLConfigFile", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {    // System.setProperty(XPathParser.KEY_USE_XSD, \"true\");    String resource = \"org/apache/ibatis/builder/xsd/MinimalMapperConfig.xml\";    try (InputStream inputStream = Resources.getResourceAsStream(resource)) {      XMLConfigBuilder builder = new XMLConfigBuilder(inputStream);      Configuration config = builder.parse();      assertNotNull(config);      assertEquals(AutoMappingBehavior.PARTIAL, config.getAutoMappingBehavior());      assertEquals(AutoMappingUnknownColumnBehavior.NONE, config.getAutoMappingUnknownColumnBehavior());      assertTrue(config.isCacheEnabled());      assertTrue(config.getProxyFactory() instanceof JavassistProxyFactory);      assertFalse(config.isLazyLoadingEnabled());      assertFalse(config.isAggressiveLazyLoading());      assertTrue(config.isMultipleResultSetsEnabled());      assertTrue(config.isUseColumnLabel());      assertFalse(config.isUseGeneratedKeys());      assertEquals(ExecutorType.SIMPLE, config.getDefaultExecutorType());      assertNull(config.getDefaultStatementTimeout());      assertNull(config.getDefaultFetchSize());      assertFalse(config.isMapUnderscoreToCamelCase());      assertFalse(config.isSafeRowBoundsEnabled());      assertEquals(LocalCacheScope.SESSION, config.getLocalCacheScope());      assertEquals(JdbcType.OTHER, config.getJdbcTypeForNull());      assertEquals(new HashSet<>(Arrays.asList(\"equals\", \"clone\", \"hashCode\", \"toString\")), config.getLazyLoadTriggerMethods());      assertTrue(config.isSafeResultHandlerEnabled());      assertTrue(config.getDefaultScriptingLanguageInstance() instanceof XMLLanguageDriver);      assertFalse(config.isCallSettersOnNulls());      assertNull(config.getLogPrefix());      assertNull(config.getLogImpl());      assertNull(config.getConfigurationFactory());    } finally {      // System.clearProperty(XPathParser.KEY_USE_XSD);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java", "stars": "15", "class": {"name": "XmlConfigBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSuccessfullyLoadXMLConfigFile", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSuccessfullyLoadXMLConfigFile() throws Exception {    // System.setProperty(XPathParser.KEY_USE_XSD, \"true\");    String resource = \"org/apache/ibatis/builder/xsd/CustomizedSettingsMapperConfig.xml\";    try (InputStream inputStream = Resources.getResourceAsStream(resource)) {      XMLConfigBuilder builder = new XMLConfigBuilder(inputStream);      Configuration config = builder.parse();      assertEquals(AutoMappingBehavior.NONE, config.getAutoMappingBehavior());      assertEquals(AutoMappingUnknownColumnBehavior.WARNING, config.getAutoMappingUnknownColumnBehavior());      assertFalse(config.isCacheEnabled());      assertTrue(config.getProxyFactory() instanceof CglibProxyFactory);      assertTrue(config.isLazyLoadingEnabled());      assertTrue(config.isAggressiveLazyLoading());      assertFalse(config.isMultipleResultSetsEnabled());      assertFalse(config.isUseColumnLabel());      assertTrue(config.isUseGeneratedKeys());      assertEquals(ExecutorType.BATCH, config.getDefaultExecutorType());      assertEquals(Integer.valueOf(10), config.getDefaultStatementTimeout());      assertEquals(Integer.valueOf(100), config.getDefaultFetchSize());      assertTrue(config.isMapUnderscoreToCamelCase());      assertTrue(config.isSafeRowBoundsEnabled());      assertEquals(LocalCacheScope.STATEMENT, config.getLocalCacheScope());      assertEquals(JdbcType.NULL, config.getJdbcTypeForNull());      assertEquals(new HashSet<>(Arrays.asList(\"equals\", \"clone\", \"hashCode\", \"toString\", \"xxx\")), config.getLazyLoadTriggerMethods());      assertFalse(config.isSafeResultHandlerEnabled());      assertTrue(config.getDefaultScriptingLanguageInstance() instanceof RawLanguageDriver);      assertTrue(config.isCallSettersOnNulls());      assertEquals(\"mybatis_\", config.getLogPrefix());      assertEquals(Slf4jImpl.class.getName(), config.getLogImpl().getName());      assertEquals(JBoss6VFS.class.getName(), config.getVfsImpl().getName());      assertEquals(String.class.getName(), config.getConfigurationFactory().getName());      assertEquals(Author.class, config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\"));      assertEquals(Blog.class, config.getTypeAliasRegistry().getTypeAliases().get(\"blog\"));      assertEquals(Cart.class, config.getTypeAliasRegistry().getTypeAliases().get(\"cart\"));      assertTrue(config.getTypeHandlerRegistry().getTypeHandler(Integer.class) instanceof CustomIntegerTypeHandler);      assertTrue(config.getTypeHandlerRegistry().getTypeHandler(Long.class) instanceof CustomLongTypeHandler);      assertTrue(config.getTypeHandlerRegistry().getTypeHandler(String.class) instanceof CustomStringTypeHandler);      assertTrue(config.getTypeHandlerRegistry().getTypeHandler(String.class, JdbcType.VARCHAR) instanceof CustomStringTypeHandler);      ExampleObjectFactory objectFactory = (ExampleObjectFactory)config.getObjectFactory();      assertEquals(1, objectFactory.getProperties().size());      assertEquals(\"100\", objectFactory.getProperties().getProperty(\"objectFactoryProperty\"));      assertTrue(config.getObjectWrapperFactory() instanceof CustomObjectWrapperFactory);      assertTrue(config.getReflectorFactory() instanceof CustomReflectorFactory);      ExamplePlugin plugin = (ExamplePlugin)config.getInterceptors().get(0);      assertEquals(1, plugin.getProperties().size());      assertEquals(\"100\", plugin.getProperties().getProperty(\"pluginProperty\"));      Environment environment = config.getEnvironment();      assertEquals(\"development\", environment.getId());      assertTrue(environment.getDataSource() instanceof UnpooledDataSource);      assertTrue(environment.getTransactionFactory() instanceof JdbcTransactionFactory);      assertEquals(\"derby\", config.getDatabaseId());      assertEquals(4, config.getMapperRegistry().getMappers().size());      assertTrue(config.getMapperRegistry().hasMapper(CachedAuthorMapper.class));      assertTrue(config.getMapperRegistry().hasMapper(CustomMapper.class));      assertTrue(config.getMapperRegistry().hasMapper(BlogMapper.class));      assertTrue(config.getMapperRegistry().hasMapper(NestedBlogMapper.class));    } finally {      // System.clearProperty(XPathParser.KEY_USE_XSD);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java", "stars": "15", "class": {"name": "XmlConfigBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        final View view = inflater.inflate(R.layout.fragment_set_timer, container, false);        final Button setTimerButton = view.findViewById(R.id.start_timer_button);        final NumberPicker ones = view.findViewById(R.id.ones_number_picker);        final NumberPicker tens = view.findViewById(R.id.tens_number_picker);        final NumberPicker hundred = view.findViewById(R.id.hundred_number_picker);        final NumberPicker thousand = view.findViewById(R.id.thousand_number_picker);        final NumberPicker tenThousand = view.findViewById(R.id.ten_thousand_number_picker);        final NumberPicker lakh = view.findViewById(R.id.lakh_number_picker);        final NumberPicker tenLakh = view.findViewById(R.id.ten_lakh_number_picker);        final NumberPicker crore = view.findViewById(R.id.crore_number_picker);        final NumberPicker minutesNumberPicker = view.findViewById(R.id.minutes_number_picker);        setTimerButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    countdownHrs = Long.parseLong( \"\" + crore.getValue()                            + \"\" + tenLakh.getValue()                            + \"\" + lakh.getValue()                            + \"\" + tenThousand.getValue()                            + \"\" + thousand.getValue()                            + \"\" + hundred.getValue()                            + \"\" + tens.getValue()                            + \"\" + ones.getValue()                    );                    countdownMins = Integer.parseInt(minutesNumberPicker.getValue() + \"\");                } catch(Exception e){                    countdownHrs = Long.parseLong(\"0\");                    countdownMins = Integer.parseInt(\"0\");                }                long currentTime = new Date().getTime();                long countdownTime = (countdownHrs * 60 * 60 * 1000) + (countdownMins * 60 * 1000);                long destinationTime = currentTime + countdownTime;                if (destinationTime <= currentTime) {                    Toast.makeText(getActivity(), \"Enter valid time.\", Toast.LENGTH_SHORT).show();                } else {                    SharedPreferences.Editor spEditor = getActivity().getSharedPreferences(SHARED_PREFERENCE_NAME, 0).edit();                    spEditor.putLong(DESTINATION_TIME_KEY, destinationTime);                    spEditor.apply();                    Toast.makeText(getActivity(), \"Countdown started\", Toast.LENGTH_SHORT).show();                    getActivity().getSupportFragmentManager().beginTransaction()                            .replace(R.id.fragment_container_frame_layout, new ShowTimerFragment()).commit();                }            }        });        return view;    }", "url": "https://raw.githubusercontent.com/LakshyaKhatri/Lifetime/master/app/src/main/java/com/compiletales/lifetime/SetTimerFragment.java", "stars": "2", "class": {"name": "SetTimerFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "addResourceHandlers", "params": ["ResourceHandlerRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addResourceHandlers(ResourceHandlerRegistry registry) {        // file:///{user.home}/.beyond/        String workDir = FILE_PROTOCOL + beyondProperties.getWorkDir();        registry.addResourceHandler(\"/swagger-ui.html\").addResourceLocations(\"classpath:/META-INF/resources/\");        registry.addResourceHandler(\"/**\").addResourceLocations(\"classpath:/templates/theme/\");        registry.addResourceHandler(\"/admin/**\").addResourceLocations(\"classpath:/admin/\");        registry.addResourceHandler(\"/upload/**\").addResourceLocations(workDir + \"upload/\");    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/configuration/WebMvcAutoConfig.java", "stars": "1", "class": {"name": "WebMvcAutoConfig", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException", "ClassNotFoundException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException, ClassNotFoundException {        //1.\u521b\u5efaObjectInputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u5165\u6d41        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"10_IO\\\\person.txt\"));        //2.\u4f7f\u7528ObjectInputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5readObject\u8bfb\u53d6\u4fdd\u5b58\u5bf9\u8c61\u7684\u6587\u4ef6        Object o = ois.readObject();        //3.\u91ca\u653e\u8d44\u6e90        ois.close();        //4.\u4f7f\u7528\u8bfb\u53d6\u51fa\u6765\u7684\u5bf9\u8c61(\u6253\u5370)        System.out.println(o);        Person p = (Person)o;        System.out.println(p.getName()+p.getAge());    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo04/ObjectStream/Demo02ObjectInputStream.java", "stars": "2", "class": {"name": "Demo02ObjectInputStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPeerConnectionFactory", "params": ["PeerConnectionFactory"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void createPeerConnectionFactory(PeerConnectionFactory.Options options) {    if (factory != null) {      throw new IllegalStateException(\"PeerConnectionFactory has already been constructed\");    }    executor.execute(() -> createPeerConnectionFactoryInternal(options));  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPeerConnection", "params": ["VideoSink", "VideoSink", "VideoCapturer", "SignalingParameters"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void createPeerConnection(final VideoSink localRender, final VideoSink remoteSink,      final VideoCapturer videoCapturer, final SignalingParameters signalingParameters) {    if (peerConnectionParameters.videoCallEnabled && videoCapturer == null) {      Log.w(TAG, \"Video call enabled but no video capturer provided.\");    }    createPeerConnection(        localRender, Collections.singletonList(remoteSink), videoCapturer, signalingParameters);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPeerConnection", "params": ["VideoSink", "List<VideoSink>", "VideoCapturer", "SignalingParameters"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void createPeerConnection(final VideoSink localRender, final List<VideoSink> remoteSinks,      final VideoCapturer videoCapturer, final SignalingParameters signalingParameters) {    if (peerConnectionParameters == null) {      Log.e(TAG, \"Creating peer connection without initializing factory.\");      return;    }    this.localRender = localRender;    this.remoteSinks = remoteSinks;    this.videoCapturer = videoCapturer;    this.signalingParameters = signalingParameters;    executor.execute(() -> {      try {        createMediaConstraintsInternal();        createPeerConnectionInternal();        maybeCreateAndStartRtcEventLog();      } catch (Exception e) {        reportError(\"Failed to create peer connection: \" + e.getMessage());        throw e;      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void close() {    executor.execute(this ::closeInternal);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isVideoCallEnabled", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isVideoCallEnabled() {    return peerConnectionParameters.videoCallEnabled && videoCapturer != null;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPeerConnectionFactoryInternal", "params": ["PeerConnectionFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void createPeerConnectionFactoryInternal(PeerConnectionFactory.Options options) {    isError = false;    if (peerConnectionParameters.tracing) {      PeerConnectionFactory.startInternalTracingCapture(          Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator          + \"webrtc-trace.txt\");    }    // Check if ISAC is used by default.    preferIsac = peerConnectionParameters.audioCodec != null        && peerConnectionParameters.audioCodec.equals(AUDIO_CODEC_ISAC);    // It is possible to save a copy in raw PCM format on a file by checking    // the \"Save input audio to file\" checkbox in the Settings UI. A callback    // interface is set when this flag is enabled. As a result, a copy of recorded    // audio samples are provided to this client directly from the native audio    // layer in Java.    if (peerConnectionParameters.saveInputAudioToFile) {      if (!peerConnectionParameters.useOpenSLES) {        Log.d(TAG, \"Enable recording of microphone input audio to file\");        saveRecordedAudioToFile = new RecordedAudioToFileController(executor);      } else {        // TODO(henrika): ensure that the UI reflects that if OpenSL ES is selected,        // then the \"Save inut audio to file\" option shall be grayed out.        Log.e(TAG, \"Recording of input audio is not supported for OpenSL ES\");      }    }    final AudioDeviceModule adm = createJavaAudioDevice();    // Create peer connection factory.    if (options != null) {      Log.d(TAG, \"Factory networkIgnoreMask option: \" + options.networkIgnoreMask);    }    final boolean enableH264HighProfile =        VIDEO_CODEC_H264_HIGH.equals(peerConnectionParameters.videoCodec);    final VideoEncoderFactory encoderFactory;    final VideoDecoderFactory decoderFactory;    if (peerConnectionParameters.videoCodecHwAcceleration) {      encoderFactory = new DefaultVideoEncoderFactory(          rootEglBase.getEglBaseContext(), true /* enableIntelVp8Encoder */, enableH264HighProfile);      decoderFactory = new DefaultVideoDecoderFactory(rootEglBase.getEglBaseContext());    } else {      encoderFactory = new SoftwareVideoEncoderFactory();      decoderFactory = new SoftwareVideoDecoderFactory();    }    factory = PeerConnectionFactory.builder()                  .setOptions(options)                  .setAudioDeviceModule(adm)                  .setVideoEncoderFactory(encoderFactory)                  .setVideoDecoderFactory(decoderFactory)                  .createPeerConnectionFactory();    Log.d(TAG, \"Peer connection factory created.\");    adm.release();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createJavaAudioDevice", "params": [], "throws": null, "modifiers": [], "return_type": "AudioDeviceModule", "snippet": "  AudioDeviceModule createJavaAudioDevice() {    // Enable/disable OpenSL ES playback.    if (!peerConnectionParameters.useOpenSLES) {      Log.w(TAG, \"External OpenSLES ADM not implemented yet.\");      // TODO(magjed): Add support for external OpenSLES ADM.    }    // Set audio record error callbacks.    AudioRecordErrorCallback audioRecordErrorCallback = new AudioRecordErrorCallback() {      @Override      public void onWebRtcAudioRecordInitError(String errorMessage) {        Log.e(TAG, \"onWebRtcAudioRecordInitError: \" + errorMessage);        reportError(errorMessage);      }      @Override      public void onWebRtcAudioRecordStartError(          JavaAudioDeviceModule.AudioRecordStartErrorCode errorCode, String errorMessage) {        Log.e(TAG, \"onWebRtcAudioRecordStartError: \" + errorCode + \". \" + errorMessage);        reportError(errorMessage);      }      @Override      public void onWebRtcAudioRecordError(String errorMessage) {        Log.e(TAG, \"onWebRtcAudioRecordError: \" + errorMessage);        reportError(errorMessage);      }    };    AudioTrackErrorCallback audioTrackErrorCallback = new AudioTrackErrorCallback() {      @Override      public void onWebRtcAudioTrackInitError(String errorMessage) {        Log.e(TAG, \"onWebRtcAudioTrackInitError: \" + errorMessage);        reportError(errorMessage);      }      @Override      public void onWebRtcAudioTrackStartError(          JavaAudioDeviceModule.AudioTrackStartErrorCode errorCode, String errorMessage) {        Log.e(TAG, \"onWebRtcAudioTrackStartError: \" + errorCode + \". \" + errorMessage);        reportError(errorMessage);      }      @Override      public void onWebRtcAudioTrackError(String errorMessage) {        Log.e(TAG, \"onWebRtcAudioTrackError: \" + errorMessage);        reportError(errorMessage);      }    };    // Set audio record state callbacks.    AudioRecordStateCallback audioRecordStateCallback = new AudioRecordStateCallback() {      @Override      public void onWebRtcAudioRecordStart() {        Log.i(TAG, \"Audio recording starts\");      }      @Override      public void onWebRtcAudioRecordStop() {        Log.i(TAG, \"Audio recording stops\");      }    };    // Set audio track state callbacks.    AudioTrackStateCallback audioTrackStateCallback = new AudioTrackStateCallback() {      @Override      public void onWebRtcAudioTrackStart() {        Log.i(TAG, \"Audio playout starts\");      }      @Override      public void onWebRtcAudioTrackStop() {        Log.i(TAG, \"Audio playout stops\");      }    };    return JavaAudioDeviceModule.builder(appContext)        .setSamplesReadyCallback(saveRecordedAudioToFile)        .setUseHardwareAcousticEchoCanceler(!peerConnectionParameters.disableBuiltInAEC)        .setUseHardwareNoiseSuppressor(!peerConnectionParameters.disableBuiltInNS)        .setAudioRecordErrorCallback(audioRecordErrorCallback)        .setAudioTrackErrorCallback(audioTrackErrorCallback)        .setAudioRecordStateCallback(audioRecordStateCallback)        .setAudioTrackStateCallback(audioTrackStateCallback)        .createAudioDeviceModule();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMediaConstraintsInternal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void createMediaConstraintsInternal() {    // Create video constraints if video call is enabled.    if (isVideoCallEnabled()) {      videoWidth = peerConnectionParameters.videoWidth;      videoHeight = peerConnectionParameters.videoHeight;      videoFps = peerConnectionParameters.videoFps;      // If video resolution is not specified, default to HD.      if (videoWidth == 0 || videoHeight == 0) {        videoWidth = HD_VIDEO_WIDTH;        videoHeight = HD_VIDEO_HEIGHT;      }      // If fps is not specified, default to 30.      if (videoFps == 0) {        videoFps = 30;      }      Logging.d(TAG, \"Capturing format: \" + videoWidth + \"x\" + videoHeight + \"@\" + videoFps);    }    // Create audio constraints.    audioConstraints = new MediaConstraints();    // added for audio performance measurements    if (peerConnectionParameters.noAudioProcessing) {      Log.d(TAG, \"Disabling audio processing\");      audioConstraints.mandatory.add(          new MediaConstraints.KeyValuePair(AUDIO_ECHO_CANCELLATION_CONSTRAINT, \"false\"));      audioConstraints.mandatory.add(          new MediaConstraints.KeyValuePair(AUDIO_AUTO_GAIN_CONTROL_CONSTRAINT, \"false\"));      audioConstraints.mandatory.add(          new MediaConstraints.KeyValuePair(AUDIO_HIGH_PASS_FILTER_CONSTRAINT, \"false\"));      audioConstraints.mandatory.add(          new MediaConstraints.KeyValuePair(AUDIO_NOISE_SUPPRESSION_CONSTRAINT, \"false\"));    }    // Create SDP constraints.    sdpMediaConstraints = new MediaConstraints();    sdpMediaConstraints.mandatory.add(        new MediaConstraints.KeyValuePair(\"OfferToReceiveAudio\", \"true\"));    sdpMediaConstraints.mandatory.add(new MediaConstraints.KeyValuePair(        \"OfferToReceiveVideo\", Boolean.toString(isVideoCallEnabled())));  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPeerConnectionInternal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void createPeerConnectionInternal() {    if (factory == null || isError) {      Log.e(TAG, \"Peerconnection factory is not created\");      return;    }    Log.d(TAG, \"Create peer connection.\");    queuedRemoteCandidates = new ArrayList<>();    PeerConnection.RTCConfiguration rtcConfig =        new PeerConnection.RTCConfiguration(signalingParameters.iceServers);    // TCP candidates are only useful when connecting to a server that supports    // ICE-TCP.    rtcConfig.tcpCandidatePolicy = PeerConnection.TcpCandidatePolicy.DISABLED;    rtcConfig.bundlePolicy = PeerConnection.BundlePolicy.MAXBUNDLE;    rtcConfig.rtcpMuxPolicy = PeerConnection.RtcpMuxPolicy.REQUIRE;    rtcConfig.continualGatheringPolicy = PeerConnection.ContinualGatheringPolicy.GATHER_CONTINUALLY;    // Use ECDSA encryption.    rtcConfig.keyType = PeerConnection.KeyType.ECDSA;    // Enable DTLS for normal calls and disable for loopback calls.    rtcConfig.enableDtlsSrtp = !peerConnectionParameters.loopback;    rtcConfig.sdpSemantics = PeerConnection.SdpSemantics.UNIFIED_PLAN;    peerConnection = factory.createPeerConnection(rtcConfig, pcObserver);    if (dataChannelEnabled) {      DataChannel.Init init = new DataChannel.Init();      init.ordered = peerConnectionParameters.dataChannelParameters.ordered;      init.negotiated = peerConnectionParameters.dataChannelParameters.negotiated;      init.maxRetransmits = peerConnectionParameters.dataChannelParameters.maxRetransmits;      init.maxRetransmitTimeMs = peerConnectionParameters.dataChannelParameters.maxRetransmitTimeMs;      init.id = peerConnectionParameters.dataChannelParameters.id;      init.protocol = peerConnectionParameters.dataChannelParameters.protocol;      dataChannel = peerConnection.createDataChannel(\"ApprtcDemo data\", init);    }    isInitiator = false;    // Set INFO libjingle logging.    // NOTE: this _must_ happen while |factory| is alive!    Logging.enableLogToDebugOutput(Logging.Severity.LS_INFO);    List<String> mediaStreamLabels = Collections.singletonList(\"ARDAMS\");    if (isVideoCallEnabled()) {      peerConnection.addTrack(createVideoTrack(videoCapturer), mediaStreamLabels);      // We can add the renderers right away because we don't need to wait for an      // answer to get the remote track.      remoteVideoTrack = getRemoteVideoTrack();      remoteVideoTrack.setEnabled(renderVideo);      for (VideoSink remoteSink : remoteSinks) {        remoteVideoTrack.addSink(remoteSink);      }    }    peerConnection.addTrack(createAudioTrack(), mediaStreamLabels);    if (isVideoCallEnabled()) {      findVideoSender();    }    if (peerConnectionParameters.aecDump) {      try {        ParcelFileDescriptor aecDumpFileDescriptor =            ParcelFileDescriptor.open(new File(Environment.getExternalStorageDirectory().getPath()                                          + File.separator + \"Download/audio.aecdump\"),                ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE                    | ParcelFileDescriptor.MODE_TRUNCATE);        factory.startAecDump(aecDumpFileDescriptor.detachFd(), -1);      } catch (IOException e) {        Log.e(TAG, \"Can not open aecdump file\", e);      }    }    if (saveRecordedAudioToFile != null) {      if (saveRecordedAudioToFile.start()) {        Log.d(TAG, \"Recording input audio to file is activated\");      }    }    Log.d(TAG, \"Peer connection created.\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createRtcEventLogOutputFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "File", "snippet": "  private File createRtcEventLogOutputFile() {    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMdd_hhmm_ss\", Locale.getDefault());    Date date = new Date();    final String outputFileName = \"event_log_\" + dateFormat.format(date) + \".log\";    return new File(        appContext.getDir(RTCEVENTLOG_OUTPUT_DIR_NAME, Context.MODE_PRIVATE), outputFileName);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "maybeCreateAndStartRtcEventLog", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void maybeCreateAndStartRtcEventLog() {    if (appContext == null || peerConnection == null) {      return;    }    if (!peerConnectionParameters.enableRtcEventLog) {      Log.d(TAG, \"RtcEventLog is disabled.\");      return;    }    rtcEventLog = new RtcEventLog(peerConnection);    rtcEventLog.start(createRtcEventLogOutputFile());  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeInternal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void closeInternal() {    if (factory != null && peerConnectionParameters.aecDump) {      factory.stopAecDump();    }    Log.d(TAG, \"Closing peer connection.\");    statsTimer.cancel();    if (dataChannel != null) {      dataChannel.dispose();      dataChannel = null;    }    if (rtcEventLog != null) {      // RtcEventLog should stop before the peer connection is disposed.      rtcEventLog.stop();      rtcEventLog = null;    }    if (peerConnection != null) {      peerConnection.dispose();      peerConnection = null;    }    Log.d(TAG, \"Closing audio source.\");    if (audioSource != null) {      audioSource.dispose();      audioSource = null;    }    Log.d(TAG, \"Stopping capture.\");    if (videoCapturer != null) {      try {        videoCapturer.stopCapture();      } catch (InterruptedException e) {        throw new RuntimeException(e);      }      videoCapturerStopped = true;      videoCapturer.dispose();      videoCapturer = null;    }    Log.d(TAG, \"Closing video source.\");    if (videoSource != null) {      videoSource.dispose();      videoSource = null;    }    if (surfaceTextureHelper != null) {      surfaceTextureHelper.dispose();      surfaceTextureHelper = null;    }    if (saveRecordedAudioToFile != null) {      Log.d(TAG, \"Closing audio file for recorded input audio.\");      saveRecordedAudioToFile.stop();      saveRecordedAudioToFile = null;    }    localRender = null;    remoteSinks = null;    Log.d(TAG, \"Closing peer connection factory.\");    if (factory != null) {      factory.dispose();      factory = null;    }    rootEglBase.release();    Log.d(TAG, \"Closing peer connection done.\");    events.onPeerConnectionClosed();    PeerConnectionFactory.stopInternalTracingCapture();    PeerConnectionFactory.shutdownInternalTracer();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isHDVideo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isHDVideo() {    return isVideoCallEnabled() && videoWidth * videoHeight >= 1280 * 720;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStats", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void getStats() {    if (peerConnection == null || isError) {      return;    }    boolean success = peerConnection.getStats(new StatsObserver() {      @Override      public void onComplete(final StatsReport[] reports) {        events.onPeerConnectionStatsReady(reports);      }    }, null);    if (!success) {      Log.e(TAG, \"getStats() returns false!\");    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableStatsEvents", "params": ["boolean", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void enableStatsEvents(boolean enable, int periodMs) {    if (enable) {      try {        statsTimer.schedule(new TimerTask() {          @Override          public void run() {            executor.execute(() -> getStats());          }        }, 0, periodMs);      } catch (Exception e) {        Log.e(TAG, \"Can not schedule statistics timer\", e);      }    } else {      statsTimer.cancel();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAudioEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAudioEnabled(final boolean enable) {    executor.execute(() -> {      enableAudio = enable;      if (localAudioTrack != null) {        localAudioTrack.setEnabled(enableAudio);      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVideoEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setVideoEnabled(final boolean enable) {    executor.execute(() -> {      renderVideo = enable;      if (localVideoTrack != null) {        localVideoTrack.setEnabled(renderVideo);      }      if (remoteVideoTrack != null) {        remoteVideoTrack.setEnabled(renderVideo);      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createOffer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void createOffer() {    executor.execute(() -> {      if (peerConnection != null && !isError) {        Log.d(TAG, \"PC Create OFFER\");        isInitiator = true;        peerConnection.createOffer(sdpObserver, sdpMediaConstraints);      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createAnswer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void createAnswer() {    executor.execute(() -> {      if (peerConnection != null && !isError) {        Log.d(TAG, \"PC create ANSWER\");        isInitiator = false;        peerConnection.createAnswer(sdpObserver, sdpMediaConstraints);      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addRemoteIceCandidate", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addRemoteIceCandidate(final IceCandidate candidate) {    executor.execute(() -> {      if (peerConnection != null && !isError) {        if (queuedRemoteCandidates != null) {          queuedRemoteCandidates.add(candidate);        } else {          peerConnection.addIceCandidate(candidate);        }      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeRemoteIceCandidates", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void removeRemoteIceCandidates(final IceCandidate[] candidates) {    executor.execute(() -> {      if (peerConnection == null || isError) {        return;      }      // Drain the queued remote candidates if there is any so that      // they are processed in the proper order.      drainCandidates();      peerConnection.removeIceCandidates(candidates);    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRemoteDescription", "params": ["SessionDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRemoteDescription(final SessionDescription sdp) {    executor.execute(() -> {      if (peerConnection == null || isError) {        return;      }      String sdpDescription = sdp.description;      if (preferIsac) {        sdpDescription = preferCodec(sdpDescription, AUDIO_CODEC_ISAC, true);      }      if (isVideoCallEnabled()) {        sdpDescription =            preferCodec(sdpDescription, getSdpVideoCodecName(peerConnectionParameters), false);      }      if (peerConnectionParameters.audioStartBitrate > 0) {        sdpDescription = setStartBitrate(            AUDIO_CODEC_OPUS, false, sdpDescription, peerConnectionParameters.audioStartBitrate);      }      Log.d(TAG, \"Set remote SDP.\");      SessionDescription sdpRemote = new SessionDescription(sdp.type, sdpDescription);      peerConnection.setRemoteDescription(sdpObserver, sdpRemote);    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopVideoSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void stopVideoSource() {    executor.execute(() -> {      if (videoCapturer != null && !videoCapturerStopped) {        Log.d(TAG, \"Stop video source.\");        try {          videoCapturer.stopCapture();        } catch (InterruptedException e) {        }        videoCapturerStopped = true;      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startVideoSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void startVideoSource() {    executor.execute(() -> {      if (videoCapturer != null && videoCapturerStopped) {        Log.d(TAG, \"Restart video source.\");        videoCapturer.startCapture(videoWidth, videoHeight, videoFps);        videoCapturerStopped = false;      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVideoMaxBitrate", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setVideoMaxBitrate(@Nullable final Integer maxBitrateKbps) {    executor.execute(() -> {      if (peerConnection == null || localVideoSender == null || isError) {        return;      }      Log.d(TAG, \"Requested max video bitrate: \" + maxBitrateKbps);      if (localVideoSender == null) {        Log.w(TAG, \"Sender is not ready.\");        return;      }      RtpParameters parameters = localVideoSender.getParameters();      if (parameters.encodings.size() == 0) {        Log.w(TAG, \"RtpParameters are not ready.\");        return;      }      for (RtpParameters.Encoding encoding : parameters.encodings) {        // Null value means no limit.        encoding.maxBitrateBps = maxBitrateKbps == null ? null : maxBitrateKbps * BPS_IN_KBPS;      }      if (!localVideoSender.setParameters(parameters)) {        Log.e(TAG, \"RtpSender.setParameters failed.\");      }      Log.d(TAG, \"Configured max video bitrate to: \" + maxBitrateKbps);    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reportError", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void reportError(final String errorMessage) {    Log.e(TAG, \"Peerconnection error: \" + errorMessage);    executor.execute(() -> {      if (!isError) {        events.onPeerConnectionError(errorMessage);        isError = true;      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createAudioTrack", "params": [], "throws": null, "modifiers": ["private"], "return_type": "AudioTrack", "snippet": "  private AudioTrack createAudioTrack() {    audioSource = factory.createAudioSource(audioConstraints);    localAudioTrack = factory.createAudioTrack(AUDIO_TRACK_ID, audioSource);    localAudioTrack.setEnabled(enableAudio);    return localAudioTrack;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createVideoTrack", "params": ["VideoCapturer"], "throws": null, "modifiers": ["private"], "return_type": "VideoTrack", "snippet": "  private VideoTrack createVideoTrack(VideoCapturer capturer) {    surfaceTextureHelper =        SurfaceTextureHelper.create(\"CaptureThread\", rootEglBase.getEglBaseContext());    videoSource = factory.createVideoSource(capturer.isScreencast());    capturer.initialize(surfaceTextureHelper, appContext, videoSource.getCapturerObserver());    capturer.startCapture(videoWidth, videoHeight, videoFps);    localVideoTrack = factory.createVideoTrack(VIDEO_TRACK_ID, videoSource);    localVideoTrack.setEnabled(renderVideo);    localVideoTrack.addSink(localRender);    return localVideoTrack;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findVideoSender", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void findVideoSender() {    for (RtpSender sender : peerConnection.getSenders()) {      if (sender.track() != null) {        String trackType = sender.track().kind();        if (trackType.equals(VIDEO_TRACK_TYPE)) {          Log.d(TAG, \"Found video sender.\");          localVideoSender = sender;        }      }    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRemoteVideoTrack", "params": [], "throws": null, "modifiers": ["private"], "return_type": "VideoTrack", "snippet": "  private @Nullable VideoTrack getRemoteVideoTrack() {    for (RtpTransceiver transceiver : peerConnection.getTransceivers()) {      MediaStreamTrack track = transceiver.getReceiver().track();      if (track instanceof VideoTrack) {        return (VideoTrack) track;      }    }    return null;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSdpVideoCodecName", "params": ["PeerConnectionParameters"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getSdpVideoCodecName(PeerConnectionParameters parameters) {    switch (parameters.videoCodec) {      case VIDEO_CODEC_VP8:        return VIDEO_CODEC_VP8;      case VIDEO_CODEC_VP9:        return VIDEO_CODEC_VP9;      case VIDEO_CODEC_H264_HIGH:      case VIDEO_CODEC_H264_BASELINE:        return VIDEO_CODEC_H264;      default:        return VIDEO_CODEC_VP8;    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFieldTrials", "params": ["PeerConnectionParameters"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getFieldTrials(PeerConnectionParameters peerConnectionParameters) {    String fieldTrials = \"\";    if (peerConnectionParameters.videoFlexfecEnabled) {      fieldTrials += VIDEO_FLEXFEC_FIELDTRIAL;      Log.d(TAG, \"Enable FlexFEC field trial.\");    }    fieldTrials += VIDEO_VP8_INTEL_HW_ENCODER_FIELDTRIAL;    if (peerConnectionParameters.disableWebRtcAGCAndHPF) {      fieldTrials += DISABLE_WEBRTC_AGC_FIELDTRIAL;      Log.d(TAG, \"Disable WebRTC AGC field trial.\");    }    return fieldTrials;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartBitrate", "params": ["String", "boolean", "String", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String setStartBitrate(      String codec, boolean isVideoCodec, String sdpDescription, int bitrateKbps) {    String[] lines = sdpDescription.split(\"\\r\\n\");    int rtpmapLineIndex = -1;    boolean sdpFormatUpdated = false;    String codecRtpMap = null;    // Search for codec rtpmap in format    // a=rtpmap:<payload type> <encoding name>/<clock rate> [/<encoding parameters>]    String regex = \"^a=rtpmap:(\\\\d+) \" + codec + \"(/\\\\d+)+[\\r]?$\";    Pattern codecPattern = Pattern.compile(regex);    for (int i = 0; i < lines.length; i++) {      Matcher codecMatcher = codecPattern.matcher(lines[i]);      if (codecMatcher.matches()) {        codecRtpMap = codecMatcher.group(1);        rtpmapLineIndex = i;        break;      }    }    if (codecRtpMap == null) {      Log.w(TAG, \"No rtpmap for \" + codec + \" codec\");      return sdpDescription;    }    Log.d(TAG, \"Found \" + codec + \" rtpmap \" + codecRtpMap + \" at \" + lines[rtpmapLineIndex]);    // Check if a=fmtp string already exist in remote SDP for this codec and    // update it with new bitrate parameter.    regex = \"^a=fmtp:\" + codecRtpMap + \" \\\\w+=\\\\d+.*[\\r]?$\";    codecPattern = Pattern.compile(regex);    for (int i = 0; i < lines.length; i++) {      Matcher codecMatcher = codecPattern.matcher(lines[i]);      if (codecMatcher.matches()) {        Log.d(TAG, \"Found \" + codec + \" \" + lines[i]);        if (isVideoCodec) {          lines[i] += \"; \" + VIDEO_CODEC_PARAM_START_BITRATE + \"=\" + bitrateKbps;        } else {          lines[i] += \"; \" + AUDIO_CODEC_PARAM_BITRATE + \"=\" + (bitrateKbps * 1000);        }        Log.d(TAG, \"Update remote SDP line: \" + lines[i]);        sdpFormatUpdated = true;        break;      }    }    StringBuilder newSdpDescription = new StringBuilder();    for (int i = 0; i < lines.length; i++) {      newSdpDescription.append(lines[i]).append(\"\\r\\n\");      // Append new a=fmtp line if no such line exist for a codec.      if (!sdpFormatUpdated && i == rtpmapLineIndex) {        String bitrateSet;        if (isVideoCodec) {          bitrateSet =              \"a=fmtp:\" + codecRtpMap + \" \" + VIDEO_CODEC_PARAM_START_BITRATE + \"=\" + bitrateKbps;        } else {          bitrateSet = \"a=fmtp:\" + codecRtpMap + \" \" + AUDIO_CODEC_PARAM_BITRATE + \"=\"              + (bitrateKbps * 1000);        }        Log.d(TAG, \"Add remote SDP line: \" + bitrateSet);        newSdpDescription.append(bitrateSet).append(\"\\r\\n\");      }    }    return newSdpDescription.toString();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findMediaDescriptionLine", "params": ["boolean", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "  private static int findMediaDescriptionLine(boolean isAudio, String[] sdpLines) {    final String mediaDescription = isAudio ? \"m=audio \" : \"m=video \";    for (int i = 0; i < sdpLines.length; ++i) {      if (sdpLines[i].startsWith(mediaDescription)) {        return i;      }    }    return -1;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "joinString", "params": ["Iterable<CharSequence>", "String", "boolean"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String joinString(      Iterable<? extends CharSequence> s, String delimiter, boolean delimiterAtEnd) {    Iterator<? extends CharSequence> iter = s.iterator();    if (!iter.hasNext()) {      return \"\";    }    StringBuilder buffer = new StringBuilder(iter.next());    while (iter.hasNext()) {      buffer.append(delimiter).append(iter.next());    }    if (delimiterAtEnd) {      buffer.append(delimiter);    }    return buffer.toString();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "movePayloadTypesToFront", "params": ["List<String>", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static @Nullable String movePayloadTypesToFront(      List<String> preferredPayloadTypes, String mLine) {    // The format of the media description line should be: m=<media> <port> <proto> <fmt> ...    final List<String> origLineParts = Arrays.asList(mLine.split(\" \"));    if (origLineParts.size() <= 3) {      Log.e(TAG, \"Wrong SDP media description format: \" + mLine);      return null;    }    final List<String> header = origLineParts.subList(0, 3);    final List<String> unpreferredPayloadTypes =        new ArrayList<>(origLineParts.subList(3, origLineParts.size()));    unpreferredPayloadTypes.removeAll(preferredPayloadTypes);    // Reconstruct the line with |preferredPayloadTypes| moved to the beginning of the payload    // types.    final List<String> newLineParts = new ArrayList<>();    newLineParts.addAll(header);    newLineParts.addAll(preferredPayloadTypes);    newLineParts.addAll(unpreferredPayloadTypes);    return joinString(newLineParts, \" \", false /* delimiterAtEnd */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preferCodec", "params": ["String", "String", "boolean"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String preferCodec(String sdpDescription, String codec, boolean isAudio) {    final String[] lines = sdpDescription.split(\"\\r\\n\");    final int mLineIndex = findMediaDescriptionLine(isAudio, lines);    if (mLineIndex == -1) {      Log.w(TAG, \"No mediaDescription line, so can't prefer \" + codec);      return sdpDescription;    }    // A list with all the payload types with name |codec|. The payload types are integers in the    // range 96-127, but they are stored as strings here.    final List<String> codecPayloadTypes = new ArrayList<>();    // a=rtpmap:<payload type> <encoding name>/<clock rate> [/<encoding parameters>]    final Pattern codecPattern = Pattern.compile(\"^a=rtpmap:(\\\\d+) \" + codec + \"(/\\\\d+)+[\\r]?$\");    for (String line : lines) {      Matcher codecMatcher = codecPattern.matcher(line);      if (codecMatcher.matches()) {        codecPayloadTypes.add(codecMatcher.group(1));      }    }    if (codecPayloadTypes.isEmpty()) {      Log.w(TAG, \"No payload types with name \" + codec);      return sdpDescription;    }    final String newMLine = movePayloadTypesToFront(codecPayloadTypes, lines[mLineIndex]);    if (newMLine == null) {      return sdpDescription;    }    Log.d(TAG, \"Change media description from: \" + lines[mLineIndex] + \" to \" + newMLine);    lines[mLineIndex] = newMLine;    return joinString(Arrays.asList(lines), \"\\r\\n\", true /* delimiterAtEnd */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "drainCandidates", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void drainCandidates() {    if (queuedRemoteCandidates != null) {      Log.d(TAG, \"Add \" + queuedRemoteCandidates.size() + \" remote candidates\");      for (IceCandidate candidate : queuedRemoteCandidates) {        peerConnection.addIceCandidate(candidate);      }      queuedRemoteCandidates = null;    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "switchCameraInternal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void switchCameraInternal() {    if (videoCapturer instanceof CameraVideoCapturer) {      if (!isVideoCallEnabled() || isError) {        Log.e(TAG,            \"Failed to switch camera. Video: \" + isVideoCallEnabled() + \". Error : \" + isError);        return; // No video is sent or only one camera is available or error happened.      }      Log.d(TAG, \"Switch camera\");      CameraVideoCapturer cameraVideoCapturer = (CameraVideoCapturer) videoCapturer;      cameraVideoCapturer.switchCamera(null);    } else {      Log.d(TAG, \"Will not switch camera, video caputurer is not a camera\");    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "switchCamera", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void switchCamera() {    executor.execute(this ::switchCameraInternal);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeCaptureFormat", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void changeCaptureFormat(final int width, final int height, final int framerate) {    executor.execute(() -> changeCaptureFormatInternal(width, height, framerate));  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeCaptureFormatInternal", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void changeCaptureFormatInternal(int width, int height, int framerate) {    if (!isVideoCallEnabled() || isError || videoCapturer == null) {      Log.e(TAG,          \"Failed to change capture format. Video: \" + isVideoCallEnabled()              + \". Error : \" + isError);      return;    }    Log.d(TAG, \"changeCaptureFormat: \" + width + \"x\" + height + \"@\" + framerate);    videoSource.adaptOutputFormat(width, height, framerate);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PeerConnectionClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onIceCandidate", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onIceCandidate(final IceCandidate candidate) {      executor.execute(() -> events.onIceCandidate(candidate));    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onIceCandidatesRemoved", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onIceCandidatesRemoved(final IceCandidate[] candidates) {      executor.execute(() -> events.onIceCandidatesRemoved(candidates));    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onSignalingChange", "params": ["PeerConnection"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSignalingChange(PeerConnection.SignalingState newState) {      Log.d(TAG, \"SignalingState: \" + newState);    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onIceConnectionChange", "params": ["PeerConnection"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onIceConnectionChange(final PeerConnection.IceConnectionState newState) {      executor.execute(() -> {        Log.d(TAG, \"IceConnectionState: \" + newState);        if (newState == IceConnectionState.CONNECTED) {          events.onIceConnected();        } else if (newState == IceConnectionState.DISCONNECTED) {          events.onIceDisconnected();        } else if (newState == IceConnectionState.FAILED) {          reportError(\"ICE connection failed.\");        }      });    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onConnectionChange", "params": ["PeerConnection"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConnectionChange(final PeerConnection.PeerConnectionState newState) {      executor.execute(() -> {        Log.d(TAG, \"PeerConnectionState: \" + newState);        if (newState == PeerConnectionState.CONNECTED) {          events.onConnected();        } else if (newState == PeerConnectionState.DISCONNECTED) {          events.onDisconnected();        } else if (newState == PeerConnectionState.FAILED) {          reportError(\"DTLS connection failed.\");        }      });    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onIceGatheringChange", "params": ["PeerConnection"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onIceGatheringChange(PeerConnection.IceGatheringState newState) {      Log.d(TAG, \"IceGatheringState: \" + newState);    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onIceConnectionReceivingChange", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onIceConnectionReceivingChange(boolean receiving) {      Log.d(TAG, \"IceConnectionReceiving changed to \" + receiving);    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onSelectedCandidatePairChanged", "params": ["CandidatePairChangeEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSelectedCandidatePairChanged(CandidatePairChangeEvent event) {      Log.d(TAG, \"Selected candidate pair changed because: \" + event);    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onAddStream", "params": ["MediaStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAddStream(final MediaStream stream) {}", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onRemoveStream", "params": ["MediaStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRemoveStream(final MediaStream stream) {}", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onDataChannel", "params": ["DataChannel"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDataChannel(final DataChannel dc) {      Log.d(TAG, \"New Data channel \" + dc.label());      if (!dataChannelEnabled)        return;      dc.registerObserver(new DataChannel.Observer() {        @Override        public void onBufferedAmountChange(long previousAmount) {          Log.d(TAG, \"Data channel buffered amount changed: \" + dc.label() + \": \" + dc.state());        }        @Override        public void onStateChange() {          Log.d(TAG, \"Data channel state changed: \" + dc.label() + \": \" + dc.state());        }        @Override        public void onMessage(final DataChannel.Buffer buffer) {          if (buffer.binary) {            Log.d(TAG, \"Received binary msg over \" + dc);            return;          }          ByteBuffer data = buffer.data;          final byte[] bytes = new byte[data.capacity()];          data.get(bytes);          String strData = new String(bytes, Charset.forName(\"UTF-8\"));          Log.d(TAG, \"Got msg: \" + strData + \" over \" + dc);        }      });    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onRenegotiationNeeded", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenegotiationNeeded() {      // No need to do anything; AppRTC follows a pre-agreed-upon      // signaling/negotiation protocol.    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onAddTrack", "params": ["RtpReceiver", "MediaStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAddTrack(final RtpReceiver receiver, final MediaStream[] mediaStreams) {}", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "PCObserver", "extends": null, "implements": ["PeerConnection"], "modifiers": ["private"]}}, {"method_name": "onCreateSuccess", "params": ["SessionDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreateSuccess(final SessionDescription origSdp) {      if (localSdp != null) {        reportError(\"Multiple SDP create.\");        return;      }      String sdpDescription = origSdp.description;      if (preferIsac) {        sdpDescription = preferCodec(sdpDescription, AUDIO_CODEC_ISAC, true);      }      if (isVideoCallEnabled()) {        sdpDescription =            preferCodec(sdpDescription, getSdpVideoCodecName(peerConnectionParameters), false);      }      final SessionDescription sdp = new SessionDescription(origSdp.type, sdpDescription);      localSdp = sdp;      executor.execute(() -> {        if (peerConnection != null && !isError) {          Log.d(TAG, \"Set local SDP from \" + sdp.type);          peerConnection.setLocalDescription(sdpObserver, sdp);        }      });    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "SDPObserver", "extends": null, "implements": ["SdpObserver"], "modifiers": ["private"]}}, {"method_name": "onSetSuccess", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSetSuccess() {      executor.execute(() -> {        if (peerConnection == null || isError) {          return;        }        if (isInitiator) {          // For offering peer connection we first create offer and set          // local SDP, then after receiving answer set remote SDP.          if (peerConnection.getRemoteDescription() == null) {            // We've just set our local SDP so time to send it.            Log.d(TAG, \"Local SDP set succesfully\");            events.onLocalDescription(localSdp);          } else {            // We've just set remote description, so drain remote            // and send local ICE candidates.            Log.d(TAG, \"Remote SDP set succesfully\");            drainCandidates();          }        } else {          // For answering peer connection we set remote SDP and then          // create answer and set local SDP.          if (peerConnection.getLocalDescription() != null) {            // We've just set our local SDP so time to send it, drain            // remote and send local ICE candidates.            Log.d(TAG, \"Local SDP set succesfully\");            events.onLocalDescription(localSdp);            drainCandidates();          } else {            // We've just set remote SDP - do nothing for now -            // answer will be created soon.            Log.d(TAG, \"Remote SDP set succesfully\");          }        }      });    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "SDPObserver", "extends": null, "implements": ["SdpObserver"], "modifiers": ["private"]}}, {"method_name": "onCreateFailure", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreateFailure(final String error) {      reportError(\"createSDP error: \" + error);    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "SDPObserver", "extends": null, "implements": ["SdpObserver"], "modifiers": ["private"]}}, {"method_name": "onSetFailure", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSetFailure(final String error) {      reportError(\"setSDP error: \" + error);    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/PeerConnectionClient.java", "stars": "2", "class": {"name": "SDPObserver", "extends": null, "implements": ["SdpObserver"], "modifiers": ["private"]}}, {"method_name": "solution", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int solution(int[] a) {\t\t// write your code in Java SE 8                int ans = 0;                boolean [] positives = new boolean[1000001];        boolean [] negatives = new boolean[1000001];                for (int i = 0; i < a.length; i++) {            if (a[i] < 0) {                negatives[-a[i]] = true;            } else {                positives[a[i]] = true;            }        }                for (int i = 0; i <= 1000000; i++) {            if (positives[i] == true) ans++;            if (negatives[i] == true) ans++;        }                return ans;            }", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/DistinctSolution2.java", "stars": "2", "class": {"name": "DistinctSolution2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)    {        for(int j=0;j<selectedsplitdata.i;j++){            l.add(new money_split_data(selectedsplitdata.names[j],\"0\"));        }        View d= inflater.inflate(R.layout.frag_nextsplit, container, false);        RecyclerView spli = d.findViewById(R.id.recyclerView5);        spli.setAdapter(new splitter_adapter(getActivity().getApplicationContext(),l));        LinearLayoutManager llm=new LinearLayoutManager(getActivity().getApplicationContext());        spli.setLayoutManager(llm);        Button b=d.findViewById(R.id.button5);        final EditText remark=d.findViewById(R.id.editText5);        b.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SharedPreferences sf=getActivity().getSharedPreferences(\"Login data\",MODE_PRIVATE);                String s=sf.getString(\"user\",\"unable to fetch\");                DatabaseReference dr=FirebaseDatabase.getInstance().getReference(\"Users\");                for(money_split_data d:l) {                    dr.child(s).child(\"Transactions\").child(\"take money\").child(d.getName()).child(remark.getText().toString()).setValue(d.getMoney());                    dr.child(d.getName()).child(\"Transactions\").child(\"give money\").child(s).child(remark.getText().toString()).setValue(d.getMoney());                }                Toast.makeText(getActivity().getApplicationContext(),\"Split Done\",Toast.LENGTH_SHORT).show();                getActivity().getSupportFragmentManager().popBackStack();                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new home_fragment()).commit();            }        });        return d;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/splitnext_fragment.java", "stars": "2", "class": {"name": "splitnext_fragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "reportJobCommunication", "params": ["Long", "Communication"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void reportJobCommunication(Long jobId, Communication communication);    public abstract void reportTGCommunication(Integer taskGroupId, Communication communication);}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/report/AbstractReporter.java", "stars": "23", "class": {"name": "AbstractReporter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "reportTGCommunication", "params": ["Integer", "Communication"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void reportTGCommunication(Integer taskGroupId, Communication communication);}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/report/AbstractReporter.java", "stars": "23", "class": {"name": "AbstractReporter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        show04();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo03File.java", "stars": "2", "class": {"name": "Demo03File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show04", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show04() {        File f1 = new File(\"C:\\\\develop\\\\a\\\\1.jpg\");        long l1 = f1.length();        System.out.println(l1);//780831\u5b57\u8282        File f2 = new File(\"C:\\\\develop\\\\a\\\\2.jpg\");        System.out.println(f2.length());//0        File f3 = new File(\"C:\\\\develop\\\\a\");        System.out.println(f3.length());//0 \u6587\u4ef6\u5939\u6ca1\u6709\u5927\u5c0f\u6982\u5ff5\u7684    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo03File.java", "stars": "2", "class": {"name": "Demo03File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show03", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show03() {        File f1 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\a.txt\");        String name1 = f1.getName();        System.out.println(name1);//a.txt        File f2 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\");        String name2 = f2.getName();        System.out.println(name2);//shungyuan    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo03File.java", "stars": "2", "class": {"name": "Demo03File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show02() {        File f1 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\a.txt\");        File f2 = new File(\"a.txt\");        String path1 = f1.getPath();        System.out.println(path1);//C:\\Users\\itcast\\IdeaProjects\\shungyuan\\a.txt        String path2 = f2.getPath();        System.out.println(path2);//a.txt        System.out.println(f1);//C:\\Users\\itcast\\IdeaProjects\\shungyuan\\a.txt        System.out.println(f1.toString());//C:\\Users\\itcast\\IdeaProjects\\shungyuan\\a.txt    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo03File.java", "stars": "2", "class": {"name": "Demo03File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show01() {        File f1 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\a.txt\");        String absolutePath1 = f1.getAbsolutePath();        System.out.println(absolutePath1);//C:\\Users\\itcast\\IdeaProjects\\shungyuan\\a.txt        File f2 = new File(\"a.txt\");        String absolutePath2 = f2.getAbsolutePath();        System.out.println(absolutePath2);//C:\\Users\\itcast\\IdeaProjects\\shungyuan\\a.txt    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo03File.java", "stars": "2", "class": {"name": "Demo03File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void run(String... args) throws Exception {        final User user = User.builder().firstName(\"Rohit\").lastName(\"Phular\").email(\"r.p@test.com\").build();        userRepository.save(user);    }", "url": "https://raw.githubusercontent.com/rohitphular/project-phonebook/master/pb-user/src/main/java/org/pb/config/SampleDataPopulatorRunner.java", "stars": "3", "class": {"name": "SampleDataPopulatorRunner", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/2b2t-Utilities/emoji-api/master/src/main/java/me/tigermouthbear/emoji/api/Emoji.java", "stars": "3", "class": {"name": "Emoji", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCharSet", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCharSet(URLConnection connection) throws IOException {        String contentType = connection.getContentType();        if (contentType != null) {            HeaderValueParser parser = new BasicHeaderValueParser();            HeaderElement[] values = BasicHeaderValueParser.parseElements(contentType, parser);            if (values.length > 0) {                NameValuePair param = values[0].getParameterByName(\"charset\");                if (param != null) {                    return param.getValue();                }            }        }        if (connection instanceof HttpURLConnection) {            return HTTP.DEFAULT_CONTENT_CHARSET;        } else {            throw new IOException(\"Unabled to determine character encoding\");        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/ContentHandlerUtils.java", "stars": "74", "class": {"name": "ContentHandlerUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getUncompressedInputStream", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "InputStream", "snippet": "    public static InputStream getUncompressedInputStream(URLConnection connection)            throws IOException {        InputStream source = connection.getInputStream();        String encoding = connection.getContentEncoding();        if (\"gzip\".equalsIgnoreCase(encoding)) {            return new GZIPInputStream(source);        } else if (\"deflate\".equalsIgnoreCase(encoding)) {            boolean noHeader = true;            Inflater inflater = new Inflater(noHeader);            return new InflaterInputStream(source, inflater);        } else {            return source;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/ContentHandlerUtils.java", "stars": "74", "class": {"name": "ContentHandlerUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "toString", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toString(URLConnection connection) throws IOException {        if (connection == null) {            throw new IllegalArgumentException(\"URLConnection is null\");        }        int contentLength = connection.getContentLength();        if (contentLength < 0) {            contentLength = DEFAULT_BUFFER_SIZE;        }        String charset = getCharSet(connection);        InputStream input = getUncompressedInputStream(connection);        try {            InputStreamReader reader = new InputStreamReader(input, charset);            StringBuilder builder = new StringBuilder(contentLength);            char[] buffer = new char[1024];            for (int n = reader.read(buffer); n != -1; n = reader.read(buffer)) {                builder.append(buffer, 0, n);            }            return builder.toString();        } finally {            input.close();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/ContentHandlerUtils.java", "stars": "74", "class": {"name": "ContentHandlerUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "convertedEnvironmentHasSameActiveProfiles", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid convertedEnvironmentHasSameActiveProfiles() {\t\tAbstractEnvironment originalEnvironment = new MockEnvironment();\t\toriginalEnvironment.setActiveProfiles(\"activeProfile1\", \"activeProfile2\");\t\tStandardEnvironment convertedEnvironment = this.environmentConverter\t\t\t\t.convertEnvironmentIfNecessary(originalEnvironment, StandardEnvironment.class);\t\tassertThat(convertedEnvironment.getActiveProfiles()).containsExactly(\"activeProfile1\", \"activeProfile2\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/EnvironmentConverterTests.java", "stars": "47572", "class": {"name": "EnvironmentConverterTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "convertedEnvironmentHasSameConversionService", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid convertedEnvironmentHasSameConversionService() {\t\tAbstractEnvironment originalEnvironment = new MockEnvironment();\t\tConfigurableConversionService conversionService = mock(ConfigurableConversionService.class);\t\toriginalEnvironment.setConversionService(conversionService);\t\tStandardEnvironment convertedEnvironment = this.environmentConverter\t\t\t\t.convertEnvironmentIfNecessary(originalEnvironment, StandardEnvironment.class);\t\tassertThat(convertedEnvironment.getConversionService()).isEqualTo(conversionService);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/EnvironmentConverterTests.java", "stars": "47572", "class": {"name": "EnvironmentConverterTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "envClassSameShouldReturnEnvironmentUnconverted", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid envClassSameShouldReturnEnvironmentUnconverted() {\t\tStandardEnvironment standardEnvironment = new StandardEnvironment();\t\tStandardEnvironment convertedEnvironment = this.environmentConverter\t\t\t\t.convertEnvironmentIfNecessary(standardEnvironment, StandardEnvironment.class);\t\tassertThat(convertedEnvironment).isSameAs(standardEnvironment);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/EnvironmentConverterTests.java", "stars": "47572", "class": {"name": "EnvironmentConverterTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "standardServletEnvironmentIsConverted", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid standardServletEnvironmentIsConverted() {\t\tStandardServletEnvironment standardServletEnvironment = new StandardServletEnvironment();\t\tStandardEnvironment convertedEnvironment = this.environmentConverter\t\t\t\t.convertEnvironmentIfNecessary(standardServletEnvironment, StandardEnvironment.class);\t\tassertThat(convertedEnvironment).isNotSameAs(standardServletEnvironment);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/EnvironmentConverterTests.java", "stars": "47572", "class": {"name": "EnvironmentConverterTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "servletPropertySourcesAreNotCopiedOverIfNotWebEnvironment", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid servletPropertySourcesAreNotCopiedOverIfNotWebEnvironment() {\t\tStandardServletEnvironment standardServletEnvironment = new StandardServletEnvironment();\t\tStandardEnvironment convertedEnvironment = this.environmentConverter\t\t\t\t.convertEnvironmentIfNecessary(standardServletEnvironment, StandardEnvironment.class);\t\tassertThat(convertedEnvironment).isNotSameAs(standardServletEnvironment);\t\tSet<String> names = new HashSet<>();\t\tfor (PropertySource<?> propertySource : convertedEnvironment.getPropertySources()) {\t\t\tnames.add(propertySource.getName());\t\t}\t\tassertThat(names).doesNotContain(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,\t\t\t\tStandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,\t\t\t\tStandardServletEnvironment.JNDI_PROPERTY_SOURCE_NAME);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/EnvironmentConverterTests.java", "stars": "47572", "class": {"name": "EnvironmentConverterTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "envClassSameShouldReturnEnvironmentUnconvertedEvenForWeb", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid envClassSameShouldReturnEnvironmentUnconvertedEvenForWeb() {\t\tStandardServletEnvironment standardServletEnvironment = new StandardServletEnvironment();\t\tStandardEnvironment convertedEnvironment = this.environmentConverter\t\t\t\t.convertEnvironmentIfNecessary(standardServletEnvironment, StandardServletEnvironment.class);\t\tassertThat(convertedEnvironment).isSameAs(standardServletEnvironment);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/EnvironmentConverterTests.java", "stars": "47572", "class": {"name": "EnvironmentConverterTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "servletPropertySourcesArePresentWhenTypeToConvertIsWeb", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid servletPropertySourcesArePresentWhenTypeToConvertIsWeb() {\t\tStandardEnvironment standardEnvironment = new StandardEnvironment();\t\tStandardEnvironment convertedEnvironment = this.environmentConverter\t\t\t\t.convertEnvironmentIfNecessary(standardEnvironment, StandardServletEnvironment.class);\t\tassertThat(convertedEnvironment).isNotSameAs(standardEnvironment);\t\tSet<String> names = new HashSet<>();\t\tfor (PropertySource<?> propertySource : convertedEnvironment.getPropertySources()) {\t\t\tnames.add(propertySource.getName());\t\t}\t\tassertThat(names).contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,\t\t\t\tStandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/EnvironmentConverterTests.java", "stars": "47572", "class": {"name": "EnvironmentConverterTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setVisibility", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVisibility(int visibility) {        super.setVisibility(visibility);        if (mInflateView == null && visibility != GONE) {            mInflateView = LayoutInflater.from(getContext()).inflate(mLayoutResource, this, false);            FrameLayout.LayoutParams layoutParams = (LayoutParams) mInflateView.getLayoutParams();            layoutParams.width = getLayoutParams().width;            layoutParams.height = getLayoutParams().height;            if (layoutParams.gravity == FrameLayout.LayoutParams.UNSPECIFIED_GRAVITY) {                layoutParams.gravity = Gravity.CENTER;            }            mInflateView.setLayoutParams(layoutParams);            addView(mInflateView);            if (mListener != null) {                mListener.onInflate(this, mInflateView);            }        }        if (mListener != null) {            mListener.onVisibility(this, visibility);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/CustomViewStub.java", "stars": "1", "class": {"name": "CustomViewStub", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setCustomVisibility", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCustomVisibility(int visibility) {        super.setVisibility(visibility);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/CustomViewStub.java", "stars": "1", "class": {"name": "CustomViewStub", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getInflateView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getInflateView() {        return mInflateView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/CustomViewStub.java", "stars": "1", "class": {"name": "CustomViewStub", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setOnViewStubListener", "params": ["OnViewStubListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnViewStubListener(OnViewStubListener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/CustomViewStub.java", "stars": "1", "class": {"name": "CustomViewStub", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "authenticate", "params": ["Authentication"], "throws": ["AuthenticationException"], "modifiers": ["public"], "return_type": "Authentication", "snippet": "    public Authentication authenticate(Authentication authentication) throws AuthenticationException {        if (authentication.isAuthenticated()) {            return authentication;        }        // \u4ece TokenAuthentication \u4e2d\u83b7\u53d6 token        String token = authentication.getCredentials().toString();        if (StringUtils.isBlank(token)) {            return authentication;        }        if (!tokenUtil.hasToken(token)) {            throw new BusinessException(ApiResponseEnum.NOT_VALID_CREDENTIAL);        }        tokenUtil.refresh(token);        String username = tokenUtil.getUsername(token);        User user = (User)rentHouseUserDetailService.loadUserByUsername(username);        // \u8fd4\u56de\u65b0\u7684\u8ba4\u8bc1\u4fe1\u606f\uff0c\u5e26\u4e0a token \u548c\u53cd\u67e5\u51fa\u7684\u7528\u6237\u4fe1\u606f        Authentication auth = new PreAuthenticatedAuthenticationToken(user, token, user.getAuthorities());        auth.setAuthenticated(true);        return auth;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthenticationProvider.java", "stars": "3", "class": {"name": "TokenAuthenticationProvider", "extends": null, "implements": ["AuthenticationProvider"], "modifiers": ["public"]}}, {"method_name": "supports", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean supports(Class<?> aClass) {        return (TokenAuthentication.class.isAssignableFrom(aClass));    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthenticationProvider.java", "stars": "3", "class": {"name": "TokenAuthenticationProvider", "extends": null, "implements": ["AuthenticationProvider"], "modifiers": ["public"]}}, {"method_name": "setDelay", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDelay(int ms) {        delay = ms / 10;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDispose", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDispose(int code) {        if (code >= 0) {            dispose = code;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRepeat", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRepeat(int iter) {        if (iter >= 0) {            repeat = iter;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTransparent", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTransparent(int c) {        transparent = c;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addFrame", "params": ["Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addFrame(Bitmap im) {        if ((im == null) || !started) {            return false;        }        boolean ok = true;        try {            if (!sizeSet) {                // use first frame's size                setSize(im.getWidth(), im.getHeight());            }            image = im;            getImagePixels(); // convert to correct format if necessary            analyzePixels(); // build color table & map pixels            if (firstFrame) {                writeLSD(); // logical screen descriptior                writePalette(); // global color table                if (repeat >= 0) {                    // use NS app extension to indicate reps                    writeNetscapeExt();                }            }            writeGraphicCtrlExt(); // write graphic control extension            writeImageDesc(); // image descriptor            if (!firstFrame) {                writePalette(); // local color table            }            writePixels(); // encode and write pixel data            firstFrame = false;        } catch (IOException e) {            ok = false;        }        return ok;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "finish", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean finish() {        if (!started)            return false;        boolean ok = true;        started = false;        try {            out.write(0x3b); // gif trailer            out.flush();            if (closeStream) {                out.close();            }        } catch (IOException e) {            ok = false;        }        // reset for subsequent use        transIndex = 0;        out = null;        image = null;        pixels = null;        indexedPixels = null;        colorTab = null;        closeStream = false;        firstFrame = true;        return ok;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFrameRate", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFrameRate(float fps) {        if (fps != 0f) {            delay = (int) (100 / fps);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setQuality", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setQuality(int quality) {        if (quality < 1)            quality = 1;        sample = quality;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSize", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSize(int w, int h) {        width = w;        height = h;        if (width < 1)            width = 320;        if (height < 1)            height = 240;        sizeSet = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPosition", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPosition(int x, int y) {        this.x = x;        this.y = y;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["OutputStream"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean start(OutputStream os) {        if (os == null)            return false;        boolean ok = true;        closeStream = false;        out = os;        try {            writeString(\"GIF89a\"); // header        } catch (IOException e) {            ok = false;        }        return started = ok;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "analyzePixels", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void analyzePixels() {        int len = pixels.length;        int nPix = len / 3;        indexedPixels = new byte[nPix];        NeuQuant nq = new NeuQuant(pixels, len, sample);        // initialize quantizer        colorTab = nq.process(); // create reduced palette        // convert map from BGR to RGB        for (int i = 0; i < colorTab.length; i += 3) {            byte temp = colorTab[i];            colorTab[i] = colorTab[i + 2];            colorTab[i + 2] = temp;            usedEntry[i / 3] = false;        }        // map image pixels to new palette        int k = 0;        for (int i = 0; i < nPix; i++) {            int index = nq.map(pixels[k++] & 0xff, pixels[k++] & 0xff, pixels[k++] & 0xff);            usedEntry[index] = true;            indexedPixels[i] = (byte) index;        }        pixels = null;        colorDepth = 8;        palSize = 7;        // get closest match to transparent color if specified        if (transparent != -1) {            transIndex = findClosest(transparent);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findClosest", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int findClosest(int c) {        if (colorTab == null)            return -1;        int r = (c >> 16) & 0xff;        int g = (c >> 8) & 0xff;        int b = (c >> 0) & 0xff;        int minpos = 0;        int dmin = 256 * 256 * 256;        int len = colorTab.length;        for (int i = 0; i < len; ) {            int dr = r - (colorTab[i++] & 0xff);            int dg = g - (colorTab[i++] & 0xff);            int db = b - (colorTab[i] & 0xff);            int d = dr * dr + dg * dg + db * db;            int index = i / 3;            if (usedEntry[index] && (d < dmin)) {                dmin = d;                minpos = index;            }            i++;        }        return minpos;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImagePixels", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void getImagePixels() {        int w = image.getWidth();        int h = image.getHeight();        if ((w != width) || (h != height)) {            // create new image with right size/format            Bitmap temp = Bitmap.createBitmap(width, height, Config.RGB_565);            Canvas g = new Canvas(temp);            g.drawBitmap(image, 0, 0, new Paint());            image = temp;        }        int[] data = getImageData(image);        pixels = new byte[data.length * 3];        for (int i = 0; i < data.length; i++) {            int td = data[i];            int tind = i * 3;            pixels[tind++] = (byte) ((td >> 0) & 0xFF);            pixels[tind++] = (byte) ((td >> 8) & 0xFF);            pixels[tind] = (byte) ((td >> 16) & 0xFF);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImageData", "params": ["Bitmap"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int[] getImageData(Bitmap img) {        int w = img.getWidth();        int h = img.getHeight();        int[] data = new int[w * h];        img.getPixels(data, 0, w, 0, 0, w, h);        return data;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeGraphicCtrlExt", "params": [], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writeGraphicCtrlExt() throws IOException {        out.write(0x21); // extension introducer        out.write(0xf9); // GCE label        out.write(4); // data block size        int transp, disp;        if (transparent == -1) {            transp = 0;            disp = 0; // dispose = no action        } else {            transp = 1;            disp = 2; // force clear if using transparent color        }        if (dispose >= 0) {            disp = dispose & 7; // user override        }        disp <<= 2;        // packed fields        out.write(0 | // 1:3 reserved                disp | // 4:6 disposal                0 | // 7 user input - 0 = none                transp); // 8 transparency flag        writeShort(delay); // delay x 1/100 sec        out.write(transIndex); // transparent color index        out.write(0); // block terminator    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeImageDesc", "params": [], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writeImageDesc() throws IOException {        out.write(0x2c); // image separator        writeShort(x); // image position x,y = 0,0        writeShort(y);        writeShort(width); // image size        writeShort(height);        // packed fields        if (firstFrame) {            // no LCT - GCT is used for first (or only) frame            out.write(0);        } else {            // specify normal LCT            out.write(0x80 | // 1 local color table 1=yes                    0 | // 2 interlace - 0=no                    0 | // 3 sorted - 0=no                    0 | // 4-5 reserved                    palSize); // 6-8 size of color table        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeLSD", "params": [], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writeLSD() throws IOException {        // logical screen size        writeShort(width);        writeShort(height);        // packed fields        out.write((0x80 | // 1 : global color table flag = 1 (gct used)                0x70 | // 2-4 : color resolution = 7                0x00 | // 5 : gct sort flag = 0                palSize)); // 6-8 : gct size        out.write(0); // background color index        out.write(0); // pixel aspect ratio - assume 1:1    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeNetscapeExt", "params": [], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writeNetscapeExt() throws IOException {        out.write(0x21); // extension introducer        out.write(0xff); // app extension label        out.write(11); // block size        writeString(\"NETSCAPE\" + \"2.0\"); // app id + auth code        out.write(3); // sub-block size        out.write(1); // loop sub-block id        writeShort(repeat); // loop count (extra iterations, 0=repeat forever)        out.write(0); // block terminator    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writePalette", "params": [], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writePalette() throws IOException {        out.write(colorTab, 0, colorTab.length);        int n = (3 * 256) - colorTab.length;        for (int i = 0; i < n; i++) {            out.write(0);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writePixels", "params": [], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writePixels() throws IOException {        LZWEncoder encoder = new LZWEncoder(width, height, indexedPixels, colorDepth);        encoder.encode(out);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeShort", "params": ["int"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writeShort(int value) throws IOException {        out.write(value & 0xff);        out.write((value >> 8) & 0xff);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeString", "params": ["String"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writeString(String s) throws IOException {        for (int i = 0; i < s.length(); i++) {            out.write((byte) s.charAt(i));        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "AnimatedGifEncoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "colorMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] colorMap() {        byte[] map = new byte[3 * netsize];        int[] index = new int[netsize];        for (int i = 0; i < netsize; i++)            index[network[i][3]] = i;        int k = 0;        for (int i = 0; i < netsize; i++) {            int j = index[i];            map[k++] = (byte) (network[j][0]);            map[k++] = (byte) (network[j][1]);            map[k++] = (byte) (network[j][2]);        }        return map;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "NeuQuant", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "inxbuild", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void inxbuild() {        int i, j, smallpos, smallval;        int[] p;        int[] q;        int previouscol, startpos;        previouscol = 0;        startpos = 0;        for (i = 0; i < netsize; i++) {            p = network[i];            smallpos = i;            smallval = p[1]; /* index on g */\t      /* find smallest in i..netsize-1 */            for (j = i + 1; j < netsize; j++) {                q = network[j];                if (q[1] < smallval) { /* index on g */                    smallpos = j;                    smallval = q[1]; /* index on g */                }            }            q = network[smallpos];\t      /* swap p (i) and q (smallpos) entries */            if (i != smallpos) {                j = q[0];                q[0] = p[0];                p[0] = j;                j = q[1];                q[1] = p[1];                p[1] = j;                j = q[2];                q[2] = p[2];                p[2] = j;                j = q[3];                q[3] = p[3];                p[3] = j;            }\t      /* smallval entry is now in position i */            if (smallval != previouscol) {                netindex[previouscol] = (startpos + i) >> 1;                for (j = previouscol + 1; j < smallval; j++)                    netindex[j] = i;                previouscol = smallval;                startpos = i;            }        }        netindex[previouscol] = (startpos + maxnetpos) >> 1;        for (j = previouscol + 1; j < 256; j++)            netindex[j] = maxnetpos; /* really 256 */    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "NeuQuant", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "learn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void learn() {        int i, j, b, g, r;        int radius, rad, alpha, step, delta, samplepixels;        byte[] p;        int pix, lim;        if (lengthcount < minpicturebytes)            samplefac = 1;        alphadec = 30 + ((samplefac - 1) / 3);        p = thepicture;        pix = 0;        lim = lengthcount;        samplepixels = lengthcount / (3 * samplefac);        delta = samplepixels / ncycles;        alpha = initalpha;        radius = initradius;        rad = radius >> radiusbiasshift;        if (rad <= 1)            rad = 0;        for (i = 0; i < rad; i++)            radpower[i] = alpha * (((rad * rad - i * i) * radbias) / (rad * rad));        // fprintf(stderr,\"beginning 1D learning: initial radius=%d\\n\", rad);        if (lengthcount < minpicturebytes)            step = 3;        else if ((lengthcount % prime1) != 0)            step = 3 * prime1;        else {            if ((lengthcount % prime2) != 0)                step = 3 * prime2;            else {                if ((lengthcount % prime3) != 0)                    step = 3 * prime3;                else                    step = 3 * prime4;            }        }        i = 0;        while (i < samplepixels) {            b = (p[pix + 0] & 0xff) << netbiasshift;            g = (p[pix + 1] & 0xff) << netbiasshift;            r = (p[pix + 2] & 0xff) << netbiasshift;            j = contest(b, g, r);            altersingle(alpha, j, b, g, r);            if (rad != 0)                alterneigh(rad, j, b, g, r); /* alter neighbours */            pix += step;            if (pix >= lim)                pix -= lengthcount;            i++;            if (delta == 0)                delta = 1;            if (i % delta == 0) {                alpha -= alpha / alphadec;                radius -= radius / radiusdec;                rad = radius >> radiusbiasshift;                if (rad <= 1)                    rad = 0;                for (j = 0; j < rad; j++)                    radpower[j] = alpha * (((rad * rad - j * j) * radbias) / (rad * rad));            }        }        // fprintf(stderr,\"finished 1D learning: final alpha=%f        // !\\n\",((float)alpha)/initalpha);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "NeuQuant", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "map", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int map(int b, int g, int r) {        int i, j, dist, a, bestd;        int[] p;        int best;        bestd = 1000; /* biggest possible dist is 256*3 */        best = -1;        i = netindex[g]; /* index on g */        j = i - 1; /* start at netindex[g] and work outwards */        while ((i < netsize) || (j >= 0)) {            if (i < netsize) {                p = network[i];                dist = p[1] - g; /* inx key */                if (dist >= bestd)                    i = netsize; /* stop iter */                else {                    i++;                    if (dist < 0)                        dist = -dist;                    a = p[0] - b;                    if (a < 0)                        a = -a;                    dist += a;                    if (dist < bestd) {                        a = p[2] - r;                        if (a < 0)                            a = -a;                        dist += a;                        if (dist < bestd) {                            bestd = dist;                            best = p[3];                        }                    }                }            }            if (j >= 0) {                p = network[j];                dist = g - p[1]; /* inx key - reverse dif */                if (dist >= bestd)                    j = -1; /* stop iter */                else {                    j--;                    if (dist < 0)                        dist = -dist;                    a = p[0] - b;                    if (a < 0)                        a = -a;                    dist += a;                    if (dist < bestd) {                        a = p[2] - r;                        if (a < 0)                            a = -a;                        dist += a;                        if (dist < bestd) {                            bestd = dist;                            best = p[3];                        }                    }                }            }        }        return (best);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "NeuQuant", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "process", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] process() {        learn();        unbiasnet();        inxbuild();        return colorMap();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "NeuQuant", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "unbiasnet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unbiasnet() {        int i;        for (i = 0; i < netsize; i++) {            network[i][0] >>= netbiasshift;            network[i][1] >>= netbiasshift;            network[i][2] >>= netbiasshift;            network[i][3] = i; /* record colour no */        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "NeuQuant", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "alterneigh", "params": ["int", "int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void alterneigh(int rad, int i, int b, int g, int r) {        int j, k, lo, hi, a, m;        int[] p;        lo = i - rad;        if (lo < -1)            lo = -1;        hi = i + rad;        if (hi > netsize)            hi = netsize;        j = i + 1;        k = i - 1;        m = 1;        while ((j < hi) || (k > lo)) {            a = radpower[m++];            if (j < hi) {                p = network[j++];                try {                    p[0] -= (a * (p[0] - b)) / alpharadbias;                    p[1] -= (a * (p[1] - g)) / alpharadbias;                    p[2] -= (a * (p[2] - r)) / alpharadbias;                } catch (Exception e) {                } // prevents 1.3 miscompilation            }            if (k > lo) {                p = network[k--];                try {                    p[0] -= (a * (p[0] - b)) / alpharadbias;                    p[1] -= (a * (p[1] - g)) / alpharadbias;                    p[2] -= (a * (p[2] - r)) / alpharadbias;                } catch (Exception e) {                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "NeuQuant", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "altersingle", "params": ["int", "int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void altersingle(int alpha, int i, int b, int g, int r) {\t    /* alter hit neuron */        int[] n = network[i];        n[0] -= (alpha * (n[0] - b)) / initalpha;        n[1] -= (alpha * (n[1] - g)) / initalpha;        n[2] -= (alpha * (n[2] - r)) / initalpha;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "NeuQuant", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "contest", "params": ["int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int contest(int b, int g, int r) {\t    /* finds closest neuron (min dist) and updates freq */\t    /* finds best neuron (min dist-bias) and returns position */\t    /* for frequently chosen neurons, freq[i] is high and bias[i] is negative */\t    /* bias[i] = gamma*((1/netsize)-freq[i]) */        int i, dist, a, biasdist, betafreq;        int bestpos, bestbiaspos, bestd, bestbiasd;        int[] n;        bestd = ~(((int) 1) << 31);        bestbiasd = bestd;        bestpos = -1;        bestbiaspos = bestpos;        for (i = 0; i < netsize; i++) {            n = network[i];            dist = n[0] - b;            if (dist < 0)                dist = -dist;            a = n[1] - g;            if (a < 0)                a = -a;            dist += a;            a = n[2] - r;            if (a < 0)                a = -a;            dist += a;            if (dist < bestd) {                bestd = dist;                bestpos = i;            }            biasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));            if (biasdist < bestbiasd) {                bestbiasd = biasdist;                bestbiaspos = i;            }            betafreq = (freq[i] >> betashift);            freq[i] -= betafreq;            bias[i] += (betafreq << gammashift);        }        freq[bestpos] += beta;        bias[bestpos] -= betagamma;        return (bestbiaspos);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "NeuQuant", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "char_out", "params": ["byte", "OutputStream"], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "    void char_out(byte c, OutputStream outs) throws IOException {        accum[a_count++] = c;        if (a_count >= 254)            flush_char(outs);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "LZWEncoder", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "cl_block", "params": ["OutputStream"], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "    void cl_block(OutputStream outs) throws IOException {        cl_hash(hsize);        free_ent = ClearCode + 2;        clear_flg = true;        output(ClearCode, outs);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "LZWEncoder", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "cl_hash", "params": ["int"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void cl_hash(int hsize) {        for (int i = 0; i < hsize; ++i)            htab[i] = -1;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "LZWEncoder", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "compress", "params": ["int", "OutputStream"], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "    void compress(int init_bits, OutputStream outs) throws IOException {        int fcode;        int i /* = 0 */;        int c;        int ent;        int disp;        int hsize_reg;        int hshift;        // Set up the globals: g_init_bits - initial number of bits        g_init_bits = init_bits;        // Set up the necessary values        clear_flg = false;        n_bits = g_init_bits;        maxcode = MAXCODE(n_bits);        ClearCode = 1 << (init_bits - 1);        EOFCode = ClearCode + 1;        free_ent = ClearCode + 2;        a_count = 0; // clear packet        ent = nextPixel();        hshift = 0;        for (fcode = hsize; fcode < 65536; fcode *= 2)            ++hshift;        hshift = 8 - hshift; // set hash code range bound        hsize_reg = hsize;        cl_hash(hsize_reg); // clear hash table        output(ClearCode, outs);        outer_loop:        while ((c = nextPixel()) != EOF) {            fcode = (c << maxbits) + ent;            i = (c << hshift) ^ ent; // xor hashing            if (htab[i] == fcode) {                ent = codetab[i];                continue;            } else if (htab[i] >= 0) // non-empty slot            {                disp = hsize_reg - i; // secondary hash (after G. Knott)                if (i == 0)                    disp = 1;                do {                    if ((i -= disp) < 0)                        i += hsize_reg;                    if (htab[i] == fcode) {                        ent = codetab[i];                        continue outer_loop;                    }                } while (htab[i] >= 0);            }            output(ent, outs);            ent = c;            if (free_ent < maxmaxcode) {                codetab[i] = free_ent++; // code -> hashtable                htab[i] = fcode;            } else                cl_block(outs);        }        // Put out the final code.        output(ent, outs);        output(EOFCode, outs);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "LZWEncoder", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "encode", "params": ["OutputStream"], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "    void encode(OutputStream os) throws IOException {        os.write(initCodeSize); // write \"initial code size\" byte        remaining = imgW * imgH; // reset navigation variables        curPixel = 0;        compress(initCodeSize + 1, os); // compress and write the pixel data        os.write(0); // write block terminator    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "LZWEncoder", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "flush_char", "params": ["OutputStream"], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "    void flush_char(OutputStream outs) throws IOException {        if (a_count > 0) {            outs.write(a_count);            outs.write(accum, 0, a_count);            a_count = 0;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "LZWEncoder", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "MAXCODE", "params": ["int"], "throws": null, "modifiers": ["final"], "return_type": "int", "snippet": "    final int MAXCODE(int n_bits) {        return (1 << n_bits) - 1;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "LZWEncoder", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "nextPixel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int nextPixel() {        if (remaining == 0)            return EOF;        --remaining;        byte pix = pixAry[curPixel++];        return pix & 0xff;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "LZWEncoder", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "output", "params": ["int", "OutputStream"], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "    void output(int code, OutputStream outs) throws IOException {        cur_accum &= masks[cur_bits];        if (cur_bits > 0)            cur_accum |= (code << cur_bits);        else            cur_accum = code;        cur_bits += n_bits;        while (cur_bits >= 8) {            char_out((byte) (cur_accum & 0xff), outs);            cur_accum >>= 8;            cur_bits -= 8;        }        // If the next entry is going to be too big for the code size,        // then increase it, if possible.        if (free_ent > maxcode || clear_flg) {            if (clear_flg) {                maxcode = MAXCODE(n_bits = g_init_bits);                clear_flg = false;            } else {                ++n_bits;                if (n_bits == maxbits)                    maxcode = maxmaxcode;                else                    maxcode = MAXCODE(n_bits);            }        }        if (code == EOFCode) {            // At EOF, write the rest of the buffer.            while (cur_bits > 0) {                char_out((byte) (cur_accum & 0xff), outs);                cur_accum >>= 8;                cur_bits -= 8;            }            flush_char(outs);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/AnimatedGifEncoder.java", "stars": "2", "class": {"name": "LZWEncoder", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "supports", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean supports(Class<?> type) {\t\treturn type == SampleProperties.class;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-property-validation/src/main/java/smoketest/propertyvalidation/SamplePropertiesValidator.java", "stars": "47572", "class": {"name": "SamplePropertiesValidator", "extends": null, "implements": ["Validator"], "modifiers": ["public"]}}, {"method_name": "validate", "params": ["Object", "Errors"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void validate(Object o, Errors errors) {\t\tValidationUtils.rejectIfEmpty(errors, \"host\", \"host.empty\");\t\tValidationUtils.rejectIfEmpty(errors, \"port\", \"port.empty\");\t\tSampleProperties properties = (SampleProperties) o;\t\tif (properties.getHost() != null && !this.pattern.matcher(properties.getHost()).matches()) {\t\t\terrors.rejectValue(\"host\", \"Invalid host\");\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-property-validation/src/main/java/smoketest/propertyvalidation/SamplePropertiesValidator.java", "stars": "47572", "class": {"name": "SamplePropertiesValidator", "extends": null, "implements": ["Validator"], "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        view = (Practice03OfObjectView) findViewById(R.id.objectAnimatorView);        animateBt = (Button) findViewById(R.id.animateBt);        animateBt.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                ObjectAnimator animator = ObjectAnimator.ofObject(view, \"position\",                        new PointFEvaluator(), new PointF(0, 0), new PointF(1, 1));                animator.setInterpolator(new LinearInterpolator());                animator.setDuration(1000);                animator.start();            }        });    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice03/Practice03OfObjectLayout.java", "stars": "2", "class": {"name": "Practice03OfObjectLayout", "extends": "RelativeLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["float", "PointF", "PointF"], "throws": null, "modifiers": ["public"], "return_type": "PointF", "snippet": "        public PointF evaluate(float fraction, PointF startValue, PointF endValue) {            //fraction\u8868\u793a\u52a8\u753b\u8fdb\u5ea6            sum++;            System.out.println(\"fraction = \" + fraction + \" startValue = \" + startValue + \" endValue = \" + endValue + \" sum = \" + sum);            float x = startValue.x + (fraction * (endValue.x - startValue.x));            float y = startValue.y + (fraction * (endValue.y - startValue.y));            System.out.println(\"x = \" + x + \" y = \" + y);            newPoint.set(x, y);            return newPoint;        }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice03/Practice03OfObjectLayout.java", "stars": "2", "class": {"name": "PointFEvaluator", "extends": null, "implements": ["TypeEvaluator"], "modifiers": ["private"]}}, {"method_name": "romanToInt", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int romanToInt(String s) {        if(s.length() == 0)            return 0;        HashMap<String, Integer> nums = new HashMap<>();        nums.put(\"I\", 1);        nums.put(\"V\", 5);        nums.put(\"X\", 10);        nums.put(\"L\", 50);        nums.put(\"C\", 100);        nums.put(\"D\", 500);        nums.put(\"M\", 1000);        char[] chars = s.toCharArray();        int sum = nums.get(Character.toString(chars[0]));        for(int i = 1; i < chars.length; i ++) {            if(nums.get(Character.toString(chars[i])) <= nums.get(Character.toString(chars[i - 1])))                sum += nums.get(Character.toString(chars[i]));            else                sum += nums.get(Character.toString(chars[i])) - nums.get(Character.toString(chars[i - 1])) - nums.get(Character.toString(chars[i - 1]));        }        return sum;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/RomanToInteger.java", "stars": "1", "class": {"name": "RomanToInteger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onReceive", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onReceive (android.content.Context p0, android.content.Intent p1)\t{\t\tn_onReceive (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/BatteryBroadcastReceiver.java", "stars": "2", "class": {"name": "BatteryBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onReceive", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onReceive (android.content.Context p0, android.content.Intent p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/BatteryBroadcastReceiver.java", "stars": "2", "class": {"name": "BatteryBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/BatteryBroadcastReceiver.java", "stars": "2", "class": {"name": "BatteryBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/BatteryBroadcastReceiver.java", "stars": "2", "class": {"name": "BatteryBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "hello", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String hello() {        return \"Hello, Spring Boot!\";    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-start/src/main/java/com/soft1851/springboot/start/controller/SpringBootController.java", "stars": "3", "class": {"name": "SpringBootController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "singleNumber", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int singleNumber(int[] nums) {                int singleNo=0;         for(int i=0;i<nums.length;i++)        {           singleNo^= nums[i];         }        return singleNo;            }", "url": "https://raw.githubusercontent.com/aayush-grover/30-Days-LeetCode-Challenge/master/Single%20Number.java", "stars": "2", "class": {"name": "Solution", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/timestamp_with_timezone/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/timestamp_with_timezone/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timestamp_with_timezone/TimestampWithTimezoneTypeHandlerTest.java", "stars": "15", "class": {"name": "TimestampWithTimezoneTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOffsetDateTime", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOffsetDateTime() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = mapper.selectById(1);      assertEquals(OffsetDateTime.of(2018, 1, 2, 11, 22, 33, 123456000, ZoneOffset.ofHoursMinutes(1, 23)),          record.getOdt());      // HSQLDB 2.4.1 truncates nano seconds.      assertEquals(OffsetTime.of(11, 22, 33, 0, ZoneOffset.ofHoursMinutes(1, 23)), record.getOt());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timestamp_with_timezone/TimestampWithTimezoneTypeHandlerTest.java", "stars": "15", "class": {"name": "TimestampWithTimezoneTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertOffsetDateTime", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertOffsetDateTime() {    OffsetDateTime odt = OffsetDateTime.of(2018, 1, 2, 11, 22, 33, 123456000, ZoneOffset.ofHoursMinutes(1, 23));    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = new Record();      record.setId(2);      record.setOdt(odt);      int result = mapper.insertOffsetDateTime(record);      assertEquals(1, result);      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = mapper.selectById(2);      assertEquals(odt, record.getOdt());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timestamp_with_timezone/TimestampWithTimezoneTypeHandlerTest.java", "stars": "15", "class": {"name": "TimestampWithTimezoneTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertOffsetTime", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertOffsetTime() {    OffsetTime ot = OffsetTime.of(11, 22, 33, 123456000, ZoneOffset.ofHoursMinutes(1, 23));    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = new Record();      record.setId(3);      record.setOt(ot);      int result = mapper.insertOffsetTime(record);      assertEquals(1, result);      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = mapper.selectById(3);      assertEquals(ot, record.getOt());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timestamp_with_timezone/TimestampWithTimezoneTypeHandlerTest.java", "stars": "15", "class": {"name": "TimestampWithTimezoneTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isEmail", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isEmail(String email) {        return email.matches(\"^([a-z0-9A-Z]+[-|\\\\\\\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\\\\\\\.)+[a-zA-Z]{2,}$\\n\");    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/EmailUtil.java", "stars": "1", "class": {"name": "EmailUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pageList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void pageList(){\t\tList<XxlJobInfo> list = xxlJobInfoDao.pageList(0, 20, 0, -1, null, null, null);\t\tlong list_count = xxlJobInfoDao.pageListCount(0, 20, 0, -1, null, null, null);\t\t\t\tSystem.out.println(list);\t\tSystem.out.println(list_count);\t\tList<XxlJobInfo> list2 = xxlJobInfoDao.getJobsByGroup(1);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/test/java/com/avon/rga/dao/XxlJobInfoDaoTest.java", "stars": "1", "class": {"name": "XxlJobInfoDaoTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save_load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void save_load(){\t\tXxlJobInfo info = new XxlJobInfo();\t\tinfo.setJobGroup(1);\t\tinfo.setJobCron(\"jobCron\");\t\tinfo.setJobDesc(\"desc\");\t\tinfo.setAuthor(\"setAuthor\");\t\tinfo.setAlarmEmail(\"setAlarmEmail\");\t\tinfo.setExecutorRouteStrategy(\"setExecutorRouteStrategy\");\t\tinfo.setExecutorHandler(\"setExecutorHandler\");\t\tinfo.setExecutorParam(\"setExecutorParam\");\t\tinfo.setExecutorBlockStrategy(\"setExecutorBlockStrategy\");\t\tinfo.setGlueType(\"setGlueType\");\t\tinfo.setGlueSource(\"setGlueSource\");\t\tinfo.setGlueRemark(\"setGlueRemark\");\t\tinfo.setChildJobId(\"1\");\t\tinfo.setAddTime(new Date());\t\tinfo.setUpdateTime(new Date());\t\tinfo.setGlueUpdatetime(new Date());\t\t xxlJobInfoDao.save(info);\t\tXxlJobInfo info2 = xxlJobInfoDao.loadById(info.getId());\t\tinfo2.setJobCron(\"jobCron2\");\t\tinfo2.setJobDesc(\"desc2\");\t\tinfo2.setAuthor(\"setAuthor2\");\t\tinfo2.setAlarmEmail(\"setAlarmEmail2\");\t\tinfo2.setExecutorRouteStrategy(\"setExecutorRouteStrategy2\");\t\tinfo2.setExecutorHandler(\"setExecutorHandler2\");\t\tinfo2.setExecutorParam(\"setExecutorParam2\");\t\tinfo2.setExecutorBlockStrategy(\"setExecutorBlockStrategy2\");\t\tinfo2.setGlueType(\"setGlueType2\");\t\tinfo2.setGlueSource(\"setGlueSource2\");\t\tinfo2.setGlueRemark(\"setGlueRemark2\");\t\tinfo2.setGlueUpdatetime(new Date());\t\tinfo2.setChildJobId(\"1\");\t\tinfo2.setUpdateTime(new Date());\t\tint item2 = xxlJobInfoDao.update(info2);\t\txxlJobInfoDao.delete(info2.getId());\t\tList<XxlJobInfo> list2 = xxlJobInfoDao.getJobsByGroup(1);\t\tint ret3 = xxlJobInfoDao.findAllCount();\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/test/java/com/avon/rga/dao/XxlJobInfoDaoTest.java", "stars": "1", "class": {"name": "XxlJobInfoDaoTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "calculateDistanceToFinalSnap", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int[] calculateDistanceToFinalSnap (android.support.v7.widget.RecyclerView.LayoutManager p0, android.view.View p1)\t{\t\treturn n_calculateDistanceToFinalSnap (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSingleSnapHelper.java", "stars": "2", "class": {"name": "EndSingleSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_calculateDistanceToFinalSnap", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int[] n_calculateDistanceToFinalSnap (android.support.v7.widget.RecyclerView.LayoutManager p0, android.view.View p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSingleSnapHelper.java", "stars": "2", "class": {"name": "EndSingleSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSingleSnapHelper.java", "stars": "2", "class": {"name": "EndSingleSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSingleSnapHelper.java", "stars": "2", "class": {"name": "EndSingleSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "exceptionHandler", "params": ["Exception"], "throws": null, "modifiers": ["public"], "return_type": "ResultDto", "snippet": "    public ResultDto exceptionHandler(Exception e) {        String msg;        if (e instanceof CustomException) {            msg = e.getMessage();        } else {            log.error(\"catch controller error:\", e);            msg = e.getClass().getName() + \":\" + e.getMessage();        }        return new ResultDto(msg);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/advice/ExceptionAdvice.java", "stars": "2", "class": {"name": "ExceptionAdvice", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParameter", "params": ["PreparedStatement", "int", "Map<String,Object>", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType) throws SQLException {    // Not Implemented  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/maptypehandler/LabelsTypeHandler.java", "stars": "15", "class": {"name": "LabelsTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> getResult(ResultSet rs, String columnName) throws SQLException {    // Not Implemented    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/maptypehandler/LabelsTypeHandler.java", "stars": "15", "class": {"name": "LabelsTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> getResult(ResultSet rs, int columnIndex) throws SQLException {    // Not Implemented    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/maptypehandler/LabelsTypeHandler.java", "stars": "15", "class": {"name": "LabelsTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> getResult(CallableStatement cs, int columnIndex) throws SQLException {    // Not Implemented    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/maptypehandler/LabelsTypeHandler.java", "stars": "15", "class": {"name": "LabelsTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "display", "params": ["Bitmap", "ImageView", "LoadedFrom"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "\tpublic Bitmap display(Bitmap bitmap, ImageView imageView, LoadedFrom loadedFrom) {\t\timageView.setImageBitmap(bitmap);\t\treturn bitmap;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/display/SimpleBitmapDisplayer.java", "stars": "74", "class": {"name": "SimpleBitmapDisplayer", "extends": null, "implements": ["BitmapDisplayer"], "modifiers": ["public", "final"]}}, {"method_name": "setApplicationContext", "params": ["ApplicationContext"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        SpringContext.applicationContext = applicationContext;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/SpringContext.java", "stars": "23", "class": {"name": "SpringContext", "extends": null, "implements": ["ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getApplicationContext", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ApplicationContext", "snippet": "    public static ApplicationContext getApplicationContext() {        return applicationContext;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/SpringContext.java", "stars": "23", "class": {"name": "SpringContext", "extends": null, "implements": ["ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object getBean(String name) {        return getApplicationContext().getBean(name);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/SpringContext.java", "stars": "23", "class": {"name": "SpringContext", "extends": null, "implements": ["ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T getBean(Class<T> clazz) {        return getApplicationContext().getBean(clazz);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/SpringContext.java", "stars": "23", "class": {"name": "SpringContext", "extends": null, "implements": ["ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T getBean(String name, Class<T> clazz) {        return getApplicationContext().getBean(name, clazz);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/SpringContext.java", "stars": "23", "class": {"name": "SpringContext", "extends": null, "implements": ["ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getConnnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IConnection", "snippet": "    public IConnection getConnnection() {        return this.connnection;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/events/connection/ConnectionEvent.java", "stars": "2", "class": {"name": "ConnectionEvent", "extends": "CommunicationEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRun", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRun(final String[] args) {        if (mc.objectMouseOver != null) {            if (mc.objectMouseOver.typeOfHit == RayTraceResult.Type.ENTITY) {                Entity entity = mc.objectMouseOver.entityHit;                if (entity instanceof EntityTameable) {                    EntityTameable tamable = (EntityTameable) entity;                    if (tamable.isTamed()) {                     String name = Mercury.INSTANCE.getProfileManager().getName(tamable.getOwnerId());                        ChatUtil.print(String.format(\"Entity %s is owned by %s.\", tamable.getName(), name));                    } else {                        ChatUtil.print(String.format(\"Entity %s is not tamable.\", entity.getName()));                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/commands/MobOwnerCommand.java", "stars": "12", "class": {"name": "MobOwnerCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalPrevisionalLength", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTotalPrevisionalLength() {        return totalPrevisionalLength;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/pathfinder/PathItem.java", "stars": "15", "class": {"name": "PathItem", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCodigo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCodigo() {\t\treturn codigo;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCodigo", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCodigo(int codigo) {\t\tthis.codigo = codigo;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNome", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getNome() {\t\treturn nome;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNome", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setNome(String nome) {\t\tthis.nome = nome;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataNascimento", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "\tpublic LocalDateTime getDataNascimento() {\t\treturn dataNascimento;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataNascimento", "params": ["LocalDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDataNascimento(LocalDateTime dataNascimento) {\t\tthis.dataNascimento = dataNascimento;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCpf", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getCpf() {\t\treturn cpf;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCpf", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCpf(String cpf) {\t\tthis.cpf = cpf;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getRg() {\t\treturn rg;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setRg(String rg) {\t\tthis.rg = rg;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/Administrador.java", "stars": "3", "class": {"name": "Administrador", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\t\t\t\tif (!(handler instanceof HandlerMethod)) {\t\t\treturn super.preHandle(request, response, handler);\t\t}\t\t// if need login\t\tboolean needLogin = true;\t\tboolean needAdminuser = false;\t\tHandlerMethod method = (HandlerMethod)handler;\t\tPermissionLimit permission = method.getMethodAnnotation(PermissionLimit.class);\t\tif (permission!=null) {\t\t\tneedLogin = permission.limit();\t\t\tneedAdminuser = permission.adminuser();\t\t}\t\tif (needLogin) {\t\t\tXxlJobUser loginUser = loginService.ifLogin(request, response);\t\t\tif (loginUser == null) {\t\t\t\tresponse.sendRedirect(request.getContextPath() + \"/toLogin\");\t\t\t\t//request.getRequestDispatcher(\"/toLogin\").forward(request, response);\t\t\t\treturn false;\t\t\t}\t\t\tif (needAdminuser && loginUser.getRole()!=1) {\t\t\t\tthrow new RuntimeException(I18nUtil.getString(\"system_permission_limit\"));\t\t\t}\t\t\trequest.setAttribute(LoginService.LOGIN_IDENTITY_KEY, loginUser);\t\t}\t\treturn super.preHandle(request, response, handler);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/interceptor/PermissionInterceptor.java", "stars": "1", "class": {"name": "PermissionInterceptor", "extends": "HandlerInterceptorAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setup() {    super.setup();    PeasyCam peasyCam = new PeasyCam(this,1000);  }", "url": "https://raw.githubusercontent.com/gitaumoses4/processing-intellij-template/master/src/main/java/Canvas.java", "stars": "2", "class": {"name": "Canvas", "extends": "PApplet", "implements": null, "modifiers": ["public"]}}, {"method_name": "settings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void settings() {    size(WIDTH, HEIGHT, P3D);  }", "url": "https://raw.githubusercontent.com/gitaumoses4/processing-intellij-template/master/src/main/java/Canvas.java", "stars": "2", "class": {"name": "Canvas", "extends": "PApplet", "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void draw() {    background(64);    fill(255);    sphere(500);  }", "url": "https://raw.githubusercontent.com/gitaumoses4/processing-intellij-template/master/src/main/java/Canvas.java", "stars": "2", "class": {"name": "Canvas", "extends": "PApplet", "implements": null, "modifiers": ["public"]}}, {"method_name": "store", "params": ["PlayerBlockPlacementLimit"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store(PlayerBlockPlacementLimit... limits) {        for (PlayerBlockPlacementLimit limit : limits) {            StorageConfig config = new StorageConfig(getStorageFile(limit.getPlayerUUID()).toPath(), limit);            config.setBlockPlacementLimit(limit);            config.save();        }    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/storage/FlatFileLimitsStorage.java", "stars": "3", "class": {"name": "FlatFileLimitsStorage", "extends": null, "implements": ["LimitsStorage"], "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PlayerBlockPlacementLimit", "snippet": "    public PlayerBlockPlacementLimit[] load() {        File storagePath = getLimitsManager().getStoragePath();        if (storagePath.mkdirs()) return new PlayerBlockPlacementLimit[0];        File[] files = storagePath.listFiles();        PlayerBlockPlacementLimit[] result = new PlayerBlockPlacementLimit[files.length];        for (int i = 0; i < files.length; i++) {            PlayerBlockPlacementLimit playerLimit = loadPlayerConfig(files[0]);            result[i] = playerLimit;        }        return result;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/storage/FlatFileLimitsStorage.java", "stars": "3", "class": {"name": "FlatFileLimitsStorage", "extends": null, "implements": ["LimitsStorage"], "modifiers": ["public"]}}, {"method_name": "load", "params": ["OfflinePlayer"], "throws": null, "modifiers": ["public"], "return_type": "PlayerBlockPlacementLimit", "snippet": "    public PlayerBlockPlacementLimit load(OfflinePlayer player) {        File file = getStorageFile(player.getUniqueId());        if (!file.exists()) {            return createPlayerConfig(player);        } else {            return loadPlayerConfig(file);        }    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/storage/FlatFileLimitsStorage.java", "stars": "3", "class": {"name": "FlatFileLimitsStorage", "extends": null, "implements": ["LimitsStorage"], "modifiers": ["public"]}}, {"method_name": "getStorageFile", "params": ["UUID"], "throws": null, "modifiers": ["private"], "return_type": "File", "snippet": "    private File getStorageFile(UUID player) {        return new File(getLimitsManager().getStoragePath(), player.toString() + \".yaml\");    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/storage/FlatFileLimitsStorage.java", "stars": "3", "class": {"name": "FlatFileLimitsStorage", "extends": null, "implements": ["LimitsStorage"], "modifiers": ["public"]}}, {"method_name": "createPlayerConfig", "params": ["OfflinePlayer"], "throws": null, "modifiers": ["private"], "return_type": "PlayerBlockPlacementLimit", "snippet": "    private PlayerBlockPlacementLimit createPlayerConfig(OfflinePlayer player) {        StorageConfig config = new StorageConfig(getStorageFile(player.getUniqueId()).toPath());        config.setBlockPlacementLimit(new PlayerBlockPlacementLimit(player));        config.loadAndSave();        return config.getBlockPlacementLimit();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/storage/FlatFileLimitsStorage.java", "stars": "3", "class": {"name": "FlatFileLimitsStorage", "extends": null, "implements": ["LimitsStorage"], "modifiers": ["public"]}}, {"method_name": "loadPlayerConfig", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "PlayerBlockPlacementLimit", "snippet": "    private PlayerBlockPlacementLimit loadPlayerConfig(File file) {        StorageConfig storageConfig = new StorageConfig(file.toPath());        storageConfig.load();        return storageConfig.getBlockPlacementLimit();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/storage/FlatFileLimitsStorage.java", "stars": "3", "class": {"name": "FlatFileLimitsStorage", "extends": null, "implements": ["LimitsStorage"], "modifiers": ["public"]}}, {"method_name": "testDefaultSettings", "params": ["CapturedOutput"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testDefaultSettings(CapturedOutput output) {\t\tassertThat(SpringApplication.exit(SpringApplication.run(SampleBatchApplication.class))).isEqualTo(0);\t\tassertThat(output).contains(\"completed with the following parameters\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-batch/src/test/java/smoketest/batch/SampleBatchApplicationTests.java", "stars": "47572", "class": {"name": "SampleBatchApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //1.\u521b\u5efaFileWriter\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u5199\u5165\u6570\u636e\u7684\u76ee\u7684\u5730        FileWriter fw = new FileWriter(\"09_IOAndProperties\\\\e.txt\");        //2.\u4f7f\u7528FileWriter\u4e2d\u7684\u65b9\u6cd5write,\u628a\u6570\u636e\u5199\u5165\u5230\u5185\u5b58\u7f13\u51b2\u533a\u4e2d(\u5b57\u7b26\u8f6c\u6362\u4e3a\u5b57\u8282\u7684\u8fc7\u7a0b)        //void write(int c) \u5199\u5165\u5355\u4e2a\u5b57\u7b26\u3002        fw.write(97);        //3.\u4f7f\u7528FileWriter\u4e2d\u7684\u65b9\u6cd5flush,\u628a\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e,\u5237\u65b0\u5230\u6587\u4ef6\u4e2d        fw.flush();        //\u5237\u65b0\u4e4b\u540e\u6d41\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528        fw.write(98);        //4.\u91ca\u653e\u8d44\u6e90(\u4f1a\u5148\u628a\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u5237\u65b0\u5230\u6587\u4ef6\u4e2d)        fw.close();        //close\u65b9\u6cd5\u4e4b\u540e\u6d41\u5df2\u7ecf\u5173\u95ed\u4e86,\u5df2\u7ecf\u4ece\u5185\u5b58\u4e2d\u6d88\u5931\u4e86,\u6d41\u5c31\u4e0d\u80fd\u518d\u4f7f\u7528\u4e86        fw.write(99);//IOException: Stream closed    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/Demo05Writer/Demo02CloseAndFlush.java", "stars": "2", "class": {"name": "Demo02CloseAndFlush", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "developer", "snippet": "    public static developer newInstance() {        developer fragment = new developer();        return fragment;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/developer.java", "stars": "2", "class": {"name": "developer", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/developer.java", "stars": "2", "class": {"name": "developer", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_developer, container, false);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/developer.java", "stars": "2", "class": {"name": "developer", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onButtonPressed", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onButtonPressed(Uri uri) {    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/developer.java", "stars": "2", "class": {"name": "developer", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/developer.java", "stars": "2", "class": {"name": "developer", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();        }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/developer.java", "stars": "2", "class": {"name": "developer", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint i, j, stringLength, maxLength;\t\tint l, iterations;\t\tlong time;\t\tString path;\t\tIntArray string = null;\t\tIntArray outputString = new IntArray(1000,2);\t\tTestBernoulliSubstring w;\t\tSubstringIterator iterator;\t\tRuntime runtime = Runtime.getRuntime();\t\t// Parsing input\t\tpath=\"NC_021658.fna\";\t\tstringLength=14782125;  // (file,length,nLines): (dna.50MB,52427710,?), (NC_021658.fna,14782125,211174)\t\t// Initializing\t\tint[] alphabet = new int[] {0,1,2,3};\t\ttry { string=Utils.loadDNA(path,stringLength,1000); }\t\tcatch(IOException e) {\t\t\te.printStackTrace();\t\t\tSystem.exit(1);\t\t}\t\tstringLength=(int)string.length();//Utils.shuffle(string);\t\tw = new TestBernoulliSubstring(alphabet.length,Utils.log2(alphabet.length),Utils.bitsToEncode(alphabet.length),stringLength+1,Utils.log2(stringLength+1),Utils.bitsToEncode(stringLength+1),outputString);\t\ttime=System.currentTimeMillis();\t\titerator = new SubstringIterator(string,alphabet,alphabet.length,w);\t\tSystem.out.println(\"construction time: \"+((double)(System.currentTimeMillis()-time))/1000+\"s, length=\"+stringLength);\t\t// Running\t\tConstants.N_THREADS=Integer.parseInt(args[0]);\t\tSystem.out.println(\"String length: \"+stringLength+\" nThreads: \"+Constants.N_THREADS);\t\ttime=System.currentTimeMillis();\t\titerator.run();\t\tSystem.out.println(\"traversal time: \"+((double)(System.currentTimeMillis()-time))/1000);/*\t\t// Reporting\t\tSystem.out.println(\"READ_QUERIES_PER_LENGTH:\");\t\tfor (i=0; i<MAX_LENGTH; i++) System.out.println(READ_QUERIES_PER_LENGTH[i]+\"\");*/\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/TestDrive.java", "stars": "2", "class": {"name": "TestDrive", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\t\tprotected Substring getInstance() {\t\t\treturn new TestBernoulliSubstring(alphabetLength,log2alphabetLength,bitsToEncodeAlphabetLength,bwtLength,log2BWTLength,bitsToEncodeBWTLength,sequence);\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/TestDrive.java", "stars": "2", "class": {"name": "TestBernoulliSubstring", "extends": "BernoulliSubstring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "read", "params": ["Stream", "Substring", "boolean", "boolean", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void read(Stream stack, Substring[] cache, boolean fastHead, boolean fastTail, boolean fastAppendix) {\t\t\tsuper.read(stack,cache,fastHead,fastTail,fastAppendix);\t\t\tif (length<MAX_LENGTH) READ_QUERIES_PER_LENGTH[(int)length]++;\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/TestDrive.java", "stars": "2", "class": {"name": "TestBernoulliSubstring", "extends": "BernoulliSubstring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "visited", "params": ["Stream", "RigidStream", "SimpleStream", "Substring", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void visited(Stream stack, RigidStream characterStack, SimpleStream pointerStack, Substring[] cache, Substring[] leftExtensions) {\t\t\tsuper.visited(stack,characterStack,pointerStack,cache,leftExtensions);\t\t\t\t\t\tif (leftContext>1 && frequency()>=3 && out[2]>=100) {\t\t\t\tsynchronized(sequence) {\t\t\t\t\tgetSequence(characterStack,sequence);\t\t\t\t\tIntArray.printAsDNA(sequence);\t\t\t\t\tSystem.out.print(\" f=\"+frequency()+\" \");\t\t\t\t\tfor (int i=0; i<N_SCORES; i++) System.out.print(formatter.format(out[i])+\" \");\t\t\t\t\tSystem.out.println();\t\t\t\t}\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/TestDrive.java", "stars": "2", "class": {"name": "TestBernoulliSubstring", "extends": "BernoulliSubstring", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "onFillRequest", "params": ["FillRequest", "CancellationSignal", "FillCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFillRequest(@NonNull FillRequest request, @NonNull CancellationSignal cancellationSignal, @NonNull FillCallback callback) {        List<FillContext> context = request.getFillContexts();        AssistStructure structure = context.get(context.size() - 1).getStructure();        fillResponseBuilder = new FillResponse.Builder();        accounts = new Helpers().readAccounts(getApplicationContext());        boolean success = traverseStructure(structure);        Log.d(null, \"Found: \" + success);        if(success)            callback.onSuccess(fillResponseBuilder.build());    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Autofill.java", "stars": "2", "class": {"name": "Autofill", "extends": "AutofillService", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSaveRequest", "params": ["SaveRequest", "SaveCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSaveRequest(@NonNull SaveRequest request, @NonNull SaveCallback callback) {    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Autofill.java", "stars": "2", "class": {"name": "Autofill", "extends": "AutofillService", "implements": null, "modifiers": ["public"]}}, {"method_name": "traverseStructure", "params": ["AssistStructure"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean traverseStructure(AssistStructure structure){        int nodes = structure.getWindowNodeCount();        boolean returnedResult = false;        for(int i = 0; i < nodes; i++) {            AssistStructure.WindowNode windowNode = structure.getWindowNodeAt(i);            AssistStructure.ViewNode viewNode = windowNode.getRootViewNode();            if(traverseNode(viewNode))                returnedResult = true;        }        return returnedResult;    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Autofill.java", "stars": "2", "class": {"name": "Autofill", "extends": "AutofillService", "implements": null, "modifiers": ["public"]}}, {"method_name": "traverseNode", "params": ["AssistStructure"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean traverseNode(AssistStructure.ViewNode viewNode) {        boolean returnedResult = false;        if(viewNode.getAutofillHints() != null && viewNode.getAutofillHints().length > 0) {            // the client app provided autofill hints            if(inputType(viewNode.getAutofillHints()).equals(\"username\")) {                populateResponseBuilder(\"username\", viewNode);                returnedResult = true;            } else if(inputType(viewNode.getAutofillHints()).equals(\"password\")) {                populateResponseBuilder(\"password\", viewNode);                returnedResult = true;            }        } else if(viewNode.getHint() != null && viewNode.getHint().length() > 0) {            // the client app haven't provided autofill hints            if (inputType(viewNode.getHint().split(\" \")).equals(\"username\")) {                populateResponseBuilder(\"username\", viewNode);                returnedResult = true;            } else if (inputType(viewNode.getHint().split(\" \")).equals(\"password\")) {                populateResponseBuilder(\"password\", viewNode);                returnedResult = true;            }        }        for(int i = 0; i < viewNode.getChildCount(); i++) {            AssistStructure.ViewNode childNode = viewNode.getChildAt(i);            if(traverseNode(childNode))                returnedResult = true;        }        return returnedResult;    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Autofill.java", "stars": "2", "class": {"name": "Autofill", "extends": "AutofillService", "implements": null, "modifiers": ["public"]}}, {"method_name": "populateResponseBuilder", "params": ["String", "AssistStructure"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void populateResponseBuilder(String query, AssistStructure.ViewNode viewNode) {        for(Account account : accounts) {            RemoteViews presentation = new RemoteViews(getPackageName(), android.R.layout.simple_list_item_1);            String value;            String presentation_value = account.getServiceName();            if (query.equals(\"username\")) { // is an username field                value = account.getUsername();                presentation_value += \" (\" + value + \")\";            } else {                value = account.getPassword();                StringBuilder sb = new StringBuilder();                for(int i = 0; i < value.length(); i++)                    sb.append(\"*\");                presentation_value += \" (\" + sb.toString() + \")\";            }            presentation.setTextViewText(android.R.id.text1, presentation_value);            Dataset.Builder datasetBuilder = new Dataset.Builder();            datasetBuilder.setValue(viewNode.getAutofillId(), AutofillValue.forText(value), presentation);            fillResponseBuilder.addDataset(datasetBuilder.build());        }    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Autofill.java", "stars": "2", "class": {"name": "Autofill", "extends": "AutofillService", "implements": null, "modifiers": ["public"]}}, {"method_name": "contains", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean contains(String[] arr, String query) {        for(String s : arr) {            if(s.toLowerCase().equals(query.toLowerCase()))                return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Autofill.java", "stars": "2", "class": {"name": "Autofill", "extends": "AutofillService", "implements": null, "modifiers": ["public"]}}, {"method_name": "inputType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String inputType(String[] arr) {        if(contains(arr, \"username\") || contains(arr, \"user\") || contains(arr, \"email\") || contains(arr, \"e-mail\"))            return \"username\";        else if(contains(arr, \"password\") || contains(arr, \"pass\") || contains(arr, \"pin\"))            return \"password\";        else            return \"unknown\";    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Autofill.java", "stars": "2", "class": {"name": "Autofill", "extends": "AutofillService", "implements": null, "modifiers": ["public"]}}, {"method_name": "linkFirst", "params": ["Node<E>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean linkFirst(Node<E> node) {        // assert lock.isHeldByCurrentThread();        if (count >= capacity)            return false;        Node<E> f = first;        node.next = f;        first = node;        if (last == null)            last = node;        else            f.prev = node;        ++count;        notEmpty.signal();        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "linkLast", "params": ["Node<E>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean linkLast(Node<E> node) {        // assert lock.isHeldByCurrentThread();        if (count >= capacity)            return false;        Node<E> l = last;        node.prev = l;        last = node;        if (first == null)            first = node;        else            l.next = node;        ++count;        notEmpty.signal();        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "unlinkFirst", "params": [], "throws": null, "modifiers": ["private"], "return_type": "E", "snippet": "    private E unlinkFirst() {        // assert lock.isHeldByCurrentThread();        Node<E> f = first;        if (f == null)            return null;        Node<E> n = f.next;        E item = f.item;        f.item = null;        f.next = f; // help GC        first = n;        if (n == null)            last = null;        else            n.prev = null;        --count;        notFull.signal();        return item;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "unlinkLast", "params": [], "throws": null, "modifiers": ["private"], "return_type": "E", "snippet": "    private E unlinkLast() {        // assert lock.isHeldByCurrentThread();        Node<E> l = last;        if (l == null)            return null;        Node<E> p = l.prev;        E item = l.item;        l.item = null;        l.prev = l; // help GC        last = p;        if (p == null)            first = null;        else            p.next = null;        --count;        notFull.signal();        return item;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "unlink", "params": ["Node<E>"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void unlink(Node<E> x) {        // assert lock.isHeldByCurrentThread();        Node<E> p = x.prev;        Node<E> n = x.next;        if (p == null) {            unlinkFirst();        } else if (n == null) {            unlinkLast();        } else {            p.next = n;            n.prev = p;            x.item = null;            // Don't mess with x's links.  They may still be in use by            // an iterator.            --count;            notFull.signal();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "addFirst", "params": ["E"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addFirst(E e) {        if (!offerFirst(e))            throw new IllegalStateException(\"Deque full\");    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "addLast", "params": ["E"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addLast(E e) {        if (!offerLast(e))            throw new IllegalStateException(\"Deque full\");    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "offerFirst", "params": ["E"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean offerFirst(E e) {        if (e == null) throw new NullPointerException();        Node<E> node = new Node<E>(e);        final ReentrantLock lock = this.lock;        lock.lock();        try {            return linkFirst(node);        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "offerLast", "params": ["E"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean offerLast(E e) {        if (e == null) throw new NullPointerException();        Node<E> node = new Node<E>(e);        final ReentrantLock lock = this.lock;        lock.lock();        try {            return linkLast(node);        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "putFirst", "params": ["E"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void putFirst(E e) throws InterruptedException {        if (e == null) throw new NullPointerException();        Node<E> node = new Node<E>(e);        final ReentrantLock lock = this.lock;        lock.lock();        try {            while (!linkFirst(node))                notFull.await();        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "putLast", "params": ["E"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void putLast(E e) throws InterruptedException {        if (e == null) throw new NullPointerException();        Node<E> node = new Node<E>(e);        final ReentrantLock lock = this.lock;        lock.lock();        try {            while (!linkLast(node))                notFull.await();        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "offerFirst", "params": ["E", "long", "TimeUnit"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean offerFirst(E e, long timeout, TimeUnit unit)        throws InterruptedException {        if (e == null) throw new NullPointerException();        Node<E> node = new Node<E>(e);        long nanos = unit.toNanos(timeout);        final ReentrantLock lock = this.lock;        lock.lockInterruptibly();        try {            while (!linkFirst(node)) {                if (nanos <= 0)                    return false;                nanos = notFull.awaitNanos(nanos);            }            return true;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "offerLast", "params": ["E", "long", "TimeUnit"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean offerLast(E e, long timeout, TimeUnit unit)        throws InterruptedException {        if (e == null) throw new NullPointerException();        Node<E> node = new Node<E>(e);        long nanos = unit.toNanos(timeout);        final ReentrantLock lock = this.lock;        lock.lockInterruptibly();        try {            while (!linkLast(node)) {                if (nanos <= 0)                    return false;                nanos = notFull.awaitNanos(nanos);            }            return true;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "removeFirst", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E removeFirst() {        E x = pollFirst();        if (x == null) throw new NoSuchElementException();        return x;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "removeLast", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E removeLast() {        E x = pollLast();        if (x == null) throw new NoSuchElementException();        return x;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "pollFirst", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E pollFirst() {        final ReentrantLock lock = this.lock;        lock.lock();        try {            return unlinkFirst();        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "pollLast", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E pollLast() {        final ReentrantLock lock = this.lock;        lock.lock();        try {            return unlinkLast();        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "takeFirst", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "E", "snippet": "    public E takeFirst() throws InterruptedException {        final ReentrantLock lock = this.lock;        lock.lock();        try {            E x;            while ( (x = unlinkFirst()) == null)                notEmpty.await();            return x;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "takeLast", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "E", "snippet": "    public E takeLast() throws InterruptedException {        final ReentrantLock lock = this.lock;        lock.lock();        try {            E x;            while ( (x = unlinkLast()) == null)                notEmpty.await();            return x;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "pollFirst", "params": ["long", "TimeUnit"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "E", "snippet": "    public E pollFirst(long timeout, TimeUnit unit)        throws InterruptedException {        long nanos = unit.toNanos(timeout);        final ReentrantLock lock = this.lock;        lock.lockInterruptibly();        try {            E x;            while ( (x = unlinkFirst()) == null) {                if (nanos <= 0)                    return null;                nanos = notEmpty.awaitNanos(nanos);            }            return x;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "pollLast", "params": ["long", "TimeUnit"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "E", "snippet": "    public E pollLast(long timeout, TimeUnit unit)        throws InterruptedException {        long nanos = unit.toNanos(timeout);        final ReentrantLock lock = this.lock;        lock.lockInterruptibly();        try {            E x;            while ( (x = unlinkLast()) == null) {                if (nanos <= 0)                    return null;                nanos = notEmpty.awaitNanos(nanos);            }            return x;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "getFirst", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E getFirst() {        E x = peekFirst();        if (x == null) throw new NoSuchElementException();        return x;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "getLast", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E getLast() {        E x = peekLast();        if (x == null) throw new NoSuchElementException();        return x;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "peekFirst", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E peekFirst() {        final ReentrantLock lock = this.lock;        lock.lock();        try {            return (first == null) ? null : first.item;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "peekLast", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E peekLast() {        final ReentrantLock lock = this.lock;        lock.lock();        try {            return (last == null) ? null : last.item;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "removeFirstOccurrence", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean removeFirstOccurrence(Object o) {        if (o == null) return false;        final ReentrantLock lock = this.lock;        lock.lock();        try {            for (Node<E> p = first; p != null; p = p.next) {                if (o.equals(p.item)) {                    unlink(p);                    return true;                }            }            return false;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "removeLastOccurrence", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean removeLastOccurrence(Object o) {        if (o == null) return false;        final ReentrantLock lock = this.lock;        lock.lock();        try {            for (Node<E> p = last; p != null; p = p.prev) {                if (o.equals(p.item)) {                    unlink(p);                    return true;                }            }            return false;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["E"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(E e) {        addLast(e);        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "offer", "params": ["E"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean offer(E e) {        return offerLast(e);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["E"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void put(E e) throws InterruptedException {        putLast(e);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "offer", "params": ["E", "long", "TimeUnit"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean offer(E e, long timeout, TimeUnit unit)        throws InterruptedException {        return offerLast(e, timeout, unit);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "remove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E remove() {        return removeFirst();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "poll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E poll() {        return pollFirst();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "take", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "E", "snippet": "    public E take() throws InterruptedException {        return takeFirst();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "poll", "params": ["long", "TimeUnit"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "E", "snippet": "    public E poll(long timeout, TimeUnit unit) throws InterruptedException {        return pollFirst(timeout, unit);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "element", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E element() {        return getFirst();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "peek", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E peek() {        return peekFirst();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "remainingCapacity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int remainingCapacity() {        final ReentrantLock lock = this.lock;        lock.lock();        try {            return capacity - count;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "drainTo", "params": ["Collection<E>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int drainTo(Collection<? super E> c) {        return drainTo(c, Integer.MAX_VALUE);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "drainTo", "params": ["Collection<E>", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int drainTo(Collection<? super E> c, int maxElements) {        if (c == null)            throw new NullPointerException();        if (c == this)            throw new IllegalArgumentException();        final ReentrantLock lock = this.lock;        lock.lock();        try {            int n = Math.min(maxElements, count);            for (int i = 0; i < n; i++) {                c.add(first.item);   // In this order, in case add() throws.                unlinkFirst();            }            return n;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "push", "params": ["E"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void push(E e) {        addFirst(e);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "pop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "    public E pop() {        return removeFirst();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean remove(Object o) {        return removeFirstOccurrence(o);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int size() {        final ReentrantLock lock = this.lock;        lock.lock();        try {            return count;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "contains", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean contains(Object o) {        if (o == null) return false;        final ReentrantLock lock = this.lock;        lock.lock();        try {            for (Node<E> p = first; p != null; p = p.next)                if (o.equals(p.item))                    return true;            return false;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "toArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object[] toArray() {        final ReentrantLock lock = this.lock;        lock.lock();        try {            Object[] a = new Object[count];            int k = 0;            for (Node<E> p = first; p != null; p = p.next)                a[k++] = p.item;            return a;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "toArray", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T[] toArray(T[] a) {        final ReentrantLock lock = this.lock;        lock.lock();        try {            if (a.length < count)                a = (T[])java.lang.reflect.Array.newInstance                    (a.getClass().getComponentType(), count);            int k = 0;            for (Node<E> p = first; p != null; p = p.next)                a[k++] = (T)p.item;            if (a.length > k)                a[k] = null;            return a;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        final ReentrantLock lock = this.lock;        lock.lock();        try {            Node<E> p = first;            if (p == null)                return \"[]\";            StringBuilder sb = new StringBuilder();            sb.append('[');            for (;;) {                E e = p.item;                sb.append(e == this ? \"(this Collection)\" : e);                p = p.next;                if (p == null)                    return sb.append(']').toString();                sb.append(',').append(' ');            }        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        final ReentrantLock lock = this.lock;        lock.lock();        try {            for (Node<E> f = first; f != null; ) {                f.item = null;                Node<E> n = f.next;                f.prev = null;                f.next = null;                f = n;            }            first = last = null;            count = 0;            notFull.signalAll();        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "iterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Iterator<E>", "snippet": "    public Iterator<E> iterator() {        return new Itr();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "descendingIterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Iterator<E>", "snippet": "    public Iterator<E> descendingIterator() {        return new DescendingItr();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "writeObject", "params": ["java"], "throws": ["java.io.IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void writeObject(java.io.ObjectOutputStream s)        throws java.io.IOException {        final ReentrantLock lock = this.lock;        lock.lock();        try {            // Write out capacity and any hidden stuff            s.defaultWriteObject();            // Write out all elements in the proper order.            for (Node<E> p = first; p != null; p = p.next)                s.writeObject(p.item);            // Use trailing null as sentinel            s.writeObject(null);        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "readObject", "params": ["java"], "throws": ["java.io.IOException", "ClassNotFoundException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void readObject(java.io.ObjectInputStream s)        throws java.io.IOException, ClassNotFoundException {        s.defaultReadObject();        count = 0;        first = null;        last = null;        // Read in all elements and place in queue        for (;;) {            @SuppressWarnings(\"unchecked\")            E item = (E)s.readObject();            if (item == null)                break;            add(item);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "LinkedBlockingDeque", "extends": "AbstractQueue", "implements": ["BlockingDeque", "java"], "modifiers": ["public"]}}, {"method_name": "firstNode", "params": [], "throws": null, "modifiers": ["abstract"], "return_type": "Node<E>", "snippet": "        abstract Node<E> firstNode();        abstract Node<E> nextNode(Node<E> n);        AbstractItr() {            // set to initial position            final ReentrantLock lock = LinkedBlockingDeque.this.lock;            lock.lock();            try {                next = firstNode();                nextItem = (next == null) ? null : next.item;            } finally {                lock.unlock();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "AbstractItr", "extends": null, "implements": ["Iterator"], "modifiers": ["private", "abstract"]}}, {"method_name": "nextNode", "params": ["Node<E>"], "throws": null, "modifiers": ["abstract"], "return_type": "Node<E>", "snippet": "        abstract Node<E> nextNode(Node<E> n);        AbstractItr() {            // set to initial position            final ReentrantLock lock = LinkedBlockingDeque.this.lock;            lock.lock();            try {                next = firstNode();                nextItem = (next == null) ? null : next.item;            } finally {                lock.unlock();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "AbstractItr", "extends": null, "implements": ["Iterator"], "modifiers": ["private", "abstract"]}}, {"method_name": "succ", "params": ["Node<E>"], "throws": null, "modifiers": ["private"], "return_type": "Node<E>", "snippet": "        private Node<E> succ(Node<E> n) {            // Chains of deleted nodes ending in null or self-links            // are possible if multiple interior nodes are removed.            for (;;) {                Node<E> s = nextNode(n);                if (s == null)                    return null;                else if (s.item != null)                    return s;                else if (s == n)                    return firstNode();                else                    n = s;            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "AbstractItr", "extends": null, "implements": ["Iterator"], "modifiers": ["private", "abstract"]}}, {"method_name": "advance", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "        void advance() {            final ReentrantLock lock = LinkedBlockingDeque.this.lock;            lock.lock();            try {                // assert next != null;                next = succ(next);                nextItem = (next == null) ? null : next.item;            } finally {                lock.unlock();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "AbstractItr", "extends": null, "implements": ["Iterator"], "modifiers": ["private", "abstract"]}}, {"method_name": "hasNext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean hasNext() {            return next != null;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "AbstractItr", "extends": null, "implements": ["Iterator"], "modifiers": ["private", "abstract"]}}, {"method_name": "next", "params": [], "throws": null, "modifiers": ["public"], "return_type": "E", "snippet": "        public E next() {            if (next == null)                throw new NoSuchElementException();            lastRet = next;            E x = nextItem;            advance();            return x;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "AbstractItr", "extends": null, "implements": ["Iterator"], "modifiers": ["private", "abstract"]}}, {"method_name": "remove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void remove() {            Node<E> n = lastRet;            if (n == null)                throw new IllegalStateException();            lastRet = null;            final ReentrantLock lock = LinkedBlockingDeque.this.lock;            lock.lock();            try {                if (n.item != null)                    unlink(n);            } finally {                lock.unlock();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "AbstractItr", "extends": null, "implements": ["Iterator"], "modifiers": ["private", "abstract"]}}, {"method_name": "firstNode", "params": [], "throws": null, "modifiers": [], "return_type": "Node<E>", "snippet": "        Node<E> firstNode() { return first; }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "Itr", "extends": "AbstractItr", "implements": null, "modifiers": ["private"]}}, {"method_name": "nextNode", "params": ["Node<E>"], "throws": null, "modifiers": [], "return_type": "Node<E>", "snippet": "        Node<E> nextNode(Node<E> n) { return n.next; }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "Itr", "extends": "AbstractItr", "implements": null, "modifiers": ["private"]}}, {"method_name": "firstNode", "params": [], "throws": null, "modifiers": [], "return_type": "Node<E>", "snippet": "        Node<E> firstNode() { return last; }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "DescendingItr", "extends": "AbstractItr", "implements": null, "modifiers": ["private"]}}, {"method_name": "nextNode", "params": ["Node<E>"], "throws": null, "modifiers": [], "return_type": "Node<E>", "snippet": "        Node<E> nextNode(Node<E> n) { return n.prev; }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/deque/LinkedBlockingDeque.java", "stars": "74", "class": {"name": "DescendingItr", "extends": "AbstractItr", "implements": null, "modifiers": ["private"]}}, {"method_name": "handle", "params": ["HttpServletRequest", "HttpServletResponse", "AccessDeniedException"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void handle(HttpServletRequest request,                       HttpServletResponse response,                       AccessDeniedException e) throws IOException, ServletException {        response.setCharacterEncoding(\"UTF-8\");        response.setContentType(\"application/json\");        response.getWriter().println(JSONUtil.parse(CommonResult.forbidden(e.getMessage())));        response.getWriter().flush();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/component/RestfulAccessDeniedHandler.java", "stars": "2", "class": {"name": "RestfulAccessDeniedHandler", "extends": null, "implements": ["AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "furnaceFuelBurnTimeEvent", "params": ["FurnaceFuelBurnTimeEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void furnaceFuelBurnTimeEvent(FurnaceFuelBurnTimeEvent event) {\t\tif (event.getItemStack().getItem() == new ItemStack(DarkOakTanbarkBlock.block, (int) (1)).getItem())\t\t\tevent.setBurnTime(1600);\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/fuel/DarkOakFuel.java", "stars": "2", "class": {"name": "DarkOakFuel", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "precioMedioAutomovil", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int precioMedioAutomovil() {        return 9700000;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/O/Mercedes_O.java", "stars": "1", "class": {"name": "Mercedes_O", "extends": "AbsAutomovil_O", "implements": null, "modifiers": ["public"]}}, {"method_name": "numAsientos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int numAsientos() {        return 2;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/O/Mercedes_O.java", "stars": "1", "class": {"name": "Mercedes_O", "extends": "AbsAutomovil_O", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/call_setters_on_nulls/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/call_setters_on_nulls/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java", "stars": "15", "class": {"name": "CallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCallNullOnMappedProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCallNullOnMappedProperty() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserMapped(1);      Assertions.assertTrue(user.nullReceived);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java", "stars": "15", "class": {"name": "CallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCallNullOnAutomaticMapping", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCallNullOnAutomaticMapping() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserUnmapped(1);      Assertions.assertTrue(user.nullReceived);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java", "stars": "15", "class": {"name": "CallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCallNullOnMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCallNullOnMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Map user = mapper.getUserInMap(1);      Assertions.assertTrue(user.containsKey(\"NAME\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java", "stars": "15", "class": {"name": "CallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCallNullOnMapForSingleColumn", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCallNullOnMapForSingleColumn() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Map<String, Object>> oneColumns = mapper.getNameOnly();      // When callSetterOnNull is true, setters are called with null values      // but if all the values for an object are null      // the object itself should be null (same as default behaviour)      Assertions.assertNull(oneColumns.get(1));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java", "stars": "15", "class": {"name": "CallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCallNullOnMapForSingleColumnWithResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCallNullOnMapForSingleColumnWithResultMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Map<String, Object>> oneColumns = mapper.getNameOnlyMapped();      // Assertions.assertNotNull(oneColumns.get(1));      // TEST changed after fix for #307      // When callSetterOnNull is true, setters are called with null values      // but if all the values for an object are null      // the object itself should be null (same as default behaviour)      Assertions.assertNull(oneColumns.get(1));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java", "stars": "15", "class": {"name": "CallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws Exception {    tempFile = File.createTempFile(\"migration\", \"properties\");    tempFile.canWrite();    sourceFile = File.createTempFile(\"test1\", \"sql\");    destFile = File.createTempFile(\"test2\", \"sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java", "stars": "15", "class": {"name": "ExternalResourcesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testcopyExternalResource", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testcopyExternalResource() {    try {      ExternalResources.copyExternalResource(sourceFile, destFile);    } catch (IOException e) {    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java", "stars": "15", "class": {"name": "ExternalResourcesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testcopyExternalResource_fileNotFound", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testcopyExternalResource_fileNotFound() {    try {      badFile = new File(\"/tmp/nofile.sql\");      ExternalResources.copyExternalResource(badFile, destFile);    } catch (IOException e) {      assertTrue(e instanceof FileNotFoundException);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java", "stars": "15", "class": {"name": "ExternalResourcesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testcopyExternalResource_emptyStringAsFile", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testcopyExternalResource_emptyStringAsFile() {    try {      badFile = new File(\" \");      ExternalResources.copyExternalResource(badFile, destFile);    } catch (Exception e) {      assertTrue(e instanceof FileNotFoundException);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java", "stars": "15", "class": {"name": "ExternalResourcesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetConfiguredTemplate", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testGetConfiguredTemplate() {    String templateName = \"\";    try (FileWriter fileWriter = new FileWriter(tempFile)) {      fileWriter.append(\"new_command.template=templates/col_new_template_migration.sql\");      fileWriter.flush();      templateName = ExternalResources.getConfiguredTemplate(tempFile.getAbsolutePath(), \"new_command.template\");      assertEquals(\"templates/col_new_template_migration.sql\", templateName);    } catch (Exception e) {      fail(\"Test failed with execption: \" + e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java", "stars": "15", "class": {"name": "ExternalResourcesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "cleanUp", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void cleanUp() {    sourceFile.delete();    destFile.delete();    tempFile.delete();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java", "stars": "15", "class": {"name": "ExternalResourcesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createItem", "params": ["String", "String", "Double", "String", "Integer"], "throws": ["BusinessException"], "modifiers": ["public"], "return_type": "CommonReturnType", "snippet": "    public CommonReturnType createItem(@RequestParam(\"title\") String title, @RequestParam(\"description\") String description,                                        @RequestParam(\"price\") Double price, @RequestParam(\"imgUrl\") String imgUrl,                                        @RequestParam(\"stock\") Integer stock) throws BusinessException {        ItemModel itemModel = new ItemModel();        itemModel.setTitle(title);        itemModel.setDescription(description);        itemModel.setPrice(BigDecimal.valueOf(price));        itemModel.setImgUrl(imgUrl);        itemModel.setStock(stock);        itemModel = itemService.createItem(itemModel);        ItemVO itemVO = convertFromModel(itemModel);        return CommonReturnType.createSuccess(itemVO);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/ItemController.java", "stars": "1", "class": {"name": "ItemController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemById", "params": ["Integer"], "throws": ["BusinessException"], "modifiers": ["public"], "return_type": "CommonReturnType", "snippet": "    public CommonReturnType getItemById(@RequestParam(\"id\") Integer id) throws BusinessException {        ItemModel itemModel = itemService.getItemById(id);        if (itemModel == null) throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR);        return CommonReturnType.createSuccess(convertFromModel(itemModel));    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/ItemController.java", "stars": "1", "class": {"name": "ItemController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "listItems", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CommonReturnType", "snippet": "    public CommonReturnType listItems() {        List<ItemModel> itemModels = itemService.listItems();        List<ItemVO> itemVOs = itemModels.stream().map((itemModel) -> {            ItemVO itemVO = convertFromModel(itemModel);            return itemVO;        }).collect(Collectors.toList());        return CommonReturnType.createSuccess(itemVOs);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/ItemController.java", "stars": "1", "class": {"name": "ItemController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "convertFromModel", "params": ["ItemModel"], "throws": null, "modifiers": ["private"], "return_type": "ItemVO", "snippet": "    private ItemVO convertFromModel(ItemModel itemModel) {        if (itemModel == null) return null;        ItemVO itemVO = new ItemVO();        BeanUtils.copyProperties(itemModel, itemVO);        PromoModel promoModel = itemModel.getPromoModel();        if (promoModel != null) {            itemVO.setPromoId(promoModel.getId());            itemVO.setPromoStatus(promoModel.getStatus());            itemVO.setPromoPrice(promoModel.getPromoItemPrice());            itemVO.setStartDate(promoModel.getStartDate().toString(DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\")));        } else {            itemVO.setPromoStatus(PromoModel.STATUS_NO_PROMO);        }        return itemVO;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/ItemController.java", "stars": "1", "class": {"name": "ItemController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String get(Object key) {        for (int i = 0; i < cookies.length; i++) {            if(cookies[i].getName().equalsIgnoreCase(\"\" + key)){                return cookies[i].getValue();            }        }        return null;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/CookieContext.java", "stars": "13", "class": {"name": "CookieContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGreeting", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getGreeting() {\t\treturn this.greeting;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/ServiceProperties.java", "stars": "47572", "class": {"name": "ServiceProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGreeting", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setGreeting(String greeting) {\t\tthis.greeting = greeting;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/ServiceProperties.java", "stars": "47572", "class": {"name": "ServiceProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInputDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "\tpublic File getInputDir() {\t\treturn this.inputDir;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/ServiceProperties.java", "stars": "47572", "class": {"name": "ServiceProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setInputDir", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setInputDir(File inputDir) {\t\tthis.inputDir = inputDir;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/ServiceProperties.java", "stars": "47572", "class": {"name": "ServiceProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOutputDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "\tpublic File getOutputDir() {\t\treturn this.outputDir;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/ServiceProperties.java", "stars": "47572", "class": {"name": "ServiceProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOutputDir", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setOutputDir(File outputDir) {\t\tthis.outputDir = outputDir;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/ServiceProperties.java", "stars": "47572", "class": {"name": "ServiceProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "searchAtNumber", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int searchAtNumber(String str){        int n=0;        int length=coolQAt.length();        int index=str.indexOf(coolQAt);        while(index!=-1){            n++;            index=str.indexOf(coolQAt,index+length);        }        return n;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAtNumber", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getAtNumber(String str ,String robotQQ){        String[] src=str.split(\"\\\\[CQ:at,qq=\");        String s=null;        if(src[0].substring(0, robotQQ.length()).equals(robotQQ)){        }else {        }        return s;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "strToLong", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long strToLong(String str){        long p=0;        for (int i=0;i<str.length();i++){            if(str.charAt(i)>47&&str.charAt(i)<58){                p*=10;                p+=str.charAt(i)-48;                continue;            }            break;        }        return p;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVar", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getVar(String msg){        String work=msg.replace(\" \",\"\");        return work.substring(2);    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHurt", "params": ["String", "int"], "throws": ["NumberFormatException"], "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getHurt(String s, int flag) throws NumberFormatException {        String work = s.replaceAll(\" +\", \"\");        int i = 0;        switch (flag) {            case 1:                if (s.charAt(s.length() - 1) != 'w' && s.charAt(s.length() - 1) != 'W') {                    i = Integer.parseInt(work.substring(3));                } else {                    System.out.println();                    i = Integer.parseInt(work.substring(3, work.length() - 1)) * 10000;                }                break;            case 2:                if (s.charAt(s.length() - 1) != 'w' && s.charAt(s.length() - 1) != 'W') {                    i = Integer.parseInt(work.substring(work.indexOf(\"]\") + 1));                } else {                    System.out.println();                    i = Integer.parseInt(work.substring(work.indexOf(\"]\" + 1), work.length() - 1)) * 10000;                }                break;        }        return i;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "spiltByte", "params": ["byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int[] spiltByte(byte b) {        int i[] = new int[2];        i[1] = b / 16;        i[0] = (b - i[1] * 16);        return i;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "spiltByte", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int[] spiltByte(int b) {        int i[] = new int[2];        i[1] = b / 16;        i[0] = (b - i[1] * 16);        return i;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "respiltByte", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte respiltByte(int b, int c) {        return (byte) ((b * 16 + c) > 127 ? 127 - (b * 16 + c) : b * 16 + c);    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getChars", "params": ["Byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "char", "snippet": "    public static char[] getChars(Byte[] bytes) {        byte[] b = toPrimitives(bytes);        Charset cs = Charset.forName(\"UTF-8\");        ByteBuffer bb = ByteBuffer.allocate(bytes.length);        bb.put(b).flip();        CharBuffer cb = cs.decode(bb);        return cb.array();    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toPrimitives", "params": ["Byte"], "throws": null, "modifiers": ["static"], "return_type": "byte", "snippet": "    static byte[] toPrimitives(Byte[] oBytes) {        byte[] bytes = new byte[oBytes.length];        for (int i = 0; i < oBytes.length; i++) {            bytes[i] = oBytes[i];        }        return bytes;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/Tools/stringTool.java", "stars": "2", "class": {"name": "stringTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createLogFileName", "params": ["ExecutableNode", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createLogFileName(final ExecutableNode node, final int attempt) {    final int executionId = node.getExecutableFlow().getExecutionId();    String jobId = node.getId();    if (node.getExecutableFlow() != node.getParentFlow()) {      // Posix safe file delimiter      jobId = node.getPrintableId(\"._.\");    }    return attempt > 0 ? \"_job.\" + executionId + \".\" + attempt + \".\" + jobId        + \".log\" : \"_job.\" + executionId + \".\" + jobId + \".log\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createLogFileName", "params": ["ExecutableNode"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createLogFileName(final ExecutableNode node) {    return JobRunner.createLogFileName(node, node.getAttempt());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createMetaDataFileName", "params": ["ExecutableNode", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createMetaDataFileName(final ExecutableNode node, final int attempt) {    final int executionId = node.getExecutableFlow().getExecutionId();    String jobId = node.getId();    if (node.getExecutableFlow() != node.getParentFlow()) {      // Posix safe file delimiter      jobId = node.getPrintableId(\"._.\");    }    return attempt > 0 ? \"_job.\" + executionId + \".\" + attempt + \".\" + jobId        + \".meta\" : \"_job.\" + executionId + \".\" + jobId + \".meta\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createMetaDataFileName", "params": ["ExecutableNode"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createMetaDataFileName(final ExecutableNode node) {    return JobRunner.createMetaDataFileName(node, node.getAttempt());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createAttachmentFileName", "params": ["ExecutableNode"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createAttachmentFileName(final ExecutableNode node) {    return JobRunner.createAttachmentFileName(node, node.getAttempt());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createAttachmentFileName", "params": ["ExecutableNode", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createAttachmentFileName(final ExecutableNode node, final int attempt) {    final int executionId = node.getExecutableFlow().getExecutionId();    String jobId = node.getId();    if (node.getExecutableFlow() != node.getParentFlow()) {      // Posix safe file delimiter      jobId = node.getPrintableId(\"._.\");    }    return attempt > 0 ? \"_job.\" + executionId + \".\" + attempt + \".\" + jobId        + \".attach\" : \"_job.\" + executionId + \".\" + jobId + \".attach\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setValidatedProxyUsers", "params": ["Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setValidatedProxyUsers(final Set<String> proxyUsers) {    this.proxyUsers = proxyUsers;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setLogSettings", "params": ["Logger", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLogSettings(final Logger flowLogger, final String logFileChuckSize,      final int numLogBackup) {    this.flowLogger = flowLogger;    this.jobLogChunkSize = logFileChuckSize;    this.jobLogBackupIndex = numLogBackup;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getProps() {    return this.props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setPipeline", "params": ["FlowWatcher", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPipeline(final FlowWatcher watcher, final int pipelineLevel) {    this.watcher = watcher;    this.pipelineLevel = pipelineLevel;    if (this.pipelineLevel == 1) {      this.pipelineJobs.add(this.node.getNestedId());    } else if (this.pipelineLevel == 2) {      this.pipelineJobs.add(this.node.getNestedId());      final ExecutableFlowBase parentFlow = this.node.getParentFlow();      if (parentFlow.getEndNodes().contains(this.node.getId())) {        if (!parentFlow.getOutNodes().isEmpty()) {          final ExecutableFlowBase grandParentFlow = parentFlow.getParentFlow();          for (final String outNode : parentFlow.getOutNodes()) {            final ExecutableNode nextNode =                grandParentFlow.getExecutableNode(outNode);            // If the next node is a nested flow, then we add the nested            // starting nodes            if (nextNode instanceof ExecutableFlowBase) {              final ExecutableFlowBase nextFlow = (ExecutableFlowBase) nextNode;              findAllStartingNodes(nextFlow, this.pipelineJobs);            } else {              this.pipelineJobs.add(nextNode.getNestedId());            }          }        }      } else {        for (final String outNode : this.node.getOutNodes()) {          final ExecutableNode nextNode = parentFlow.getExecutableNode(outNode);          // If the next node is a nested flow, then we add the nested starting          // nodes          if (nextNode instanceof ExecutableFlowBase) {            final ExecutableFlowBase nextFlow = (ExecutableFlowBase) nextNode;            findAllStartingNodes(nextFlow, this.pipelineJobs);          } else {            this.pipelineJobs.add(nextNode.getNestedId());          }        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "findAllStartingNodes", "params": ["ExecutableFlowBase", "Set<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void findAllStartingNodes(final ExecutableFlowBase flow,      final Set<String> pipelineJobs) {    for (final String startingNode : flow.getStartNodes()) {      final ExecutableNode node = flow.getExecutableNode(startingNode);      if (node instanceof ExecutableFlowBase) {        findAllStartingNodes((ExecutableFlowBase) node, pipelineJobs);      } else {        pipelineJobs.add(node.getNestedId());      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getPipelineWatchedJobs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getPipelineWatchedJobs() {    return this.pipelineJobs;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getDelayStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getDelayStart() {    return this.delayStartMs;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setDelayStart", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDelayStart(final long delayMS) {    this.delayStartMs = delayMS;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getNode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecutableNode", "snippet": "  public ExecutableNode getNode() {    return this.node;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getJobId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobId() {    return this.node.getId();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getLogFilePath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLogFilePath() {    return this.logFile == null ? null : this.logFile.getPath();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createLogger", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void createLogger() {    // Create logger    synchronized (logCreatorLock) {      final String loggerName =          System.currentTimeMillis() + \".\" + this.executionId + \".\"              + this.jobId;      this.logger = Logger.getLogger(loggerName);      try {        attachFileAppender(createFileAppender());      } catch (final IOException e) {        removeAppender(this.jobAppender);        this.flowLogger.error(\"Could not open log file in \" + this.workingDir            + \" for job \" + this.jobId, e);      }      if (this.props.getBoolean(Constants.JobProperties.AZKABAN_JOB_LOGGING_KAFKA_ENABLE, false)) {        // Only attempt appender construction if required properties are present        if (this.azkabanProps            .containsKey(Constants.ConfigurationKeys.AZKABAN_SERVER_LOGGING_KAFKA_BROKERLIST)            && this.azkabanProps            .containsKey(Constants.ConfigurationKeys.AZKABAN_SERVER_LOGGING_KAFKA_TOPIC)) {          try {            attachKafkaAppender(createKafkaAppender());          } catch (final Exception e) {            removeAppender(this.kafkaAppender);            this.flowLogger.error(\"Failed to create Kafka appender for job \" + this.jobId, e);          }        } else {          this.flowLogger.info(              \"Kafka appender not created as brokerlist or topic not provided by executor server\");        }      }    }    final String externalViewer = ExternalLinkUtils        .getExternalLogViewer(this.azkabanProps, this.jobId,            this.props);    if (!externalViewer.isEmpty()) {      this.logger.info(\"If you want to leverage AZ ELK logging support, you need to follow the \"          + \"instructions: http://azkaban.github.io/azkaban/docs/latest/#how-to\");      this.logger.info(\"If you did the above step, see logs at: \" + externalViewer);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "attachFileAppender", "params": ["FileAppender"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void attachFileAppender(final FileAppender appender) {    // If present, remove the existing file appender    assert (this.jobAppender == null);    this.jobAppender = appender;    this.logger.addAppender(this.jobAppender);    this.logger.setAdditivity(false);    this.flowLogger.info(\"Attached file appender for job \" + this.jobId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createFileAppender", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "FileAppender", "snippet": "  private FileAppender createFileAppender() throws IOException {    // Set up log files    final String logName = createLogFileName(this.node);    this.logFile = new File(this.workingDir, logName);    final String absolutePath = this.logFile.getAbsolutePath();    this.flowLogger.info(\"Log file path for job: \" + this.jobId + \" is: \" + absolutePath);    // Attempt to create FileAppender    final RollingFileAppender fileAppender =        new RollingFileAppender(this.loggerLayout, absolutePath, true);    fileAppender.setMaxBackupIndex(this.jobLogBackupIndex);    fileAppender.setMaxFileSize(this.jobLogChunkSize);    // FIXME\u00a0Added log filtering.    addFilter(fileAppender);    this.flowLogger.info(\"Created file appender for job \" + this.jobId);    return fileAppender;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "addFilter", "params": ["RollingFileAppender"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addFilter(RollingFileAppender fileAppender){    try {      List<LogFilterEntity> logFilterEntities = loader.listAllLogFilter().stream()          .filter(x -> x.getOperateType() == OperateType.REMOVE_ALL).collect(Collectors.toList());      fileAppender.addFilter(new Filter() {        @Override        public int decide(LoggingEvent loggingEvent) {          for (LogFilterEntity entity: logFilterEntities){            if(loggingEvent.getMessage().toString().contains(entity.getCompareText())){              return -1;            }          }          return 0;        }      });    } catch (Exception e){      this.flowLogger.error(\"\u8bbe\u7f6e\u65e5\u5fd7\u8fc7\u6ee4\u5931\u8d25\" + e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createAttachmentFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void createAttachmentFile() {    final String fileName = createAttachmentFileName(this.node);    final File file = new File(this.workingDir, fileName);    this.attachmentFileName = file.getAbsolutePath();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "attachKafkaAppender", "params": ["KafkaLog4jAppender"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void attachKafkaAppender(final KafkaLog4jAppender appender) {    // This should only be called once    assert (!this.kafkaAppender.isPresent());    this.kafkaAppender = Optional.of(appender);    this.logger.addAppender(this.kafkaAppender.get());    this.logger.setAdditivity(false);    this.flowLogger.info(\"Attached new Kafka appender for job \" + this.jobId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createKafkaAppender", "params": [], "throws": ["UndefinedPropertyException"], "modifiers": ["private"], "return_type": "KafkaLog4jAppender", "snippet": "  private KafkaLog4jAppender createKafkaAppender() throws UndefinedPropertyException {    final KafkaLog4jAppender kafkaProducer = new KafkaLog4jAppender();    kafkaProducer.setSyncSend(false);    kafkaProducer.setBrokerList(this.azkabanProps        .getString(Constants.ConfigurationKeys.AZKABAN_SERVER_LOGGING_KAFKA_BROKERLIST));    kafkaProducer.setTopic(        this.azkabanProps            .getString(Constants.ConfigurationKeys.AZKABAN_SERVER_LOGGING_KAFKA_TOPIC));    final String layoutString = LogUtil.createLogPatternLayoutJsonString(this.props, this.jobId);    kafkaProducer.setLayout(new PatternLayoutEscaped(layoutString));    kafkaProducer.activateOptions();    this.flowLogger.info(\"Created kafka appender for \" + this.jobId);    return kafkaProducer;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "removeAppender", "params": ["Optional<Appender>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void removeAppender(final Optional<Appender> appender) {    if (appender.isPresent()) {      removeAppender(appender.get());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "removeAppender", "params": ["Appender"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void removeAppender(final Appender appender) {    if (appender != null) {      this.logger.removeAppender(appender);      appender.close();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "closeLogger", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void closeLogger() {    if (this.jobAppender != null) {      removeAppender(this.jobAppender);    }    if (this.kafkaAppender.isPresent()) {      removeAppender(this.kafkaAppender);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "writeStatus", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void writeStatus() {    try {      this.node.setUpdateTime(System.currentTimeMillis());      this.loader.updateExecutableNode(this.node);    } catch (final ExecutorManagerException e) {      this.flowLogger.error(\"Could not update job properties in db for \"          + this.jobId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handleNonReadyStatus", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean handleNonReadyStatus() {    synchronized (this.syncObject) {      Status nodeStatus = this.node.getStatus();      boolean quickFinish = false;      final long time = System.currentTimeMillis();      if (Status.isStatusFinished(nodeStatus)) {        serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", status is \" + nodeStatus);        quickFinish = true;      } else if (nodeStatus == Status.DISABLED) {        serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", disabled\");        nodeStatus = changeStatus(Status.SKIPPED, time);        quickFinish = true;      } else if (this.isKilled()) {        serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", was being killed\");        nodeStatus = changeStatus(Status.KILLED, time);        quickFinish = true;      // FIXME\u00a0Added judgment conditions to determine whether the job has been skipped.      } else if(this.isSkipped()){        nodeStatus = changeStatus(Status.SKIPPED, time);        quickFinish = true;      }      if (quickFinish) {        this.node.setStartTime(time);        fireEvent(            Event.create(this, EventType.JOB_STARTED,                new EventData(nodeStatus, this.node.getNestedId())));        this.node.setEndTime(time);        fireEvent(            Event                .create(this, EventType.JOB_FINISHED,                    new EventData(nodeStatus, this.node.getNestedId())));        serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", quick Finish\");        return true;      }      return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "blockOnPipeLine", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean blockOnPipeLine() {    // FIXME\u00a0Added judgment conditions to determine whether the job has been skipped.    if (this.isKilled() || this.isSkipped()) {      serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", has been killed.\");      return true;    }    // For pipelining of jobs. Will watch other jobs.    if (!this.pipelineJobs.isEmpty()) {      String blockedList = \"\";      final ArrayList<BlockingStatus> blockingStatus =          new ArrayList<>();      for (final String waitingJobId : this.pipelineJobs) {        final Status status = this.watcher.peekStatus(waitingJobId);        if (status != null && !Status.isStatusFinished(status)) {          final BlockingStatus block = this.watcher.getBlockingStatus(waitingJobId);          blockingStatus.add(block);          blockedList += waitingJobId + \",\";        }      }      if (!blockingStatus.isEmpty()) {        this.logger.info(\"Pipeline job \" + this.jobId + \" waiting on \" + blockedList            + \" in execution \" + this.watcher.getExecId());        serverLogger.info(\"Pipeline job \" + this.jobId + \" waiting on \" + blockedList                + \" in execution \" + this.watcher.getExecId());        for (final BlockingStatus bStatus : blockingStatus) {          this.logger.info(\"Waiting on pipelined job \" + bStatus.getJobId());          serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \",Waiting on pipelined job \" + bStatus.getJobId());          this.currentBlockStatus = bStatus;          bStatus.blockOnFinishedStatus();          // FIXME\u00a0Added judgment conditions to determine whether the job has been skipped.          if (this.isKilled() || this.isSkipped()) {            this.logger.info(\"Job was killed or skipped while waiting on pipeline. Quiting.\");            return true;          } else {            this.logger.info(\"Pipelined job \" + bStatus.getJobId() + \" finished.\");          }        }      }    }    this.currentBlockStatus = null;    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "delayExecution", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean delayExecution() {    synchronized (this) {      // FIXME\u00a0Added judgment conditions to determine whether the job has been skipped.      if (this.isKilled() || this.isSkipped()) {        serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", has been killed.\");        return true;      }      final long currentTime = System.currentTimeMillis();      if (this.delayStartMs > 0) {        this.logger.info(\"Delaying start of execution for \" + this.delayStartMs            + \" milliseconds.\");        try {          this.wait(this.delayStartMs);          this.logger.info(\"Execution has been delayed for \" + this.delayStartMs              + \" ms. Continuing with execution.\");        } catch (final InterruptedException e) {          this.logger.error(\"Job \" + this.jobId + \" was to be delayed for \"              + this.delayStartMs + \". Interrupted after \"              + (System.currentTimeMillis() - currentTime));        }        // FIXME\u00a0Added judgment conditions to determine whether the job has been skipped.        if (this.isKilled() || this.isSkipped()) {          this.logger.info(\"Job was killed or skipped while in delay. Quiting.\");          return true;        }      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "finalizeLogFile", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void finalizeLogFile(final int attemptNo) {    closeLogger();    if (this.logFile == null) {      this.flowLogger.info(\"Log file for job \" + this.jobId + \" is null\");      return;    }    try {      final File[] files = this.logFile.getParentFile().listFiles(new FilenameFilter() {        @Override        public boolean accept(final File dir, final String name) {          return name.startsWith(JobRunner.this.logFile.getName());        }      });      Arrays.sort(files, Collections.reverseOrder());      this.loader.uploadLogFile(this.executionId, this.node.getNestedId(), attemptNo,          files);    } catch (final ExecutorManagerException e) {      this.flowLogger.error(          \"Error writing out logs for job \" + this.node.getNestedId(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "finalizeAttachmentFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void finalizeAttachmentFile() {    if (this.attachmentFileName == null) {      this.flowLogger.info(\"Attachment file for job \" + this.jobId + \" is null\");      return;    }    try {      final File file = new File(this.attachmentFileName);      if (!file.exists()) {        this.flowLogger.info(\"No attachment file for job \" + this.jobId            + \" written.\");        return;      }      this.loader.uploadAttachmentFile(this.node, file);    } catch (final ExecutorManagerException e) {      this.flowLogger.error(          \"Error writing out attachment for job \" + this.node.getNestedId(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() {    try {      doRun();    } catch (final Exception e) {      serverLogger.error(\"Unexpected exception\", e);      throw e;    }    serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", finished.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "doRun", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void doRun() {    Thread.currentThread().setName(        \"JobRunner-\" + this.jobId + \"-\" + this.executionId);    // If the job is cancelled, disabled, killed. No log is created in this case    if (handleNonReadyStatus()) {      return;    }    createAttachmentFile();    createLogger();    serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", createLogger.\");    boolean errorFound = false;    // Delay execution if necessary. Will return a true if something went wrong.    errorFound |= delayExecution();    serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", delayExecution.\");    // For pipelining of jobs. Will watch other jobs. Will return true if    // something went wrong.    errorFound |= blockOnPipeLine();    serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", blockOnPipeLine.\");    // Start the node.    this.node.setStartTime(System.currentTimeMillis());    Status finalStatus = this.node.getStatus();    uploadExecutableNode();    serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", uploadExecutableNode.\");    Props inputProps = this.node.getInputProps();    if(inputProps.containsKey(JOB_FAILED_RETRY_COUNT)        && inputProps.containsKey(JOB_FAILED_RETRY_INTERVAL)){      this.restartFaildOpen = true;    }    finalStatus = jobRunHandle(errorFound, finalStatus, this.restartFaildOpen);    serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", jobRunHandle.\");\t// FIXME\u00a0New function, when task execution fails, it will be re-executed according to the set parameters.    if(this.restartFaildOpen){      try {        restartFailedJobHandle(errorFound, finalStatus, this.restartFaildOpen);      } catch (Exception e) {        logger.error(\"job rerun Exception.\", e);        if(this.props.get(\"azkaban.failureAction\") != null                && this.props.get(\"azkaban.failureAction\").equals(\"FAILED_PAUSE\")) {          finalStatus = changeStatus(Status.FAILED_WAITING);        } else {          finalStatus = changeStatus(Status.FAILED);        }      }    }    serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", run job end.\");    // change FAILED_RETRYING status to FAILED    if(this.node.getStatus().equals(Status.FAILED_RETRYING)){      logger.info(\"execId: \" + executionId + \", node: \" +  this.node.getId() + \", set status FAILED_RETRYING.\");      finalStatus = changeStatus(Status.FAILED);    }    // FIXME\u00a0New feature. If the task is set to fail skip, you need to change the status to FAILED_SKIPPED when the task fails.    if((this.node.getStatus().equals(Status.FAILED))            && this.props.get(\"azkaban.jobSkipFailed\") != null            && this.props.get(\"azkaban.jobSkipFailed\").equals(this.node.getId())){      serverLogger.info(\"execId: \" + executionId + \", node: \" +  this.node.getId() + \", \u9884\u8bbe\u7f6e\u4e86\u5931\u8d25\u8df3\u8fc7.\");      logger.info(\"execId: \" + executionId + \", node: \" +  this.node.getId() + \", \u9884\u8bbe\u7f6e\u4e86\u5931\u8d25\u8df3\u8fc7.\");      finalStatus = changeStatus(Status.FAILED_SKIPPED);    }    serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", FAILED_SKIPPED.\");    // FIXME\u00a0New function, if the job stream is set to fail pause mode, when the task fails, the status needs to be changed to FAILED_WAITING    if(this.node.getStatus().equals(Status.FAILED) &&            this.props.get(\"azkaban.failureAction\") != null            && this.props.get(\"azkaban.failureAction\").equals(\"FAILED_PAUSE\")) {      logger.info(\"execId: \" + executionId + \", node: \" +  this.node.getId() + \", \u9884\u8bbe\u7f6e\u4e86\u5931\u8d25\u6682\u505c.\");      finalStatus = changeStatus(Status.FAILED_WAITING);    }    this.node.setEndTime(System.currentTimeMillis());    // FIXME\u00a0Added judgment conditions to determine whether the job has been skipped.    if(isSkipped()){      logger.info(\"execId: \" + executionId + \", node: \" +  this.node.getId() + \", set status SKIPPED.\");      finalStatus = changeStatus(Status.SKIPPED);    }    if (isKilled()) {      serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", isKilled().\");      // even if it's killed, there is a chance that the job failed is marked as      // failure,      // So we set it to KILLED to make sure we know that we forced kill it      // rather than      // it being a legitimate failure.      logInfo(\"execId: \" + executionId + \", node: \" +  this.node.getId() + \", status: \" + this.node.getStatus());      finalStatus = changeStatus(Status.KILLED);    }    logInfo(        \"Finishing job \" + this.jobId + getNodeRetryLog() + \" at \" + this.node.getEndTime()            + \" with status \" + this.node.getStatus());    try {      finalizeLogFile(this.node.getAttempt());      finalizeAttachmentFile();      writeStatus();    } finally {      serverLogger.info(\"execId:\" + this.executionId + \",node:\" + node.getNestedId() + \", status: \" + finalStatus);      // note that FlowRunner thread does node.attempt++ when it receives the JOB_FINISHED event      fireEvent(Event.create(this, EventType.JOB_FINISHED,          new EventData(finalStatus, this.node.getNestedId())), false);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getNodeRetryLog", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getNodeRetryLog() {    return this.node.getAttempt() > 0 ? (\" retry: \" + this.node.getAttempt()) : \"\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "uploadExecutableNode", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void uploadExecutableNode() {    try {      this.loader.uploadExecutableNode(this.node, this.props);    } catch (final ExecutorManagerException e) {      this.logger.error(\"Error writing initial node properties\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "prepareJob", "params": [], "throws": ["RuntimeException"], "modifiers": ["private"], "return_type": "Status", "snippet": "  private Status prepareJob() throws RuntimeException {    // Check pre conditions    // FIXME\u00a0Added judgment conditions to determine whether the job has been skipped.    if (this.props == null || this.isKilled() || this.isSkipped()) {      logError(\"Failing job. The job properties don't exist\");      return null;    }    final Status finalStatus;    synchronized (this.syncObject) {      if ((this.node.getStatus() == Status.FAILED && !this.restartFailed) || this.isKilled() || this.isSkipped()) {        return null;      }      logInfo(\"Starting job \" + this.jobId + getNodeRetryLog() + \" at \" + this.node.getStartTime());      // If it's an embedded flow, we'll add the nested flow info to the job      // conf      if (this.node.getExecutableFlow() != this.node.getParentFlow()) {        final String subFlow = this.node.getPrintableId(\":\");        this.props.put(CommonJobProperties.NESTED_FLOW_PATH, subFlow);      }      insertJobMetadata();      insertJVMAargs();      this.props.put(CommonJobProperties.JOB_ID, this.jobId);      this.props.put(CommonJobProperties.JOB_ATTEMPT, this.node.getAttempt());      this.props.put(CommonJobProperties.JOB_METADATA_FILE,          createMetaDataFileName(this.node));      this.props.put(CommonJobProperties.JOB_ATTACHMENT_FILE, this.attachmentFileName);      this.props.put(CommonJobProperties.JOB_LOG_FILE, this.logFile.getAbsolutePath());      finalStatus = changeStatus(Status.RUNNING);      // \u5982\u679cjob\u4f7f\u7528\u4e86flow.dir\u53c2\u6570\uff0c\u83b7\u53d6\u5de5\u4f5c\u6d41\u6267\u884c\u6839\u76ee\u5f55      if (!this.props.containsKey(\"flow.dir\")) {        this.props.put(\"flow.dir\", this.node.getInputProps().get(\"flow.dir\"));      }      // Ability to specify working directory      if (!this.props.containsKey(AbstractProcessJob.WORKING_DIR)) {        this.props.put(AbstractProcessJob.WORKING_DIR, this.workingDir.getAbsolutePath());      }      //\u6821\u9a8cJob\u4e2d\u914d\u7f6e\u7684\u4ee3\u7406\u7528\u6237\u662f\u5426\u7b26\u5408\u7528\u6237\u914d\u7f6e      if (this.props.containsKey(JobProperties.USER_TO_PROXY)) {        final String jobProxyUser = this.props.getString(JobProperties.USER_TO_PROXY);        // user.xml \u914d\u7f6e\u7684 Proxy \u8ddf job\u4e2d\u7684\u4e0d\u4e00\u81f4\uff0c \u5e76\u4e14 Proxy \u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32        if (this.proxyUsers != null && !this.proxyUsers.contains(jobProxyUser) && !proxyUsers.isEmpty()) {          final String permissionsPageURL = getProjectPermissionsURL();          this.logger.error(\"\u4ee3\u7406\u7528\u6237 \" + jobProxyUser              + \" \u6c92\u6709\u6743\u9650\u6267\u884c\u5f53\u524d\u4efb\u52a1 \" + this.jobId + \"!\"              + \" \u5982\u679c\u60f3\u4f7f\u7528\u4ee3\u7406\u7528\u6237 \" + jobProxyUser + \" \u6267\u884cJob \"              + \", \u8bf7\u8054\u7cfb\u7cfb\u7edf\u7ba1\u7406\u5458\u4e3a\u60a8\u7684\u7528\u6237\u6dfb\u52a0\u8be5\u4ee3\u7406\u7528\u6237\u3002 \");              //permissionsPageURL);          return null;        // FIXME\u00a0Added judgment that user.xml configures Proxy as an empty string is inconsistent with the job and Proxy is not an empty string        }else if(proxyUsers.isEmpty() && !jobProxyUser.equals(this.node.getExecutableFlow().getSubmitUser())){          this.logger.error(\"\u4ee3\u7406\u7528\u6236 \" + jobProxyUser + \" \u6c92\u6709\u6743\u9650\u6267\u884c\u5f53\u524d\u4efb\u52a1 \" + this.jobId + \"!\"              + \"\u8bf7\u8054\u7cfb\u7cfb\u7edf\u7ba1\u7406\u5458\u4e3a\u60a8\u7684\u7528\u6237\u6dfb\u52a0\u8be5\u4ee3\u7406\u7528\u6237\u3002\");          return null;        }      } else {        final String submitUser = this.getNode().getExecutableFlow().getSubmitUser();        this.props.put(JobProperties.USER_TO_PROXY, submitUser);//        this.logger.info(\"user.to.proxy property was not set, defaulting to submit user \" +//            submitUser);        this.logger.info(\"user.to.proxy \u53c2\u6570\u672a\u8bbe\u7f6e, \u9ed8\u8ba4\u4f7f\u7528\u9879\u76ee\u63d0\u4ea4\u7528\u6237\u6267\u884c \" + submitUser);      }      try {        this.job = this.jobtypeManager.buildJobExecutor(this.jobId, this.props, this.logger);      } catch (final JobTypeManagerException e) {        this.logger.error(\"Failed to build job type\", e);        return null;      }    }    return finalStatus;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getProjectPermissionsURL", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getProjectPermissionsURL() {    String projectPermissionsURL = null;    final String baseURL = this.azkabanProps.get(AZKABAN_WEBSERVER_URL);    if (baseURL != null) {      final String projectName = this.node.getParentFlow().getProjectName();      projectPermissionsURL = String          .format(\"%s/manager?project=%s&permissions\", baseURL, projectName);    }    return projectPermissionsURL;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "insertJVMAargs", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void insertJVMAargs() {    final String flowName = this.node.getParentFlow().getFlowId();    final String jobId = this.node.getId();    String jobJVMArgs =        String.format(            \"-Dazkaban.flowid=%s -Dazkaban.execid=%s -Dazkaban.jobid=%s\",            flowName, this.executionId, jobId);    final String previousJVMArgs = this.props.get(JavaProcessJob.JVM_PARAMS);    jobJVMArgs += (previousJVMArgs == null) ? \"\" : \" \" + previousJVMArgs;    this.logger.info(\"job JVM args: \" + jobJVMArgs);    this.props.put(JavaProcessJob.JVM_PARAMS, jobJVMArgs);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "insertJobMetadata", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void insertJobMetadata() {    final String baseURL = this.azkabanProps.get(AZKABAN_WEBSERVER_URL);    if (baseURL != null) {      final String flowName = this.node.getParentFlow().getFlowId();      final String projectName = this.node.getParentFlow().getProjectName();      this.props.put(CommonJobProperties.AZKABAN_URL, baseURL);      this.props.put(CommonJobProperties.EXECUTION_LINK,          String.format(\"%s/executor?execid=%d\", baseURL, this.executionId));      this.props.put(CommonJobProperties.JOBEXEC_LINK, String.format(          \"%s/executor?execid=%d&job=%s\", baseURL, this.executionId, this.jobId));      this.props.put(CommonJobProperties.ATTEMPT_LINK, String.format(          \"%s/executor?execid=%d&job=%s&attempt=%d\", baseURL, this.executionId,          this.jobId, this.node.getAttempt()));      this.props.put(CommonJobProperties.WORKFLOW_LINK, String.format(          \"%s/manager?project=%s&flow=%s\", baseURL, projectName, flowName));      this.props.put(CommonJobProperties.JOB_LINK, String.format(          \"%s/manager?project=%s&flow=%s&job=%s\", baseURL, projectName,          flowName, this.jobId));    } else {      if (this.logger != null) {        this.logger.info(AZKABAN_WEBSERVER_URL + \" property was not set\");      }    }    // out nodes    this.props.put(CommonJobProperties.OUT_NODES,        StringUtils.join2(this.node.getOutNodes(), \",\"));    // in nodes    this.props.put(CommonJobProperties.IN_NODES,        StringUtils.join2(this.node.getInNodes(), \",\"));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "runJob", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Status", "snippet": "  private Status runJob() {    Status finalStatus;    try {      this.job.run();      finalStatus = this.node.getStatus();    } catch (final Throwable e) {      synchronized (this.syncObject) {        if (this.props.getBoolean(\"job.succeed.on.failure\", false)) {          finalStatus = changeStatus(Status.FAILED_SUCCEEDED);          logError(\"Job run failed, but will treat it like success.\");          logError(e.getMessage() + \" cause: \" + e.getCause(), e);        } else {          if (isKilled() || this.node.getStatus() == Status.KILLED) {            finalStatus = Status.KILLED;            logError(\"Job run killed!\", e);\t\t\t    // FIXME\u00a0Determine if the task has been closed for execution.          } else if (isSkipped()) {            finalStatus = Status.SKIPPED;            logError(\"Job run SKIPPED!\", e);\t\t\t    // FIXME\u00a0Determine if the task is set to retry.          } else if (this.restartFaildOpen){            finalStatus = changeStatus(Status.FAILED_RETRYING);            writeStatus();            fireEvent(Event.create(this, EventType.JOB_STATUS_CHANGED,                    new EventData(finalStatus, this.node.getNestedId())));            logError(\"Job run failed_retrying!\", e);          } else {            finalStatus = changeStatus(Status.FAILED);            logError(\"Job run failed!\", e);          }          logError(e.getMessage() + \" cause: \" + e.getCause());        }      }    }    if (this.job != null) {      this.node.setOutputProps(this.job.getJobGeneratedProperties());    }    synchronized (this.syncObject) {      // If the job is still running (but not killed), set the status to Success.      if (!Status.isStatusFinished(finalStatus) && !isKilled()) {        if(!finalStatus.equals(Status.FAILED_RETRYING)) {          logInfo(\"Job run succeeded/retried_succeeded.\");          // FIXME\u00a0The task status is RETRIED_SUCCEEDED after successful retry execution.          if(this.retryConut != 0 || this.node.getAttempt() != 0){            finalStatus = changeStatus(Status.RETRIED_SUCCEEDED);          } else {            finalStatus = changeStatus(Status.SUCCEEDED);          }        }      }    }    return finalStatus;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "changeStatus", "params": ["Status"], "throws": null, "modifiers": ["private"], "return_type": "Status", "snippet": "  private Status changeStatus(final Status status) {    changeStatus(status, System.currentTimeMillis());    return status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "changeStatus", "params": ["Status", "long"], "throws": null, "modifiers": ["private"], "return_type": "Status", "snippet": "  private Status changeStatus(final Status status, final long time) {    this.node.setStatus(status);    this.node.setUpdateTime(time);    return status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "fireEvent", "params": ["Event"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void fireEvent(final Event event) {    fireEvent(event, true);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "fireEvent", "params": ["Event", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void fireEvent(final Event event, final boolean updateTime) {    if (updateTime) {      this.node.setUpdateTime(System.currentTimeMillis());    }    this.fireEventListeners(event);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "killBySLA", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void killBySLA() {    synchronized (this.syncObject) {      kill();      this.getNode().setKilledBySLA(true);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "kill", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void kill() {    synchronized (this.syncObject) {      if (Status.isStatusFinished(this.node.getStatus()) || this.node.getStatus().equals(Status.FAILED_WAITING)) {        logInfo(\"this job is finished. \" + node.getNestedId());        serverLogger.info(\"this job is finished. \" + node.getNestedId());        return;      }      logError(\"Kill has been called.\");      serverLogger.warn(\"execId : \" + executionId + \" ,job: \" + node.getNestedId() + \", Kill has been called.\");      this.changeStatus(Status.KILLING);      this.killed = true;      handleKill();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "skippedJob", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void skippedJob(String user){    synchronized (this.syncObject) {      logError(\"User \" + user + \" used skip execution, job: \" + node.getNestedId());      if (Status.isStatusFinished(this.node.getStatus()) || this.node.getStatus().equals(Status.FAILED_WAITING)) {        logInfo(\"this job is finished. \" + node.getNestedId());        serverLogger.info(\"this job is finished. \" + node.getNestedId());        return;      }      serverLogger.warn(\"User \" + user + \" used skip execution, job: \" + node.getNestedId());      this.changeStatus(Status.DISABLED);      this.skipped = true;      handleKill();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handleKill", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleKill(){    final BlockingStatus status = this.currentBlockStatus;    if (status != null) {      status.unblock();    }    // Cancel code here    if (this.job == null) {      serverLogger.warn( node.getNestedId() + \", Job hasn't started yet.\");      logError(\"Job hasn't started yet.\");      // Just in case we're waiting on the delay      synchronized (this) {        this.notify();      }      return;    }    try {      this.job.cancel();    } catch (final Exception e) {      serverLogger.error( node.getNestedId() + \": \" + e.getMessage());      logError(e.getMessage());      logError(          \"Failed trying to cancel job. Maybe it hasn't started running yet or just finished.\");      serverLogger.error( node.getNestedId() + \", Failed trying to cancel job. Maybe it hasn't started running yet or just finished.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isKilled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isKilled() {    return this.killed;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isSkipped", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isSkipped() {    return this.skipped;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status getStatus() {    return this.node.getStatus();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "logError", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void logError(final String message) {    if (this.logger != null) {      this.logger.error(message);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "logError", "params": ["String", "Throwable"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void logError(final String message, final Throwable t) {    if (this.logger != null) {      this.logger.error(message, t);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "logInfo", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void logInfo(final String message) {    if (this.logger != null) {      this.logger.info(message);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getLogFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File getLogFile() {    return this.logFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getLogger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Logger", "snippet": "  public Logger getLogger() {    return this.logger;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "jobRunHandle", "params": ["boolean", "Status", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "Status", "snippet": "  private Status jobRunHandle(boolean errorFound, Status finalStatus, boolean restartFailed){//    // Start the node.    this.node.setStartTime(System.currentTimeMillis());//    Status finalStatus = this.node.getStatus();//    //\u66f4\u65b0\u6570\u636e\u5e93\u4e2dJob\u7684\u72b6\u6001\u4fe1\u606f//    uploadExecutableNode();    if (!errorFound && !isKilled() && !isSkipped()) {      fireEvent(Event.create(this, EventType.JOB_STARTED, new EventData(this.node)));      // status queue -> running      final Status prepareStatus = prepareJob();      if (prepareStatus != null) {        // Writes status to the db        writeStatus();        fireEvent(Event.create(this, EventType.JOB_STATUS_CHANGED,            new EventData(prepareStatus, this.node.getNestedId())));        finalStatus = runJob();      } else {        if(!restartFailed){          finalStatus = changeStatus(Status.FAILED);          logError(\"Job run failed preparing the job.\");        } else {          finalStatus = changeStatus(Status.FAILED_RETRYING);          writeStatus();          fireEvent(Event.create(this, EventType.JOB_STATUS_CHANGED,                  new EventData(finalStatus, this.node.getNestedId())));          logError(\"Job run failed_retrying preparing the job.\");        }      }    }    return finalStatus;    //this.node.setEndTime(System.currentTimeMillis());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "restartFailedJobHandle", "params": ["boolean", "Status", "boolean"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void restartFailedJobHandle(boolean errorFound, Status finalStatus, boolean restartFailed)      throws Exception {    Props inputProps = this.node.getInputProps();    if(restartFailed && Status.FAILED.equals(finalStatus) || Status.FAILED_RETRYING.equals(finalStatus)){      int count = 0;      int interval = 0;      try {        String restartCount = inputProps.getString(JOB_FAILED_RETRY_COUNT).trim();        String restartInterval = inputProps.getString(JOB_FAILED_RETRY_INTERVAL).trim();        if(NUM_PATTERN.matcher(restartCount).matches() && NUM_PATTERN.matcher(restartInterval).matches()){          count = Integer.valueOf(restartCount);          interval = Integer.valueOf(restartInterval);        } else {          // \u9519\u8bef\u91cd\u8dd1\u53c2\u6570\u6821\u9a8c\u5f02\u5e38\uff01\u53c2\u6570\u8bf7\u7528\u6b63\u6574\u6570\u3002          throw new ExecutorManagerException(\"Check parameters of error retry fail, parameters accept positive integer only.\");        }      } catch (Exception e) {        logger.error(\"\u9519\u8bef\u91cd\u8dd1\u53c2\u6570\u8bbe\u7f6e\u5f02\u5e38\uff01\", e);        // \u9519\u8bef\u91cd\u8dd1\u53c2\u6570\u8bbe\u7f6e\u5f02\u5e38\uff01\u9519\u8bef\u91cd\u8dd1\u6267\u884c\u5931\u8d25        throw new ExecutorManagerException(\"Exception in parameter of Error retry, failed to excute Error retry.\", e);      }      if(count > 3){        logger.warn(\"\u9519\u8bef\u91cd\u8dd1\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u4e3a3\u6b21\uff0c\u5927\u4e8e3\u7684\u6b21\u6570\u4e0d\u4f1a\u6267\u884c\uff01\");      }      count = count > 3 ? 3 : count;      logger.info(\"\u6267\u884c\u9519\u8bef\u91cd\u8dd1\u903b\u8f91\uff01 \u91cd\u8bd5\u6b21\u6570 \" + count + \"\u3002 \u91cd\u8bd5\u95f4\u9694 \" + interval + \"\u79d2\u3002\");      this.restartFailed = true;      for(int i=0; i < count; i++){        try {          Thread.sleep(interval * 1000);          if(isKilled() || isSkipped()){            logger.info(\"job has been killed or skipped, no need to retry.\");            return;          }          logger.info(\"\u91cd\u8bd5\u7b2c\" + (i+1) + \"\u6b21\u3002\");          this.retryConut++;          if(i == count - 1){            restartFailed = false;          }          finalStatus = jobRunHandle(errorFound, finalStatus, restartFailed);          if(Status.isSucceeded(finalStatus) || isKilled() || isSkipped()){            logger.info(\"the job stop retry, job status is \" + finalStatus);            break;          } else if((i + 1) == count){            logger.info(\"retry reaches the limit: \" + count + \", setting job failed.\" );            finalStatus = changeStatus(Status.FAILED);          }        } catch (InterruptedException e) {          logger.error(\"Job\u91cd\u8dd1\u4e2d\u65ad\uff01\", e);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java", "stars": "18", "class": {"name": "JobRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Brand.java", "stars": "15", "class": {"name": "Brand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Brand.java", "stars": "15", "class": {"name": "Brand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Brand.java", "stars": "15", "class": {"name": "Brand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Brand.java", "stars": "15", "class": {"name": "Brand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProducts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Product>", "snippet": "  public List<Product> getProducts() {    return products;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Brand.java", "stars": "15", "class": {"name": "Brand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProducts", "params": ["List<Product>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProducts(List<Product> products) {    this.products = products;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Brand.java", "stars": "15", "class": {"name": "Brand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(Integer s) {        this.value = s;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/IntTag.java", "stars": "2", "class": {"name": "IntTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/IntTag.java", "stars": "2", "class": {"name": "IntTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/IntTag.java", "stars": "2", "class": {"name": "IntTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/IntTag.java", "stars": "2", "class": {"name": "IntTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "writeData", "params": ["DataOutputStream"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeData(DataOutputStream dos) throws IOException {        // Indicates the string        dos.write(getID());        //Create a new DataOutputStream        ByteArrayOutputStream os = new ByteArrayOutputStream();        CountingOutputStream cos = new CountingOutputStream(os);        DataOutputStream tempDos = new DataOutputStream(cos);        tempDos.writeShort(name.getBytes(StandardCharsets.UTF_8).length);        tempDos.write(name.getBytes(StandardCharsets.UTF_8));        tempDos.writeInt(value);        dos.writeInt(cos.getCount());        dos.write(os.toByteArray());        tempDos.close();    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/IntTag.java", "stars": "2", "class": {"name": "IntTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "createFromData", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "Tag<Integer>", "snippet": "    public Tag<Integer> createFromData(byte[] value) {        ByteBuffer wrappedInt = ByteBuffer.wrap(value);        this.value = wrappedInt.getInt();        wrappedInt.clear();        return this;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/IntTag.java", "stars": "2", "class": {"name": "IntTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte getID() {        return 2;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/IntTag.java", "stars": "2", "class": {"name": "IntTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "shouldProduceExpectedSimpleSelectStatement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedSimpleSelectStatement() {    String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\\n\" +            \"FROM PERSON P\\n\" +            \"WHERE (P.ID like #id# AND P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\\n\" +            \"ORDER BY P.LAST_NAME\";    assertEquals(expected, example2(\"a\", \"b\", \"c\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SelectBuilderTest.java", "stars": "15", "class": {"name": "SelectBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldProduceExpectedSimpleSelectStatementMissingFirstParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedSimpleSelectStatementMissingFirstParam() {    String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\\n\" +            \"FROM PERSON P\\n\" +            \"WHERE (P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\\n\" +            \"ORDER BY P.LAST_NAME\";    assertEquals(expected, example2(null, \"b\", \"c\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SelectBuilderTest.java", "stars": "15", "class": {"name": "SelectBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams() {    String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\\n\" +            \"FROM PERSON P\\n\" +            \"WHERE (P.LAST_NAME like #lastName#)\\n\" +            \"ORDER BY P.LAST_NAME\";    assertEquals(expected, example2(null, null, \"c\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SelectBuilderTest.java", "stars": "15", "class": {"name": "SelectBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldProduceExpectedSimpleSelectStatementMissingAllParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedSimpleSelectStatementMissingAllParams() {    String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\\n\" +            \"FROM PERSON P\\n\" +            \"ORDER BY P.LAST_NAME\";    assertEquals(expected, example2(null, null, null));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SelectBuilderTest.java", "stars": "15", "class": {"name": "SelectBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldProduceExpectedComplexSelectStatement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedComplexSelectStatement() {    String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\\n\" +            \"FROM PERSON P, ACCOUNT A\\n\" +            \"INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\\n\" +            \"INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\\n\" +            \"WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \\n\" +            \"OR (P.LAST_NAME like ?)\\n\" +            \"GROUP BY P.ID\\n\" +            \"HAVING (P.LAST_NAME like ?) \\n\" +            \"OR (P.FIRST_NAME like ?)\\n\" +            \"ORDER BY P.ID, P.FULL_NAME\";    assertEquals(expected, example1());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SelectBuilderTest.java", "stars": "15", "class": {"name": "SelectBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "example1", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String example1() {    SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\");    SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\");    FROM(\"PERSON P\");    FROM(\"ACCOUNT A\");    INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\");    INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\");    WHERE(\"P.ID = A.ID\");    WHERE(\"P.FIRST_NAME like ?\");    OR();    WHERE(\"P.LAST_NAME like ?\");    GROUP_BY(\"P.ID\");    HAVING(\"P.LAST_NAME like ?\");    OR();    HAVING(\"P.FIRST_NAME like ?\");    ORDER_BY(\"P.ID\");    ORDER_BY(\"P.FULL_NAME\");    return SQL();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SelectBuilderTest.java", "stars": "15", "class": {"name": "SelectBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "example2", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String example2(String id, String firstName, String lastName) {    SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\");    FROM(\"PERSON P\");    if (id != null) {      WHERE(\"P.ID like #id#\");    }    if (firstName != null) {      WHERE(\"P.FIRST_NAME like #firstName#\");    }    if (lastName != null) {      WHERE(\"P.LAST_NAME like #lastName#\");    }    ORDER_BY(\"P.LAST_NAME\");    return SQL();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SelectBuilderTest.java", "stars": "15", "class": {"name": "SelectBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (event.getType().equals(PacketEvent.Type.OUTGOING) && event.getPacket() instanceof CPacketChatMessage) {            CPacketChatMessage packet = (CPacketChatMessage) event.getPacket();            if (packet.getMessage().startsWith(\"/\") || packet.getMessage().startsWith(Commands.prefix))                return;            if (Mercury.INSTANCE.getModuleManager().find(Translator.class).isEnabled())                return;            if (prefix && !packet.getMessage().startsWith(\"owo:\"))                return;            String[] cancer = {\"owo\", \"OwO\", \"uwu\", \"UwU\", \">w<\", \"^w^\", \"7w7\", \"^o^\", \":3\", \"@w@\"};            packet.message = yep((prefix && packet.getMessage().startsWith(\"owo:\")) ? packet.getMessage().replace(\"owo:\", \"\") : packet.getMessage()) + \" \" + (suffix ? cancer[MathUtil.getRandom(0, cancer.length - 1)] : \"\");        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/FurryChat.java", "stars": "12", "class": {"name": "FurryChat", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "yep", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String yep(String chat) {        return chat.replace(\"r\", \"w\")                .replace(\"R\", \"W\")                .replace(\"l\", \"w\")                .replace(\"L\", \"W\")                .replace(\" n\", \" ny\")                .replace(\" N\", \" Ny\")                .replace(\"ove\", \"uv\")                .replace(\"OVE\", \"UV\")                .replace(\"this\", \"dis\");    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/FurryChat.java", "stars": "12", "class": {"name": "FurryChat", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["C"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(C applicationContext) {        log.info(\">>>>>>>>>>>>>>>>>>>> \u521d\u59cb\u5316applicationContext\uff0cConfigurableApplicationContext.id = \" + applicationContext.getId());    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/context/HelloWorldApplicationContextInitializer.java", "stars": "3", "class": {"name": "HelloWorldApplicationContextInitializer", "extends": null, "implements": ["ApplicationContextInitializer"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        try {            for (String pattern : this.patterns) {                // \u63d0\u53d6\u6240\u6709\u7b26\u5408\u8868\u8fbe\u5f0f\u7684XML\u6587\u4ef6                Resource[] resources = resourceResolver.getResources(pattern);                for (Resource resource : resources) {                    File file = resource.getFile();                    // \u83b7\u53d6\u4e0a\u6b21\u4fee\u6539\u65f6\u95f4                    Long lastModified = fileMap.get(resource.getDescription());                    // \u4fee\u6539\u7f13\u5b58                    fileMap.put(resource.getDescription(), file.lastModified());                    //\u5224\u65ad\u662f\u5426\u66f4\u65b0                    if (lastModified == null || lastModified < file.lastModified()) {                        XMLStatement xmlStatement = S8XMLFileParser.parse(file);                        xmlStatement.getStatements().forEach(configuration::addStatement);                    }                }            }        } catch (Exception e) {            logger.error(\"\u52a0\u8f7dXML\u5931\u8d25\",e);        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/XmlFileLoader.java", "stars": "13", "class": {"name": "XmlFileLoader", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createLocalDir", "params": ["String", "long", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String createLocalDir(String baseDir, long jobId, long taskId){        String directory = baseDir + IOUtils.DIR_SEPARATOR_UNIX + jobId + \"_\" + taskId;        File workDir = new File(directory);        if (!workDir.exists() && !workDir.mkdirs()) {            throw new RuntimeException(\"Create workspace directory: \" + workDir + \" failed\");        }        return directory;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/util/WorkSpace.java", "stars": "23", "class": {"name": "WorkSpace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createLocalDirIfNotExist", "params": ["String", "long", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String createLocalDirIfNotExist(String baseDir, long jobId, long taskId){        String directory = baseDir + IOUtils.DIR_SEPARATOR_UNIX + jobId + \"_\" + taskId;        File workDir = new File(directory);        if(workDir.mkdirs()){            LOG.trace(\"Create directory: \" + directory);        }        return directory;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/util/WorkSpace.java", "stars": "23", "class": {"name": "WorkSpace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocalSpace", "params": ["String", "long", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getLocalSpace(String baseDir, long jobId, long taskId){        return baseDir + IOUtils.DIR_SEPARATOR_UNIX + jobId + \"_\" + taskId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/util/WorkSpace.java", "stars": "23", "class": {"name": "WorkSpace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteLocalSpace", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean deleteLocalSpace(String space){        if(StringUtils.isNotBlank(space)) {            return new File(space).delete();        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/util/WorkSpace.java", "stars": "23", "class": {"name": "WorkSpace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "LocalDateTime", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, LocalDateTime parameter, JdbcType jdbcType)          throws SQLException {    ps.setObject(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/LocalDateTimeTypeHandler.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "  public LocalDateTime getNullableResult(ResultSet rs, String columnName) throws SQLException {    return rs.getObject(columnName, LocalDateTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/LocalDateTimeTypeHandler.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "  public LocalDateTime getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    return rs.getObject(columnIndex, LocalDateTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/LocalDateTimeTypeHandler.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "  public LocalDateTime getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    return cs.getObject(columnIndex, LocalDateTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/LocalDateTimeTypeHandler.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "onApplicationEvent", "params": ["ContextRefreshedEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\t\tReflectionUtils.clearCache();\t\tclearClassLoaderCaches(Thread.currentThread().getContextClassLoader());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ClearCachesApplicationListener.java", "stars": "47572", "class": {"name": "ClearCachesApplicationListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": []}}, {"method_name": "clearClassLoaderCaches", "params": ["ClassLoader"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void clearClassLoaderCaches(ClassLoader classLoader) {\t\tif (classLoader == null) {\t\t\treturn;\t\t}\t\ttry {\t\t\tMethod clearCacheMethod = classLoader.getClass().getDeclaredMethod(\"clearCache\");\t\t\tclearCacheMethod.invoke(classLoader);\t\t}\t\tcatch (Exception ex) {\t\t\t// Ignore\t\t}\t\tclearClassLoaderCaches(classLoader.getParent());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ClearCachesApplicationListener.java", "stars": "47572", "class": {"name": "ClearCachesApplicationListener", "extends": null, "implements": ["ApplicationListener"], "modifiers": []}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ObjectMapper", "snippet": "    public static ObjectMapper getInstance() {        return objectMapper;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/JacksonUtil.java", "stars": "1", "class": {"name": "JacksonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeValueAsString", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String writeValueAsString(Object obj) {    \ttry {\t\t\treturn getInstance().writeValueAsString(obj);\t\t} catch (JsonGenerationException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t} catch (JsonMappingException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t} catch (IOException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t}        return null;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/JacksonUtil.java", "stars": "1", "class": {"name": "JacksonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readValue", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T readValue(String jsonStr, Class<T> clazz) {    \ttry {\t\t\treturn getInstance().readValue(jsonStr, clazz);\t\t} catch (JsonParseException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t} catch (JsonMappingException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t} catch (IOException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t}    \treturn null;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/JacksonUtil.java", "stars": "1", "class": {"name": "JacksonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readValue", "params": ["String", "Class<?>", "Class<?>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "\tpublic static <T> T readValue(String jsonStr, Class<?> parametrized, Class<?>... parameterClasses) {\t\ttry {\t\t\tJavaType javaType = getInstance().getTypeFactory().constructParametricType(parametrized, parameterClasses);\t\t\treturn getInstance().readValue(jsonStr, javaType);\t\t} catch (JsonParseException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t} catch (JsonMappingException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t} catch (IOException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/JacksonUtil.java", "stars": "1", "class": {"name": "JacksonUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDeviceReady", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceReady(ConnectableDevice device) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceListener.java", "stars": "4", "class": {"name": "BeamDeviceListener", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceDisconnected", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceDisconnected(ConnectableDevice device) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceListener.java", "stars": "4", "class": {"name": "BeamDeviceListener", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "onPairingRequired", "params": ["ConnectableDevice", "DeviceService", "DeviceService"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPairingRequired(ConnectableDevice device, DeviceService service, DeviceService.PairingType pairingType) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceListener.java", "stars": "4", "class": {"name": "BeamDeviceListener", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "onCapabilityUpdated", "params": ["ConnectableDevice", "List<String>", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCapabilityUpdated(ConnectableDevice device, List<String> added, List<String> removed) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceListener.java", "stars": "4", "class": {"name": "BeamDeviceListener", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "onConnectionFailed", "params": ["ConnectableDevice", "ServiceCommandError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConnectionFailed(ConnectableDevice device, ServiceCommandError error) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceListener.java", "stars": "4", "class": {"name": "BeamDeviceListener", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "find", "params": ["UUID"], "throws": null, "modifiers": ["public"], "return_type": "VipPlayer", "snippet": "    public VipPlayer find(UUID uuid) {        try (PreparedStatement statement = databaseConnection.getConnection(true).prepareStatement(FIND_STATEMENT)) {            statement.setString(1, uuid.toString());            ResultSet resultSet = statement.executeQuery();            System.out.println(resultSet.getClass().getSuperclass());            return adapter.adapt(resultSet, ResultSet.class, VipPlayer.class);        } catch (Exception exception) {            exception.printStackTrace();            return null;        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/repository/vipplayer/VipPlayerSQLiteRepository.java", "stars": "2", "class": {"name": "VipPlayerSQLiteRepository", "extends": "VipPlayerRepository", "implements": null, "modifiers": ["public"]}}, {"method_name": "insert", "params": ["UUID", "VipPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void insert(UUID uuid, VipPlayer vipPlayer) {        try (Connection connection = databaseConnection.getConnection(false);             PreparedStatement statement = connection.prepareStatement(INSERT_STATEMENT)) {            for (Vip vip : vipPlayer.getVips().values()) {                statement.setString(1, uuid.toString());                statement.setString(2, vip.getType().getIdentifier());                statement.setLong(3, vip.getTime());                statement.addBatch();            }            statement.executeUpdate();            connection.setAutoCommit(true);        } catch (Exception exception) {            exception.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/repository/vipplayer/VipPlayerSQLiteRepository.java", "stars": "2", "class": {"name": "VipPlayerSQLiteRepository", "extends": "VipPlayerRepository", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["UUID"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void delete(UUID uuid) {        try (Connection connection = databaseConnection.getConnection(true);             PreparedStatement statement = connection.prepareStatement(DELETE_STATEMENT)) {            statement.setString(1, uuid.toString());            statement.executeUpdate();        } catch (Exception exception) {        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/repository/vipplayer/VipPlayerSQLiteRepository.java", "stars": "2", "class": {"name": "VipPlayerSQLiteRepository", "extends": "VipPlayerRepository", "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "Produto", "snippet": "\tpublic Produto salvar(Produto produto) {\t\tEntityManager em = JPAUtil.getEntityManager();\t\tEntityTransaction trx = em.getTransaction();\t\ttrx.begin();\t\tproduto = em.merge(produto);\t\ttrx.commit();\t\tem.close();\t\treturn produto;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ProdutoDao.java", "stars": "1", "class": {"name": "ProdutoDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarTodos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Produto>", "snippet": "\tpublic List<Produto> buscarTodos() {\t\tEntityManager em = JPAUtil.getEntityManager();\t\tTypedQuery<Produto> query = em.createQuery(\"from Produto\", Produto.class);\t\treturn query.getResultList();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ProdutoDao.java", "stars": "1", "class": {"name": "ProdutoDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "excluir", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void excluir(Produto produto) {\t\tEntityManager em = JPAUtil.getEntityManager();\t\tEntityTransaction trx = em.getTransaction();\t\ttrx.begin();\t\tem.remove(em.find(Produto.class, produto.getId()));\t\ttrx.commit();\t\tem.close();\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ProdutoDao.java", "stars": "1", "class": {"name": "ProdutoDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarPorId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Produto", "snippet": "\tpublic Produto buscarPorId(Long id) {\t\tEntityManager em = JPAUtil.getEntityManager();\t\ttry {\t\t\treturn em.find(Produto.class, id);\t\t} finally {\t\t\tem.close();\t\t}\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ProdutoDao.java", "stars": "1", "class": {"name": "ProdutoDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(CopypasteApiApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/CopypasteApiApplication.java", "stars": "2", "class": {"name": "CopypasteApiApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerCommunication", "params": ["List<Configuration>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerCommunication(List<Configuration> configurationList) {        super.getCollector().registerTGCommunication(configurationList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/job/StandAloneJobContainerCommunicator.java", "stars": "23", "class": {"name": "StandAloneJobContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public"]}}, {"method_name": "collect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Communication", "snippet": "    public Communication collect() {        return super.getCollector().collectFromTaskGroup();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/job/StandAloneJobContainerCommunicator.java", "stars": "23", "class": {"name": "StandAloneJobContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public"]}}, {"method_name": "collectState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "State", "snippet": "    public State collectState() {        return this.collect().getState();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/job/StandAloneJobContainerCommunicator.java", "stars": "23", "class": {"name": "StandAloneJobContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public"]}}, {"method_name": "report", "params": ["Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void report(Communication communication) {        super.getReporter().reportJobCommunication(super.getJobId(), communication);        String info = CommunicationTool.Stringify.getSnapshot(communication);        LOG.info(info);        reportVmInfo();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/job/StandAloneJobContainerCommunicator.java", "stars": "23", "class": {"name": "StandAloneJobContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCommunication", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Communication", "snippet": "    public Communication getCommunication(Integer taskGroupId) {        return super.getCollector().getTGCommunication(taskGroupId);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/job/StandAloneJobContainerCommunicator.java", "stars": "23", "class": {"name": "StandAloneJobContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCommunicationMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<Integer,Communication>", "snippet": "    public Map<Integer, Communication> getCommunicationMap() {        return super.getCollector().getTGCommunicationMap();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/job/StandAloneJobContainerCommunicator.java", "stars": "23", "class": {"name": "StandAloneJobContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getApi() {        return \"coin/banner\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/BannerApi.java", "stars": "1", "class": {"name": "BannerApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "getLastTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getLastTime() {        return lastTime;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListRequest.java", "stars": "1", "class": {"name": "GiftListRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastTime(long lastTime) {        this.lastTime = lastTime;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListRequest.java", "stars": "1", "class": {"name": "GiftListRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlatform", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Platform", "snippet": "    public Platform getPlatform() {        return platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListRequest.java", "stars": "1", "class": {"name": "GiftListRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlatform", "params": ["Platform"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlatform(Platform platform) {        this.platform = platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListRequest.java", "stars": "1", "class": {"name": "GiftListRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIsNewApp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getIsNewApp() {        return isNewApp;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListRequest.java", "stars": "1", "class": {"name": "GiftListRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsNewApp", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsNewApp(int isNewApp) {        this.isNewApp = isNewApp;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListRequest.java", "stars": "1", "class": {"name": "GiftListRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"GiftListRequest{\" +                \"lastTime=\" + lastTime +                \", platform='\" + platform + '\\'' +                \", isNewApp=\" + isNewApp +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiftListRequest.java", "stars": "1", "class": {"name": "GiftListRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "instance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "ProxyCacheManager", "snippet": "    public static synchronized ProxyCacheManager instance() {        if (proxyCacheManager == null) {            proxyCacheManager = new ProxyCacheManager();        }        return proxyCacheManager;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "onCacheAvailable", "params": ["File", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCacheAvailable(File cacheFile, String url, int percentsAvailable) {        if (cacheAvailableListener != null) {            cacheAvailableListener.onCacheAvailable(cacheFile, url, percentsAvailable);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "doCacheLogic", "params": ["Context", "IMediaPlayer", "String", "Map<String,String>", "File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void doCacheLogic(Context context, IMediaPlayer mediaPlayer, String originUrl, Map<String, String> header, File cachePath) {        String url = originUrl;        userAgentHeadersInjector.mMapHeadData.clear();        if (header != null) {            userAgentHeadersInjector.mMapHeadData.putAll(header);        }        if (url.startsWith(\"http\") && !url.contains(\"127.0.0.1\") && !url.contains(\".m3u8\")) {            HttpProxyCacheServer proxy = getProxy(context.getApplicationContext(), cachePath);            if (proxy != null) {                //\u6b64\u5904\u8f6c\u6362\u4e86url\uff0c\u7136\u540e\u518d\u8d4b\u503c\u7ed9mUrl\u3002                url = proxy.getProxyUrl(url);                mCacheFile = (!url.startsWith(\"http\"));                //\u6ce8\u518c\u4e0a\u7f13\u51b2\u76d1\u542c                if (!mCacheFile) {                    proxy.registerCacheListener(this, originUrl);                }            }        } else if ((!url.startsWith(\"http\") && !url.startsWith(\"rtmp\")                && !url.startsWith(\"rtsp\") && !url.contains(\".m3u8\"))) {            mCacheFile = true;        }        try {            mediaPlayer.setDataSource(context, Uri.parse(url), header);        } catch (IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "clearCache", "params": ["Context", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearCache(Context context, File cachePath, String url) {        if (TextUtils.isEmpty(url)) {            String path = StorageUtils.getIndividualCacheDirectory                    (context.getApplicationContext()).getAbsolutePath();            FileUtils.deleteFiles(new File(path));        } else {            Md5FileNameGenerator md5FileNameGenerator = new Md5FileNameGenerator();            String name = md5FileNameGenerator.generate(url);            if (cachePath != null) {                String tmpPath = cachePath.getAbsolutePath() + File.separator + name + \".download\";                String path = cachePath.getAbsolutePath() + File.separator + name;                CommonUtil.deleteFile(tmpPath);                CommonUtil.deleteFile(path);            } else {                String pathTmp = StorageUtils.getIndividualCacheDirectory                        (context.getApplicationContext()).getAbsolutePath()                        + File.separator + name + \".download\";                String path = StorageUtils.getIndividualCacheDirectory                        (context.getApplicationContext()).getAbsolutePath()                        + File.separator + name;                CommonUtil.deleteFile(pathTmp);                CommonUtil.deleteFile(path);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        if (proxy != null) {            try {                proxy.unregisterCacheListener(this);            } catch (Exception e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "cachePreview", "params": ["Context", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean cachePreview(Context context, File cacheDir, String url) {        HttpProxyCacheServer proxy = getProxy(context.getApplicationContext(), cacheDir);        if (proxy != null) {            //\u6b64\u5904\u8f6c\u6362\u4e86url\uff0c\u7136\u540e\u518d\u8d4b\u503c\u7ed9mUrl\u3002            url = proxy.getProxyUrl(url);        }        return (!url.startsWith(\"http\"));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "hadCached", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hadCached() {        return mCacheFile;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "setCacheAvailableListener", "params": ["ICacheAvailableListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCacheAvailableListener(ICacheAvailableListener cacheAvailableListener) {        this.cacheAvailableListener = cacheAvailableListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "newProxy", "params": ["Context", "File"], "throws": null, "modifiers": ["public"], "return_type": "HttpProxyCacheServer", "snippet": "    public HttpProxyCacheServer newProxy(Context context, File file) {        if (!file.exists()) {            file.mkdirs();        }        HttpProxyCacheServer.Builder builder = new HttpProxyCacheServer.Builder(context);        builder.cacheDirectory(file);        builder.headerInjector(userAgentHeadersInjector);        mCacheDir = file;        return builder.build();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "setProxy", "params": ["HttpProxyCacheServer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProxy(HttpProxyCacheServer proxy) {        this.proxy = proxy;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "newProxy", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "HttpProxyCacheServer", "snippet": "    public HttpProxyCacheServer newProxy(Context context) {        return new HttpProxyCacheServer.Builder(context.getApplicationContext())                .headerInjector(userAgentHeadersInjector).build();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "getProxy", "params": ["Context"], "throws": null, "modifiers": ["static", "protected"], "return_type": "HttpProxyCacheServer", "snippet": "    protected static HttpProxyCacheServer getProxy(Context context) {        HttpProxyCacheServer proxy = ProxyCacheManager.instance().proxy;        return proxy == null ? (ProxyCacheManager.instance().proxy =                ProxyCacheManager.instance().newProxy(context)) : proxy;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "getProxy", "params": ["Context", "File"], "throws": null, "modifiers": ["public", "static"], "return_type": "HttpProxyCacheServer", "snippet": "    public static HttpProxyCacheServer getProxy(Context context, File file) {        //\u5982\u679c\u4e3a\u7a7a\uff0c\u8fd4\u56de\u9ed8\u8ba4\u7684        if (file == null) {            return getProxy(context);        }        //\u5982\u679c\u5df2\u7ecf\u6709\u7f13\u5b58\u6587\u4ef6\u8def\u5f84\uff0c\u90a3\u4e48\u5224\u65ad\u7f13\u5b58\u6587\u4ef6\u8def\u5f84\u662f\u5426\u4e00\u81f4        if (ProxyCacheManager.instance().mCacheDir != null                && !ProxyCacheManager.instance().mCacheDir.getAbsolutePath().equals(file.getAbsolutePath())) {            //\u4e0d\u4e00\u81f4\u5148\u5173\u4e86\u65e7\u7684            HttpProxyCacheServer proxy = ProxyCacheManager.instance().proxy;            if (proxy != null) {                proxy.shutdown();            }            //\u5f00\u542f\u65b0\u7684            return (ProxyCacheManager.instance().proxy =                    ProxyCacheManager.instance().newProxy(context, file));        } else {            //\u8fd8\u6ca1\u6709\u7f13\u5b58\u6587\u4ef6\u7684\u6216\u8005\u4e00\u81f4\u7684\uff0c\u8fd4\u56de\u539f\u6765            HttpProxyCacheServer proxy = ProxyCacheManager.instance().proxy;            return proxy == null ? (ProxyCacheManager.instance().proxy =                    ProxyCacheManager.instance().newProxy(context, file)) : proxy;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/cache/ProxyCacheManager.java", "stars": "2", "class": {"name": "ProxyCacheManager", "extends": null, "implements": ["ICacheManager", "CacheListener"], "modifiers": ["public"]}}, {"method_name": "getUrls", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getUrls() {        return urls;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExoModel.java", "stars": "2", "class": {"name": "GSYExoModel", "extends": "GSYModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUrls", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUrls(List<String> urls) {        this.urls = urls;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExoModel.java", "stars": "2", "class": {"name": "GSYExoModel", "extends": "GSYModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void draw(int mouseX, int mouseY, float partialTicks) {    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/ConfigPanel.java", "stars": "12", "class": {"name": "ConfigPanel", "extends": "Panel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getErrorCode() {        return errorCode;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/Error.java", "stars": "4", "class": {"name": "Error", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getErrorMessage() {        return errorMessage;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/Error.java", "stars": "4", "class": {"name": "Error", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getText () {\t\treturn cachedText;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Span", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getStart () {\t\treturn start;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Span", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getEnd () {\t\treturn end;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Span", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getSource () {\t\treturn source;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Span", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString () {\t\treturn \"Span [text=\" + getText() + \", start=\" + start + \", end=\" + end + \"]\";\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Span", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLine", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Line", "snippet": "\tpublic Line getLine () {\t\tint lineStart = start;\t\twhile (true) {\t\t\tif (lineStart < 0) {                break;            }\t\t\tchar c = source.charAt(lineStart);\t\t\tif (c == '\\n') {\t\t\t\tlineStart = lineStart + 1;\t\t\t\tbreak;\t\t\t}\t\t\tlineStart--;\t\t}\t\tif (lineStart < 0) {            lineStart = 0;        }\t\tint lineEnd = end;\t\twhile (true) {\t\t\tif (lineEnd > source.length() - 1) {                break;            }\t\t\tchar c = source.charAt(lineEnd);\t\t\tif (c == '\\n') {\t\t\t\tbreak;\t\t\t}\t\t\tlineEnd++;\t\t}\t\tint lineNumber = 0;\t\tint idx = lineStart;\t\twhile (idx > 0) {\t\t\tchar c = source.charAt(idx);\t\t\tif (c == '\\n') {\t\t\t\tlineNumber++;\t\t\t}\t\t\tidx--;\t\t}\t\tlineNumber++;\t\treturn new Line(source, lineStart, lineEnd, lineNumber);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Span", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getSource () {\t\t\treturn source;\t\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Line", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getStart () {\t\t\treturn start;\t\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Line", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getEnd () {\t\t\treturn end;\t\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Line", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLineNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getLineNumber () {\t\t\treturn lineNumber;\t\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Line", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getText () {\t\t\treturn source.substring(start, end);\t\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/Span.java", "stars": "13", "class": {"name": "Line", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "methodPointCut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void methodPointCut() {}", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/aspect/ClickBehaviorAspect.java", "stars": "2", "class": {"name": "ClickBehaviorAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jointPotin", "params": ["ProceedingJoinPoint"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object jointPotin(ProceedingJoinPoint joinPoint) throws Throwable {        // \u83b7\u53d6\u7b7e\u540d\u65b9\u6cd5        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();        // \u83b7\u53d6\u65b9\u6cd5\u6240\u5c5e\u7684\u7c7b\u540d        String className = methodSignature.getDeclaringType().getSimpleName();        // \u83b7\u53d6\u65b9\u6cd5\u540d        String methodName = methodSignature.getName();        // \u83b7\u53d6\u65b9\u6cd5\u7684\u6ce8\u89e3\u503c(\u9700\u8981\u7edf\u8ba1\u7684\u7528\u6237\u884c\u4e3a)        String funName = methodSignature.getMethod().getAnnotation(ClickBehavior.class).value();        // \u7edf\u8ba1\u65b9\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u3001\u7edf\u8ba1\u7528\u6237\u70b9\u51fb\u67d0\u529f\u80fd\u884c\u4e3a\u3002\uff08\u5b58\u50a8\u5230\u672c\u5730\uff0c\u6bcf\u8fc7x\u5929\u4e0a\u4f20\u5230\u670d\u52a1\u5668\uff09        long begin = System.currentTimeMillis();        Log.e(TAG, \"ClickBehavior Method Start >>> \");        Object result = joinPoint.proceed(); // MainActivity\u4e2d\u5207\u9762\u7684\u65b9\u6cd5        long duration = System.currentTimeMillis() - begin;        Log.e(TAG, \"ClickBehavior Method End >>> \");        Log.e(TAG, String.format(\"\u7edf\u8ba1\u4e86\uff1a%s\u529f\u80fd\uff0c\u5728%s\u7c7b\u7684%s\u65b9\u6cd5\uff0c\u7528\u65f6%d ms\",                funName, className, methodName, duration));        return result;    }", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/aspect/ClickBehaviorAspect.java", "stars": "2", "class": {"name": "ClickBehaviorAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String parse(String text) {    if (text == null || text.isEmpty()) {      return \"\";    }    // search open token    int start = text.indexOf(openToken);    if (start == -1) {      return text;    }    char[] src = text.toCharArray();    int offset = 0;    final StringBuilder builder = new StringBuilder();    StringBuilder expression = null;    while (start > -1) {      if (start > 0 && src[start - 1] == '\\\\') {        // this open token is escaped. remove the backslash and continue.        builder.append(src, offset, start - offset - 1).append(openToken);        offset = start + openToken.length();      } else {        // found open token. let's search close token.        if (expression == null) {          expression = new StringBuilder();        } else {          expression.setLength(0);        }        builder.append(src, offset, start - offset);        offset = start + openToken.length();        int end = text.indexOf(closeToken, offset);        while (end > -1) {          if (end > offset && src[end - 1] == '\\\\') {            // this close token is escaped. remove the backslash and continue.            expression.append(src, offset, end - offset - 1).append(closeToken);            offset = end + closeToken.length();            end = text.indexOf(closeToken, offset);          } else {            expression.append(src, offset, end - offset);            break;          }        }        if (end == -1) {          // close token was not found.          builder.append(src, start, src.length - start);          offset = src.length;        } else {          builder.append(handler.handleToken(expression.toString()));          offset = end + closeToken.length();        }      }      start = text.indexOf(openToken, offset);    }    if (offset < src.length) {      builder.append(src, offset, src.length - offset);    }    return builder.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java", "stars": "15", "class": {"name": "GenericTokenParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTipoPagamento", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TipoPagamento", "snippet": "\tpublic TipoPagamento getTipoPagamento() {\t\treturn tipoPagamento;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/listapagamentos/DetalhePagamentoListaDTO.java", "stars": "9", "class": {"name": "DetalhePagamentoListaDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateTime", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateTime(){        this.timeOut = System.currentTimeMillis() + interval;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/KillFlowTrigger.java", "stars": "18", "class": {"name": "KillFlowTrigger", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        logger.warn(\"\u4f5c\u4e1a\u6d41\u5df2\u6682\u505c\uff0c \u5f53\u4f5c\u4e1a\u6d41\u6ca1\u6709\u53ef\u8fd0\u884c\u4efb\u52a1\u65f6\uff0c\u5728\" + this.interval / 1000 + \"\u79d2\u540e\u8be5\u4f5c\u4e1a\u5c06\u4f1a\u88ab\u7ec8\u6b62\u8fd0\u884c.\");        try {            while (true) {                synchronized (monitor) {                    if (hasActiveJob()) {                        LOGGER.debug(\"execId\uff1a{}, has active job , update time.\" , flowRunner.getExecutionId());                        updateTime();                    }                    if (System.currentTimeMillis() >= this.timeOut) {                        if (flowRunner != null && !flowRunner.isKilled() && !flowRunner.isFlowFinished()) {                            logger.warn(\"workflow timeout termination, execId:\" + this.flowRunner.getExecutionId());                            flowRunner.kill();                        }                        break;                    }                    monitor.wait(waitTime);                }            }        } catch (InterruptedException ie) {            logger.info(\"cancel kill workflow, execId: \" + this.flowRunner.getExecutionId());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/KillFlowTrigger.java", "stars": "18", "class": {"name": "KillFlowTrigger", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "stopKillFLowTrigger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopKillFLowTrigger(){        this.interrupt();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/KillFlowTrigger.java", "stars": "18", "class": {"name": "KillFlowTrigger", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasActiveJob", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean hasActiveJob(){        Set<JobRunner> activeJobs = flowRunner.getActiveJobRunners();        if(activeJobs.isEmpty()){            return false;        }        for(JobRunner jobRunner: activeJobs){            if(!jobRunner.getStatus().equals(Status.FAILED_WAITING)){                return true;            }        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/KillFlowTrigger.java", "stars": "18", "class": {"name": "KillFlowTrigger", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/DarkOakParquetStairsBlock.java", "stars": "2", "class": {"name": "DarkOakParquetStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/DarkOakParquetStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\t\t\t\t\t\t\t\t\t\tSystem.setProperty(ChromeDriverService.CHROME_DRIVER_SILENT_OUTPUT_PROPERTY, \"true\");\t\t\t// System.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\t\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\t\tWebDriver driver = new ChromeDriver();\t\t\tString url = \"https://www.seleniumeasy.com/test/javascript-alert-box-demo.html\";\t\t\tdriver.get(url);\t\t\tdriver.findElement(By.xpath(\"//button[@class='btn btn-default']\")).click();\t\t\tThread.sleep(2000);\t\t\tAlert alert=driver.switchTo().alert();\t\t\tString  alertVal= alert.getText();\t\t\tSystem.out.println(alertVal);\t\t\tThread.sleep(2000);\t\t\talert.accept();\t\t\tdriver.quit();\t\t\t\t\t\t\t\t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class4/Alerts.java", "stars": "3", "class": {"name": "Alerts", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateAnimation", "params": ["int", "boolean", "int"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.animation.Animation onCreateAnimation (int p0, boolean p1, int p2)\t{\t\treturn n_onCreateAnimation (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onCreateAnimation", "params": ["int", "boolean", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.animation.Animation n_onCreateAnimation (int p0, boolean p1, int p2);\tpublic android.view.View onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2)\t{\t\treturn n_onCreateView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2)\t{\t\treturn n_onCreateView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2);\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDestroy", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroy ();\tpublic void onAnimationEnd (android.view.animation.Animation p0)\t{\t\tn_onAnimationEnd (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onAnimationEnd", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationEnd (android.view.animation.Animation p0)\t{\t\tn_onAnimationEnd (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationEnd", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationEnd (android.view.animation.Animation p0);\tpublic void onAnimationRepeat (android.view.animation.Animation p0)\t{\t\tn_onAnimationRepeat (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onAnimationRepeat", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationRepeat (android.view.animation.Animation p0)\t{\t\tn_onAnimationRepeat (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationRepeat", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationRepeat (android.view.animation.Animation p0);\tpublic void onAnimationStart (android.view.animation.Animation p0)\t{\t\tn_onAnimationStart (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onAnimationStart", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationStart (android.view.animation.Animation p0)\t{\t\tn_onAnimationStart (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationStart", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationStart (android.view.animation.Animation p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellContentFragment.java", "stars": "2", "class": {"name": "ShellContentFragment", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailContainer.java", "stars": "2", "class": {"name": "MasterDetailContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailContainer.java", "stars": "2", "class": {"name": "MasterDetailContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailContainer.java", "stars": "2", "class": {"name": "MasterDetailContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailContainer.java", "stars": "2", "class": {"name": "MasterDetailContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailContainer.java", "stars": "2", "class": {"name": "MasterDetailContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/MasterDetailContainer.java", "stars": "2", "class": {"name": "MasterDetailContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerClosed (android.view.View p0)\t{\t\tn_onDrawerClosed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerClosed (android.view.View p0);\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerOpened (android.view.View p0);\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerSlide (android.view.View p0, float p1);\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerStateChanged (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/DrawerLayout_DrawerListenerImplementor.java", "stars": "2", "class": {"name": "DrawerLayout_DrawerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "generate", "params": ["int", "int", "int", "int", "int", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void generate(int numberOfGardenFields, int numberOfUsers, int numberOfOpenLeasings,                         int numberOfReservedLeasings, int numberOfMessagesThreads, int numberOfMessages,                         int minNumberOfImagesPerGardenField, int maxNumberOfImagesPerGardenField, int batchSize) {        this.numberOfGardenFields = numberOfGardenFields;        this.numberOfUsers = numberOfUsers;        this.numberOfOpenLeasings = numberOfOpenLeasings;        this.numberOfReservedLeasings = numberOfReservedLeasings;        this.numberOfMessagesThreads = numberOfMessagesThreads;        this.numberOfMessages = numberOfMessages;        this.minNumberOfImagesPerGardenField = minNumberOfImagesPerGardenField;        this.maxNumberOfImagesPerGardenField = maxNumberOfImagesPerGardenField;        this.batchSize = batchSize;        boolean isGeneratorInstance = generateAuthorities();        if (isGeneratorInstance) {            log.info(\"This instance will be generating data\");            boolean success = generateAdmin() &&                generateUsers() &&                generateGardenFields() &&                generateGardenFieldImages() &&                generateLeasings() &&                generateMessages();            if(success){                log.info(\"Data generation finished successfully\");            } else {                log.error(\"Data generation failed.\");            }        } else {            log.info(\"This instance will NOT generate data. Maybe an other instance is currently generating the data or the data was already generated in the past.\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateAuthorities", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean generateAuthorities() {        authorities = new HashSet<>(authorityRepository.findAll());        if (authorities.size() > 0) {            log.info(\"Authorities were already generated\");            return false;        }        log.info(\"Start generating authorities\");        Authority roleUser = new Authority();        roleUser.setName(USER_ROLE);        Authority roleAdmin = new Authority();        roleAdmin.setName(ADMIN_ROLE);        authorities.add(authorityRepository.save(roleAdmin));        authorities.add(authorityRepository.save(roleUser));        log.info(\"Generated {} authorities\", authorities.size());        return true;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateAdmin", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean generateAdmin() {        User administrator = userRepository.findOneWithAuthoritiesByLogin(\"Administrator\").orElse(null);        if (administrator != null) {            log.info(\"Administator was already generated\");            return false;        }        log.info(\"Start generating Administrator\");        administrator = new User();        administrator.setFirstName(\"Administrator\");        administrator.setLastName(\"Admin\");        administrator.setLogin(\"Administrator\");        administrator.setEmail(\"admin@gardle.ga\");        administrator.setPassword(DEFAULT_ADMIN_PASSWORD);        administrator.setActivated(true);        administrator.setAuthorities(authorities);        administrator.setBankAccountIBAN(DEFAULT_IBAN);        administrator.setStripeAccountId(paymentService.createPaymentAccount(administrator.getEmail(), administrator.getBankAccountIBAN()));        administrator.setStripeAccountVerified(true);        log.info(\"Administrator is generated\");        return true;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateUsers", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean generateUsers() {        users = userRepository.findAll();        if (users.size() > 1) {            log.info(\"Users were already generated\");            return false;        }        return generateRandomUsers();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateRandomUsers", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean generateRandomUsers() {        Authority userAuthority = authorityRepository.findById(USER_ROLE).orElse(null);        if (userAuthority == null) {            log.info(\"Users generation was skipped because authorities generation is not finished yet\");            return false;        }        log.info(\"Start generating {} users\", numberOfUsers);        HashSet<Authority> userAuthorities = new HashSet<>();        userAuthorities.add(userAuthority);        List<User> batchedUser = new LinkedList<>();        for (int i = 0; i < numberOfUsers; i++) {            if (i % batchSize == 0) {                userRepository.saveAll(batchedUser);                batchedUser.clear();            }            User user = new User();            user.setFirstName(faker.name().firstName());            user.setLastName(faker.name().lastName());            String login = faker.name().username() + i;            if (i < 5) {                user.setLogin(\"user\" + i);            } else {                user.setLogin(login);            }            user.setEmail(login + \"@gmail.com\");            user.setPassword(DEFAULT_USER_PASSWORD);            user.setActivated(true);            user.setAuthorities(userAuthorities);            user.setBankAccountIBAN(DEFAULT_IBAN);            user.setStripeAccountId(paymentService.createPaymentAccount(user.getEmail(), user.getBankAccountIBAN()));            user.setStripeAccountVerified(true);            User savedUser = userRepository.save(user);            batchedUser.add(savedUser);            users.add(savedUser);        }        userRepository.saveAll(batchedUser);        log.info(\"Generated {} users\", numberOfUsers);        return true;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateGardenFields", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean generateGardenFields() {        if (gardenFieldRepository.count() > 0) {            log.info(\"Gardenfields were already generated\");            return false;        }        if (users.size() < numberOfUsers) {            log.info(\"Skipping gardenfield generation because users generation is not finished yet or an other instance is working on the data generation\");            return false;        }        log.info(\"Start generating {} gardenfields\", numberOfGardenFields);        List<GardenField> gardenFieldBatch = new LinkedList<>();        SecureRandom random = new SecureRandom();        for (int i = 0; i < numberOfGardenFields; i++) {            if (i % batchSize == 0) {                gardenFieldRepository.saveAll(gardenFieldBatch);                gardenFieldBatch.clear();            }            GardenField gardenField = new GardenField();            gardenField.setName(faker.app().name());            String description = faker.lorem().paragraph(faker.number().numberBetween(3, 12));            if (description.length() > 1000) {                description = description.substring(0, 1000);            }            gardenField.setDescription(description);            gardenField.setSizeInM2(faker.number().randomDouble(2, 3, 400));            gardenField.setPricePerM2(random.nextDouble() * 1.8 / 50);            gardenField.setLatitude((random.nextDouble() / 6) + 48.116);            gardenField.setLongitude((random.nextDouble() / 2.5) + 16.18);            gardenField.setCity(faker.address().city());            gardenField.setElectricity(faker.bool().bool());            gardenField.setWater(faker.bool().bool());            gardenField.setHigh(faker.bool().bool());            gardenField.setGlassHouse(faker.bool().bool());            gardenField.setRoofed(faker.bool().bool());            gardenField.setOwner(users.get(faker.number().numberBetween(0, users.size() - 1)));            gardenField = gardenFieldRepository.save(gardenField);            gardenFieldBatch.add(gardenField);            gardenFields.add(gardenField);        }        log.info(\"Generated {} gardenfields\", gardenFields.size());        return true;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateGardenFieldImages", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean generateGardenFieldImages() {        try {            log.info(\"Start generating gardenfield images for {} gardenfields\", gardenFields.size());            List<Path> allDummyImage = getAllDummyImage();            Set<Long> skippedIds = new HashSet<>();            for (GardenField gardenField : this.gardenFields) {                Path gardenFieldPath = this.imageStoragePath.resolve(String.valueOf(gardenField.getId()));                Path thumbnailPath = gardenFieldPath.resolve(this.thumbnailFolderName);                if (gardenFieldPath.toFile().exists()) {                    skippedIds.add(gardenField.getId());                    continue;                }                Files.createDirectories(gardenFieldPath);                Files.createDirectories(thumbnailPath);                List<Path> randomlySelectedImages = selectRandomImages(allDummyImage);                List<String> generatedFilenames = generateImagesForGardenField(gardenFieldPath, randomlySelectedImages);                if (generatedFilenames.size() > 0) {                    gardenField.setCoverImage(generatedFilenames.get(0));                    gardenFieldRepository.save(gardenField);                }            }            log.info(\"Generated images for {} gardenfields and skipped generation for {} gardenfields {}\", gardenFields.size() -  skippedIds.size(), skippedIds.size(), skippedIds );            return true;        } catch (Exception e) {            log.error(\"Generating gardenfield images FAILED\", e);            return false;        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllDummyImage", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "List<Path>", "snippet": "    private List<Path> getAllDummyImage() throws Exception {        try {            URL dummyImagesResource = this.classLoader.getResource(\"dummy-images\");            Path dummyImagesPath = Paths.get(Objects.requireNonNull(dummyImagesResource).toURI());            return Files.walk(dummyImagesPath, 1).filter(Files::isRegularFile).collect(Collectors.toList());        } catch (Exception ex) {            throw new Exception(\"Could not read all filenames of dummy images in resource folder\", ex);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectRandomImages", "params": ["List<Path>"], "throws": null, "modifiers": ["private"], "return_type": "List<Path>", "snippet": "    private List<Path> selectRandomImages(List<Path> allImages) {        int imageCount = Math.min(allImages.size(), faker.number().numberBetween(this.minNumberOfImagesPerGardenField, this.maxNumberOfImagesPerGardenField + 1)); // plus one because the nextInt bound is exclusive        return random.ints(0, allImages.size()).distinct().limit(imageCount)            .mapToObj(allImages::get)            .collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateImagesForGardenField", "params": ["Path", "List<Path>"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> generateImagesForGardenField(Path gardenFieldPath, List<Path> randomlySelectedImages) throws IOException {        List<String> savedImages = new ArrayList<>();        for (Path dummyImagePath : randomlySelectedImages) {            Path dummyThumbnailImagePath = dummyImagePath.getParent().resolve(this.thumbnailFolderName).resolve(dummyImagePath.getFileName());            String fileExtension = FilenameUtils.getExtension(dummyImagePath.getFileName().toString());            String newFilename = String.format(\"%s.%s\", UUID.randomUUID(), fileExtension);            Path targetImagePath = gardenFieldPath.resolve(newFilename);            Path targetThumbnailImagePath = gardenFieldPath.resolve(this.thumbnailFolderName).resolve(newFilename);            Files.copy(dummyImagePath, targetImagePath, StandardCopyOption.REPLACE_EXISTING);            Files.copy(dummyThumbnailImagePath, targetThumbnailImagePath, StandardCopyOption.REPLACE_EXISTING);            savedImages.add(newFilename);        }        return savedImages;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateLeasings", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean generateLeasings() {        if (leasingRepository.count() > 0) {            log.info(\"Leasings were already generated\");            return false;        }        if (users.size() < numberOfUsers || gardenFields.size() < numberOfGardenFields) {            log.info(\"Skipping leasing generation because users or gardenfields are missing or an other instance is working on the data generation\");            return false;        }        log.info(\"Generating {} leasing entries\", numberOfReservedLeasings + numberOfOpenLeasings);        List<Leasing> leasings = new LinkedList<>();        for (int i = 0; i < numberOfOpenLeasings; i++) {            if (i % batchSize == 0) {                leasingRepository.saveAll(leasings);                leasings.clear();            }            Leasing leasing = new Leasing();            leasing.setFrom(faker.date().future(10, TimeUnit.DAYS).toInstant());            leasing.setTo(faker.date().future(100, TimeUnit.DAYS, Date.from(leasing.getFrom())).toInstant());            leasing.setGardenField(gardenFields.get(faker.number().numberBetween(0, gardenFields.size() - 1)));            leasing.setStatus(LeasingStatus.OPEN);            leasing.setUser(users.get(faker.number().numberBetween(0, users.size() - 1)));            leasing.setPaymentSessionId(\"cs_test_m5CBqcXSIJeKW7Ijb5vp8D9BrvDlJ6lRn25m6BdTZ0a1cLbIz5xVQ7bX\");            leasings.add(leasing);        }        leasingRepository.saveAll(leasings);        leasings.clear();        //create reserved leasings for the future        int reservedLeasingForThisGardenfield = numberOfReservedLeasings / gardenFields.size();        int remainingLeasings = (numberOfReservedLeasings % gardenFields.size()) + (gardenFields.size() % 2 == 0 ? 0 : -1);        for (int i = 0; i < gardenFields.size(); i++) {            int leasingCount = reservedLeasingForThisGardenfield + (i < remainingLeasings ? 1 : 0) + (i % 2 == 0 ? 1 : -1);            Instant start = faker.date().future(7, TimeUnit.DAYS).toInstant();            for (int j = 0; j < leasingCount; j++) {                start = start.plus(Duration.ofDays(faker.number().numberBetween(1, 180)));                Leasing leasing = new Leasing();                leasing.setStatus(LeasingStatus.RESERVED);                leasing.setFrom(start);                start = start.plus(Duration.ofDays(faker.number().numberBetween(100, 450)));                leasing.setTo(start);                leasing.setGardenField(gardenFields.get(i));                leasing.setUser(users.get(faker.number().numberBetween(0, users.size() - 1)));                leasing.setPaymentSessionId(\"cs_test_m5CBqcXSIJeKW7Ijb5vp8D9BrvDlJ6lRn25m6BdTZ0a1cLbIz5xVQ7bX\");                leasings.add(leasing);                if (leasings.size() >= batchSize) {                    leasingRepository.saveAll(leasings);                    leasings.clear();                }            }        }        leasingRepository.saveAll(leasings);        log.info(\"Generated {} leasings\", leasingRepository.count());        return true;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateMessages", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean generateMessages() {        if (messageRepository.count() > 0) {            log.info(\"Messages were already generated\");            return false;        }        if (users.size() < numberOfUsers) {            log.info(\"Skipping message generation because users generation is not finished or an other instance is working on the data generation\");            return false;        }        log.info(\"Generating {} messages in {} threads\", numberOfMessages, numberOfMessagesThreads);        HashMap<Long, Set<Long>> threadsWithOtherUsers = new HashMap<>();        for (int i = 0; i < numberOfMessagesThreads; i++) {            UUID threadId = UUID.fromString(faker.internet().uuid());            User userFrom = users.get(faker.number().numberBetween(0, users.size() - 1));            User userTo = users.get(faker.number().numberBetween(0, users.size() - 1));            while (userFrom.equals(userTo)) {                userTo = users.get(faker.number().numberBetween(0, users.size() - 1));            }            while (threadsWithOtherUsers.get(userFrom.getId()) != null && threadsWithOtherUsers.get(userFrom.getId()).contains(userTo.getId())) {                userFrom = users.get(faker.number().numberBetween(0, users.size() - 1));                userTo = users.get(faker.number().numberBetween(0, users.size() - 1));                while (userFrom.equals(userTo)) {                    userTo = users.get(faker.number().numberBetween(0, users.size() - 1));                }            }            // Make sure there are not two or more threads between two users            threadsWithOtherUsers.putIfAbsent(userFrom.getId(), new HashSet<>());            threadsWithOtherUsers.putIfAbsent(userTo.getId(), new HashSet<>());            threadsWithOtherUsers.get(userFrom.getId()).add(userTo.getId());            threadsWithOtherUsers.get(userTo.getId()).add(userFrom.getId());            List<Message> messages = new LinkedList<>();            for (int j = 0; j < numberOfMessages; j++) {                if (j % batchSize == 0) {                    messageRepository.saveAll(messages);                    messages.clear();                }                Message message = new Message();                message.setThread(threadId);                message.setContent(faker.lorem().sentence(faker.number().numberBetween(1, 5)));                message.setType(MessageType.USER);                User firstUser = faker.bool().bool() ? userTo : userFrom;                message.setUserFrom(firstUser);                message.setUserTo(firstUser.getId().equals(userFrom.getId()) ? userTo : userFrom);                message.setCreatedDate(faker.date().past(21600, TimeUnit.MINUTES).toInstant()); //Random timestamp up to 15 days in the past                message.setLastModifiedDate(message.getCreatedDate());                message.setOpened(false);                messages.add(message);            }            messageRepository.saveAll(messages);        }        log.info(\"Generated all messages\");        return true;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/DataGenerator.java", "stars": "2", "class": {"name": "DataGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSubtree", "params": ["TreeNode", "TreeNode"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSubtree(TreeNode s, TreeNode t) {        if(s == null || t == null) {            return false;        }        if(s.val == t.val && isEqual(s, t)) {            return true;        }        return isSubtree(s.left, t) || isSubtree(s.right, t);    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/SubtreeOfAnotherTree.java", "stars": "1", "class": {"name": "SubtreeOfAnotherTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEqual", "params": ["TreeNode", "TreeNode"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isEqual(TreeNode s, TreeNode t) {        if(s == null && t == null) {            return true;        }        if(s == null || t == null) {            return false;        }        return s.val == t.val && isEqual(s.left, t.left) && isEqual(s.right, t.right);    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/SubtreeOfAnotherTree.java", "stars": "1", "class": {"name": "SubtreeOfAnotherTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "paintComponent", "params": ["Graphics"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void paintComponent(Graphics g) {        Graphics2D g2 = (Graphics2D) g;        super.paintComponent(g2);        for (int i = 0; i < data.length; i++) {            if (cur == i)                g2.setColor(Color.ORANGE);            else                g2.setColor(Color.GRAY);            if (count == 0) {                g2.setColor(Color.RED);// starter screen will be look different            }            g2.drawLine(i, HEIGHT, i, HEIGHT - data[i]);        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "delay", "params": ["long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void delay(long nanoseconds) {// dont use thread due to speed Thread's are too slow        long timeElapsed;        final long startTime = System.nanoTime();        do {            timeElapsed = System.nanoTime() - startTime;        } while (timeElapsed < nanoseconds);    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "startSorting", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startSorting(String sortingAlgorithm) {        switch (sortingAlgorithm) {            case \"Bubble Sort\":                bubbleSort(data);                break;            case \"Quicksort\":                quickSort(data, 0, data.length - 1);                break;            case \"Heapsort\":                heapSort(data);                break;            case \"Insertion Sort\":                insertionSort(data);                break;            case \"Merge Sort\":                mergeSort(data, 0, data.length - 1);                break;            case \"Radix Sort\":                radixSort(data, data.length);                break;            case \"Cocktail Sort\":                cocktailSort(data);                break;        }        cur = -1;//delete the current pointer to dont point orange        System.out.println(count);        repaint();        restart.setVisible(true);    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "bubbleSort", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void bubbleSort(int[] arr) {        int n = arr.length;        for (int i = 0; i < n - 1; i++) {            for (int j = 0; j < n - i - 1; j++) {                if (arr[j] > arr[j + 1]) {                    // swap arr[j+1] and arr[i]                    int temp = arr[j];                    arr[j] = arr[j + 1];                    arr[j + 1] = temp;                }                cur = j;                repaint();                delay(10_000);            }        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "cocktailSort", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cocktailSort(int[] a) {        boolean swapped = true;        int start = 0;        int end = a.length;        while (swapped) {            // reset the swapped flag on entering the             // loop, because it might be true from a             // previous iteration.             swapped = false;            // loop from bottom to top same as             // the bubble sort             for (int i = start; i < end - 1; ++i) {                swapped = isSwapped(a, swapped, i);            }            // if nothing moved, then array is sorted.             if (!swapped)                break;            // otherwise, reset the swapped flag so that it             // can be used in the next stage             swapped = false;            // move the end point back by one, because             // item at the end is in its rightful spot             end = end - 1;            // from top to bottom, doing the             // same comparison as in the previous stage             for (int i = end - 1; i >= start; i--) {                swapped = isSwapped(a, swapped, i);            }            // increase the starting point, because             // the last stage would have moved the next             // smallest number to its rightful spot.             start = start + 1;        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "isSwapped", "params": ["int", "boolean", "int"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isSwapped(int[] a, boolean swapped, int i) {        if (a[i] > a[i + 1]) {            int temp = a[i];            a[i] = a[i + 1];            a[i + 1] = temp;            cur = i;            repaint();            delay(10_000);            swapped = true;        }        return swapped;    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "merge", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void merge(int[] arr, int l, int m, int r) {        // Find sizes of two subarrays to be merged        int n1 = m - l + 1;        int n2 = r - m;        /* Create temp arrays */        int[] L = new int[n1];        int[] R = new int[n2];        /*Copy data to temp arrays*/        if (n1 >= 0) System.arraycopy(arr, l, L, 0, n1);        for (int j = 0; j < n2; ++j)            R[j] = arr[m + 1 + j];        /* Merge the temp arrays */        // Initial indexes of first and second subarrays        int i = 0, j = 0;        // Initial index of merged subarry array        int k = l;        while (i < n1 && j < n2) {            if (L[i] <= R[j]) {                arr[k] = L[i];                cur = k;                repaint();                delay(1_500_000);                i++;            } else {                cur = k;                repaint();                delay(1_500_000);                arr[k] = R[j];                j++;            }            k++;        }        /* Copy remaining elements of L[] if any */        while (i < n1) {            arr[k] = L[i];            cur = k;            repaint();            delay(1_500_000);            i++;            k++;        }        /* Copy remaining elements of R[] if any */        while (j < n2) {            arr[k] = R[j];            j++;            k++;        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "mergeSort", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void mergeSort(int[] arr, int l, int r) {        if (l < r) {            // Find the middle point            int m = (l + r) / 2;            // Sort first and second halves            cur = m;            repaint();            delay(3_000_000);            mergeSort(arr, l, m);            mergeSort(arr, m + 1, r);            // Merge the sorted halves            merge(arr, l, m, r);        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "insertionSort", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void insertionSort(int[] arr) {        int n = arr.length;        for (int i = 1; i < n; ++i) {            int key = arr[i];            int j = i - 1;            /* Move elements of arr[0..i-1], that are               greater than key, to one position ahead               of their current position */            while (j >= 0 && arr[j] > key) {                arr[j + 1] = arr[j];                j = j - 1;                cur = j;                repaint();                delay(10_000);            }            arr[j + 1] = key;        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "partition", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int partition(int[] arr, int low, int high) {        int pivot = arr[high];        int i = (low - 1); // index of smaller element        for (int j = low; j < high; j++) {            // If current element is smaller than the pivot            if (arr[j] < pivot) {                i++;                // swap arr[i] and arr[j]                int temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;                cur = j;                repaint();                delay(1_000_000);            }        }        // swap arr[i+1] and arr[high] (or pivot)        cur = i;        repaint();        delay(1_000_000);        int temp = arr[i + 1];        arr[i + 1] = arr[high];        arr[high] = temp;        return i + 1;    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "quickSort", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void quickSort(int[] arr, int low, int high) {        if (low < high) {            /* pi is partitioning index, arr[pi] is              now at right place */            int pi = partition(arr, low, high);            // Recursively sort elements before            // partition and after partition            cur = pi;            repaint();            delay(10_000_000);            quickSort(arr, low, pi - 1);            quickSort(arr, pi + 1, high);        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "heapSort", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void heapSort(int[] arr) {        int n = arr.length;        // Build heap (rearrange array)        for (int i = n / 2 - 1; i >= 0; i--)            heapify(arr, n, i);        // One by one extract an element from heap        for (int i = n - 1; i > 0; i--) {            // Move current root to end            int temp = arr[0];            arr[0] = arr[i];            arr[i] = temp;            cur = i;            repaint();            delay(1_000_000);            // call max heapify on the reduced heap            heapify(arr, i, 0);        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "heapify", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void heapify(int[] arr, int n, int i) {        int largest = i; // Initialize largest as root        int l = 2 * i + 1; // left = 2*i + 1        int r = 2 * i + 2; // right = 2*i + 2        // If left child is larger than root        if (l < n && arr[l] > arr[largest])            largest = l;        // If right child is larger than largest so far        if (r < n && arr[r] > arr[largest])            largest = r;        // If largest is not root        if (largest != i) {            int swap = arr[i];            arr[i] = arr[largest];            arr[largest] = swap;            cur = i;            repaint();            delay(1_000_000);            // Recursively heapify the affected sub-tree            heapify(arr, n, largest);        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "getMax", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getMax(int[] arr, int n) {        int mx = arr[0];        for (int i = 1; i < n; i++)            if (arr[i] > mx)                mx = arr[i];        return mx;    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "countSort", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void countSort(int[] arr, int n, int exp) {        int[] output = new int[n]; // output array        int i;        int[] countarr = new int[10];        Arrays.fill(countarr, 0);        // Store count of occurrences in countarr[]        for (i = 0; i < n; i++)            countarr[(arr[i] / exp) % 10]++;        // Change countarr[i] so that countarr[i] now contains        // actual position of this digit in output[]        for (i = 1; i < 10; i++)            countarr[i] += countarr[i - 1];        // Build the output array        for (i = n - 1; i >= 0; i--) {            output[countarr[(arr[i] / exp) % 10] - 1] = arr[i];            countarr[(arr[i] / exp) % 10]--;        }        // Copy the output array to arr[], so that arr[] now        // contains sorted numbers according to curent digit        for (i = 0; i < n; i++) {            arr[i] = output[i];            cur = i;            repaint();            delay(2_000_000);        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "radixSort", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void radixSort(int[] arr, int n) {        // Find the maximum number to know number of digits        int m = getMax(arr, n);        // Do counting sort for every digit. Note that instead        // of passing digit number, exp is passed. exp is 10^i        // where i is current digit number        for (int exp = 1; m / exp > 0; exp *= 10)            countSort(arr, n, exp);    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "randomize", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void randomize(int[] arr) {        for (int i = 0; i < arr.length; i++) {            arr[i] = (int) (Math.random() * 720);        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void actionPerformed(ActionEvent e) {        String command = e.getActionCommand();        if (command.equals(\"Start\") && count == 0) {            restart.setVisible(false);            starter.setVisible(false);// i dont want to see after i click            algorithms.setVisible(false);            count++;            new Thread() {                @Override                public void run() {                    super.run();                    startSorting(String.valueOf(algorithms.getSelectedItem()));                }            }.start();        }        if (command.equals(\"Restart\")) {            restart.setVisible(false);            starter.setVisible(true);            algorithms.setVisible(true);            count = 0;            randomize(data);            repaint();        }    }", "url": "https://raw.githubusercontent.com/ozanmujde/Visual-Sorting/master/Printer.java", "stars": "2", "class": {"name": "Printer", "extends": "JComponent", "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "getBlock", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Block", "snippet": "    public static Block getBlock(String shape){        Block block = BLOCK_MAP.get(shape);        if(block == null){            block = new BlockImpl(shape);            BLOCK_MAP.put(shape,block);        }        return block;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/flyweight/BlockFactory.java", "stars": "2", "class": {"name": "BlockFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "multiple_package", "snippet": "    public static multiple_package newInstance() {        multiple_package fragment = new multiple_package();        return fragment;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/multiple_package.java", "stars": "2", "class": {"name": "multiple_package", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/multiple_package.java", "stars": "2", "class": {"name": "multiple_package", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        if (!((MainActivity)getActivity()).isNetworkAvailable(getContext()))        {            Toast.makeText(getContext(),\"No Internet Connectivity\",Toast.LENGTH_LONG).show();            getActivity().finish();        }        View view= inflater.inflate(R.layout.fragment_multiple_package, container, false);        ((MainActivity)getActivity()).show_menu();        pbar=view.findViewById(R.id.progress);        mainview=view.findViewById(R.id.main_view);        recyclerView = view.findViewById(R.id.package_list);        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));        recyclerViewAdapter = new RecyclerViewAdapter(getActivity(), packages);        recyclerView.setAdapter(recyclerViewAdapter);        Retrofit retrofit = new Retrofit.Builder().baseUrl(APIUrl.BASE_URL).                addConverterFactory(GsonConverterFactory.create()).build();        APIService service = retrofit.create(APIService.class);        Call<List<Holiday_Package>> call = service.getholiday_packages(\"get_packages\");        call.enqueue(new Callback<List<Holiday_Package>>() {            @Override            public void onResponse(Call<List<Holiday_Package>> call, Response<List<Holiday_Package>> response) {                packages = (ArrayList) response.body();                recyclerViewAdapter.setmultiplePackages(packages);                recyclerViewAdapter.notifyDataSetChanged();                mainview.setVisibility(View.VISIBLE);                pbar.setVisibility(View.GONE);            }            @Override            public void onFailure(Call<List<Holiday_Package>> call, Throwable t) {                Log.e(\"Error\", t.getMessage());            }        });        return view;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/multiple_package.java", "stars": "2", "class": {"name": "multiple_package", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/multiple_package.java", "stars": "2", "class": {"name": "multiple_package", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/multiple_package.java", "stars": "2", "class": {"name": "multiple_package", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws Exception {\t\tApplicationContext context = SpringApplication.run(SampleBitronixApplication.class, args);\t\tAccountService service = context.getBean(AccountService.class);\t\tAccountRepository repository = context.getBean(AccountRepository.class);\t\tservice.createAccountAndNotify(\"josh\");\t\tSystem.out.println(\"Count is \" + repository.count());\t\ttry {\t\t\tservice.createAccountAndNotify(\"error\");\t\t}\t\tcatch (Exception ex) {\t\t\tSystem.out.println(ex.getMessage());\t\t}\t\tSystem.out.println(\"Count is \" + repository.count());\t\tThread.sleep(100);\t\t((Closeable) context).close();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jta-bitronix/src/main/java/smoketest/bitronix/SampleBitronixApplication.java", "stars": "47572", "class": {"name": "SampleBitronixApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["WebDataBinder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(WebDataBinder binder) {\t\tbinder.addValidators(ccSoEhValidoParaCartaoOnlineValidator,pagamentoValidoParaUsuarioRestauranteValidator);\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/NovoPagamentoController.java", "stars": "9", "class": {"name": "NovoPagamentoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["NovoPagamentoForm"], "throws": null, "modifiers": ["public"], "return_type": "CompletableFuture<?>", "snippet": "\tpublic CompletableFuture<?> execute(@Valid NovoPagamentoForm form) {\t\t/*\t\t * Round 1\t\t * para aquela forma de pagamento eu acho quem vai processar(gateway,acquirer,sub...) a transacao\t\t * pode ser uma lista de processadores ordenada pelo custo em cima da transacao\t\t * pega o primeiro e processa a transacao\t\t * registra o valor da tx que foi levado pelo processador\t\t \t\t * \t\t */\t\t\t\t/*\t\t * Round 2\t\t * O retorno pode ser refatorado para uma completable future\t\t */\t\t\t\t/*\t\t * Round 3\t\t * todo processamento tem timeout. Passou do timeout, vai para o pr\u00f3ximo. \t\t */\t\t\t\t/*\t\t * Round 4, traz o spring reactive?\t\t */\t\t\t\tTentativaPagamento tentativaPagamento =  form.toModel(manager,usuarioRepository);\t\tCompletableFuture<Transacao> resultado = todosProcessadores.paga(tentativaPagamento);\t\t//grava transacao\t\t\t\treturn resultado.thenApply(transacao -> {\t\t\tif(transacao.deuCerto()) {\t\t\t\treturn ResponseEntity.ok().build();\t\t\t}\t\t\t\t\t\treturn ResponseEntity.status(403).build();\t\t});\t\t\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/NovoPagamentoController.java", "stars": "9", "class": {"name": "NovoPagamentoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "randomSeed", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "\tpublic static long randomSeed() {\t\tlong seed = seedUniquifier.incrementAndGet() + System.nanoTime();\t\tseed ^= seed >>> 33;\t\tseed *= 0xff51afd7ed558ccdL;\t\tseed ^= seed >>> 33;\t\tseed *= 0xc4ceb9fe1a85ec53L;\t\tseed ^= seed >>> 33;\t\treturn seed;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "next", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "\tprotected int next( int bits ) {\t\treturn (int)( nextLong() & ( 1L << bits ) - 1 );\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextLong", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long nextLong() {\t\tx ^= x << 23;\t\tx ^= x >>> 52;\t\treturn 2685821657736338717L * ( x ^= ( x >>> 17 ) );\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextInt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int nextInt() {\t\treturn (int)nextLong();\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextInt", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int nextInt( final int n ) {        //if ( n <= 0 ) throw new IllegalArgumentException();\t\t// No special provision for n power of two: all our bits are good.        return (int)( ( nextLong() >>> 1 ) % n );\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextLong", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long nextLong( final long n ) {        //if ( n <= 0 ) throw new IllegalArgumentException();\t\t// No special provision for n power of two: all our bits are good.\t\tfor(;;) {\t\t\tfinal long bits = nextLong() >>> 1;\t\t\tfinal long value = bits % n;\t\t\tif ( bits - value + ( n - 1 ) >= 0 ) return value;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextDouble", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\t public double nextDouble() {\t\treturn ( nextLong() & DOUBLE_MASK ) * NORM_53;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextFloat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "\tpublic float nextFloat() {\t\treturn (float)( ( nextLong() & FLOAT_MASK ) * NORM_24 );\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextBoolean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean nextBoolean() {\t\treturn ( nextLong() & 1 ) != 0;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextBytes", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void nextBytes( final byte[] bytes ) {\t\tint i = bytes.length, n = 0;\t\twhile( i != 0 ) {\t\t\tn = Math.min( i, 8 );\t\t\tfor ( long bits = nextLong(); n-- != 0; bits >>= 8 ) bytes[ --i ] = (byte)bits;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSeed", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setSeed( final long seed ) {\t\tx = seed == 0 ? -1 : seed;\t\tnextLong(); // Warmup.\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/XorShiftStarRandom.java", "stars": "2", "class": {"name": "XorShiftStarRandom", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kosongkan_foam", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void kosongkan_foam(){    txtKodeMobil.setEditable(true);     txtKodeMobil.setText(null);    txtNamaMobil.setText(null);    txtKodeKonsumen.setText(null);    txtPlatMobil.setText(null);    txtKerusakan.setText(null);    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "tampilkan_data", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tampilkan_data(){                DefaultTableModel model = new DefaultTableModel();        model.addColumn(\"No.\");        model.addColumn(\"Kode Mobil\");        model.addColumn(\"Nama Mobil\");        model.addColumn(\"Kode Konsumen\");        model.addColumn(\"Plat Mobil\");        model.addColumn(\"Kerusakan\");                        try{            int no = 1;            String sql = \"SELECT * FROM tb_mobil\";            java.sql.Connection conn = (Connection)koneksi.getkoneksi();            java.sql.Statement stm = conn.createStatement();            java.sql.ResultSet res = stm.executeQuery(sql);                        while(res.next()){                model.addRow(new Object[]{no++,res.getString(1),res.getString(2),res.getString(3),res.getString(4),res.getString(5)});            }            tabelMobil.setModel(model);        }catch (SQLException e){            System.out.println(\"Error : \" + e.getMessage());        }            }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "initComponents", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initComponents() {        jLabel1 = new javax.swing.JLabel();        jLabel2 = new javax.swing.JLabel();        jLabel3 = new javax.swing.JLabel();        jLabel4 = new javax.swing.JLabel();        jLabel5 = new javax.swing.JLabel();        jLabel6 = new javax.swing.JLabel();        txtKodeMobil = new javax.swing.JTextField();        txtNamaMobil = new javax.swing.JTextField();        txtKodeKonsumen = new javax.swing.JTextField();        txtPlatMobil = new javax.swing.JTextField();        txtKerusakan = new javax.swing.JTextField();        btTambah = new javax.swing.JButton();        btSimpan = new javax.swing.JButton();        btHapus = new javax.swing.JButton();        btEdit = new javax.swing.JButton();        btKeluar = new javax.swing.JButton();        jScrollPane1 = new javax.swing.JScrollPane();        tabelMobil = new javax.swing.JTable();        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());        jLabel1.setFont(new java.awt.Font(\"Tahoma\", 0, 36)); // NOI18N        jLabel1.setText(\"MOBIL\");        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(268, 11, -1, -1));        jLabel2.setText(\"Kode Mobil\");        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 92, -1, -1));        jLabel3.setText(\"Nama Mobil\");        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 130, -1, -1));        jLabel4.setText(\"Kode Konsumen\");        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 168, -1, -1));        jLabel5.setText(\"Plat Mobil\");        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 206, -1, -1));        jLabel6.setText(\"Kerusakan\");        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 244, -1, -1));        getContentPane().add(txtKodeMobil, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 86, 364, -1));        getContentPane().add(txtNamaMobil, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 124, 364, -1));        getContentPane().add(txtKodeKonsumen, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 162, 364, -1));        getContentPane().add(txtPlatMobil, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 200, 364, -1));        getContentPane().add(txtKerusakan, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 238, 364, 40));        btTambah.setText(\"Tambah\");        btTambah.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btTambahActionPerformed(evt);            }        });        getContentPane().add(btTambah, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 295, -1, -1));        btSimpan.setText(\"Simpan\");        btSimpan.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btSimpanActionPerformed(evt);            }        });        getContentPane().add(btSimpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 295, -1, -1));        btHapus.setText(\"Hapus\");        btHapus.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btHapusActionPerformed(evt);            }        });        getContentPane().add(btHapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(357, 295, -1, -1));        btEdit.setText(\"Edit\");        btEdit.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btEditActionPerformed(evt);            }        });        getContentPane().add(btEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 295, -1, -1));        btKeluar.setText(\"Keluar\");        btKeluar.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btKeluarActionPerformed(evt);            }        });        getContentPane().add(btKeluar, new org.netbeans.lib.awtextra.AbsoluteConstraints(438, 295, -1, -1));        tabelMobil.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null, null, null},                {null, null, null, null},                {null, null, null, null},                {null, null, null, null}            },            new String [] {                \"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\"            }        ));        tabelMobil.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                tabelMobilMouseClicked(evt);            }        });        jScrollPane1.setViewportView(tabelMobil);        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 336, -1, 106));        pack();    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btKeluarActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btKeluarActionPerformed        // TODO add your handling code here:        System.exit(0);    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btTambahActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTambahActionPerformed        // TODO add your handling code here:        kosongkan_foam();    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btSimpanActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSimpanActionPerformed        // TODO add your handling code here:        try{            String sql = \"INSERT INTO tb_mobil VALUES ('\"+txtKodeMobil.getText()+\"','\"+txtNamaMobil.getText()+\"','\"+txtKodeKonsumen.getText()+\"','\"+txtPlatMobil.getText()+\"','\"+txtKerusakan.getText()+\"')\";            java.sql.Connection conn = (Connection)koneksi.getkoneksi();            java.sql.PreparedStatement pstm = conn.prepareStatement(sql);            pstm.execute();            JOptionPane.showMessageDialog(null,\"Simpan data berhasil..\");            tampilkan_data();            kosongkan_foam();        }catch (HeadlessException | SQLException e){            JOptionPane.showMessageDialog(this,e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btEditActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditActionPerformed        // TODO add your handling code here:        try{            String sql = \"UPDATE tb_mobil SET kode_mobil='\"+txtKodeMobil.getText()+\"',nama_mobil='\"+txtNamaMobil.getText()+\"',kode_konsumen='\"+txtKodeKonsumen.getText()+\"',plat_mobil='\"+txtPlatMobil.getText()+\"',kerusakan='\"+txtKerusakan.getText()+\"' WHERE kode_mobil='\"+txtKodeMobil.getText()+\"'\";            java.sql.Connection conn = (Connection)koneksi.getkoneksi();            java.sql.PreparedStatement pstm = conn.prepareStatement(sql);            pstm.execute();            JOptionPane.showMessageDialog(null,\"Edit data berhasil..\");            tampilkan_data();            kosongkan_foam();        }catch(HeadlessException | SQLException e){            JOptionPane.showMessageDialog(this,e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btHapusActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHapusActionPerformed        // TODO add your handling code here:        try{            String sql = \"DELETE FROM tb_mobil WHERE kode_mobil='\"+txtKodeMobil.getText()+\"'\";            java.sql.Connection conn = (Connection)koneksi.getkoneksi();            java.sql.PreparedStatement pstm = conn.prepareStatement(sql);            pstm.execute();            JOptionPane.showMessageDialog(null,\"Edit data berhasil..\");            tampilkan_data();            kosongkan_foam();        }catch(HeadlessException | SQLException e){            JOptionPane.showMessageDialog(this,e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "tabelMobilMouseClicked", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tabelMobilMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelMobilMouseClicked        // TODO add your handling code here:        int baris = tabelMobil.rowAtPoint(evt.getPoint());        String mb = tabelMobil.getValueAt(baris, 1).toString();        txtKodeMobil.setText(mb);                String nmb = tabelMobil.getValueAt(baris, 2).toString();        txtNamaMobil.setText(nmb);                String ksmn = tabelMobil.getValueAt(baris, 3).toString();        txtKodeKonsumen.setText(ksmn);                String pm = tabelMobil.getValueAt(baris, 4).toString();        txtPlatMobil.setText(pm);                String krs = tabelMobil.getValueAt(baris, 5).toString();        txtKerusakan.setText(krs);                    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String args[]) {        /* Set the Nimbus look and feel */        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html          */        try {            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {                if (\"Nimbus\".equals(info.getName())) {                    javax.swing.UIManager.setLookAndFeel(info.getClassName());                    break;                }            }        } catch (ClassNotFoundException ex) {            java.util.logging.Logger.getLogger(tb_mobil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        } catch (InstantiationException ex) {            java.util.logging.Logger.getLogger(tb_mobil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        } catch (IllegalAccessException ex) {            java.util.logging.Logger.getLogger(tb_mobil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        } catch (javax.swing.UnsupportedLookAndFeelException ex) {            java.util.logging.Logger.getLogger(tb_mobil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        }        //</editor-fold>        /* Create and display the form */        java.awt.EventQueue.invokeLater(new Runnable() {            public void run() {                new tb_mobil().setVisible(true);            }        });    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_mobil.java", "stars": "2", "class": {"name": "tb_mobil", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "fromObject", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Edge", "snippet": "  public static Edge fromObject(final Object obj) {    final HashMap<String, Object> edgeObj = (HashMap<String, Object>) obj;    final String source = (String) edgeObj.get(\"source\");    final String target = (String) edgeObj.get(\"target\");    final String error = (String) edgeObj.get(\"error\");    final Edge edge = new Edge(source, target);    edge.setError(error);    if (edgeObj.containsKey(\"guides\")) {      final Map<String, Object> guideMap =          (Map<String, Object>) edgeObj.get(\"guides\");      final List<Object> values = (List<Object>) guideMap.get(\"values\");      final String type = (String) guideMap.get(\"type\");      final ArrayList<Point2D> valuePoints = new ArrayList<>();      for (final Object pointObj : values) {        final Map<String, Double> point = (Map<String, Double>) pointObj;        final Double x = point.get(\"x\");        final Double y = point.get(\"y\");        valuePoints.add(new Point2D.Double(x, y));      }      edge.setGuides(type, valuePoints);    }    return edge;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return getSourceId() + \">>\" + getTargetId();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSourceId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSourceId() {    return this.sourceId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTargetId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getTargetId() {    return this.targetId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getError", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getError() {    return this.error;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setError", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setError(final String error) {    this.error = error;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasError", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasError() {    return this.error != null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Node", "snippet": "  public Node getSource() {    return this.source;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSource", "params": ["Node"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSource(final Node source) {    this.source = source;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTarget", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Node", "snippet": "  public Node getTarget() {    return this.target;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTarget", "params": ["Node"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTarget(final Node target) {    this.target = target;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGuideType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getGuideType() {    return this.guideType;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGuideValues", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Point2D>", "snippet": "  public List<Point2D> getGuideValues() {    return this.guideValues;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGuides", "params": ["String", "List<Point2D>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setGuides(final String type, final List<Point2D> values) {    this.guideType = type;    this.guideValues = values;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toObject() {    final HashMap<String, Object> obj = new HashMap<>();    obj.put(\"source\", getSourceId());    obj.put(\"target\", getTargetId());    if (hasError()) {      obj.put(\"error\", this.error);    }    if (this.guideValues != null) {      final HashMap<String, Object> lineGuidesObj = new HashMap<>();      lineGuidesObj.put(\"type\", this.guideType);      final ArrayList<Object> guides = new ArrayList<>();      for (final Point2D point : this.guideValues) {        final HashMap<String, Double> pointObj = new HashMap<>();        pointObj.put(\"x\", point.getX());        pointObj.put(\"y\", point.getY());        guides.add(pointObj);      }      lineGuidesObj.put(\"values\", guides);      obj.put(\"guides\", lineGuidesObj);    }    return obj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Edge.java", "stars": "18", "class": {"name": "Edge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter_ElementViewHolder.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter_ElementViewHolder", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter_ElementViewHolder.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter_ElementViewHolder", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5668ServerSocket,\u548c\u7cfb\u7edf\u8981\u6307\u5b9a\u7684\u7aef\u53e3\u53f7        ServerSocket server = new ServerSocket(8080);        //\u4f7f\u7528accept\u65b9\u6cd5\u83b7\u53d6\u5230\u8bf7\u6c42\u7684\u5ba2\u6237\u7aef\u5bf9\u8c61(\u6d4f\u89c8\u5668)        Socket socket = server.accept();        //\u4f7f\u7528Socket\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5getInputStream,\u83b7\u53d6\u5230\u7f51\u7edc\u5b57\u8282\u8f93\u5165\u6d41InputStream\u5bf9\u8c61        InputStream is = socket.getInputStream();        //\u4f7f\u7528\u7f51\u7edc\u5b57\u8282\u8f93\u5165\u6d41InputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read\u8bfb\u53d6\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4fe1\u606f        /*byte[] bytes = new byte[1024];        int len = 0;        while((len = is.read(bytes))!=-1){            System.out.println(new String(bytes,0,len));        }*/        //\u628ais\u7f51\u7edc\u5b57\u8282\u8f93\u5165\u6d41\u5bf9\u8c61,\u8f6c\u6362\u4e3a\u5b57\u7b26\u7f13\u51b2\u8f93\u5165\u6d41        BufferedReader br = new BufferedReader(new InputStreamReader(is));        //\u628a\u5ba2\u6237\u7aef\u8bf7\u6c42\u4fe1\u606f\u7684\u7b2c\u4e00\u884c\u8bfb\u53d6\u51fa\u6765 GET /11_Net/web/index.html HTTP/1.1        String line = br.readLine();        //\u628a\u8bfb\u53d6\u7684\u4fe1\u606f\u8fdb\u884c\u5207\u5272,\u53ea\u8981\u4e2d\u95f4\u90e8\u5206 /11_Net/web/index.html        String[] arr = line.split(\" \");        //\u628a\u8def\u5f84\u524d\u8fb9\u7684/\u53bb\u6389,\u8fdb\u884c\u622a\u53d6 11_Net/web/index.html        String htmlpath = arr[1].substring(1);        //\u521b\u5efa\u4e00\u4e2a\u672c\u5730\u5b57\u8282\u8f93\u5165\u6d41,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8bfb\u53d6\u7684html\u8def\u5f84        FileInputStream fis = new FileInputStream(htmlpath);        //\u4f7f\u7528Socket\u4e2d\u7684\u65b9\u6cd5getOutputStream\u83b7\u53d6\u7f51\u7edc\u5b57\u8282\u8f93\u51fa\u6d41OutputStream\u5bf9\u8c61        OutputStream os = socket.getOutputStream();        // \u5199\u5165HTTP\u534f\u8bae\u54cd\u5e94\u5934,\u56fa\u5b9a\u5199\u6cd5        os.write(\"HTTP/1.1 200 OK\\r\\n\".getBytes());        os.write(\"Content-Type:text/html\\r\\n\".getBytes());        // \u5fc5\u987b\u8981\u5199\u5165\u7a7a\u884c,\u5426\u5219\u6d4f\u89c8\u5668\u4e0d\u89e3\u6790        os.write(\"\\r\\n\".getBytes());        //\u4e00\u8bfb\u4e00\u5199\u590d\u5236\u6587\u4ef6,\u628a\u670d\u52a1\u8bfb\u53d6\u7684html\u6587\u4ef6\u56de\u5199\u5230\u5ba2\u6237\u7aef        int len = 0;        byte[] bytes = new byte[1024];        while((len = fis.read(bytes))!=-1){            os.write(bytes,0,len);        }        //\u91ca\u653e\u8d44\u6e90        fis.close();        socket.close();        server.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/22.%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/11_Net/src/com/itheima/demo04/BSTCP/TCPServer.java", "stars": "2", "class": {"name": "TCPServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testInit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testInit() {        initializeBiz.initialize();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/test/java/InitTest.java", "stars": "7", "class": {"name": "InitTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetIP", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetIP() {        List<String> ipList = NetUtil.getLocalIPList();        System.out.println(ipList.stream().collect(Collectors.joining(\",\")));    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/test/java/InitTest.java", "stars": "7", "class": {"name": "InitTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdate() {        Map<String, String> diffMap = new HashMap<>(16);        diffMap.put(\"A-BCMP-peer2.YB02.cgb.cn\", \"192.168.43.206:8053\");        diffMap.put(\"A-BCMP-peer3.YB02.cgb.cn\", \"192.168.43.206:8054\");        String path = \"F:\\\\space30\\\\bcp-app-install\\\\bcp-install-main\\\\resources\\\\generateInstallPackage\\\\masterPackage\\\\backend\\\\bcp-app-mgr\\\\resources\\\\networkconfigs\\\\network-config.json\";        InitConfigEntity configEntity = new InitConfigEntity();        configEntity.setPeerDomain(\"YB02.cgb.cn\");        configEntity.setOrgMSPID(\"Org1MSP\");        configEntity.setOrgName(\"Org1\");        /*installBiz.addPeerFromNetworkConfig(path, diffMap, configEntity,null);*/    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/test/java/InitTest.java", "stars": "7", "class": {"name": "InitTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(OrderMain80.class,args);    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-consumer-order80/src/main/java/com/atguigu/springcloud/OrderMain80.java", "stars": "1", "class": {"name": "OrderMain80", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doUpdate", "params": ["MappedStatement", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLException {    final Configuration configuration = ms.getConfiguration();    final StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, RowBounds.DEFAULT, null, null);    final BoundSql boundSql = handler.getBoundSql();    final String sql = boundSql.getSql();    final Statement stmt;    if (sql.equals(currentSql) && ms.equals(currentStatement)) {      int last = statementList.size() - 1;      stmt = statementList.get(last);      applyTransactionTimeout(stmt);      handler.parameterize(stmt);//fix Issues 322      BatchResult batchResult = batchResultList.get(last);      batchResult.addParameterObject(parameterObject);    } else {      Connection connection = getConnection(ms.getStatementLog());      stmt = handler.prepare(connection, transaction.getTimeout());      handler.parameterize(stmt);    //fix Issues 322      currentSql = sql;      currentStatement = ms;      statementList.add(stmt);      batchResultList.add(new BatchResult(ms, sql, parameterObject));    }    handler.batch(stmt);    return BATCH_UPDATE_RETURN_VALUE;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchExecutor.java", "stars": "15", "class": {"name": "BatchExecutor", "extends": "BaseExecutor", "implements": null, "modifiers": ["public"]}}, {"method_name": "doQuery", "params": ["MappedStatement", "Object", "RowBounds", "ResultHandler", "BoundSql"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<E>", "snippet": "  public <E> List<E> doQuery(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)      throws SQLException {    Statement stmt = null;    try {      flushStatements();      Configuration configuration = ms.getConfiguration();      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameterObject, rowBounds, resultHandler, boundSql);      Connection connection = getConnection(ms.getStatementLog());      stmt = handler.prepare(connection, transaction.getTimeout());      handler.parameterize(stmt);      return handler.query(stmt, resultHandler);    } finally {      closeStatement(stmt);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchExecutor.java", "stars": "15", "class": {"name": "BatchExecutor", "extends": "BaseExecutor", "implements": null, "modifiers": ["public"]}}, {"method_name": "doQueryCursor", "params": ["MappedStatement", "Object", "RowBounds", "BoundSql"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "Cursor<E>", "snippet": "  protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql) throws SQLException {    flushStatements();    Configuration configuration = ms.getConfiguration();    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);    Connection connection = getConnection(ms.getStatementLog());    Statement stmt = handler.prepare(connection, transaction.getTimeout());    handler.parameterize(stmt);    Cursor<E> cursor = handler.queryCursor(stmt);    stmt.closeOnCompletion();    return cursor;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchExecutor.java", "stars": "15", "class": {"name": "BatchExecutor", "extends": "BaseExecutor", "implements": null, "modifiers": ["public"]}}, {"method_name": "doFlushStatements", "params": ["boolean"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<BatchResult>", "snippet": "  public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLException {    try {      List<BatchResult> results = new ArrayList<>();      if (isRollback) {        return Collections.emptyList();      }      for (int i = 0, n = statementList.size(); i < n; i++) {        Statement stmt = statementList.get(i);        applyTransactionTimeout(stmt);        BatchResult batchResult = batchResultList.get(i);        try {          batchResult.setUpdateCounts(stmt.executeBatch());          MappedStatement ms = batchResult.getMappedStatement();          List<Object> parameterObjects = batchResult.getParameterObjects();          KeyGenerator keyGenerator = ms.getKeyGenerator();          if (Jdbc3KeyGenerator.class.equals(keyGenerator.getClass())) {            Jdbc3KeyGenerator jdbc3KeyGenerator = (Jdbc3KeyGenerator) keyGenerator;            jdbc3KeyGenerator.processBatch(ms, stmt, parameterObjects);          } else if (!NoKeyGenerator.class.equals(keyGenerator.getClass())) { //issue #141            for (Object parameter : parameterObjects) {              keyGenerator.processAfter(this, ms, stmt, parameter);            }          }          // Close statement to close cursor #1109          closeStatement(stmt);        } catch (BatchUpdateException e) {          StringBuilder message = new StringBuilder();          message.append(batchResult.getMappedStatement().getId())              .append(\" (batch index #\")              .append(i + 1)              .append(\")\")              .append(\" failed.\");          if (i > 0) {            message.append(\" \")                .append(i)                .append(\" prior sub executor(s) completed successfully, but will be rolled back.\");          }          throw new BatchExecutorException(message.toString(), e, results, batchResult);        }        results.add(batchResult);      }      return results;    } finally {      for (Statement stmt : statementList) {        closeStatement(stmt);      }      currentSql = null;      statementList.clear();      batchResultList.clear();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchExecutor.java", "stars": "15", "class": {"name": "BatchExecutor", "extends": "BaseExecutor", "implements": null, "modifiers": ["public"]}}, {"method_name": "initChannel", "params": ["SocketChannel"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void initChannel(SocketChannel ch) {    ChannelPipeline channelPipeline = ch.pipeline();    ByteBuf delimiter = Unpooled.copiedBuffer(\"$_\", CharsetUtil.UTF_8);    channelPipeline.addLast(new StringDecoder(CharsetUtil.UTF_8));    channelPipeline.addLast(new StringEncoder(CharsetUtil.UTF_8));    channelPipeline.addLast(new DelimiterBasedFrameDecoder(1024, delimiter));    if (!Objects.isNull(sslContext)){      channelPipeline.addLast(sslContext.newHandler(ch.alloc()));    }    channelPipeline.addLast(new IdleStateHandler(45, 0, 0, TimeUnit.SECONDS));    channelPipeline.addLast(new NettyMonitorServerHandler());  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServerInitializer.java", "stars": "3", "class": {"name": "NettyMonitorServerInitializer", "extends": "ChannelInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransformer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ComplexTransformer", "snippet": "    public ComplexTransformer getTransformer() {        return transformer;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerInfo.java", "stars": "23", "class": {"name": "TransformerInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassLoader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ClassLoader", "snippet": "    public ClassLoader getClassLoader() {        return classLoader;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerInfo.java", "stars": "23", "class": {"name": "TransformerInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isNative", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNative() {        return isNative;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerInfo.java", "stars": "23", "class": {"name": "TransformerInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTransformer", "params": ["ComplexTransformer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTransformer(ComplexTransformer transformer) {        this.transformer = transformer;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerInfo.java", "stars": "23", "class": {"name": "TransformerInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setClassLoader", "params": ["ClassLoader"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setClassLoader(ClassLoader classLoader) {        this.classLoader = classLoader;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerInfo.java", "stars": "23", "class": {"name": "TransformerInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsNative", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsNative(boolean isNative) {        this.isNative = isNative;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerInfo.java", "stars": "23", "class": {"name": "TransformerInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "praseMessage", "params": ["ByteBuf"], "throws": null, "modifiers": ["public"], "return_type": "AbstractNetMessage", "snippet": "    public AbstractNetMessage praseMessage(ByteBuf byteBuf) {        NetMessageHead netMessageHead = new NetMessageHead();        byteBuf.skipBytes(2);        netMessageHead.setLength(byteBuf.readInt());        netMessageHead.setVersion(byteBuf.readByte());        AbstractNetMessage abstractNetMessage = new AbstractNetMessage();        short cmd = byteBuf.readShort();        netMessageHead.setCmd(cmd);        netMessageHead.setSerial(byteBuf.readInt());        NetMessageBody netMessageBody = new NetMessageBody();        int byteLength = byteBuf.readableBytes();        byte[] bytes = new byte[byteLength];        byteBuf.getBytes(byteBuf.readerIndex(), bytes);        netMessageBody.setBytes(bytes);        abstractNetMessage.setNetMessageHead(netMessageHead);        abstractNetMessage.setNetMessageBody(netMessageBody);        return abstractNetMessage;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_client/src/main/java/com/game/decoder/MessageDecoderFactory.java", "stars": "1", "class": {"name": "MessageDecoderFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, 'a', null);    verify(ps).setString(1, \"a\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java", "stars": "15", "class": {"name": "CharacterTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSetNullParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetNullParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, null, JdbcType.VARCHAR);    verify(ps).setNull(1, JdbcType.VARCHAR.TYPE_CODE);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java", "stars": "15", "class": {"name": "CharacterTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getString(\"column\")).thenReturn(\"a\");    assertEquals(Character.valueOf('a'), TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java", "stars": "15", "class": {"name": "CharacterTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getString(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java", "stars": "15", "class": {"name": "CharacterTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getString(1)).thenReturn(\"a\");    assertEquals(Character.valueOf('a'), TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java", "stars": "15", "class": {"name": "CharacterTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getString(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java", "stars": "15", "class": {"name": "CharacterTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getString(1)).thenReturn(\"a\");    assertEquals(Character.valueOf('a'), TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java", "stars": "15", "class": {"name": "CharacterTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getString(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java", "stars": "15", "class": {"name": "CharacterTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "initBinder", "params": ["WebDataBinder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initBinder(WebDataBinder webDataBinder) {        // TODO Auto-generated method stub        //\u8f6c\u6362\u65e5\u671f        DateFormat dateFormat=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");        webDataBinder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));    }", "url": "https://raw.githubusercontent.com/CPG123456/GymMS/master/ssm-02/src/main/java/com/cc/utils/convertDate.java", "stars": "6", "class": {"name": "convertDate", "extends": null, "implements": ["WebBindingInitializer"], "modifiers": ["public"]}}, {"method_name": "setDrawableVisible", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setDrawableVisible(boolean visible) {        if (mCurrentDrawable.isVisible() == visible) {            return;        }        mCurrentDrawable.setVisible(visible, false);        Drawable[] drawables = getCompoundDrawables();        setCompoundDrawablesRelative(                drawables[0],                drawables[1],                visible ? mCurrentDrawable : null,                drawables[3]);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/PasswordEditText.java", "stars": "1", "class": {"name": "PasswordEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "refreshDrawableStatus", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void refreshDrawableStatus() {        Drawable[] drawables = getCompoundDrawables();        setCompoundDrawablesRelative(                drawables[0],                drawables[1],                mCurrentDrawable,                drawables[3]);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/PasswordEditText.java", "stars": "1", "class": {"name": "PasswordEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "setOnFocusChangeListener", "params": ["OnFocusChangeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnFocusChangeListener(OnFocusChangeListener onFocusChangeListener) {        mOnFocusChangeListener = onFocusChangeListener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/PasswordEditText.java", "stars": "1", "class": {"name": "PasswordEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "setOnTouchListener", "params": ["OnTouchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnTouchListener(OnTouchListener onTouchListener) {        mOnTouchListener = onTouchListener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/PasswordEditText.java", "stars": "1", "class": {"name": "PasswordEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onFocusChange", "params": ["View", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFocusChange(View view, boolean hasFocus) {        if (hasFocus && getText() != null) {            setDrawableVisible(getText().length() > 0);        } else {            setDrawableVisible(false);        }        if (mOnFocusChangeListener != null) {            mOnFocusChangeListener.onFocusChange(view, hasFocus);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/PasswordEditText.java", "stars": "1", "class": {"name": "PasswordEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onTouch", "params": ["View", "MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTouch(View view, MotionEvent motionEvent) {        int x = (int) motionEvent.getX();        if (mCurrentDrawable.isVisible() && x > getWidth() - getPaddingRight() - mCurrentDrawable.getIntrinsicWidth()) {            if (motionEvent.getAction() == MotionEvent.ACTION_UP) {                if (mCurrentDrawable == mVisibleDrawable) {                    mCurrentDrawable = mInvisibleDrawable;                    // \u5bc6\u7801\u53ef\u89c1                    removeInputType(TYPE_INVISIBLE);                    addInputType(TYPE_VISIBLE);                    refreshDrawableStatus();                } else if (mCurrentDrawable == mInvisibleDrawable) {                    mCurrentDrawable = mVisibleDrawable;                    // \u5bc6\u7801\u4e0d\u53ef\u89c1                    removeInputType(TYPE_VISIBLE);                    addInputType(TYPE_INVISIBLE);                    refreshDrawableStatus();                }                Editable editable = getText();                if (editable != null) {                    setSelection(editable.toString().length());                }            }            return true;        }        return mOnTouchListener != null && mOnTouchListener.onTouch(view, motionEvent);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/PasswordEditText.java", "stars": "1", "class": {"name": "PasswordEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onTextChanged", "params": ["CharSequence", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTextChanged(CharSequence s, int start, int before, int count) {        if (isFocused()) {            setDrawableVisible(s.length() > 0);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/PasswordEditText.java", "stars": "1", "class": {"name": "PasswordEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "beforeTextChanged", "params": ["CharSequence", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void beforeTextChanged(CharSequence s, int start, int count, int after) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/PasswordEditText.java", "stars": "1", "class": {"name": "PasswordEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "afterTextChanged", "params": ["Editable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterTextChanged(Editable s) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/PasswordEditText.java", "stars": "1", "class": {"name": "PasswordEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(SpringBootJpaApplication.class, args);    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-jpa/src/main/java/com/soft1851/springboot/jpa/SpringBootJpaApplication.java", "stars": "3", "class": {"name": "SpringBootJpaApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "public static void main(String[] args) throws InterruptedException {\t\t\t\tSystem.setProperty(ChromeDriverService.CHROME_DRIVER_SILENT_OUTPUT_PROPERTY, \"true\");\t\t// System.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\tWebDriver driver = new ChromeDriver();\t\tString url = \"https://www.seleniumeasy.com/test/basic-radiobutton-demo.html\";\t\tdriver.get(url);\t\t\t\tList<WebElement> radioGender=driver.findElements(By.xpath(\"//input[@name='optradio']\"));\t\tSystem.out.println(radioGender.size());\t\tThread.sleep(2000);\t\tfor (int i = 0; i < radioGender.size(); i++) {\t\tString valueGen=radioGender.get(i).getAttribute(\"value\");\t\tif(valueGen.equalsIgnoreCase(\"Male\")) {\t\t\tradioGender.get(i).click();\t\t\tThread.sleep(2000);\t\t}\t\t\t\t\t}\t\tdriver.quit();}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class4/RadioButton.java", "stars": "3", "class": {"name": "RadioButton", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(String... args) {\t\tSystem.out.println(this.helloWorldService.getMessage());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-profile/src/main/java/smoketest/profile/SampleProfileApplication.java", "stars": "47572", "class": {"name": "SampleProfileApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleProfileApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-profile/src/main/java/smoketest/profile/SampleProfileApplication.java", "stars": "47572", "class": {"name": "SampleProfileApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "initDatabase", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "    static void initDatabase() throws Exception {        SqlSessionFactory sqlSessionFactory = getSqlSessionFactoryWithConstructor();        BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),                \"org/apache/ibatis/submitted/extends_with_constructor/CreateDB.sql\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/NpeExtendsTest.java", "stars": "15", "class": {"name": "NpeExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNoConstructorConfiguration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testNoConstructorConfiguration() {        Configuration configuration = new Configuration();        configuration.addMapper(StudentMapper.class);        configuration.addMapper(TeacherMapper.class);        configuration.getMappedStatementNames();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/NpeExtendsTest.java", "stars": "15", "class": {"name": "NpeExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testWithConstructorConfiguration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testWithConstructorConfiguration() {        Configuration configuration = new Configuration();        configuration.addMapper(StudentConstructorMapper.class);        configuration.addMapper(TeacherMapper.class);        configuration.getMappedStatementNames();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/NpeExtendsTest.java", "stars": "15", "class": {"name": "NpeExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryWithConstructor", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "SqlSessionFactory", "snippet": "    private static SqlSessionFactory getSqlSessionFactoryWithConstructor() {        UnpooledDataSourceFactory unpooledDataSourceFactory = new UnpooledDataSourceFactory();        Properties properties = new Properties();        properties.setProperty(\"driver\", \"org.hsqldb.jdbcDriver\");        properties.setProperty(\"url\", \"jdbc:hsqldb:mem:extends_with_constructor\");        properties.setProperty(\"username\", \"sa\");        unpooledDataSourceFactory.setProperties(properties);        Environment environment = new Environment(\"extends_with_constructor\", new JdbcTransactionFactory(), unpooledDataSourceFactory.getDataSource());        Configuration configuration = new Configuration();        configuration.setEnvironment(environment);        configuration.addMapper(StudentConstructorMapper.class);        configuration.addMapper(TeacherMapper.class);        configuration.getMappedStatementNames();        configuration.setAutoMappingBehavior(AutoMappingBehavior.NONE);        return new DefaultSqlSessionFactory(configuration);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/NpeExtendsTest.java", "stars": "15", "class": {"name": "NpeExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSelectWithTeacher", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testSelectWithTeacher() {        SqlSessionFactory sqlSessionFactory = getSqlSessionFactoryWithConstructor();        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            StudentConstructorMapper studentConstructorMapper = sqlSession.getMapper(StudentConstructorMapper.class);            StudentConstructor testStudent = studentConstructorMapper.selectWithTeacherById(1);            assertEquals(1, testStudent.getConstructors().size());            assertTrue(testStudent.getConstructors().contains(StudentConstructor.Constructor.ID_NAME));        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/NpeExtendsTest.java", "stars": "15", "class": {"name": "NpeExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSelectNoName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testSelectNoName() {        SqlSessionFactory sqlSessionFactory = getSqlSessionFactoryWithConstructor();        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            StudentConstructorMapper studentConstructorMapper = sqlSession.getMapper(StudentConstructorMapper.class);            StudentConstructor testStudent = studentConstructorMapper.selectNoNameById(1);            assertEquals(1, testStudent.getConstructors().size());            assertTrue(testStudent.getConstructors().contains(StudentConstructor.Constructor.ID));            assertNull(testStudent.getName());        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extends_with_constructor/NpeExtendsTest.java", "stars": "15", "class": {"name": "NpeExtendsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/include_property/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/include_property/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSimpleProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testSimpleProperty() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<String> results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectSimpleA\");      assertEquals(\"col_a value\", results.get(0));      results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectSimpleB\");      assertEquals(\"col_b value\", results.get(0));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testPropertyContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testPropertyContext() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<Map<String, String>> results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectPropertyContext\");      Map<String, String> map = results.get(0);      assertEquals(2, map.size());      assertEquals(\"col_a value\", map.get(\"COL_A\"));      assertEquals(\"col_b value\", map.get(\"COL_B\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNestedDynamicValue", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testNestedDynamicValue() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<String> results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectNestedDynamicValue\");      assertEquals(\"col_a value\", results.get(0));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testEmptyString", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testEmptyString() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<String> results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectEmptyProperty\");      assertEquals(\"a value\", results.get(0));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testPropertyInRefid", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testPropertyInRefid() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<String> results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectPropertyInRefid\");      assertEquals(\"col_a value\", results.get(0));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testConfigVar", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testConfigVar() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<String> results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectConfigVar\");      assertEquals(\"col_c value\", results.get(0), \"Property defined in the config file should be used.\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testRuntimeVar", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testRuntimeVar() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Map<String, String> params = new HashMap<>();      params.put(\"suffix\", \"b\");      List<String> results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectRuntimeVar\", params);      assertEquals(\"col_b value\", results.get(0));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNestedInclude", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testNestedInclude() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<String> results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectNestedInclude\");      assertEquals(\"a value\", results.get(0));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParametersInAttribute", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testParametersInAttribute() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<Map<String, String>> results = sqlSession.selectList(\"org.apache.ibatis.submitted.include_property.Mapper.selectPropertyInAttribute\");      Map<String, String> map = results.get(0);      assertEquals(2, map.size());      assertEquals(\"col_a value\", map.get(\"COL_1\"));      assertEquals(\"col_b value\", map.get(\"COL_2\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java", "stars": "15", "class": {"name": "IncludePropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "passwordEncoder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PasswordEncoder", "snippet": "    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/SecurityConfiguration.java", "stars": "2", "class": {"name": "SecurityConfiguration", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["WebSecurity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(WebSecurity web) {        web.ignoring()            .antMatchers(HttpMethod.OPTIONS, \"/**\")            .antMatchers(\"/app/**/*.{js,html}\")            .antMatchers(\"/i18n/**\")            .antMatchers(\"/content/**\")            .antMatchers(\"/swagger-ui/index.html\")            .antMatchers(\"/test/**\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/SecurityConfiguration.java", "stars": "2", "class": {"name": "SecurityConfiguration", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["HttpSecurity"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(HttpSecurity http) throws Exception {        // @formatter:off        http            .csrf()            .disable()            .addFilterBefore(corsFilter, UsernamePasswordAuthenticationFilter.class)            .exceptionHandling()            .authenticationEntryPoint(problemSupport)            .accessDeniedHandler(problemSupport)            .and()            .headers()            .contentSecurityPolicy(\"default-src 'self'; \" +                \"frame-src 'self' https://js.stripe.com data:;\" +                \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com https://analytics.gardle.ga https://js.stripe.com; \" +                \"style-src 'self' 'unsafe-inline'; img-src 'self' *.locationiq.com s3.eu-central-1.amazonaws.com https://analytics.gardle.ga https://fonts.googleapis.com/ data:; \" +                \"font-src 'self' data:; \" +                \"connect-src 'self' *.locationiq.com https://analytics.gardle.ga\")            .and()            .referrerPolicy(ReferrerPolicyHeaderWriter.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN)            .and()            .featurePolicy(\"geolocation 'none'; midi 'none'; sync-xhr 'none'; microphone 'none'; camera 'none'; magnetometer 'none'; gyroscope 'none'; speaker 'none'; fullscreen 'self'; payment 'none'\")            .and()            .frameOptions()            .deny()            .and()            .sessionManagement()            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)            .and()            .authorizeRequests()            .antMatchers(\"/api/v1/authenticate\").permitAll()            .antMatchers(\"/api/v1/register\").permitAll()            .antMatchers(\"/api/v1/activate\").permitAll()            .antMatchers(\"/api/v1/account/reset-password/init\").permitAll()            .antMatchers(\"/api/v1/account/reset-password/finish\").permitAll()            .antMatchers(\"/api/v1/gardenfields\").permitAll()            .antMatchers(\"/api/v1/gardenfields/user\").authenticated()            .antMatchers(\"/api/v1/gardenfields/{\\\\d+}\").permitAll()            .antMatchers(\"/api/v1/gardenfields/{\\\\d+}\").permitAll()            .antMatchers(\"/api/v1/gardenfields/{\\\\d+}/downloadImage/*\").permitAll()            .antMatchers(\"/api/v1/gardenfields/{\\\\d+}/downloadThumbnail/*\").permitAll()            .antMatchers(\"/api/v1/gardenfields/{\\\\d+}/downloadImages\").permitAll()            .antMatchers(\"/api/v1/gardenfields/{\\\\d+}/coverImageName\").permitAll()            .antMatchers(\"/api/v1/leasings/{\\\\d+}/leasedDateRanges\").permitAll()            .antMatchers(\"/api/v1/**\").authenticated()            .antMatchers(\"/websocket/tracker\").hasAuthority(AuthoritiesConstants.ADMIN)            .antMatchers(\"/websocket/**\").permitAll()            .antMatchers(\"/management/health\").permitAll()            .antMatchers(\"/management/info\").permitAll()            .antMatchers(\"/management/prometheus\").permitAll()            .antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN)            .antMatchers(\"/stripe/**\").permitAll()            .and()            .httpBasic()            .and()            .apply(securityConfigurerAdapter());        // @formatter:on    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/SecurityConfiguration.java", "stars": "2", "class": {"name": "SecurityConfiguration", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "securityConfigurerAdapter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JWTConfigurer", "snippet": "    private JWTConfigurer securityConfigurerAdapter() {        return new JWTConfigurer(tokenProvider);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/SecurityConfiguration.java", "stars": "2", "class": {"name": "SecurityConfiguration", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "isInRoom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isInRoom() {        return isInRoom;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "ini", "params": ["Context", "AttributeSet", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ini(Context context, AttributeSet attrs, int defStyleAttr) {        LayoutInflater.from(context).inflate(R.layout.layout_thunder_player, this);        mThunderPlayerView = findViewById(R.id.view);        tvNetStatus = findViewById(R.id.tvNetStatus);        ivAudio = findViewById(R.id.ivAudio);        tvUID = findViewById(R.id.tvUID);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "getThunderPlayerView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ThunderPlayerView", "snippet": "    public ThunderPlayerView getThunderPlayerView() {        return mThunderPlayerView;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "changeLowNetStatus", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void changeLowNetStatus(boolean isShown) {        if (isShown) {            tvNetStatus.setVisibility(VISIBLE);        } else {            tvNetStatus.setVisibility(GONE);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "joinRoom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void joinRoom(String UID) {        if (TextUtils.equals(this.UID, UID)) {            return;        }        this.UID = UID;        tvUID.setText(UID);        tvNetStatus.setVisibility(GONE);        RoomManager.getInstance(getContext()).setRemotePlayerView(mThunderPlayerView, UID);        isInRoom = true;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "leaveRoom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void leaveRoom() {        this.UID = null;        tvUID.setText(\"\");        tvNetStatus.setVisibility(GONE);        isInRoom = false;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "setAudioMute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAudioMute() {        ivAudio.setVisibility(View.VISIBLE);        ivAudio.setImageResource(R.mipmap.img_audiostop3x);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "setAudioVolume", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAudioVolume(Integer micVolume) {        if (micVolume == null) {            ivAudio.setVisibility(View.GONE);        } else {            ivAudio.setVisibility(View.VISIBLE);            if (micVolume <= 30) {                ivAudio.setImageResource(R.mipmap.img_audiovolume_level1);            } else if (micVolume <= 60) {                ivAudio.setImageResource(R.mipmap.img_audiovolume_level2);            } else {                ivAudio.setImageResource(R.mipmap.img_audiovolume_level3);            }        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        MainActivity.mRemoteListeners.add(this);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();        MainActivity.mRemoteListeners.remove(this);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "onJoinRoom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onJoinRoom(String uid) {    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "onLeaveRoom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLeaveRoom(String uid) {        if (TextUtils.equals(this.UID, uid)) {            leaveRoom();        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyThunderPlayerView.java", "stars": "2", "class": {"name": "MyThunderPlayerView", "extends": "RelativeLayout", "implements": ["OnRemoteListener"], "modifiers": ["public"]}}, {"method_name": "initMenu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void initMenu() {\t\t// \u521d\u59cb\u5316\u83dc\u5355\u7ec4\u4ef6\t\tmenuBar = new JMenuBar();\t\tthis.setJMenuBar(menuBar);\t\tmenuOperate = new JMenu(\"\u64cd\u4f5c\");\t\tmenuBar.add(menuOperate);\t\tmiGather = new JMenuItem(\"\u91c7\u96c6\u6570\u636e\");\t\t// \u6ce8\u518c\u76d1\u542c\t\tmiGather.addActionListener(new GatherListener());\t\tmenuOperate.add(miGather);\t\t// \u4e8c\u7ea7\u83dc\u5355\t\tmenuMatch = new JMenu(\"\u5339\u914d\u6570\u636e\");\t\tmenuOperate.add(menuMatch);\t\tmiSave = new JMenuItem(\"\u4fdd\u5b58\u6570\u636e\");\t\tmiSave.addActionListener(new SaveDataListener());\t\tmenuOperate.add(miSave);\t\tmiSend = new JMenuItem(\"\u53d1\u9001\u6570\u636e\");\t\tmenuOperate.add(miSend);\t\tmiShow = new JMenuItem(\"\u663e\u793a\u6570\u636e\");\t\t// \u6ce8\u518c\u76d1\u542c\t\tmiShow.addActionListener(new ShowDataListener());\t\tmenuOperate.add(miShow);\t\t// \u6dfb\u52a0\u5206\u5272\u7ebf\t\tmenuOperate.addSeparator();\t\tmiExit = new JMenuItem(\"\u9000\u51fa\u7cfb\u7edf\");\t\t// \u6ce8\u518c\u76d1\u542c\t\tmiExit.addActionListener(new ActionListener() {\t\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t\t// \u663e\u793a\u786e\u8ba4\u5bf9\u8bdd\u6846\uff0c\u5f53\u9009\u62e9YES_OPTION\u65f6\u9000\u51fa\u7cfb\u7edf\t\t\t\tif (JOptionPane.showConfirmDialog(null, \"\u60a8\u786e\u5b9a\u8981\u9000\u51fa\u7cfb\u7edf\u5417\uff1f\", \"\u9000\u51fa\u7cfb\u7edf\",\t\t\t\t\t\tJOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\t\t\t\t\t// \u9000\u51fa\u7cfb\u7edf\t\t\t\t\tSystem.exit(0);\t\t\t\t}\t\t\t}\t\t});\t\tmenuOperate.add(miExit);\t\tmenuHelp = new JMenu(\"\u5e2e\u52a9\");\t\tmenuBar.add(menuHelp);\t\tmiCheck = new JMenuItem(\"\u67e5\u770b\u5e2e\u52a9\");\t\t// \u6ce8\u518c\u76d1\u542c\t\tmiCheck.addActionListener(new ActionListener() {\t\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t\t// \u663e\u793a\u6d88\u606f\u5bf9\u8bdd\u6846\t\t\t\tJOptionPane.showMessageDialog(null,\t\t\t\t\t\t\"\u672c\u7cfb\u7edf\u5b9e\u73b0\u6570\u636e\u7684\u91c7\u96c6\u3001\u8fc7\u6ee4\u5206\u6790\u5339\u914d\u3001\u4fdd\u5b58\u3001\u53d1\u9001\u53ca\u663e\u793a\u529f\u80fd\", \"\u5e2e\u52a9\",\t\t\t\t\t\tJOptionPane.QUESTION_MESSAGE);\t\t\t}\t\t});\t\tmenuHelp.add(miCheck);\t\tmiAbout = new JMenuItem(\"\u5173\u4e8e\u7cfb\u7edf\");\t\t// \u6ce8\u518c\u76d1\u542c\t\tmiAbout.addActionListener(new ActionListener() {\t\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t\t// \u663e\u793a\u6d88\u606f\u5bf9\u8bdd\u6846\t\t\t\tJOptionPane.showMessageDialog(null,\t\t\t\t\t\t\"\u5f00\u53d1\u4eba\uff1a\", \"\u81ea\u884c\u8865\u5145\",\t\t\t\t\t\tJOptionPane.WARNING_MESSAGE);\t\t\t}\t\t});\t\tmenuHelp.add(miAbout);\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "MainFrametest2", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "initToolBar", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void initToolBar() {\t\t// \u521b\u5efa\u5de5\u5177\u680f\t\ttoolBar = new JToolBar();\t\t// \u5c06\u5de5\u5177\u680f\u6dfb\u52a0\u5230\u7a97\u4f53\u5317\u90e8\uff08\u4e0a\u9762\uff09\t\tgetContentPane().add(toolBar, BorderLayout.NORTH);\t\t// \u6dfb\u52a0\u5e26\u6709\u56fe\u6807\u7684\u5de5\u5177\u680f\u6309\u94ae\t\tImageIcon gatherIcon = new ImageIcon(\"images\\\\gatherData.png\");\t\tbtnGather = new JButton(\"\u91c7\u96c6\u6570\u636e\", gatherIcon);\t\t// \u6ce8\u518c\u76d1\u542c\t\tbtnGather.addActionListener(new GatherListener());\t\ttoolBar.add(btnGather);\t\tImageIcon matchIcon = new ImageIcon(\"images\\\\matchData.png\");\t\tbtnMatchLog = new JButton(\"\u5339\u914d\u65e5\u5fd7\u6570\u636e\", matchIcon);\t\t// \u6ce8\u518c\u76d1\u542c\t\tbtnMatchLog.addActionListener(new MatchLogListener());\t\ttoolBar.add(btnMatchLog);\t\t//\u8865\u5145\u5339\u914d\u7269\u6d41\u6570\u636e \u7ec4\u4ef6\u548c\u6ce8\u518c\u76d1\u542c\u5668\t\tImageIcon saveIcon = new ImageIcon(\"images\\\\saveData.png\");\t\tbtnSave = new JButton(\"\u4fdd\u5b58\u6570\u636e\", saveIcon);\t\t// \u6ce8\u518c\u76d1\u542c\t\tbtnSave.addActionListener(new SaveDataListener());\t\ttoolBar.add(btnSave);\t\tImageIcon sendIcon = new ImageIcon(\"images\\\\sendData.png\");\t\tbtnSend = new JButton(\"\u53d1\u9001\u6570\u636e\", sendIcon);\t\tbtnSend.addActionListener(new ActionListener() {\t\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t}\t\t});\t\ttoolBar.add(btnSend);\t\tImageIcon showIcon = new ImageIcon(\"images\\\\showData.png\");\t\tbtnShow = new JButton(\"\u663e\u793a\u6570\u636e\", showIcon);\t\tbtnShow.addActionListener(new ShowDataListener());\t\ttoolBar.add(btnShow);\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "MainFrametest2", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "initLogGatherGUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void initLogGatherGUI() {\t\t\tpLog = new JPanel();\t\t\ttpGather.addTab(\"\u65e5\u5fd7\", pLog);\t\t\tpLog.setLayout(new BoxLayout(pLog, BoxLayout.Y_AXIS));\t\t\tpLogId = new JPanel();\t\t\tpLog.add(pLogId);\t\t\tpLogId.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));\t\t\tlblLogId = new JLabel(\"\u65e5\u5fd7ID\uff1a\");\t\t\tpLogId.add(lblLogId);\t\t\ttxtLogId = new JTextField();\t\t\ttxtLogId.setPreferredSize(new Dimension(100, 20));\t\t\tpLogId.add(txtLogId);\t\t\tpName = new JPanel();\t\t\tpLog.add(pName);\t\t\tpName.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));\t\t\tlblName = new JLabel(\"\u7528\u6237\u540d\uff1a\");\t\t\tpName.add(lblName);\t\t\ttxtName = new JTextField();\t\t\ttxtName.setPreferredSize(new Dimension(100, 20));\t\t\tpName.add(txtName);\t\t\tpLocation = new JPanel();\t\t\tpLog.add(pLocation);\t\t\tlblLocation = new JLabel(\"\u767b\u5f55\u5730\u70b9\uff1a\");\t\t\tpLocation.add(lblLocation);\t\t\ttxtLocation = new JTextField();\t\t\ttxtLocation.setPreferredSize(new Dimension(100, 20));\t\t\tpLocation.add(txtLocation);\t\t\tpIP = new JPanel();\t\t\tpLog.add(pIP);\t\t\tlblIP = new JLabel(\"\u767b\u5f55IP\uff1a\");\t\t\tpIP.add(lblIP);\t\t\ttxtIP = new JTextField();\t\t\ttxtIP.setPreferredSize(new Dimension(100, 20));\t\t\tpIP.add(txtIP);\t\t\tpLogStatus = new JPanel();\t\t\tpLog.add(pLogStatus);\t\t\tlblLogStatus = new JLabel(\"\u767b\u5f55\u72b6\u6001\uff1a\");\t\t\tpLogStatus.add(lblLogStatus);\t\t\trbLogin = new JRadioButton(\"\u767b\u5f55\");\t\t\tpLogStatus.add(rbLogin);\t\t\trbLogin.setSelected(true);\t\t\trbLogout = new JRadioButton(\"\u767b\u51fa\");\t\t\tpLogStatus.add(rbLogout);\t\t\tButtonGroup bg = new ButtonGroup();\t\t\tbg.add(rbLogin);\t\t\tbg.add(rbLogout);\t\t\tpLogButton = new JPanel();\t\t\tpLog.add(pLogButton);\t\t\tbtnLogConfirm = new JButton(\"\u786e\u8ba4\");\t\t\t// \u6dfb\u52a0\u786e\u8ba4\u6309\u94ae\u76d1\u542c\t\t\tbtnLogConfirm.addActionListener(new GatherLogListener());\t\t\tpLogButton.add(btnLogConfirm);\t\t\tbtnLogReset = new JButton(\"\u91cd\u7f6e\");\t\t\t// \u6dfb\u52a0\u91cd\u7f6e\u6309\u94ae\u76d1\u542c\t\t\tbtnLogReset.addActionListener(new ResetListener());\t\t\tpLogButton.add(btnLogReset);\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "MainFrametest2", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "initTransGatherGUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void initTransGatherGUI() {\t\tpTran = new JPanel();\t\ttpGather.addTab(\"\u7269\u6d41\", pTran);\t\tpTran.setLayout(new BoxLayout(pTran, BoxLayout.Y_AXIS));\t\tpTransId = new JPanel();\t\tpTran.add(pTransId);\t\tlblTransId = new JLabel(\"\u7269\u6d41ID\uff1a\");\t\tpTransId.add(lblTransId);\t\ttxtTransId = new JTextField();\t\ttxtTransId.setPreferredSize(new Dimension(100, 20));\t\tpTransId.add(txtTransId);\t\tpAdress = new JPanel();\t\tpTran.add(pAdress);\t\tlblAdress = new JLabel(\"\u76ee\u7684\u5730\uff1a\");\t\tpAdress.add(lblAdress);\t\ttxtAdress = new JTextField();\t\ttxtAdress.setPreferredSize(new Dimension(100, 20));\t\tpAdress.add(txtAdress);\t\tpHandler = new JPanel();\t\tpTran.add(pHandler);\t\tlblHandler = new JLabel(\"\u7ecf\u624b\u4eba\uff1a\");\t\tpHandler.add(lblHandler);\t\ttxtHandler = new JTextField();\t\ttxtHandler.setPreferredSize(new Dimension(100, 20));\t\tpHandler.add(txtHandler);\t\tpReceiver = new JPanel();\t\tpTran.add(pReceiver);\t\tlblReceiver = new JLabel(\"\u6536\u8d27\u4eba\uff1a\");\t\tpReceiver.add(lblReceiver);\t\ttxtReceiver = new JTextField();\t\ttxtReceiver.setPreferredSize(new Dimension(100, 20));\t\tpReceiver.add(txtReceiver);\t\tpTranStatus = new JPanel();\t\tpTran.add(pTranStatus);\t\tlblTranStatus = new JLabel(\"\u7269\u6d41\u72b6\u6001\uff1a\");\t\tpTranStatus.add(lblTranStatus);\t\tString[] tranStatus = new String[] { \"\u53d1\u8d27\u4e2d\", \"\u9001\u8d27\u4e2d\", \"\u5df2\u7b7e\u6536\" };\t\tpTranButton = new JPanel();\t\tpTran.add(pTranButton);\t\tbtnTranConfirm = new JButton(\"\u786e\u8ba4\");\t\tbtnTranConfirm.addActionListener(new GatherTransListener());\t\tpTranButton.add(btnTranConfirm);\t\tbtnTranReset = new JButton(\"\u91cd\u7f6e\");\t\tbtnTranReset.addActionListener(new ResetListener());\t\tpTranButton.add(btnTranReset);\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "MainFrametest2", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "flushMatchedLogTable", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void flushMatchedLogTable() {\t\t// \u521b\u5efatableModel\uff0c\u901a\u8fc7\u6807\u5fd7\u4e3a\u533a\u5206\u65e5\u5fd7\u548c\u7269\u6d41\uff1a1\uff0c\u65e5\u5fd7\uff1b0\uff0c\u7269\u6d41\t\tMatchedTableModel logModel = new MatchedTableModel(\t\t\t\tlogRecService.readLogResult(), 1);\t\t// \u4f7f\u7528tableModel\u521b\u5efaJTable\t\tJTable logTable = new JTable(logModel);\t\t// \u901a\u8fc7JTable\u5bf9\u8c61\u521b\u5efaJScrollPane\uff0c\u663e\u793a\u6570\u636e\t\tscrollPane = new JScrollPane(logTable);\t\t// \u6dfb\u52a0\u65e5\u5fd7\u9009\u9879\u5361\t\tshowPane.addTab(\"\u65e5\u5fd7\", scrollPane);\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "MainFrametest2", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "flushMatchedTransTable", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void flushMatchedTransTable() {\t\t//\u663e\u793a\u7269\u6d41\u6570\u636e\u8868\u683c\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "MainFrametest2", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tnew MainFrametest2();\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "MainFrametest2", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t// \u5207\u6362\u4e3b\u9762\u677f\u7684\u5361\u7247\u4e3a\u91c7\u96c6\u9762\u677f\t\t\tcard.show(p, \"gather\");\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "GatherListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t// \u83b7\u53d6\u65e5\u5fd7ID\t\t\tint id = Integer.parseInt(txtLogId.getText().trim());\t\t\t// \u521b\u5efa\u5f53\u524d\u65f6\u95f4\t\t\tDate time = new Date();\t\t\t// \u83b7\u53d6\u5730\u5740\u680f\u5730\u5740\t\t\tString adress = txtLocation.getText().trim();\t\t\t// \u8bbe\u7f6e\u6570\u636e\u7c7b\u578b\u4e3a\uff1a\u91c7\u96c6\t\t\tint type = DataBase.GATHER;\t\t\t// \u83b7\u53d6\u7528\u6237\u59d3\u540d\t\t\tString user = txtName.getText().trim();\t\t\t// \u83b7\u53d6ip\u5730\u5740\t\t\tString ip = txtIP.getText().trim();\t\t\t// \u8bbe\u7f6e\u65e5\u5fd7\u7c7b\u578b\t\t\tint logType = rbLogin.isSelected() ? LogRec.LOG_IN : LogRec.LOG_OUT;\t\t\t// \u5c06\u6570\u636e\u5c01\u88c5\u5230\u65e5\u5fd7\u5bf9\u8c61\t\t\tlog = new LogRec(id, time, adress, type, user, ip, logType);\t\t\t// \u5c06\u65e5\u5fd7\u5bf9\u8c61\u6dfb\u52a0\u5230\u65e5\u5fd7\u5217\u8868\t\t\tlogList.add(log);\t\t\t// \u663e\u793a\u5bf9\u8bdd\u6846\t\t\tJOptionPane.showMessageDialog(null, \"\u65e5\u5fd7\u91c7\u96c6\u6210\u529f\uff01\", \"\u63d0\u793a\",\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "GatherLogListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t// \u83b7\u53d6\u7269\u6d41ID\t\t\tint id = Integer.parseInt(txtTransId.getText().trim());\t\t\t// \u521b\u5efa\u5f53\u524d\u65f6\u95f4\t\t\tDate time = new Date();\t\t\t// \u83b7\u53d6\u5730\u5740\u680f\u5730\u5740\t\t\tString adress = txtAdress.getText().trim();\t\t\t// \u8bbe\u7f6e\u6570\u636e\u7c7b\u578b\u4e3a\uff1a\u91c7\u96c6\t\t\tint type = DataBase.GATHER;\t\t\t// \u83b7\u53d6\u7ecf\u624b\u4eba\u4fe1\u606f\t\t\tString handler = txtHandler.getText().trim();\t\t\t// \u83b7\u53d6\u53d1\u9001\u4eba\u4fe1\u606f\t\t\tString reciver = txtReceiver.getText().trim();\t\t\t// \u8bbe\u7f6e\u7269\u6d41\u7c7b\u578b\t\t\tint transportType = cmbTanStatus.getSelectedIndex() + 1;\t\t\t// \u5c06\u6570\u636e\u5305\u88c5\u6210\u7269\u6d41\u5bf9\u8c61\t\t\ttrans = new Transport(id, time, adress, type, handler, reciver,\t\t\t\t\ttransportType);\t\t\t// \u5c06\u7269\u6d41\u5bf9\u8c61\u653e\u5165\u7269\u6d41\u5217\u8868\t\t\ttransList.add(trans);\t\t\t// \u663e\u793a\u5bf9\u8bdd\u6846\t\t\tJOptionPane.showMessageDialog(null, \"\u7269\u6d41\u91c7\u96c6\u6210\u529f\uff01\", \"\u63d0\u793a\",\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "GatherTransListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\ttxtName.setText(\"\");\t\t\ttxtLocation.setText(\"\");\t\t\ttxtIP.setText(\"\");\t\t\ttxtAdress.setText(\"\");\t\t\ttxtHandler.setText(\"\");\t\t\ttxtReceiver.setText(\"\");\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "ResetListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\tLogRecAnalyse logAn = new LogRecAnalyse(logList);\t\t\t// \u65e5\u5fd7\u6570\u636e\u8fc7\u6ee4\t\t\tlogAn.doFilter();\t\t\t// \u65e5\u5fd7\u6570\u636e\u5206\u6790\t\t\tmatchedLogs = logAn.matchData();\t\t\t// \u663e\u793a\u5bf9\u8bdd\u6846\t\t\tJOptionPane.showMessageDialog(null, \"\u65e5\u5fd7\u6570\u636e\u8fc7\u6ee4\u3001\u5206\u6790\u5339\u914d\u6210\u529f\uff01\", \"\u63d0\u793a\",\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "MatchLogListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t\t\t\t//\u8865\u5145\u7269\u6d41\u6570\u636e\u5339\u914d\u7684\u4e8b\u4ef6\u5904\u7406\u65b9\u6cd5\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "MatchTransListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t\t\t\t// \u8865\u5145\u6570\u636e\u4fdd\u5b58\u7684\u4e8b\u4ef6\u5904\u7406\u65b9\u6cd5\t\t\t\t\t\t// \u4fdd\u5b58\u5339\u914d\u7684\u7269\u6d41\u4fe1\u606f\t\t\t//\u82e5\u4fdd\u5b58\u6210\u529f\uff0c\u5f39\u51fa\u63d0\u793a\u6846\uff1a\u5339\u914d\u7684\u65e5\u5fd7\u6570\u636e\u4ee5\u4fdd\u5b58\u5230\u6587\u4ef6\u548c\u6570\u636e\u5e93\u4e2d\uff01\",\t\t\t//\u82e5\u6ca1\u6709\u4fdd\u5b58\u6210\u529f\uff0c\u5219\u5f39\u51fa\u76f8\u5e94\u7684\u544a\u8b66\u63d0\u793a\u6846\t\t\t\t\t\t\t\t\t// \u4fdd\u5b58\u5339\u914d\u7684\u7269\u6d41\u4fe1\u606f\t\t\t//\u82e5\u4fdd\u5b58\u6210\u529f\uff0c\u5f39\u51fa\u63d0\u793a\u6846\uff1a\u5339\u914d\u7684\u7269\u6d41\u6570\u636e\u4ee5\u4fdd\u5b58\u5230\u6587\u4ef6\u548c\u6570\u636e\u5e93\u4e2d\uff01\",\t\t\t//\u82e5\u6ca1\u6709\u4fdd\u5b58\u6210\u529f\uff0c\u5219\u5f39\u51fa\u76f8\u5e94\u7684\u544a\u8b66\u63d0\u793a\u6846\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "SaveDataListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t// \u5207\u6362\u4e3b\u9762\u677f\u7684\u5361\u7247\u4e3a\u663e\u793a\u6570\u636e\u7684\u9762\u677f\t\t\tcard.show(p, \"show\");\t\t\t// \u79fb\u9664\u663e\u793a\u6570\u636e\u9762\u677f\u4e2d\u7684\u6240\u6709\u7684\u9009\u9879\u5361\t\t\tshowPane.removeAll();\t\t\t// \u5237\u65b0\u65e5\u5fd7\u4fe1\u606f\u8868\t\t\tflushMatchedLogTable();\t\t\t// \u5237\u65b0\u7269\u6d41\u4fe1\u606f\u8868\t\t\tflushMatchedTransTable();\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/MainFrametest2.java", "stars": "3", "class": {"name": "ShowDataListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["private"]}}, {"method_name": "runOnUiThread", "params": ["Runnable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void runOnUiThread(Runnable runnable) {        Thread uiThread = Looper.getMainLooper().getThread();        if (Thread.currentThread() != uiThread) new Handler(Looper.getMainLooper()).post(runnable);        else runnable.run();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/ThreadUtils.java", "stars": "4", "class": {"name": "ThreadUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "compose", "params": ["Consumer<FtpConnParams>"], "throws": null, "modifiers": ["public", "static"], "return_type": "FtpConnParams", "snippet": "    public static FtpConnParams compose(Consumer<FtpConnParams> function){        FtpConnParams ftpConnParams = new FtpConnParams();        function.accept(ftpConnParams);        return ftpConnParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProtocol", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProtocol() {        return protocol;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProtocol", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProtocol(String protocol) {        this.protocol = protocol;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getHost() {        return host;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHost", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHost(String host) {        this.host = host;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPort() {        return port;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPort", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPort(int port) {        this.port = port;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return username;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username) {        this.username = username;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrvKeyPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPrvKeyPath() {        return prvKeyPath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPrvKeyPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPrvKeyPath(String prvKeyPath) {        this.prvKeyPath = prvKeyPath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnectPattern", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getConnectPattern() {        return connectPattern;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setConnectPattern", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setConnectPattern(String connectPattern) {        this.connectPattern = connectPattern;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTimeout() {        return timeout;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimeout", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimeout(int timeout) {        this.timeout = timeout;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/FtpConnParams.java", "stars": "23", "class": {"name": "FtpConnParams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturnJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturnJson() {    given()      .when()      .get(\"http://localhost:4502/stubs/json\")      .then()      .body(\"message\", equalTo(\"Hello\"))      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturnJsonFromFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturnJsonFromFile() {    given()      .when()      .get(\"http://localhost:4502/stubs/body-file\")      .then()      .body(\"message\", equalTo(\"Hello World!\"))      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturnJsonFromTemplateFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturnJsonFromTemplateFile() {    given()      .when()      .get(\"http://localhost:4502/stubs/templated-file\")      .then()      .body(\"message\", equalTo(\"Hello Templates!\"))      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldDeleteFine", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldDeleteFine() {    given()      .when()      .delete(\"http://localhost:4502/stubs/fine\")      .then()      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldGetFineWithBody", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetFineWithBody() {    given()      .when()      .get(\"http://localhost:4502/stubs/fine-with-body\")      .then()      .body(equalTo(\"body content\"))      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldGetFineWithBodyTemplated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetFineWithBodyTemplated() {    given()      .when()      .get(\"http://localhost:4502/stubs/templated\")      .then()      .body(equalTo(\"templated\"))      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturnJsonFromFilePointedInHeader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturnJsonFromFilePointedInHeader() {    given().header(\"X-WM-Body-File\", \"samples/message.json\")      .when()      .get(\"http://localhost:4502/stubs/header-body-file\")      .then()      .body(\"message\", equalTo(\"Hello World!\"))      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldPost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldPost() {    given()      .when()      .post(\"http://localhost:4502/stubs/post\")      .then()      .body(\"message\", equalTo(\"Hello Post\"))      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldPostRedirect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldPostRedirect() {    given()      .when()      .post(\"http://localhost:4502/stubs/redirect\")      .then()      .statusCode(302);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldPostUnauthorized", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldPostUnauthorized() {    given()      .when()      .post(\"http://localhost:4502/stubs/sorry-no\")      .then()      .statusCode(401);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldPutStatusOnly", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldPutStatusOnly() {    given()      .when()      .put(\"http://localhost:4502/stubs/status-only\")      .then()      .statusCode(418);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldHaveHeader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldHaveHeader() {    given()      .when()      .get(\"http://localhost:4502/stubs/with-header\")      .then()      .header(\"Some-Header\", \"value\")      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturnMappingOneBody", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturnMappingOneBody() {    given()      .when()      .get(\"http://localhost:4502/stubs/mappings/1\")      .then()      .body(equalTo(\"Hello mappings one\"))      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturnMappingTwoBody", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturnMappingTwoBody() {    given()      .when()      .get(\"http://localhost:4502/stubs/mappings/2\")      .then()      .body(equalTo(\"Hello mappings two\"))      .statusCode(200);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturnNotSupportedForDelays", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturnNotSupportedForDelays() {    given()      .when()      .get(\"http://localhost:4502/stubs/delayed\")      .then()      .statusCode(400)      .statusLine(containsString(\"Delay not supported by AEM Stubs\"));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturnNotSupportedForChunkedDelays", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturnNotSupportedForChunkedDelays() {    given()      .when()      .get(\"http://localhost:4502/stubs/chunked/delayed\")      .then()      .statusCode(400)      .statusLine(containsString(\"Chunked dribble delay not supported by AEM Stubs\"));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturnNotSupportedForFault", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturnNotSupportedForFault() {    given()      .when()      .get(\"http://localhost:4502/stubs/fault\")      .then()      .statusCode(400)      .statusLine(containsString(\"MALFORMED_RESPONSE_CHUNK not supported by AEM Stubs\"));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldReturn404ForNoStubDefined", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldReturn404ForNoStubDefined() {    given()      .when()      .get(\"http://localhost:4502/stubs/not-defined-stub\")      .then()      .statusCode(404)      .statusLine(containsString(\"No stub defined for this request\"));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/integTest/java/com/cognifide/aem/stubs/wiremock/HelloWorldTest.java", "stars": "8", "class": {"name": "HelloWorldTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args){        Animal a = new Cat();        a.setName(\"\u52a0\u83f2\");        a.setAge(5);        System.out.println(a.NUM);        System.out.println(a.getName() + \",\" + a.getAge());        a.eat();        a = new Cat(\"\u52a0\u83f2\",5);        System.out.println(a.getName() + \",\" + a.getAge());        a.eat();        System.out.println(7 & 8);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/cc1021/Animal/AnimalDemo.java", "stars": "2", "class": {"name": "AnimalDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        show02();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/Demo01Generic.java", "stars": "2", "class": {"name": "Demo01Generic", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show02() {        ArrayList<String> list = new ArrayList<>();        list.add(\"abc\");        //list.add(1);//add(java.lang.String)in ArrayList\u00a0cannot be applied to (int)        //\u4f7f\u7528\u8fed\u4ee3\u5668\u904d\u5386list\u96c6\u5408        Iterator<String> it = list.iterator();        while(it.hasNext()){            String s = it.next();            System.out.println(s+\"->\"+s.length());        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/Demo01Generic.java", "stars": "2", "class": {"name": "Demo01Generic", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show01() {        ArrayList list = new ArrayList();        list.add(\"abc\");        list.add(1);        //\u4f7f\u7528\u8fed\u4ee3\u5668\u904d\u5386list\u96c6\u5408        //\u83b7\u53d6\u8fed\u4ee3\u5668        Iterator it = list.iterator();        //\u4f7f\u7528\u8fed\u4ee3\u5668\u4e2d\u7684\u65b9\u6cd5hasNext\u548cnext\u904d\u5386\u96c6\u5408        while(it.hasNext()){            //\u53d6\u51fa\u5143\u7d20\u4e5f\u662fObject\u7c7b\u578b            Object obj = it.next();            System.out.println(obj);            //\u60f3\u8981\u4f7f\u7528String\u7c7b\u7279\u6709\u7684\u65b9\u6cd5,length\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u957f\u5ea6;\u4e0d\u80fd\u4f7f\u7528  \u591a\u6001 Object obj = \"abc\";            //\u9700\u8981\u5411\u4e0b\u8f6c\u578b            //\u4f1a\u629b\u51faClassCastException\u7c7b\u578b\u8f6c\u6362\u5f02\u5e38,\u4e0d\u80fd\u628aInteger\u7c7b\u578b\u8f6c\u6362\u4e3aString\u7c7b\u578b            String s = (String)obj;            System.out.println(s.length());        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/Demo01Generic.java", "stars": "2", "class": {"name": "Demo01Generic", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)    {        return inflater.inflate(R.layout.frag_about_user, container, false);    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/about_fragment.java", "stars": "2", "class": {"name": "about_fragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSelected", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSelected(int index, int totalCount) {        if (mInnerPagerTitleView != null) {            mInnerPagerTitleView.onSelected(index, totalCount);        }        if (mAutoCancelBadge) {            setBadgeView(null);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "onDeselected", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeselected(int index, int totalCount) {        if (mInnerPagerTitleView != null) {            mInnerPagerTitleView.onDeselected(index, totalCount);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "onLeave", "params": ["int", "int", "float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLeave(int index, int totalCount, float leavePercent, boolean leftToRight) {        if (mInnerPagerTitleView != null) {            mInnerPagerTitleView.onLeave(index, totalCount, leavePercent, leftToRight);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "onEnter", "params": ["int", "int", "float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnter(int index, int totalCount, float enterPercent, boolean leftToRight) {        if (mInnerPagerTitleView != null) {            mInnerPagerTitleView.onEnter(index, totalCount, enterPercent, leftToRight);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "getInnerPagerTitleView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IPagerTitleView", "snippet": "    public IPagerTitleView getInnerPagerTitleView() {        return mInnerPagerTitleView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "setInnerPagerTitleView", "params": ["IPagerTitleView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setInnerPagerTitleView(IPagerTitleView innerPagerTitleView) {        if (mInnerPagerTitleView == innerPagerTitleView) {            return;        }        mInnerPagerTitleView = innerPagerTitleView;        removeAllViews();        if (mInnerPagerTitleView instanceof View) {            LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);            addView((View) mInnerPagerTitleView, lp);        }        if (mBadgeView != null) {            LayoutParams lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);            addView(mBadgeView, lp);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "getBadgeView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getBadgeView() {        return mBadgeView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "setBadgeView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBadgeView(View badgeView) {        if (mBadgeView == badgeView) {            return;        }        mBadgeView = badgeView;        removeAllViews();        if (mInnerPagerTitleView instanceof View) {            LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);            addView((View) mInnerPagerTitleView, lp);        }        if (mBadgeView != null) {            LayoutParams lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);            addView(mBadgeView, lp);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {        super.onLayout(changed, left, top, right, bottom);        if (mInnerPagerTitleView instanceof View && mBadgeView != null) {            int[] position = new int[14];   // 14\u79cd\u89d2\u6807\u5b9a\u4f4d\u65b9\u5f0f            View v = (View) mInnerPagerTitleView;            position[0] = v.getLeft();            position[1] = v.getTop();            position[2] = v.getRight();            position[3] = v.getBottom();            if (mInnerPagerTitleView instanceof IMeasurablePagerTitleView) {                IMeasurablePagerTitleView view = (IMeasurablePagerTitleView) mInnerPagerTitleView;                position[4] = view.getContentLeft();                position[5] = view.getContentTop();                position[6] = view.getContentRight();                position[7] = view.getContentBottom();            } else {                for (int i = 4; i < 8; i++) {                    position[i] = position[i - 4];                }            }            position[8] = v.getWidth() / 2;            position[9] = v.getHeight() / 2;            position[10] = position[4] / 2;            position[11] = position[5] / 2;            position[12] = position[6] + (position[2] - position[6]) / 2;            position[13] = position[7] + (position[3] - position[7]) / 2;            // \u6839\u636e\u8bbe\u7f6e\u7684BadgeRule\u8c03\u6574\u89d2\u6807\u7684\u4f4d\u7f6e            if (mXBadgeRule != null) {                int x = position[mXBadgeRule.getAnchor().ordinal()];                int offset = mXBadgeRule.getOffset();                int newLeft = x + offset;                mBadgeView.offsetLeftAndRight(newLeft - mBadgeView.getLeft());            }            if (mYBadgeRule != null) {                int y = position[mYBadgeRule.getAnchor().ordinal()];                int offset = mYBadgeRule.getOffset();                int newTop = y + offset;                mBadgeView.offsetTopAndBottom(newTop - mBadgeView.getTop());            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "getContentLeft", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getContentLeft() {        if (mInnerPagerTitleView instanceof IMeasurablePagerTitleView) {            return getLeft() + ((IMeasurablePagerTitleView) mInnerPagerTitleView).getContentLeft();        }        return getLeft();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "getContentTop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getContentTop() {        if (mInnerPagerTitleView instanceof IMeasurablePagerTitleView) {            return ((IMeasurablePagerTitleView) mInnerPagerTitleView).getContentTop();        }        return getTop();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "getContentRight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getContentRight() {        if (mInnerPagerTitleView instanceof IMeasurablePagerTitleView) {            return getLeft() + ((IMeasurablePagerTitleView) mInnerPagerTitleView).getContentRight();        }        return getRight();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "getContentBottom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getContentBottom() {        if (mInnerPagerTitleView instanceof IMeasurablePagerTitleView) {            return ((IMeasurablePagerTitleView) mInnerPagerTitleView).getContentBottom();        }        return getBottom();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "getXBadgeRule", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BadgeRule", "snippet": "    public BadgeRule getXBadgeRule() {        return mXBadgeRule;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "setXBadgeRule", "params": ["BadgeRule"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setXBadgeRule(BadgeRule badgeRule) {        if (badgeRule != null) {            BadgeAnchor anchor = badgeRule.getAnchor();            if (anchor != BadgeAnchor.LEFT                    && anchor != BadgeAnchor.RIGHT                    && anchor != BadgeAnchor.CONTENT_LEFT                    && anchor != BadgeAnchor.CONTENT_RIGHT                    && anchor != BadgeAnchor.CENTER_X                    && anchor != BadgeAnchor.LEFT_EDGE_CENTER_X                    && anchor != BadgeAnchor.RIGHT_EDGE_CENTER_X) {                throw new IllegalArgumentException(\"x badge rule is wrong.\");            }        }        mXBadgeRule = badgeRule;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "getYBadgeRule", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BadgeRule", "snippet": "    public BadgeRule getYBadgeRule() {        return mYBadgeRule;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "setYBadgeRule", "params": ["BadgeRule"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setYBadgeRule(BadgeRule badgeRule) {        if (badgeRule != null) {            BadgeAnchor anchor = badgeRule.getAnchor();            if (anchor != BadgeAnchor.TOP                    && anchor != BadgeAnchor.BOTTOM                    && anchor != BadgeAnchor.CONTENT_TOP                    && anchor != BadgeAnchor.CONTENT_BOTTOM                    && anchor != BadgeAnchor.CENTER_Y                    && anchor != BadgeAnchor.TOP_EDGE_CENTER_Y                    && anchor != BadgeAnchor.BOTTOM_EDGE_CENTER_Y) {                throw new IllegalArgumentException(\"y badge rule is wrong.\");            }        }        mYBadgeRule = badgeRule;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "isAutoCancelBadge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAutoCancelBadge() {        return mAutoCancelBadge;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "setAutoCancelBadge", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAutoCancelBadge(boolean autoCancelBadge) {        mAutoCancelBadge = autoCancelBadge;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgePagerTitleView.java", "stars": "1", "class": {"name": "BadgePagerTitleView", "extends": "FrameLayout", "implements": ["IMeasurablePagerTitleView"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tint a = 3;\t\tint b = 4;\t\tif(a > b)\t\t{\t\t\tSystem.out.printf(\"%d\",a - b);\t\t}\t\telse\t\t{\t\t\tSystem.out.println(\"Fause!\");\t\t}\t\t\t\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/If.java", "stars": "2", "class": {"name": "If", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sort", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void sort(int[] arr) {\t\tfor(int i = 0; i < arr.length; i++) {\t\t\tflag = 0;\t\t\tfor(int j = i+1; j < arr.length; j++) {\t\t\t\tif(arr[i] >= arr[j]) {\t\t\t\t\ttemp = arr[i];\t\t\t\t\tarr[i] = arr[j];\t\t\t\t\tarr[j] = temp;\t\t\t\t\tflag = 1;\t\t\t\t}//end of if\t\t\t}//end of j loop\t\t\tif(flag == 0) {\t\t\t\tbreak;\t\t\t}//end of if\t\t}//end of i loop\t}", "url": "https://raw.githubusercontent.com/likith22/DataStructures/master/BubbleSort.java", "stars": "2", "class": {"name": "BubbleSort", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contains", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "\tpublic List<String> contains(String word) {\t\tchar[] tempArray = word.toCharArray();\t\tArrays.sort(tempArray);\t\tString anagram = new String(tempArray);\t\tif (!this.containsKey(anagram))\t\t\treturn null;\t\telse\t\t\treturn this.get(anagram);\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/anagramDictionnaire.java", "stars": "4", "class": {"name": "anagramDictionnaire", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws IOException {\t\tanagramDictionnaire dico = new anagramDictionnaire(\"dico.txt\");\t\tSystem.out.println(dico.size());\t\tSystem.out.println(dico.contains('\"' + \"abaissait\" + '\"'));\t\tSystem.out.println(dico.contains('\"' + \"boi\" + '\"'));\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/anagramDictionnaire.java", "stars": "4", "class": {"name": "anagramDictionnaire", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "solveSudoku", "params": ["char"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void solveSudoku(char[][] board) {        this.board = board;        solve(ROW_START);    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/SudokuSolver.java", "stars": "1", "class": {"name": "SudokuSolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "solve", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean solve(int startingRow) {        for(int row = startingRow; row < ROW_END; row ++) {            for(int column = COLUMN_START; column < COLUMN_END; column ++) {                if(board[row][column] == NO_VALUE) {                    boolean[] notAvailable = notAvailable(row, column);                    for(int k = OPTION_START; k < OPTIONS_END; k ++) {                        if(!notAvailable[k]) {                            board[row][column] = (char) (k + '1');                            if (solve(row)) {                                return true;                            }                            board[row][column] = NO_VALUE;                        }                    }                    return false;                }            }        }        return true;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/SudokuSolver.java", "stars": "1", "class": {"name": "SudokuSolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "notAvailable", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean[] notAvailable(int row, int column) {        boolean[] notAvailable = new boolean[OPTIONS_SIZE];        char c;        for (int index = OPTION_START; index < OPTIONS_END; index ++) {            c = board[row][index];            if (c != NO_VALUE) {                notAvailable[c - '1'] = true;            }            c = board[index][column];            if (c != NO_VALUE) {                notAvailable[c - '1'] = true;            }            c = board[(row / SECTION_SIZE) * SECTION_SIZE + index / SECTION_SIZE][(column / SECTION_SIZE) * SECTION_SIZE + index % SECTION_SIZE];            if (c != NO_VALUE) {                notAvailable[c - '1'] = true;            }        }        return notAvailable;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/SudokuSolver.java", "stars": "1", "class": {"name": "SudokuSolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.activity_ptr_grid);\t\tmPullRefreshGridView = (PullToRefreshGridView) findViewById(R.id.pull_refresh_grid);\t\tmGridView = mPullRefreshGridView.getRefreshableView();\t\t// Set a listener to be invoked when the list should be refreshed.\t\tmPullRefreshGridView.setOnRefreshListener(new OnRefreshListener2<GridView>() {\t\t\t@Override\t\t\tpublic void onPullDownToRefresh(PullToRefreshBase<GridView> refreshView) {\t\t\t\tToast.makeText(PullToRefreshGridActivity.this, \"Pull Down!\", Toast.LENGTH_SHORT).show();\t\t\t\tnew GetDataTask().execute();\t\t\t}\t\t\t@Override\t\t\tpublic void onPullUpToRefresh(PullToRefreshBase<GridView> refreshView) {\t\t\t\tToast.makeText(PullToRefreshGridActivity.this, \"Pull Up!\", Toast.LENGTH_SHORT).show();\t\t\t\tnew GetDataTask().execute();\t\t\t}\t\t});\t\tmListItems = new LinkedList<String>();\t\tTextView tv = new TextView(this);\t\ttv.setGravity(Gravity.CENTER);\t\ttv.setText(\"Empty View, Pull Down/Up to Add Items\");\t\tmPullRefreshGridView.setEmptyView(tv);\t\tmAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, mListItems);\t\tmGridView.setAdapter(mAdapter);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshGridActivity.java", "stars": "74", "class": {"name": "PullToRefreshGridActivity", "extends": "Activity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onCreateOptionsMenu(Menu menu) {\t\tmenu.add(0, MENU_SET_MODE, 0,\t\t\t\tmPullRefreshGridView.getMode() == Mode.BOTH ? \"Change to MODE_PULL_DOWN\"\t\t\t\t\t\t: \"Change to MODE_PULL_BOTH\");\t\treturn super.onCreateOptionsMenu(menu);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshGridActivity.java", "stars": "74", "class": {"name": "PullToRefreshGridActivity", "extends": "Activity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onPrepareOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onPrepareOptionsMenu(Menu menu) {\t\tMenuItem setModeItem = menu.findItem(MENU_SET_MODE);\t\tsetModeItem.setTitle(mPullRefreshGridView.getMode() == Mode.BOTH ? \"Change to MODE_PULL_FROM_START\"\t\t\t\t: \"Change to MODE_PULL_BOTH\");\t\treturn super.onPrepareOptionsMenu(menu);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshGridActivity.java", "stars": "74", "class": {"name": "PullToRefreshGridActivity", "extends": "Activity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onOptionsItemSelected(MenuItem item) {\t\tswitch (item.getItemId()) {\t\t\tcase MENU_SET_MODE:\t\t\t\tmPullRefreshGridView\t\t\t\t\t\t.setMode(mPullRefreshGridView.getMode() == Mode.BOTH ? Mode.PULL_FROM_START\t\t\t\t\t\t\t\t: Mode.BOTH);\t\t\t\tbreak;\t\t}\t\treturn super.onOptionsItemSelected(item);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshGridActivity.java", "stars": "74", "class": {"name": "PullToRefreshGridActivity", "extends": "Activity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\t\tprotected String[] doInBackground(Void... params) {\t\t\t// Simulates a background job.\t\t\ttry {\t\t\t\tThread.sleep(2000);\t\t\t} catch (InterruptedException e) {\t\t\t}\t\t\treturn mStrings;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshGridActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPostExecute(String[] result) {\t\t\tmListItems.addFirst(\"Added after refresh...\");\t\t\tmListItems.addAll(Arrays.asList(result));\t\t\tmAdapter.notifyDataSetChanged();\t\t\t// Call onRefreshComplete when the list has been refreshed.\t\t\tmPullRefreshGridView.onRefreshComplete();\t\t\tsuper.onPostExecute(result);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshGridActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onDragEvent", "params": ["DragEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t    public boolean onDragEvent(DragEvent event) {\t        //in wich grid item am I?\t        //GridView parent = (GridView) getParent();\t        Object item = mGridView.getAdapter().getItem(\t        \t\tmGridView.getPositionForView(this));\t            //if you need the database id of your item...\t        Cursor cur = (Cursor) item;\t        long l_id = cur.getLong(cur.getColumnIndex(\"youritemid\"));\t        switch (event.getAction()) {\t        case DragEvent.ACTION_DRAG_STARTED:\t            return true;\t        case DragEvent.ACTION_DRAG_ENTERED:\t            setBackgroundColor(Color.GREEN);\t            invalidate();\t            return true;\t        case DragEvent.ACTION_DRAG_EXITED:\t            setBackgroundColor(Color.WHITE);\t            invalidate();\t            return false;\t        case DragEvent.ACTION_DROP:\tClipData cd = event.getClipData();\t            long l_id_start = Long.valueOf(cd.getItemAt(0).getText()\t                    .toString());\t            //\t            Toast.makeText(getContext(), \"DROP FROM \" + l_id_start\t                    + \" TO \" + l_id, Toast.LENGTH_LONG);\t            //do your stuff  \t                    //the db requery will be on the onDragEvent.drop of the container\t                    //see the listener\t            return false;\t        case DragEvent.ACTION_DRAG_ENDED:\t            setBackgroundColor(Color.WHITE);\t            invalidate();\t            //\t            return false;\t        }\t        return true;\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/PullToRefreshGridActivity.java", "stars": "74", "class": {"name": "DragableLinearLayout", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "testCrossReferenceXmlConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testCrossReferenceXmlConfig() throws Exception {    testCrossReference(getSqlSessionFactoryXmlConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/SameIdTest.java", "stars": "15", "class": {"name": "SameIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCrossReferenceJavaConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testCrossReferenceJavaConfig() throws Exception {    testCrossReference(getSqlSessionFactoryJavaConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/SameIdTest.java", "stars": "15", "class": {"name": "SameIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCrossReference", "params": ["SqlSessionFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void testCrossReference(SqlSessionFactory sqlSessionFactory) {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SameIdPersonMapper personMapper = sqlSession.getMapper(SameIdPersonMapper.class);      Person person = personMapper.select(1);      assertEquals((Integer) 1, person.getId());      assertEquals(2, person.getPets().size());      assertEquals((Integer) 2, person.getPets().get(1).getId());      Pet pet = personMapper.selectPet(1);      assertEquals(Integer.valueOf(1), pet.getId());      SameIdPetMapper petMapper = sqlSession.getMapper(SameIdPetMapper.class);      Pet pet2 = petMapper.select(3);      assertEquals((Integer)3, pet2.getId());      assertEquals((Integer)2, pet2.getOwner().getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/SameIdTest.java", "stars": "15", "class": {"name": "SameIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryXmlConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {    try (Reader configReader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/xml_external_ref/SameIdMapperConfig.xml\")) {      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader);      initDb(sqlSessionFactory);      return sqlSessionFactory;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/SameIdTest.java", "stars": "15", "class": {"name": "SameIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryJavaConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(), new UnpooledDataSource(        \"org.hsqldb.jdbcDriver\", \"jdbc:hsqldb:mem:xmlextref\", null));    configuration.setEnvironment(environment);    configuration.addMapper(SameIdPersonMapper.class);    configuration.addMapper(SameIdPetMapper.class);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    initDb(sqlSessionFactory);    return sqlSessionFactory;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/SameIdTest.java", "stars": "15", "class": {"name": "SameIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initDb", "params": ["SqlSessionFactory"], "throws": ["IOException", "SQLException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void initDb(SqlSessionFactory sqlSessionFactory) throws IOException, SQLException {    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/xml_external_ref/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/SameIdTest.java", "stars": "15", "class": {"name": "SameIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "\tpublic Long getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ClienteIdInput.java", "stars": "2", "class": {"name": "ClienteIdInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(Long id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ClienteIdInput.java", "stars": "2", "class": {"name": "ClienteIdInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "solution", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int solution(int x, int y, int d) {        // write your code in Java SE 8                int totalDist = y - x;                int jumps = (totalDist / d) + ((totalDist % d == 0) ? 0 : 1);                return jumps;    }", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/FrogJmp.java", "stars": "2", "class": {"name": "FrogJmp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// TODO Auto-generated method stub\t}", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/FrogJmp.java", "stars": "2", "class": {"name": "FrogJmp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadAlerters", "params": ["Props", "Emailer"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,Alerter>", "snippet": "  private Map<String, Alerter> loadAlerters(final Props props, final Emailer mailAlerter) {    final Map<String, Alerter> allAlerters = new HashMap<>();    allAlerters.put(\"default\", mailAlerter);    final String pluginDir = props.getString(\"alerter.plugin.dir\", \"plugins/alerter\");    allAlerters.putAll(loadPluginAlerters(pluginDir));    return allAlerters;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/AlerterHolder.java", "stars": "18", "class": {"name": "AlerterHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadPluginAlerters", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,Alerter>", "snippet": "  private Map<String, Alerter> loadPluginAlerters(final String pluginPath) {    final File alerterPluginPath = new File(pluginPath);    if (!alerterPluginPath.exists()) {      return Collections.<String, Alerter>emptyMap();    }    final Map<String, Alerter> installedAlerterPlugins =        new HashMap<>();    final ClassLoader parentLoader = getClass().getClassLoader();    final File[] pluginDirs = alerterPluginPath.listFiles();    final ArrayList<String> jarPaths = new ArrayList<>();    for (final File pluginDir : pluginDirs) {      if (!pluginDir.isDirectory()) {        logger.error(\"The plugin path \" + pluginDir + \" is not a directory.\");        continue;      }      // Load the conf directory      final File propertiesDir = new File(pluginDir, \"conf\");      Props pluginProps = null;      if (propertiesDir.exists() && propertiesDir.isDirectory()) {        final File propertiesFile = new File(propertiesDir, \"plugin.properties\");        final File propertiesOverrideFile =            new File(propertiesDir, \"override.properties\");        if (propertiesFile.exists()) {          if (propertiesOverrideFile.exists()) {            pluginProps =                PropsUtils.loadProps(null, propertiesFile,                    propertiesOverrideFile);          } else {            pluginProps = PropsUtils.loadProps(null, propertiesFile);          }        } else {          logger.error(\"Plugin conf file \" + propertiesFile + \" not found.\");          continue;        }      } else {        logger.error(\"Plugin conf path \" + propertiesDir + \" not found.\");        continue;      }      final String pluginName = pluginProps.getString(\"alerter.name\");      final List<String> extLibClasspath =          pluginProps.getStringList(\"alerter.external.classpaths\",              (List<String>) null);      final String pluginClass = pluginProps.getString(\"alerter.class\");      if (pluginClass == null) {        logger.error(\"Alerter class is not set.\");      } else {        logger.info(\"Plugin class \" + pluginClass);      }      URLClassLoader urlClassLoader = null;      final File libDir = new File(pluginDir, \"lib\");      if (libDir.exists() && libDir.isDirectory()) {        final File[] files = libDir.listFiles();        final ArrayList<URL> urls = new ArrayList<>();        for (int i = 0; i < files.length; ++i) {          try {            final URL url = files[i].toURI().toURL();            urls.add(url);          } catch (final MalformedURLException e) {            logger.error(e);          }        }        if (extLibClasspath != null) {          for (final String extLib : extLibClasspath) {            try {              final File file = new File(pluginDir, extLib);              final URL url = file.toURI().toURL();              urls.add(url);            } catch (final MalformedURLException e) {              logger.error(e);            }          }        }        urlClassLoader =            new URLClassLoader(urls.toArray(new URL[urls.size()]), parentLoader);      } else {        logger.error(\"Library path \" + propertiesDir + \" not found.\");        continue;      }      Class<?> alerterClass = null;      try {        alerterClass = urlClassLoader.loadClass(pluginClass);      } catch (final ClassNotFoundException e) {        logger.error(\"Class \" + pluginClass + \" not found.\");        continue;      }      final String source = FileIOUtils.getSourcePathFromClass(alerterClass);      logger.info(\"Source jar \" + source);      jarPaths.add(\"jar:file:\" + source);      Constructor<?> constructor = null;      try {        constructor = alerterClass.getConstructor(Props.class);      } catch (final NoSuchMethodException e) {        logger.error(\"Constructor not found in \" + pluginClass);        continue;      }      Object obj = null;      try {        obj = constructor.newInstance(pluginProps);      } catch (final Exception e) {        logger.error(e);      }      if (!(obj instanceof Alerter)) {        logger.error(\"The object is not an Alerter\");        continue;      }      final Alerter plugin = (Alerter) obj;      installedAlerterPlugins.put(pluginName, plugin);    }    return installedAlerterPlugins;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/AlerterHolder.java", "stars": "18", "class": {"name": "AlerterHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Alerter", "snippet": "  public Alerter get(final String alerterType) {    return this.alerters.get(alerterType);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/AlerterHolder.java", "stars": "18", "class": {"name": "AlerterHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowAlerterFlag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ConcurrentHashMap<Integer,Boolean>", "snippet": "  public ConcurrentHashMap<Integer, Boolean> getFlowAlerterFlag() {    return flowAlerterFlag;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/AlerterHolder.java", "stars": "18", "class": {"name": "AlerterHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFields", "params": ["Class"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Field>", "snippet": "    public static List<Field> getAllFields(Class resultType) {        List<Field> fieldList = new ArrayList<>();        Class tempClass = resultType;        while (tempClass != null && !tempClass.getName().toLowerCase().equals(\"java.lang.object\")) {            fieldList.addAll(Arrays.asList(tempClass.getDeclaredFields()));            tempClass = tempClass.getSuperclass();        }        return fieldList;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFieldMap", "params": ["Class"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,Field>", "snippet": "    public static Map<String, Field> getAllFieldMap(Class resultType) {        Map<String, Field> resultMap = new HashMap<>();        List<Field> fieldList = getAllFields(resultType);        fieldList.forEach(field -> {            resultMap.put(field.getName(), field);        });        return resultMap;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFieldsType", "params": ["Class"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "    public static Map<String, String> getAllFieldsType(Class resultType) {        Map<String, String> resultMap = new HashMap<>();        List<Field> fieldList = getAllFields(resultType);        fieldList.forEach(field -> {            resultMap.put(field.getName(), field.getType().getTypeName());        });        return resultMap;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassMap", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,Class>", "snippet": "    public static Map<String, Class> getClassMap(String packagePath) {        Map<String, Class> resultMap = new HashMap<>();        final ClassLoader loader = Thread.currentThread().getContextClassLoader();        try {            for (final ClassPath.ClassInfo info : ClassPath.from(loader).getTopLevelClasses()) {                if (info.getName().startsWith(\"com.avon.rga.config.model\")) {                    final Class<?> clazz = info.load();                    resultMap.put(clazz.getSimpleName(), clazz);                }            }        } catch (Exception e) {        }        return resultMap;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassType", "params": ["Class<?>"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "Class<?>", "snippet": "    public static Class<?> getClassType(final Class<?> clazz) throws Exception {        Type genericType = clazz.getGenericSuperclass();        if (!(genericType instanceof ParameterizedType)) {            return Object.class;        }        Type[] params = ((ParameterizedType) genericType).getActualTypeArguments();        if (!(params[0] instanceof Class)) {            return Object.class;        }        return (Class<?>) params[0];    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFieldValue", "params": ["Class<?>", "Map<String,Object>"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object setFieldValue(final Class<?> clazz, Map<String, Object> params) throws Exception {        Object obj = null;        if (clazz == null) {            throw new Exception(\"The Operation Error! Cause By: clazz is null\");        }        if (params != null) {            Class<?> objClass = getClassType(clazz);            if (objClass == null) {                throw new Exception(\"Error getting object instance! Cause By: objClass is null\");            }            obj = objClass.newInstance();            if (obj != null) {                Set<String> keys = params.keySet();                for (String key : keys) {                    String value = (String) params.get(key);                    if (value == null) {                        continue;                    }                    Field field = objClass.getDeclaredField(key);                    if (field != null) {                        field.setAccessible(true);                        String fieldType = field.getType().getTypeName();                        if (\"java.lang.Integer\".equals(fieldType)) {                            field.set(obj, Integer.valueOf(value));                        } else if (\"java.lang.Long\".equals(fieldType)) {                            field.set(obj, Long.valueOf(value));                        } else if (\"java.lang.Double\".equals(fieldType)) {                            field.set(obj, Double.valueOf(value));                        } else if (\"java.util.Date\".equals(fieldType)) {                            field.set(obj, Date.parse(value));                        } else {                            field.set(obj, value);                        }                    }                }            }        }        return obj;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeGetterMethod", "params": ["Object", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object invokeGetterMethod(Object obj, String propertyName) {        String getterMethodName = \"get\" + StringUtils.capitalize(propertyName);        return invokeMethod(obj, getterMethodName, new Class[]{},                new Object[]{});    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeSetterMethod", "params": ["Object", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void invokeSetterMethod(Object obj, String propertyName,                                          Object value) {        invokeSetterMethod(obj, propertyName, value, null);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeSetterMethod", "params": ["Object", "String", "Object", "Class<?>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void invokeSetterMethod(Object obj, String propertyName,                                          Object value, Class<?> propertyType) {        Class<?> type = propertyType != null ? propertyType : value.getClass();        String setterMethodName = \"set\" + StringUtils.capitalize(propertyName);        invokeMethod(obj, setterMethodName, new Class[]{type},                new Object[]{value});    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFieldValue", "params": ["Object", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object getFieldValue(final Object obj, final String fieldName) {        Field field = getAccessibleField(obj, fieldName);//        if (field == null) {//            throw new IllegalArgumentException(\"Could not find field [\"//                    + fieldName + \"] on target [\" + obj + \"]\");//        }        Object result = null;        try {            if (field != null) {                result = field.get(obj);            }        } catch (IllegalAccessException e) {        }        return result;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFieldValue", "params": ["Object", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setFieldValue(final Object obj, final String fieldName,                                     final Object value) {        Field field = getAccessibleField(obj, fieldName);        if (field == null) {            throw new IllegalArgumentException(\"Could not find field [\"                    + fieldName + \"] on target [\" + obj + \"]\");        }        try {            field.set(obj, value);        } catch (IllegalAccessException e) {            log.error(\"throw exception:{}\", e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAccessibleField", "params": ["Object", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Field", "snippet": "    public static Field getAccessibleField(final Object obj,                                           final String fieldName) {        Assert.notNull(obj, \"object can't be null\");        Assert.hasText(fieldName, \"fieldName\");        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass                .getSuperclass()) {            try {                Field field = superClass.getDeclaredField(fieldName);                field.setAccessible(true);                return field;            } catch (NoSuchFieldException e) {// NOSONAR            }        }        return null;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeMethod", "params": ["Object", "String", "Class<?>", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object invokeMethod(final Object obj,                                      final String methodName, final Class<?>[] parameterTypes,                                      final Object[] args) {        Method method = getAccessibleMethod(obj, methodName, parameterTypes);        if (method == null) {            throw new IllegalArgumentException(\"Could not find method [\"                    + methodName + \"] on target [\" + obj + \"]\");        }        try {            return method.invoke(obj, args);        } catch (Exception e) {            throw convertReflectionExceptionToUnchecked(e);        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAccessibleMethod", "params": ["Object", "String", "Class<?>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Method", "snippet": "    public static Method getAccessibleMethod(final Object obj,                                             final String methodName, final Class<?>... parameterTypes) {        Assert.notNull(obj, \"object can't be null\");        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass                .getSuperclass()) {            try {                Method method = superClass.getDeclaredMethod(methodName,                        parameterTypes);                method.setAccessible(true);                return method;            } catch (NoSuchMethodException e) {            }        }        return null;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSuperClassGenricType", "params": ["Class"], "throws": null, "modifiers": ["public", "static"], "return_type": "Class<T>", "snippet": "    public static <T> Class<T> getSuperClassGenricType(final Class clazz) {        return getSuperClassGenricType(clazz, 0);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSuperClassGenricType", "params": ["Class", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Class", "snippet": "    public static Class getSuperClassGenricType(final Class clazz,                                                final int index) {        Type genType = clazz.getGenericSuperclass();        if (!(genType instanceof ParameterizedType)) {            log.warn(clazz.getSimpleName()                    + \"'s superclass not ParameterizedType\");            return Object.class;        }        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();        if (index >= params.length || index < 0) {            log.warn(\"Index: \" + index + \", Size of \"                    + clazz.getSimpleName() + \"'s Parameterized Type: \"                    + params.length);            return Object.class;        }        if (!(params[index] instanceof Class)) {            log.warn(clazz.getSimpleName()                    + \" not set the actual class on superclass generic parameter\");            return Object.class;        }        return (Class) params[index];    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertReflectionExceptionToUnchecked", "params": ["Exception"], "throws": null, "modifiers": ["public", "static"], "return_type": "RuntimeException", "snippet": "    public static RuntimeException convertReflectionExceptionToUnchecked(            Exception e) {        if (e instanceof IllegalAccessException                || e instanceof IllegalArgumentException                || e instanceof NoSuchMethodException) {            return new IllegalArgumentException(\"Reflection Exception.\", e);        } else if (e instanceof InvocationTargetException) {            return new RuntimeException(\"Reflection Exception.\",                    ((InvocationTargetException) e).getTargetException());        } else if (e instanceof RuntimeException) {            return (RuntimeException) e;        }        return new RuntimeException(\"Unexpected Checked Exception.\", e);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/ReflectionUtils.java", "stars": "1", "class": {"name": "ReflectionUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTiles", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Tile", "snippet": "\tpublic Tile[] getTiles() {\t\treturn tiles;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/loader/BasicTileLoader.java", "stars": "3", "class": {"name": "BasicTileLoader", "extends": null, "implements": ["TileLoader"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        // \u8bbe\u7f6e\u4e00\u4e2aexit transition        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);            getWindow().setEnterTransition(new Explode());            getWindow().setExitTransition(new Explode());        }        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_list_video);        ButterKnife.bind(this);        listADNormalAdapter = new ListADNormalAdapter(this);        videoList.setAdapter(listADNormalAdapter);        videoList.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView view, int scrollState) {            }            @Override            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {                int lastVisibleItem = firstVisibleItem + visibleItemCount;                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e                if (GSYVideoManager.instance().getPlayPosition() >= 0) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = GSYVideoManager.instance().getPlayPosition();                    //\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                    if (GSYVideoManager.instance().getPlayTag().equals(ListADNormalAdapter.TAG)                            && (position < firstVisibleItem || position > lastVisibleItem)) {                        //\u5982\u679c\u6ed1\u51fa\u53bb\u4e86\u4e0a\u9762\u548c\u4e0b\u9762\u5c31\u662f\u5426\uff0c\u548c\u4eca\u65e5\u5934\u6761\u4e00\u6837                        //\u91ca\u653e\u5e7f\u544a\u548c\u89c6\u9891                        if (GSYVideoADManager.instance().listener() != null) {                            GSYVideoADManager.instance().listener().onAutoCompletion();                        }                        GSYVideoADManager.releaseAllVideos();                        GSYVideoManager.releaseAllVideos();                        listADNormalAdapter.notifyDataSetChanged();                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (GSYVideoADManager.backFromWindowFull(this)) {            return;        }        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        GSYVideoManager.onPause();        GSYVideoADManager.onPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        GSYVideoManager.onResume();        GSYVideoADManager.onResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        GSYVideoManager.releaseAllVideos();        GSYVideoADManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNeedAdOnStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNeedAdOnStart() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getCount() {            return list.size();        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getItem(int position) {            return null;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getItemId(int position) {            return 0;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "        public View getView(final int position, View convertView, ViewGroup parent) {            final ViewHolder holder;            if (convertView == null) {                holder = new ViewHolder();                convertView = inflater.inflate(R.layout.list_video_item_ad, null);                holder.gsyVideoPlayer = (SampleCoverVideo) convertView.findViewById(R.id.video_item_player);                holder.adVideoPlayer = (GSYADVideoPlayer) convertView.findViewById(R.id.video_ad_player);                convertView.setTag(holder);            } else {                holder = (ViewHolder) convertView.getTag();            }            final String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";            final String urlAD = \"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\";            //\u591a\u4e2a\u64ad\u653e\u65f6\u5fc5\u987b\u5728setUpLazy\u3001setUp\u548cgetGSYVideoManager()\u7b49\u524d\u9762\u8bbe\u7f6e            holder.gsyVideoPlayer.setPlayTag(TAG);            holder.gsyVideoPlayer.setPlayPosition(position);            boolean isPlaying = holder.gsyVideoPlayer.getCurrentPlayer().isInPlayingState();            if (!isPlaying) {                holder.gsyVideoPlayer.setUpLazy(url, false, null, null, \"\u8fd9\u662ftitle\");            }            boolean isADPlaying = holder.adVideoPlayer.getCurrentPlayer().isInPlayingState();            if (!isADPlaying) {                holder.adVideoPlayer.setUpLazy(urlAD, false, null, null, \"\u8fd9\u662ftitle\");            }            //\u589e\u52a0title            holder.gsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);            //\u8bbe\u7f6e\u8fd4\u56de\u952e            holder.gsyVideoPlayer.getBackButton().setVisibility(View.GONE);            //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd            holder.gsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    resolveFullBtn(holder.gsyVideoPlayer);                }            });            holder.adVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    resolveFullBtn(holder.adVideoPlayer);                }            });            holder.gsyVideoPlayer.setRotateViewAuto(false);            holder.adVideoPlayer.setRotateViewAuto(false);            holder.gsyVideoPlayer.setLockLand(true);            holder.adVideoPlayer.setLockLand(true);            holder.gsyVideoPlayer.setReleaseWhenLossAudio(false);            holder.adVideoPlayer.setReleaseWhenLossAudio(false);            holder.gsyVideoPlayer.setShowFullAnimation(false);            holder.adVideoPlayer.setShowFullAnimation(false);            holder.gsyVideoPlayer.setIsTouchWiget(false);            holder.adVideoPlayer.setIsTouchWiget(false);            holder.gsyVideoPlayer.setNeedLockFull(true);            if (position % 2 == 0) {                holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx1);            } else {                holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx2);            }            holder.gsyVideoPlayer.setVideoAllCallBack(new GSYSampleCallBack() {                @Override                public void onPrepared(String url, Object... objects) {                    super.onPrepared(url, objects);                    if (isNeedAdOnStart())                        startAdPlay(holder.adVideoPlayer, holder.gsyVideoPlayer);                }                @Override                public void onQuitFullscreen(String url, Object... objects) {                    super.onQuitFullscreen(url, objects);                }                @Override                public void onEnterFullscreen(String url, Object... objects) {                    super.onEnterFullscreen(url, objects);                    holder.gsyVideoPlayer.getCurrentPlayer().getTitleTextView().setText((String) objects[0]);                }                @Override                public void onAutoComplete(String url, Object... objects) {                    super.onAutoComplete(url, objects);                }            });            holder.adVideoPlayer.setVideoAllCallBack(new GSYSampleCallBack() {                @Override                public void onAutoComplete(String url, Object... objects) {                    //\u5e7f\u544a\u7ed3\u675f\uff0c\u91ca\u653e                    holder.adVideoPlayer.getCurrentPlayer().release();                    holder.adVideoPlayer.onVideoReset();                    holder.adVideoPlayer.setVisibility(View.GONE);                    //\u5f00\u59cb\u64ad\u653e\u539f\u89c6\u9891\uff0c\u6839\u636e\u662f\u5426\u5904\u4e8e\u5168\u5c4f\u72b6\u6001\u5224\u65ad                    int playPosition = holder.gsyVideoPlayer.getGSYVideoManager().getPlayPosition();                    if (position == playPosition) {                        holder.gsyVideoPlayer.getCurrentPlayer().startAfterPrepared();                    }                    if (holder.adVideoPlayer.getCurrentPlayer().isIfCurrentIsFullscreen()) {                        holder.adVideoPlayer.removeFullWindowViewOnly();                        if (!holder.gsyVideoPlayer.getCurrentPlayer().isIfCurrentIsFullscreen()) {                            resolveFullBtn(holder.gsyVideoPlayer);                            holder.gsyVideoPlayer.setSaveBeforeFullSystemUiVisibility(holder.adVideoPlayer.getSaveBeforeFullSystemUiVisibility());                        }                    }                }                @Override                public void onQuitFullscreen(String url, Object... objects) {                    //\u9000\u51fa\u5168\u5c4f\u903b\u8f91                    if (holder.gsyVideoPlayer.isIfCurrentIsFullscreen()) {                        holder.gsyVideoPlayer.onBackFullscreen();                    }                }            });            return convertView;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveFullBtn", "params": ["StandardGSYVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void resolveFullBtn(final StandardGSYVideoPlayer standardGSYVideoPlayer) {            standardGSYVideoPlayer.startWindowFullscreen(context, false, true);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "startAdPlay", "params": ["GSYADVideoPlayer", "StandardGSYVideoPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startAdPlay(GSYADVideoPlayer gsyadVideoPlayer, StandardGSYVideoPlayer normalPlayer) {            gsyadVideoPlayer.setVisibility(View.VISIBLE);            gsyadVideoPlayer.startPlayLogic();            if (normalPlayer.getCurrentPlayer().isIfCurrentIsFullscreen()) {                resolveFullBtn(gsyadVideoPlayer);                gsyadVideoPlayer.setSaveBeforeFullSystemUiVisibility(normalPlayer.getSaveBeforeFullSystemUiVisibility());            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListADVideoActivity.java", "stars": "2", "class": {"name": "ListADNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSetMTUFailure", "params": ["BleException"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onSetMTUFailure(BleException exception);    public abstract void onMtuChanged(int mtu);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleMtuChangedCallback.java", "stars": "2", "class": {"name": "BleMtuChangedCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onMtuChanged", "params": ["int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onMtuChanged(int mtu);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleMtuChangedCallback.java", "stars": "2", "class": {"name": "BleMtuChangedCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "convertTo", "params": ["List<Location>", "ConversionInfo"], "throws": null, "modifiers": ["public"], "return_type": "List<Map>", "snippet": "    public List<Map<String, Object>> convertTo(List<Location> locations, ConversionInfo conversionInfo) {        return locations.stream().map(Location::serialize).collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/converter/LocationListConverter.java", "stars": "3", "class": {"name": "LocationListConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "convertFrom", "params": ["List<Map>", "ConversionInfo"], "throws": null, "modifiers": ["public"], "return_type": "List<Location>", "snippet": "    public List<Location> convertFrom(List<Map<String, Object>> locations, ConversionInfo conversionInfo) {        return locations.stream().map(Location::deserialize).collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/converter/LocationListConverter.java", "stars": "3", "class": {"name": "LocationListConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "shouldOverrideUrlLoading", "params": ["android", "java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean shouldOverrideUrlLoading (android.webkit.WebView p0, java.lang.String p1)\t{\t\treturn n_shouldOverrideUrlLoading (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_shouldOverrideUrlLoading", "params": ["android", "java"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_shouldOverrideUrlLoading (android.webkit.WebView p0, java.lang.String p1);\tpublic boolean shouldOverrideUrlLoading (android.webkit.WebView p0, android.webkit.WebResourceRequest p1)\t{\t\treturn n_shouldOverrideUrlLoading (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "shouldOverrideUrlLoading", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean shouldOverrideUrlLoading (android.webkit.WebView p0, android.webkit.WebResourceRequest p1)\t{\t\treturn n_shouldOverrideUrlLoading (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_shouldOverrideUrlLoading", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_shouldOverrideUrlLoading (android.webkit.WebView p0, android.webkit.WebResourceRequest p1);\tpublic void onPageStarted (android.webkit.WebView p0, java.lang.String p1, android.graphics.Bitmap p2)\t{\t\tn_onPageStarted (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onPageStarted", "params": ["android", "java", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageStarted (android.webkit.WebView p0, java.lang.String p1, android.graphics.Bitmap p2)\t{\t\tn_onPageStarted (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onPageStarted", "params": ["android", "java", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageStarted (android.webkit.WebView p0, java.lang.String p1, android.graphics.Bitmap p2);\tpublic void onPageFinished (android.webkit.WebView p0, java.lang.String p1)\t{\t\tn_onPageFinished (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onPageFinished", "params": ["android", "java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageFinished (android.webkit.WebView p0, java.lang.String p1)\t{\t\tn_onPageFinished (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onPageFinished", "params": ["android", "java"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageFinished (android.webkit.WebView p0, java.lang.String p1);\tpublic void onReceivedError (android.webkit.WebView p0, int p1, java.lang.String p2, java.lang.String p3)\t{\t\tn_onReceivedError (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onReceivedError", "params": ["android", "int", "java", "java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onReceivedError (android.webkit.WebView p0, int p1, java.lang.String p2, java.lang.String p3)\t{\t\tn_onReceivedError (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onReceivedError", "params": ["android", "int", "java", "java"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onReceivedError (android.webkit.WebView p0, int p1, java.lang.String p2, java.lang.String p3);\tpublic void onReceivedError (android.webkit.WebView p0, android.webkit.WebResourceRequest p1, android.webkit.WebResourceError p2)\t{\t\tn_onReceivedError (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onReceivedError", "params": ["android", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onReceivedError (android.webkit.WebView p0, android.webkit.WebResourceRequest p1, android.webkit.WebResourceError p2)\t{\t\tn_onReceivedError (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onReceivedError", "params": ["android", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onReceivedError (android.webkit.WebView p0, android.webkit.WebResourceRequest p1, android.webkit.WebResourceError p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsWebViewClient.java", "stars": "2", "class": {"name": "FormsWebViewClient", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "resourceServletRegistration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ServletRegistrationBean<?>", "snippet": "\tpublic ServletRegistrationBean<?> resourceServletRegistration() {\t\tServletRegistrationBean<?> registration = new ServletRegistrationBean<HttpServlet>(new GetResourceServlet());\t\tregistration.addUrlMappings(\"/servletContext\");\t\treturn registration;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/com/example/ResourceHandlingApplication.java", "stars": "47572", "class": {"name": "ResourceHandlingApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resourcePathsServletRegistration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ServletRegistrationBean<?>", "snippet": "\tpublic ServletRegistrationBean<?> resourcePathsServletRegistration() {\t\tServletRegistrationBean<?> registration = new ServletRegistrationBean<HttpServlet>(\t\t\t\tnew GetResourcePathsServlet());\t\tregistration.addUrlMappings(\"/resourcePaths\");\t\treturn registration;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/com/example/ResourceHandlingApplication.java", "stars": "47572", "class": {"name": "ResourceHandlingApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tnew SpringApplicationBuilder(ResourceHandlingApplication.class).properties(\"server.port:0\")\t\t\t\t.listeners(new WebServerPortFileWriter(args[0])).run(args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/com/example/ResourceHandlingApplication.java", "stars": "47572", "class": {"name": "ResourceHandlingApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\t\t\tcollectResourcePaths(\"/\").forEach(resp.getWriter()::println);\t\t\tresp.getWriter().flush();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/com/example/ResourceHandlingApplication.java", "stars": "47572", "class": {"name": "GetResourcePathsServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "collectResourcePaths", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Set<String>", "snippet": "\t\tprivate Set<String> collectResourcePaths(String path) {\t\t\tSet<String> allResourcePaths = new LinkedHashSet<>();\t\t\tSet<String> pathsForPath = getServletContext().getResourcePaths(path);\t\t\tif (pathsForPath != null) {\t\t\t\tfor (String resourcePath : pathsForPath) {\t\t\t\t\tallResourcePaths.add(resourcePath);\t\t\t\t\tallResourcePaths.addAll(collectResourcePaths(resourcePath));\t\t\t\t}\t\t\t}\t\t\treturn allResourcePaths;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/com/example/ResourceHandlingApplication.java", "stars": "47572", "class": {"name": "GetResourcePathsServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\t\t\tURL resource = getServletContext().getResource(req.getQueryString());\t\t\tif (resource == null) {\t\t\t\tresp.sendError(404);\t\t\t}\t\t\telse {\t\t\t\tresp.getWriter().println(resource);\t\t\t\tresp.getWriter().flush();\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/com/example/ResourceHandlingApplication.java", "stars": "47572", "class": {"name": "GetResourceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "put", "params": ["K", "V"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean put(K key, V value) {\t\tboolean putSuccesfully = cache.put(key, value);\t\tif (putSuccesfully) {\t\t\tloadingDates.put(key, System.currentTimeMillis());\t\t}\t\treturn putSuccesfully;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LimitedAgeMemoryCache.java", "stars": "74", "class": {"name": "LimitedAgeMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "V", "snippet": "\tpublic V get(K key) {\t\tLong loadingDate = loadingDates.get(key);\t\tif (loadingDate != null && System.currentTimeMillis() - loadingDate > maxAge) {\t\t\tcache.remove(key);\t\t\tloadingDates.remove(key);\t\t}\t\treturn cache.get(key);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LimitedAgeMemoryCache.java", "stars": "74", "class": {"name": "LimitedAgeMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void remove(K key) {\t\tcache.remove(key);\t\tloadingDates.remove(key);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LimitedAgeMemoryCache.java", "stars": "74", "class": {"name": "LimitedAgeMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "keys", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<K>", "snippet": "\tpublic Collection<K> keys() {\t\treturn cache.keys();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LimitedAgeMemoryCache.java", "stars": "74", "class": {"name": "LimitedAgeMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\tcache.clear();\t\tloadingDates.clear();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LimitedAgeMemoryCache.java", "stars": "74", "class": {"name": "LimitedAgeMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "addSupportedMediaTypes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addSupportedMediaTypes(){        List<MediaType> mediaTypes = new ArrayList<>();        mediaTypes.add(MediaType.APPLICATION_JSON);        mediaTypes.add(new MediaType(\"application\", \"*+json\"));        if(StringUtils.isNotBlank(supportMedias)){            mediaTypes.addAll(MediaType.parseMediaTypes(supportMedias));        }        setSupportedMediaTypes(mediaTypes);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/http/converters/CustomHttpMessageConverter.java", "stars": "23", "class": {"name": "CustomHttpMessageConverter", "extends": "AbstractJackson2HttpMessageConverter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setJsonPrefix", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setJsonPrefix(String jsonPrefix) {        this.jsonPrefix = jsonPrefix;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/http/converters/CustomHttpMessageConverter.java", "stars": "23", "class": {"name": "CustomHttpMessageConverter", "extends": "AbstractJackson2HttpMessageConverter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPrefixJson", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPrefixJson(boolean prefixJson) {        this.jsonPrefix = (prefixJson ? \")]}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/http/converters/CustomHttpMessageConverter.java", "stars": "23", "class": {"name": "CustomHttpMessageConverter", "extends": "AbstractJackson2HttpMessageConverter", "implements": null, "modifiers": ["public"]}}, {"method_name": "writePrefix", "params": ["JsonGenerator", "Object"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writePrefix(JsonGenerator generator, Object object) throws IOException {        if (this.jsonPrefix != null) {            generator.writeRaw(this.jsonPrefix);        }        String jsonpFunction =                (object instanceof MappingJacksonValue ? ((MappingJacksonValue) object).getJsonpFunction() : null);        if (jsonpFunction != null) {            generator.writeRaw(\"/**/\");            generator.writeRaw(jsonpFunction + \"(\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/http/converters/CustomHttpMessageConverter.java", "stars": "23", "class": {"name": "CustomHttpMessageConverter", "extends": "AbstractJackson2HttpMessageConverter", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeSuffix", "params": ["JsonGenerator", "Object"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {        String jsonpFunction =                (object instanceof MappingJacksonValue ? ((MappingJacksonValue) object).getJsonpFunction() : null);        if (jsonpFunction != null) {            generator.writeRaw(\");\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/http/converters/CustomHttpMessageConverter.java", "stars": "23", "class": {"name": "CustomHttpMessageConverter", "extends": "AbstractJackson2HttpMessageConverter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSynopsis", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSynopsis() {        return synopsis;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSynopsis", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSynopsis(String synopsis) {        this.synopsis = synopsis;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRuntime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRuntime() {        return runtime;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRuntime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRuntime(String runtime) {        this.runtime = runtime;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCountry() {        return country;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountry", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountry(String country) {        this.country = country;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNetwork", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNetwork() {        return network;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNetwork", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNetwork(String network) {        this.network = network;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAirDay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAirDay() {        return airDay;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAirDay", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAirDay(String airDay) {        this.airDay = airDay;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAirTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAirTime() {        return airTime;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAirTime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAirTime(String airTime) {        this.airTime = airTime;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(String status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastUpdated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getLastUpdated() {        return lastUpdated;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastUpdated", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastUpdated(long lastUpdated) {        this.lastUpdated = lastUpdated;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getV", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getV() {        return v;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setV", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setV(int v) {        this.v = v;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEpisodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Episode>", "snippet": "    public List<Episode> getEpisodes() {        return episodes;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setEpisodes", "params": ["List<Episode>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEpisodes(List<Episode> episodes) {        this.episodes = episodes;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGenres", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getGenres() {        return genres;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGenres", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGenres(List<String> genres) {        this.genres = genres;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/ShowDetails.java", "stars": "4", "class": {"name": "ShowDetails", "extends": "Show", "implements": null, "modifiers": ["public"]}}, {"method_name": "listLimits", "params": ["Player", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void listLimits(Player player, String[] args) {        player.sendMessage(ChatColor.BOLD + \"\" + ChatColor.DARK_PURPLE + \"---=== \" + ChatColor.YELLOW + \"Your Block Placement Limits \" + ChatColor.DARK_PURPLE + \"===---\");        PlayerBlockPlacementLimit playerLimit = getLimitsManager().getPlayerLimit(player);        List<String> messages = new ArrayList<>();        playerLimit.getCounts().forEach((material, integer) -> {            StringBuilder sb = new StringBuilder();            messages.add(sb.append(ChatColor.BOLD).append(ChatColor.GREEN).append(material.name()).append(\": \")                    .append(ChatColor.RESET).append(ChatColor.AQUA).append(\"you placed \")                    .append(integer).append(ChatColor.GREEN).append(\"/\").append(ChatColor.AQUA).append(playerLimit.getLimit(material).orElse(0)).toString());        });        player.sendMessage(messages.toArray(new String[0]));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/commands/LimitsCommand.java", "stars": "3", "class": {"name": "LimitsCommand", "extends": "BaseCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        LOG.info(\"DataX jobContainer starts job.\");        boolean hasException = false;        boolean isDryRun = false;        try {            this.startTimeStamp = System.currentTimeMillis();            isDryRun = configuration.getBool(CoreConstant.DATAX_JOB_SETTING_DRYRUN, false);            if (isDryRun) {                LOG.info(\"jobContainer starts to do preCheck ...\");                this.preCheck();            } else {//                userConf = configuration.clone();                LOG.debug(\"jobContainer starts to do preHandle ...\");                this.preHandle();                LOG.debug(\"jobContainer starts to do init ...\");                this.init();                if(configuration.getBool(CoreConstant.DATAX_JOB_SETTING_SYNCMETA, false)){                    LOG.info(\"jobContainer starts to do syncMetaData ...\");                    this.syncMetaData();                }                LOG.info(\"jobContainer starts to do prepare ...\");                this.prepare();                LOG.info(\"jobContainer starts to do split ...\");                this.totalStage = this.split();                if(this.totalStage > 0) {                    LOG.info(\"jobContainer starts to do schedule ...\");                    this.schedule();                }                LOG.debug(\"jobContainer starts to do post ...\");                this.post();                LOG.debug(\"jobContainer starts to do postHandle ...\");                this.postHandle();                LOG.info(\"DataX jobId [{}] completed successfully.\", this.jobId);                this.invokeHooks();            }        } catch (Throwable e) {            LOG.error(\"Exception when job run\", e);            hasException = true;            if (e instanceof OutOfMemoryError) {                try {                    this.destroy();                }catch(Exception e1){                    //ignore                }                System.gc();            }            if (super.getContainerCommunicator() == null) {                // \u7531\u4e8e containerCollector \u662f\u5728 scheduler() \u4e2d\u521d\u59cb\u5316\u7684\uff0c\u6240\u4ee5\u5f53\u5728 scheduler() \u4e4b\u524d\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u9700\u8981\u5728\u6b64\u5904\u5bf9 containerCollector \u8fdb\u884c\u521d\u59cb\u5316                AbstractContainerCommunicator tempContainerCollector;                // standalone                tempContainerCollector = new StandAloneJobContainerCommunicator(configuration);                super.setContainerCommunicator(tempContainerCollector);            }            Communication communication = super.getContainerCommunicator().collect();            // \u6c47\u62a5\u524d\u7684\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u624b\u52a8\u8fdb\u884c\u8bbe\u7f6e            // communication.setState(State.FAILED);            communication.setThrowable(e);            communication.setTimestamp(this.endTimeStamp);            Communication tempComm = new Communication();            tempComm.setTimestamp(this.startTransferTimeStamp);            Communication reportCommunication = CommunicationTool.getReportCommunication(communication, tempComm, this.totalStage);            super.getContainerCommunicator().report(reportCommunication);            throw DataXException.asDataXException(                    FrameworkErrorCode.RUNTIME_ERROR, e);        } finally {            if (!isDryRun) {                this.destroy();                this.endTimeStamp = System.currentTimeMillis();                if (!hasException) {                    //\u6700\u540e\u6253\u5370cpu\u7684\u5e73\u5747\u6d88\u8017\uff0cGC\u7684\u7edf\u8ba1                    VMInfo vmInfo = VMInfo.getVmInfo();                    if (vmInfo != null) {                        vmInfo.getDelta(false);                        LOG.info(vmInfo.totalString());                    }                    LOG.info(PerfTrace.getInstance().summarizeNoException());                    this.logStatistics();                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {        LOG.info(\"shutdown job container and clean the dirty data\");        if(null != taskGroupScheduler){            taskGroupScheduler.stopSchedule();        }        LOG.info(\"invoke destroy method\");        this.destroy();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "preCheck", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void preCheck() {        this.preCheckInit();        this.adjustChannelNumber();        if (this.needChannelNumber <= 0) {            this.needChannelNumber = 1;        }        this.preCheckReader();        this.preCheckWriter();        LOG.info(\"PreCheck\u901a\u8fc7\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "preCheckInit", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void preCheckInit() {        this.jobId = this.configuration.getLong(                CoreConstant.DATAX_CORE_CONTAINER_JOB_ID, -1);        if (this.jobId < 0) {            LOG.info(\"Set jobId = 0\");            this.jobId = 0;            this.configuration.set(CoreConstant.DATAX_CORE_CONTAINER_JOB_ID,                    this.jobId);        }        Thread.currentThread().setName(\"job-\" + this.jobId);        JobPluginCollector jobPluginCollector = new DefaultJobPluginCollector(                this.getContainerCommunicator());        this.jobReader = this.preCheckReaderInit(jobPluginCollector);        this.jobWriters = this.preCheckWriterInit(jobPluginCollector);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "preCheckReaderInit", "params": ["JobPluginCollector"], "throws": null, "modifiers": ["private"], "return_type": "Reader", "snippet": "    private Reader.Job preCheckReaderInit(JobPluginCollector jobPluginCollector) {        this.readerPluginName = this.configuration.getString(                CoreConstant.DATAX_JOB_CONTENT_READER_NAME);        classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                PluginType.READER, this.readerPluginName));        Reader.Job jobReader = (Reader.Job) LoadUtil.loadJobPlugin(                PluginType.READER, this.readerPluginName);        // Set reader parameters in configuration        jobReader.setPluginJobConf(this.configuration.getConfiguration(                CoreConstant.DATAX_JOB_CONTENT_READER_PARAMETER));        //Set writer parameters in configuration        List<Configuration> writerConfList = getJobWriterConfigList(this.configuration);        writerConfList.forEach(jobReader::addPeerPluginJobConf);        jobReader.setJobPluginCollector(jobPluginCollector);        classLoaderSwapper.restoreCurrentThreadClassLoader();        return jobReader;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "preCheckWriterInit", "params": ["JobPluginCollector"], "throws": null, "modifiers": ["private"], "return_type": "List<Writer>", "snippet": "    private List<Writer.Job> preCheckWriterInit(JobPluginCollector jobPluginCollector) {        List<Configuration> writerConfList = getJobWriterConfigList(this.configuration);        List<Writer.Job> writerJobs = new ArrayList<>();        this.writerPluginNames = new String[writerConfList.size()];        for(int i = 0; i < writerConfList.size(); i ++){            Configuration writerConf = writerConfList.get(i);            this.writerPluginNames[i] = this.configuration.getString(                    String.format(CoreConstant.DATAX_JOB_CONTENT_WRITER_ARRAY_NAME, i));            classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                    PluginType.WRITER, this.writerPluginNames[i]            ));            Writer.Job jobWriter = (Writer.Job) LoadUtil.loadJobPlugin(                    PluginType.WRITER, this.writerPluginNames[i]);            //Set writer parameter in configuration            jobWriter.setPluginJobConf(writerConf);            //Set reader parameter in configuration            jobWriter.addPeerPluginJobConf(this.configuration.getConfiguration(                    CoreConstant.DATAX_JOB_CONTENT_READER_PARAMETER));            //Set peer plugin name            jobWriter.addPeerPluginName(this.readerPluginName);            jobWriter.setJobPluginCollector(jobPluginCollector);            writerJobs.add(jobWriter);            classLoaderSwapper.restoreCurrentThreadClassLoader();        }        //Remain JVM to collect garbage?        writerConfList.clear();        return writerJobs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "preCheckReader", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void preCheckReader() {        classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                PluginType.READER, this.readerPluginName));        LOG.info(String.format(\"DataX Reader.Job [%s] do preCheck work .\",                this.readerPluginName));        this.jobReader.preCheck();        classLoaderSwapper.restoreCurrentThreadClassLoader();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "preCheckWriter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void preCheckWriter() {        LOG.info(\"DataX Writer.Jobs [\" + StringUtils.join(this.writerPluginNames, \",\") + \"] do preCheck work\");        this.jobWriters.forEach( jobWriter -> {            classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                    PluginType.WRITER, jobWriter.getPluginName()));            LOG.info(\"Writer.Job:[\" + jobWriter.getPluginName() + \"] start to pre check\");            jobWriter.preCheck();            classLoaderSwapper.restoreCurrentThreadClassLoader();        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        this.jobId = this.configuration.getLong(                CoreConstant.DATAX_CORE_CONTAINER_JOB_ID, -1);        if (this.jobId < 0) {            LOG.info(\"Set jobId = 0\");            this.jobId = 0;            this.configuration.set(CoreConstant.DATAX_CORE_CONTAINER_JOB_ID,                    this.jobId);        }        Thread.currentThread().setName(\"job-\" + this.jobId);        JobPluginCollector jobPluginCollector = new DefaultJobPluginCollector(                this.getContainerCommunicator());        //add shutdown hook to jvm in order to clear dirty data        Runtime.getRuntime().addShutdownHook(new Thread(this::shutdown));        //\u5fc5\u987b\u5148Reader \uff0c\u540eWriter        this.jobReader = this.initJobReader(jobPluginCollector);        this.jobWriters = this.initJobWriter(jobPluginCollector);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "syncMetaData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void syncMetaData(){        classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil                .getJarLoader(PluginType.READER, this.readerPluginName));        LOG.info(\"Reader.Job [{}] do get meta schema\", this.readerPluginName);        MetaSchema metaSchema = this.jobReader.syncMetaData();        LOG.info(\"Meta schema: [{}]\", GsonUtil.toJson(metaSchema));        classLoaderSwapper.restoreCurrentThreadClassLoader();        if(null != metaSchema) {            this.jobWriters.forEach(jobWriter -> {                classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil                        .getJarLoader(PluginType.WRITER, jobWriter.getPluginName()));                LOG.info(\"Writer.Job [{}] do sync meta schema\", jobWriter.getPluginName());                jobWriter.syncMetaData(metaSchema);                classLoaderSwapper.restoreCurrentThreadClassLoader();            });        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void prepare() {        this.prepareJobReader();        this.prepareJobWriter();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "preHandle", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void preHandle() {        String handlerPluginTypeStr = this.configuration.getString(                CoreConstant.DATAX_JOB_PREHANDLER_PLUGINTYPE);        if (!StringUtils.isNotEmpty(handlerPluginTypeStr)) {            return;        }        PluginType handlerPluginType;        try {            handlerPluginType = PluginType.valueOf(handlerPluginTypeStr.toUpperCase());        } catch (IllegalArgumentException e) {            throw DataXException.asDataXException(                    FrameworkErrorCode.CONFIG_ERROR,                    String.format(\"Job preHandler's pluginType(%s) set error, reason(%s)\", handlerPluginTypeStr.toUpperCase(), e.getMessage()));        }        String handlerPluginName = this.configuration.getString(                CoreConstant.DATAX_JOB_PREHANDLER_PLUGINNAME);        classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                handlerPluginType, handlerPluginName));        AbstractJobPlugin handler = LoadUtil.loadJobPlugin(                handlerPluginType, handlerPluginName);        JobPluginCollector jobPluginCollector = new DefaultJobPluginCollector(                this.getContainerCommunicator());        handler.setJobPluginCollector(jobPluginCollector);        //todo configuration\u7684\u5b89\u5168\u6027\uff0c\u5c06\u6765\u5fc5\u987b\u4fdd\u8bc1        handler.preHandler(configuration);        classLoaderSwapper.restoreCurrentThreadClassLoader();        LOG.info(\"After PreHandler: \\n\" + Engine.filterJobConfiguration(configuration) + \"\\n\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "postHandle", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void postHandle() {        String handlerPluginTypeStr = this.configuration.getString(                CoreConstant.DATAX_JOB_POSTHANDLER_PLUGINTYPE);        if (!StringUtils.isNotEmpty(handlerPluginTypeStr)) {            return;        }        PluginType handlerPluginType;        try {            handlerPluginType = PluginType.valueOf(handlerPluginTypeStr.toUpperCase());        } catch (IllegalArgumentException e) {            throw DataXException.asDataXException(                    FrameworkErrorCode.CONFIG_ERROR,                    String.format(\"Job postHandler's pluginType(%s) set error, reason(%s)\", handlerPluginTypeStr.toUpperCase(), e.getMessage()));        }        String handlerPluginName = this.configuration.getString(                CoreConstant.DATAX_JOB_POSTHANDLER_PLUGINNAME);        classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                handlerPluginType, handlerPluginName));        AbstractJobPlugin handler = LoadUtil.loadJobPlugin(                handlerPluginType, handlerPluginName);        JobPluginCollector jobPluginCollector = new DefaultJobPluginCollector(                this.getContainerCommunicator());        handler.setJobPluginCollector(jobPluginCollector);        handler.postHandler(configuration);        classLoaderSwapper.restoreCurrentThreadClassLoader();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "split", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int split() {        this.adjustChannelNumber();        if (this.needChannelNumber <= 0) {            this.needChannelNumber = 1;        }        List<Configuration> readerTaskConfigs = this                .doReaderSplit(this.needChannelNumber);        if(readerTaskConfigs.isEmpty()){            return 0;        }        int taskNumber = readerTaskConfigs.size();        List<Configuration> writerTaskConfigs = this                .doWriterSplit(taskNumber);        //adjust the speed limitation of channel        if(taskNumber <= needChannelNumber){            needChannelNumber = taskNumber;            adjustChannelSpeedByNumber(needChannelNumber);        }        LOG.info(\"Job final Channel-Number: [\" + needChannelNumber + \"]\");        //change the channel speed when channel speed * taskNumber        List<Configuration> transformerList = this.configuration.getListConfiguration(CoreConstant.DATAX_JOB_CONTENT_TRANSFORMER);        LOG.debug(\"transformer configuration: \" + JSON.toJSONString(transformerList));        //input:  reader parameter list and writer task list(contain properties: parameter, name and processor)        //output: \"content\" array        List<Configuration> contentConfig = mergeReaderAndWriterTaskConfigs(                readerTaskConfigs, writerTaskConfigs, transformerList);        LOG.debug(\"contentConfig configuration: \" + JSON.toJSONString(contentConfig));        this.configuration.set(CoreConstant.DATAX_JOB_CONTENT, contentConfig);        return contentConfig.size();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "adjustChannelNumber", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void adjustChannelNumber() {        int needChannelNumberByByte = Integer.MAX_VALUE;        int needChannelNumberByRecord = Integer.MAX_VALUE;        boolean isByteLimit = (this.configuration.getLong(                CoreConstant.DATAX_JOB_SETTING_SPEED_BYTE, 0) > 0);        if (isByteLimit) {            long globalLimitedByteSpeed = this.configuration.getLong(                    CoreConstant.DATAX_JOB_SETTING_SPEED_BYTE, 10 * 1024L * 1024L);            // \u5728byte\u6d41\u63a7\u60c5\u51b5\u4e0b\uff0c\u5355\u4e2aChannel\u6d41\u91cf\u6700\u5927\u503c\u5fc5\u987b\u8bbe\u7f6e\uff0c\u5426\u5219\u62a5\u9519\uff01            Long channelLimitedByteSpeed = this.configuration                    .getLong(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_BYTE);            if (channelLimitedByteSpeed == null || channelLimitedByteSpeed <= 0) {                DataXException.asDataXException(                        FrameworkErrorCode.CONFIG_ERROR,                        \"\u5728\u6709\u603bbps\u9650\u901f\u6761\u4ef6\u4e0b\uff0c\u5355\u4e2achannel\u7684bps\u503c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u4e0d\u80fd\u4e3a\u975e\u6b63\u6570\");            }            needChannelNumberByByte =                    (int) (globalLimitedByteSpeed / channelLimitedByteSpeed);            if(needChannelNumberByByte <= 0){                needChannelNumberByByte = 1;                //globalLimitedByteSpeed < channelLimitedByteSpeed                this.configuration.set(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_BYTE, globalLimitedByteSpeed);            }            LOG.info(\"Job set Max-Byte-Speed to \" + globalLimitedByteSpeed + \" bytes.\");        }        boolean isRecordLimit = (this.configuration.getLong(                CoreConstant.DATAX_JOB_SETTING_SPEED_RECORD, 0)) > 0;        if (isRecordLimit) {            long globalLimitedRecordSpeed = this.configuration.getLong(                    CoreConstant.DATAX_JOB_SETTING_SPEED_RECORD, 100000);            Long channelLimitedRecordSpeed = this.configuration.getLong(                    CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_RECORD);            if (channelLimitedRecordSpeed == null || channelLimitedRecordSpeed <= 0) {                DataXException.asDataXException(FrameworkErrorCode.CONFIG_ERROR,                        \"\u5728\u6709\u603btps\u9650\u901f\u6761\u4ef6\u4e0b\uff0c\u5355\u4e2achannel\u7684tps\u503c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u4e0d\u80fd\u4e3a\u975e\u6b63\u6570\");            }            needChannelNumberByRecord =                    (int) (globalLimitedRecordSpeed / channelLimitedRecordSpeed);            if(needChannelNumberByRecord <= 0){                needChannelNumberByRecord = 1;                //globalLimitedRecordSpeed < channelLimitedRecordSpeed                this.configuration.set(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_RECORD,  globalLimitedRecordSpeed);            }            LOG.info(\"Job set Max-Record-Speed to \" + globalLimitedRecordSpeed + \" records.\");        }        // \u53d6\u8f83\u5c0f\u503c        this.needChannelNumber = needChannelNumberByByte < needChannelNumberByRecord ?                needChannelNumberByByte : needChannelNumberByRecord;        boolean isChannelLimit = (this.configuration.getLong(                CoreConstant.DATAX_JOB_SETTING_SPEED_CHANNEL, 0) > 0);        if (isChannelLimit) {            //limit the max number of channel            int maxChannelNumber = this.configuration.getInt(                    CoreConstant.DATAX_JOB_SETTING_SPEED_CHANNEL);            if(this.needChannelNumber > maxChannelNumber){                this.needChannelNumber = maxChannelNumber;            }        }        if(needChannelNumber >= Integer.MAX_VALUE) {            throw DataXException.asDataXException(                    FrameworkErrorCode.CONFIG_ERROR,                    \"Job\u8fd0\u884c\u901f\u5ea6\u5fc5\u987b\u8bbe\u7f6e\");        }        adjustChannelSpeedByNumber(needChannelNumber);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "schedule", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void schedule() {        /**         * \u8fd9\u91cc\u7684\u5168\u5c40speed\u548c\u6bcf\u4e2achannel\u7684\u901f\u5ea6\u8bbe\u7f6e\u4e3aB/s         */        int channelsPerTaskGroup = this.configuration.getInt(                CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_CHANNEL, 5);        int taskNumber = this.configuration.getList(                CoreConstant.DATAX_JOB_CONTENT).size();        this.needChannelNumber = Math.min(this.needChannelNumber, taskNumber);        PerfTrace.getInstance().setChannelNumber(needChannelNumber);        /**         * \u901a\u8fc7\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u5f97\u5230\u6bcf\u4e2ataskGroup\u9700\u8981\u8fd0\u884c\u54ea\u4e9btasks\u4efb\u52a1         */        List<Configuration> taskGroupConfigs = JobAssignUtil.assignFairly(this.configuration,                this.needChannelNumber, channelsPerTaskGroup);        LOG.info(\"Scheduler starts [{}] taskGroups.\", taskGroupConfigs.size());        ExecuteMode executeMode = null;        AbstractScheduler scheduler;        try {            executeMode = ExecuteMode.STANDALONE;            scheduler = initStandaloneScheduler(this.configuration);            //\u8bbe\u7f6e executeMode \u548c transportType            for (Configuration taskGroupConfig : taskGroupConfigs) {                taskGroupConfig.set(CoreConstant.DATAX_CORE_CONTAINER_JOB_MODE, executeMode.getValue());                taskGroupConfig.set(CoreConstant.DATAX_CORE_TRANSPORT_TYPE, this.configuration.getString(CoreConstant.DATAX_JOB_SETTING_TRANSPORT_TYPE, \"record\"));            }            LOG.info(\"Running by {} Mode.\", executeMode);            this.startTransferTimeStamp = System.currentTimeMillis();            this.taskGroupScheduler = scheduler;            scheduler.schedule(taskGroupConfigs);            this.endTransferTimeStamp = System.currentTimeMillis();        } catch (Exception e) {            LOG.error(\"\u8fd0\u884cscheduler \u6a21\u5f0f[{}]\u51fa\u9519.\", executeMode);            this.endTransferTimeStamp = System.currentTimeMillis();            throw DataXException.asDataXException(                    FrameworkErrorCode.RUNTIME_ERROR, e);        }        /**         * \u68c0\u67e5\u4efb\u52a1\u6267\u884c\u60c5\u51b5         */        this.checkLimit();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "initStandaloneScheduler", "params": ["Configuration"], "throws": null, "modifiers": ["private"], "return_type": "AbstractScheduler", "snippet": "    private AbstractScheduler initStandaloneScheduler(Configuration configuration) {        AbstractContainerCommunicator containerCommunicator = new StandAloneJobContainerCommunicator(configuration);        super.setContainerCommunicator(containerCommunicator);        return new StandAloneScheduler(containerCommunicator);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void post() {        this.postJobWriter();        this.postJobReader();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void destroy() {        if (!this.jobWriters.isEmpty()) {            jobWriters.removeIf(jobWriter ->{                classLoaderSwapper.setCurrentThreadClassLoader(                        LoadUtil.getJarLoader(PluginType.WRITER, jobWriter.getPluginName())                );                jobWriter.destroy();                classLoaderSwapper.restoreCurrentThreadClassLoader();                return true;            });        }        if (this.jobReader != null) {            classLoaderSwapper.setCurrentThreadClassLoader(                    LoadUtil.getJarLoader(PluginType.READER, this.readerPluginName)            );            this.jobReader.destroy();            this.jobReader = null;            classLoaderSwapper.restoreCurrentThreadClassLoader();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "logStatistics", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void logStatistics() {        long totalCosts = (this.endTimeStamp - this.startTimeStamp) / 1000;        long transferCosts = (this.endTransferTimeStamp - this.startTransferTimeStamp) / 1000;        if (0L == transferCosts) {            transferCosts = 1L;        }        if (super.getContainerCommunicator() == null) {            return;        }        Communication communication = super.getContainerCommunicator().collect();        communication.setTimestamp(this.endTimeStamp);        Communication tempComm = new Communication();        tempComm.setTimestamp(this.startTransferTimeStamp);        Communication reportCommunication = CommunicationTool.getReportCommunication(communication, tempComm, this.totalStage);        // \u5b57\u8282\u901f\u7387        long byteSpeedPerSecond = communication.getLongCounter(CommunicationTool.READ_SUCCEED_BYTES)                / transferCosts;        long recordSpeedPerSecond = communication.getLongCounter(CommunicationTool.READ_SUCCEED_RECORDS)                / transferCosts;        reportCommunication.setLongCounter(CommunicationTool.BYTE_SPEED, byteSpeedPerSecond);        reportCommunication.setLongCounter(CommunicationTool.RECORD_SPEED, recordSpeedPerSecond);        super.getContainerCommunicator().report(reportCommunication);        SimpleDateFormat dateFormat = new SimpleDateFormat(                \"yyyy-MM-dd HH:mm:ss\");        String msg = String.format(                \"\\n\" + \"%-26s: %-18s\\n\" + \"%-26s: %-18s\\n\" + \"%-26s: %19s\\n\"                        + \"%-26s: %19s\\n\" + \"%-26s: %19s\\n\" + \"%-26s: %19s\\n\"                        + \"%-26s: %19s\\n\",                \"\u4efb\u52a1\u542f\u52a8\u65f6\u523b\",                dateFormat.format(startTimeStamp),                \"\u4efb\u52a1\u7ed3\u675f\u65f6\u523b\",                dateFormat.format(endTimeStamp),                \"\u4efb\u52a1\u603b\u8ba1\u8017\u65f6\",                String.valueOf(totalCosts) + \"s\",                \"\u4efb\u52a1\u5e73\u5747\u6d41\u91cf\",                StrUtil.stringify(byteSpeedPerSecond)                        + \"/s\",                \"\u8bb0\u5f55\u5199\u5165\u901f\u5ea6\",                String.valueOf(recordSpeedPerSecond)                        + \"rec/s\",                transportType == TransportType.RECORD?\"\u8bfb\u51fa\u8bb0\u5f55\u603b\u6570\":\"\u8bfb\u51fa\u6570\u636e\u603b\u6570\",                transportType == TransportType.RECORD?                        String.valueOf(CommunicationTool.getTotalReadRecords(communication)) :                    String.valueOf(CommunicationTool.getTotalReadBytes(communication)) +\"(Bytes)\",                \"\u8bfb\u5199\u5931\u8d25\u603b\u6570\",                transportType == TransportType.RECORD?                        String.valueOf(CommunicationTool.getTotalErrorRecords(communication)):\"\"        );        LOG.info(msg);        if (communication.getLongCounter(CommunicationTool.TRANSFORMER_SUCCEED_RECORDS) > 0                || communication.getLongCounter(CommunicationTool.TRANSFORMER_FAILED_RECORDS) > 0                || communication.getLongCounter(CommunicationTool.TRANSFORMER_FILTER_RECORDS) > 0) {            String tmsg = String.format(                    \"\\n\" + \"%-26s: %19s\\n\" + \"%-26s: %19s\\n\" + \"%-26s: %19s\\n\",                    \"Transformer\u6210\u529f\u8bb0\u5f55\u603b\u6570\",                    communication.getLongCounter(CommunicationTool.TRANSFORMER_SUCCEED_RECORDS),                    \"Transformer\u5931\u8d25\u8bb0\u5f55\u603b\u6570\",                    communication.getLongCounter(CommunicationTool.TRANSFORMER_FAILED_RECORDS),                    \"Transformer\u8fc7\u6ee4\u8bb0\u5f55\u603b\u6570\",                    communication.getLongCounter(CommunicationTool.TRANSFORMER_FILTER_RECORDS)            );            LOG.info(tmsg);        }        //report to server        try {            HttpClientUtil httpClientUtil = HttpClientUtil.getHttpClientUtil();            Map<String,Object> report =new HashMap<>(10);            report.put(\"id\", configuration.getLong(CoreConstant.DATAX_CORE_CONTAINER_JOB_ID));            report.put(\"byteSpeedPerSecond\",byteSpeedPerSecond);            report.put(\"recordSpeedPerSecond\",recordSpeedPerSecond);            report.put(\"totalCosts\",totalCosts);            report.put(\"totalErrorRecords\",CommunicationTool.getTotalErrorRecords(communication));            report.put(\"totalReadRecords\",CommunicationTool.getTotalReadRecords(communication));            report.put(\"totalReadBytes\", CommunicationTool.getTotalReadBytes(communication));            report.put(\"transformerFailedRecords\",communication.getLongCounter(CommunicationTool.TRANSFORMER_FAILED_RECORDS));            report.put(\"transformerFilterRecords\",communication.getLongCounter(CommunicationTool.TRANSFORMER_FILTER_RECORDS));            report.put(\"transformerTotalRecords\",communication.getLongCounter(CommunicationTool.TRANSFORMER_SUCCEED_RECORDS));            StringEntity entity = new StringEntity(JSON.toJSONString(report));            entity.setContentEncoding(\"UTF-8\");            entity.setContentType(\"application/json\");            HttpPost post = HttpClientUtil.getPostRequest(configuration.getString(CoreConstant.DATAX_CORE_DATAXSERVER_PROTOCOL)                    + \"://\" + configuration.getString(CoreConstant.DATAX_CORE_DATAXSERVER_ADDRESS)                    + configuration.getString(CoreConstant.DATAX_CORE_DATAXSERVER_ENDPOINT_REPORT),                    entity,                    \"Content-Type\", \"application/json;charset=UTF-8\");            String response = httpClientUtil.executeAndGet(post, String.class);            LOG.info(\"Send report respone,{}\",response);        }catch (Exception e){            LOG.error(\"Post report error\",e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "initJobReader", "params": ["JobPluginCollector"], "throws": null, "modifiers": ["private"], "return_type": "Reader", "snippet": "    private Reader.Job initJobReader(            JobPluginCollector jobPluginCollector) {        this.readerPluginName = this.configuration.getString(                CoreConstant.DATAX_JOB_CONTENT_READER_NAME);        classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                PluginType.READER, this.readerPluginName));        Reader.Job jobReader = (Reader.Job) LoadUtil.loadJobPlugin(                PluginType.READER, this.readerPluginName);        if(this.transportType == TransportType.STREAM && !jobReader.isSupportStream()){            throw DataXException.asDataXException(FrameworkErrorCode.CONFIG_ERROR,                    this.readerPluginName + \" don't support transport type STREAM\");        }        jobReader.setTransportType(this.transportType);        // Set reader parameters in configuration        jobReader.setPluginJobConf(this.configuration.getConfiguration(                CoreConstant.DATAX_JOB_CONTENT_READER_PARAMETER));        //Set writer parameters in configuration        List<Configuration> writerConfList = getJobWriterConfigList(this.configuration);        writerConfList.forEach(jobReader::addPeerPluginJobConf);        jobReader.setJobPluginCollector(jobPluginCollector);        jobReader.init();        classLoaderSwapper.restoreCurrentThreadClassLoader();        return jobReader;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "initJobWriter", "params": ["JobPluginCollector"], "throws": null, "modifiers": ["private"], "return_type": "List<Writer>", "snippet": "    private List<Writer.Job> initJobWriter(            JobPluginCollector jobPluginCollector) {        List<Configuration> writerConfList = getJobWriterConfigList(this.configuration);        List<Writer.Job> writerJobs = new ArrayList<>();        this.writerPluginNames = new String[writerConfList.size()];        for(int i = 0; i < writerConfList.size(); i++){            Configuration writerConf = writerConfList.get(i);            this.writerPluginNames[i] = this.configuration.getString(                    String.format(CoreConstant.DATAX_JOB_CONTENT_WRITER_ARRAY_NAME, i));            classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                    PluginType.WRITER, this.writerPluginNames[i]            ));            //Load processor before the writer plugin initialization            //TODO Use plugin name as namespace            List<String> processors = doLoadProcessor(\"\");            Writer.Job jobWriter = (Writer.Job) LoadUtil.loadJobPlugin(                    PluginType.WRITER, this.writerPluginNames[i]);            if(this.transportType == TransportType.STREAM && !jobWriter.isSupportStream()){                throw DataXException.asDataXException(FrameworkErrorCode.CONFIG_ERROR,                        this.writerPluginNames[i] + \" don't support transport type STREAM\");            }            jobWriter.setTransportType(transportType);            //Set writer parameter in configuration            jobWriter.setPluginJobConf(writerConf);            //Set reader parameter in configuration            jobWriter.addPeerPluginJobConf(this.configuration.getConfiguration(                    CoreConstant.DATAX_JOB_CONTENT_READER_PARAMETER));            //Set peer plugin name            jobWriter.addPeerPluginName(this.readerPluginName);            jobWriter.setJobPluginCollector(jobPluginCollector);            if(!processors.isEmpty()){                //Choose the first one                jobWriter.setProcessor(processors.get(0));            }            jobWriter.init();            writerJobs.add(jobWriter);            classLoaderSwapper.restoreCurrentThreadClassLoader();        }        //Remain JVM to collect garbage?        writerConfList.clear();        return writerJobs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareJobReader", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void prepareJobReader() {        classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                PluginType.READER, this.readerPluginName));        LOG.info(String.format(\"DataX Reader.Job [%s] do prepare work .\",                this.readerPluginName));        this.jobReader.prepare();        classLoaderSwapper.restoreCurrentThreadClassLoader();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareJobWriter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void prepareJobWriter() {        this.jobWriters.forEach(jobWriter -> {            classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil                .getJarLoader(PluginType.WRITER, jobWriter.getPluginName()));            LOG.info(String.format(\"DataX Writer.Job [%s] do prepare work .\",                    jobWriter.getPluginName()));            jobWriter.prepare();            classLoaderSwapper.restoreCurrentThreadClassLoader();        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doReaderSplit", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "List<Configuration>", "snippet": "    private List<Configuration> doReaderSplit(int adviceNumber) {        classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                PluginType.READER, this.readerPluginName));        List<Configuration> readerTaskConfigs = new ArrayList<>();        List<Configuration> readerSlicesConfigs =                this.jobReader.split(adviceNumber);        LOG.info(\"DataX Reader.Job [{}] splits to [{}] tasks.\",                this.readerPluginName, readerSlicesConfigs.size());        //Wrap as task configuration        readerSlicesConfigs.forEach( readerSlices -> {            Configuration readerTaskConfig = Configuration.newDefault();            readerTaskConfig.set(CoreConstant.TASK_NAME, this.readerPluginName);            readerTaskConfig.set(CoreConstant.TASK_PARAMETER, readerSlices);            readerTaskConfigs.add(readerTaskConfig);        });        classLoaderSwapper.restoreCurrentThreadClassLoader();        return readerTaskConfigs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doWriterSplit", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "List<Configuration>", "snippet": "    private List<Configuration> doWriterSplit(int readerTaskNumber) {        List<Configuration> writerTaskConfigs = new ArrayList<>();        int[] counter = new int[readerTaskNumber];        this.jobWriters.forEach(jobWriter ->{            classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                    PluginType.WRITER, jobWriter.getPluginName()));            List<Configuration> writerSlicesConfigs = jobWriter.split(readerTaskNumber);            if (writerSlicesConfigs == null || writerSlicesConfigs.size() <= 0) {                throw DataXException.asDataXException(                        FrameworkErrorCode.PLUGIN_SPLIT_ERROR,                        \"writer\u5207\u5206\u7684task\u4e0d\u80fd\u5c0f\u4e8e\u7b49\u4e8e0\");            }            if (writerSlicesConfigs.size() != readerTaskNumber) {                throw DataXException.asDataXException(                        FrameworkErrorCode.PLUGIN_SPLIT_ERROR,                        String.format(\"reader\u5207\u5206\u7684task\u6570\u76ee[%d]\u4e0d\u7b49\u4e8ewriter\u5207\u5206\u7684task\u6570\u76ee[%d].\",                                readerTaskNumber, writerSlicesConfigs.size())                );            }            for(int i = 0 ; i < writerSlicesConfigs.size(); i++){                if(i >= writerTaskConfigs.size()){                    writerTaskConfigs.add(Configuration.from(\"[]\"));                }                Configuration writerTaskConfig = writerTaskConfigs.get(i);                Configuration writerSlicesConfig = writerSlicesConfigs.get(i);                Configuration taskConfigElement = Configuration.newDefault();                //Build writer task configuration                taskConfigElement.set(CoreConstant.TASK_NAME, jobWriter.getPluginName());                taskConfigElement.set(CoreConstant.TASK_PARAMETER, writerSlicesConfig);                taskConfigElement.set(CoreConstant.TASK_PROCESSOR, jobWriter.getProcessors());                writerTaskConfig.set(\"[\" + counter[i] + \"]\", taskConfigElement);                counter[i] ++;            }            LOG.info(\"DataX Writer.Job [{}] splits to [{}] tasks.\",                    jobWriter.getPluginName(), writerSlicesConfigs.size());            classLoaderSwapper.restoreCurrentThreadClassLoader();        });        return writerTaskConfigs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "mergeReaderAndWriterTaskConfigs", "params": ["List<Configuration>", "List<Configuration>"], "throws": null, "modifiers": ["private"], "return_type": "List<Configuration>", "snippet": "    private List<Configuration> mergeReaderAndWriterTaskConfigs(            List<Configuration> readerTasksConfigs,            List<Configuration> writerTasksConfigs) {        return mergeReaderAndWriterTaskConfigs(readerTasksConfigs, writerTasksConfigs, null);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "mergeReaderAndWriterTaskConfigs", "params": ["List<Configuration>", "List<Configuration>", "List<Configuration>"], "throws": null, "modifiers": ["private"], "return_type": "List<Configuration>", "snippet": "    private List<Configuration> mergeReaderAndWriterTaskConfigs(            List<Configuration> readerTasksConfigs,            List<Configuration> writerTasksConfigs,            List<Configuration> transformerConfigs) {        List<Configuration> contentConfigs = new ArrayList<>();        for (int i = 0; i < readerTasksConfigs.size(); i++) {            Configuration taskConfig = Configuration.newDefault();            taskConfig.set(CoreConstant.JOB_READER, readerTasksConfigs.get(i));            taskConfig.set(CoreConstant.JOB_WRITER, writerTasksConfigs.get(i));            if (transformerConfigs != null && transformerConfigs.size() > 0) {                taskConfig.set(CoreConstant.JOB_TRANSFORMER, transformerConfigs);            }            taskConfig.set(CoreConstant.TASK_ID, i);            contentConfigs.add(taskConfig);        }        return contentConfigs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "distributeTasksToTaskGroup", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "List<Configuration>", "snippet": "    private List<Configuration> distributeTasksToTaskGroup(            int averTaskPerChannel, int channelNumber,            int channelsPerTaskGroup) {        Validate.isTrue(averTaskPerChannel > 0 && channelNumber > 0                        && channelsPerTaskGroup > 0,                \"\u6bcf\u4e2achannel\u7684\u5e73\u5747task\u6570[averTaskPerChannel]\uff0cchannel\u6570\u76ee[channelNumber]\uff0c\u6bcf\u4e2ataskGroup\u7684\u5e73\u5747channel\u6570[channelsPerTaskGroup]\u90fd\u5e94\u8be5\u4e3a\u6b63\u6570\");        List<Configuration> taskConfigs = this.configuration                .getListConfiguration(CoreConstant.DATAX_JOB_CONTENT);        int taskGroupNumber = channelNumber / channelsPerTaskGroup;        int leftChannelNumber = channelNumber % channelsPerTaskGroup;        if (leftChannelNumber > 0) {            taskGroupNumber += 1;        }        /**         * \u5982\u679c\u53ea\u6709\u4e00\u4e2ataskGroup\uff0c\u76f4\u63a5\u6253\u6807\u8fd4\u56de         */        if (taskGroupNumber == 1) {            final Configuration taskGroupConfig = this.configuration.clone();            /**             * configure\u7684clone\u4e0d\u80fdclone\u51fa             */            taskGroupConfig.set(CoreConstant.DATAX_JOB_CONTENT, this.configuration                    .getListConfiguration(CoreConstant.DATAX_JOB_CONTENT));            taskGroupConfig.set(CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_CHANNEL,                    channelNumber);            taskGroupConfig.set(CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_ID, 0);            List<Configuration> result = new ArrayList<>();            result.add(taskGroupConfig);            return result;        }        List<Configuration> taskGroupConfigs = new ArrayList<Configuration>();        /**         * \u5c06\u6bcf\u4e2ataskGroup\u4e2dcontent\u7684\u914d\u7f6e\u6e05\u7a7a         */        for (int i = 0; i < taskGroupNumber; i++) {            Configuration taskGroupConfig = this.configuration.clone();            List<Configuration> taskGroupJobContent = taskGroupConfig                    .getListConfiguration(CoreConstant.DATAX_JOB_CONTENT);            taskGroupJobContent.clear();            taskGroupConfig.set(CoreConstant.DATAX_JOB_CONTENT, taskGroupJobContent);            taskGroupConfigs.add(taskGroupConfig);        }        int taskConfigIndex = 0;        int channelIndex = 0;        int taskGroupConfigIndex = 0;        /**         * \u5148\u5904\u7406\u6389taskGroup\u5305\u542bchannel\u6570\u4e0d\u662f\u5e73\u5747\u503c\u7684taskGroup         */        if (leftChannelNumber > 0) {            Configuration taskGroupConfig = taskGroupConfigs.get(taskGroupConfigIndex);            for (; channelIndex < leftChannelNumber; channelIndex++) {                for (int i = 0; i < averTaskPerChannel; i++) {                    List<Configuration> taskGroupJobContent = taskGroupConfig                            .getListConfiguration(CoreConstant.DATAX_JOB_CONTENT);                    taskGroupJobContent.add(taskConfigs.get(taskConfigIndex++));                    taskGroupConfig.set(CoreConstant.DATAX_JOB_CONTENT,                            taskGroupJobContent);                }            }            taskGroupConfig.set(CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_CHANNEL,                    leftChannelNumber);            taskGroupConfig.set(CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_ID,                    taskGroupConfigIndex++);        }        /**         * \u4e0b\u9762\u9700\u8981\u8f6e\u8be2\u5206\u914d\uff0c\u5e76\u6253\u4e0achannel\u6570\u548ctaskGroupId\u6807\u8bb0         */        int equalDivisionStartIndex = taskGroupConfigIndex;        for (; taskConfigIndex < taskConfigs.size()                && equalDivisionStartIndex < taskGroupConfigs.size(); ) {            for (taskGroupConfigIndex = equalDivisionStartIndex; taskGroupConfigIndex < taskGroupConfigs                    .size() && taskConfigIndex < taskConfigs.size(); taskGroupConfigIndex++) {                Configuration taskGroupConfig = taskGroupConfigs.get(taskGroupConfigIndex);                List<Configuration> taskGroupJobContent = taskGroupConfig                        .getListConfiguration(CoreConstant.DATAX_JOB_CONTENT);                taskGroupJobContent.add(taskConfigs.get(taskConfigIndex++));                taskGroupConfig.set(                        CoreConstant.DATAX_JOB_CONTENT, taskGroupJobContent);            }        }        for (taskGroupConfigIndex = equalDivisionStartIndex;             taskGroupConfigIndex < taskGroupConfigs.size(); ) {            Configuration taskGroupConfig = taskGroupConfigs.get(taskGroupConfigIndex);            taskGroupConfig.set(CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_CHANNEL,                    channelsPerTaskGroup);            taskGroupConfig.set(CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_ID,                    taskGroupConfigIndex++);        }        return taskGroupConfigs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "postJobReader", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void postJobReader() {        classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                PluginType.READER, this.readerPluginName));        LOG.info(\"DataX Reader.Job [{}] do post work.\",                this.readerPluginName);        this.jobReader.post();        classLoaderSwapper.restoreCurrentThreadClassLoader();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "postJobWriter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void postJobWriter() {        this.jobWriters.forEach( jobWriter -> {            classLoaderSwapper.setCurrentThreadClassLoader(LoadUtil.getJarLoader(                    PluginType.WRITER, jobWriter.getPluginName()));            LOG.info(\"DataX Writer.Job [{}] do post work.\",                    jobWriter.getPluginName());            jobWriter.post();            classLoaderSwapper.restoreCurrentThreadClassLoader();        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkLimit", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkLimit() {        Communication communication = super.getContainerCommunicator().collect();        errorLimit.checkRecordLimit(communication);        errorLimit.checkPercentageLimit(communication);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeHooks", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void invokeHooks() {        AbstractContainerCommunicator tempContainerCollector = super.getContainerCommunicator();        if (tempContainerCollector == null) {            tempContainerCollector = new StandAloneJobContainerCommunicator(configuration);            super.setContainerCommunicator(tempContainerCollector);        }        Communication comm = tempContainerCollector.collect();        HookInvoker invoker = new HookInvoker(CoreConstant.DATAX_HOME + \"/hook\", configuration, comm.getCounter());        invoker.invokeAll();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "adjustChannelSpeedByNumber", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void adjustChannelSpeedByNumber(int channelNumber){        long globalLimitedByteSpeed = this.configuration.getLong(                CoreConstant.DATAX_JOB_SETTING_SPEED_BYTE, 0);        if(globalLimitedByteSpeed > 0){            Long channelLimitedByteSpeed = this.configuration                    .getLong(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_BYTE);            if(channelLimitedByteSpeed * channelNumber < globalLimitedByteSpeed){                this.configuration.set(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_BYTE,                        globalLimitedByteSpeed / channelNumber);            }        }        long globalLimitedRecordSpeed = this.configuration.getLong(                CoreConstant.DATAX_JOB_SETTING_SPEED_RECORD, 100000);        if(globalLimitedRecordSpeed > 0){            Long channelLimitedRecordSpeed = this.configuration.getLong(                    CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_RECORD);            if(channelLimitedRecordSpeed * channelNumber < globalLimitedRecordSpeed){                this.configuration.set(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_RECORD,                        globalLimitedRecordSpeed / channelNumber);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobWriterConfigList", "params": ["Configuration"], "throws": null, "modifiers": ["private"], "return_type": "List<Configuration>", "snippet": "    private List<Configuration> getJobWriterConfigList(Configuration configuration){        List<Configuration> writerConfList = new ArrayList<>();        //Try to get writer list        List<Object> writerList = configuration.getList(CoreConstant.DATAX_JOB_CONTENT_WRITER);        for(int i = 0; i < writerList.size(); i++){            writerConfList.add(this.configuration.getConfiguration(                    String.format(CoreConstant.DATAX_JOB_CONTENT_WRITER_ARRAY_PARAMETER, i)));        }        return writerConfList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "adjustJobConfiguration", "params": ["Configuration"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void adjustJobConfiguration(Configuration configuration){        //Change structure of 'CoreConstant.DATAX_JOB_CONTENT_WRITER' to list        try {            configuration.getList(CoreConstant.DATAX_JOB_CONTENT_WRITER);        }catch(Exception e){            //Means that \"CoreConstant.DATAX_JOB_CONTENT_WRITER\" is not a list            Configuration emptyListConf = Configuration.from(\"[]\");            emptyListConf.set(\"[0]\", configuration.getConfiguration(CoreConstant.DATAX_JOB_CONTENT_WRITER));            configuration.set(CoreConstant.DATAX_JOB_CONTENT_WRITER, emptyListConf);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doLoadProcessor", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> doLoadProcessor(String namespace){        List<String> processors = new ArrayList<>();        PluginProcessorLoader processorLoader = ClassUtil.instantiate(configuration.getString(                CoreConstant.DATAX_CORE_PROCESSOR_LOADER_PLUGIN_CLASS        ), PluginProcessorLoader.class);        String sourcePath = configuration.getString(CoreConstant.DATAX_CORE_PROCESSOR_LODAER_PLUGIN_SOURCEPATH) +                    namespace;        String packageName = configuration.getString(CoreConstant.DATAX_CORE_PROCESSOR_LOADER_PLUGIN_PACKAGE);        LOG.info(\"Loading processors, sourcePath: [\" + sourcePath + \"]\");        if(new File(sourcePath).exists()) {            Collection<File> javaSourceFiles = FileUtils.listFiles(new File(sourcePath), FileFileFilter.FILE, FileFileFilter.FILE);            javaSourceFiles.forEach(javaSourceFile -> {                try {                    String javaCode = FileUtils.readFileToString(javaSourceFile);                    String javaFileName = JavaSrcUtils.parseJavaFileName(javaCode);                    if (StringUtils.isBlank(javaFileName)) {                        throw DataXException.asDataXException(FrameworkErrorCode.PROCESSOR_LOAD_ERROR,                                \"Error in loading processor [\" + javaSourceFile.getName() + \"], cannot find class Name\");                    }                    javaCode = JavaSrcUtils.addPackageName(javaCode, packageName);                    String fullClassName = packageName + \".\" + javaFileName;                    boolean result = processorLoader.load(fullClassName, javaCode);                    if (!result) {                        throw DataXException.asDataXException(FrameworkErrorCode.PROCESSOR_LOAD_ERROR,                                \"Loading processor [\" + javaSourceFile.getName() + \"] failed\");                    } else {                        processors.add(fullClassName);                    }                } catch (IOException e) {                    throw DataXException.asDataXException(FrameworkErrorCode.PROCESSOR_LOAD_ERROR, e);                }            });        }        LOG.info(\"Loading processors finished, \" + JSON.toJSONString(processors));        return processors;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/JobContainer.java", "stars": "23", "class": {"name": "JobContainer", "extends": "AbstractContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGattStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getGattStatus() {        return gattStatus;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/exception/GattException.java", "stars": "2", "class": {"name": "GattException", "extends": "BleException", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGattStatus", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "GattException", "snippet": "    public GattException setGattStatus(int gattStatus) {        this.gattStatus = gattStatus;        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/exception/GattException.java", "stars": "2", "class": {"name": "GattException", "extends": "BleException", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"GattException{\" +               \"gattStatus=\" + gattStatus +               \"} \" + super.toString();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/exception/GattException.java", "stars": "2", "class": {"name": "GattException", "extends": "BleException", "implements": null, "modifiers": ["public"]}}, {"method_name": "change", "params": ["String", "Function<String,Integer>", "Function<Integer,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void change(String s, Function<String,Integer> fun1,Function<Integer,String> fun2){        String ss = fun1.andThen(fun2).apply(s);        System.out.println(ss);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo07/Function/Demo02Function_andThen.java", "stars": "2", "class": {"name": "Demo02Function_andThen", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u6574\u6570        String s = \"123\";        //\u8c03\u7528change\u65b9\u6cd5,\u4f20\u9012\u5b57\u7b26\u4e32\u548c\u4e24\u4e2aLambda\u8868\u8fbe\u5f0f        change(s,(String str)->{            //\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570+10            return Integer.parseInt(str)+10;        },(Integer i)->{            //\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32            return i+\"\";        });        //\u4f18\u5316Lambda\u8868\u8fbe\u5f0f        change(s,str->Integer.parseInt(str)+10,i->i+\"\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo07/Function/Demo02Function_andThen.java", "stars": "2", "class": {"name": "Demo02Function_andThen", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProperties(Properties props) {    if (props != null) {      String closeConnectionProperty = props.getProperty(\"closeConnection\");      if (closeConnectionProperty != null) {        closeConnection = Boolean.parseBoolean(closeConnectionProperty);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/managed/ManagedTransactionFactory.java", "stars": "15", "class": {"name": "ManagedTransactionFactory", "extends": null, "implements": ["TransactionFactory"], "modifiers": ["public"]}}, {"method_name": "newTransaction", "params": ["Connection"], "throws": null, "modifiers": ["public"], "return_type": "Transaction", "snippet": "  public Transaction newTransaction(Connection conn) {    return new ManagedTransaction(conn, closeConnection);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/managed/ManagedTransactionFactory.java", "stars": "15", "class": {"name": "ManagedTransactionFactory", "extends": null, "implements": ["TransactionFactory"], "modifiers": ["public"]}}, {"method_name": "newTransaction", "params": ["DataSource", "TransactionIsolationLevel", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "Transaction", "snippet": "  public Transaction newTransaction(DataSource ds, TransactionIsolationLevel level, boolean autoCommit) {    // Silently ignores autocommit and isolation level, as managed transactions are entirely    // controlled by an external manager.  It's silently ignored so that    // code remains portable between managed and unmanaged configurations.    return new ManagedTransaction(ds, level, closeConnection);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/managed/ManagedTransactionFactory.java", "stars": "15", "class": {"name": "ManagedTransactionFactory", "extends": null, "implements": ["TransactionFactory"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Intent intent = new Intent(this, PayPalService.class);        intent.putExtra(PayPalService.EXTRA_PAYPAL_CONFIGURATION, config);        startService(intent);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PayPalSDKExample/src/com/paypal/example/paypalandroidsdkexample/SampleActivity.java", "stars": "74", "class": {"name": "SampleActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBuyPressed", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBuyPressed(View pressed) {        // PAYMENT_INTENT_SALE will cause the payment to complete immediately.        // Change PAYMENT_INTENT_SALE to PAYMENT_INTENT_AUTHORIZE to only authorize payment and         // capture funds later.        PayPalPayment thingToBuy =                new PayPalPayment(new BigDecimal(\"1.75\"), \"USD\", \"hipster jeans\",                        PayPalPayment.PAYMENT_INTENT_SALE);        Intent intent = new Intent(SampleActivity.this, PaymentActivity.class);        intent.putExtra(PaymentActivity.EXTRA_PAYMENT, thingToBuy);        startActivityForResult(intent, REQUEST_CODE_PAYMENT);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PayPalSDKExample/src/com/paypal/example/paypalandroidsdkexample/SampleActivity.java", "stars": "74", "class": {"name": "SampleActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onFuturePaymentPressed", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFuturePaymentPressed(View pressed) {        Intent intent = new Intent(SampleActivity.this, PayPalFuturePaymentActivity.class);        startActivityForResult(intent, REQUEST_CODE_FUTURE_PAYMENT);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PayPalSDKExample/src/com/paypal/example/paypalandroidsdkexample/SampleActivity.java", "stars": "74", "class": {"name": "SampleActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        if (requestCode == REQUEST_CODE_PAYMENT) {            if (resultCode == Activity.RESULT_OK) {                PaymentConfirmation confirm =                        data.getParcelableExtra(PaymentActivity.EXTRA_RESULT_CONFIRMATION);                if (confirm != null) {                    try {                        Log.i(TAG, confirm.toJSONObject().toString(4));                        Log.i(TAG, confirm.getPayment().toJSONObject().toString(4));                        /**                         *  TODO: send 'confirm' (and possibly confirm.getPayment() to your server for verification                         * or consent completion.                         * See https://developer.paypal.com/webapps/developer/docs/integration/mobile/verify-mobile-payment/                         * for more details.                         *                         * For sample mobile backend interactions, see                         * https://github.com/paypal/rest-api-sdk-python/tree/master/samples/mobile_backend                         */                        Toast.makeText(                                getApplicationContext(),                                \"PaymentConfirmation info received from PayPal\", Toast.LENGTH_LONG)                                .show();                    } catch (JSONException e) {                        Log.e(TAG, \"an extremely unlikely failure occurred: \", e);                    }                }            } else if (resultCode == Activity.RESULT_CANCELED) {                Log.i(TAG, \"The user canceled.\");            } else if (resultCode == PaymentActivity.RESULT_EXTRAS_INVALID) {                Log.i(                        TAG,                        \"An invalid Payment or PayPalConfiguration was submitted. Please see the docs.\");            }        } else if (requestCode == REQUEST_CODE_FUTURE_PAYMENT) {            if (resultCode == Activity.RESULT_OK) {                PayPalAuthorization auth =                        data.getParcelableExtra(PayPalFuturePaymentActivity.EXTRA_RESULT_AUTHORIZATION);                if (auth != null) {                    try {                        Log.i(\"FuturePaymentExample\", auth.toJSONObject().toString(4));                        String authorization_code = auth.getAuthorizationCode();                        Log.i(\"FuturePaymentExample\", authorization_code);                        sendAuthorizationToServer(auth);                        Toast.makeText(                                getApplicationContext(),                                \"Future Payment code received from PayPal\", Toast.LENGTH_LONG)                                .show();                    } catch (JSONException e) {                        Log.e(\"FuturePaymentExample\", \"an extremely unlikely failure occurred: \", e);                    }                }            } else if (resultCode == Activity.RESULT_CANCELED) {                Log.i(\"FuturePaymentExample\", \"The user canceled.\");            } else if (resultCode == PayPalFuturePaymentActivity.RESULT_EXTRAS_INVALID) {                Log.i(                        \"FuturePaymentExample\",                        \"Probably the attempt to previously start the PayPalService had an invalid PayPalConfiguration. Please see the docs.\");            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PayPalSDKExample/src/com/paypal/example/paypalandroidsdkexample/SampleActivity.java", "stars": "74", "class": {"name": "SampleActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendAuthorizationToServer", "params": ["PayPalAuthorization"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendAuthorizationToServer(PayPalAuthorization authorization) {        /**         * TODO: Send the authorization response to your server, where it can         * exchange the authorization code for OAuth access and refresh tokens.         *          * Your server must then store these tokens, so that your server code         * can execute payments for this user in the future.         *          * A more complete example that includes the required app-server to         * PayPal-server integration is available from         * https://github.com/paypal/rest-api-sdk-python/tree/master/samples/mobile_backend         */    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PayPalSDKExample/src/com/paypal/example/paypalandroidsdkexample/SampleActivity.java", "stars": "74", "class": {"name": "SampleActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onFuturePaymentPurchasePressed", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFuturePaymentPurchasePressed(View pressed) {        // Get the Application Correlation ID from the SDK        String correlationId = PayPalConfiguration.getApplicationCorrelationId(this);        Log.i(\"FuturePaymentExample\", \"Application Correlation ID: \" + correlationId);        // TODO: Send correlationId and transaction details to your server for processing with        // PayPal...        Toast.makeText(                getApplicationContext(), \"App Correlation ID received from SDK\", Toast.LENGTH_LONG)                .show();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PayPalSDKExample/src/com/paypal/example/paypalandroidsdkexample/SampleActivity.java", "stars": "74", "class": {"name": "SampleActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        // Stop service when done        stopService(new Intent(this, PayPalService.class));        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PayPalSDKExample/src/com/paypal/example/paypalandroidsdkexample/SampleActivity.java", "stars": "74", "class": {"name": "SampleActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRutaNom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRutaNom(){        return ruta + \"\\\\\" + nom;    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/GenerarRuta.java", "stars": "2", "class": {"name": "GenerarRuta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRutaArchivo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRutaArchivo(){        return ruta;    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/GenerarRuta.java", "stars": "2", "class": {"name": "GenerarRuta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onRegistry", "params": ["RegistryEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onRegistry(RegistryEvent.Register<IRecipe> event) {        IForgeRegistry<IRecipe> registry = event.getRegistry();        registry.register(new ColorizerRecipe());    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Recipes/RecipesRegistry.java", "stars": "2", "class": {"name": "RecipesRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "splitOneLine", "params": ["String", "char"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String[] splitOneLine(String inputLine, char delimiter) {        String[] splitedResult = null;        if (null != inputLine) {            try {                CsvReader csvReader = new CsvReader(new StringReader(inputLine));                csvReader.setDelimiter(delimiter);                setCsvReaderConfig(csvReader);                if (csvReader.readRecord()) {                    splitedResult = csvReader.getValues();                }            } catch (IOException e) {                // nothing to do            }        }        return splitedResult;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "splitBufferedReader", "params": ["CsvReader"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String[] splitBufferedReader(CsvReader csvReader)            throws IOException {        String[] splitedResult = null;        if (csvReader.readRecord()) {            splitedResult = csvReader.getValues();        }        return splitedResult;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "splitOneLine", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String[] splitOneLine(String inputLine, String delimiter) {        String[] splitedResult = StringUtils.split(inputLine, delimiter);        return splitedResult;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readFromStream", "params": ["InputStream", "OutputStream", "Configuration"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void readFromStream(InputStream inputStream, OutputStream outputStream,                                      Configuration readerSliceConfig) throws IOException {        String compress = readerSliceConfig.getString(Key.COMPRESS, null);        compress = StringUtils.isBlank(compress)? null : compress;        try {            InputStream compressedInput = decorateWithCompress(inputStream, compress);            int bufferSize = readerSliceConfig.getInt(Key.BUFFER_SIZE,                    Constant.DEFAULT_BUFFER_SIZE);            byte[] buffer = new byte[bufferSize];            int len = -1;            while((len = compressedInput.read(buffer, 0, bufferSize)) >= 0){                outputStream.write(buffer, 0, len);            }        } catch (IOException e) {            throw DataXException.asDataXException(                    UnstructuredStorageReaderErrorCode.READ_FILE_IO_ERROR,                    String.format(\"\u6d41\u8bfb\u53d6\u9519\u8bef \"), e);        }finally{            inputStream.close();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readFromStream", "params": ["InputStream", "String", "Configuration", "RecordSender", "TaskPluginCollector"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void readFromStream(InputStream inputStream, String context,                                      Configuration readerSliceConfig, RecordSender recordSender,                                      TaskPluginCollector taskPluginCollector) {        String compress = readerSliceConfig.getString(Key.COMPRESS, null);        if (StringUtils.isBlank(compress)) {            compress = null;        }        String encoding = readerSliceConfig.getString(Key.ENCODING,                Constant.DEFAULT_ENCODING);        // handle blank encoding        if (StringUtils.isBlank(encoding)) {            encoding = Constant.DEFAULT_ENCODING;            LOG.warn(String.format(\"\u60a8\u914d\u7f6e\u7684encoding\u4e3a[%s], \u4f7f\u7528\u9ed8\u8ba4\u503c[%s]\", encoding,                    Constant.DEFAULT_ENCODING));        }        List<Configuration> column = readerSliceConfig                .getListConfiguration(Key.COLUMN);        // handle [\"*\"] -> [], null        if (null != column && 1 == column.size()                && \"\\\"*\\\"\".equals(column.get(0).toString())) {            readerSliceConfig.set(Key.COLUMN, null);            column = null;        }        BufferedReader reader = null;        int bufferSize = readerSliceConfig.getInt(Key.BUFFER_SIZE,                Constant.DEFAULT_BUFFER_SIZE);        // compress logic        try {            reader = new BufferedReader(new InputStreamReader(                    decorateWithCompress(inputStream, compress), encoding            ), bufferSize);            UnstructuredStorageReaderUtil.doReadFromStream(reader, context,                    readerSliceConfig, recordSender, taskPluginCollector);        } catch (UnsupportedEncodingException uee) {            throw DataXException                    .asDataXException(                            UnstructuredStorageReaderErrorCode.OPEN_FILE_WITH_CHARSET_ERROR,                            String.format(\"\u4e0d\u652f\u6301\u7684\u7f16\u7801\u683c\u5f0f : [%s]\", encoding), uee);        } catch (NullPointerException e) {            throw DataXException.asDataXException(                    UnstructuredStorageReaderErrorCode.RUNTIME_EXCEPTION,                    \"\u8fd0\u884c\u65f6\u9519\u8bef, \u8bf7\u8054\u7cfb\u6211\u4eec\", e);        }/* catch (ArchiveException e) {\t\t\tthrow DataXException.asDataXException(\t\t\t\t\tUnstructuredStorageReaderErrorCode.READ_FILE_IO_ERROR,\t\t\t\t\tString.format(\"\u538b\u7f29\u6587\u4ef6\u6d41\u8bfb\u53d6\u9519\u8bef : [%s]\", context), e);\t\t} */ catch (IOException e) {            throw DataXException.asDataXException(                    UnstructuredStorageReaderErrorCode.READ_FILE_IO_ERROR,                    String.format(\"\u6d41\u8bfb\u53d6\u9519\u8bef : [%s]\", context), e);        } finally {            IOUtils.closeQuietly(reader);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doReadFromStream", "params": ["BufferedReader", "String", "Configuration", "RecordSender", "TaskPluginCollector"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void doReadFromStream(BufferedReader reader, String context,                                        Configuration readerSliceConfig, RecordSender recordSender,                                        TaskPluginCollector taskPluginCollector) {        String encoding = readerSliceConfig.getString(Key.ENCODING,                Constant.DEFAULT_ENCODING);        Character fieldDelimiter = null;        String delimiterInStr = readerSliceConfig                .getString(Key.FIELD_DELIMITER);        if (null != delimiterInStr && 1 != delimiterInStr.length()) {            throw DataXException.asDataXException(                    UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                    String.format(\"\u4ec5\u4ec5\u652f\u6301\u5355\u5b57\u7b26\u5207\u5206, \u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3a : [%s]\", delimiterInStr));        }        if (null == delimiterInStr) {            LOG.warn(String.format(\"\u60a8\u6ca1\u6709\u914d\u7f6e\u5217\u5206\u9694\u7b26, \u4f7f\u7528\u9ed8\u8ba4\u503c[%s]\",                    Constant.DEFAULT_FIELD_DELIMITER));        }        // warn: default value ',', fieldDelimiter could be \\n(lineDelimiter)        // for no fieldDelimiter        fieldDelimiter = readerSliceConfig.getChar(Key.FIELD_DELIMITER,                Constant.DEFAULT_FIELD_DELIMITER);        Boolean skipHeader = readerSliceConfig.getBool(Key.SKIP_HEADER,                Constant.DEFAULT_SKIP_HEADER);        // warn: no default value '\\N'        String nullFormat = readerSliceConfig.getString(Key.NULL_FORMAT, \"\");        // warn: Configuration -> List<ColumnEntry> for performance        // List<Configuration> column = readerSliceConfig        List<ColumnEntry> column = UnstructuredStorageReaderUtil                .getListColumnEntry(readerSliceConfig, Key.COLUMN);        CsvReader csvReader = null;        // every line logic        try {            // TODO lineDelimiter            if (skipHeader) {                String fetchLine = reader.readLine();                LOG.info(String.format(\"Header line %s has been skiped.\",                        fetchLine));            }            csvReader = new CsvReader(reader);            csvReader.setDelimiter(fieldDelimiter);            setCsvReaderConfig(csvReader);            String[] parseRows;            while ((parseRows = UnstructuredStorageReaderUtil                    .splitBufferedReader(csvReader)) != null) {                UnstructuredStorageReaderUtil.transportOneRecord(recordSender,                        column, parseRows, nullFormat, taskPluginCollector);            }        } catch (UnsupportedEncodingException uee) {            throw DataXException                    .asDataXException(                            UnstructuredStorageReaderErrorCode.OPEN_FILE_WITH_CHARSET_ERROR,                            String.format(\"\u4e0d\u652f\u6301\u7684\u7f16\u7801\u683c\u5f0f : [%s]\", encoding), uee);        } catch (FileNotFoundException fnfe) {            throw DataXException.asDataXException(                    UnstructuredStorageReaderErrorCode.FILE_NOT_EXISTS,                    String.format(\"\u65e0\u6cd5\u627e\u5230\u6587\u4ef6 : [%s]\", context), fnfe);        } catch (IOException ioe) {            throw DataXException.asDataXException(                    UnstructuredStorageReaderErrorCode.READ_FILE_IO_ERROR,                    String.format(\"\u8bfb\u53d6\u6587\u4ef6\u9519\u8bef : [%s]\", context), ioe);        } catch (Exception e) {            throw DataXException.asDataXException(                    UnstructuredStorageReaderErrorCode.RUNTIME_EXCEPTION,                    String.format(\"\u8fd0\u884c\u65f6\u5f02\u5e38 : %s\", e.getMessage()), e);        } finally {            if(null != csvReader) {                csvReader.close();            }            IOUtils.closeQuietly(reader);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transportOneRecord", "params": ["RecordSender", "Configuration", "TaskPluginCollector", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Record", "snippet": "    public static Record transportOneRecord(RecordSender recordSender,                                            Configuration configuration,                                            TaskPluginCollector taskPluginCollector,                                            String line) {        List<ColumnEntry> column = UnstructuredStorageReaderUtil                .getListColumnEntry(configuration, Key.COLUMN);        // \u6ce8\u610f: nullFormat \u6ca1\u6709\u9ed8\u8ba4\u503c        String nullFormat = configuration.getString(Key.NULL_FORMAT);        String delimiterInStr = configuration.getString(Key.FIELD_DELIMITER);        if (null != delimiterInStr && 1 != delimiterInStr.length()) {            throw DataXException.asDataXException(                    UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                    String.format(\"\u4ec5\u4ec5\u652f\u6301\u5355\u5b57\u7b26\u5207\u5206, \u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3a : [%s]\", delimiterInStr));        }        if (null == delimiterInStr) {            LOG.warn(String.format(\"\u60a8\u6ca1\u6709\u914d\u7f6e\u5217\u5206\u9694\u7b26, \u4f7f\u7528\u9ed8\u8ba4\u503c[%s]\",                    Constant.DEFAULT_FIELD_DELIMITER));        }        // warn: default value ',', fieldDelimiter could be \\n(lineDelimiter)        // for no fieldDelimiter        Character fieldDelimiter = configuration.getChar(Key.FIELD_DELIMITER,                Constant.DEFAULT_FIELD_DELIMITER);        String[] sourceLine = StringUtils.split(line, fieldDelimiter);        return transportOneRecord(recordSender, column, sourceLine, nullFormat, taskPluginCollector);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transportOneRecord", "params": ["RecordSender", "List<ColumnEntry>", "String", "String", "TaskPluginCollector"], "throws": null, "modifiers": ["public", "static"], "return_type": "Record", "snippet": "    public static Record transportOneRecord(RecordSender recordSender,                                            List<ColumnEntry> columnConfigs, String[] sourceLine,                                            String nullFormat, TaskPluginCollector taskPluginCollector) {        Record record = recordSender.createRecord();        Column columnGenerated = null;        // \u521b\u5efa\u90fd\u4e3aString\u7c7b\u578bcolumn\u7684record        if (null == columnConfigs || columnConfigs.size() == 0) {            for (String columnValue : sourceLine) {                // not equalsIgnoreCase, it's all ok if nullFormat is null                if (StringUtils.isBlank(columnValue) || columnValue.equals(nullFormat)) {                    columnGenerated = new StringColumn(null);                } else {                    columnGenerated = new StringColumn(columnValue);                }                record.addColumn(columnGenerated);            }            recordSender.sendToWriter(record);        } else {            try {                for (ColumnEntry columnConfig : columnConfigs) {                    String columnType = columnConfig.getType();                    Integer columnIndex = columnConfig.getIndex();                    String columnConst = columnConfig.getValue();                    String columnValue = null;                    if (null == columnIndex && null == columnConst) {                        throw DataXException                                .asDataXException(                                        UnstructuredStorageReaderErrorCode.NO_INDEX_VALUE,                                        \"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86type, \u5219\u81f3\u5c11\u9700\u8981\u914d\u7f6e index \u6216 value\");                    }                    if (null != columnIndex && null != columnConst) {                        throw DataXException                                .asDataXException(                                        UnstructuredStorageReaderErrorCode.MIXED_INDEX_VALUE,                                        \"\u60a8\u6df7\u5408\u914d\u7f6e\u4e86index, value, \u6bcf\u4e00\u5217\u540c\u65f6\u4ec5\u80fd\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\");                    }                    if (null != columnIndex) {                        if (columnIndex >= sourceLine.length) {                            String message = String                                    .format(\"\u60a8\u5c1d\u8bd5\u8bfb\u53d6\u7684\u5217\u8d8a\u754c,\u6e90\u6587\u4ef6\u8be5\u884c\u6709 [%s] \u5217,\u60a8\u5c1d\u8bd5\u8bfb\u53d6\u7b2c [%s] \u5217, \u6570\u636e\u8be6\u60c5[%s]\",                                            sourceLine.length, columnIndex + 1,                                            StringUtils.join(sourceLine, \",\"));                            LOG.warn(message);                            throw new IndexOutOfBoundsException(message);                        }                        columnValue = sourceLine[columnIndex];                    } else {                        columnValue = columnConst;                    }                    Type type = Type.valueOf(columnType.toUpperCase());                    // it's all ok if nullFormat is null                    if (columnValue.equals(nullFormat) || StringUtils.isBlank(columnValue)) {                        columnValue = null;                    }                    switch (type) {                        case STRING:                            columnGenerated = new StringColumn(columnValue);                            break;                        case LONG:                            try {                                columnGenerated = new LongColumn(columnValue);                            } catch (Exception e) {                                throw new IllegalArgumentException(String.format(                                        \"\u7c7b\u578b\u8f6c\u6362\u9519\u8bef, \u65e0\u6cd5\u5c06[%s] \u8f6c\u6362\u4e3a[%s]\", columnValue,                                        \"LONG\"));                            }                            break;                        case DOUBLE:                            try {                                columnGenerated = new DoubleColumn(columnValue);                            } catch (Exception e) {                                throw new IllegalArgumentException(String.format(                                        \"\u7c7b\u578b\u8f6c\u6362\u9519\u8bef, \u65e0\u6cd5\u5c06[%s] \u8f6c\u6362\u4e3a[%s]\", columnValue,                                        \"DOUBLE\"));                            }                            break;                        case BOOLEAN:                            try {                                columnGenerated = new BoolColumn(columnValue);                            } catch (Exception e) {                                throw new IllegalArgumentException(String.format(                                        \"\u7c7b\u578b\u8f6c\u6362\u9519\u8bef, \u65e0\u6cd5\u5c06[%s] \u8f6c\u6362\u4e3a[%s]\", columnValue,                                        \"BOOLEAN\"));                            }                            break;                        case DATE:                            try {                                if (columnValue == null) {                                    Date date = null;                                    columnGenerated = new DateColumn(date);                                } else {                                    String formatString = columnConfig.getFormat();                                    //if (null != formatString) {                                    if (StringUtils.isNotBlank(formatString)) {                                        // \u7528\u6237\u81ea\u5df1\u914d\u7f6e\u7684\u683c\u5f0f\u8f6c\u6362, \u810f\u6570\u636e\u884c\u4e3a\u51fa\u73b0\u53d8\u5316                                        DateFormat format = columnConfig                                                .getDateFormat();                                        columnGenerated = new DateColumn(                                                format.parse(columnValue));                                    } else {                                        // \u6846\u67b6\u5c1d\u8bd5\u8f6c\u6362                                        columnGenerated = new DateColumn(                                                new StringColumn(columnValue)                                                        .asDate());                                    }                                }                            } catch (Exception e) {                                throw new IllegalArgumentException(String.format(                                        \"\u7c7b\u578b\u8f6c\u6362\u9519\u8bef, \u65e0\u6cd5\u5c06[%s] \u8f6c\u6362\u4e3a[%s]\", columnValue,                                        \"DATE\"));                            }                            break;                        default:                            String errorMessage = String.format(                                    \"\u60a8\u914d\u7f6e\u7684\u5217\u7c7b\u578b\u6682\u4e0d\u652f\u6301 : [%s]\", columnType);                            LOG.error(errorMessage);                            throw DataXException                                    .asDataXException(                                            UnstructuredStorageReaderErrorCode.NOT_SUPPORT_TYPE,                                            errorMessage);                    }                    record.addColumn(columnGenerated);                }                recordSender.sendToWriter(record);            } catch (IllegalArgumentException iae) {                taskPluginCollector                        .collectDirtyRecord(record, iae.getMessage());            } catch (IndexOutOfBoundsException ioe) {                taskPluginCollector                        .collectDirtyRecord(record, ioe.getMessage());            } catch (Exception e) {                if (e instanceof DataXException) {                    throw (DataXException) e;                }                // \u6bcf\u4e00\u79cd\u8f6c\u6362\u5931\u8d25\u90fd\u662f\u810f\u6570\u636e\u5904\u7406,\u5305\u62ec\u6570\u5b57\u683c\u5f0f & \u65e5\u671f\u683c\u5f0f                taskPluginCollector.collectDirtyRecord(record, e.getMessage());            }        }        return record;    }    public static List<ColumnEntry> getListColumnEntry(            Configuration configuration, final String path) {        List<JSONObject> lists = configuration.getList(path, JSONObject.class);        if (lists == null) {            return null;        }        List<ColumnEntry> result = new ArrayList<ColumnEntry>();        for (final JSONObject object : lists) {            result.add(JSON.parseObject(object.toJSONString(),                    ColumnEntry.class));        }        return result;    }    private enum Type {        STRING, LONG, BOOLEAN, DOUBLE, DATE,;    }    /**     * check parameter:encoding, compress, filedDelimiter     */    public static void validateParameter(Configuration readerConfiguration) {        // encoding check        validateEncoding(readerConfiguration);        //only support compress types        validateCompress(readerConfiguration);        //fieldDelimiter check        validateFieldDelimiter(readerConfiguration);        // column: 1. index type 2.value type 3.when type is Date, may have format        validateColumn(readerConfiguration);    }    public static void validateEncoding(Configuration readerConfiguration) {        // encoding check        String encoding = readerConfiguration                .getString(                        com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING,                        com.alibaba.datax.plugin.unstructuredstorage.reader.Constant.DEFAULT_ENCODING);        try {            encoding = encoding.trim();            readerConfiguration.set(Key.ENCODING, encoding);            Charsets.toCharset(encoding);        } catch (UnsupportedCharsetException uce) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                    String.format(\"\u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u7f16\u7801\u683c\u5f0f : [%s]\", encoding), uce);        } catch (Exception e) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.CONFIG_INVALID_EXCEPTION,                    String.format(\"\u7f16\u7801\u914d\u7f6e\u5f02\u5e38, \u8bf7\u8054\u7cfb\u6211\u4eec: %s\", e.getMessage()), e);        }    }    public static void validateCompress(Configuration readerConfiguration) {        String compress = readerConfiguration                .getUnnecessaryValue(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COMPRESS, null, null);        if (StringUtils.isNotBlank(compress)) {            compress = compress.toLowerCase().trim();            boolean compressTag = \"gzip\".equals(compress) || \"bzip2\".equals(compress) || \"zip\".equals(compress)                    || \"lzo\".equals(compress) || \"lzo_deflate\".equals(compress) || \"hadoop-snappy\".equals(compress)                    || \"framing-snappy\".equals(compress);            if (!compressTag) {                throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                        String.format(\"\u4ec5\u652f\u6301 gzip, bzip2, zip, lzo, lzo_deflate, hadoop-snappy, framing-snappy \" +                                \"\u6587\u4ef6\u538b\u7f29\u683c\u5f0f, \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u6587\u4ef6\u538b\u7f29\u683c\u5f0f: [%s]\", compress));            }        } else {            // \u7528\u6237\u53ef\u80fd\u914d\u7f6e\u7684\u662f compress:\"\",\u7a7a\u5b57\u7b26\u4e32,\u9700\u8981\u5c06compress\u8bbe\u7f6e\u4e3anull            compress = null;        }        readerConfiguration.set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COMPRESS, compress);    }    public static void validateFieldDelimiter(Configuration readerConfiguration) {        //fieldDelimiter check        String delimiterInStr = readerConfiguration.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.FIELD_DELIMITER, null);        if (null == delimiterInStr) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.REQUIRED_VALUE,                    String.format(\"\u60a8\u63d0\u4f9b\u914d\u7f6e\u6587\u4ef6\u6709\u8bef\uff0c[%s]\u662f\u5fc5\u586b\u53c2\u6570.\",                            com.alibaba.datax.plugin.unstructuredstorage.reader.Key.FIELD_DELIMITER));        } else if (1 != delimiterInStr.length()) {            // warn: if have, length must be one            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                    String.format(\"\u4ec5\u4ec5\u652f\u6301\u5355\u5b57\u7b26\u5207\u5206, \u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3a : [%s]\", delimiterInStr));        }    }    public static void validateColumn(Configuration readerConfiguration) {        // column: 1. index type 2.value type 3.when type is Date, may have        // format        List<Configuration> columns = readerConfiguration                .getListConfiguration(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN);        if (null == columns || columns.size() == 0) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.REQUIRED_VALUE, \"\u60a8\u9700\u8981\u6307\u5b9a columns\");        }        // handle [\"*\"]        if (null != columns && 1 == columns.size()) {            String columnsInStr = columns.get(0).toString();            if (\"\\\"*\\\"\".equals(columnsInStr) || \"'*'\".equals(columnsInStr)) {                readerConfiguration.set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN, null);                columns = null;            }        }        if (null != columns && columns.size() != 0) {            for (Configuration eachColumnConf : columns) {                eachColumnConf.getNecessaryValue(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.TYPE,                        UnstructuredStorageReaderErrorCode.REQUIRED_VALUE);                Integer columnIndex = eachColumnConf                        .getInt(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.INDEX);                String columnValue = eachColumnConf                        .getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.VALUE);                if (null == columnIndex && null == columnValue) {                    throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.NO_INDEX_VALUE,                            \"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86type, \u5219\u81f3\u5c11\u9700\u8981\u914d\u7f6e index \u6216 value\");                }                if (null != columnIndex && null != columnValue) {                    throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.MIXED_INDEX_VALUE,                            \"\u60a8\u6df7\u5408\u914d\u7f6e\u4e86index, value, \u6bcf\u4e00\u5217\u540c\u65f6\u4ec5\u80fd\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\");                }                if (null != columnIndex && columnIndex < 0) {                    throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                            String.format(\"index\u9700\u8981\u5927\u4e8e\u7b49\u4e8e0, \u60a8\u914d\u7f6e\u7684index\u4e3a[%s]\", columnIndex));                }            }        }    }    public static void validateCsvReaderConfig(Configuration readerConfiguration) {        String csvReaderConfig = readerConfiguration.getString(Key.CSV_READER_CONFIG);        if (StringUtils.isNotBlank(csvReaderConfig)) {            try {                UnstructuredStorageReaderUtil.csvReaderConfigMap = JSON.parseObject(csvReaderConfig, new TypeReference<HashMap<String, Object>>() {                });            } catch (Exception e) {                LOG.info(String.format(\"WARN!!!!\u5ffd\u7565csvReaderConfig\u914d\u7f6e! \u914d\u7f6e\u9519\u8bef,\u503c\u53ea\u80fd\u4e3a\u7a7a\u6216\u8005\u4e3aMap\u7ed3\u6784,\u60a8\u914d\u7f6e\u7684\u503c\u4e3a: %s\", csvReaderConfig));            }        }    }    /**     * @param @param  regexPath     * @param @return     * @return String     * @throws     * @Title: getRegexPathParent     * @Description: \u83b7\u53d6\u6b63\u5219\u8868\u8fbe\u5f0f\u76ee\u5f55\u7684\u7236\u76ee\u5f55     */    public static String getRegexPathParent(String regexPath) {        int endMark;        for (endMark = 0; endMark < regexPath.length(); endMark++) {            if ('*' != regexPath.charAt(endMark) && '?' != regexPath.charAt(endMark)) {                continue;            } else {                break;            }        }        int lastDirSeparator = regexPath.substring(0, endMark).lastIndexOf(IOUtils.DIR_SEPARATOR);        String parentPath = regexPath.substring(0, lastDirSeparator + 1);        return parentPath;    }    /**     * @param @param  regexPath     * @param @return     * @return String     * @throws     * @Title: getRegexPathParentPath     * @Description: \u83b7\u53d6\u542b\u6709\u901a\u914d\u7b26\u8def\u5f84\u7684\u7236\u76ee\u5f55\uff0c\u76ee\u524d\u53ea\u652f\u6301\u5728\u6700\u540e\u4e00\u7ea7\u76ee\u5f55\u4f7f\u7528\u901a\u914d\u7b26*\u6216\u8005?.     * (API jcraft.jsch.ChannelSftp.ls(String path)\u51fd\u6570\u9650\u5236)  http://epaul.github.io/jsch-documentation/javadoc/     */    public static String getRegexPathParentPath(String regexPath) {        int lastDirSeparator = regexPath.lastIndexOf(IOUtils.DIR_SEPARATOR);        String parentPath = \"\";        parentPath = regexPath.substring(0, lastDirSeparator + 1);        if (parentPath.contains(\"*\") || parentPath.contains(\"?\")) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                    String.format(\"\u914d\u7f6e\u9879\u76eepath\u4e2d\uff1a[%s]\u4e0d\u5408\u6cd5\uff0c\u76ee\u524d\u53ea\u652f\u6301\u5728\u6700\u540e\u4e00\u7ea7\u76ee\u5f55\u4f7f\u7528\u901a\u914d\u7b26*\u6216\u8005?\", regexPath));        }        return parentPath;    }    public static void setCsvReaderConfig(CsvReader csvReader) {        if (null != UnstructuredStorageReaderUtil.csvReaderConfigMap && !UnstructuredStorageReaderUtil.csvReaderConfigMap.isEmpty()) {            try {                BeanUtils.populate(csvReader, UnstructuredStorageReaderUtil.csvReaderConfigMap);                LOG.info(String.format(\"csvReaderConfig\u8bbe\u7f6e\u6210\u529f,\u8bbe\u7f6e\u540eCsvReader:%s\", JSON.toJSONString(csvReader)));            } catch (Exception e) {                LOG.info(String.format(\"WARN!!!!\u5ffd\u7565csvReaderConfig\u914d\u7f6e!\u901a\u8fc7BeanUtils.populate\u914d\u7f6e\u60a8\u7684csvReaderConfig\u53d1\u751f\u5f02\u5e38,\u60a8\u914d\u7f6e\u7684\u503c\u4e3a: %s;\u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e!CsvReader\u4f7f\u7528\u9ed8\u8ba4\u503c[%s]\",                        JSON.toJSONString(UnstructuredStorageReaderUtil.csvReaderConfigMap), JSON.toJSONString(csvReader)));            }        } else {            //\u9ed8\u8ba4\u5173\u95ed\u5b89\u5168\u6a21\u5f0f, \u653e\u5f0010W\u5b57\u8282\u7684\u9650\u5236            csvReader.setSafetySwitch(false);            LOG.info(String.format(\"CsvReader\u4f7f\u7528\u9ed8\u8ba4\u503c[%s],csvReaderConfig\u503c\u4e3a[%s]\", JSON.toJSONString(csvReader), JSON.toJSONString(UnstructuredStorageReaderUtil.csvReaderConfigMap)));        }    }    private static InputStream decorateWithCompress(InputStream inputStream, String compress) throws IOException {        InputStream compressedInput = inputStream;        if( null != compress){            if(\"lzo_deflate\".equalsIgnoreCase(compress)){                compressedInput = new LzoInputStream(inputStream, new LzoDecompressor1x_safe());            }else if(\"lzo\".equalsIgnoreCase(compress)){                compressedInput = new ExpandLzopInputStream(inputStream);            }else if(\"gzip\".equalsIgnoreCase(compress)){                compressedInput = new GzipCompressorInputStream(inputStream);            }else if(\"bzip2\".equalsIgnoreCase(compress)){                compressedInput = new BZip2CompressorInputStream(inputStream);            }else if(\"hadoop-snappy\".equalsIgnoreCase(compress)){                CompressionCodec snappyCodec = new SnappyCodec();                compressedInput = snappyCodec.createInputStream(inputStream);            }else if(\"framing-snappy\".equalsIgnoreCase(compress)){                compressedInput = new SnappyFramedInputStream(inputStream);            }else if(\"zip\".equalsIgnoreCase(compress)){                compressedInput = new ZipCycleInputStream(inputStream);            }else{                throw DataXException                        .asDataXException(                                UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                                String.format(\"\u4ec5\u652f\u6301 gzip, bzip2, zip, lzo, lzo_deflate, hadoop-snappy, framing-snappy\" +                                        \"\u6587\u4ef6\u538b\u7f29\u683c\u5f0f , \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u6587\u4ef6\u538b\u7f29\u683c\u5f0f: [%s]\", compress));            }        }        return compressedInput;    }}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getListColumnEntry", "params": ["Configuration", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<ColumnEntry>", "snippet": "    public static List<ColumnEntry> getListColumnEntry(            Configuration configuration, final String path) {        List<JSONObject> lists = configuration.getList(path, JSONObject.class);        if (lists == null) {            return null;        }        List<ColumnEntry> result = new ArrayList<ColumnEntry>();        for (final JSONObject object : lists) {            result.add(JSON.parseObject(object.toJSONString(),                    ColumnEntry.class));        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateParameter", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateParameter(Configuration readerConfiguration) {        // encoding check        validateEncoding(readerConfiguration);        //only support compress types        validateCompress(readerConfiguration);        //fieldDelimiter check        validateFieldDelimiter(readerConfiguration);        // column: 1. index type 2.value type 3.when type is Date, may have format        validateColumn(readerConfiguration);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateEncoding", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateEncoding(Configuration readerConfiguration) {        // encoding check        String encoding = readerConfiguration                .getString(                        com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING,                        com.alibaba.datax.plugin.unstructuredstorage.reader.Constant.DEFAULT_ENCODING);        try {            encoding = encoding.trim();            readerConfiguration.set(Key.ENCODING, encoding);            Charsets.toCharset(encoding);        } catch (UnsupportedCharsetException uce) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                    String.format(\"\u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u7f16\u7801\u683c\u5f0f : [%s]\", encoding), uce);        } catch (Exception e) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.CONFIG_INVALID_EXCEPTION,                    String.format(\"\u7f16\u7801\u914d\u7f6e\u5f02\u5e38, \u8bf7\u8054\u7cfb\u6211\u4eec: %s\", e.getMessage()), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateCompress", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateCompress(Configuration readerConfiguration) {        String compress = readerConfiguration                .getUnnecessaryValue(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COMPRESS, null, null);        if (StringUtils.isNotBlank(compress)) {            compress = compress.toLowerCase().trim();            boolean compressTag = \"gzip\".equals(compress) || \"bzip2\".equals(compress) || \"zip\".equals(compress)                    || \"lzo\".equals(compress) || \"lzo_deflate\".equals(compress) || \"hadoop-snappy\".equals(compress)                    || \"framing-snappy\".equals(compress);            if (!compressTag) {                throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                        String.format(\"\u4ec5\u652f\u6301 gzip, bzip2, zip, lzo, lzo_deflate, hadoop-snappy, framing-snappy \" +                                \"\u6587\u4ef6\u538b\u7f29\u683c\u5f0f, \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u6587\u4ef6\u538b\u7f29\u683c\u5f0f: [%s]\", compress));            }        } else {            // \u7528\u6237\u53ef\u80fd\u914d\u7f6e\u7684\u662f compress:\"\",\u7a7a\u5b57\u7b26\u4e32,\u9700\u8981\u5c06compress\u8bbe\u7f6e\u4e3anull            compress = null;        }        readerConfiguration.set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COMPRESS, compress);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateFieldDelimiter", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateFieldDelimiter(Configuration readerConfiguration) {        //fieldDelimiter check        String delimiterInStr = readerConfiguration.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.FIELD_DELIMITER, null);        if (null == delimiterInStr) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.REQUIRED_VALUE,                    String.format(\"\u60a8\u63d0\u4f9b\u914d\u7f6e\u6587\u4ef6\u6709\u8bef\uff0c[%s]\u662f\u5fc5\u586b\u53c2\u6570.\",                            com.alibaba.datax.plugin.unstructuredstorage.reader.Key.FIELD_DELIMITER));        } else if (1 != delimiterInStr.length()) {            // warn: if have, length must be one            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                    String.format(\"\u4ec5\u4ec5\u652f\u6301\u5355\u5b57\u7b26\u5207\u5206, \u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3a : [%s]\", delimiterInStr));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateColumn", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateColumn(Configuration readerConfiguration) {        // column: 1. index type 2.value type 3.when type is Date, may have        // format        List<Configuration> columns = readerConfiguration                .getListConfiguration(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN);        if (null == columns || columns.size() == 0) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.REQUIRED_VALUE, \"\u60a8\u9700\u8981\u6307\u5b9a columns\");        }        // handle [\"*\"]        if (null != columns && 1 == columns.size()) {            String columnsInStr = columns.get(0).toString();            if (\"\\\"*\\\"\".equals(columnsInStr) || \"'*'\".equals(columnsInStr)) {                readerConfiguration.set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN, null);                columns = null;            }        }        if (null != columns && columns.size() != 0) {            for (Configuration eachColumnConf : columns) {                eachColumnConf.getNecessaryValue(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.TYPE,                        UnstructuredStorageReaderErrorCode.REQUIRED_VALUE);                Integer columnIndex = eachColumnConf                        .getInt(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.INDEX);                String columnValue = eachColumnConf                        .getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.VALUE);                if (null == columnIndex && null == columnValue) {                    throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.NO_INDEX_VALUE,                            \"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86type, \u5219\u81f3\u5c11\u9700\u8981\u914d\u7f6e index \u6216 value\");                }                if (null != columnIndex && null != columnValue) {                    throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.MIXED_INDEX_VALUE,                            \"\u60a8\u6df7\u5408\u914d\u7f6e\u4e86index, value, \u6bcf\u4e00\u5217\u540c\u65f6\u4ec5\u80fd\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\");                }                if (null != columnIndex && columnIndex < 0) {                    throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                            String.format(\"index\u9700\u8981\u5927\u4e8e\u7b49\u4e8e0, \u60a8\u914d\u7f6e\u7684index\u4e3a[%s]\", columnIndex));                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateCsvReaderConfig", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateCsvReaderConfig(Configuration readerConfiguration) {        String csvReaderConfig = readerConfiguration.getString(Key.CSV_READER_CONFIG);        if (StringUtils.isNotBlank(csvReaderConfig)) {            try {                UnstructuredStorageReaderUtil.csvReaderConfigMap = JSON.parseObject(csvReaderConfig, new TypeReference<HashMap<String, Object>>() {                });            } catch (Exception e) {                LOG.info(String.format(\"WARN!!!!\u5ffd\u7565csvReaderConfig\u914d\u7f6e! \u914d\u7f6e\u9519\u8bef,\u503c\u53ea\u80fd\u4e3a\u7a7a\u6216\u8005\u4e3aMap\u7ed3\u6784,\u60a8\u914d\u7f6e\u7684\u503c\u4e3a: %s\", csvReaderConfig));            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRegexPathParent", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getRegexPathParent(String regexPath) {        int endMark;        for (endMark = 0; endMark < regexPath.length(); endMark++) {            if ('*' != regexPath.charAt(endMark) && '?' != regexPath.charAt(endMark)) {                continue;            } else {                break;            }        }        int lastDirSeparator = regexPath.substring(0, endMark).lastIndexOf(IOUtils.DIR_SEPARATOR);        String parentPath = regexPath.substring(0, lastDirSeparator + 1);        return parentPath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRegexPathParentPath", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getRegexPathParentPath(String regexPath) {        int lastDirSeparator = regexPath.lastIndexOf(IOUtils.DIR_SEPARATOR);        String parentPath = \"\";        parentPath = regexPath.substring(0, lastDirSeparator + 1);        if (parentPath.contains(\"*\") || parentPath.contains(\"?\")) {            throw DataXException.asDataXException(UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                    String.format(\"\u914d\u7f6e\u9879\u76eepath\u4e2d\uff1a[%s]\u4e0d\u5408\u6cd5\uff0c\u76ee\u524d\u53ea\u652f\u6301\u5728\u6700\u540e\u4e00\u7ea7\u76ee\u5f55\u4f7f\u7528\u901a\u914d\u7b26*\u6216\u8005?\", regexPath));        }        return parentPath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCsvReaderConfig", "params": ["CsvReader"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setCsvReaderConfig(CsvReader csvReader) {        if (null != UnstructuredStorageReaderUtil.csvReaderConfigMap && !UnstructuredStorageReaderUtil.csvReaderConfigMap.isEmpty()) {            try {                BeanUtils.populate(csvReader, UnstructuredStorageReaderUtil.csvReaderConfigMap);                LOG.info(String.format(\"csvReaderConfig\u8bbe\u7f6e\u6210\u529f,\u8bbe\u7f6e\u540eCsvReader:%s\", JSON.toJSONString(csvReader)));            } catch (Exception e) {                LOG.info(String.format(\"WARN!!!!\u5ffd\u7565csvReaderConfig\u914d\u7f6e!\u901a\u8fc7BeanUtils.populate\u914d\u7f6e\u60a8\u7684csvReaderConfig\u53d1\u751f\u5f02\u5e38,\u60a8\u914d\u7f6e\u7684\u503c\u4e3a: %s;\u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e!CsvReader\u4f7f\u7528\u9ed8\u8ba4\u503c[%s]\",                        JSON.toJSONString(UnstructuredStorageReaderUtil.csvReaderConfigMap), JSON.toJSONString(csvReader)));            }        } else {            //\u9ed8\u8ba4\u5173\u95ed\u5b89\u5168\u6a21\u5f0f, \u653e\u5f0010W\u5b57\u8282\u7684\u9650\u5236            csvReader.setSafetySwitch(false);            LOG.info(String.format(\"CsvReader\u4f7f\u7528\u9ed8\u8ba4\u503c[%s],csvReaderConfig\u503c\u4e3a[%s]\", JSON.toJSONString(csvReader), JSON.toJSONString(UnstructuredStorageReaderUtil.csvReaderConfigMap)));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decorateWithCompress", "params": ["InputStream", "String"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "InputStream", "snippet": "    private static InputStream decorateWithCompress(InputStream inputStream, String compress) throws IOException {        InputStream compressedInput = inputStream;        if( null != compress){            if(\"lzo_deflate\".equalsIgnoreCase(compress)){                compressedInput = new LzoInputStream(inputStream, new LzoDecompressor1x_safe());            }else if(\"lzo\".equalsIgnoreCase(compress)){                compressedInput = new ExpandLzopInputStream(inputStream);            }else if(\"gzip\".equalsIgnoreCase(compress)){                compressedInput = new GzipCompressorInputStream(inputStream);            }else if(\"bzip2\".equalsIgnoreCase(compress)){                compressedInput = new BZip2CompressorInputStream(inputStream);            }else if(\"hadoop-snappy\".equalsIgnoreCase(compress)){                CompressionCodec snappyCodec = new SnappyCodec();                compressedInput = snappyCodec.createInputStream(inputStream);            }else if(\"framing-snappy\".equalsIgnoreCase(compress)){                compressedInput = new SnappyFramedInputStream(inputStream);            }else if(\"zip\".equalsIgnoreCase(compress)){                compressedInput = new ZipCycleInputStream(inputStream);            }else{                throw DataXException                        .asDataXException(                                UnstructuredStorageReaderErrorCode.ILLEGAL_VALUE,                                String.format(\"\u4ec5\u652f\u6301 gzip, bzip2, zip, lzo, lzo_deflate, hadoop-snappy, framing-snappy\" +                                        \"\u6587\u4ef6\u538b\u7f29\u683c\u5f0f , \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u6587\u4ef6\u538b\u7f29\u683c\u5f0f: [%s]\", compress));            }        }        return compressedInput;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/UnstructuredStorageReaderUtil.java", "stars": "23", "class": {"name": "UnstructuredStorageReaderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUid() {        return uid;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUid", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUid(String uid) {        this.uid = uid;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage() {        return message;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessage(String message) {        this.message = message;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsgType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMsgType() {        return msgType;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsgType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsgType(int msgType) {        this.msgType = msgType;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMuted", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isMuted() {        return muted;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMuted", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMuted(boolean muted) {        this.muted = muted;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSend", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSend() {        return isSend;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSend", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSend(boolean send) {        isSend = send;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLoading", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLoading() {        return isLoading;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLoading", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoading(boolean loading) {        isLoading = loading;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/ChatMessage.java", "stars": "2", "class": {"name": "ChatMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        serializeWoodDirectory();        deserializeWoodDirectory();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab6/src/test/java/BinarySerializationTest.java", "stars": "2", "class": {"name": "BinarySerializationTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "serializeWoodDirectory", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void serializeWoodDirectory() {        WoodDirectory woodDirectory = new WoodDirectory();        woodDirectory.add(new Wood(4, \"Oak\", 1f));        File file = new File(\"object.binary\");        try(ObjectOutputStream out = new ObjectOutputStream(                new FileOutputStream(file))) {            out.writeObject(woodDirectory);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab6/src/test/java/BinarySerializationTest.java", "stars": "2", "class": {"name": "BinarySerializationTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deserializeWoodDirectory", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void deserializeWoodDirectory() {        WoodDirectory woodDirectory = null;        File file = new File(\"object.binary\");        try (ObjectInputStream input = new ObjectInputStream(                new FileInputStream(file))) {            woodDirectory = (WoodDirectory) input.readObject();        } catch (Exception e) {            e.printStackTrace();        }        if (woodDirectory != null)            for (Object w : woodDirectory.getArr())                System.out.println(w.toString());    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab6/src/test/java/BinarySerializationTest.java", "stars": "2", "class": {"name": "BinarySerializationTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": ["ResponseEntity<Problem>", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> process(@Nullable ResponseEntity<Problem> entity, NativeWebRequest request) {        if (entity == null) {            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);        }        Problem problem = entity.getBody();        if (!(problem instanceof ConstraintViolationProblem)) {            return entity;        }        ProblemBuilder builder = Problem.builder()            .withStatus(problem.getStatus())            .withTitle(GardleErrorKey.VALIDATION_ERROR.name())            .with(\"Violations\", ((ConstraintViolationProblem) problem).getViolations());        return new ResponseEntity<>(builder.build(), entity.getHeaders(), entity.getStatusCode());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleAccessDenied", "params": ["AccessDeniedException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleAccessDenied(AccessDeniedException ex, NativeWebRequest request) {        Problem problem = Problem.builder()            .withStatus(Status.FORBIDDEN)            .withTitle(GardleErrorKey.ACCESS_DENIED.name())            .build();        return create(ex, problem, request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleConcurrencyFailure", "params": ["ConcurrencyFailureException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleConcurrencyFailure(ConcurrencyFailureException ex, NativeWebRequest request) {        Problem problem = Problem.builder()            .withStatus(Status.CONFLICT)            .build();        return create(ex, problem, request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "paymentProviderServiceException", "params": ["PaymentNotSetServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> paymentProviderServiceException(PaymentNotSetServiceException ex, NativeWebRequest request) {        return create(new BadRequestException(GardleErrorKey.PAYMENT_OF_LEASING_NOT_SET, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "bankAccountIbanEmptyException", "params": ["BankAccountCreationEmailEmptyServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> bankAccountIbanEmptyException(BankAccountCreationEmailEmptyServiceException ex, NativeWebRequest request) {        return create(new BadRequestException(GardleErrorKey.MISSING_BANK_ACCOUNT_EMAIL, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "bankAccountIbanEmptyException", "params": ["BankAccountCreationIbanEmptyServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> bankAccountIbanEmptyException(BankAccountCreationIbanEmptyServiceException ex, NativeWebRequest request) {        return create(new BadRequestException(GardleErrorKey.MISSING_BANK_ACCOUNT_IBAN, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "gardenFieldFilterCriteriaValidationException", "params": ["GardenFieldFilterCriteriaValidationServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> gardenFieldFilterCriteriaValidationException(GardenFieldFilterCriteriaValidationServiceException ex, NativeWebRequest request) {        return create(new BadRequestException(GardleErrorKey.GARDENFIELD_FILTER_CRITERIA_VALIDATION, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleInvalidPasswordException", "params": ["InvalidPasswordServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleInvalidPasswordException(InvalidPasswordServiceException ex, NativeWebRequest request) {        return create(new BadRequestException(GardleErrorKey.PASSWORD_INVALID, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleGardenFieldWithoutOwnerException", "params": ["GardenFieldWithoutOwnerServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleGardenFieldWithoutOwnerException(GardenFieldWithoutOwnerServiceException ex, NativeWebRequest request) {        return create(new BadRequestException(GardleErrorKey.GARDENFIELD_WITHOUT_OWNER, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleNotAnImageException", "params": ["NotAnImageServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleNotAnImageException(NotAnImageServiceException ex, NativeWebRequest request) {        return create(new BadRequestException(GardleErrorKey.NOT_AN_IMAGE, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleFileDeletionError", "params": ["ImageStorageServiceDeletionException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleFileDeletionError(ImageStorageServiceDeletionException ex, NativeWebRequest request) {        return create(new BadRequestException(GardleErrorKey.COULD_NOT_DELETE_IMAGE, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleFileStorageException", "params": ["ImageStorageServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleFileStorageException(ImageStorageServiceException ex, NativeWebRequest request) {        return create(new BadRequestException(GardleErrorKey.IMAGE_STORAGE, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleMissingAuthorityForGfException", "params": ["MissingAuthorityForGardenFieldServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleMissingAuthorityForGfException(MissingAuthorityForGardenFieldServiceException ex, NativeWebRequest request) {        return create(new UnauthorizedException(GardleErrorKey.USER_NOT_AUTHORIZED_FOR_REQUESTED_GARDENFIELD, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleMissingAuthorityForMessageException", "params": ["NotLoggedInServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleMissingAuthorityForMessageException(NotLoggedInServiceException ex, NativeWebRequest request) {        return create(new UnauthorizedException(GardleErrorKey.USER_NOT_LOGGED_IN, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleMissingAuthorityException", "params": ["MissingAuthorityServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleMissingAuthorityException(MissingAuthorityServiceException ex, NativeWebRequest request) {        return create(new UnauthorizedException(GardleErrorKey.MISSING_AUTHORITY, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleMissingAuthorityForMessageException", "params": ["MissingAuthorityForMessageServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleMissingAuthorityForMessageException(MissingAuthorityForMessageServiceException ex, NativeWebRequest request) {        return create(new ForbiddenException(GardleErrorKey.USER_NOT_AUTHORIZED_FOR_REQUESTED_MESSAGES, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleMissingAuthorityForMessageThreadException", "params": ["MissingAuthorityForMessageThreadServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleMissingAuthorityForMessageThreadException(MissingAuthorityForMessageThreadServiceException ex, NativeWebRequest request) {        return create(new ForbiddenException(GardleErrorKey.USER_NOT_AUTHORIZED_FOR_REQUESTED_MESSAGE_THREAD, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleMissingPermissionException", "params": ["MissingPermissionServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleMissingPermissionException(MissingPermissionServiceException ex, NativeWebRequest request) {        return create(new ForbiddenException(GardleErrorKey.MISSING_PERMISSION, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleStripeVerificationKeyValidationError", "params": ["StripeVerificationKeyValidationServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleStripeVerificationKeyValidationError(StripeVerificationKeyValidationServiceException ex, NativeWebRequest request) {        return create(new ForbiddenException(GardleErrorKey.STRIPE_VERIFICATION_KEY_VALIDATION_ERROR, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "missingStripeVerificationException", "params": ["MissingStripeVerificationServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> missingStripeVerificationException(MissingStripeVerificationServiceException ex, NativeWebRequest request) {        return create(new ForbiddenException(GardleErrorKey.MISSING_STRIPE_VERIFICATION, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleGardenFieldNotFoundException", "params": ["GardenFieldNotFoundServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleGardenFieldNotFoundException(GardenFieldNotFoundServiceException ex, NativeWebRequest request) {        return create(new NotFoundException(GardleErrorKey.GARDENFIELD_NOT_FOUND, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleCoverFileNotFound", "params": ["CoverNotFoundServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleCoverFileNotFound(CoverNotFoundServiceException ex, NativeWebRequest request) {        return create(new NotFoundException(GardleErrorKey.COVER_NOT_FOUND, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleFileNotFound", "params": ["ImageNotFoundServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleFileNotFound(ImageNotFoundServiceException ex, NativeWebRequest request) {        return create(new NotFoundException(GardleErrorKey.IMAGE_NOT_FOUND, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleLeasingNotFoundException", "params": ["LeasingNotFoundServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleLeasingNotFoundException(LeasingNotFoundServiceException ex, NativeWebRequest request) {        return create(new NotFoundException(GardleErrorKey.LEASING_NOT_FOUND, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleGardenFieldNotExistingException", "params": ["GardenFieldUnknownServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleGardenFieldNotExistingException(GardenFieldUnknownServiceException ex, NativeWebRequest request) {        return create(new ConflictException(GardleErrorKey.GARDENFIELD_NOT_FOUND, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleEmailAlreadyUsedException", "params": ["EmailAlreadyUsedServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleEmailAlreadyUsedException(EmailAlreadyUsedServiceException ex, NativeWebRequest request) {        return create(new ConflictException(GardleErrorKey.EMAIL_ALREADY_EXISTS, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleUsernameAlreadyUsedException", "params": ["UsernameAlreadyUsedServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleUsernameAlreadyUsedException(UsernameAlreadyUsedServiceException ex, NativeWebRequest request) {        return create(new ConflictException(GardleErrorKey.LOGIN_ALREADY_EXISTS, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleLeasingsOverlapException", "params": ["LeasingsOverlapServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleLeasingsOverlapException(LeasingsOverlapServiceException ex, NativeWebRequest request) {        return create(new ConflictException(GardleErrorKey.LEASINGS_OVERLAP, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleInvalidLeasingStateException", "params": ["InvalidLeasingStateServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleInvalidLeasingStateException(InvalidLeasingStateServiceException ex, NativeWebRequest request) {        return create(new ConflictException(GardleErrorKey.LEASING_STATUS_TRANSITION_NOT_ALLOWED, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleLeasingUpdateNotAllowedException", "params": ["LeasingUpdateNotAllowedServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleLeasingUpdateNotAllowedException(LeasingUpdateNotAllowedServiceException ex, NativeWebRequest request) {        return create(new ConflictException(GardleErrorKey.LEASING_UPDATE_NOT_ALLOWED_IN_PERIOD, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleLeasingCreateNotAllowedException", "params": ["LeasingCreateNotAllowedServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleLeasingCreateNotAllowedException(LeasingCreateNotAllowedServiceException ex, NativeWebRequest request) {        return create(new ConflictException(GardleErrorKey.LEASING_CREATE_NOT_ALLOWED_IN_PERIOD, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleLeasingTooShortException", "params": ["LeasingTooShortServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleLeasingTooShortException(LeasingTooShortServiceException ex, NativeWebRequest request) {        return create(new ConflictException(GardleErrorKey.LEASING_TOO_SHORT, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "handleUserForLeasingDoesNotExistException", "params": ["UserForLeasingDoesNotExistServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> handleUserForLeasingDoesNotExistException(UserForLeasingDoesNotExistServiceException ex, NativeWebRequest request) {        return create(new ConflictException(GardleErrorKey.LEASING_USER_DOES_NOT_EXIST, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "paymentProviderServiceException", "params": ["PaymentProviderServiceException", "NativeWebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Problem>", "snippet": "    public ResponseEntity<Problem> paymentProviderServiceException(PaymentProviderServiceException ex, NativeWebRequest request) {        return create(new InternalServerErrorException(GardleErrorKey.PAYMENT_PROVIDER_ERROR, ex.getMessage()), request);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/errors/ExceptionTranslator.java", "stars": "2", "class": {"name": "ExceptionTranslator", "extends": null, "implements": ["ProblemHandling", "SecurityAdviceTrait"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_second);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/SecondActivity.java", "stars": "1", "class": {"name": "SecondActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initPageEvent", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean initPageEvent() {        addPageEvent(MainActivity.class);        return true;    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/SecondActivity.java", "stars": "1", "class": {"name": "SecondActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initPageStickEvent", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean initPageStickEvent() {        addPageStickEvent(MainActivity.class);        return true;    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/SecondActivity.java", "stars": "1", "class": {"name": "SecondActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEvent", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEvent(@NonNull Event event) {        int eventType = event.getEventType();        Bundle eventParams = event.getEventParams();        // \u5904\u7406\u7ed3\u675f\u56de\u8c03        if (eventType == Constants.EVENT_TYPE_END) {            if (eventParams != null) {                String string = eventParams.getString(Constants.EVENT_PARAM_END);                Toast.makeText(this, string, Toast.LENGTH_SHORT).show();            }        }    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/SecondActivity.java", "stars": "1", "class": {"name": "SecondActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStickEvent", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onStickEvent(@NonNull Event event) {        int eventType = event.getEventType();        Bundle eventParams = event.getEventParams();        if (eventType == Constants.STICK_EVENT_FIRST) {            String string = eventParams.getString(Constants.STICK_EVENT_PARAM_FIRST);            Toast.makeText(this, string, Toast.LENGTH_SHORT).show();        } else if (eventType == Constants.STICK_EVENT_SECOND) {            String string = eventParams.getString(Constants.STICK_EVENT_PARAM_SECOND);            Toast.makeText(this, string, Toast.LENGTH_SHORT).show();        }        return true;    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/SecondActivity.java", "stars": "1", "class": {"name": "SecondActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "testEventPage", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testEventPage(View view) {        Bundle eventParams = new Bundle();        eventParams.putString(Constants.EVENT_PARAM_START, \"\u5f00\u59cb\u666e\u901a\u4e8b\u4ef6\u56de\u8c03\");        EventHelper.onEvent(this, Constants.EVENT_TYPE_START, eventParams);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/SecondActivity.java", "stars": "1", "class": {"name": "SecondActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["AppCompatActivity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(AppCompatActivity actionBarActivity) {        mActionBar = actionBarActivity.getSupportActionBar();        mActivity = actionBarActivity;        getToolbar(actionBarActivity);        if (mToolbar == null || mToolbar.getBackground() == null) {            mOldBackground = getColoredBackground(R.color.primary);        } else {            mOldBackground = mToolbar.getBackground();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResources", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Resources", "snippet": "    private Resources getResources() {        return mActivity.getResources();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getToolbar", "params": ["AppCompatActivity"], "throws": null, "modifiers": ["private"], "return_type": "View", "snippet": "    private View getToolbar(AppCompatActivity actionBarActivity) {        final int toolBarId = getResources().getIdentifier(\"toolbar\", \"id\", actionBarActivity.getPackageName());        mToolbar = actionBarActivity.findViewById(toolBarId);        return mToolbar;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeColor", "params": ["Boolean"], "throws": null, "modifiers": ["private"], "return_type": "ActionBarBackground", "snippet": "    private ActionBarBackground changeColor(Boolean fade) {        if (fade) {            fadeBackground(mOldBackground, getColoredBackground(mNewColor));        } else {            mActionBar.setBackgroundDrawable(getColoredBackground(mNewColor));        }        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fadeOut", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ActionBarBackground", "snippet": "    private ActionBarBackground fadeOut() {        Drawable background = getColoredBackground(android.R.color.transparent);        background.setAlpha(0);        fadeBackground(mOldBackground, background);        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fadeIn", "params": ["Integer"], "throws": null, "modifiers": ["private"], "return_type": "ActionBarBackground", "snippet": "    private ActionBarBackground fadeIn(Integer color) {        Drawable transBackground = getColoredBackground(android.R.color.transparent);        Drawable background = getColoredBackground(color);        background.setAlpha(1);        fadeBackground(transBackground, background);        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fadeBackground", "params": ["Drawable"], "throws": null, "modifiers": ["private"], "return_type": "ActionBarBackground", "snippet": "    private ActionBarBackground fadeBackground(Drawable newDrawable) {        fadeBackground(mOldBackground, newDrawable);        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fadeBackground", "params": ["Drawable", "Drawable"], "throws": null, "modifiers": ["private"], "return_type": "ActionBarBackground", "snippet": "    private ActionBarBackground fadeBackground(Drawable oldDrawable, Drawable newDrawable) {        if (oldDrawable == null) {            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {                newDrawable.setCallback(drawableCallback);            } else {                mActionBar.setBackgroundDrawable(newDrawable);            }        } else {            TransitionDrawable td = new TransitionDrawable(new Drawable[]{oldDrawable, newDrawable});            td.setCrossFadeEnabled(true);            // workaround for broken ActionBarContainer drawable handling on            // pre-API 17 builds            // https://github.com/android/platform_frameworks_base/commit/a7cc06d82e45918c37429a59b14545c6a57db4e4            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {                td.setCallback(drawableCallback);            } else {                int paddingTop = mToolbar.getPaddingTop();                mActionBar.setBackgroundDrawable(td);                mToolbar.setPadding(mToolbar.getPaddingLeft(), paddingTop, mToolbar.getPaddingRight(), mToolbar.getPaddingBottom()); // fix for fitSystemWindows            }            td.startTransition(500);        }        mOldBackground = newDrawable;        // http://stackoverflow.com/questions/11002691/actionbar-setbackgrounddrawable-nulling-background-from-thread-handler        //mActionBar.setDisplayShowTitleEnabled(false);        //mActionBar.setDisplayShowTitleEnabled(true);        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColoredBackground", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Drawable", "snippet": "    public static Drawable getColoredBackground(int color) {        return new ColorDrawable(color);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fadeOut", "params": ["AppCompatActivity"], "throws": null, "modifiers": ["public", "static"], "return_type": "ActionBarBackground", "snippet": "    public static ActionBarBackground fadeOut(AppCompatActivity activity) {        ActionBarBackground abColor = new ActionBarBackground(activity);        abColor.fadeOut();        return abColor;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fadeIn", "params": ["AppCompatActivity", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "ActionBarBackground", "snippet": "    public static ActionBarBackground fadeIn(AppCompatActivity activity, Integer color) {        ActionBarBackground abColor = new ActionBarBackground(activity);        abColor.fadeIn(color);        return abColor;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeColor", "params": ["AppCompatActivity", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "ActionBarBackground", "snippet": "    public static ActionBarBackground changeColor(AppCompatActivity activity, int newColor) {        return changeColor(activity, newColor, true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeColor", "params": ["AppCompatActivity", "int", "Boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "ActionBarBackground", "snippet": "    public static ActionBarBackground changeColor(AppCompatActivity activity, int newColor, Boolean fade) {        ActionBarBackground abColor = new ActionBarBackground(activity, newColor);        abColor.changeColor(fade);        return abColor;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fadeDrawable", "params": ["AppCompatActivity", "Drawable"], "throws": null, "modifiers": ["public", "static"], "return_type": "ActionBarBackground", "snippet": "    public static ActionBarBackground fadeDrawable(AppCompatActivity activity, Drawable newDrawable) {        ActionBarBackground abColor = new ActionBarBackground(activity);        abColor.fadeBackground(newDrawable);        return abColor;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ActionBarBackground.java", "stars": "4", "class": {"name": "ActionBarBackground", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Connection conn = null;        Statement stmt = null;        try {            //1\u3001\u6ce8\u518c\u9a71\u52a8            Class.forName(\"com.mysql.cj.jdbc.Driver\");            //2\u3001\u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61            conn = DriverManager.getConnection(\"jdbc:mysql:///db1\", \"root\", \"\");            //3\u3001\u5b9a\u4e49 sql            String sql = \"delete from student where id = 1\";            //4\u3001\u83b7\u53d6\u6267\u884c sql \u5bf9\u8c61            stmt = conn.createStatement();            //5\u3001\u6267\u884c sql            int count = stmt.executeUpdate(sql);            System.out.println(count);            if (count > 0) {                System.out.println(\"\u4fee\u6539\u6210\u529f\uff01\");            }else{                System.out.println(\"\u4fee\u6539\u5931\u8d25\uff01\");            }        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (SQLException throwables) {            throwables.printStackTrace();        } finally {            if(stmt != null){                try {                    stmt.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }            if(conn != null){                try {                    conn.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Demo/JdbcDemo4.java", "stars": "2", "class": {"name": "JdbcDemo4", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "  public static int hashCode(Object obj) {    if (obj == null) {      // for consistency with Arrays#hashCode() and Objects#hashCode()      return 0;    }    final Class<?> clazz = obj.getClass();    if (!clazz.isArray()) {      return obj.hashCode();    }    final Class<?> componentType = clazz.getComponentType();    if (long.class.equals(componentType)) {      return Arrays.hashCode((long[]) obj);    } else if (int.class.equals(componentType)) {      return Arrays.hashCode((int[]) obj);    } else if (short.class.equals(componentType)) {      return Arrays.hashCode((short[]) obj);    } else if (char.class.equals(componentType)) {      return Arrays.hashCode((char[]) obj);    } else if (byte.class.equals(componentType)) {      return Arrays.hashCode((byte[]) obj);    } else if (boolean.class.equals(componentType)) {      return Arrays.hashCode((boolean[]) obj);    } else if (float.class.equals(componentType)) {      return Arrays.hashCode((float[]) obj);    } else if (double.class.equals(componentType)) {      return Arrays.hashCode((double[]) obj);    } else {      return Arrays.hashCode((Object[]) obj);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ArrayUtil.java", "stars": "15", "class": {"name": "ArrayUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean equals(Object thisObj, Object thatObj) {    if (thisObj == null) {      return thatObj == null;    } else if (thatObj == null) {      return false;    }    final Class<?> clazz = thisObj.getClass();    if (!clazz.equals(thatObj.getClass())) {      return false;    }    if (!clazz.isArray()) {      return thisObj.equals(thatObj);    }    final Class<?> componentType = clazz.getComponentType();    if (long.class.equals(componentType)) {      return Arrays.equals((long[]) thisObj, (long[]) thatObj);    } else if (int.class.equals(componentType)) {      return Arrays.equals((int[]) thisObj, (int[]) thatObj);    } else if (short.class.equals(componentType)) {      return Arrays.equals((short[]) thisObj, (short[]) thatObj);    } else if (char.class.equals(componentType)) {      return Arrays.equals((char[]) thisObj, (char[]) thatObj);    } else if (byte.class.equals(componentType)) {      return Arrays.equals((byte[]) thisObj, (byte[]) thatObj);    } else if (boolean.class.equals(componentType)) {      return Arrays.equals((boolean[]) thisObj, (boolean[]) thatObj);    } else if (float.class.equals(componentType)) {      return Arrays.equals((float[]) thisObj, (float[]) thatObj);    } else if (double.class.equals(componentType)) {      return Arrays.equals((double[]) thisObj, (double[]) thatObj);    } else {      return Arrays.equals((Object[]) thisObj, (Object[]) thatObj);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ArrayUtil.java", "stars": "15", "class": {"name": "ArrayUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String toString(Object obj) {    if (obj == null) {      return \"null\";    }    final Class<?> clazz = obj.getClass();    if (!clazz.isArray()) {      return obj.toString();    }    final Class<?> componentType = obj.getClass().getComponentType();    if (long.class.equals(componentType)) {      return Arrays.toString((long[]) obj);    } else if (int.class.equals(componentType)) {      return Arrays.toString((int[]) obj);    } else if (short.class.equals(componentType)) {      return Arrays.toString((short[]) obj);    } else if (char.class.equals(componentType)) {      return Arrays.toString((char[]) obj);    } else if (byte.class.equals(componentType)) {      return Arrays.toString((byte[]) obj);    } else if (boolean.class.equals(componentType)) {      return Arrays.toString((boolean[]) obj);    } else if (float.class.equals(componentType)) {      return Arrays.toString((float[]) obj);    } else if (double.class.equals(componentType)) {      return Arrays.toString((double[]) obj);    } else {      return Arrays.toString((Object[]) obj);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ArrayUtil.java", "stars": "15", "class": {"name": "ArrayUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u83b7\u53d6\u4e00\u4e2aString\u7c7b\u578b\u7684Stream\u6d41        Stream<String> stream = Stream.of(\"1\", \"2\", \"3\", \"4\");        //\u4f7f\u7528map\u65b9\u6cd5,\u628a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u6574\u6570,\u8f6c\u6362(\u6620\u5c04)\u4e3aInteger\u7c7b\u578b\u7684\u6574\u6570        Stream<Integer> stream2 = stream.map((String s)->{            return Integer.parseInt(s);        });        //\u904d\u5386Stream2\u6d41        stream2.forEach(i-> System.out.println(i));    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo02/Stream/Demo04Stream_map.java", "stars": "2", "class": {"name": "Demo04Stream_map", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/count/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/count/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/count/CountTest.java", "stars": "15", "class": {"name": "CountTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCount", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCount() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      CountMapper mapper = sqlSession.getMapper(CountMapper.class);      int answer = mapper.count();      assertEquals(6, answer);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/count/CountTest.java", "stars": "15", "class": {"name": "CountTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getContext", "params": [], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "UserContext", "snippet": "\tpublic static final UserContext getContext() {\t\tUserContext context = userContext.get();\t\tif (context == null) {\t\t\tcontext = createEmptyContext();\t\t\tuserContext.set(context);\t\t}\t\t\t\treturn userContext.get();\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContextHolder.java", "stars": "2", "class": {"name": "UserContextHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContext", "params": ["UserContext"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "void", "snippet": "\tpublic static final void setContext(UserContext context) {\t\tAssert.notNull(context, \"Only non-null UserContext instances are permitted\");\t\tuserContext.set(context);\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContextHolder.java", "stars": "2", "class": {"name": "UserContextHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createEmptyContext", "params": [], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "UserContext", "snippet": "\tpublic static final UserContext createEmptyContext() {\t\treturn new UserContext();\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContextHolder.java", "stars": "2", "class": {"name": "UserContextHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "FacadeRtcManager", "snippet": "    public static FacadeRtcManager getInstance() {        if (instance == null) {            instance = new FacadeRtcManager();        }        return instance;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initializeRtc", "params": ["Context", "String", "long", "ThunderEventHandler"], "throws": null, "modifiers": ["public"], "return_type": "FacadeRtcManager", "snippet": "    public FacadeRtcManager initializeRtc(Context context, String appId, long sceneId, ThunderEventHandler handler) {        this.context = context;        if (thunderEngine != null) {            return this;        }        thunderEngine = ThunderEngine.createEngine(context, appId, sceneId, handler);        return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRoomConfig", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoomConfig(int mediaMode, int roomMode) {        //\u8bbe\u7f6e\u9891\u9053\u5c5e\u6027        //Set media mode and room scenario mode        thunderEngine.setMediaMode(mediaMode);        thunderEngine.setRoomMode(roomMode);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startPush", "params": ["ThunderPreviewView", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startPush(ThunderPreviewView mPreviewContainer, String uid, int liveMode) {        setVideoEncoderConfig(liveMode);        //\u8bbe\u7f6e\u672c\u5730\u9884\u89c8\u89c6\u56fe        //Set local view        ThunderVideoCanvas mPreviewView = new ThunderVideoCanvas(mPreviewContainer, THUNDERVIDEOVIEW_SCALE_MODE_ASPECT_FIT, uid);        thunderEngine.setLocalVideoCanvas(mPreviewView);        //\u8bbe\u7f6e\u89c6\u9891\u6a21\u5f0f        //Set local view display mode        thunderEngine.setLocalCanvasScaleMode(THUNDER_RENDER_MODE_CLIP_TO_BOUNDS);        //\u5f00\u542f\u9884\u89c8        //enable video preview        thunderEngine.startVideoPreview();        //\u5f00\u64ad \u97f3\u9891        //enabling sending of local audio        thunderEngine.stopLocalAudioStream(false);        //\u5f00\u64ad \u89c6\u9891        //enable sending of local video stream        thunderEngine.stopLocalVideoStream(false);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVideoEncoderConfig", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoEncoderConfig(int publishMode) {        ThunderVideoEncoderConfiguration vConfig = new ThunderVideoEncoderConfiguration();        vConfig.publishMode = publishMode;        vConfig.playType = ThunderRtcConstant.ThunderPublishPlayType.THUNDERPUBLISH_PLAY_INTERACT;        thunderEngine.setVideoEncoderConfig(vConfig);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopPush", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopPush() {        thunderEngine.stopLocalVideoStream(true);        thunderEngine.stopLocalAudioStream(true);        thunderEngine.stopVideoPreview();    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareRemoteView", "params": ["ThunderPlayerView", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void prepareRemoteView(ThunderPlayerView mplayerViewContainer, String remoteUid) {        ThunderVideoCanvas mPlayView = new ThunderVideoCanvas(mplayerViewContainer, THUNDERVIDEOVIEW_SCALE_MODE_ASPECT_FIT, remoteUid);        thunderEngine.setRemoteVideoCanvas(mPlayView);        int code = thunderEngine.setRemoteCanvasScaleMode(remoteUid, THUNDER_RENDER_MODE_CLIP_TO_BOUNDS);        Log.d(TAG, \"prepareRemoteView: \" + code);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogCallback", "params": ["IThunderLogCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLogCallback(IThunderLogCallback callback) {        thunderEngine.setLogCallback(callback);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "switchFrontCamera", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void switchFrontCamera(boolean bFront) {        thunderEngine.switchFrontCamera(bFront);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "joinRoom", "params": ["byte", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void joinRoom(byte[] token, String channelName, String uid) {        int ret = thunderEngine.joinRoom(token, channelName, uid);//\u8fdb\u9891\u9053\u6210\u529f 0    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopLocalAudioStream", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopLocalAudioStream(boolean isStop) {        thunderEngine.stopLocalAudioStream(isStop);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addSubscribe", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addSubscribe(String roomId, String uid) {        if (thunderEngine != null) {            thunderEngine.addSubscribe(roomId, uid);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeSubscribe", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeSubscribe(String roomId, String uid) {        if (thunderEngine != null) {            thunderEngine.removeSubscribe(roomId, uid);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "leaveRoom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void leaveRoom() {        thunderEngine.leaveRoom();    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLiveTranscodingTask", "params": ["String", "LiveTranscoding"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLiveTranscodingTask(String taskId, LiveTranscoding transcoding) {        if (thunderEngine != null) {            thunderEngine.setLiveTranscodingTask(taskId, transcoding);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addPublishTranscodingStreamUrl", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addPublishTranscodingStreamUrl(String taskId, String url) {        if (thunderEngine != null) {            thunderEngine.addPublishTranscodingStreamUrl(taskId, url);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removePublishTranscodingStreamUrl", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removePublishTranscodingStreamUrl(String taskId, String url) {        if (thunderEngine != null) {            thunderEngine.removePublishTranscodingStreamUrl(taskId, url);        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogFilePath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "FacadeRtcManager", "snippet": "    public FacadeRtcManager setLogFilePath(String filePath) {        if (thunderEngine != null) {            thunderEngine.setLogFilePath(filePath);        }        return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThunderEventHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ThunderEventHandler", "snippet": "    public ThunderEventHandler getThunderEventHandler() {        return thunderEventHandler;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reFreshToken", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void reFreshToken() {        Utils.getToken(Constant.uid, String.valueOf(Constant.mAppId), new Callback() {            @Override            public void onFailure(Call call, IOException e) {            }            @Override            public void onResponse(Call call, Response response) throws IOException {                RepToken repToken = JSON.parseObject(response.body().string(), RepToken.class);                if (repToken.getObject() != null) {                    thunderEngine.updateToken(repToken.getObject().getBytes());                }            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThunderLogCallback", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IThunderLogCallback", "snippet": "    public IThunderLogCallback getThunderLogCallback() {        return thunderLogCallback;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObserver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Observer", "snippet": "    public Observer getObserver() {        return observer;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setObserver", "params": ["Observer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setObserver(Observer observer) {        this.observer = observer;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJoinThunderRoomObserver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JoinThunderRoomObserver", "snippet": "    public JoinThunderRoomObserver getJoinThunderRoomObserver() {        return joinThunderRoomObserver;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJoinThunderRoomObserver", "params": ["JoinThunderRoomObserver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setJoinThunderRoomObserver(JoinThunderRoomObserver joinThunderRoomObserver) {        this.joinThunderRoomObserver = joinThunderRoomObserver;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initLiveMode", "params": ["List<UserMode>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initLiveMode(List<UserMode> userLiveModes) {        addLiveUsers(\"\u6d41\u7545\", ThunderRtcConstant.ThunderPublishVideoMode.THUNDERPUBLISH_VIDEO_MODE_FLUENCY, userLiveModes);        addLiveUsers(\"\u6807\u6e05\", ThunderRtcConstant.ThunderPublishVideoMode.THUNDERPUBLISH_VIDEO_MODE_NORMAL, userLiveModes);        addLiveUsers(\"\u9ad8\u6e05\", ThunderRtcConstant.ThunderPublishVideoMode.THUNDERPUBLISH_VIDEO_MODE_HIGHQULITY, userLiveModes);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addLiveUsers", "params": ["String", "int", "List<UserMode>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addLiveUsers(String mode, int thunderpublishVideoMode, List<UserMode> userLiveModes) {        UserMode userMode = new UserMode();        userMode.setModeTip(mode);        userMode.setModeType(Constant.LIVE_MODETYPE);        userMode.setThunderMode(thunderpublishVideoMode);        userLiveModes.add(userMode);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "FacadeRtcManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onJoinRoomSuccess", "params": ["String", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onJoinRoomSuccess(String channel, String uid, int elapsed) {        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "Observer", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "onVideoSizeChanged", "params": ["String", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onVideoSizeChanged(String uid, int width, int height, int rotation) {        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "Observer", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "onRemoteVideoStopped", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onRemoteVideoStopped(String uid, boolean muted) {        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "Observer", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "onRemoteAudioStopped", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onRemoteAudioStopped(String uid, boolean muted) {        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "Observer", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "onLeaveRoom", "params": ["ThunderEventHandler"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onLeaveRoom(ThunderEventHandler.RoomStats status) {        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "Observer", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "onPublishStreamToCDNStatus", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPublishStreamToCDNStatus(String url, int errorCode) {        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "Observer", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "onNetworkQuality", "params": ["String", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onNetworkQuality(String uid, int txQuality, int rxQuality) {        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "Observer", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "onRoomStats", "params": ["ThunderNotification"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onRoomStats(ThunderNotification.RoomStats stats) {        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "Observer", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "onJoinRoomSuccess", "params": ["String", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onJoinRoomSuccess(String room, String uid, int elapsed) {        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/facade/FacadeRtcManager.java", "stars": "2", "class": {"name": "JoinThunderRoomObserver", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "discover", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Set<Class>", "snippet": "  public Set<Class<?>> discover(String scanPackageName) {    this.classGraph.enableAllInfo();    if (classgraphOptions != null) {      this.scanPackages(classgraphOptions.getScanPackages(), scanPackageName)              .skipPackages(classgraphOptions.getSkipPackages())              .verbose(classgraphOptions.isVerbose())              .enableRealtimeLogging(classgraphOptions.isEnableRealtimeLogging());    }    List<Class<?>> classes = this.classGraph.scan().getAllClasses().loadClasses();    return new CopyOnWriteArraySet<>(classes);  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/ClassgraphDiscoverer.java", "stars": "2", "class": {"name": "ClassgraphDiscoverer", "extends": null, "implements": ["Discoverer"], "modifiers": ["public", "final"]}}, {"method_name": "scanPackages", "params": ["Set<String>", "String"], "throws": null, "modifiers": ["private"], "return_type": "ClassgraphDiscoverer", "snippet": "  private ClassgraphDiscoverer scanPackages(Set<String> scanPackages, String scanPackageName) {    if (Objects.isNull(scanPackageName) || !scanPackageName.contains(\".\")) {      throw new IllegalArgumentException(\"scanPackageName cannot be empty and needs to conform to the specification\");    }    if (Objects.isNull(scanPackages)) {      scanPackages = new LinkedHashSet<>();    }    scanPackages.add(scanPackageName);    this.classGraph.whitelistPackages(scanPackages.toArray(new String[0]));    return this;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/ClassgraphDiscoverer.java", "stars": "2", "class": {"name": "ClassgraphDiscoverer", "extends": null, "implements": ["Discoverer"], "modifiers": ["public", "final"]}}, {"method_name": "skipPackages", "params": ["Set<String>"], "throws": null, "modifiers": ["private"], "return_type": "ClassgraphDiscoverer", "snippet": "  private ClassgraphDiscoverer skipPackages(Set<String> blackList) {    if (blackList != null && blackList.size() > 0) {      this.classGraph.blacklistPackages(blackList.toArray(new String[0]));    }    return this;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/ClassgraphDiscoverer.java", "stars": "2", "class": {"name": "ClassgraphDiscoverer", "extends": null, "implements": ["Discoverer"], "modifiers": ["public", "final"]}}, {"method_name": "verbose", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "ClassgraphDiscoverer", "snippet": "  private ClassgraphDiscoverer verbose(boolean verbose) {    if (verbose) {      this.classGraph.verbose();    }    return this;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/ClassgraphDiscoverer.java", "stars": "2", "class": {"name": "ClassgraphDiscoverer", "extends": null, "implements": ["Discoverer"], "modifiers": ["public", "final"]}}, {"method_name": "enableRealtimeLogging", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void enableRealtimeLogging(boolean enableRealtimeLogging) {    if (enableRealtimeLogging) {      this.classGraph.enableRealtimeLogging();    }  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/ClassgraphDiscoverer.java", "stars": "2", "class": {"name": "ClassgraphDiscoverer", "extends": null, "implements": ["Discoverer"], "modifiers": ["public", "final"]}}, {"method_name": "createEmailMessage", "params": ["String", "String", "Collection<String>"], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage createEmailMessage(final String subject, final String mimetype,      final Collection<String> emailList) {    final EmailMessage message = this.messageCreator.createMessage();    message.addAllToAddress(emailList);    message.setMimeType(mimetype);    message.setSubject(subject);    return message;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/AbstractMailer.java", "stars": "18", "class": {"name": "AbstractMailer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAzkabanName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getAzkabanName() {    return this.azkabanName;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/AbstractMailer.java", "stars": "18", "class": {"name": "AbstractMailer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAttachmentMaxSize", "params": [], "throws": null, "modifiers": [], "return_type": "long", "snippet": "  long getAttachmentMaxSize() {    return this.attachmentMazSizeInByte;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/AbstractMailer.java", "stars": "18", "class": {"name": "AbstractMailer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMainThread", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isMainThread() {            return looper == Looper.myLooper();        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/MainThreadSupport.java", "stars": "7", "class": {"name": "AndroidHandlerMainThreadSupport", "extends": null, "implements": ["MainThreadSupport"], "modifiers": []}}, {"method_name": "createPoster", "params": ["KeventBus"], "throws": null, "modifiers": ["public"], "return_type": "Poster", "snippet": "        public Poster createPoster(KeventBus eventBus) {            return new HandlerPoster(eventBus, looper, 10);        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/MainThreadSupport.java", "stars": "7", "class": {"name": "AndroidHandlerMainThreadSupport", "extends": null, "implements": ["MainThreadSupport"], "modifiers": []}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "sign_up", "snippet": "    public static sign_up newInstance() {        sign_up fragment = new sign_up();        return fragment;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/sign_up.java", "stars": "2", "class": {"name": "sign_up", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/sign_up.java", "stars": "2", "class": {"name": "sign_up", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        final View view= inflater.inflate(R.layout.fragment_sign_up, container, false);        pbar = view.findViewById(R.id.progress);        main_sign = view.findViewById(R.id.sign_main);        sharedPreferences=getActivity().getSharedPreferences(\"torripo_login\",Context.MODE_PRIVATE);        log_in=view.findViewById(R.id.log_in);        log_in.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                getActivity().getSupportFragmentManager().beginTransaction()                        .replace(R.id.frame_layout,login.newInstance(),\"login\").                        addToBackStack(null).commit();            }        });        email_otp = view.findViewById(R.id.email_otp);        username=view.findViewById(R.id.uname);        name_of_user=view.findViewById(R.id.name_of_user);        password=view.findViewById(R.id.password);        emailofuser=view.findViewById(R.id.email_of_user);        send_otp = view.findViewById(R.id.otp_btn);        send_otp.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                nameofuser=name_of_user.getText().toString();                user_email=emailofuser.getText().toString();                if (nameofuser.isEmpty() || user_email.isEmpty())                {                    Toast.makeText(getContext(),\"Name or Email Field is empty\",Toast.LENGTH_LONG).show();                }                else                {                    if (!((MainActivity)getActivity()).isNetworkAvailable(getContext()))                    {                        Toast.makeText(getContext(),\"No Internet Connectivity\",Toast.LENGTH_LONG).show();                        getActivity().finish();                    }                    Retrofit retrofit = new Retrofit.Builder().baseUrl(APIUrl.BASE_URL).                            addConverterFactory(GsonConverterFactory.create()).build();                    APIService service = retrofit.create(APIService.class);                    Call<Result_1> call = service.send_otp(\"send_otp\",user_email,nameofuser);                    call.enqueue(new Callback<Result_1>() {                        @Override                        public void onResponse(Call<Result_1> call, Response<Result_1> response) {                            result_1 =  response.body();                            if (\"OTP Sent , Check your mail\".equals(result_1.res))                            {                                email_otp.setVisibility(View.GONE);                                Toast.makeText(getContext(),\"OTP Sent , Check your mail\",Toast.LENGTH_LONG).show();                            }                            else if (\"Email not Found\".equals(result_1.res))                            {                                Toast.makeText(getContext(),\"Email not Found\",Toast.LENGTH_LONG).show();                            }                            else                            {                                Toast.makeText(getContext(),\"Email already in use !!!\",Toast.LENGTH_LONG).show();                            }                        }                        @Override                        public void onFailure(Call<Result_1> call, Throwable t) {                            Log.e(\"Error\", t.getMessage());                        }                    });                }            }        });        signup = view.findViewById(R.id.sign_up_btn);        otpvalue = view.findViewById(R.id.OTP);        signup.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                uname = username.getText().toString();                nameofuser = name_of_user.getText().toString();                password_user = password.getText().toString();                String temp=otpvalue.getText().toString();                if (nameofuser.isEmpty() || uname.isEmpty() || password_user.isEmpty() || temp.isEmpty())                {                    Toast.makeText(getContext(),\"Username or Name or password or OTP is empty\",Toast.LENGTH_LONG).show();                }                else if(password_user.length() < 6 )                {                    Toast.makeText(getContext(),\"Password length must be more or equal to 6\",Toast.LENGTH_LONG).show();                }                else                {                    otp=Integer.parseInt(temp);                    pbar.setVisibility(View.VISIBLE);                    if (!((MainActivity)getActivity()).isNetworkAvailable(getContext()))                    {                        Toast.makeText(getContext(),\"No Internet Connectivity\",Toast.LENGTH_LONG).show();                        getActivity().finish();                    }                    Retrofit retrofit = new Retrofit.Builder().baseUrl(APIUrl.BASE_URL).                            addConverterFactory(GsonConverterFactory.create()).build();                    APIService service = retrofit.create(APIService.class);                    Call<Result_1> call = service.register_user(\"new_user\",uname,nameofuser,password_user,user_email,otp);                    call.enqueue(new Callback<Result_1>() {                        @Override                        public void onResponse(Call<Result_1> call, Response<Result_1> response) {                            result_1 =  response.body();                            InputMethodManager imm = (InputMethodManager) getContext().getSystemService(getContext().INPUT_METHOD_SERVICE);                            imm.hideSoftInputFromWindow(view.getWindowToken(),0);                            pbar.setVisibility(View.INVISIBLE);                            if (\"True\".equals(result_1.res))                            {                                SharedPreferences.Editor myEdit = sharedPreferences.edit();                                myEdit.putString(\"uname\",uname);                                myEdit.apply();                                Toast.makeText(getContext(),\"Successfully Signed Up !!\",Toast.LENGTH_LONG).show();                                getActivity().getSupportFragmentManager().beginTransaction().                                        replace(R.id.frame_layout,multiple_package.newInstance(),\"multiple_package\").                                        addToBackStack(\"multiple_package\").commit();                            }                            else if (\"Username Already is Taken\".equals(result_1.res))                            {                                Toast.makeText(getContext(),\"Username already taken\",Toast.LENGTH_LONG).show();                            }                            else                            {                                Toast.makeText(getContext(),\"User not registered\",Toast.LENGTH_LONG).show();                            }                        }                        @Override                        public void onFailure(Call<Result_1> call, Throwable t) {                            Toast.makeText(getContext(),\"Error Encountered\",Toast.LENGTH_LONG).show();                            Log.e(\"Error\", t.getMessage());                        }                    });                }            }        });        return view;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/sign_up.java", "stars": "2", "class": {"name": "sign_up", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onButtonPressed", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onButtonPressed(Uri uri) {    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/sign_up.java", "stars": "2", "class": {"name": "sign_up", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/sign_up.java", "stars": "2", "class": {"name": "sign_up", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/sign_up.java", "stars": "2", "class": {"name": "sign_up", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        faceGroupCache = new ArrayList<>();//        initCache();        executorService = Executors.newFixedThreadPool(threadPoolSize);        GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();        poolConfig.setMaxIdle(threadPoolSize);        poolConfig.setMaxTotal(threadPoolSize);        poolConfig.setMinIdle(threadPoolSize);        poolConfig.setLifo(false);        extractFaceObjectPool = new GenericObjectPool(new FaceEngineFactory(appId, sdkKey, FunctionConfiguration.builder().supportFaceDetect(true).supportFaceRecognition(true).supportAge(true).supportGender(true).build(), libPath), poolConfig);//\u5e95\u5c42\u5e93\u7b97\u6cd5\u5bf9\u8c61\u6c60        compareFaceObjectPool = new GenericObjectPool(new FaceEngineFactory(appId, sdkKey, FunctionConfiguration.builder().supportFaceRecognition(true).build(), libPath), poolConfig);//\u5e95\u5c42\u5e93\u7b97\u6cd5\u5bf9\u8c61\u6c60        loadFace();    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/service/impl/FaceEngineServiceImpl.java", "stars": "2", "class": {"name": "FaceEngineServiceImpl", "extends": null, "implements": ["FaceEngineService"], "modifiers": ["public"]}}, {"method_name": "plusHundred", "params": ["Float"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int plusHundred(Float value) {        BigDecimal target = new BigDecimal(value);        BigDecimal hundred = new BigDecimal(100f);        return target.multiply(hundred).intValue();    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/service/impl/FaceEngineServiceImpl.java", "stars": "2", "class": {"name": "FaceEngineServiceImpl", "extends": null, "implements": ["FaceEngineService"], "modifiers": ["public"]}}, {"method_name": "addFaceToCache", "params": ["File", "String"], "throws": ["InterruptedException", "FileNotFoundException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void addFaceToCache(File file, String name) throws InterruptedException, FileNotFoundException {        ImageInfo imageInfo = ImageUtil.getRGBData(new FileInputStream(file));        //\u4eba\u8138\u7279\u5f81\u83b7\u53d6        byte[] bytes = extractFaceFeature(imageInfo);        if (bytes == null) {            logger.error(name + \" \" + file.getName() + \" no face detected\");        } else {            FaceUserInfo faceUserInfo = new FaceUserInfo();            faceUserInfo.setName(name);            faceUserInfo.setFaceId(RandomUtil.randomString(10));            faceUserInfo.setFaceFeature(bytes);            this.faceGroupCache.add(faceUserInfo);            logger.info(name + \" \" + file.getName() + \" load success\");        }    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/service/impl/FaceEngineServiceImpl.java", "stars": "2", "class": {"name": "FaceEngineServiceImpl", "extends": null, "implements": ["FaceEngineService"], "modifiers": ["public"]}}, {"method_name": "detectFaces", "params": ["ImageInfo"], "throws": null, "modifiers": ["public"], "return_type": "List<FaceInfo>", "snippet": "    public List<FaceInfo> detectFaces(ImageInfo imageInfo) {        FaceEngine faceEngine = null;        try {            //\u83b7\u53d6\u5f15\u64ce\u5bf9\u8c61            faceEngine = extractFaceObjectPool.borrowObject();            //\u4eba\u8138\u68c0\u6d4b\u5f97\u5230\u4eba\u8138\u5217\u8868            List<FaceInfo> faceInfoList = new ArrayList<FaceInfo>();            //\u4eba\u8138\u68c0\u6d4b            faceEngine.detectFaces(imageInfo.getRgbData(), imageInfo.getWidth(), imageInfo.getHeight(), ImageFormat.CP_PAF_BGR24, faceInfoList);            return faceInfoList;        } catch (Exception e) {            logger.error(\"\", e);        } finally {            if (faceEngine != null) {                //\u91ca\u653e\u5f15\u64ce\u5bf9\u8c61                extractFaceObjectPool.returnObject(faceEngine);            }        }        return null;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/service/impl/FaceEngineServiceImpl.java", "stars": "2", "class": {"name": "FaceEngineServiceImpl", "extends": null, "implements": ["FaceEngineService"], "modifiers": ["public"]}}, {"method_name": "process", "params": ["ImageInfo"], "throws": null, "modifiers": ["public"], "return_type": "List<ProcessInfo>", "snippet": "    public List<ProcessInfo> process(ImageInfo imageInfo) {        FaceEngine faceEngine = null;        try {            //\u83b7\u53d6\u5f15\u64ce\u5bf9\u8c61            faceEngine = extractFaceObjectPool.borrowObject();            //\u4eba\u8138\u68c0\u6d4b\u5f97\u5230\u4eba\u8138\u5217\u8868            List<FaceInfo> faceInfoList = new ArrayList<FaceInfo>();            //\u4eba\u8138\u68c0\u6d4b            faceEngine.detectFaces(imageInfo.getRgbData(), imageInfo.getWidth(), imageInfo.getHeight(), ImageFormat.CP_PAF_BGR24, faceInfoList);            int processResult = faceEngine.process(imageInfo.getRgbData(), imageInfo.getWidth(), imageInfo.getHeight(), ImageFormat.CP_PAF_BGR24, faceInfoList, FunctionConfiguration.builder().supportAge(true).supportGender(true).build());            List<ProcessInfo> processInfoList = Lists.newLinkedList();            List<GenderInfo> genderInfoList = new ArrayList<GenderInfo>();            //\u6027\u522b\u63d0\u53d6            int genderCode = faceEngine.getGender(genderInfoList);            //\u5e74\u9f84\u63d0\u53d6            List<AgeInfo> ageInfoList = new ArrayList<AgeInfo>();            int ageCode = faceEngine.getAge(ageInfoList);            for (int i = 0; i < genderInfoList.size(); i++) {                ProcessInfo processInfo = new ProcessInfo();                processInfo.setGender(genderInfoList.get(i).getGender());                processInfo.setAge(ageInfoList.get(i).getAge());                processInfoList.add(processInfo);            }            return processInfoList;        } catch (Exception e) {            logger.error(\"\", e);        } finally {            if (faceEngine != null) {                //\u91ca\u653e\u5f15\u64ce\u5bf9\u8c61                extractFaceObjectPool.returnObject(faceEngine);            }        }        return null;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/service/impl/FaceEngineServiceImpl.java", "stars": "2", "class": {"name": "FaceEngineServiceImpl", "extends": null, "implements": ["FaceEngineService"], "modifiers": ["public"]}}, {"method_name": "extractFaceFeature", "params": ["ImageInfo"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] extractFaceFeature(ImageInfo imageInfo) throws InterruptedException {        FaceEngine faceEngine = null;        try {            //\u83b7\u53d6\u5f15\u64ce\u5bf9\u8c61            faceEngine = extractFaceObjectPool.borrowObject();            //\u4eba\u8138\u68c0\u6d4b\u5f97\u5230\u4eba\u8138\u5217\u8868            List<FaceInfo> faceInfoList = new ArrayList<FaceInfo>();            //\u4eba\u8138\u68c0\u6d4b            int i = faceEngine.detectFaces(imageInfo.getRgbData(), imageInfo.getWidth(), imageInfo.getHeight(), ImageFormat.CP_PAF_BGR24, faceInfoList);            if (CollectionUtil.isNotEmpty(faceInfoList)) {                FaceFeature faceFeature = new FaceFeature();                //\u63d0\u53d6\u4eba\u8138\u7279\u5f81                faceEngine.extractFaceFeature(imageInfo.getRgbData(), imageInfo.getWidth(), imageInfo.getHeight(), ImageFormat.CP_PAF_BGR24, faceInfoList.get(0), faceFeature);                return faceFeature.getFeatureData();            }        } catch (Exception e) {            logger.error(\"\", e);        } finally {            if (faceEngine != null) {                //\u91ca\u653e\u5f15\u64ce\u5bf9\u8c61                extractFaceObjectPool.returnObject(faceEngine);            }        }        return null;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/service/impl/FaceEngineServiceImpl.java", "stars": "2", "class": {"name": "FaceEngineServiceImpl", "extends": null, "implements": ["FaceEngineService"], "modifiers": ["public"]}}, {"method_name": "compareFaceFeature", "params": ["byte", "Integer"], "throws": ["InterruptedException", "ExecutionException"], "modifiers": ["public"], "return_type": "List<FaceUserInfo>", "snippet": "    public List<FaceUserInfo> compareFaceFeature(byte[] faceFeature, Integer groupId) throws InterruptedException, ExecutionException {        List<FaceUserInfo> resultFaceInfoList = Lists.newLinkedList();//\u8bc6\u522b\u5230\u7684\u4eba\u8138\u5217\u8868        FaceFeature targetFaceFeature = new FaceFeature();        targetFaceFeature.setFeatureData(faceFeature);        List<FaceUserInfo> faceInfoList = this.faceGroupCache;//\u4ece\u7f13\u5b58\u4e2d\u63d0\u53d6\u4eba\u8138\u5e93        List<List<FaceUserInfo>> faceUserInfoPartList = Lists.partition(faceInfoList, 1000);//\u5206\u62101000\u4e00\u7ec4\uff0c\u591a\u7ebf\u7a0b\u5904\u7406        CompletionService<List<FaceUserInfo>> completionService = new ExecutorCompletionService(executorService);        for (List<FaceUserInfo> part : faceUserInfoPartList) {            completionService.submit(new CompareFaceTask(part, targetFaceFeature));        }        for (int i = 0; i < faceUserInfoPartList.size(); i++) {            List<FaceUserInfo> faceUserInfoList = completionService.take().get();            if (CollectionUtil.isNotEmpty(faceInfoList)) {                resultFaceInfoList.addAll(faceUserInfoList);            }        }        resultFaceInfoList.sort((h1, h2) -> h2.getSimilarValue().compareTo(h1.getSimilarValue()));//\u4ece\u5927\u5230\u5c0f\u6392\u5e8f        return resultFaceInfoList;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/service/impl/FaceEngineServiceImpl.java", "stars": "2", "class": {"name": "FaceEngineServiceImpl", "extends": null, "implements": ["FaceEngineService"], "modifiers": ["public"]}}, {"method_name": "loadFace", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadFace() {        this.faceGroupCache = new ArrayList<>();        File file = new File(this.faceFilePath);        if (file.exists()) {            File[] subFiles = file.listFiles();            for (File subFile : subFiles) {                if (subFile.isDirectory() && !\"other\".equals(subFile.getName())) {                    for (File faceFile : subFile.listFiles()) {                        try {                            addFaceToCache(faceFile, subFile.getName());                        } catch (Exception e) {                            logger.error(faceFile.getName() + \" load error\");                        }                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/service/impl/FaceEngineServiceImpl.java", "stars": "2", "class": {"name": "FaceEngineServiceImpl", "extends": null, "implements": ["FaceEngineService"], "modifiers": ["public"]}}, {"method_name": "call", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "List<FaceUserInfo>", "snippet": "        public List<FaceUserInfo> call() throws Exception {            FaceEngine faceEngine = null;            List<FaceUserInfo> resultFaceInfoList = Lists.newLinkedList();//\u8bc6\u522b\u5230\u7684\u4eba\u8138\u5217\u8868            try {                faceEngine = compareFaceObjectPool.borrowObject();                for (FaceUserInfo faceUserInfo : faceUserInfoList) {                    FaceFeature sourceFaceFeature = new FaceFeature();                    sourceFaceFeature.setFeatureData(faceUserInfo.getFaceFeature());                    FaceSimilar faceSimilar = new FaceSimilar();                    faceEngine.compareFaceFeature(targetFaceFeature, sourceFaceFeature, faceSimilar);                    Integer similarValue = plusHundred(faceSimilar.getScore());//\u83b7\u53d6\u76f8\u4f3c\u503c                    if (similarValue > passRate) {//\u76f8\u4f3c\u503c\u5927\u4e8e\u914d\u7f6e\u9884\u671f\uff0c\u52a0\u5165\u5230\u8bc6\u522b\u5230\u4eba\u8138\u7684\u5217\u8868                        FaceUserInfo info = new FaceUserInfo();                        info.setName(faceUserInfo.getName());                        info.setFaceId(faceUserInfo.getFaceId());                        info.setSimilarValue(similarValue);                        resultFaceInfoList.add(info);                    }                }            } catch (Exception e) {                logger.error(\"\", e);            } finally {                if (faceEngine != null) {                    compareFaceObjectPool.returnObject(faceEngine);                }            }            return resultFaceInfoList;        }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/service/impl/FaceEngineServiceImpl.java", "stars": "2", "class": {"name": "CompareFaceTask", "extends": null, "implements": ["Callable"], "modifiers": ["private"]}}, {"method_name": "getObjectName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getObjectName() {        return objectName;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/errors/FieldErrorVM.java", "stars": "2", "class": {"name": "FieldErrorVM", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getField", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getField() {        return field;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/errors/FieldErrorVM.java", "stars": "2", "class": {"name": "FieldErrorVM", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage() {        return message;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/errors/FieldErrorVM.java", "stars": "2", "class": {"name": "FieldErrorVM", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getFrom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFrom() {        return from;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/datapersoninfo.java", "stars": "2", "class": {"name": "datapersoninfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFrom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFrom(String from) {        this.from = from;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/datapersoninfo.java", "stars": "2", "class": {"name": "datapersoninfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMoney", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMoney() {        return money;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/datapersoninfo.java", "stars": "2", "class": {"name": "datapersoninfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMoney", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMoney(String money) {        this.money = money;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/datapersoninfo.java", "stars": "2", "class": {"name": "datapersoninfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRemark", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRemark() {        return remark;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/datapersoninfo.java", "stars": "2", "class": {"name": "datapersoninfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRemark", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRemark(String remark) {        this.remark = remark;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/datapersoninfo.java", "stars": "2", "class": {"name": "datapersoninfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGiveottake", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGiveottake() {        return giveottake;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/datapersoninfo.java", "stars": "2", "class": {"name": "datapersoninfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGiveottake", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiveottake(String giveottake) {        this.giveottake = giveottake;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/datapersoninfo.java", "stars": "2", "class": {"name": "datapersoninfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImgUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImgUrl() {        return imgUrl;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImgUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImgUrl(String imgUrl) {        this.imgUrl = imgUrl;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getPrice() {        return price;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPrice(BigDecimal price) {        this.price = price;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStock", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getStock() {        return stock;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStock", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStock(Integer stock) {        this.stock = stock;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSales", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getSales() {        return sales;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSales", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSales(Integer sales) {        this.sales = sales;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPromoModel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PromoModel", "snippet": "    public PromoModel getPromoModel() {        return promoModel;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPromoModel", "params": ["PromoModel"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromoModel(PromoModel promoModel) {        this.promoModel = promoModel;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/ItemModel.java", "stars": "1", "class": {"name": "ItemModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dbInfo", "params": ["String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> dbInfo(@PathVariable(\"ds_id\") String dsId, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        List<String> dbList = mysqlMetaDbService.getDatabases(dsId);        return new Response<>().successResponse(dbList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/MySQLInfoController.java", "stars": "23", "class": {"name": "MySQLInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "tableInfo", "params": ["String", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> tableInfo( @PathVariable(\"ds_id\") String dsId,                                        @PathVariable(\"db\")String db, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        List<String>  tables = mysqlMetaDbService.getTables(dsId, db);        return new Response<>().successResponse(tables);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/MySQLInfoController.java", "stars": "23", "class": {"name": "MySQLInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "fieldInfo", "params": ["String", "String", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> fieldInfo(@PathVariable(\"ds_id\") String dsId,                                          @PathVariable(\"db\")String db,                                          @PathVariable(\"table\") String table, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        List<MetaColumnInfo> information = mysqlMetaDbService.getColumns(dsId, db, table);        return new Response<>().successResponse(information);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/MySQLInfoController.java", "stars": "23", "class": {"name": "MySQLInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["InputStream"], "throws": null, "modifiers": ["public"], "return_type": "DynamicMessage", "snippet": "    public DynamicMessage parse(InputStream inputStream) {        try {            return DynamicMessage.newBuilder(messageDescriptor)                    .mergeFrom(inputStream, ExtensionRegistryLite.getEmptyRegistry())                    .build();        } catch (IOException e) {            throw new RuntimeException(\"Unable to merge from the supplied input stream\", e);        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/DynamicMessageMarshaller.java", "stars": "3", "class": {"name": "DynamicMessageMarshaller", "extends": null, "implements": ["Marshaller"], "modifiers": ["public"]}}, {"method_name": "stream", "params": ["DynamicMessage"], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "    public InputStream stream(DynamicMessage abstractMessage) {        return abstractMessage.toByteString().newInput();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/DynamicMessageMarshaller.java", "stars": "3", "class": {"name": "DynamicMessageMarshaller", "extends": null, "implements": ["Marshaller"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)    {        final View v= inflater.inflate(R.layout.frag_home, container, false);        LinearLayout l=v.findViewById(R.id.impbtn);        spl=l.findViewById(R.id.spl);        req=l.findViewById(R.id.req);        grp=l.findViewById(R.id.cg);        final RecyclerView recycle_groups = v.findViewById(R.id.recycle_group);        // initializing variables for the group adapter (just dummy)        // todo : fetching from the database has to be done. currently using dummy data.        spl.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                AlphaAnimation buttonClick = new AlphaAnimation(1F, 0.8F);                v.startAnimation(buttonClick);                Vibrator vv = (Vibrator) getActivity().getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);                vv.vibrate(100);                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new splitbill_fragment()).commit();                getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(\"hii\").commit();                Toast.makeText(getActivity().getApplicationContext(),\"Split Bill\",Toast.LENGTH_SHORT).show();            }        });        req.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                AlphaAnimation buttonClick = new AlphaAnimation(1F, 0.8F);                v.startAnimation(buttonClick);                Vibrator vv = (Vibrator) getActivity().getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);                vv.vibrate(100);                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new Contact_Fragment()).commit();                getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(\"request\").commit();                Toast.makeText(getActivity().getApplicationContext(),\"Request\",Toast.LENGTH_SHORT).show();            }        });        grp.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                AlphaAnimation buttonClick = new AlphaAnimation(1F, 0.8F);                v.startAnimation(buttonClick);                Vibrator vv = (Vibrator) getActivity().getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);                vv.vibrate(100);                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new group_chat()).commit();                getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(\"GroupChat\").commit();                Toast.makeText(getActivity().getApplicationContext(),\"Group Chat\",Toast.LENGTH_SHORT).show();            }        });        // setting up adapter.........        Log.e(TAG, \"onCreateView: \"+getContext());        DatabaseReference db= FirebaseDatabase.getInstance().getReference(\"Users\");        SharedPreferences sf=getActivity().getSharedPreferences(\"Login data\",MODE_PRIVATE);        String s=sf.getString(\"user\",\"unable to fetch\");        db.child(s).child(\"Transactions\").child(\"take money\").addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                if(dataSnapshot!=null){                    for(DataSnapshot dd:dataSnapshot.getChildren()){                        String s=dd.getKey();                        for(DataSnapshot fg:dd.getChildren()){                            gnames.add(s);                        }                    }                }                general_profileAdapter general_profileadapter = new general_profileAdapter(getContext(),gnames);                Context ctx = getContext();                LinearLayoutManager HorizontalLayout                        = new LinearLayoutManager(                        ctx,                        LinearLayoutManager.HORIZONTAL,                        false);               // act.setAdapter(new ArrayAdapter<String>(getContext(),android.R.layout.simple_list_item_1,dat));                recycle_groups.setLayoutManager(HorizontalLayout);                recycle_groups.setAdapter(general_profileadapter);                List<String> gnames=new ArrayList<>();                final Map<String, String> data = getcontacts.dcontacts;                List<listforadapter> list_hai = new ArrayList<>();                for (String ss : data.keySet()) {                    list_hai.add(new listforadapter(ss, data.get(ss)));                    System.out.println(ss+\" \"+data.get(ss));                }                RecyclerView homecontacts=v.findViewById(R.id.conactinhome);                homecontacts.setLayoutManager(new LinearLayoutManager(getContext()));                homecontacts.setAdapter(new contactsinhomeadapter(getContext(),list_hai));            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });        return v;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/home_fragment.java", "stars": "2", "class": {"name": "home_fragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test() {        ClockReplacer clock_replacer = new ClockReplacer(7);        // Scenario: unpin six elements, i.e. add them to the replacer.        clock_replacer.unpin(1);        clock_replacer.unpin(2);        clock_replacer.unpin(3);        clock_replacer.unpin(4);        clock_replacer.unpin(5);        clock_replacer.unpin(6);        clock_replacer.unpin(1);        assertEquals(6, clock_replacer.size());        // Scenario: get three victims from the clock.        int value;        value = clock_replacer.victim();        assertEquals(1, value);        value = clock_replacer.victim();        assertEquals(2, value);        value = clock_replacer.victim();        assertEquals(3, value);        // Scenario: pin elements in the replacer.        // Note that 3 has already been victimized, so pinning 3 should have no effect.        clock_replacer.pin(3);        clock_replacer.pin(4);        assertEquals(2, clock_replacer.size());        // Scenario: unpin 4. We expect that the reference bit of 4 will be set to 1.        clock_replacer.unpin(4);        // Scenario: continue looking for victims. We expect these victims.        value = clock_replacer.victim();        assertEquals(5, value);        value = clock_replacer.victim();        assertEquals(6, value);        value = clock_replacer.victim();        assertEquals(4, value);    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/test/java/run/yuyang/db/buffer/ClockReplacerTest.java", "stars": "2", "class": {"name": "ClockReplacerTest", "extends": "TestCase", "implements": null, "modifiers": ["public"]}}, {"method_name": "renderWorldPass", "params": ["int", "float", "long", "CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void renderWorldPass(int pass, float partialTicks, long finishTimeNano, CallbackInfo ci) {        Mercury.INSTANCE.getEventManager().fireEvent(new Render3DEvent(partialTicks));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinEntityRenderer.java", "stars": "12", "class": {"name": "MixinEntityRenderer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateCameraAndRender$renderGameOverlay", "params": ["GuiIngame", "float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateCameraAndRender$renderGameOverlay(GuiIngame guiIngame, float partialTicks) {        guiIngame.renderGameOverlay(partialTicks);        Mercury.INSTANCE.getEventManager().fireEvent(new Render2DEvent(partialTicks));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinEntityRenderer.java", "stars": "12", "class": {"name": "MixinEntityRenderer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mRoot = inflater.inflate(R.layout.fragment_streamloading, container, false);        ButterKnife.bind(this, mRoot);        if (VersionUtils.isLollipop()) {            //postpone the transitions until after the view is layed out.            getActivity().postponeEnterTransition();            mRoot.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {                public boolean onPreDraw() {                    mRoot.getViewTreeObserver().removeOnPreDrawListener(this);                    getActivity().startPostponedEnterTransition();                    return true;                }            });        }        return mRoot;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        if(mPlayingExternal)            setState(State.STREAMING);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mContext = getActivity();        loadBackgroundImage();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStreamPrepared", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamPrepared(Torrent torrent) {        mCurrentTorrent = torrent;        if(TextUtils.isEmpty(mStreamInfo.getTitle())) {            StringArraySelectorDialogFragment.show(getChildFragmentManager(), R.string.select_file, mCurrentTorrent.getFileNames(), -1, new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int position) {                    mCurrentTorrent.setSelectedFileIndex(position);                    StreamLoadingFragment.super.onStreamPrepared(mCurrentTorrent);                }            });            return;        }        super.onStreamPrepared(mCurrentTorrent);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadBackgroundImage", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadBackgroundImage() {        StreamInfo info = mCallback.getStreamInformation();          /* attempt to load background image */        if (null != info) {            String url = info.getImageUrl();            if (PixelUtils.isTablet(mContext)) {                url = info.getHeaderImageUrl();            }            if (!TextUtils.isEmpty(url))                Picasso.get().load(url).error(R.color.bg).into(mBackgroundImageView);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateStatus", "params": ["StreamStatus"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateStatus(final StreamStatus status) {        if (FragmentUtil.isNotAdded(this)) return;        final DecimalFormat df = new DecimalFormat(\"#############0.00\");        ThreadUtils.runOnUiThread(new Runnable() {            @Override            public void run() {                mProgressIndicator.setIndeterminate(false);                if(!mPlayingExternal) {                    mProgressIndicator.setProgress(status.bufferProgress);                    mPrimaryTextView.setText(status.bufferProgress + \"%\");                } else {                    int progress = ((Float) status.progress).intValue();                    mProgressIndicator.setProgress(progress);                    mPrimaryTextView.setText(progress + \"%\");                }                if (status.downloadSpeed / 1024 < 1000) {                    mSecondaryTextView.setText(df.format(status.downloadSpeed / 1024) + \" KB/s\");                } else {                    mSecondaryTextView.setText(df.format(status.downloadSpeed / 1048576) + \" MB/s\");                }                mTertiaryTextView.setText(status.seeds + \" \" + getString(R.string.seeds));            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateView", "params": ["State", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateView(State state, Object extra) {        switch (state) {            case UNINITIALISED:                mTertiaryTextView.setText(null);                mPrimaryTextView.setText(null);                mSecondaryTextView.setText(null);                mProgressIndicator.setIndeterminate(true);                mProgressIndicator.setProgress(0);                break;            case ERROR:                if (null != extra && extra instanceof String)                    mPrimaryTextView.setText((String) extra);                mSecondaryTextView.setText(null);                mTertiaryTextView.setText(null);                mProgressIndicator.setIndeterminate(true);                mProgressIndicator.setProgress(0);                break;            case BUFFERING:                mPrimaryTextView.setText(R.string.starting_buffering);                mTertiaryTextView.setText(null);                mSecondaryTextView.setText(null);                mProgressIndicator.setIndeterminate(true);                mProgressIndicator.setProgress(0);                break;            case STREAMING:                if (null != extra && extra instanceof StreamStatus)                    updateStatus((StreamStatus) extra);                break;            case WAITING_SUBTITLES:                mPrimaryTextView.setText(R.string.waiting_for_subtitles);                mTertiaryTextView.setText(null);                mSecondaryTextView.setText(null);                mProgressIndicator.setIndeterminate(true);                mProgressIndicator.setProgress(0);                break;            case WAITING_TORRENT:                mPrimaryTextView.setText(R.string.waiting_torrent);                mTertiaryTextView.setText(null);                mSecondaryTextView.setText(null);                mProgressIndicator.setIndeterminate(true);                mProgressIndicator.setProgress(0);                break;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "startPlayerActivity", "params": ["String", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void startPlayerActivity(String location, int resumePosition) {        if (!FragmentUtil.isNotAdded(this) && !mPlayerStarted) {            mStreamInfo.setVideoLocation(location);            if (BeamManager.getInstance(mContext).isConnected()) {                BeamPlayerActivity.startActivity(mContext, mStreamInfo, resumePosition);            } else {                mPlayingExternal = DefaultPlayer.start(mStreamInfo.getMedia(), mStreamInfo.getSubtitleLanguage(), location);                if (!mPlayingExternal) {                    VideoPlayerActivity.startActivity(mContext, mStreamInfo, resumePosition);                }            }            if (!mPlayingExternal) {                getActivity().finish();            } else {                mStartExternalButton.setVisibility(View.VISIBLE);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "externalClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void externalClick(View v) {        DefaultPlayer.start(mStreamInfo.getMedia(), mStreamInfo.getSubtitleLanguage(), mStreamInfo.getVideoLocation());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/StreamLoadingFragment.java", "stars": "4", "class": {"name": "StreamLoadingFragment", "extends": "BaseStreamLoadingFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTiming", "params": [], "throws": null, "modifiers": ["public"], "return_type": "EventTiming", "snippet": "    public EventTiming getTiming() {        return this.timing;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/AttackEvent.java", "stars": "12", "class": {"name": "AttackEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEntity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Entity", "snippet": "    public Entity getEntity() {        return entity;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/AttackEvent.java", "stars": "12", "class": {"name": "AttackEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object other) {        if (other instanceof Subscription) {            Subscription otherSubscription = (Subscription) other;            return subscriber == otherSubscription.subscriber                    && subscriberMethod.equals(otherSubscription.subscriberMethod);        } else {            return false;        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/Subscription.java", "stars": "7", "class": {"name": "Subscription", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return subscriber.hashCode() + subscriberMethod.methodString.hashCode();    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/Subscription.java", "stars": "7", "class": {"name": "Subscription", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "processMessage", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void processMessage(MessageDto messageDto, String sendFrom);    /**     * \u6bcf\u4e00\u5e27\u7684\u66f4\u65b0\u6570\u636e \uff0817ms \u4e00\u5e27\uff0c\u6a21\u62df1\u79d260\u5e27\u5237\u65b0\u6a21\u5f0f\uff09     */    public abstract void update();    /**     * \u7528\u6237\u79bb\u5f00\u65f6\u89e6\u53d1     * @param username \u79bb\u5f00\u7684\u7528\u6237\u540d     */    public abstract void remove(String username);    /**     * \u83b7\u53d6\u7528\u6237\u5217\u8868     * @return \u7528\u6237\u5217\u8868     */    abstract List<String> getUserList();    /**     * \u7ed9\u623f\u95f4\u6240\u6709\u7528\u6237\u53d1\u9001\u6d88\u606f     */    void sendRoomMessage(Object object, MessageType messageType) {        messageService.sendMessage(new MessageDto(object, messageType, getUserList()));    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/BaseStage.java", "stars": "2", "class": {"name": "BaseStage", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "update", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void update();    /**     * \u7528\u6237\u79bb\u5f00\u65f6\u89e6\u53d1     * @param username \u79bb\u5f00\u7684\u7528\u6237\u540d     */    public abstract void remove(String username);    /**     * \u83b7\u53d6\u7528\u6237\u5217\u8868     * @return \u7528\u6237\u5217\u8868     */    abstract List<String> getUserList();    /**     * \u7ed9\u623f\u95f4\u6240\u6709\u7528\u6237\u53d1\u9001\u6d88\u606f     */    void sendRoomMessage(Object object, MessageType messageType) {        messageService.sendMessage(new MessageDto(object, messageType, getUserList()));    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/BaseStage.java", "stars": "2", "class": {"name": "BaseStage", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void remove(String username);    /**     * \u83b7\u53d6\u7528\u6237\u5217\u8868     * @return \u7528\u6237\u5217\u8868     */    abstract List<String> getUserList();    /**     * \u7ed9\u623f\u95f4\u6240\u6709\u7528\u6237\u53d1\u9001\u6d88\u606f     */    void sendRoomMessage(Object object, MessageType messageType) {        messageService.sendMessage(new MessageDto(object, messageType, getUserList()));    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/BaseStage.java", "stars": "2", "class": {"name": "BaseStage", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getUserList", "params": [], "throws": null, "modifiers": ["abstract"], "return_type": "List<String>", "snippet": "    abstract List<String> getUserList();    /**     * \u7ed9\u623f\u95f4\u6240\u6709\u7528\u6237\u53d1\u9001\u6d88\u606f     */    void sendRoomMessage(Object object, MessageType messageType) {        messageService.sendMessage(new MessageDto(object, messageType, getUserList()));    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/BaseStage.java", "stars": "2", "class": {"name": "BaseStage", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "sendRoomMessage", "params": ["Object", "MessageType"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void sendRoomMessage(Object object, MessageType messageType) {        messageService.sendMessage(new MessageDto(object, messageType, getUserList()));    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/BaseStage.java", "stars": "2", "class": {"name": "BaseStage", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "removeTankFromUserId", "params": ["String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void removeTankFromUserId(String userId) {        List<String> removeTankIds = new ArrayList<>();        for (Map.Entry<String, TankBo> kv : tankMap.entrySet()) {            if (kv.getValue().getUserId().equals(userId)) {                removeTankIds.add(kv.getKey());            }        }        for (String tankId : removeTankIds) {            removeTankFromTankId(tankId);        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/BaseStage.java", "stars": "2", "class": {"name": "BaseStage", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "removeTankFromTankId", "params": ["String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void removeTankFromTankId(String tankId) {        if (!tankMap.containsKey(tankId)) {            return;        }        TankBo tank = tankMap.get(tankId);        tankMap.remove(tank.getTankId());        sendRoomMessage(ItemDto.convert(tank), MessageType.REMOVE_TANK);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/BaseStage.java", "stars": "2", "class": {"name": "BaseStage", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return root            + \"\\n\\t\" + level1            + \"\\n\\t\\t\" + level2;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/association_nested/FolderFlatTree.java", "stars": "15", "class": {"name": "FolderFlatTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory/*    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/named_constructor_args/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    sqlSessionFactory.getConfiguration().addMapper(UseActualNameMapper.class);    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/named_constructor_args/CreateDB.sql\");*/  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/named_constructor_args/NamedConstructorArgsUseActualNameTest.java", "stars": "15", "class": {"name": "NamedConstructorArgsUseActualNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "argsByActualNames", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void argsByActualNames() {//    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {//      UseActualNameMapper mapper = sqlSession.getMapper(UseActualNameMapper.class);//      User user = mapper.mapConstructorWithoutParamAnnos(1);//      assertEquals(Integer.valueOf(1), user.getId());//      assertEquals(\"User1\", user.getName());//    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/named_constructor_args/NamedConstructorArgsUseActualNameTest.java", "stars": "15", "class": {"name": "NamedConstructorArgsUseActualNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "argsByActualNamesXml", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void argsByActualNamesXml() {//    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {//      UseActualNameMapper mapper = sqlSession.getMapper(UseActualNameMapper.class);//      User user = mapper.mapConstructorWithoutParamAnnosXml(1);//      assertEquals(Integer.valueOf(1), user.getId());//      assertEquals(\"User1\", user.getName());//    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/named_constructor_args/NamedConstructorArgsUseActualNameTest.java", "stars": "15", "class": {"name": "NamedConstructorArgsUseActualNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,AzkabanNode>", "snippet": "  public Map<String, AzkabanNode> getNodes() {    return this.nodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlow", "extends": "AzkabanNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanNode", "snippet": "  public AzkabanNode getNode(final String name) {    return this.nodes.get(name);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlow", "extends": "AzkabanNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowTrigger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FlowTrigger", "snippet": "  public FlowTrigger getFlowTrigger() {    return this.flowTrigger;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlow", "extends": "AzkabanNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "name", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanFlowBuilder", "snippet": "    public AzkabanFlowBuilder name(final String name) {      this.name = name;      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "props", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanFlowBuilder", "snippet": "    public AzkabanFlowBuilder props(final Props props) {      this.props = props;      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "condition", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanFlowBuilder", "snippet": "    public AzkabanFlowBuilder condition(final String condition) {      this.condition = condition;      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "dependsOn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanFlowBuilder", "snippet": "    public AzkabanFlowBuilder dependsOn(final List<String> dependsOn) {      this.dependsOn = dependsOn == null          ? Collections.emptyList()          : ImmutableList.copyOf(dependsOn);      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "nodes", "params": ["Collection<AzkabanNode>"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanFlowBuilder", "snippet": "    public AzkabanFlowBuilder nodes(final Collection<? extends AzkabanNode> azkabanNodes) {      final Map<String, AzkabanNode> tempNodes = new HashMap<>();      for (final AzkabanNode node : azkabanNodes) {        tempNodes.put(node.getName(), node);      }      this.nodes = ImmutableMap.copyOf(tempNodes);      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "flowTrigger", "params": ["FlowTrigger"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanFlowBuilder", "snippet": "    public AzkabanFlowBuilder flowTrigger(final FlowTrigger flowTrigger) {      this.flowTrigger = flowTrigger;      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AzkabanFlow", "snippet": "    public AzkabanFlow build() {      return new AzkabanFlow(this.name, this.props, this.condition, this.nodes, this.dependsOn, this          .flowTrigger);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java", "stars": "18", "class": {"name": "AzkabanFlowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "requestFocus", "params": ["int", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean requestFocus (int p0, android.graphics.Rect p1)\t{\t\treturn n_requestFocus (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsEditTextBase.java", "stars": "2", "class": {"name": "FormsEditTextBase", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_requestFocus", "params": ["int", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_requestFocus (int p0, android.graphics.Rect p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsEditTextBase.java", "stars": "2", "class": {"name": "FormsEditTextBase", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsEditTextBase.java", "stars": "2", "class": {"name": "FormsEditTextBase", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsEditTextBase.java", "stars": "2", "class": {"name": "FormsEditTextBase", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemOffsets", "params": ["android", "android", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void getItemOffsets (android.graphics.Rect p0, android.view.View p1, android.support.v7.widget.RecyclerView p2, android.support.v7.widget.RecyclerView.State p3)\t{\t\tn_getItemOffsets (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselSpacingItemDecoration.java", "stars": "2", "class": {"name": "CarouselSpacingItemDecoration", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemOffsets", "params": ["android", "android", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_getItemOffsets (android.graphics.Rect p0, android.view.View p1, android.support.v7.widget.RecyclerView p2, android.support.v7.widget.RecyclerView.State p3);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselSpacingItemDecoration.java", "stars": "2", "class": {"name": "CarouselSpacingItemDecoration", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselSpacingItemDecoration.java", "stars": "2", "class": {"name": "CarouselSpacingItemDecoration", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselSpacingItemDecoration.java", "stars": "2", "class": {"name": "CarouselSpacingItemDecoration", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efa\u4e00\u4e2aList\u96c6\u5408,\u5b58\u50a8\u59d3\u540d        List<String> list = new ArrayList<>();        list.add(\"\u5f20\u65e0\u5fcc\");        list.add(\"\u5468\u82b7\u82e5\");        list.add(\"\u8d75\u654f\");        list.add(\"\u5f20\u5f3a\");        list.add(\"\u5f20\u4e09\u4e30\");        //\u5bf9list\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u8fc7\u6ee4,\u53ea\u8981\u4ee5\u5f20\u5f00\u5934\u7684\u5143\u7d20,\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u7684\u96c6\u5408\u4e2d        //\u5bf9listA\u96c6\u5408\u8fdb\u884c\u8fc7\u6ee4,\u53ea\u8981\u59d3\u540d\u957f\u5ea6\u4e3a3\u7684\u4eba,\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d        //\u904d\u5386listB\u96c6\u5408        list.stream()                .filter(name->name.startsWith(\"\u5f20\"))            .filter(name->name.length()==3)            .forEach(name-> System.out.println(name));}", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo01/Stream/Demo02Stream.java", "stars": "2", "class": {"name": "Demo02Stream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(CallbackInfo ci) {        Mercury.INSTANCE.init();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinMinecraft.java", "stars": "12", "class": {"name": "MixinMinecraft", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runTick", "params": ["CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void runTick(CallbackInfo ci) {        Mercury.INSTANCE.getEventManager().fireEvent(new TickEvent());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinMinecraft.java", "stars": "12", "class": {"name": "MixinMinecraft", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startCapes", "params": ["CallbackInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startCapes(CallbackInfo ci) {        new Capes();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinMinecraft.java", "stars": "12", "class": {"name": "MixinMinecraft", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onKeyboard", "params": ["CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onKeyboard(CallbackInfo callbackInfo) {        final int i = Keyboard.getEventKey() == 0 ? Keyboard.getEventCharacter() + 256 : Keyboard.getEventKey();        if (Keyboard.getEventKeyState()) {            Mercury.INSTANCE.getEventManager().fireEvent(new KeypressEvent(i));        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinMinecraft.java", "stars": "12", "class": {"name": "MixinMinecraft", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onToggleFullscreen", "params": ["CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onToggleFullscreen(CallbackInfo info) {        final FullScreenEvent event = new FullScreenEvent(this.displayWidth, this.displayHeight);        Mercury.INSTANCE.getEventManager().fireEvent(event);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinMinecraft.java", "stars": "12", "class": {"name": "MixinMinecraft", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onResize", "params": ["int", "int", "CallbackInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResize(int width, int height, CallbackInfo callbackInfo) {        ScaledResolution scaledresolution = new ScaledResolution(Minecraft.getMinecraft());        final ResizeEvent rsevent = new ResizeEvent(scaledresolution);        Mercury.INSTANCE.getEventManager().fireEvent(rsevent);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinMinecraft.java", "stars": "12", "class": {"name": "MixinMinecraft", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadUserByUsername", "params": ["String"], "throws": ["UsernameNotFoundException"], "modifiers": ["public"], "return_type": "UserDetails", "snippet": "    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        //\u5c06\u6765\u8fde\u63a5\u6570\u636e\u5e93\u6839\u636e\u8d26\u53f7\u67e5\u8be2\u7528\u6237\u4fe1\u606f        com.okhurley.uaa.entity.User user = userMapper.selectByUsername(username);        System.out.println(user);        if(user == null){            //\u5982\u679c\u7528\u6237\u67e5\u4e0d\u5230\uff0c\u8fd4\u56denull\uff0c\u7531provider\u6765\u629b\u51fa\u5f02\u5e38            return null;        }        UserDetails userDetails = User.withUsername(username).password(user.getPassword()).authorities(\"p1\").build();        return userDetails;    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_uaa/src/main/java/com/okhurley/uaa/config/MyUserDetailsService.java", "stars": "2", "class": {"name": "MyUserDetailsService", "extends": null, "implements": ["UserDetailsService"], "modifiers": ["public"]}}, {"method_name": "getLayoutResId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutResId() {        return R.layout.activity_feedback;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/FeedBackActivity.java", "stars": "2", "class": {"name": "FeedBackActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        mFeedbackBtn = findViewById(R.id.imageview_feedback);        mVersionText = findViewById(R.id.tv_app_version);        mFeedbackEdit = findViewById(R.id.et_feedback_content);        Toolbar toolbar = findViewById(R.id.toolbar);        mToolbarTitle = findViewById(R.id.toolbar_title);        toolbar.setTitle(\"\");        mToolbarTitle.setText(R.string.upload_log_tittle);        toolbar.setNavigationOnClickListener(v -> FeedBackActivity.this.finish());        mFeedbackBtn.showOpenStatus();        mFeedbackBtn.setOnClickListener(view -> {            String message = mFeedbackEdit.getText().toString().trim();            if (TextUtils.isEmpty(message)) {                showToast(R.string.input_content_tip);                return;            }            feedback(message);        });        mVersionText.setText(FeedBackActivity.this.getString(R.string.app_version,                BuildConfig.VERSION_NAME + \"-\" + BuildConfig.VERSION_CODE));    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/FeedBackActivity.java", "stars": "2", "class": {"name": "FeedBackActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "addFiles", "params": ["List<File>", "File"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addFiles(@NonNull List<File> files, @NonNull File fileDirectory) {        if (fileDirectory.exists()) {            if (fileDirectory.isDirectory()) {                File[] listFiles = fileDirectory.listFiles();                if (listFiles == null) {                    return;                }                for (File file : listFiles) {                    if (file.exists()) {                        if (file.isDirectory()) {                            addFiles(files, file);                        } else {                            files.add(file);                        }                    }                }            } else {                files.add(fileDirectory);            }        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/FeedBackActivity.java", "stars": "2", "class": {"name": "FeedBackActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "feedback", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void feedback(String msg) {        showDialogProgress();        File fileLogs = new File(FileUtil.getLog(this));        List<File> files = new ArrayList<>();        addFiles(files, fileLogs);        FeedbackData feedbackData = new FeedbackData.Builder(Constant.FEEDBACK_CRASHLOGID,                Long.parseLong(Constant.mLocalUid), msg)                .setExternPathlist(files)                .setFeedbackStatusListener(new FeedbackData.FeedbackStatusListener() {                    @Override                    public void onFailure(@NotNull FailReason failReason) {                        dissMissDialogProgress();                        showToast(R.string.feedback_fail);                    }                    @Override                    public void onComplete() {                        dissMissDialogProgress();                        showToast(R.string.feedback_success);                        finish();                    }                    @Override                    public void onProgressChange(int i) {                    }                }).create();        Axis.Companion.getService(IFeedbackService.class).sendNewLogUploadFeedback(feedbackData);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/FeedBackActivity.java", "stars": "2", "class": {"name": "FeedBackActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/FeedBackActivity.java", "stars": "2", "class": {"name": "FeedBackActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprENUM.java", "stars": "3", "class": {"name": "ExprENUM", "extends": "ExprVALUE", "implements": null, "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/DatePickerRendererBase_1.java", "stars": "2", "class": {"name": "DatePickerRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/DatePickerRendererBase_1.java", "stars": "2", "class": {"name": "DatePickerRendererBase_1", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "enqueue", "params": ["Subscription", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enqueue(Subscription subscription, Object event) {        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);        queue.enqueue(pendingPost);        eventBus.getExecutorService().execute(this);    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/AsyncPoster.java", "stars": "7", "class": {"name": "AsyncPoster", "extends": null, "implements": ["Runnable", "Poster"], "modifiers": []}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        PendingPost pendingPost = queue.poll();        if(pendingPost == null) {            throw new IllegalStateException(\"No pending post available\");        }        eventBus.invokeSubscriber(pendingPost);    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/AsyncPoster.java", "stars": "7", "class": {"name": "AsyncPoster", "extends": null, "implements": ["Runnable", "Poster"], "modifiers": []}}, {"method_name": "detectsTheGenericTypeTraversingTheHierarchy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void detectsTheGenericTypeTraversingTheHierarchy() {    assertEquals(String.class, new CustomStringTypeHandler().getRawType());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/GenericTypeSupportedInHierarchiesTestCase.java", "stars": "15", "class": {"name": "GenericTypeSupportedInHierarchiesTestCase", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "String", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {      // do something      super.setNonNullParameter(ps, i, parameter, jdbcType);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/GenericTypeSupportedInHierarchiesTestCase.java", "stars": "15", "class": {"name": "CustomStringTypeHandler", "extends": "StringTypeHandler", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        show03();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo01/List/Demo02LinkedList.java", "stars": "2", "class": {"name": "Demo02LinkedList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show03", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show03() {        //\u521b\u5efaLinkedList\u96c6\u5408\u5bf9\u8c61        LinkedList<String> linked = new LinkedList<>();        //\u4f7f\u7528add\u65b9\u6cd5\u5f80\u96c6\u5408\u4e2d\u6dfb\u52a0\u5143\u7d20        linked.add(\"a\");        linked.add(\"b\");        linked.add(\"c\");        System.out.println(linked);//[a, b, c]        //String first = linked.removeFirst();        String first = linked.pop();        System.out.println(\"\u88ab\u79fb\u9664\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20:\"+first);        String last = linked.removeLast();        System.out.println(\"\u88ab\u79fb\u9664\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20:\"+last);        System.out.println(linked);//[b]    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo01/List/Demo02LinkedList.java", "stars": "2", "class": {"name": "Demo02LinkedList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show02() {        //\u521b\u5efaLinkedList\u96c6\u5408\u5bf9\u8c61        LinkedList<String> linked = new LinkedList<>();        //\u4f7f\u7528add\u65b9\u6cd5\u5f80\u96c6\u5408\u4e2d\u6dfb\u52a0\u5143\u7d20        linked.add(\"a\");        linked.add(\"b\");        linked.add(\"c\");        //linked.clear();//\u6e05\u7a7a\u96c6\u5408\u4e2d\u7684\u5143\u7d20 \u5728\u83b7\u53d6\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4f1a\u629b\u51faNoSuchElementException        //public boolean isEmpty()\uff1a\u5982\u679c\u5217\u8868\u4e0d\u5305\u542b\u5143\u7d20\uff0c\u5219\u8fd4\u56detrue\u3002        if(!linked.isEmpty()){            String first = linked.getFirst();            System.out.println(first);//a            String last = linked.getLast();            System.out.println(last);//c        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo01/List/Demo02LinkedList.java", "stars": "2", "class": {"name": "Demo02LinkedList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show01() {        //\u521b\u5efaLinkedList\u96c6\u5408\u5bf9\u8c61        LinkedList<String> linked = new LinkedList<>();        //\u4f7f\u7528add\u65b9\u6cd5\u5f80\u96c6\u5408\u4e2d\u6dfb\u52a0\u5143\u7d20        linked.add(\"a\");        linked.add(\"b\");        linked.add(\"c\");        System.out.println(linked);//[a, b, c]        //public void addFirst(E e):\u5c06\u6307\u5b9a\u5143\u7d20\u63d2\u5165\u6b64\u5217\u8868\u7684\u5f00\u5934\u3002        //linked.addFirst(\"www\");        linked.push(\"www\");        System.out.println(linked);//[www, a, b, c]        //public void addLast(E e):\u5c06\u6307\u5b9a\u5143\u7d20\u6dfb\u52a0\u5230\u6b64\u5217\u8868\u7684\u7ed3\u5c3e\u3002\u6b64\u65b9\u6cd5\u7b49\u6548\u4e8e add()        linked.addLast(\"com\");        System.out.println(linked);//[www, a, b, c, com]    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo01/List/Demo02LinkedList.java", "stars": "2", "class": {"name": "Demo02LinkedList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "slowRestart", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void slowRestart() throws InterruptedException {\t\tThread.sleep(5000);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-devtools/src/main/java/smoketest/devtools/MyController.java", "stars": "47572", "class": {"name": "MyController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["HttpSession"], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "\tpublic ModelAndView get(HttpSession session) {\t\tObject sessionVar = session.getAttribute(\"var\");\t\tif (sessionVar == null) {\t\t\tsessionVar = new Date();\t\t\tsession.setAttribute(\"var\", sessionVar);\t\t}\t\tModelMap model = new ModelMap(\"message\", Message.MESSAGE).addAttribute(\"sessionVar\", sessionVar);\t\treturn new ModelAndView(\"hello\", model);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-devtools/src/main/java/smoketest/devtools/MyController.java", "stars": "47572", "class": {"name": "MyController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetSetterType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testGetSetterType() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Section.class);    Assertions.assertEquals(Long.class, reflector.getSetterType(\"id\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetGetterType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testGetGetterType() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Section.class);    Assertions.assertEquals(Long.class, reflector.getGetterType(\"id\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldNotGetClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldNotGetClass() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Section.class);    Assertions.assertFalse(reflector.hasGetter(\"class\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveSetterParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveSetterParam() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Child.class);    assertEquals(String.class, reflector.getSetterType(\"id\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveParameterizedSetterParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveParameterizedSetterParam() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Child.class);    assertEquals(List.class, reflector.getSetterType(\"list\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveArraySetterParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveArraySetterParam() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Child.class);    Class<?> clazz = reflector.getSetterType(\"array\");    assertTrue(clazz.isArray());    assertEquals(String.class, clazz.getComponentType());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveGetterType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveGetterType() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Child.class);    assertEquals(String.class, reflector.getGetterType(\"id\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveSetterTypeFromPrivateField", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveSetterTypeFromPrivateField() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Child.class);    assertEquals(String.class, reflector.getSetterType(\"fld\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveGetterTypeFromPublicField", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveGetterTypeFromPublicField() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Child.class);    assertEquals(String.class, reflector.getGetterType(\"pubFld\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveParameterizedGetterType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveParameterizedGetterType() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Child.class);    assertEquals(List.class, reflector.getGetterType(\"list\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveArrayGetterType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveArrayGetterType() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Child.class);    Class<?> clazz = reflector.getGetterType(\"array\");    assertTrue(clazz.isArray());    assertEquals(String.class, clazz.getComponentType());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResoleveReadonlySetterWithOverload", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResoleveReadonlySetterWithOverload() {    class BeanClass implements BeanInterface<String> {      @Override      public void setId(String id) {        // Do nothing      }    }    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(BeanClass.class);    assertEquals(String.class, reflector.getSetterType(\"id\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSettersWithUnrelatedArgTypesThrowException", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSettersWithUnrelatedArgTypesThrowException() throws Exception {    @SuppressWarnings(\"unused\")    class BeanClass {      public void setProp1(String arg) {}      public void setProp2(String arg) {}      public void setProp2(Integer arg) {}      public void setProp2(boolean arg) {}    }    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(BeanClass.class);    List<String> setableProps = Arrays.asList(reflector.getSetablePropertyNames());    assertTrue(setableProps.contains(\"prop1\"));    assertTrue(setableProps.contains(\"prop2\"));    assertEquals(\"prop1\", reflector.findPropertyName(\"PROP1\"));    assertEquals(\"prop2\", reflector.findPropertyName(\"PROP2\"));    assertEquals(String.class, reflector.getSetterType(\"prop1\"));    assertNotNull(reflector.getSetInvoker(\"prop1\"));    Class<?> paramType = reflector.getSetterType(\"prop2\");    assertTrue(String.class.equals(paramType) || Integer.class.equals(paramType));    Invoker ambiguousInvoker = reflector.getSetInvoker(\"prop2\");    Object[] param = String.class.equals(paramType)? new String[]{\"x\"} : new Integer[]{1};    when(() -> ambiguousInvoker.invoke(new BeanClass(), param));    then(caughtException()).isInstanceOf(ReflectionException.class)        .hasMessageMatching(            \"Ambiguous setters defined for property 'prop2' in class '\" + BeanClass.class.getName().replace(\"$\", \"\\\\$\")                + \"' with types '(java.lang.String|java.lang.Integer|boolean)' and '(java.lang.String|java.lang.Integer|boolean)'\\\\.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldTwoGettersForNonBooleanPropertyThrowException", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldTwoGettersForNonBooleanPropertyThrowException() throws Exception {    @SuppressWarnings(\"unused\")    class BeanClass {      public Integer getProp1() {return 1;}      public int getProp2() {return 0;}      public int isProp2() {return 0;}    }    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(BeanClass.class);    List<String> getableProps = Arrays.asList(reflector.getGetablePropertyNames());    assertTrue(getableProps.contains(\"prop1\"));    assertTrue(getableProps.contains(\"prop2\"));    assertEquals(\"prop1\", reflector.findPropertyName(\"PROP1\"));    assertEquals(\"prop2\", reflector.findPropertyName(\"PROP2\"));    assertEquals(Integer.class, reflector.getGetterType(\"prop1\"));    Invoker getInvoker = reflector.getGetInvoker(\"prop1\");    assertEquals(Integer.valueOf(1), getInvoker.invoke(new BeanClass(), null));    Class<?> paramType = reflector.getGetterType(\"prop2\");    assertEquals(int.class, paramType);    Invoker ambiguousInvoker = reflector.getGetInvoker(\"prop2\");    when(() -> ambiguousInvoker.invoke(new BeanClass(), new Integer[] {1}));    then(caughtException()).isInstanceOf(ReflectionException.class)        .hasMessageContaining(\"Illegal overloaded getter method with ambiguous type for property 'prop2' in class '\"            + BeanClass.class.getName()            + \"'. This breaks the JavaBeans specification and can cause unpredictable results.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldTwoGettersWithDifferentTypesThrowException", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldTwoGettersWithDifferentTypesThrowException() throws Exception {    @SuppressWarnings(\"unused\")    class BeanClass {      public Integer getProp1() {return 1;}      public Integer getProp2() {return 1;}      public boolean isProp2() {return false;}    }    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(BeanClass.class);    List<String> getableProps = Arrays.asList(reflector.getGetablePropertyNames());    assertTrue(getableProps.contains(\"prop1\"));    assertTrue(getableProps.contains(\"prop2\"));    assertEquals(\"prop1\", reflector.findPropertyName(\"PROP1\"));    assertEquals(\"prop2\", reflector.findPropertyName(\"PROP2\"));    assertEquals(Integer.class, reflector.getGetterType(\"prop1\"));    Invoker getInvoker = reflector.getGetInvoker(\"prop1\");    assertEquals(Integer.valueOf(1), getInvoker.invoke(new BeanClass(), null));    Class<?> returnType = reflector.getGetterType(\"prop2\");    assertTrue(Integer.class.equals(returnType) || boolean.class.equals(returnType));    Invoker ambiguousInvoker = reflector.getGetInvoker(\"prop2\");    when(() -> ambiguousInvoker.invoke(new BeanClass(), null));    then(caughtException()).isInstanceOf(ReflectionException.class)        .hasMessageContaining(\"Illegal overloaded getter method with ambiguous type for property 'prop2' in class '\"            + BeanClass.class.getName()            + \"'. This breaks the JavaBeans specification and can cause unpredictable results.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAllowTwoBooleanGetters", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldAllowTwoBooleanGetters() throws Exception {    @SuppressWarnings(\"unused\")    class Bean {      // JavaBean Spec allows this (see #906)      public boolean isBool() {return true;}      public boolean getBool() {return false;}      public void setBool(boolean bool) {}    }    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Bean.class);    assertTrue((Boolean)reflector.getGetInvoker(\"bool\").invoke(new Bean(), new Byte[0]));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldIgnoreBestMatchSetterIfGetterIsAmbiguous", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldIgnoreBestMatchSetterIfGetterIsAmbiguous() throws Exception {    @SuppressWarnings(\"unused\")    class Bean {      public Integer isBool() {return Integer.valueOf(1);}      public Integer getBool() {return Integer.valueOf(2);}      public void setBool(boolean bool) {}      public void setBool(Integer bool) {}    }    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    Reflector reflector = reflectorFactory.findForClass(Bean.class);    Class<?> paramType = reflector.getSetterType(\"bool\");    Object[] param = boolean.class.equals(paramType) ? new Boolean[] { true } : new Integer[] { 1 };    Invoker ambiguousInvoker = reflector.getSetInvoker(\"bool\");    when(() -> ambiguousInvoker.invoke(new Bean(), param));    then(caughtException()).isInstanceOf(ReflectionException.class)        .hasMessageMatching(            \"Ambiguous setters defined for property 'bool' in class '\" + Bean.class.getName().replace(\"$\", \"\\\\$\")                + \"' with types '(java.lang.Integer|boolean)' and '(java.lang.Integer|boolean)'\\\\.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "ReflectorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "AbstractEntity", "extends": null, "implements": ["Entity"], "modifiers": ["static", "abstract"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {      this.id = id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "AbstractEntity", "extends": null, "implements": ["Entity"], "modifiers": ["static", "abstract"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getId() {      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "abstract"]}}, {"method_name": "setId", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(T id) {      this.id = id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "abstract"]}}, {"method_name": "getList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public List<T> getList() {      return list;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "abstract"]}}, {"method_name": "setList", "params": ["List<T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setList(List<T> list) {      this.list = list;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "abstract"]}}, {"method_name": "getArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T[] getArray() {      return array;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "abstract"]}}, {"method_name": "setArray", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setArray(T[] array) {      this.array = array;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "abstract"]}}, {"method_name": "getFld", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getFld() {      return fld;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "abstract"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setId(String id) {        // Do nothing      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": ["BeanInterface"], "modifiers": []}}, {"method_name": "setProp1", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setProp1(String arg) {}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setProp2", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setProp2(String arg) {}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setProp2", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setProp2(Integer arg) {}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setProp2", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setProp2(boolean arg) {}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getProp1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "      public Integer getProp1() {return 1;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getProp2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "      public int getProp2() {return 0;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isProp2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "      public int isProp2() {return 0;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getProp1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "      public Integer getProp1() {return 1;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getProp2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "      public Integer getProp2() {return 1;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isProp2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "      public boolean isProp2() {return false;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "BeanClass", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isBool", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "      public boolean isBool() {return true;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getBool", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "      public boolean getBool() {return false;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setBool", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setBool(boolean bool) {}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isBool", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "      public Integer isBool() {return Integer.valueOf(1);}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getBool", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "      public Integer getBool() {return Integer.valueOf(2);}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setBool", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setBool(boolean bool) {}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setBool", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setBool(Integer bool) {}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ReflectorTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Fragment", "snippet": "\tpublic Fragment getItem(int position) {\t\treturn fragments.get(position);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ViewPagerDemo/src/pl/looksok/viewpagerdemo/MyPagerAdapter.java", "stars": "74", "class": {"name": "MyPagerAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCount() {\t\treturn fragments.size();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ViewPagerDemo/src/pl/looksok/viewpagerdemo/MyPagerAdapter.java", "stars": "74", "class": {"name": "MyPagerAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onLocalDescription", "params": ["SessionDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onLocalDescription(SessionDescription sdp) {    Log.d(TAG, \"LocalSDP type: \" + sdp.type);    synchronized (localSdpEvent) {      localSdp = sdp;      localSdpEvent.notifyAll();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "onIceCandidate", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onIceCandidate(final IceCandidate candidate) {    synchronized (iceCandidateEvent) {      Log.d(TAG, \"IceCandidate #\" + iceCandidates.size() + \" : \" + candidate.toString());      if (loopback) {        // Loopback local ICE candidate in a separate thread to avoid adding        // remote ICE candidate in a local ICE candidate callback.        signalingExecutor.execute(new Runnable() {          @Override          public void run() {            pcClient.addRemoteIceCandidate(candidate);          }        });      }      iceCandidates.add(candidate);      iceCandidateEvent.notifyAll();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "onIceCandidatesRemoved", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onIceCandidatesRemoved(final IceCandidate[] candidates) {    // TODO(honghaiz): Add this for tests.  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "onIceConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onIceConnected() {    Log.d(TAG, \"ICE Connected\");    synchronized (iceConnectedEvent) {      isIceConnected = true;      iceConnectedEvent.notifyAll();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "onIceDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onIceDisconnected() {    Log.d(TAG, \"ICE Disconnected\");    synchronized (iceConnectedEvent) {      isIceConnected = false;      iceConnectedEvent.notifyAll();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "onConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onConnected() {    Log.d(TAG, \"DTLS Connected\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "onDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onDisconnected() {    Log.d(TAG, \"DTLS Disconnected\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "onPeerConnectionClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onPeerConnectionClosed() {    Log.d(TAG, \"PeerConnection closed\");    synchronized (closeEvent) {      isClosed = true;      closeEvent.notifyAll();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "onPeerConnectionError", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onPeerConnectionError(String description) {    fail(\"PC Error: \" + description);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "onPeerConnectionStatsReady", "params": ["StatsReport"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onPeerConnectionStatsReady(StatsReport[] reports) {}", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "waitForLocalSDP", "params": ["int"], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean waitForLocalSDP(int timeoutMs) throws InterruptedException {    synchronized (localSdpEvent) {      final long endTimeMs = System.currentTimeMillis() + timeoutMs;      while (localSdp == null) {        final long waitTimeMs = endTimeMs - System.currentTimeMillis();        if (waitTimeMs < 0) {          return false;        }        localSdpEvent.wait(waitTimeMs);      }      return true;    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "waitForIceCandidates", "params": ["int"], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean waitForIceCandidates(int timeoutMs) throws InterruptedException {    synchronized (iceCandidateEvent) {      final long endTimeMs = System.currentTimeMillis() + timeoutMs;      while (iceCandidates.size() == 0) {        final long waitTimeMs = endTimeMs - System.currentTimeMillis();        if (waitTimeMs < 0) {          return false;        }        iceCandidateEvent.wait(timeoutMs);      }      return true;    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "waitForIceConnected", "params": ["int"], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean waitForIceConnected(int timeoutMs) throws InterruptedException {    synchronized (iceConnectedEvent) {      final long endTimeMs = System.currentTimeMillis() + timeoutMs;      while (!isIceConnected) {        final long waitTimeMs = endTimeMs - System.currentTimeMillis();        if (waitTimeMs < 0) {          Log.e(TAG, \"ICE connection failure\");          return false;        }        iceConnectedEvent.wait(timeoutMs);      }      return true;    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "waitForPeerConnectionClosed", "params": ["int"], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean waitForPeerConnectionClosed(int timeoutMs) throws InterruptedException {    synchronized (closeEvent) {      final long endTimeMs = System.currentTimeMillis() + timeoutMs;      while (!isClosed) {        final long waitTimeMs = endTimeMs - System.currentTimeMillis();        if (waitTimeMs < 0) {          return false;        }        closeEvent.wait(timeoutMs);      }      return true;    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "createPeerConnectionClient", "params": ["MockSink", "MockSink", "PeerConnectionParameters", "VideoCapturer"], "throws": null, "modifiers": [], "return_type": "PeerConnectionClient", "snippet": "  PeerConnectionClient createPeerConnectionClient(MockSink localRenderer, MockSink remoteRenderer,      PeerConnectionParameters peerConnectionParameters, VideoCapturer videoCapturer) {    List<PeerConnection.IceServer> iceServers = new ArrayList<>();    SignalingParameters signalingParameters =        new SignalingParameters(iceServers, true, // iceServers, initiator.            null, null, null, // clientId, wssUrl, wssPostUrl.            null, null); // offerSdp, iceCandidates.    final EglBase eglBase = EglBase.create();    PeerConnectionClient client =        new PeerConnectionClient(InstrumentationRegistry.getTargetContext(), eglBase,            peerConnectionParameters, this /* PeerConnectionEvents */);    PeerConnectionFactory.Options options = new PeerConnectionFactory.Options();    options.networkIgnoreMask = 0;    options.disableNetworkMonitor = true;    client.createPeerConnectionFactory(options);    client.createPeerConnection(localRenderer, remoteRenderer, videoCapturer, signalingParameters);    client.createOffer();    return client;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "createParametersForAudioCall", "params": [], "throws": null, "modifiers": ["private"], "return_type": "PeerConnectionParameters", "snippet": "  private PeerConnectionParameters createParametersForAudioCall() {    return new PeerConnectionParameters(false, /* videoCallEnabled */        true, /* loopback */        false, /* tracing */        // Video codec parameters.        0, /* videoWidth */        0, /* videoHeight */        0, /* videoFps */        0, /* videoStartBitrate */        \"\", /* videoCodec */        true, /* videoCodecHwAcceleration */        false, /* videoFlexfecEnabled */        // Audio codec parameters.        0, /* audioStartBitrate */        \"OPUS\", /* audioCodec */        false, /* noAudioProcessing */        false, /* aecDump */        false, /* saveInputAudioToFile */        false /* useOpenSLES */, false /* disableBuiltInAEC */, false /* disableBuiltInAGC */,        false /* disableBuiltInNS */, false /* disableWebRtcAGC */, false /* enableRtcEventLog */,        null /* dataChannelParameters */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "createCameraCapturer", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "VideoCapturer", "snippet": "  private VideoCapturer createCameraCapturer(boolean captureToTexture) {    final boolean useCamera2 = captureToTexture        && Camera2Enumerator.isSupported(InstrumentationRegistry.getTargetContext());    CameraEnumerator enumerator;    if (useCamera2) {      enumerator = new Camera2Enumerator(InstrumentationRegistry.getTargetContext());    } else {      enumerator = new Camera1Enumerator(captureToTexture);    }    String deviceName = enumerator.getDeviceNames()[0];    return enumerator.createCapturer(deviceName, null);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "createParametersForVideoCall", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "PeerConnectionParameters", "snippet": "  private PeerConnectionParameters createParametersForVideoCall(String videoCodec) {    return new PeerConnectionParameters(true, /* videoCallEnabled */        true, /* loopback */        false, /* tracing */        // Video codec parameters.        0, /* videoWidth */        0, /* videoHeight */        0, /* videoFps */        0, /* videoStartBitrate */        videoCodec, /* videoCodec */        true, /* videoCodecHwAcceleration */        false, /* videoFlexfecEnabled */        // Audio codec parameters.        0, /* audioStartBitrate */        \"OPUS\", /* audioCodec */        false, /* noAudioProcessing */        false, /* aecDump */        false, /* saveInputAudioToFile */        false /* useOpenSLES */, false /* disableBuiltInAEC */, false /* disableBuiltInAGC */,        false /* disableBuiltInNS */, false /* disableWebRtcAGC */, false /* enableRtcEventLog */,        null /* dataChannelParameters */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUp() {    signalingExecutor = Executors.newSingleThreadExecutor();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "tearDown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void tearDown() {    signalingExecutor.shutdown();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testSetLocalOfferMakesVideoFlowLocally", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testSetLocalOfferMakesVideoFlowLocally() throws InterruptedException {    Log.d(TAG, \"testSetLocalOfferMakesVideoFlowLocally\");    MockSink localRenderer = new MockSink(EXPECTED_VIDEO_FRAMES, LOCAL_RENDERER_NAME);    pcClient = createPeerConnectionClient(localRenderer,        new MockSink(/* expectedFrames= */ 0, /* rendererName= */ null),        createParametersForVideoCall(VIDEO_CODEC_VP8),        createCameraCapturer(false /* captureToTexture */));    // Wait for local SDP and ice candidates set events.    assertTrue(\"Local SDP was not set.\", waitForLocalSDP(WAIT_TIMEOUT));    assertTrue(\"ICE candidates were not generated.\", waitForIceCandidates(WAIT_TIMEOUT));    // Check that local video frames were rendered.    assertTrue(        \"Local video frames were not rendered.\", localRenderer.waitForFramesRendered(WAIT_TIMEOUT));    pcClient.close();    assertTrue(        \"PeerConnection close event was not received.\", waitForPeerConnectionClosed(WAIT_TIMEOUT));    Log.d(TAG, \"testSetLocalOfferMakesVideoFlowLocally Done.\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "doLoopbackTest", "params": ["PeerConnectionParameters", "VideoCapturer", "boolean"], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void doLoopbackTest(PeerConnectionParameters parameters, VideoCapturer videoCapturer,      boolean decodeToTexture) throws InterruptedException {    loopback = true;    MockSink localRenderer = null;    MockSink remoteRenderer = null;    if (parameters.videoCallEnabled) {      Log.d(TAG, \"testLoopback for video \" + parameters.videoCodec);      localRenderer = new MockSink(EXPECTED_VIDEO_FRAMES, LOCAL_RENDERER_NAME);      remoteRenderer = new MockSink(EXPECTED_VIDEO_FRAMES, REMOTE_RENDERER_NAME);    } else {      Log.d(TAG, \"testLoopback for audio.\");    }    pcClient = createPeerConnectionClient(localRenderer, remoteRenderer, parameters, videoCapturer);    // Wait for local SDP, rename it to answer and set as remote SDP.    assertTrue(\"Local SDP was not set.\", waitForLocalSDP(WAIT_TIMEOUT));    SessionDescription remoteSdp = new SessionDescription(        SessionDescription.Type.fromCanonicalForm(\"answer\"), localSdp.description);    pcClient.setRemoteDescription(remoteSdp);    // Wait for ICE connection.    assertTrue(\"ICE connection failure.\", waitForIceConnected(ICE_CONNECTION_WAIT_TIMEOUT));    if (parameters.videoCallEnabled) {      // Check that local and remote video frames were rendered.      assertTrue(\"Local video frames were not rendered.\",          localRenderer.waitForFramesRendered(WAIT_TIMEOUT));      assertTrue(\"Remote video frames were not rendered.\",          remoteRenderer.waitForFramesRendered(WAIT_TIMEOUT));    } else {      // For audio just sleep for 1 sec.      // TODO(glaznev): check how we can detect that remote audio was rendered.      Thread.sleep(AUDIO_RUN_TIMEOUT);    }    pcClient.close();    assertTrue(waitForPeerConnectionClosed(WAIT_TIMEOUT));    Log.d(TAG, \"testLoopback done.\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testLoopbackAudio", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLoopbackAudio() throws InterruptedException {    doLoopbackTest(createParametersForAudioCall(), null, false /* decodeToTexture */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testLoopbackVp8", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLoopbackVp8() throws InterruptedException {    doLoopbackTest(createParametersForVideoCall(VIDEO_CODEC_VP8),        createCameraCapturer(false /* captureToTexture */), false /* decodeToTexture */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testLoopbackVp9", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLoopbackVp9() throws InterruptedException {    doLoopbackTest(createParametersForVideoCall(VIDEO_CODEC_VP9),        createCameraCapturer(false /* captureToTexture */), false /* decodeToTexture */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testLoopbackH264", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLoopbackH264() throws InterruptedException {    doLoopbackTest(createParametersForVideoCall(VIDEO_CODEC_H264),        createCameraCapturer(false /* captureToTexture */), false /* decodeToTexture */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testLoopbackVp8DecodeToTexture", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLoopbackVp8DecodeToTexture() throws InterruptedException {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {      Log.i(TAG, \"Decode to textures is not supported, requires SDK version 19.\");      return;    }    doLoopbackTest(createParametersForVideoCall(VIDEO_CODEC_VP8),        createCameraCapturer(false /* captureToTexture */), true /* decodeToTexture */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testLoopbackVp9DecodeToTexture", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLoopbackVp9DecodeToTexture() throws InterruptedException {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {      Log.i(TAG, \"Decode to textures is not supported, requires SDK version 19.\");      return;    }    doLoopbackTest(createParametersForVideoCall(VIDEO_CODEC_VP9),        createCameraCapturer(false /* captureToTexture */), true /* decodeToTexture */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testLoopbackH264DecodeToTexture", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLoopbackH264DecodeToTexture() throws InterruptedException {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {      Log.i(TAG, \"Decode to textures is not supported, requires SDK version 19.\");      return;    }    doLoopbackTest(createParametersForVideoCall(VIDEO_CODEC_H264),        createCameraCapturer(false /* captureToTexture */), true /* decodeToTexture */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testLoopbackVp8CaptureToTexture", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLoopbackVp8CaptureToTexture() throws InterruptedException {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {      Log.i(TAG, \"Encode to textures is not supported. Requires SDK version 19\");      return;    }    doLoopbackTest(createParametersForVideoCall(VIDEO_CODEC_VP8),        createCameraCapturer(true /* captureToTexture */), true /* decodeToTexture */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testLoopbackH264CaptureToTexture", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLoopbackH264CaptureToTexture() throws InterruptedException {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {      Log.i(TAG, \"Encode to textures is not supported. Requires KITKAT\");      return;    }    doLoopbackTest(createParametersForVideoCall(VIDEO_CODEC_H264),        createCameraCapturer(true /* captureToTexture */), true /* decodeToTexture */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testCameraSwitch", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testCameraSwitch() throws InterruptedException {    Log.d(TAG, \"testCameraSwitch\");    loopback = true;    MockSink localRenderer = new MockSink(EXPECTED_VIDEO_FRAMES, LOCAL_RENDERER_NAME);    MockSink remoteRenderer = new MockSink(EXPECTED_VIDEO_FRAMES, REMOTE_RENDERER_NAME);    pcClient = createPeerConnectionClient(localRenderer, remoteRenderer,        createParametersForVideoCall(VIDEO_CODEC_VP8),        createCameraCapturer(false /* captureToTexture */));    // Wait for local SDP, rename it to answer and set as remote SDP.    assertTrue(\"Local SDP was not set.\", waitForLocalSDP(WAIT_TIMEOUT));    SessionDescription remoteSdp = new SessionDescription(        SessionDescription.Type.fromCanonicalForm(\"answer\"), localSdp.description);    pcClient.setRemoteDescription(remoteSdp);    // Wait for ICE connection.    assertTrue(\"ICE connection failure.\", waitForIceConnected(ICE_CONNECTION_WAIT_TIMEOUT));    // Check that local and remote video frames were rendered.    assertTrue(\"Local video frames were not rendered before camera switch.\",        localRenderer.waitForFramesRendered(WAIT_TIMEOUT));    assertTrue(\"Remote video frames were not rendered before camera switch.\",        remoteRenderer.waitForFramesRendered(WAIT_TIMEOUT));    for (int i = 0; i < CAMERA_SWITCH_ATTEMPTS; i++) {      // Try to switch camera      pcClient.switchCamera();      // Reset video renders and check that local and remote video frames      // were rendered after camera switch.      localRenderer.reset(EXPECTED_VIDEO_FRAMES);      remoteRenderer.reset(EXPECTED_VIDEO_FRAMES);      assertTrue(\"Local video frames were not rendered after camera switch.\",          localRenderer.waitForFramesRendered(WAIT_TIMEOUT));      assertTrue(\"Remote video frames were not rendered after camera switch.\",          remoteRenderer.waitForFramesRendered(WAIT_TIMEOUT));    }    pcClient.close();    assertTrue(waitForPeerConnectionClosed(WAIT_TIMEOUT));    Log.d(TAG, \"testCameraSwitch done.\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testVideoSourceRestart", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testVideoSourceRestart() throws InterruptedException {    Log.d(TAG, \"testVideoSourceRestart\");    loopback = true;    MockSink localRenderer = new MockSink(EXPECTED_VIDEO_FRAMES, LOCAL_RENDERER_NAME);    MockSink remoteRenderer = new MockSink(EXPECTED_VIDEO_FRAMES, REMOTE_RENDERER_NAME);    pcClient = createPeerConnectionClient(localRenderer, remoteRenderer,        createParametersForVideoCall(VIDEO_CODEC_VP8),        createCameraCapturer(false /* captureToTexture */));    // Wait for local SDP, rename it to answer and set as remote SDP.    assertTrue(\"Local SDP was not set.\", waitForLocalSDP(WAIT_TIMEOUT));    SessionDescription remoteSdp = new SessionDescription(        SessionDescription.Type.fromCanonicalForm(\"answer\"), localSdp.description);    pcClient.setRemoteDescription(remoteSdp);    // Wait for ICE connection.    assertTrue(\"ICE connection failure.\", waitForIceConnected(ICE_CONNECTION_WAIT_TIMEOUT));    // Check that local and remote video frames were rendered.    assertTrue(\"Local video frames were not rendered before video restart.\",        localRenderer.waitForFramesRendered(WAIT_TIMEOUT));    assertTrue(\"Remote video frames were not rendered before video restart.\",        remoteRenderer.waitForFramesRendered(WAIT_TIMEOUT));    // Stop and then start video source a few times.    for (int i = 0; i < VIDEO_RESTART_ATTEMPTS; i++) {      pcClient.stopVideoSource();      Thread.sleep(VIDEO_RESTART_TIMEOUT);      pcClient.startVideoSource();      // Reset video renders and check that local and remote video frames      // were rendered after video restart.      localRenderer.reset(EXPECTED_VIDEO_FRAMES);      remoteRenderer.reset(EXPECTED_VIDEO_FRAMES);      assertTrue(\"Local video frames were not rendered after video restart.\",          localRenderer.waitForFramesRendered(WAIT_TIMEOUT));      assertTrue(\"Remote video frames were not rendered after video restart.\",          remoteRenderer.waitForFramesRendered(WAIT_TIMEOUT));    }    pcClient.close();    assertTrue(waitForPeerConnectionClosed(WAIT_TIMEOUT));    Log.d(TAG, \"testVideoSourceRestart done.\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "testCaptureFormatChange", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testCaptureFormatChange() throws InterruptedException {    Log.d(TAG, \"testCaptureFormatChange\");    loopback = true;    MockSink localRenderer = new MockSink(EXPECTED_VIDEO_FRAMES, LOCAL_RENDERER_NAME);    MockSink remoteRenderer = new MockSink(EXPECTED_VIDEO_FRAMES, REMOTE_RENDERER_NAME);    pcClient = createPeerConnectionClient(localRenderer, remoteRenderer,        createParametersForVideoCall(VIDEO_CODEC_VP8),        createCameraCapturer(false /* captureToTexture */));    // Wait for local SDP, rename it to answer and set as remote SDP.    assertTrue(\"Local SDP was not set.\", waitForLocalSDP(WAIT_TIMEOUT));    SessionDescription remoteSdp = new SessionDescription(        SessionDescription.Type.fromCanonicalForm(\"answer\"), localSdp.description);    pcClient.setRemoteDescription(remoteSdp);    // Wait for ICE connection.    assertTrue(\"ICE connection failure.\", waitForIceConnected(ICE_CONNECTION_WAIT_TIMEOUT));    // Check that local and remote video frames were rendered.    assertTrue(\"Local video frames were not rendered before camera resolution change.\",        localRenderer.waitForFramesRendered(WAIT_TIMEOUT));    assertTrue(\"Remote video frames were not rendered before camera resolution change.\",        remoteRenderer.waitForFramesRendered(WAIT_TIMEOUT));    // Change capture output format a few times.    for (int i = 0; i < 2 * CAPTURE_FORMAT_CHANGE_ATTEMPTS; i++) {      if (i % 2 == 0) {        pcClient.changeCaptureFormat(WIDTH_VGA, HEIGHT_VGA, MAX_VIDEO_FPS);      } else {        pcClient.changeCaptureFormat(WIDTH_QVGA, HEIGHT_QVGA, MAX_VIDEO_FPS);      }      // Reset video renders and check that local and remote video frames      // were rendered after capture format change.      localRenderer.reset(EXPECTED_VIDEO_FRAMES);      remoteRenderer.reset(EXPECTED_VIDEO_FRAMES);      assertTrue(\"Local video frames were not rendered after capture format change.\",          localRenderer.waitForFramesRendered(WAIT_TIMEOUT));      assertTrue(\"Remote video frames were not rendered after capture format change.\",          remoteRenderer.waitForFramesRendered(WAIT_TIMEOUT));    }    pcClient.close();    assertTrue(waitForPeerConnectionClosed(WAIT_TIMEOUT));    Log.d(TAG, \"testCaptureFormatChange done.\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "PeerConnectionClientTest", "extends": null, "implements": ["PeerConnectionEvents"], "modifiers": ["public"]}}, {"method_name": "reset", "params": ["int"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void reset(int expectedFrames) {      renderFrameCalled = false;      doneRendering = new CountDownLatch(expectedFrames);    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "MockSink", "extends": null, "implements": ["VideoSink"], "modifiers": ["private", "static"]}}, {"method_name": "onFrame", "params": ["VideoFrame"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void onFrame(VideoFrame frame) {      if (!renderFrameCalled) {        if (rendererName != null) {          Log.d(TAG,              rendererName + \" render frame: \" + frame.getRotatedWidth() + \" x \"                  + frame.getRotatedHeight());        } else {          Log.d(TAG, \"Render frame: \" + frame.getRotatedWidth() + \" x \" + frame.getRotatedHeight());        }      }      renderFrameCalled = true;      doneRendering.countDown();    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "MockSink", "extends": null, "implements": ["VideoSink"], "modifiers": ["private", "static"]}}, {"method_name": "waitForFramesRendered", "params": ["int"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean waitForFramesRendered(int timeoutMs) throws InterruptedException {      doneRendering.await(timeoutMs, TimeUnit.MILLISECONDS);      return (doneRendering.getCount() <= 0);    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/androidTest/java/org/appspot/apprtc/test/PeerConnectionClientTest.java", "stars": "2", "class": {"name": "MockSink", "extends": null, "implements": ["VideoSink"], "modifiers": ["private", "static"]}}, {"method_name": "getSubmitUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSubmitUser() {        if (StringUtils.isEmpty(getJobProps().get(LinkisJobTypeConf.FLOW_SUBMIT_USER))){            return getJobProps().get(LinkisJobTypeConf.PROXY_USER);        }        return getJobProps().get(LinkisJobTypeConf.FLOW_SUBMIT_USER);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanAppJointLinkisJob.java", "stars": "18", "class": {"name": "AzkabanAppJointLinkisJob", "extends": "AbstractAppJointLinkisJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUser() {        return getJobProps().get(LinkisJobTypeConf.PROXY_USER);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanAppJointLinkisJob.java", "stars": "18", "class": {"name": "AzkabanAppJointLinkisJob", "extends": "AbstractAppJointLinkisJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getJobName() {        return getJobProps().get(LinkisJobTypeConf.JOB_ID);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanAppJointLinkisJob.java", "stars": "18", "class": {"name": "AzkabanAppJointLinkisJob", "extends": "AbstractAppJointLinkisJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "setConfig", "params": ["XLogicConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setConfig(XLogicConfig config){\t\tthis.logicConfig = config;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "hasParameter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean hasParameter(String name){\t\treturn logicParameters.containsKey(name);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getString(String name){\t\treturn logicParameters.getString(name);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getInteger", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getInteger(String name){\t\treturn logicParameters.getInteger(name);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getLong", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "\tpublic Long getLong(String name){\t\treturn logicParameters.getLong(name);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getDouble", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "\tpublic Double getDouble(String name){\t\treturn logicParameters.getDouble(name);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getEnum", "params": ["Class<T>", "String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "\tpublic <T extends Enum<T>> T getEnum(Class<T> enumType, String name) {\t\ttry {\t\t\treturn Enum.valueOf(enumType, logicParameters.getString(name));\t\t}catch(Exception e){}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getJSONArray", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "\tpublic JSONArray getJSONArray(String name){\t\treturn logicParameters.getJSONArray(name);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getJSONObject", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "\tpublic JSONObject getJSONObject(String name){\t\treturn logicParameters.getJSONObject(name);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getClientIP", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getClientIP(){\t\treturn this.getString(DataKey.CLIENT_IP);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getClientVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getClientVersion(){\t\treturn this.getString(DataKey.CLIENT_VERSION);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getClientDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getClientDevice(){\t\treturn this.getString(DataKey.CLIENT_DEVICE);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "startTransaction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void startTransaction(){\t\tif(context == null){\t\t\tcontext = new XContext();\t\t}\t\tcontext.startTransaction();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getContext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XContext", "snippet": "\tpublic XContext getContext(){\t\tif(context == null){\t\t\tcontext = new XContext();\t\t}\t\treturn context;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "submitTransaction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean submitTransaction(){\t\treturn context.submitTransaction();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "requireSession", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean requireSession(){\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "requireAccountBound", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean requireAccountBound(){\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "String", "snippet": "\tprotected abstract String prepare();\t\tprotected abstract String execute();\t\tprivate XLogic init(JSONObject parameters) {\t\tthis.logicParameters = parameters;\t\tthis.logicSession = new XLogicSession(this.getString(DataKey.PEERID), this.getString(DataKey.SESSIONID));\t\tthis.initialized = true;\t\treturn this;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "String", "snippet": "\tprotected abstract String execute();\t\tprivate XLogic init(JSONObject parameters) {\t\tthis.logicParameters = parameters;\t\tthis.logicSession = new XLogicSession(this.getString(DataKey.PEERID), this.getString(DataKey.SESSIONID));\t\tthis.initialized = true;\t\treturn this;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": ["JSONObject"], "throws": null, "modifiers": ["private"], "return_type": "XLogic", "snippet": "\tprivate XLogic init(JSONObject parameters) {\t\tthis.logicParameters = parameters;\t\tthis.logicSession = new XLogicSession(this.getString(DataKey.PEERID), this.getString(DataKey.SESSIONID));\t\tthis.initialized = true;\t\treturn this;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "outputResult", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String outputResult(){\t\ttry{\t\t\tif(!this.initialized) {\t\t\t\treturn XLogicResult.errorInternal();\t\t\t}\t\t\tString prepareResult = this.prepare();\t\t\tif(prepareResult != null){\t\t\t\treturn prepareResult;\t\t\t}\t\t\tif(this.requireSession()){\t\t\t\tString sessionResult = this.logicSession.checkSession(this.requireAccountBound());\t\t\t\tif(sessionResult != null){\t\t\t\t\treturn sessionResult;\t\t\t\t}\t\t\t}\t\t\t\t\t\tString executeResult = this.execute();\t\t\tif(executeResult == null) {\t\t\t\texecuteResult = XLogicResult.success();\t\t\t}\t\t\treturn executeResult;\t\t}catch(Exception e){\t\t\tlogger.error(this.getClass().getSimpleName(), e);\t\t\treturn XLogicResult.errorInternal();\t\t}finally{\t\t\tif(this.context != null) {\t\t\t\tthis.context.endTransaction(false);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XLogic", "snippet": "\tpublic XLogic clone() {\t\ttry{\t\t\treturn (XLogic) super.clone();\t\t}catch(CloneNotSupportedException e){\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "cleanRequestParameters", "params": ["Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "JSONObject", "snippet": "    private JSONObject cleanRequestParameters(Map<String, String[]> parameters){    \tJSONObject requestParameters = new JSONObject();    \tString[] tpv = null;\t\tString pv = null;\t\tJSONArray item = null;\t\tfor(String pn : parameters.keySet()){\t\t\ttpv = parameters.get(pn);\t\t\tif(tpv.length > 1){\t\t\t\titem = new JSONArray(Arrays.asList(tpv));\t\t\t\tpv = item.toJSONString();\t\t\t}else if(parameters.get(pn).length == 1) {\t\t\t\tpv = parameters.get(pn)[0].trim();\t\t\t}else{\t\t\t\tpv = \"\";\t\t\t}\t\t\trequestParameters.put(pn, pv);\t\t}\t\treturn requestParameters;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "checkRequiredParameters", "params": ["JSONObject", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String checkRequiredParameters(JSONObject parameters, final String[] requires){\t\tif(requires != null && requires.length > 0){\t\t\tString pn = null;\t\t\tList<String> lackedParams = new ArrayList<String>();\t\t\tfor(int i=0,n=requires.length; i<n; i++){\t\t\t\tpn = requires[i];\t\t\t\tif(!parameters.containsKey(pn)){\t\t\t\t\tlackedParams.add(pn);\t\t\t\t}\t\t\t}\t\t\tif(lackedParams.size() > 0){\t\t\t\treturn \"PARAMETER_LACKED\"+lackedParams.toString();\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {        String requestIP = request.getHeader(DataKey.HEADER_IP);        if (requestIP == null) {        \trequestIP = request.getRemoteAddr();\t\t}\t\tString[] ipList = this.logicConfig.allow();\t\tboolean isForbidden = false;\t\tif(ipList.length > 0){\t\t\tisForbidden = true;\t\t\tfor(int i=0,n=ipList.length; i<n; i++){\t\t\t\tif(ipList[i].equals(requestIP)){\t\t\t\t\tisForbidden = false;\t\t\t\t\tbreak;\t\t\t\t}\t\t\t}\t\t\tif(isForbidden){\t\t\t\tlogger.error(\"IP_FORBIDDEN:\"+requestIP);\t\t\t\tresponse.getWriter().write(XLogicResult.errorRequest());\t\t\t\treturn;\t\t\t}\t\t}\t\tString requestMethod = request.getMethod().toUpperCase();\t\tif(!this.logicConfig.method().toString().equals(requestMethod)){\t\t\tresponse.getWriter().write(XLogicResult.errorMethod());\t\t\treturn;\t\t}\t\t\t\tJSONObject requestParameters = cleanRequestParameters(request.getParameterMap());\t\t        if(!requestParameters.containsKey(DataKey.PEERID)){        \trequestParameters.put(DataKey.PEERID, request.getHeader(DataKey.HEADER_PEERID));        }        if(!requestParameters.containsKey(DataKey.SESSIONID)){        \trequestParameters.put(DataKey.SESSIONID, request.getHeader(DataKey.HEADER_SESSIONID));        }        requestParameters.put(DataKey.CLIENT_VERSION, request.getHeader(DataKey.HEADER_VERSION));        requestParameters.put(DataKey.CLIENT_DEVICE, request.getHeader(DataKey.HEADER_DEVICE));        requestParameters.put(DataKey.CLIENT_IP, requestIP);        \t\tif(this.logicConfig.requiredPeerid()){\t\t\tString peerid = requestParameters.getString(DataKey.PEERID);\t\t\tif(!checkPeerid(peerid)){\t\t\t\tresponse.getWriter().write(XLogicResult.errorValidation());\t\t\t\treturn;\t\t\t}\t\t}\t\t\t\tif(this.logicConfig.requiredParameters().length > 0){\t\t\tString errinfo = this.checkRequiredParameters(requestParameters, this.logicConfig.requiredParameters());\t\t\tif(errinfo != null){\t\t\t\tresponse.getWriter().write(XLogicResult.errorParameter(errinfo));\t\t\t\treturn;\t\t\t}\t\t}\t\t\t\tresponse.getWriter().write(this.clone().init(requestParameters).outputResult());    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {        doGet(request, response);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "createPeerid", "params": ["char"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String createPeerid(char clientType) {        long ts = System.currentTimeMillis();        long rn = (long) Math.floor(Math.random() * 9) + 1;        long mn = ts % rn;        return clientType + CommonUtils.randomString(3, true) + rn + Long.toString(ts, 36) + mn + CommonUtils.randomString(6, true);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "checkPeerid", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean checkPeerid(String peerid) {\t\ttry {\t\t\tif(peerid!=null && peerid.length() == 20){\t\t\t\tint rn = Integer.parseInt(peerid.substring(4, 5));\t\t\t\tint mn = Integer.parseInt(peerid.substring(13, 14));\t\t\t\tString ts36 = peerid.substring(5, 13);\t\t\t\tlong ts = Long.valueOf(ts36, 36);\t\t\t\tif(ts % rn == mn) {\t\t\t\t\treturn true;\t\t\t\t}\t\t\t}\t\t}catch(Exception e){\t\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogic.java", "stars": "2", "class": {"name": "XLogic", "extends": "HttpServlet", "implements": ["Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "generateRandomAlphanumericString", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String generateRandomAlphanumericString() {        return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, SECURE_RANDOM);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/util/RandomUtil.java", "stars": "2", "class": {"name": "RandomUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "generatePassword", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String generatePassword() {        return generateRandomAlphanumericString();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/util/RandomUtil.java", "stars": "2", "class": {"name": "RandomUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "generateActivationKey", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String generateActivationKey() {        return generateRandomAlphanumericString();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/util/RandomUtil.java", "stars": "2", "class": {"name": "RandomUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "generateResetKey", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String generateResetKey() {        return generateRandomAlphanumericString();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/util/RandomUtil.java", "stars": "2", "class": {"name": "RandomUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "generateStripeVerificationKey", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String generateStripeVerificationKey() {        return generateRandomAlphanumericString();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/util/RandomUtil.java", "stars": "2", "class": {"name": "RandomUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tScanner scanner = new Scanner (System.in);\t\tSystem.out.println(\"\u8f93\u5165\u4e0a\u6b21\u8003\u8bd5\u6210\u7ee9\");\t\tint prev = scanner.nextInt();\t\tSystem.out.println(\"\u8f93\u5165\u672c\u6b21\u8003\u8bd5\u6210\u7ee9\");\t\tint score = scanner.nextInt();\t\t//\u6570\u503c\u683c\u5f0f\u5316\u5bf9\u8c61\t\t//NumberFormat numberFormat = NumberFormat.getInstance();\t\t//numberFormat.setMaximumFractionDigits(2);\t\t//String percent = numberFormat.format( 100 * (score - prev) / prev);\t\t\t\tdouble percent = 100 * (score - prev) / prev;\t\t//DecimalFormat\u7684format\u65b9\u6cd5\t\t//DecimalFormat df = new DecimalFormat(\"#.00\");\t\t//System.out.println(\"\u6210\u7ee9\u63d0\u9ad8\u4e86\" + df.format(percent) + \"%\");\t\tSystem.out.println(\"\u6210\u7ee9\u63d0\u9ad8\u4e86\" + String.format(\"%.2f\", percent) + \"%\");\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part1/src/com/flow/javapractice/FlowInputOutput.java", "stars": "2", "class": {"name": "FlowInputOutput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getText() {        return text;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/FriendlyMessage.java", "stars": "2", "class": {"name": "FriendlyMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setText", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setText(String text) {        this.text = text;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/FriendlyMessage.java", "stars": "2", "class": {"name": "FriendlyMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/FriendlyMessage.java", "stars": "2", "class": {"name": "FriendlyMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/FriendlyMessage.java", "stars": "2", "class": {"name": "FriendlyMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPhotoUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPhotoUrl() {        return photoUrl;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/FriendlyMessage.java", "stars": "2", "class": {"name": "FriendlyMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPhotoUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPhotoUrl(String photoUrl) {        this.photoUrl = photoUrl;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/FriendlyMessage.java", "stars": "2", "class": {"name": "FriendlyMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "multicontactselector_adapter", "snippet": "    public multicontactselector_adapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View v=LayoutInflater.from(app).inflate(R.layout.contact_child,parent,false);        return new ViewHolder(v);    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/multicontactselector_adapter.java", "stars": "2", "class": {"name": "multicontactselector_adapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["multicontactselector_adapter", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NonNull multicontactselector_adapter.ViewHolder holder, int position) {        final listforadapter ekobject=data.get(position);        holder.name.setText(ekobject.getName());        holder.phoneno.setText(ekobject.getPhone());        TextDrawable drawable = TextDrawable.builder().buildRound(ekobject.getName().substring(0,1).toUpperCase(),Color.rgb(15,167,255));        holder.civ.setBackground(drawable);        if(ekobject.isIsselected()){            holder.itemView.setBackgroundColor(Color.rgb(84,242,242));            holder.itemView.setAlpha((float) 0.8);            Toast.makeText(app.getApplicationContext(),ekobject.getName()+\" Selected\",Toast.LENGTH_SHORT).show();        }        else{            holder.itemView.setAlpha((float) 1.0);            holder.itemView.setBackgroundColor(Color.WHITE);        }        holder.itemView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                AlphaAnimation buttonClick = new AlphaAnimation(1F, 0.8F);                v.startAnimation(buttonClick);                Vibrator vv = (Vibrator) app.getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);                vv.vibrate(100);                if(ekobject.isIsselected()){                    ekobject.setIsselected(false);                }                else{                    ekobject.setIsselected(true);                }                if(ekobject.isIsselected()){                    v.setBackgroundColor(Color.rgb(84,242,242));                    v.setAlpha((float) 0.8);                    Toast.makeText(app.getApplicationContext(),ekobject.getName()+\" Selected\",Toast.LENGTH_SHORT).show();                }                else{                    v.setAlpha((float) 1.0);                    v.setBackgroundColor(Color.WHITE);                }            }        });    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/multicontactselector_adapter.java", "stars": "2", "class": {"name": "multicontactselector_adapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return data.size();    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/multicontactselector_adapter.java", "stars": "2", "class": {"name": "multicontactselector_adapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocalIPList", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "    public static List<String> getLocalIPList() {        List<String> ipList = new ArrayList<>();        try {            Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();            NetworkInterface networkInterface;            Enumeration<InetAddress> inetAddresses;            InetAddress inetAddress;            String ip;            while (networkInterfaces.hasMoreElements()) {                networkInterface = networkInterfaces.nextElement();                if (networkInterface.getName().toLowerCase().contains(\"docker\")                        || networkInterface.getDisplayName().toLowerCase().contains(\"docker\")//                || networkInterface.getName().startsWith(\"lo\")                || networkInterface.getName().startsWith(\"vmnet\")                || networkInterface.getName().startsWith(\"br-\")) {                    continue;                }                inetAddresses = networkInterface.getInetAddresses();                while (inetAddresses.hasMoreElements()) {                    inetAddress = inetAddresses.nextElement();                    if (inetAddress != null && inetAddress instanceof Inet4Address) { // IPV4                        ip = inetAddress.getHostAddress();                        ipList.add(ip);                    }                }            }        } catch (SocketException e) {            e.printStackTrace();        }        return ipList;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/NetUtil.java", "stars": "7", "class": {"name": "NetUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMyNormalIP", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getMyNormalIP() {        List<String> ipList = NetUtil.getLocalIPList();        for (String ip : ipList) {            if (!\"127.0.0.1\".equalsIgnoreCase(ip)) {                return ip;            }        }        return null;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/NetUtil.java", "stars": "7", "class": {"name": "NetUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ipIsMine", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean ipIsMine(String ip) {        List<String> ipList = NetUtil.getLocalIPList();        return ipList.stream().anyMatch(s -> s.equalsIgnoreCase(ip));    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/NetUtil.java", "stars": "7", "class": {"name": "NetUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "\tpublic ViewHolder onCreateViewHolder(ViewGroup parent) {\t\tmContext = parent.getContext();\t\tfinal CustomImageCardView cardView = new CustomImageCardView(mContext) {\t\t\t@Override\t\t\tpublic void setSelected(boolean selected) {\t\t\t\tif (getCustomSelectedSwatch() != null && selected) {\t\t\t\t\tsetInfoAreaBackgroundColor(getCustomSelectedSwatch().getRgb());\t\t\t\t} else setInfoAreaBackgroundColor(selected ? mDefaultSelectedInfoBackgroundColor : mDefaultInfoBackgroundColor);\t\t\t\tsuper.setSelected(selected);\t\t\t}\t\t};\t\tcardView.setInfoAreaBackgroundColor(mDefaultInfoBackgroundColor);\t\tcardView.setFocusable(true);\t\tcardView.setFocusableInTouchMode(true);\t\treturn new ViewHolder(cardView);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "MediaCardPresenter", "extends": "Presenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["Presenter", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBindViewHolder(Presenter.ViewHolder viewHolder, Object object) {\t\tMediaCardItem overview = (MediaCardItem) object;\t\tif (overview.isLoading()) onBindLoadingViewHolder(viewHolder, overview);\t\telse onBindMediaViewHolder(viewHolder, overview);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "MediaCardPresenter", "extends": "Presenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindLoadingViewHolder", "params": ["Presenter", "MediaCardItem"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBindLoadingViewHolder(Presenter.ViewHolder viewHolder, MediaCardItem overview) {\t\tfinal CustomImageCardView cardView = (CustomImageCardView) viewHolder.view;\t\tcardView.setMainImageScaleType(ImageView.ScaleType.CENTER_INSIDE);\t\tcardView.setMainImage(mContext.getResources().getDrawable(R.drawable.placeholder_inset, null));\t\tcardView.setTitleText(mContext.getString(R.string.loading));\t\tcardView.setMainImageDimensions(mCardWidth, mCardHeight);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "MediaCardPresenter", "extends": "Presenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindMediaViewHolder", "params": ["Presenter", "MediaCardItem"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBindMediaViewHolder(Presenter.ViewHolder viewHolder, MediaCardItem overview) {\t\tMedia item = overview.getMedia();\t\tfinal CustomImageCardView cardView = (CustomImageCardView) viewHolder.view;        cardView.setTitleText(item.title);        cardView.setContentText(!TextUtils.isEmpty(item.genre) ? item.genre : item.year);        cardView.getMainImageView().setAlpha(1f);        cardView.getMainImageView().setPadding(0,0,0,0);        cardView.setMainImageDimensions(mCardWidth, mCardHeight);        cardView.getMainImageView().setVisibility(View.GONE);        cardView.setCustomSelectedSwatch(null);\t\tif (item.image != null) {\t\t\tTarget target = new Target() {\t\t\t\t@Override public void onBitmapLoaded(final Bitmap bitmap, Picasso.LoadedFrom from) {\t\t\t\t\tPalette.from(bitmap).maximumColorCount(16).generate(new Palette.PaletteAsyncListener() {\t\t\t\t\t\t@Override public void onGenerated(Palette palette) {\t\t\t\t\t\t\tPalette.Swatch swatch = palette.getDarkMutedSwatch();\t\t\t\t\t\t\tcardView.setCustomSelectedSwatch(swatch);                            cardView.getMainImageView().setImageBitmap(bitmap);                            cardView.getMainImageView().setVisibility(View.GONE);                            AnimUtils.fadeIn(cardView.getMainImageView());\t\t\t\t\t\t}\t\t\t\t\t});\t\t\t\t}\t\t\t\t@Override public void onBitmapFailed(Exception exc, Drawable errorDrawable) {\t\t\t\t\tcardView.getMainImageView().setImageResource(R.drawable.placeholder_inset);                    cardView.getMainImageView().setAlpha(0.4f);\t\t\t\t\tcardView.getMainImageView().setScaleType(ImageView.ScaleType.CENTER_INSIDE);\t\t\t\t\tcardView.getMainImageView().setVisibility(View.GONE);\t\t\t\t\tAnimUtils.fadeIn(cardView.getMainImageView());\t\t\t\t}\t\t\t\t@Override public void onPrepareLoad(Drawable placeHolderDrawable) {\t\t\t\t}\t\t\t};\t\t\t//load image\t\t\tPicasso.get().load(item.image).resize(mCardWidth, mCardHeight).centerCrop().into(target);\t\t\tcardView.setTarget(target);\t\t} else {            cardView.getMainImageView().setImageResource(R.drawable.placeholder_inset);            cardView.getMainImageView().setAlpha(0.4f);            cardView.getMainImageView().setScaleType(ImageView.ScaleType.CENTER_INSIDE);            cardView.getMainImageView().setVisibility(View.GONE);            AnimUtils.fadeIn(cardView.getMainImageView());        }\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "MediaCardPresenter", "extends": "Presenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUnbindViewHolder", "params": ["Presenter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onUnbindViewHolder(Presenter.ViewHolder viewHolder) {\t\tCustomImageCardView cardView = (CustomImageCardView) viewHolder.view;\t\t// Remove references to images so that the garbage collector can free up memory\t\tcardView.setBadgeImage(null);\t\tcardView.setMainImage(null);\t\tif (cardView.getTarget() != null) {\t\t\tPicasso.get().cancelRequest(cardView.getTarget());\t\t\tcardView.setTarget(null);\t\t}\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "MediaCardPresenter", "extends": "Presenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "convertMediaToOverview", "params": ["List<Media>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<MediaCardItem>", "snippet": "\tpublic static List<MediaCardItem> convertMediaToOverview(List<Media> items) {\t\tList<MediaCardItem> list = new ArrayList<>();\t\tfor (Media media : items) list.add(new MediaCardItem(media));\t\treturn list;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "MediaCardPresenter", "extends": "Presenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCustomSelectedSwatch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Palette", "snippet": "\t\tpublic Palette.Swatch getCustomSelectedSwatch() {\t\t\treturn mCustomSelectedSwatch;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "CustomImageCardView", "extends": "ImageCardView", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setCustomSelectedSwatch", "params": ["Palette"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setCustomSelectedSwatch(Palette.Swatch customSelectedSwatch) {\t\t\tmCustomSelectedSwatch = customSelectedSwatch;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "CustomImageCardView", "extends": "ImageCardView", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTarget", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Target", "snippet": "\t\tpublic Target getTarget() {\t\t\treturn mTarget;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "CustomImageCardView", "extends": "ImageCardView", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTarget", "params": ["Target"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setTarget(Target target) {\t\t\tmTarget = target;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "CustomImageCardView", "extends": "ImageCardView", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMedia", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Media", "snippet": "\t\tpublic Media getMedia() {\t\t\treturn mMedia;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "MediaCardItem", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isLoading", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isLoading() {\t\t\treturn mLoading;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MediaCardPresenter.java", "stars": "4", "class": {"name": "MediaCardItem", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "InputStream", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, InputStream parameter, JdbcType jdbcType)      throws SQLException {    ps.setBlob(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BlobInputStreamTypeHandler.java", "stars": "15", "class": {"name": "BlobInputStreamTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "  public InputStream getNullableResult(ResultSet rs, String columnName)      throws SQLException {    return toInputStream(rs.getBlob(columnName));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BlobInputStreamTypeHandler.java", "stars": "15", "class": {"name": "BlobInputStreamTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "  public InputStream getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    return toInputStream(rs.getBlob(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BlobInputStreamTypeHandler.java", "stars": "15", "class": {"name": "BlobInputStreamTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "  public InputStream getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    return toInputStream(cs.getBlob(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BlobInputStreamTypeHandler.java", "stars": "15", "class": {"name": "BlobInputStreamTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "toInputStream", "params": ["Blob"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "InputStream", "snippet": "  private InputStream toInputStream(Blob blob) throws SQLException {    if (blob == null) {      return null;    } else {      return blob.getBinaryStream();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BlobInputStreamTypeHandler.java", "stars": "15", "class": {"name": "BlobInputStreamTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["String", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Collection<DetalhePagamentoListaDTO>", "snippet": "\tpublic Collection<DetalhePagamentoListaDTO> execute(String tokenUsuario,\t\t\t@PathVariable(\"restauranteId\") Long restauranteId) {\t\tUsuario usuarioLogado = usuarioRepository.findByNome(tokenUsuario);\t\tRestaurante restaurante = manager.find(Restaurante.class,\t\t\t\trestauranteId);\t\treturn usuarioLogado.pagamentosPossiveisParaRestaurante(restaurante,possiveisRestricoes)\t\t\t\t.stream().map(DetalhePagamentoListaDTO::new)\t\t\t\t.collect(Collectors.toList());\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/listapagamentos/ListaPagamentosController.java", "stars": "9", "class": {"name": "ListaPagamentosController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTimeBegin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTimeBegin() {        return createTimeBegin;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/query/UserQuery.java", "stars": "23", "class": {"name": "UserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTimeBegin", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTimeBegin(Date createTimeBegin) {        this.createTimeBegin = createTimeBegin;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/query/UserQuery.java", "stars": "23", "class": {"name": "UserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTimeEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTimeEnd() {        return createTimeEnd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/query/UserQuery.java", "stars": "23", "class": {"name": "UserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTimeEnd", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTimeEnd(Date createTimeEnd) {        this.createTimeEnd = createTimeEnd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/query/UserQuery.java", "stars": "23", "class": {"name": "UserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getUserType() {        return userType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/query/UserQuery.java", "stars": "23", "class": {"name": "UserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserType(int userType) {        this.userType = userType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/query/UserQuery.java", "stars": "23", "class": {"name": "UserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUserName() {        return userName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/query/UserQuery.java", "stars": "23", "class": {"name": "UserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserName(String userName) {        this.userName = userName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/query/UserQuery.java", "stars": "23", "class": {"name": "UserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "now", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "    public LocalDateTime now() {        return LocalDateTime.now(clock);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/test/java/os/failsafe/executor/TestSystemClock.java", "stars": "2", "class": {"name": "TestSystemClock", "extends": null, "implements": ["SystemClock"], "modifiers": ["public"]}}, {"method_name": "timeTravelBy", "params": ["Duration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void timeTravelBy(Duration duration) {        this.clock = Clock.offset(this.clock, duration);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/test/java/os/failsafe/executor/TestSystemClock.java", "stars": "2", "class": {"name": "TestSystemClock", "extends": null, "implements": ["SystemClock"], "modifiers": ["public"]}}, {"method_name": "resetTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void resetTime() {        this.clock = Clock.systemDefaultZone();    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/test/java/os/failsafe/executor/TestSystemClock.java", "stars": "2", "class": {"name": "TestSystemClock", "extends": null, "implements": ["SystemClock"], "modifiers": ["public"]}}, {"method_name": "afterPropertiesSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterPropertiesSet() {        Collection<String> activeProfiles = Arrays.asList(env.getActiveProfiles());        if (activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_PRODUCTION)) {            log.error(\"You have misconfigured your application! It should not run \" +                \"with both the 'dev' and 'prod' profiles at the same time.\");        }        if (activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_CLOUD)) {            log.error(\"You have misconfigured your application! It should not \" +                \"run with both the 'dev' and 'cloud' profiles at the same time.\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/GardleApp.java", "stars": "2", "class": {"name": "GardleApp", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication app = new SpringApplication(GardleApp.class);        DefaultProfileUtil.addDefaultProfile(app);        Environment env = app.run(args).getEnvironment();        logApplicationStartup(env);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/GardleApp.java", "stars": "2", "class": {"name": "GardleApp", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "logApplicationStartup", "params": ["Environment"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void logApplicationStartup(Environment env) {        String protocol = \"http\";        if (env.getProperty(\"server.ssl.key-store\") != null) {            protocol = \"https\";        }        String serverPort = env.getProperty(\"server.port\");        String contextPath = env.getProperty(\"server.servlet.context-path\");        if (StringUtils.isBlank(contextPath)) {            contextPath = \"/\";        }        String hostAddress = \"localhost\";        try {            hostAddress = InetAddress.getLocalHost().getHostAddress();        } catch (UnknownHostException e) {            log.warn(\"The host name could not be determined, using `localhost` as fallback\");        }        log.info(\"\\n----------------------------------------------------------\\n\\t\" +                \"Application '{}' is running! Access URLs:\\n\\t\" +                \"Local: \\t\\t{}://localhost:{}{}\\n\\t\" +                \"External: \\t{}://{}:{}{}\\n\\t\" +                \"Profile(s): \\t{}\\n----------------------------------------------------------\",            env.getProperty(\"spring.application.name\"),            protocol,            serverPort,            contextPath,            protocol,            hostAddress,            serverPort,            contextPath,            env.getActiveProfiles());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/GardleApp.java", "stars": "2", "class": {"name": "GardleApp", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewContainer.java", "stars": "2", "class": {"name": "ScrollViewContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewContainer.java", "stars": "2", "class": {"name": "ScrollViewContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewContainer.java", "stars": "2", "class": {"name": "ScrollViewContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onMeasure (int p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewContainer.java", "stars": "2", "class": {"name": "ScrollViewContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewContainer.java", "stars": "2", "class": {"name": "ScrollViewContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewContainer.java", "stars": "2", "class": {"name": "ScrollViewContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "writeToNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "NBTTagCompound", "snippet": "    public NBTTagCompound writeToNBT(NBTTagCompound compound) {        NBTTagCompound tag = super.writeToNBT(compound);        writeSyncNBT(tag);        return tag;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileBase.java", "stars": "2", "class": {"name": "TileBase", "extends": "TileEntity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "readFromNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readFromNBT(NBTTagCompound compound) {        super.readFromNBT(compound);        readSyncNBT(compound);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileBase.java", "stars": "2", "class": {"name": "TileBase", "extends": "TileEntity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getUpdateTag", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "NBTTagCompound", "snippet": "    public final NBTTagCompound getUpdateTag() {        return writeToNBT(new NBTTagCompound());    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileBase.java", "stars": "2", "class": {"name": "TileBase", "extends": "TileEntity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "writeSyncNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void writeSyncNBT(NBTTagCompound compound);    public abstract void readSyncNBT(NBTTagCompound compound);    @Nullable    @Override    public SPacketUpdateTileEntity getUpdatePacket() {        NBTTagCompound tag = new NBTTagCompound();        writeSyncNBT(tag);        return new SPacketUpdateTileEntity(pos, -114514, tag);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileBase.java", "stars": "2", "class": {"name": "TileBase", "extends": "TileEntity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "readSyncNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void readSyncNBT(NBTTagCompound compound);    @Nullable    @Override    public SPacketUpdateTileEntity getUpdatePacket() {        NBTTagCompound tag = new NBTTagCompound();        writeSyncNBT(tag);        return new SPacketUpdateTileEntity(pos, -114514, tag);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileBase.java", "stars": "2", "class": {"name": "TileBase", "extends": "TileEntity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getUpdatePacket", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SPacketUpdateTileEntity", "snippet": "    public SPacketUpdateTileEntity getUpdatePacket() {        NBTTagCompound tag = new NBTTagCompound();        writeSyncNBT(tag);        return new SPacketUpdateTileEntity(pos, -114514, tag);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileBase.java", "stars": "2", "class": {"name": "TileBase", "extends": "TileEntity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onDataPacket", "params": ["NetworkManager", "SPacketUpdateTileEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDataPacket(NetworkManager net, SPacketUpdateTileEntity pkt) {        super.onDataPacket(net, pkt);        readSyncNBT(pkt.getNbtCompound());    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileBase.java", "stars": "2", "class": {"name": "TileBase", "extends": "TileEntity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "get", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "  public InputStream get(final String key) throws IOException {    this.hdfsAuth.authorize();    return this.hdfs.open(fullPath(key));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/HdfsStorage.java", "stars": "18", "class": {"name": "HdfsStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["StorageMetadata", "File"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String put(final StorageMetadata metadata, final File localFile) {    this.hdfsAuth.authorize();    final Path projectsPath = new Path(this.rootUri.getPath(),        String.valueOf(metadata.getProjectId()));    try {      if (this.hdfs.mkdirs(projectsPath)) {        log.info(\"Created project dir: \" + projectsPath);      }      final Path targetPath = createTargetPath(metadata, projectsPath);      if (this.hdfs.exists(targetPath)) {        log.info(            String.format(\"Duplicate Found: meta: %s path: %s\", metadata, targetPath));        return getRelativePath(targetPath);      }      // Copy file to HDFS      log.info(String.format(\"Creating project artifact: meta: %s path: %s\", metadata, targetPath));      this.hdfs.copyFromLocalFile(new Path(localFile.getAbsolutePath()), targetPath);      return getRelativePath(targetPath);    } catch (final IOException e) {      log.error(\"error in put(): Metadata: \" + metadata);      throw new StorageException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/HdfsStorage.java", "stars": "18", "class": {"name": "HdfsStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "getRelativePath", "params": ["Path"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getRelativePath(final Path targetPath) {    return URI.create(this.rootUri.getPath()).relativize(targetPath.toUri()).getPath();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/HdfsStorage.java", "stars": "18", "class": {"name": "HdfsStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "createTargetPath", "params": ["StorageMetadata", "Path"], "throws": null, "modifiers": ["private"], "return_type": "Path", "snippet": "  private Path createTargetPath(final StorageMetadata metadata, final Path projectsPath) {    return new Path(projectsPath, String.format(\"%s-%s.zip\",        String.valueOf(metadata.getProjectId()),        new String(Hex.encodeHex(metadata.getHash()))    ));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/HdfsStorage.java", "stars": "18", "class": {"name": "HdfsStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "delete", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean delete(final String key) {    this.hdfsAuth.authorize();    final Path path = fullPath(key);    try {      return this.hdfs.delete(path, false);    } catch (final IOException e) {      log.error(\"HDFS delete failed on \" + path, e);      return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/HdfsStorage.java", "stars": "18", "class": {"name": "HdfsStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "fullPath", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Path", "snippet": "  private Path fullPath(final String key) {    return new Path(this.rootUri.toString(), key);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/HdfsStorage.java", "stars": "18", "class": {"name": "HdfsStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "getCountyWiseInfo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MutableLiveData<CountryWiseCasePojo>", "snippet": "    public MutableLiveData<CountryWiseCasePojo> getCountyWiseInfo(String endurl)    {        CovidInfoServiceApi covidInfoServiceApi = RetrofitClient.getRetrofitClient().create(CovidInfoServiceApi.class);        covidInfoServiceApi.getCountryWiseCase(endurl).enqueue(new Callback<CountryWiseCasePojo>() {            @Override            public void onResponse(Call<CountryWiseCasePojo> call, Response<CountryWiseCasePojo> response) {                countryWiseLD.postValue(response.body());            }            @Override            public void onFailure(Call<CountryWiseCasePojo> call, Throwable t) {                Log.i(TAG, \"onFailure: \"+t.getLocalizedMessage());            }        });        return countryWiseLD;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/repos/CovidPepos.java", "stars": "2", "class": {"name": "CovidPepos", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllCountyWiseInfo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MutableLiveData<List>", "snippet": "        public MutableLiveData<List<CountryWiseCasePojo>> getAllCountyWiseInfo(String endurl) {            CovidInfoServiceApi covidInfoServiceApi = RetrofitClient.getRetrofitClient().create(CovidInfoServiceApi.class);            covidInfoServiceApi.getAllCountyCase(endurl).enqueue(new Callback<List<CountryWiseCasePojo>>() {                @Override                public void onResponse(Call<List<CountryWiseCasePojo>> call, Response<List<CountryWiseCasePojo>> response) {                    allCountyLD.postValue(response.body());                }                @Override                public void onFailure(Call<List<CountryWiseCasePojo>> call, Throwable t) {                    Log.i(TAG, \"allcountyWiseData: \"+t.getLocalizedMessage());                }            });            return allCountyLD;        }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/repos/CovidPepos.java", "stars": "2", "class": {"name": "CovidPepos", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllWorldWise", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MutableLiveData<AllWorldCasePojo>", "snippet": "    public MutableLiveData<AllWorldCasePojo> getAllWorldWise(String endurl)    {        CovidInfoServiceApi covidInfoServiceApi = RetrofitClient.getRetrofitClient().create(CovidInfoServiceApi.class);        covidInfoServiceApi.getAllWorldWise(endurl).enqueue(new Callback<AllWorldCasePojo>() {            @Override            public void onResponse(Call<AllWorldCasePojo> call, Response<AllWorldCasePojo> response) {                allWorldWiseLD.postValue(response.body());            }            @Override            public void onFailure(Call<AllWorldCasePojo> call, Throwable t) {                Log.i(TAG, \"onFailure: \"+t.getLocalizedMessage());            }        });        return allWorldWiseLD;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/repos/CovidPepos.java", "stars": "2", "class": {"name": "CovidPepos", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDisplay", "params": ["JR100Display"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDisplay(JR100Display display) {        this.display = display;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/UserDefinedCharacterRam.java", "stars": "4", "class": {"name": "UserDefinedCharacterRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "store8", "params": ["int", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store8(int address, byte value) {        data[address - start] = value;        display.updateFont((address - start) / 8, (address - start) % 8, value);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/UserDefinedCharacterRam.java", "stars": "4", "class": {"name": "UserDefinedCharacterRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "store16", "params": ["int", "short"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store16(int address, short value) {        data[address - start] = (byte)(value >> 8);        display.updateFont((address - start) / 8, (address - start) % 8, value >> 8);        data[address - getStartAddress() + 1] = (byte)(value & 0xff);        display.updateFont((address - start) / 8, (address - start) % 8, value & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/UserDefinedCharacterRam.java", "stars": "4", "class": {"name": "UserDefinedCharacterRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "saveState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveState(StateSet ss) {        ss.set(\"UserDefinedCharacterRam.start_addr\", start);        ss.set(\"UserDefinedCharacterRam.length\", length);        ss.set(\"UserDefinedCharacterRam.data\", data);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/UserDefinedCharacterRam.java", "stars": "4", "class": {"name": "UserDefinedCharacterRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "loadState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadState(StateSet ss) {        start = (Integer)ss.get(\"UserDefinedCharacterRam.start_addr\");        length = (Integer)ss.get(\"UserDefinedCharacterRam.length\");        data = (byte[])ss.get(\"UserDefinedCharacterRam.data\");    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/UserDefinedCharacterRam.java", "stars": "4", "class": {"name": "UserDefinedCharacterRam", "extends": "RAM", "implements": ["StateSavable"], "modifiers": ["public"]}}, {"method_name": "getURLSuffix", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getURLSuffix() {        return enableHtmlSuffix ? \".html\" : StrUtil.EMPTY;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Site.java", "stars": "2", "class": {"name": "Site", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Site", "snippet": "    public static Site load(String siteConfigPath) {        var optionalSite = Optional.of(TomlUtil.loadTomlFile(siteConfigPath, Site.class));        optionalSite.ifPresent(site -> {            if (CollUtil.isNotEmpty(site.menus)) {                Map<String, List<Menu>> menuMap = new HashMap<>();                site.menus.forEach((name, menus) -> {                    menus = menus.stream().sorted(Comparator.comparing(Menu::getWeight)).collect(Collectors.toList());                    menuMap.put(name, menus);                });                site.setMenus(menuMap);            }        });        return optionalSite.get();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Site.java", "stars": "2", "class": {"name": "Site", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initDatabase", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void initDatabase() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/order_prefix_removed/ibatisConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/order_prefix_removed/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/order_prefix_removed/OrderPrefixRemovedTest.java", "stars": "15", "class": {"name": "OrderPrefixRemovedTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testOrderPrefixNotRemoved", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testOrderPrefixNotRemoved() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person person = personMapper.select(\"slow\");      assertNotNull(person);      sqlSession.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/order_prefix_removed/OrderPrefixRemovedTest.java", "stars": "15", "class": {"name": "OrderPrefixRemovedTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSignalKeyCreator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JobSignalKeyCreator", "snippet": "    public JobSignalKeyCreator getSignalKeyCreator() {        return this.signalKeyCreator;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanAppJointSignalSharedJob.java", "stars": "18", "class": {"name": "AzkabanAppJointSignalSharedJob", "extends": "AzkabanAppJointLinkisJob", "implements": ["SignalSharedJob"], "modifiers": ["public"]}}, {"method_name": "setSignalKeyCreator", "params": ["JobSignalKeyCreator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSignalKeyCreator(JobSignalKeyCreator signalKeyCreator) {        this.signalKeyCreator = signalKeyCreator;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanAppJointSignalSharedJob.java", "stars": "18", "class": {"name": "AzkabanAppJointSignalSharedJob", "extends": "AzkabanAppJointLinkisJob", "implements": ["SignalSharedJob"], "modifiers": ["public"]}}, {"method_name": "getMsgSaveKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsgSaveKey() {        Map<String, Object> configuration = this.getConfiguration();        Object map = configuration.get(\"runtime\");        if (map != null && map instanceof Map) {            Map<String, Object> runtime = (Map<String, Object>) map;            Object msgValue = runtime.get(LinkisJobTypeConf.MSG_SAVE_KEY);            if (null != msgValue) {                return msgValue.toString();            }        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanAppJointSignalSharedJob.java", "stars": "18", "class": {"name": "AzkabanAppJointSignalSharedJob", "extends": "AzkabanAppJointLinkisJob", "implements": ["SignalSharedJob"], "modifiers": ["public"]}}, {"method_name": "getStartAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStartAddress() {        return start;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AddressRegion.java", "stars": "4", "class": {"name": "AddressRegion", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setStartAddress", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartAddress(int start) {        this.start = start;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AddressRegion.java", "stars": "4", "class": {"name": "AddressRegion", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getEndAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEndAddress() {        return end;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AddressRegion.java", "stars": "4", "class": {"name": "AddressRegion", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setEndAddress", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndAddress(int end) {        this.end = end;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AddressRegion.java", "stars": "4", "class": {"name": "AddressRegion", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getComment", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getComment() {        return comment;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AddressRegion.java", "stars": "4", "class": {"name": "AddressRegion", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setComment", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setComment(String comment) {        this.comment = comment;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AddressRegion.java", "stars": "4", "class": {"name": "AddressRegion", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getLength", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLength() {        return end - start + 1;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AddressRegion.java", "stars": "4", "class": {"name": "AddressRegion", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AddressRegion", "snippet": "    public AddressRegion clone() {        AddressRegion r;        try {            r = (AddressRegion)super.clone();        }        catch (CloneNotSupportedException e) {            throw new AssertionError(\"AddressRegion\u306e\u30af\u30ed\u30fc\u30f3\u306b\u5931\u6557\u3057\u305f\u3002\");        }        return r;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AddressRegion.java", "stars": "4", "class": {"name": "AddressRegion", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(\"(\");        sb.append(String.format(\"0x%04X\", start));        sb.append(\",\");        sb.append(String.format(\"0x%04X\", end));        sb.append(\",\");        sb.append(comment);        sb.append(\")\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AddressRegion.java", "stars": "4", "class": {"name": "AddressRegion", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test(){        Outer$StaticInner si = new Outer$StaticInner();        si.innerMethod();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/javaMind/neibulei/Outer.java", "stars": "2", "class": {"name": "Outer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "access$0", "params": [], "throws": null, "modifiers": ["static"], "return_type": "int", "snippet": "    static int access$0(){        return shared;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/javaMind/neibulei/Outer.java", "stars": "2", "class": {"name": "Outer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "innerMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void innerMethod(){            System.out.println(\"inner \" + Outer.access$0());        }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/javaMind/neibulei/Outer.java", "stars": "2", "class": {"name": "Outer$StaticInner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onRestoreInstanceState", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onRestoreInstanceState(Bundle savedInstanceState) {\t\tpauseOnScroll = savedInstanceState.getBoolean(STATE_PAUSE_ON_SCROLL, false);\t\tpauseOnFling = savedInstanceState.getBoolean(STATE_PAUSE_ON_FLING, true);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/AbsListViewBaseActivity.java", "stars": "74", "class": {"name": "AbsListViewBaseActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onResume() {\t\tsuper.onResume();\t\tapplyScrollListener();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/AbsListViewBaseActivity.java", "stars": "74", "class": {"name": "AbsListViewBaseActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyScrollListener", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void applyScrollListener() {\t\tlistView.setOnScrollListener(new PauseOnScrollListener(imageLoader, pauseOnScroll, pauseOnFling));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/AbsListViewBaseActivity.java", "stars": "74", "class": {"name": "AbsListViewBaseActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSaveInstanceState", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSaveInstanceState(Bundle outState) {\t\toutState.putBoolean(STATE_PAUSE_ON_SCROLL, pauseOnScroll);\t\toutState.putBoolean(STATE_PAUSE_ON_FLING, pauseOnFling);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/AbsListViewBaseActivity.java", "stars": "74", "class": {"name": "AbsListViewBaseActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPrepareOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onPrepareOptionsMenu(Menu menu) {\t\tMenuItem pauseOnScrollItem = menu.findItem(R.id.item_pause_on_scroll);\t\tpauseOnScrollItem.setVisible(true);\t\tpauseOnScrollItem.setChecked(pauseOnScroll);\t\tMenuItem pauseOnFlingItem = menu.findItem(R.id.item_pause_on_fling);\t\tpauseOnFlingItem.setVisible(true);\t\tpauseOnFlingItem.setChecked(pauseOnFling);\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/AbsListViewBaseActivity.java", "stars": "74", "class": {"name": "AbsListViewBaseActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onOptionsItemSelected(MenuItem item) {\t\tswitch (item.getItemId()) {\t\t\tcase R.id.item_pause_on_scroll:\t\t\t\tpauseOnScroll = !pauseOnScroll;\t\t\t\titem.setChecked(pauseOnScroll);\t\t\t\tapplyScrollListener();\t\t\t\treturn true;\t\t\tcase R.id.item_pause_on_fling:\t\t\t\tpauseOnFling = !pauseOnFling;\t\t\t\titem.setChecked(pauseOnFling);\t\t\t\tapplyScrollListener();\t\t\t\treturn true;\t\t\tdefault:\t\t\t\treturn super.onOptionsItemSelected(item);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/AbsListViewBaseActivity.java", "stars": "74", "class": {"name": "AbsListViewBaseActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "makeObject", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "LdapConnection", "snippet": "    public LdapConnection makeObject() throws Exception {        Hashtable<String, String> env = new Hashtable<>();        env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");        String url = ldapUrl;        if(!url.endsWith(\"/\")){            url += \"/\";        }        env.put(Context.PROVIDER_URL, url + baseDn);        env.put(Context.SECURITY_AUTHENTICATION, \"simple\");        return new LdapConnection(env);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/ldap/LdapConnectionFactory.java", "stars": "23", "class": {"name": "LdapConnectionFactory", "extends": null, "implements": ["PoolableObjectFactory"], "modifiers": ["public"]}}, {"method_name": "destroyObject", "params": ["LdapConnection"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroyObject(LdapConnection ldapConnection) throws Exception {        LdapContext ldapContext = ldapConnection.getContext();        if(null != ldapContext){            try {                ldapContext.close();            }catch(Exception e){                //Ignore            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/ldap/LdapConnectionFactory.java", "stars": "23", "class": {"name": "LdapConnectionFactory", "extends": null, "implements": ["PoolableObjectFactory"], "modifiers": ["public"]}}, {"method_name": "validateObject", "params": ["LdapConnection"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean validateObject(LdapConnection ldapConnection) {        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/ldap/LdapConnectionFactory.java", "stars": "23", "class": {"name": "LdapConnectionFactory", "extends": null, "implements": ["PoolableObjectFactory"], "modifiers": ["public"]}}, {"method_name": "activateObject", "params": ["LdapConnection"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void activateObject(LdapConnection ldapConnection) throws Exception {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/ldap/LdapConnectionFactory.java", "stars": "23", "class": {"name": "LdapConnectionFactory", "extends": null, "implements": ["PoolableObjectFactory"], "modifiers": ["public"]}}, {"method_name": "passivateObject", "params": ["LdapConnection"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void passivateObject(LdapConnection ldapConnection) throws Exception {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/ldap/LdapConnectionFactory.java", "stars": "23", "class": {"name": "LdapConnectionFactory", "extends": null, "implements": ["PoolableObjectFactory"], "modifiers": ["public"]}}, {"method_name": "setVideoState", "params": ["VideoState"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoState(VideoState videoState) {        this.videoState = videoState;        this.videoState.setVideoContext(this);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoContext.java", "stars": "2", "class": {"name": "VideoContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideoState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "VideoState", "snippet": "    public VideoState getVideoState() {        return videoState;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoContext.java", "stars": "2", "class": {"name": "VideoContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "play", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play(){        this.videoState.play();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoContext.java", "stars": "2", "class": {"name": "VideoContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause(){        this.videoState.pause();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoContext.java", "stars": "2", "class": {"name": "VideoContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "speed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void speed(){        this.videoState.speed();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoContext.java", "stars": "2", "class": {"name": "VideoContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close(){        this.videoState.close();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoContext.java", "stars": "2", "class": {"name": "VideoContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/PickerRendererBase_1.java", "stars": "2", "class": {"name": "PickerRendererBase_1", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/PickerRendererBase_1.java", "stars": "2", "class": {"name": "PickerRendererBase_1", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "adminLogin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String adminLogin() {        return \"redirect:/admin/index.html\";    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/admin/api/LoginController.java", "stars": "1", "class": {"name": "LoginController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "callback", "params": ["List<HandleCallbackParam>"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> callback(List<HandleCallbackParam> callbackParamList) {        for (HandleCallbackParam handleCallbackParam: callbackParamList) {            ReturnT<String> callbackResult = callback(handleCallbackParam);            logger.debug(\">>>>>>>>> JobApiController.callback {}, handleCallbackParam={}, callbackResult={}\",                    (callbackResult.getCode()==IJobHandler.SUCCESS.getCode()?\"success\":\"fail\"), handleCallbackParam, callbackResult);        }        return ReturnT.SUCCESS;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/service/impl/AdminBizImpl.java", "stars": "1", "class": {"name": "AdminBizImpl", "extends": null, "implements": ["AdminBiz"], "modifiers": ["public"]}}, {"method_name": "callback", "params": ["HandleCallbackParam"], "throws": null, "modifiers": ["private"], "return_type": "ReturnT<String>", "snippet": "    private ReturnT<String> callback(HandleCallbackParam handleCallbackParam) {        // valid log item        XxlJobLog log = xxlJobLogDao.load(handleCallbackParam.getLogId());        if (log == null) {            return new ReturnT<String>(ReturnT.FAIL_CODE, \"log item not found.\");        }        if (log.getHandleCode() > 0) {            return new ReturnT<String>(ReturnT.FAIL_CODE, \"log repeate callback.\");     // avoid repeat callback, trigger child job etc        }        // trigger success, to trigger child job        String callbackMsg = null;        if (IJobHandler.SUCCESS.getCode() == handleCallbackParam.getExecuteResult().getCode()) {            XxlJobInfo xxlJobInfo = xxlJobInfoDao.loadById(log.getJobId());            if (xxlJobInfo!=null && xxlJobInfo.getChildJobId()!=null && xxlJobInfo.getChildJobId().trim().length()>0) {                callbackMsg = \"<br><br><span style=\\\"color:#00c0ef;\\\" > >>>>>>>>>>>\"+ I18nUtil.getString(\"jobconf_trigger_child_run\") +\"<<<<<<<<<<< </span><br>\";                String[] childJobIds = xxlJobInfo.getChildJobId().split(\",\");                for (int i = 0; i < childJobIds.length; i++) {                    int childJobId = (childJobIds[i]!=null && childJobIds[i].trim().length()>0 && isNumeric(childJobIds[i]))?Integer.valueOf(childJobIds[i]):-1;                    if (childJobId > 0) {                        JobTriggerPoolHelper.trigger(childJobId, TriggerTypeEnum.PARENT, -1, null, null);                        ReturnT<String> triggerChildResult = ReturnT.SUCCESS;                        // add msg                        callbackMsg += MessageFormat.format(I18nUtil.getString(\"jobconf_callback_child_msg1\"),                                (i+1),                                childJobIds.length,                                childJobIds[i],                                (triggerChildResult.getCode()==ReturnT.SUCCESS_CODE?I18nUtil.getString(\"system_success\"):I18nUtil.getString(\"system_fail\")),                                triggerChildResult.getMsg());                    } else {                        callbackMsg += MessageFormat.format(I18nUtil.getString(\"jobconf_callback_child_msg2\"),                                (i+1),                                childJobIds.length,                                childJobIds[i]);                    }                }            }        }        // handle msg        StringBuffer handleMsg = new StringBuffer();        if (log.getHandleMsg()!=null) {            handleMsg.append(log.getHandleMsg()).append(\"<br>\");        }        if (handleCallbackParam.getExecuteResult().getMsg() != null) {            handleMsg.append(handleCallbackParam.getExecuteResult().getMsg());        }        if (callbackMsg != null) {            handleMsg.append(callbackMsg);        }        // success, save log        log.setHandleTime(new Date());        log.setHandleCode(handleCallbackParam.getExecuteResult().getCode());        log.setHandleMsg(handleMsg.toString());        xxlJobLogDao.updateHandleInfo(log);        return ReturnT.SUCCESS;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/service/impl/AdminBizImpl.java", "stars": "1", "class": {"name": "AdminBizImpl", "extends": null, "implements": ["AdminBiz"], "modifiers": ["public"]}}, {"method_name": "isNumeric", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isNumeric(String str){        try {            int result = Integer.valueOf(str);            return true;        } catch (NumberFormatException e) {            return false;        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/service/impl/AdminBizImpl.java", "stars": "1", "class": {"name": "AdminBizImpl", "extends": null, "implements": ["AdminBiz"], "modifiers": ["public"]}}, {"method_name": "registry", "params": ["RegistryParam"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> registry(RegistryParam registryParam) {        // valid        if (!StringUtils.hasText(registryParam.getRegistryGroup())                || !StringUtils.hasText(registryParam.getRegistryKey())                || !StringUtils.hasText(registryParam.getRegistryValue())) {            return new ReturnT<String>(ReturnT.FAIL_CODE, \"Illegal Argument.\");        }        int ret = xxlJobRegistryDao.registryUpdate(registryParam.getRegistryGroup(), registryParam.getRegistryKey(), registryParam.getRegistryValue(), new Date());        if (ret < 1) {            xxlJobRegistryDao.registrySave(registryParam.getRegistryGroup(), registryParam.getRegistryKey(), registryParam.getRegistryValue(), new Date());            // fresh            freshGroupRegistryInfo(registryParam);        }        return ReturnT.SUCCESS;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/service/impl/AdminBizImpl.java", "stars": "1", "class": {"name": "AdminBizImpl", "extends": null, "implements": ["AdminBiz"], "modifiers": ["public"]}}, {"method_name": "registryRemove", "params": ["RegistryParam"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> registryRemove(RegistryParam registryParam) {        // valid        if (!StringUtils.hasText(registryParam.getRegistryGroup())                || !StringUtils.hasText(registryParam.getRegistryKey())                || !StringUtils.hasText(registryParam.getRegistryValue())) {            return new ReturnT<String>(ReturnT.FAIL_CODE, \"Illegal Argument.\");        }        int ret = xxlJobRegistryDao.registryDelete(registryParam.getRegistryGroup(), registryParam.getRegistryKey(), registryParam.getRegistryValue());        if (ret > 0) {            // fresh            freshGroupRegistryInfo(registryParam);        }        return ReturnT.SUCCESS;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/service/impl/AdminBizImpl.java", "stars": "1", "class": {"name": "AdminBizImpl", "extends": null, "implements": ["AdminBiz"], "modifiers": ["public"]}}, {"method_name": "freshGroupRegistryInfo", "params": ["RegistryParam"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void freshGroupRegistryInfo(RegistryParam registryParam){        // Under consideration, prevent affecting core tables    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/service/impl/AdminBizImpl.java", "stars": "1", "class": {"name": "AdminBizImpl", "extends": null, "implements": ["AdminBiz"], "modifiers": ["public"]}}, {"method_name": "dumpMapping", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dumpMapping(int[][][] table) {        for (int i = 0; i < 9; i++) {            System.out.println(\"dir = \" + i);            for (int j = 0; j < 11; j++) {                System.out.println(\"  act = \" + j + \" : \" + table[i][j][0] + \" \" + table[i][j][1] + \" \" + table[i][j][2] + \" \" + table[i][j][3]);            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/AxisKeyProcessor.java", "stars": "4", "class": {"name": "AxisKeyProcessor", "extends": "KeyProcessor", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "recalcMapping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void recalcMapping() {        // System.out.println(\"** recalc mapping **\");        for (int dir = 0; dir < keyTable.length; dir++) {            for (int st = 0; st < keyTable[0].length; st++) {                if (gamepad.getAxisType() == Gamepad.AXIS_POV) {                    keyTable[dir][st] = keyTablePOV8[dir][st];                }                else {                    keyTable[dir][st] = keyTableXY8[dir][st];                }            }        }        for (int dir = 0; dir < convertTable4.length; dir++) {            if (mapper[dir].getStatus() == ComponentStatus.STATUS_UNUSED) {                int[][] table = convertTable4[dir];                if (table != null) {                    for (int i = 0; i < table.length; i++) {                        int[] entry = table[i];                        if (gamepad.getAxisType() == Gamepad.AXIS_POV) {                            keyTable[entry[0]][entry[1]] = keyTablePOV4[entry[0]][entry[1]];                        }                        else {                            keyTable[entry[0]][entry[1]] = keyTableXY4[entry[0]][entry[1]];                        }                    }                }            }        }        // dumpMapping(keyTable);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/AxisKeyProcessor.java", "stars": "4", "class": {"name": "AxisKeyProcessor", "extends": "KeyProcessor", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(int state, int action) {        int[] entry = keyTable[state][action];        if (entry[0] != Gamepad.DIR_ERROR) {            release(mapper[entry[0]]);            if (entry[1] != Gamepad.DIR_ERROR) {                release(mapper[entry[1]]);            }        }        if (entry[2] != Gamepad.DIR_ERROR) {            press(mapper[entry[2]]);            if (entry[3] != Gamepad.DIR_ERROR) {                press(mapper[entry[3]]);            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/AxisKeyProcessor.java", "stars": "4", "class": {"name": "AxisKeyProcessor", "extends": "KeyProcessor", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate() {\t\tif (Config.DEVELOPER_MODE && Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {\t\t\tStrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().penaltyDialog().build());\t\t\tStrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectAll().penaltyDeath().build());\t\t}\t\tsuper.onCreate();\t\tinitImageLoader(getApplicationContext());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/UILApplication.java", "stars": "74", "class": {"name": "UILApplication", "extends": "Application", "implements": null, "modifiers": ["public"]}}, {"method_name": "initImageLoader", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void initImageLoader(Context context) {\t\t// This configuration tuning is custom. You can tune every option, you may tune some of them,\t\t// or you can create default configuration by\t\t//  ImageLoaderConfiguration.createDefault(this);\t\t// method.\t\tImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)\t\t\t\t.threadPriority(Thread.NORM_PRIORITY - 2)\t\t\t\t.denyCacheImageMultipleSizesInMemory()\t\t\t\t.discCacheFileNameGenerator(new Md5FileNameGenerator())\t\t\t\t.tasksProcessingOrder(QueueProcessingType.LIFO)\t\t\t\t.writeDebugLogs() // Remove for release app\t\t\t\t.build();\t\t// Initialize ImageLoader with configuration.\t\tImageLoader.getInstance().init(config);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/UILApplication.java", "stars": "74", "class": {"name": "UILApplication", "extends": "Application", "implements": null, "modifiers": ["public"]}}, {"method_name": "calculateDistanceToFinalSnap", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int[] calculateDistanceToFinalSnap (android.support.v7.widget.RecyclerView.LayoutManager p0, android.view.View p1)\t{\t\treturn n_calculateDistanceToFinalSnap (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSnapHelper.java", "stars": "2", "class": {"name": "EndSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_calculateDistanceToFinalSnap", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int[] n_calculateDistanceToFinalSnap (android.support.v7.widget.RecyclerView.LayoutManager p0, android.view.View p1);\tpublic android.view.View findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0)\t{\t\treturn n_findSnapView (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSnapHelper.java", "stars": "2", "class": {"name": "EndSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "findSnapView", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0)\t{\t\treturn n_findSnapView (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSnapHelper.java", "stars": "2", "class": {"name": "EndSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_findSnapView", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSnapHelper.java", "stars": "2", "class": {"name": "EndSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSnapHelper.java", "stars": "2", "class": {"name": "EndSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EndSnapHelper.java", "stars": "2", "class": {"name": "EndSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["String", "int", "List<String>", "Owner"], "throws": null, "modifiers": ["public"], "return_type": "Car", "snippet": "    public Car init(String type, int gas, List<String> cords, Owner owner){        this.type = type;        this.gas = gas;        this.cords = cords;        this.owner = owner;        return this;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/test/java/me/ryandw11/ods/tests/Car.java", "stars": "2", "class": {"name": "Car", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType(){        return type;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/test/java/me/ryandw11/ods/tests/Car.java", "stars": "2", "class": {"name": "Car", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGas", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getGas(){        return gas;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/test/java/me/ryandw11/ods/tests/Car.java", "stars": "2", "class": {"name": "Car", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getCords(){        return cords;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/test/java/me/ryandw11/ods/tests/Car.java", "stars": "2", "class": {"name": "Car", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOwner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Owner", "snippet": "    public Owner getOwner(){        return owner;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/test/java/me/ryandw11/ods/tests/Car.java", "stars": "2", "class": {"name": "Car", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "serialize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ObjectTag", "snippet": "    public ObjectTag serialize(int i){        ObjectTag ot = new ObjectTag(\"car\" + i);        ot.addTag(new StringTag(\"type\", type));        ot.addTag(new IntTag(\"gas\", gas));        ot.addTag(ODS.wrap(\"cords\", cords));        ot.addTag(owner.serialize());        return ot;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/test/java/me/ryandw11/ods/tests/Car.java", "stars": "2", "class": {"name": "Car", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "minPathSum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int minPathSum(int[][] grid) {        int m = grid.length, n = grid[0].length;        int[][] dp = new int[m][n];        dp[m - 1][n - 1] = grid[m - 1][n - 1];        for(int i = m - 1; i >= 0; i --) {            for(int j = n - 1; j >= 0; j --) {                if(i == m - 1 && j == n - 1) {                    continue;                } else if(i + 1 >= m) {                    dp[i][j] = grid[i][j] + dp[i][j + 1];                } else if(j + 1 >= n) {                    dp[i][j] = grid[i][j] + dp[i + 1][j];                } else {                    dp[i][j] = grid[i][j] + Math.min(dp[i + 1][j], dp[i][j + 1]);                }            }        }        return dp[0][0];    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/MinimumPathSum.java", "stars": "1", "class": {"name": "MinimumPathSum", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_home);        b1 = findViewById(R.id.b1);        et1 = findViewById(R.id.et1);        b1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String pass_value = et1.getText().toString();                Intent intent = new Intent(HomeActivity.this,FirstActivity.class);                intent.putExtra(\"pass_value\",pass_value);                startActivity(intent);            }        });    }", "url": "https://raw.githubusercontent.com/hashtrojans/SampleApp/master/app/src/main/java/com/expert/splashapp/HomeActivity.java", "stars": "1", "class": {"name": "HomeActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return username;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username) {        this.username = username;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getIcon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIcon() {        return icon;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setIcon", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIcon(String icon) {        this.icon = icon;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEmail() {        return email;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEmail(String email) {        this.email = email;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNickName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNickName() {        return nickName;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setNickName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNickName(String nickName) {        this.nickName = nickName;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNote", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNote() {        return note;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setNote", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNote(String note) {        this.note = note;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Date createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLoginTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getLoginTime() {        return loginTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLoginTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoginTime(Date loginTime) {        this.loginTime = loginTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(Integer status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(getClass().getSimpleName());        sb.append(\" [\");        sb.append(\"Hash = \").append(hashCode());        sb.append(\", id=\").append(id);        sb.append(\", username=\").append(username);        sb.append(\", password=\").append(password);        sb.append(\", icon=\").append(icon);        sb.append(\", email=\").append(email);        sb.append(\", nickName=\").append(nickName);        sb.append(\", note=\").append(note);        sb.append(\", createTime=\").append(createTime);        sb.append(\", loginTime=\").append(loginTime);        sb.append(\", status=\").append(status);        sb.append(\", serialVersionUID=\").append(serialVersionUID);        sb.append(\"]\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdmin.java", "stars": "2", "class": {"name": "UmsAdmin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getClasses", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<Class>", "snippet": "  public Set<Class<? extends T>> getClasses() {    return matches;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "ResolverUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassLoader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ClassLoader", "snippet": "  public ClassLoader getClassLoader() {    return classloader == null ? Thread.currentThread().getContextClassLoader() : classloader;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "ResolverUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setClassLoader", "params": ["ClassLoader"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setClassLoader(ClassLoader classloader) {    this.classloader = classloader;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "ResolverUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findImplementations", "params": ["Class<?>", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResolverUtil<T>", "snippet": "  public ResolverUtil<T> findImplementations(Class<?> parent, String... packageNames) {    if (packageNames == null) {      return this;    }    Test test = new IsA(parent);    for (String pkg : packageNames) {      find(test, pkg);    }    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "ResolverUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAnnotated", "params": ["Class<Annotation>", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResolverUtil<T>", "snippet": "  public ResolverUtil<T> findAnnotated(Class<? extends Annotation> annotation, String... packageNames) {    if (packageNames == null) {      return this;    }    Test test = new AnnotatedWith(annotation);    for (String pkg : packageNames) {      find(test, pkg);    }    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "ResolverUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find", "params": ["Test", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResolverUtil<T>", "snippet": "  public ResolverUtil<T> find(Test test, String packageName) {    String path = getPackagePath(packageName);    try {      List<String> children = VFS.getInstance().list(path);      for (String child : children) {        if (child.endsWith(\".class\")) {          addIfMatching(test, child);        }      }    } catch (IOException ioe) {      log.error(\"Could not read package: \" + packageName, ioe);    }    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "ResolverUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPackagePath", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getPackagePath(String packageName) {    return packageName == null ? null : packageName.replace('.', '/');  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "ResolverUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addIfMatching", "params": ["Test", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void addIfMatching(Test test, String fqn) {    try {      String externalName = fqn.substring(0, fqn.indexOf('.')).replace('/', '.');      ClassLoader loader = getClassLoader();      if (log.isDebugEnabled()) {        log.debug(\"Checking to see if class \" + externalName + \" matches criteria [\" + test + \"]\");      }      Class<?> type = loader.loadClass(externalName);      if (test.matches(type)) {        matches.add((Class<T>) type);      }    } catch (Throwable t) {      log.warn(\"Could not examine class '\" + fqn + \"'\" + \" due to a \" +          t.getClass().getName() + \" with message: \" + t.getMessage());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "ResolverUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "matches", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean matches(Class<?> type) {      return type != null && parent.isAssignableFrom(type);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "IsA", "extends": null, "implements": ["Test"], "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {      return \"is assignable to \" + parent.getSimpleName();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "IsA", "extends": null, "implements": ["Test"], "modifiers": ["public", "static"]}}, {"method_name": "matches", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean matches(Class<?> type) {      return type != null && type.isAnnotationPresent(annotation);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "AnnotatedWith", "extends": null, "implements": ["Test"], "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {      return \"annotated with @\" + annotation.getSimpleName();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ResolverUtil.java", "stars": "15", "class": {"name": "AnnotatedWith", "extends": null, "implements": ["Test"], "modifiers": ["public", "static"]}}, {"method_name": "validateDepNameUniqueness", "params": ["List<FlowTriggerDependency>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateDepNameUniqueness(final List<FlowTriggerDependency> dependencies) {    final Set<String> seen = new HashSet<>();    for (final FlowTriggerDependency dep : dependencies) {      // set.add() returns false when there exists duplicate      Preconditions.checkArgument(seen.add(dep.getName()), String.format(\"duplicate dependency\"          + \".name %s found, dependency.name should be unique\", dep.getName()));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTrigger.java", "stars": "18", "class": {"name": "FlowTrigger", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"FlowTrigger{\" +        \"schedule=\" + this.schedule +        \", maxWaitDurationInMins=\" + this.maxWaitDuration +        \"\\n \" + StringUtils.join(this.dependencies.values(), \"\\n\") + '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTrigger.java", "stars": "18", "class": {"name": "FlowTrigger", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "validateDepDefinitionUniqueness", "params": ["List<FlowTriggerDependency>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateDepDefinitionUniqueness(final List<FlowTriggerDependency> dependencies) {    final Set<String> seen = new HashSet<>();    for (final FlowTriggerDependency dep : dependencies) {      final Map<String, String> props = dep.getProps();      // set.add() returns false when there exists duplicate      Preconditions.checkArgument(seen.add(dep.getType() + \":\" + props.toString()), String.format          (\"duplicate dependency config %s found, dependency config should be unique\",              dep.getName()));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTrigger.java", "stars": "18", "class": {"name": "FlowTrigger", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "validateDependencies", "params": ["List<FlowTriggerDependency>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateDependencies(final List<FlowTriggerDependency> dependencies) {    validateDepNameUniqueness(dependencies);    validateDepDefinitionUniqueness(dependencies);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTrigger.java", "stars": "18", "class": {"name": "FlowTrigger", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDependencyByName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "FlowTriggerDependency", "snippet": "  public FlowTriggerDependency getDependencyByName(final String name) {    return this.dependencies.get(name);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTrigger.java", "stars": "18", "class": {"name": "FlowTrigger", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDependencies", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<FlowTriggerDependency>", "snippet": "  public Collection<FlowTriggerDependency> getDependencies() {    return this.dependencies.values();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTrigger.java", "stars": "18", "class": {"name": "FlowTrigger", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMaxWaitDuration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Optional<Duration>", "snippet": "  public Optional<Duration> getMaxWaitDuration() {    return Optional.ofNullable(this.maxWaitDuration);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTrigger.java", "stars": "18", "class": {"name": "FlowTrigger", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSchedule", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CronSchedule", "snippet": "  public CronSchedule getSchedule() {    return this.schedule;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTrigger.java", "stars": "18", "class": {"name": "FlowTrigger", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "onCheckedChanged", "params": ["android", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCheckedChanged (android.widget.CompoundButton p0, boolean p1)\t{\t\tn_onCheckedChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/SwitchRenderer.java", "stars": "2", "class": {"name": "SwitchRenderer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onCheckedChanged", "params": ["android", "boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onCheckedChanged (android.widget.CompoundButton p0, boolean p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/SwitchRenderer.java", "stars": "2", "class": {"name": "SwitchRenderer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/SwitchRenderer.java", "stars": "2", "class": {"name": "SwitchRenderer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/SwitchRenderer.java", "stars": "2", "class": {"name": "SwitchRenderer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "isJobKilling", "params": ["Long"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isJobKilling(Long jobId) {        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/job/scheduler/processinner/StandAloneScheduler.java", "stars": "23", "class": {"name": "StandAloneScheduler", "extends": "ProcessInnerScheduler", "implements": null, "modifiers": ["public"]}}, {"method_name": "matches", "params": ["InventoryCrafting", "World"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean matches(InventoryCrafting inv, World worldIn) {        ItemStack stackColorable = ItemStack.EMPTY;        ItemStack stackPicker = ItemStack.EMPTY;        if (inv.getWidth() == 3 && inv.getHeight() == 3) {            for (int i = 0; i < 3; i++)                for (int j = 0; j < 3; j++) {                    ItemStack stack = inv.getStackInRowAndColumn(i, j);                    if (stack.getItem() instanceof IItemColorable || stack.getItem() instanceof ItemColorPicker || stack.isEmpty()) {                        if (stack.getItem() instanceof IItemColorable && stackColorable.isEmpty()) {                            stackColorable = stack;                        } else if (stack.getItem() instanceof ItemColorPicker && stackPicker.isEmpty()) {                            stackPicker = stack;                        } else if (stack.isEmpty()) {                        } else return false;                    } else return false;                }        }        return !stackColorable.isEmpty() && !stackPicker.isEmpty();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Recipes/ColorizerRecipe.java", "stars": "2", "class": {"name": "ColorizerRecipe", "extends": "IForgeRegistryEntry", "implements": ["IRecipe"], "modifiers": ["public"]}}, {"method_name": "getCraftingResult", "params": ["InventoryCrafting"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack getCraftingResult(InventoryCrafting inv) {        ItemStack stackColorable = ItemStack.EMPTY;        ItemStack stackPicker = ItemStack.EMPTY;        if (inv.getWidth() == 3 && inv.getHeight() == 3) {            for (int i = 0; i < 3; i++)                for (int j = 0; j < 3; j++) {                    ItemStack stack = inv.getStackInRowAndColumn(i, j);                    if (stack.getItem() instanceof IItemColorable || stack.getItem() instanceof ItemColorPicker || stack.isEmpty()) {                        if (stack.getItem() instanceof IItemColorable && stackColorable.isEmpty()) {                            stackColorable = stack;                        } else if (stack.getItem() instanceof ItemColorPicker && stackPicker.isEmpty()) {                            stackPicker = stack;                        } else if (stack.isEmpty()) {                        } else return ItemStack.EMPTY;                    } else return ItemStack.EMPTY;                }        }        ItemStack copy = stackColorable.copy();        IItemColorable handler = (IItemColorable) stackColorable.getItem();        Vec3d color = ItemColorPicker.getColor(stackPicker);        handler.setColor(copy, (float) color.x, (float) color.y, (float) color.z);        return copy;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Recipes/ColorizerRecipe.java", "stars": "2", "class": {"name": "ColorizerRecipe", "extends": "IForgeRegistryEntry", "implements": ["IRecipe"], "modifiers": ["public"]}}, {"method_name": "canFit", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canFit(int width, int height) {        return width == 3 && height == 3;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Recipes/ColorizerRecipe.java", "stars": "2", "class": {"name": "ColorizerRecipe", "extends": "IForgeRegistryEntry", "implements": ["IRecipe"], "modifiers": ["public"]}}, {"method_name": "getRecipeOutput", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack getRecipeOutput() {        return ItemStack.EMPTY;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Recipes/ColorizerRecipe.java", "stars": "2", "class": {"name": "ColorizerRecipe", "extends": "IForgeRegistryEntry", "implements": ["IRecipe"], "modifiers": ["public"]}}, {"method_name": "getRemainingItems", "params": ["InventoryCrafting"], "throws": null, "modifiers": ["public"], "return_type": "NonNullList<ItemStack>", "snippet": "    public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv) {        NonNullList<ItemStack> result = NonNullList.withSize(inv.getSizeInventory(), ItemStack.EMPTY);        for (int i = 0; i < result.size(); ++i)            if (inv.getStackInSlot(i).getItem() instanceof ItemColorPicker)                result.set(i, inv.getStackInSlot(i));        return result;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Recipes/ColorizerRecipe.java", "stars": "2", "class": {"name": "ColorizerRecipe", "extends": "IForgeRegistryEntry", "implements": ["IRecipe"], "modifiers": ["public"]}}, {"method_name": "isDynamic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDynamic() {        return true;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Recipes/ColorizerRecipe.java", "stars": "2", "class": {"name": "ColorizerRecipe", "extends": "IForgeRegistryEntry", "implements": ["IRecipe"], "modifiers": ["public"]}}, {"method_name": "setApplicationContext", "params": ["ApplicationContext"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        GetBeanUtil.applicationContext = applicationContext;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/GetBeanUtil.java", "stars": "1", "class": {"name": "GetBeanUtil", "extends": null, "implements": ["ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object getBean(String name) {        return applicationContext.getBean(name);//name\u8868\u793a\u5176\u4ed6\u8981\u6ce8\u5165\u7684\u6ce8\u89e3name\u540d    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/GetBeanUtil.java", "stars": "1", "class": {"name": "GetBeanUtil", "extends": null, "implements": ["ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T getBean(Class<T> clazz) {        if(applicationContext==null){            System.out.println(\"applicationContext\u662f\u7a7a\u7684\");        }else{            System.out.println(\"applicationContext\u4e0d\u662f\u7a7a\u7684\");        }        return applicationContext.getBean(clazz);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/GetBeanUtil.java", "stars": "1", "class": {"name": "GetBeanUtil", "extends": null, "implements": ["ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(DrinkandDelightsprintOracleApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/DrinkandDelightsprintOracleApplication.java", "stars": "1", "class": {"name": "DrinkandDelightsprintOracleApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getWidth() {\t\treturn width;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/ImageSize.java", "stars": "74", "class": {"name": "ImageSize", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getHeight() {\t\treturn height;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/ImageSize.java", "stars": "74", "class": {"name": "ImageSize", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scaleDown", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ImageSize", "snippet": "\tpublic ImageSize scaleDown(int sampleSize) {\t\treturn new ImageSize(width / sampleSize, height / sampleSize);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/ImageSize.java", "stars": "74", "class": {"name": "ImageSize", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scale", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "ImageSize", "snippet": "\tpublic ImageSize scale(float scale) {\t\treturn new ImageSize((int) (width * scale), (int) (height * scale));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/ImageSize.java", "stars": "74", "class": {"name": "ImageSize", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn new StringBuilder(TO_STRING_MAX_LENGHT).append(width).append(SEPARATOR).append(height).toString();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/ImageSize.java", "stars": "74", "class": {"name": "ImageSize", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "controlModelAccess", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void controlModelAccess(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\t\t// update encondig\t\treq.setCharacterEncoding(\"UTF-8\");\t\ttry {\t\t\tString className = req.getParameter(\"controle\");\t\t\tString realPath = req.getServletContext().getRealPath(\"/WEB-INF/classes\");\t\t\tAction command = Action.newInstance(className, realPath);\t\t\t// execute business logic\t\t\tString redirectedPage = command.executa(req, res);\t\t\tString url = \"/\" + redirectedPage;\t\t\t// update encoding of the response to utf-8\t\t\tres.setCharacterEncoding(\"UTF-8\");\t\t\tres.setContentType(\"text/html;charset=UTF-8\");\t\t\t// redireciona\t\t\tif (command.isRedirect())\t\t\t\tres.sendRedirect(res.encodeRedirectURL(url));\t\t\telse\t\t\t\treq.getRequestDispatcher(url).forward(req, res);\t\t} catch (Exception e) {\t\t\tString msg = \"ServletContrador Error\";\t\t\tmsg += e.getMessage();\t\t\tthrow new ControllerMvcException(msg, e);\t\t}\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/mini-mvc/src/main/java/br/me/mvc/controle/ServletControlador.java", "stars": "2", "class": {"name": "ServletControlador", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\t\t\tthrows ServletException, IOException {\t\tcontrolModelAccess(request, response);\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/mini-mvc/src/main/java/br/me/mvc/controle/ServletControlador.java", "stars": "2", "class": {"name": "ServletControlador", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\t\t\tthrows ServletException, IOException {\t\tcontrolModelAccess(request, response);\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/mini-mvc/src/main/java/br/me/mvc/controle/ServletControlador.java", "stars": "2", "class": {"name": "ServletControlador", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelation.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelation.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAdminId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getAdminId() {        return adminId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelation.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAdminId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdminId(Long adminId) {        this.adminId = adminId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelation.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPermissionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getPermissionId() {        return permissionId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelation.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPermissionId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPermissionId(Long permissionId) {        this.permissionId = permissionId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelation.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getType() {        return type;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelation.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setType", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(Integer type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelation.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(getClass().getSimpleName());        sb.append(\" [\");        sb.append(\"Hash = \").append(hashCode());        sb.append(\", id=\").append(id);        sb.append(\", adminId=\").append(adminId);        sb.append(\", permissionId=\").append(permissionId);        sb.append(\", type=\").append(type);        sb.append(\", serialVersionUID=\").append(serialVersionUID);        sb.append(\"]\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelation.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "BeamManager", "snippet": "    public static BeamManager getInstance(Context context) {        if (sInstance == null) {            sInstance = new BeamManager(context);        }        return sInstance;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        mDiscoveryManager.removeListener(this);        mDiscoveryManager.stop();        mDiscoveryManager.onDestroy();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "getDevices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,ConnectableDevice>", "snippet": "    public Map<String, ConnectableDevice> getDevices() {        Map<String, ConnectableDevice> devices = mDiscoveryManager.getCompatibleDevices();        for (Map.Entry<String, ConnectableDevice> entry : devices.entrySet()){            if (entry.getValue().getServices().isEmpty()) {                devices.remove(entry.getKey());            }        }        return devices;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "getConnectedDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ConnectableDevice", "snippet": "    public ConnectableDevice getConnectedDevice() {        return mCurrentDevice;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "hasCastDevices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasCastDevices() {        return mDiscoveryManager.getCompatibleDevices().size() > 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return mConnected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "getMediaControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaControl", "snippet": "    public MediaControl getMediaControl() {        return mCurrentDevice.getCapability(MediaControl.class);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "getVolumeControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "VolumeControl", "snippet": "    public VolumeControl getVolumeControl() {        if (mCurrentDevice != null && mCurrentDevice.hasCapability(VolumeControl.Volume_Get) && mCurrentDevice.hasCapability(VolumeControl.Volume_Get) && mCurrentDevice.hasCapability(VolumeControl.Volume_Subscribe)) {            return mCurrentDevice.getCapability(VolumeControl.class);        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "stopVideo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean stopVideo() {        if (!mConnected || mLaunchSession == null) return false;        mLaunchSession.close(null);        mLaunchSession = null;        mStreamInfo = null;        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "playVideo", "params": ["StreamInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playVideo(StreamInfo info) {        playVideo(info, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "playVideo", "params": ["StreamInfo", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playVideo(StreamInfo info, final MediaPlayer.LaunchListener listener) {        if (!mConnected) listener.onError(ServiceCommandError.getError(503));        mStreamInfo = info;        String location = info.getVideoLocation();        String subsLocation = null;        if(info.getSubtitleLanguage() != null && !info.getSubtitleLanguage().isEmpty() && !info.getSubtitleLanguage().equals(\"no-subs\")) {            File srtFile = new File(SubsProvider.getStorageLocation(mContext), mStreamInfo.getMedia().videoId + \"-\" + mStreamInfo.getSubtitleLanguage() + \".srt\");            File vttFile = new File(SubsProvider.getStorageLocation(mContext), mStreamInfo.getMedia().videoId + \"-\" + mStreamInfo.getSubtitleLanguage() + \".vtt\");            try {                if (!vttFile.exists() && srtFile.exists()) {                    FormatSRT srt = new FormatSRT();                    TimedTextObject timedTextObject = srt.parseFile(srtFile.getName(), FileUtils.getContentsAsString(srtFile.getAbsolutePath()));                    String[] vttStr = timedTextObject.toVTT();                    FileUtils.saveStringFile(vttStr, vttFile);                }            } catch (Exception e) {                Timber.e(\"Error creating VTT sub files\", e);            }            TorrentStreamServer.getInstance().setStreamSrtSubtitle(srtFile);            TorrentStreamServer.getInstance().setStreamVttSubtitle(vttFile);            if(mCurrentDevice.hasCapability(MediaPlayer.Subtitles_Vtt)) {                subsLocation = location.substring(0, location.lastIndexOf('.')) + \".vtt\";            } else if (mCurrentDevice.hasCapability(MediaPlayer.Subtitles_Srt)) {                subsLocation = location.substring(0, location.lastIndexOf('.')) + \".srt\";            }        } else {            TorrentStreamServer.getInstance().setStreamSrtSubtitle(null);            TorrentStreamServer.getInstance().setStreamVttSubtitle(null);        }        try {            URL url = new URL(location);            URI uri = new URI(url.getProtocol(), url.getUserInfo(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(), url.getRef());            location = uri.toString();            if(subsLocation != null) {                URL subsUrl = new URL(subsLocation);                URI subsUri = new URI(subsUrl.getProtocol(), subsUrl.getUserInfo(), subsUrl.getHost(), subsUrl.getPort(), subsUrl.getPath(), subsUrl.getQuery(), subsUrl.getRef());                subsLocation = subsUri.toString();            }        } catch (MalformedURLException | URISyntaxException e) {            e.printStackTrace();        }        String title = info.getTitle();        String imageUrl = info.getImageUrl() == null ? \"https://butterproject.org/images/header-logo.png\" : info.getImageUrl();        //String url, String mimeType, String title, String description, String iconSrc, boolean shouldLoop, LaunchListener listener        if (mCurrentDevice != null) {            MediaInfo mediaInfo = new MediaInfo(location, subsLocation, \"video/mp4\", title, \"\");            mediaInfo.addImages(new ImageInfo(imageUrl));            mCurrentDevice.getCapability(MediaPlayer.class).playMedia(mediaInfo, false, new MediaPlayer.LaunchListener() {                @Override                public void onSuccess(MediaPlayer.MediaLaunchObject object) {                    mLaunchSession = object.launchSession;                    if (listener != null)                        listener.onSuccess(object);                }                @Override                public void onError(ServiceCommandError error) {                    Timber.e(error.getMessage());                    if (listener != null)                        listener.onError(error);                }            });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "connect", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect(ConnectableDevice castingDevice) {        if (castingDevice == mCurrentDevice) return;        if (mCurrentDevice != null) {            mCurrentDevice.removeListener(this);            mCurrentDevice.disconnect();            mConnected = false;        }        mCurrentDevice = castingDevice;        if (castingDevice != null) {            mCurrentDevice.addListener(this);            mCurrentDevice.connect();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {        if (mCurrentDevice != null) {            mConnected = false;            mCurrentDevice.disconnect();            mCurrentDevice.removeListener(this);        }        for (BeamListener listener : mListeners)            listener.updateBeamIcon();        onDeviceDisconnected(mCurrentDevice);        mCurrentDevice = null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "addDiscoveryListener", "params": ["DiscoveryManagerListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDiscoveryListener(DiscoveryManagerListener listener) {        mDiscoveryManager.addListener(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "removeDiscoveryListener", "params": ["DiscoveryManagerListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeDiscoveryListener(DiscoveryManagerListener listener) {        mDiscoveryManager.removeListener(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "addListener", "params": ["BeamListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addListener(BeamListener listener) {        mListeners.add(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "removeListener", "params": ["BeamListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeListener(BeamListener listener) {        mListeners.remove(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "addDeviceListener", "params": ["ConnectableDeviceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDeviceListener(ConnectableDeviceListener listener) {        mDeviceListeners.add(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "removeDeviceListener", "params": ["ConnectableDeviceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeDeviceListener(ConnectableDeviceListener listener) {        mDeviceListeners.remove(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "getStreamInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StreamInfo", "snippet": "    public StreamInfo getStreamInfo() {        return mStreamInfo;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceReady", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceReady(ConnectableDevice device) {        if (mPairingAlertDialog.isShowing()) {            mPairingAlertDialog.dismiss();        }        mConnected = true;        for (BeamListener listener : mListeners)            listener.updateBeamIcon();        for(ConnectableDeviceListener listener : mDeviceListeners)            listener.onDeviceReady(device);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceDisconnected", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceDisconnected(ConnectableDevice device) {        mConnected = false;        for (BeamListener listener : mListeners)            listener.updateBeamIcon();        for(ConnectableDeviceListener listener : mDeviceListeners)            listener.onDeviceDisconnected(device);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onPairingRequired", "params": ["ConnectableDevice", "DeviceService", "DeviceService"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPairingRequired(ConnectableDevice device, DeviceService service, DeviceService.PairingType pairingType) {        switch (pairingType) {            case FIRST_SCREEN:                mPairingAlertDialog.show();                break;            case PIN_CODE:                mPairingCodeDialog.show();                break;            case NONE:            default:                break;        }        for(ConnectableDeviceListener listener : mDeviceListeners)            listener.onPairingRequired(device, service, pairingType);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onCapabilityUpdated", "params": ["ConnectableDevice", "List<String>", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCapabilityUpdated(ConnectableDevice device, List<String> added, List<String> removed) {        for(ConnectableDeviceListener listener : mDeviceListeners)            listener.onCapabilityUpdated(device, added, removed);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onConnectionFailed", "params": ["ConnectableDevice", "ServiceCommandError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConnectionFailed(ConnectableDevice device, ServiceCommandError error) {        Toast.makeText(mContext, R.string.unknown_error, Toast.LENGTH_SHORT).show();        for(ConnectableDeviceListener listener : mDeviceListeners)            listener.onConnectionFailed(device, error);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceAdded", "params": ["DiscoveryManager", "ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceAdded(DiscoveryManager manager, ConnectableDevice device) {        for (BeamListener listener : mListeners)            listener.updateBeamIcon();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceUpdated", "params": ["DiscoveryManager", "ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceUpdated(DiscoveryManager manager, ConnectableDevice device) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceRemoved", "params": ["DiscoveryManager", "ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceRemoved(DiscoveryManager manager, ConnectableDevice device) {        if (device == mCurrentDevice) {            mConnected = false;            mCurrentDevice = null;        }        for (BeamListener listener : mListeners)            listener.updateBeamIcon();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDiscoveryFailed", "params": ["DiscoveryManager", "ServiceCommandError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDiscoveryFailed(DiscoveryManager manager, ServiceCommandError error) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamManager.java", "stars": "4", "class": {"name": "BeamManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "getCountyWiseData", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MutableLiveData<CountryWiseCasePojo>", "snippet": "    public MutableLiveData<CountryWiseCasePojo> getCountyWiseData(String endUrl)    {        return covidPepos.getCountyWiseInfo(endUrl);    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/viwemodel/CovidViewModel.java", "stars": "2", "class": {"name": "CovidViewModel", "extends": "ViewModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllCountyWise", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MutableLiveData<List>", "snippet": "        public MutableLiveData<List<CountryWiseCasePojo>> getAllCountyWise(String endUrl)    {        return covidPepos.getAllCountyWiseInfo(endUrl);    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/viwemodel/CovidViewModel.java", "stars": "2", "class": {"name": "CovidViewModel", "extends": "ViewModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllworldWiseData", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MutableLiveData<AllWorldCasePojo>", "snippet": "    public MutableLiveData<AllWorldCasePojo> getAllworldWiseData(String endUrl)    {        return covidPepos.getAllWorldWise(endUrl);    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/viwemodel/CovidViewModel.java", "stars": "2", "class": {"name": "CovidViewModel", "extends": "ViewModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "splitSingleTable", "params": ["Configuration", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Configuration>", "snippet": "    public static List<Configuration> splitSingleTable(            Configuration configuration, int adviceNum) {        List<Configuration> pluginParams = new ArrayList<Configuration>();        List<String> rangeList;        String splitPkName = configuration.getString(Key.SPLIT_PK);        String column = configuration.getString(Key.COLUMN);        String table = configuration.getString(Key.TABLE);        String where = configuration.getString(Key.WHERE, null);        boolean hasWhere = StringUtils.isNotBlank(where);        //String splitMode = configuration.getString(Key.SPLIT_MODE, \"\");        //if (Constant.SPLIT_MODE_RANDOMSAMPLE.equals(splitMode) && DATABASE_TYPE == DataBaseType.Oracle) {        if (DATABASE_TYPE == DataBaseType.Oracle) {            rangeList = genSplitSqlForOracle(splitPkName, table, where,                    configuration, adviceNum);            // warn: mysql etc to be added...        } else {            Pair<Object, Object> minMaxPK = getPkRange(configuration);            if (null == minMaxPK) {                throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                        \"\u6839\u636e\u5207\u5206\u4e3b\u952e\u5207\u5206\u8868\u5931\u8d25. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");            }            configuration.set(Key.QUERY_SQL, buildQuerySql(column, table, where));            if (null == minMaxPK.getLeft() || null == minMaxPK.getRight()) {                // \u5207\u5206\u540e\u83b7\u53d6\u5230\u7684start/end \u6709 Null \u7684\u60c5\u51b5                pluginParams.add(configuration);                return pluginParams;            }            boolean isStringType = com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE_STRING.equals(configuration                    .getString(com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE));            boolean isLongType = com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE_LONG.equals(configuration                    .getString(com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE));            if (isStringType) {                rangeList = RdbmsRangeSplitWrap.splitAndWrap(                        String.valueOf(minMaxPK.getLeft()),                        String.valueOf(minMaxPK.getRight()), adviceNum,                        splitPkName, \"'\", DATABASE_TYPE);            } else if (isLongType) {                rangeList = RdbmsRangeSplitWrap.splitAndWrap(                        new BigInteger(minMaxPK.getLeft().toString()),                        new BigInteger(minMaxPK.getRight().toString()),                        adviceNum, splitPkName);            } else {                throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                        \"\u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3b\u952e(splitPk) \u7c7b\u578b DataX \u4e0d\u652f\u6301. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");            }        }        String tempQuerySql;        List<String> allQuerySql = new ArrayList<String>();        if (null != rangeList && !rangeList.isEmpty()) {            for (String range : rangeList) {                Configuration tempConfig = configuration.clone();                tempQuerySql = buildQuerySql(column, table, where)                        + (hasWhere ? \" and \" : \" where \") + range;                allQuerySql.add(tempQuerySql);                tempConfig.set(Key.QUERY_SQL, tempQuerySql);                pluginParams.add(tempConfig);            }        } else {            //pluginParams.add(configuration); // this is wrong for new & old split            Configuration tempConfig = configuration.clone();            tempQuerySql = buildQuerySql(column, table, where)                    + (hasWhere ? \" and \" : \" where \")                    + String.format(\" %s IS NOT NULL\", splitPkName);            allQuerySql.add(tempQuerySql);            tempConfig.set(Key.QUERY_SQL, tempQuerySql);            pluginParams.add(tempConfig);        }        // deal pk is null        Configuration tempConfig = configuration.clone();        tempQuerySql = buildQuerySql(column, table, where)                + (hasWhere ? \" and \" : \" where \")                + String.format(\" %s IS NULL\", splitPkName);        allQuerySql.add(tempQuerySql);        LOG.info(\"After split(), allQuerySql=[\\n{}\\n].\",                StringUtils.join(allQuerySql, \"\\n\"));        tempConfig.set(Key.QUERY_SQL, tempQuerySql);        pluginParams.add(tempConfig);        return pluginParams;    }    public static String buildQuerySql(String column, String table,                                       String where) {        String querySql;        if (StringUtils.isBlank(where)) {            querySql = String.format(com.alibaba.datax.plugin.rdbms.reader.Constant.QUERY_SQL_TEMPLATE_WITHOUT_WHERE,                    column, table);        } else {            querySql = String.format(com.alibaba.datax.plugin.rdbms.reader.Constant.QUERY_SQL_TEMPLATE, column,                    table, where);        }        return querySql;    }    @SuppressWarnings(\"resource\")    private static Pair<Object, Object> getPkRange(Configuration configuration) {        String pkRangeSQL = genPKRangeSQL(configuration);        int fetchSize = configuration.getInt(com.alibaba.datax.plugin.rdbms.reader.Constant.FETCH_SIZE);        String jdbcURL = configuration.getString(Key.JDBC_URL);        String username = configuration.getString(Key.USERNAME);        String password = configuration.getString(Key.PASSWORD);        String table = configuration.getString(Key.TABLE);        Connection conn = DBUtil.getConnection(DATABASE_TYPE, jdbcURL, username, password);        Pair<Object, Object> minMaxPK = checkSplitPk(conn, pkRangeSQL, fetchSize, table, username, configuration);        DBUtil.closeDBResources(null, null, conn);        return minMaxPK;    }    public static void precheckSplitPk(Connection conn, String pkRangeSQL, int fetchSize,                                       String table, String username) {        Pair<Object, Object> minMaxPK = checkSplitPk(conn, pkRangeSQL, fetchSize, table, username, null);        if (null == minMaxPK) {            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                    \"\u6839\u636e\u5207\u5206\u4e3b\u952e\u5207\u5206\u8868\u5931\u8d25. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");        }    }    /**     * \u68c0\u6d4bsplitPk\u7684\u914d\u7f6e\u662f\u5426\u6b63\u786e\u3002     * configuration\u4e3anull, \u662fprecheck\u7684\u903b\u8f91\uff0c\u4e0d\u9700\u8981\u56de\u5199PK_TYPE\u5230configuration\u4e2d     */    private static Pair<Object, Object> checkSplitPk(Connection conn, String pkRangeSQL, int fetchSize, String table,                                                     String username, Configuration configuration) {        LOG.info(\"split pk [sql={}] is running... \", pkRangeSQL);        ResultSet rs = null;        Pair<Object, Object> minMaxPK = null;        try {            try {                rs = DBUtil.query(conn, pkRangeSQL, fetchSize);            } catch (Exception e) {                throw RdbmsException.asQueryException(DATABASE_TYPE, e, pkRangeSQL, table, username);            }            ResultSetMetaData rsMetaData = rs.getMetaData();            if (isPKTypeValid(rsMetaData)) {                if (isStringType(rsMetaData.getColumnType(1))) {                    if (configuration != null) {                        configuration                                .set(com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE, com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE_STRING);                    }                    while (DBUtil.asyncResultSetNext(rs)) {                        minMaxPK = new ImmutablePair<Object, Object>(                                rs.getString(1), rs.getString(2));                    }                } else if (isLongType(rsMetaData.getColumnType(1))) {                    if (configuration != null) {                        configuration.set(com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE, com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE_LONG);                    }                    while (DBUtil.asyncResultSetNext(rs)) {                        minMaxPK = new ImmutablePair<Object, Object>(                                rs.getString(1), rs.getString(2));                        // check: string shouldn't contain '.', for oracle                        String minMax = rs.getString(1) + rs.getString(2);                        if (StringUtils.contains(minMax, '.')) {                            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                                    \"\u60a8\u914d\u7f6e\u7684DataX\u5207\u5206\u4e3b\u952e(splitPk)\u6709\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3b\u952e(splitPk) \u7c7b\u578b DataX \u4e0d\u652f\u6301. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");                        }                    }                } else {                    throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                            \"\u60a8\u914d\u7f6e\u7684DataX\u5207\u5206\u4e3b\u952e(splitPk)\u6709\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3b\u952e(splitPk) \u7c7b\u578b DataX \u4e0d\u652f\u6301. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");                }            } else {                throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                        \"\u60a8\u914d\u7f6e\u7684DataX\u5207\u5206\u4e3b\u952e(splitPk)\u6709\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3b\u952e(splitPk) \u7c7b\u578b DataX \u4e0d\u652f\u6301. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");            }        } catch (DataXException e) {            throw e;        } catch (Exception e) {            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK, \"DataX\u5c1d\u8bd5\u5207\u5206\u8868\u53d1\u751f\u9519\u8bef. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\", e);        } finally {            DBUtil.closeDBResources(rs, null, null);        }        return minMaxPK;    }    private static boolean isPKTypeValid(ResultSetMetaData rsMetaData) {        boolean ret = false;        try {            int minType = rsMetaData.getColumnType(1);            int maxType = rsMetaData.getColumnType(2);            boolean isNumberType = isLongType(minType);            boolean isStringType = isStringType(minType);            if (minType == maxType && (isNumberType || isStringType)) {                ret = true;            }        } catch (Exception e) {            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                    \"DataX\u83b7\u53d6\u5207\u5206\u4e3b\u952e(splitPk)\u5b57\u6bb5\u7c7b\u578b\u5931\u8d25. \u8be5\u9519\u8bef\u901a\u5e38\u662f\u7cfb\u7edf\u5e95\u5c42\u5f02\u5e38\u5bfc\u81f4. \u8bf7\u8054\u7cfb\u65fa\u65fa:askdatax\u6216\u8005DBA\u5904\u7406.\");        }        return ret;    }    // warn: Types.NUMERIC is used for oracle! because oracle use NUMBER to    // store INT, SMALLINT, INTEGER etc, and only oracle need to concern    // Types.NUMERIC    private static boolean isLongType(int type) {        boolean isValidLongType = type == Types.BIGINT || type == Types.INTEGER                || type == Types.SMALLINT || type == Types.TINYINT;        switch (SingleTableSplitUtil.DATABASE_TYPE) {            case Oracle:                isValidLongType |= type == Types.NUMERIC;                break;            default:                break;        }        return isValidLongType;    }    private static boolean isStringType(int type) {        return type == Types.CHAR || type == Types.NCHAR                || type == Types.VARCHAR || type == Types.LONGVARCHAR                || type == Types.NVARCHAR;    }    private static String genPKRangeSQL(Configuration configuration) {        String splitPK = configuration.getString(Key.SPLIT_PK).trim();        String table = configuration.getString(Key.TABLE).trim();        String where = configuration.getString(Key.WHERE, null);        return genPKSql(splitPK, table, where);    }    public static String genPKSql(String splitPK, String table, String where) {        String minMaxTemplate = \"SELECT MIN(%s),MAX(%s) FROM %s\";        String pkRangeSQL = String.format(minMaxTemplate, splitPK, splitPK,                table);        if (StringUtils.isNotBlank(where)) {            pkRangeSQL = String.format(\"%s WHERE (%s AND %s IS NOT NULL)\",                    pkRangeSQL, where, splitPK);        }        return pkRangeSQL;    }    /**     * support Number and String split     */    public static List<String> genSplitSqlForOracle(String splitPK,                                                    String table, String where, Configuration configuration,                                                    int adviceNum) {        if (adviceNum < 1) {            throw new IllegalArgumentException(String.format(                    \"\u5207\u5206\u4efd\u6570\u4e0d\u80fd\u5c0f\u4e8e1. \u6b64\u5904:adviceNum=[%s].\", adviceNum));        } else if (adviceNum == 1) {            return null;        }        String whereSql = String.format(\"%s IS NOT NULL\", splitPK);        if (StringUtils.isNotBlank(where)) {            whereSql = String.format(\" WHERE (%s) AND (%s) \", whereSql, where);        } else {            whereSql = String.format(\" WHERE (%s) \", whereSql);        }        Double percentage = configuration.getDouble(Key.SAMPLE_PERCENTAGE, 0.1);        String sampleSqlTemplate = \"SELECT * FROM ( SELECT %s FROM %s SAMPLE (%s) %s ORDER BY DBMS_RANDOM.VALUE) WHERE ROWNUM <= %s ORDER by %s ASC\";        String splitSql = String.format(sampleSqlTemplate, splitPK, table,                percentage, whereSql, adviceNum, splitPK);        int fetchSize = configuration.getInt(com.alibaba.datax.plugin.rdbms.reader.Constant.FETCH_SIZE, 32);        String jdbcURL = configuration.getString(Key.JDBC_URL);        String username = configuration.getString(Key.USERNAME);        String password = configuration.getString(Key.PASSWORD);        Connection conn = DBUtil.getConnection(DATABASE_TYPE, jdbcURL,                username, password);        LOG.info(\"split pk [sql={}] is running... \", splitSql);        ResultSet rs = null;        List<Pair<Object, Integer>> splitedRange = new ArrayList<Pair<Object, Integer>>();        try {            try {                rs = DBUtil.query(conn, splitSql, fetchSize);            } catch (Exception e) {                throw RdbmsException.asQueryException(DATABASE_TYPE, e,                        splitSql, table, username);            }            if (configuration != null) {                configuration                        .set(com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE, Constant.PK_TYPE_MONTECARLO);            }            ResultSetMetaData rsMetaData = rs.getMetaData();            while (DBUtil.asyncResultSetNext(rs)) {                ImmutablePair<Object, Integer> eachPoint = new ImmutablePair<Object, Integer>(                        rs.getObject(1), rsMetaData.getColumnType(1));                splitedRange.add(eachPoint);            }        } catch (DataXException e) {            throw e;        } catch (Exception e) {            throw DataXException.asDataXException(                    DBUtilErrorCode.ILLEGAL_SPLIT_PK,                    \"DataX\u5c1d\u8bd5\u5207\u5206\u8868\u53d1\u751f\u9519\u8bef. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\", e);        } finally {            DBUtil.closeDBResources(rs, null, null);        }        LOG.debug(JSON.toJSONString(splitedRange));        List<String> rangeSql = new ArrayList<String>();        int splitedRangeSize = splitedRange.size();        // warn: splitedRangeSize may be 0 or 1\uff0c\u5207\u5206\u89c4\u5219\u4e3aIS NULL\u4ee5\u53ca IS NOT NULL        // demo: Parameter rangeResult can not be null and its length can not <2. detail:rangeResult=[24999930].        if (splitedRangeSize >= 2) {            // warn: oracle Number is long type here            if (isLongType(splitedRange.get(0).getRight())) {                BigInteger[] integerPoints = new BigInteger[splitedRange.size()];                for (int i = 0; i < splitedRangeSize; i++) {                    integerPoints[i] = new BigInteger(splitedRange.get(i)                            .getLeft().toString());                }                rangeSql.addAll(RdbmsRangeSplitWrap.wrapRange(integerPoints,                        splitPK));                // its ok if splitedRangeSize is 1                rangeSql.add(RdbmsRangeSplitWrap.wrapFirstLastPoint(                        integerPoints[0], integerPoints[splitedRangeSize - 1],                        splitPK));            } else if (isStringType(splitedRange.get(0).getRight())) {                // warn: treated as string type                String[] stringPoints = new String[splitedRange.size()];                for (int i = 0; i < splitedRangeSize; i++) {                    stringPoints[i] = new String(splitedRange.get(i).getLeft()                            .toString());                }                rangeSql.addAll(RdbmsRangeSplitWrap.wrapRange(stringPoints,                        splitPK, \"'\", DATABASE_TYPE));                // its ok if splitedRangeSize is 1                rangeSql.add(RdbmsRangeSplitWrap.wrapFirstLastPoint(                        stringPoints[0], stringPoints[splitedRangeSize - 1],                        splitPK, \"'\", DATABASE_TYPE));            } else {                throw DataXException                        .asDataXException(                                DBUtilErrorCode.ILLEGAL_SPLIT_PK,                                \"\u60a8\u914d\u7f6e\u7684DataX\u5207\u5206\u4e3b\u952e(splitPk)\u6709\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3b\u952e(splitPk) \u7c7b\u578b DataX \u4e0d\u652f\u6301. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");            }        }        return rangeSql;    }}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildQuerySql", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String buildQuerySql(String column, String table,                                       String where) {        String querySql;        if (StringUtils.isBlank(where)) {            querySql = String.format(com.alibaba.datax.plugin.rdbms.reader.Constant.QUERY_SQL_TEMPLATE_WITHOUT_WHERE,                    column, table);        } else {            querySql = String.format(com.alibaba.datax.plugin.rdbms.reader.Constant.QUERY_SQL_TEMPLATE, column,                    table, where);        }        return querySql;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPkRange", "params": ["Configuration"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<Object,Object>", "snippet": "    private static Pair<Object, Object> getPkRange(Configuration configuration) {        String pkRangeSQL = genPKRangeSQL(configuration);        int fetchSize = configuration.getInt(com.alibaba.datax.plugin.rdbms.reader.Constant.FETCH_SIZE);        String jdbcURL = configuration.getString(Key.JDBC_URL);        String username = configuration.getString(Key.USERNAME);        String password = configuration.getString(Key.PASSWORD);        String table = configuration.getString(Key.TABLE);        Connection conn = DBUtil.getConnection(DATABASE_TYPE, jdbcURL, username, password);        Pair<Object, Object> minMaxPK = checkSplitPk(conn, pkRangeSQL, fetchSize, table, username, configuration);        DBUtil.closeDBResources(null, null, conn);        return minMaxPK;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "precheckSplitPk", "params": ["Connection", "String", "int", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void precheckSplitPk(Connection conn, String pkRangeSQL, int fetchSize,                                       String table, String username) {        Pair<Object, Object> minMaxPK = checkSplitPk(conn, pkRangeSQL, fetchSize, table, username, null);        if (null == minMaxPK) {            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                    \"\u6839\u636e\u5207\u5206\u4e3b\u952e\u5207\u5206\u8868\u5931\u8d25. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkSplitPk", "params": ["Connection", "String", "int", "String", "String", "Configuration"], "throws": null, "modifiers": ["private", "static"], "return_type": "Pair<Object,Object>", "snippet": "    private static Pair<Object, Object> checkSplitPk(Connection conn, String pkRangeSQL, int fetchSize, String table,                                                     String username, Configuration configuration) {        LOG.info(\"split pk [sql={}] is running... \", pkRangeSQL);        ResultSet rs = null;        Pair<Object, Object> minMaxPK = null;        try {            try {                rs = DBUtil.query(conn, pkRangeSQL, fetchSize);            } catch (Exception e) {                throw RdbmsException.asQueryException(DATABASE_TYPE, e, pkRangeSQL, table, username);            }            ResultSetMetaData rsMetaData = rs.getMetaData();            if (isPKTypeValid(rsMetaData)) {                if (isStringType(rsMetaData.getColumnType(1))) {                    if (configuration != null) {                        configuration                                .set(com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE, com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE_STRING);                    }                    while (DBUtil.asyncResultSetNext(rs)) {                        minMaxPK = new ImmutablePair<Object, Object>(                                rs.getString(1), rs.getString(2));                    }                } else if (isLongType(rsMetaData.getColumnType(1))) {                    if (configuration != null) {                        configuration.set(com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE, com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE_LONG);                    }                    while (DBUtil.asyncResultSetNext(rs)) {                        minMaxPK = new ImmutablePair<Object, Object>(                                rs.getString(1), rs.getString(2));                        // check: string shouldn't contain '.', for oracle                        String minMax = rs.getString(1) + rs.getString(2);                        if (StringUtils.contains(minMax, '.')) {                            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                                    \"\u60a8\u914d\u7f6e\u7684DataX\u5207\u5206\u4e3b\u952e(splitPk)\u6709\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3b\u952e(splitPk) \u7c7b\u578b DataX \u4e0d\u652f\u6301. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");                        }                    }                } else {                    throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                            \"\u60a8\u914d\u7f6e\u7684DataX\u5207\u5206\u4e3b\u952e(splitPk)\u6709\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3b\u952e(splitPk) \u7c7b\u578b DataX \u4e0d\u652f\u6301. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");                }            } else {                throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                        \"\u60a8\u914d\u7f6e\u7684DataX\u5207\u5206\u4e3b\u952e(splitPk)\u6709\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3b\u952e(splitPk) \u7c7b\u578b DataX \u4e0d\u652f\u6301. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");            }        } catch (DataXException e) {            throw e;        } catch (Exception e) {            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK, \"DataX\u5c1d\u8bd5\u5207\u5206\u8868\u53d1\u751f\u9519\u8bef. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\", e);        } finally {            DBUtil.closeDBResources(rs, null, null);        }        return minMaxPK;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPKTypeValid", "params": ["ResultSetMetaData"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isPKTypeValid(ResultSetMetaData rsMetaData) {        boolean ret = false;        try {            int minType = rsMetaData.getColumnType(1);            int maxType = rsMetaData.getColumnType(2);            boolean isNumberType = isLongType(minType);            boolean isStringType = isStringType(minType);            if (minType == maxType && (isNumberType || isStringType)) {                ret = true;            }        } catch (Exception e) {            throw DataXException.asDataXException(DBUtilErrorCode.ILLEGAL_SPLIT_PK,                    \"DataX\u83b7\u53d6\u5207\u5206\u4e3b\u952e(splitPk)\u5b57\u6bb5\u7c7b\u578b\u5931\u8d25. \u8be5\u9519\u8bef\u901a\u5e38\u662f\u7cfb\u7edf\u5e95\u5c42\u5f02\u5e38\u5bfc\u81f4. \u8bf7\u8054\u7cfb\u65fa\u65fa:askdatax\u6216\u8005DBA\u5904\u7406.\");        }        return ret;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLongType", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isLongType(int type) {        boolean isValidLongType = type == Types.BIGINT || type == Types.INTEGER                || type == Types.SMALLINT || type == Types.TINYINT;        switch (SingleTableSplitUtil.DATABASE_TYPE) {            case Oracle:                isValidLongType |= type == Types.NUMERIC;                break;            default:                break;        }        return isValidLongType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isStringType", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isStringType(int type) {        return type == Types.CHAR || type == Types.NCHAR                || type == Types.VARCHAR || type == Types.LONGVARCHAR                || type == Types.NVARCHAR;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "genPKRangeSQL", "params": ["Configuration"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String genPKRangeSQL(Configuration configuration) {        String splitPK = configuration.getString(Key.SPLIT_PK).trim();        String table = configuration.getString(Key.TABLE).trim();        String where = configuration.getString(Key.WHERE, null);        return genPKSql(splitPK, table, where);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "genPKSql", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String genPKSql(String splitPK, String table, String where) {        String minMaxTemplate = \"SELECT MIN(%s),MAX(%s) FROM %s\";        String pkRangeSQL = String.format(minMaxTemplate, splitPK, splitPK,                table);        if (StringUtils.isNotBlank(where)) {            pkRangeSQL = String.format(\"%s WHERE (%s AND %s IS NOT NULL)\",                    pkRangeSQL, where, splitPK);        }        return pkRangeSQL;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "genSplitSqlForOracle", "params": ["String", "String", "String", "Configuration", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "    public static List<String> genSplitSqlForOracle(String splitPK,                                                    String table, String where, Configuration configuration,                                                    int adviceNum) {        if (adviceNum < 1) {            throw new IllegalArgumentException(String.format(                    \"\u5207\u5206\u4efd\u6570\u4e0d\u80fd\u5c0f\u4e8e1. \u6b64\u5904:adviceNum=[%s].\", adviceNum));        } else if (adviceNum == 1) {            return null;        }        String whereSql = String.format(\"%s IS NOT NULL\", splitPK);        if (StringUtils.isNotBlank(where)) {            whereSql = String.format(\" WHERE (%s) AND (%s) \", whereSql, where);        } else {            whereSql = String.format(\" WHERE (%s) \", whereSql);        }        Double percentage = configuration.getDouble(Key.SAMPLE_PERCENTAGE, 0.1);        String sampleSqlTemplate = \"SELECT * FROM ( SELECT %s FROM %s SAMPLE (%s) %s ORDER BY DBMS_RANDOM.VALUE) WHERE ROWNUM <= %s ORDER by %s ASC\";        String splitSql = String.format(sampleSqlTemplate, splitPK, table,                percentage, whereSql, adviceNum, splitPK);        int fetchSize = configuration.getInt(com.alibaba.datax.plugin.rdbms.reader.Constant.FETCH_SIZE, 32);        String jdbcURL = configuration.getString(Key.JDBC_URL);        String username = configuration.getString(Key.USERNAME);        String password = configuration.getString(Key.PASSWORD);        Connection conn = DBUtil.getConnection(DATABASE_TYPE, jdbcURL,                username, password);        LOG.info(\"split pk [sql={}] is running... \", splitSql);        ResultSet rs = null;        List<Pair<Object, Integer>> splitedRange = new ArrayList<Pair<Object, Integer>>();        try {            try {                rs = DBUtil.query(conn, splitSql, fetchSize);            } catch (Exception e) {                throw RdbmsException.asQueryException(DATABASE_TYPE, e,                        splitSql, table, username);            }            if (configuration != null) {                configuration                        .set(com.alibaba.datax.plugin.rdbms.reader.Constant.PK_TYPE, Constant.PK_TYPE_MONTECARLO);            }            ResultSetMetaData rsMetaData = rs.getMetaData();            while (DBUtil.asyncResultSetNext(rs)) {                ImmutablePair<Object, Integer> eachPoint = new ImmutablePair<Object, Integer>(                        rs.getObject(1), rsMetaData.getColumnType(1));                splitedRange.add(eachPoint);            }        } catch (DataXException e) {            throw e;        } catch (Exception e) {            throw DataXException.asDataXException(                    DBUtilErrorCode.ILLEGAL_SPLIT_PK,                    \"DataX\u5c1d\u8bd5\u5207\u5206\u8868\u53d1\u751f\u9519\u8bef. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\", e);        } finally {            DBUtil.closeDBResources(rs, null, null);        }        LOG.debug(JSON.toJSONString(splitedRange));        List<String> rangeSql = new ArrayList<String>();        int splitedRangeSize = splitedRange.size();        // warn: splitedRangeSize may be 0 or 1\uff0c\u5207\u5206\u89c4\u5219\u4e3aIS NULL\u4ee5\u53ca IS NOT NULL        // demo: Parameter rangeResult can not be null and its length can not <2. detail:rangeResult=[24999930].        if (splitedRangeSize >= 2) {            // warn: oracle Number is long type here            if (isLongType(splitedRange.get(0).getRight())) {                BigInteger[] integerPoints = new BigInteger[splitedRange.size()];                for (int i = 0; i < splitedRangeSize; i++) {                    integerPoints[i] = new BigInteger(splitedRange.get(i)                            .getLeft().toString());                }                rangeSql.addAll(RdbmsRangeSplitWrap.wrapRange(integerPoints,                        splitPK));                // its ok if splitedRangeSize is 1                rangeSql.add(RdbmsRangeSplitWrap.wrapFirstLastPoint(                        integerPoints[0], integerPoints[splitedRangeSize - 1],                        splitPK));            } else if (isStringType(splitedRange.get(0).getRight())) {                // warn: treated as string type                String[] stringPoints = new String[splitedRange.size()];                for (int i = 0; i < splitedRangeSize; i++) {                    stringPoints[i] = new String(splitedRange.get(i).getLeft()                            .toString());                }                rangeSql.addAll(RdbmsRangeSplitWrap.wrapRange(stringPoints,                        splitPK, \"'\", DATABASE_TYPE));                // its ok if splitedRangeSize is 1                rangeSql.add(RdbmsRangeSplitWrap.wrapFirstLastPoint(                        stringPoints[0], stringPoints[splitedRangeSize - 1],                        splitPK, \"'\", DATABASE_TYPE));            } else {                throw DataXException                        .asDataXException(                                DBUtilErrorCode.ILLEGAL_SPLIT_PK,                                \"\u60a8\u914d\u7f6e\u7684DataX\u5207\u5206\u4e3b\u952e(splitPk)\u6709\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u5207\u5206\u4e3b\u952e(splitPk) \u7c7b\u578b DataX \u4e0d\u652f\u6301. DataX \u4ec5\u652f\u6301\u5207\u5206\u4e3b\u952e\u4e3a\u4e00\u4e2a,\u5e76\u4e14\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u5207\u5206\u4e3b\u952e\u6216\u8005\u8054\u7cfb DBA \u8fdb\u884c\u5904\u7406.\");            }        }        return rangeSql;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/SingleTableSplitUtil.java", "stars": "23", "class": {"name": "SingleTableSplitUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "containsKey", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsKey(Object key) {        if (key instanceof String) {            String field = (String) key;            return mConnection.getRequestProperty(field) != null;        } else {            return false;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "containsValue", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsValue(Object value) {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "entrySet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<Entry>", "snippet": "    public Set<Entry<String, List<String>>> entrySet() {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> get(Object key) {        if (key instanceof String) {            String field = (String) key;            String value = mConnection.getRequestProperty(field);            return value != null ? Collections.singletonList(value) : null;        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "keySet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "    public Set<String> keySet() {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "put", "params": ["String", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> put(String key, List<String> value) {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "putAll", "params": ["Map<String,List>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void putAll(Map<? extends String, ? extends List<String>> value) {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "remove", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> remove(Object key) {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int size() {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "values", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<List>", "snippet": "    public Collection<List<String>> values() {        throw new UnsupportedOperationException();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/RequestPropertiesMap.java", "stars": "74", "class": {"name": "RequestPropertiesMap", "extends": null, "implements": ["Map"], "modifiers": []}}, {"method_name": "addHorizontalValueMarker", "params": ["Data<X,Y>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addHorizontalValueMarker(Data<X, Y> marker) {        Objects.requireNonNull(marker, \"the marker must not be null\");        if (horizontalMarkers.contains(marker)) return;        Line line = new Line();        marker.setNode(line);        getPlotChildren().add(line);        horizontalMarkers.add(marker);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/chart/ExtendedLineChart.java", "stars": "2", "class": {"name": "ExtendedLineChart", "extends": "LineChart", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeHorizontalValueMarker", "params": ["Data<X,Y>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeHorizontalValueMarker(Data<X, Y> marker) {        Objects.requireNonNull(marker, \"the marker must not be null\");        if (marker.getNode() != null) {            getPlotChildren().remove(marker.getNode());            marker.setNode(null);        }        horizontalMarkers.remove(marker);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/chart/ExtendedLineChart.java", "stars": "2", "class": {"name": "ExtendedLineChart", "extends": "LineChart", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeHorizontalValueMarkers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeHorizontalValueMarkers() {        horizontalMarkers.forEach(marker -> getPlotChildren().remove(marker.getNode()));        horizontalMarkers.clear();    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/chart/ExtendedLineChart.java", "stars": "2", "class": {"name": "ExtendedLineChart", "extends": "LineChart", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeVerticalValueMarkers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeVerticalValueMarkers() {        verticalMarkers.forEach(marker -> getPlotChildren().remove(marker.getNode()));        verticalMarkers.clear();    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/chart/ExtendedLineChart.java", "stars": "2", "class": {"name": "ExtendedLineChart", "extends": "LineChart", "implements": null, "modifiers": ["public"]}}, {"method_name": "addVerticalValueMarker", "params": ["Data<X,Y>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addVerticalValueMarker(Data<X, Y> marker) {        Objects.requireNonNull(marker, \"the marker must not be null\");        if (verticalMarkers.contains(marker)) return;        Line line = new Line();        marker.setNode(line);        getPlotChildren().add(line);        verticalMarkers.add(marker);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/chart/ExtendedLineChart.java", "stars": "2", "class": {"name": "ExtendedLineChart", "extends": "LineChart", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeVerticalValueMarker", "params": ["Data<X,Y>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeVerticalValueMarker(Data<X, Y> marker) {        Objects.requireNonNull(marker, \"the marker must not be null\");        if (marker.getNode() != null) {            getPlotChildren().remove(marker.getNode());            marker.setNode(null);        }        verticalMarkers.remove(marker);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/chart/ExtendedLineChart.java", "stars": "2", "class": {"name": "ExtendedLineChart", "extends": "LineChart", "implements": null, "modifiers": ["public"]}}, {"method_name": "layoutPlotChildren", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void layoutPlotChildren() {        super.layoutPlotChildren();        for (Data<X, Y> horizontalMarker : horizontalMarkers) {            Line line = (Line) horizontalMarker.getNode();            line.setStartX(0);            line.setEndX(getBoundsInLocal().getWidth());            line.setStartY(getYAxis().getDisplayPosition(horizontalMarker.getYValue()) + 0.5); // 0.5 for crispness            line.setEndY(line.getStartY());            line.toFront();        }        for (Data<X, Y> verticalMarker : verticalMarkers) {            Line line = (Line) verticalMarker.getNode();            line.setStartX(getXAxis().getDisplayPosition(verticalMarker.getXValue()) + 0.5);  // 0.5 for crispness            line.setEndX(line.getStartX());            line.setStartY(0d);            line.setEndY(getBoundsInLocal().getHeight());            line.toFront();        }    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/chart/ExtendedLineChart.java", "stars": "2", "class": {"name": "ExtendedLineChart", "extends": "LineChart", "implements": null, "modifiers": ["public"]}}, {"method_name": "addView", "params": ["Context", "ViewGroup", "int", "IGSYSurfaceListener", "MeasureHelper", "GSYVideoGLView", "float", "GSYVideoGLViewBaseRender", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addView(Context context, ViewGroup textureViewContainer, int rotate, IGSYSurfaceListener gsySurfaceListener, MeasureHelper.MeasureFormVideoParamsListener videoParamsListener, GSYVideoGLView.ShaderInterface effect, float[] transform, GSYVideoGLViewBaseRender customRender, int mode) {        mShowView = MediaCodecTextureView.addTextureView(context, textureViewContainer, rotate, gsySurfaceListener, videoParamsListener);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/mediacodec/MediaCodecRenderView.java", "stars": "2", "class": {"name": "MediaCodecRenderView", "extends": "GSYRenderView", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tFangfa.sum(10, 20);\t\t\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Fangfa.java", "stars": "2", "class": {"name": "Fangfa", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sum", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int sum (int a , int b)\t{\t\tint c = a + b;\t\tSystem.out.println(a + \" + \" + b + \" = \" + c);\t\treturn c;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Fangfa.java", "stars": "2", "class": {"name": "Fangfa", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(Context context) {        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);        mPaint.setStyle(Paint.Style.FILL);        mMaxCircleRadius = UIUtil.dip2px(context, 3.5);        mMinCircleRadius = UIUtil.dip2px(context, 2);        mYOffset = UIUtil.dip2px(context, 1.5);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        canvas.drawCircle(mLeftCircleX, getHeight() - mYOffset - mMaxCircleRadius, mLeftCircleRadius, mPaint);        canvas.drawCircle(mRightCircleX, getHeight() - mYOffset - mMaxCircleRadius, mRightCircleRadius, mPaint);        drawBezierCurve(canvas);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "drawBezierCurve", "params": ["Canvas"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawBezierCurve(Canvas canvas) {        mPath.reset();        float y = getHeight() - mYOffset - mMaxCircleRadius;        mPath.moveTo(mRightCircleX, y);        mPath.lineTo(mRightCircleX, y - mRightCircleRadius);        mPath.quadTo(mRightCircleX + (mLeftCircleX - mRightCircleX) / 2.0f, y, mLeftCircleX, y - mLeftCircleRadius);        mPath.lineTo(mLeftCircleX, y + mLeftCircleRadius);        mPath.quadTo(mRightCircleX + (mLeftCircleX - mRightCircleX) / 2.0f, y, mRightCircleX, y + mRightCircleRadius);        mPath.close();  // \u95ed\u5408        canvas.drawPath(mPath, mPaint);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        if (mPositionDataList == null || mPositionDataList.isEmpty()) {            return;        }        // \u8ba1\u7b97\u989c\u8272        if (mColors != null && mColors.size() > 0) {            int currentColor = mColors.get(Math.abs(position) % mColors.size());            int nextColor = mColors.get(Math.abs(position + 1) % mColors.size());            int color = ArgbEvaluatorHolder.eval(positionOffset, currentColor, nextColor);            mPaint.setColor(color);        }        // \u8ba1\u7b97\u951a\u70b9\u4f4d\u7f6e        PositionData current = FragmentContainerHelper.getImitativePositionData(mPositionDataList, position);        PositionData next = FragmentContainerHelper.getImitativePositionData(mPositionDataList, position + 1);        float leftX = current.mLeft + (current.mRight - current.mLeft) / 2;        float rightX = next.mLeft + (next.mRight - next.mLeft) / 2;        mLeftCircleX = leftX + (rightX - leftX) * mStartInterpolator.getInterpolation(positionOffset);        mRightCircleX = leftX + (rightX - leftX) * mEndInterpolator.getInterpolation(positionOffset);        mLeftCircleRadius = mMaxCircleRadius + (mMinCircleRadius - mMaxCircleRadius) * mEndInterpolator.getInterpolation(positionOffset);        mRightCircleRadius = mMinCircleRadius + (mMaxCircleRadius - mMinCircleRadius) * mStartInterpolator.getInterpolation(positionOffset);        invalidate();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageSelected(int position) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrollStateChanged(int state) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPositionDataProvide", "params": ["List<PositionData>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPositionDataProvide(List<PositionData> dataList) {        mPositionDataList = dataList;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getMaxCircleRadius", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getMaxCircleRadius() {        return mMaxCircleRadius;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setMaxCircleRadius", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMaxCircleRadius(float maxCircleRadius) {        mMaxCircleRadius = maxCircleRadius;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getMinCircleRadius", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getMinCircleRadius() {        return mMinCircleRadius;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setMinCircleRadius", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMinCircleRadius(float minCircleRadius) {        mMinCircleRadius = minCircleRadius;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getYOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getYOffset() {        return mYOffset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setYOffset", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setYOffset(float yOffset) {        mYOffset = yOffset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setColors", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setColors(Integer... colors) {        mColors = Arrays.asList(colors);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setStartInterpolator", "params": ["Interpolator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartInterpolator(Interpolator startInterpolator) {        mStartInterpolator = startInterpolator;        if (mStartInterpolator == null) {            mStartInterpolator = new AccelerateInterpolator();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setEndInterpolator", "params": ["Interpolator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndInterpolator(Interpolator endInterpolator) {        mEndInterpolator = endInterpolator;        if (mEndInterpolator == null) {            mEndInterpolator = new DecelerateInterpolator();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/BezierPagerIndicator.java", "stars": "1", "class": {"name": "BezierPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/member_access/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);      sqlSessionFactory.getConfiguration().addMapper(Mapper.class);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "MemberAccessTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "parameterMappingAndResultAutoMapping", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void parameterMappingAndResultAutoMapping() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Params params = new Params();      Bean bean = mapper.resultAutoMapping(params);      assertEquals(params.privateField, bean.privateField);      assertEquals(params.packagePrivateField, bean.packagePrivateField);      assertEquals(params.protectedField, bean.protectedField);      assertEquals(params.publicField, bean.publicField);      assertEquals(params.getPrivateProperty(), bean.properties.get(\"privateProperty\"));      assertEquals(params.getPackagePrivateProperty(),          bean.properties.get(\"packagePrivateProperty\"));      assertEquals(params.getProtectedProperty(), bean.properties.get(\"protectedProperty\"));      assertEquals(params.getPublicProperty(), bean.properties.get(\"publicProperty\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "MemberAccessTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "parameterMappingAndResultAutoMappingUsingOgnl", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void parameterMappingAndResultAutoMappingUsingOgnl() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Params params = new Params();      Bean bean = mapper.resultAutoMappingUsingOgnl(params);      assertEquals(params.privateField + \"%\", bean.privateField);      assertEquals(params.packagePrivateField + \"%\", bean.packagePrivateField);      assertEquals(params.protectedField + \"%\", bean.protectedField);      assertEquals(params.publicField + \"%\", bean.publicField);      assertEquals(params.getPrivateProperty() + \"%\", bean.properties.get(\"privateProperty\"));      assertEquals(params.getPackagePrivateProperty() + \"%\",          bean.properties.get(\"packagePrivateProperty\"));      assertEquals(params.getProtectedProperty() + \"%\", bean.properties.get(\"protectedProperty\"));      assertEquals(params.getPublicProperty() + \"%\", bean.properties.get(\"publicProperty\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "MemberAccessTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "parameterMappingAndResultMapping", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void parameterMappingAndResultMapping() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Params params = new Params();      Bean bean = mapper.resultMapping(params);      assertEquals(params.privateField, bean.privateField);      assertEquals(params.packagePrivateField, bean.packagePrivateField);      assertEquals(params.protectedField, bean.protectedField);      assertEquals(params.publicField, bean.publicField);      assertEquals(params.getPrivateProperty(), bean.properties.get(\"privateProperty\"));      assertEquals(params.getPackagePrivateProperty(),          bean.properties.get(\"packagePrivateProperty\"));      assertEquals(params.getProtectedProperty(), bean.properties.get(\"protectedProperty\"));      assertEquals(params.getPublicProperty(), bean.properties.get(\"publicProperty\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "MemberAccessTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "constructorAutoMapping", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void constructorAutoMapping() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        Immutable immutable = mapper.privateConstructorAutoMapping();        assertEquals(1, immutable.properties.size());        assertEquals(\"1\", immutable.properties.get(\"arg1\"));      }      {        Immutable immutable = mapper.packagePrivateConstructorAutoMapping();        assertEquals(2, immutable.properties.size());        assertEquals(\"1\", immutable.properties.get(\"arg1\"));        assertEquals(\"2\", immutable.properties.get(\"arg2\"));      }      {        Immutable immutable = mapper.protectedConstructorAutoMapping();        assertEquals(3, immutable.properties.size());        assertEquals(\"1\", immutable.properties.get(\"arg1\"));        assertEquals(\"2\", immutable.properties.get(\"arg2\"));        assertEquals(\"3\", immutable.properties.get(\"arg3\"));      }      {        Immutable immutable = mapper.publicConstructorAutoMapping();        assertEquals(4, immutable.properties.size());        assertEquals(\"1\", immutable.properties.get(\"arg1\"));        assertEquals(\"2\", immutable.properties.get(\"arg2\"));        assertEquals(\"3\", immutable.properties.get(\"arg3\"));        assertEquals(\"4\", immutable.properties.get(\"arg4\"));      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "MemberAccessTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "constructorMapping", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void constructorMapping() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        Immutable immutable = mapper.privateConstructorMapping();        assertEquals(1, immutable.properties.size());        assertEquals(\"1\", immutable.properties.get(\"arg1\"));      }      {        Immutable immutable = mapper.packagePrivateConstructorMapping();        assertEquals(2, immutable.properties.size());        assertEquals(\"1\", immutable.properties.get(\"arg1\"));        assertEquals(\"2\", immutable.properties.get(\"arg2\"));      }      {        Immutable immutable = mapper.protectedConstructorMapping();        assertEquals(3, immutable.properties.size());        assertEquals(\"1\", immutable.properties.get(\"arg1\"));        assertEquals(\"2\", immutable.properties.get(\"arg2\"));        assertEquals(\"3\", immutable.properties.get(\"arg3\"));      }      {        Immutable immutable = mapper.publicConstructorMapping();        assertEquals(4, immutable.properties.size());        assertEquals(\"1\", immutable.properties.get(\"arg1\"));        assertEquals(\"2\", immutable.properties.get(\"arg2\"));        assertEquals(\"3\", immutable.properties.get(\"arg3\"));        assertEquals(\"4\", immutable.properties.get(\"arg4\"));      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "MemberAccessTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPrivateProperty", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getPrivateProperty() {      return \"privateProperty\";    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "Params", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getPackagePrivateProperty", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String getPackagePrivateProperty() {      return \"packagePrivateProperty\";    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "Params", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getProtectedProperty", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getProtectedProperty() {      return \"protectedProperty\";    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "Params", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getPublicProperty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPublicProperty() {      return \"publicProperty\";    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "Params", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setPrivateProperty", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setPrivateProperty(String value) {      properties.put(\"privateProperty\", value);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setPackagePrivateProperty", "params": ["String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void setPackagePrivateProperty(String value) {      properties.put(\"packagePrivateProperty\", value);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setProtectedProperty", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setProtectedProperty(String value) {      properties.put(\"protectedProperty\", value);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setPublicProperty", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPublicProperty(String value) {      properties.put(\"publicProperty\", value);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/member_access/MemberAccessTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObject.java", "stars": "2", "class": {"name": "RoomObject", "extends": null, "implements": ["IRoomObject"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return this.id;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObject.java", "stars": "2", "class": {"name": "RoomObject", "extends": null, "implements": ["IRoomObject"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return this.type;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObject.java", "stars": "2", "class": {"name": "RoomObject", "extends": null, "implements": ["IRoomObject"], "modifiers": ["public"]}}, {"method_name": "getModel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IRoomObjectModel", "snippet": "    public IRoomObjectModel getModel() {        return this.model;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObject.java", "stars": "2", "class": {"name": "RoomObject", "extends": null, "implements": ["IRoomObject"], "modifiers": ["public"]}}, {"method_name": "getLocation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Point", "snippet": "    public Point getLocation() {        return this.location;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObject.java", "stars": "2", "class": {"name": "RoomObject", "extends": null, "implements": ["IRoomObject"], "modifiers": ["public"]}}, {"method_name": "getDirection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Point", "snippet": "    public Point getDirection() {        return this.direction;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObject.java", "stars": "2", "class": {"name": "RoomObject", "extends": null, "implements": ["IRoomObject"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setHasOptionsMenu(true);        mImageThumbSize = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_size);        mImageThumbSpacing = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_spacing);        mAdapter = new ImageAdapter(getActivity());        ImageCache.ImageCacheParams cacheParams =                new ImageCache.ImageCacheParams(getActivity(), IMAGE_CACHE_DIR);        cacheParams.setMemCacheSizePercent(0.25f); // Set memory cache to 25% of app memory        // The ImageFetcher takes care of loading images into our ImageView children asynchronously        mImageFetcher = new ImageFetcher(getActivity(), mImageThumbSize);        mImageFetcher.setLoadingImage(R.drawable.empty_photo);        mImageFetcher.addImageCache(getActivity().getSupportFragmentManager(), cacheParams);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageGridFragment", "extends": "Fragment", "implements": ["AdapterView"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        final View v = inflater.inflate(R.layout.image_grid_fragment, container, false);        final GridView mGridView = (GridView) v.findViewById(R.id.gridView);        mGridView.setAdapter(mAdapter);        mGridView.setOnItemClickListener(this);        mGridView.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView absListView, int scrollState) {                // Pause fetcher to ensure smoother scrolling when flinging                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_FLING) {                    // Before Honeycomb pause image loading on scroll to help with performance                    if (!Utils.hasHoneycomb()) {                        mImageFetcher.setPauseWork(true);                    }                } else {                    mImageFetcher.setPauseWork(false);                }            }            @Override            public void onScroll(AbsListView absListView, int firstVisibleItem,                    int visibleItemCount, int totalItemCount) {            }        });        // This listener is used to get the final width of the GridView and then calculate the        // number of columns and the width of each column. The width of each column is variable        // as the GridView has stretchMode=columnWidth. The column width is used to set the height        // of each view so we get nice square thumbnails.        mGridView.getViewTreeObserver().addOnGlobalLayoutListener(                new ViewTreeObserver.OnGlobalLayoutListener() {                    @TargetApi(VERSION_CODES.JELLY_BEAN)                    @Override                    public void onGlobalLayout() {                        if (mAdapter.getNumColumns() == 0) {                            final int numColumns = (int) Math.floor(                                    mGridView.getWidth() / (mImageThumbSize + mImageThumbSpacing));                            if (numColumns > 0) {                                final int columnWidth =                                        (mGridView.getWidth() / numColumns) - mImageThumbSpacing;                                mAdapter.setNumColumns(numColumns);                                mAdapter.setItemHeight(columnWidth);                                if (BuildConfig.DEBUG) {                                    Log.d(TAG, \"onCreateView - numColumns set to \" + numColumns);                                }                                if (Utils.hasJellyBean()) {                                    mGridView.getViewTreeObserver()                                            .removeOnGlobalLayoutListener(this);                                } else {                                    mGridView.getViewTreeObserver()                                            .removeGlobalOnLayoutListener(this);                                }                            }                        }                    }                });        return v;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageGridFragment", "extends": "Fragment", "implements": ["AdapterView"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        mImageFetcher.setExitTasksEarly(false);        mAdapter.notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageGridFragment", "extends": "Fragment", "implements": ["AdapterView"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        super.onPause();        mImageFetcher.setPauseWork(false);        mImageFetcher.setExitTasksEarly(true);        mImageFetcher.flushCache();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageGridFragment", "extends": "Fragment", "implements": ["AdapterView"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        super.onDestroy();        mImageFetcher.closeCache();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageGridFragment", "extends": "Fragment", "implements": ["AdapterView"], "modifiers": ["public"]}}, {"method_name": "onItemClick", "params": ["AdapterView<?>", "View", "int", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {        final Intent i = new Intent(getActivity(), ImageDetailActivity.class);        i.putExtra(ImageDetailActivity.EXTRA_IMAGE, (int) id);        if (Utils.hasJellyBean()) {            // makeThumbnailScaleUpAnimation() looks kind of ugly here as the loading spinner may            // show plus the thumbnail image in GridView is cropped. so using            // makeScaleUpAnimation() instead.            ActivityOptions options =                    ActivityOptions.makeScaleUpAnimation(v, 0, 0, v.getWidth(), v.getHeight());            getActivity().startActivity(i, options.toBundle());        } else {            startActivity(i);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageGridFragment", "extends": "Fragment", "implements": ["AdapterView"], "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu", "MenuInflater"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {        inflater.inflate(R.menu.main_menu, menu);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageGridFragment", "extends": "Fragment", "implements": ["AdapterView"], "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.clear_cache:                mImageFetcher.clearCache();                Toast.makeText(getActivity(), R.string.clear_cache_complete_toast,                        Toast.LENGTH_SHORT).show();                return true;        }        return super.onOptionsItemSelected(item);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageGridFragment", "extends": "Fragment", "implements": ["AdapterView"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getCount() {            // If columns have yet to be determined, return no items            if (getNumColumns() == 0) {                return 0;            }            // Size + number of columns for top empty row            return Images.imageThumbUrls.length + mNumColumns;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getItem(int position) {            return position < mNumColumns ?                    null : Images.imageThumbUrls[position - mNumColumns];        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getItemId(int position) {            return position < mNumColumns ? 0 : position - mNumColumns;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getViewTypeCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getViewTypeCount() {            // Two types of views, the normal ImageView and the top row of empty views            return 2;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getItemViewType(int position) {            return (position < mNumColumns) ? 1 : 0;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "hasStableIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean hasStableIds() {            return true;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "        public View getView(int position, View convertView, ViewGroup container) {            //BEGIN_INCLUDE(load_gridview_item)            // First check if this is the top row            if (position < mNumColumns) {                if (convertView == null) {                    convertView = new View(mContext);                }                // Set empty view with height of ActionBar                convertView.setLayoutParams(new AbsListView.LayoutParams(                        LayoutParams.MATCH_PARENT, mActionBarHeight));                return convertView;            }            // Now handle the main ImageView thumbnails            ImageView imageView;            if (convertView == null) { // if it's not recycled, instantiate and initialize                imageView = new RecyclingImageView(mContext);                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);                imageView.setLayoutParams(mImageViewLayoutParams);            } else { // Otherwise re-use the converted view                imageView = (ImageView) convertView;            }            // Check the height matches our calculated column width            if (imageView.getLayoutParams().height != mItemHeight) {                imageView.setLayoutParams(mImageViewLayoutParams);            }            // Finally load the image asynchronously into the ImageView, this also takes care of            // setting a placeholder image while the background thread runs            mImageFetcher.loadImage(Images.imageThumbUrls[position - mNumColumns], imageView);            return imageView;            //END_INCLUDE(load_gridview_item)        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "setItemHeight", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setItemHeight(int height) {            if (height == mItemHeight) {                return;            }            mItemHeight = height;            mImageViewLayoutParams =                    new GridView.LayoutParams(LayoutParams.MATCH_PARENT, mItemHeight);            mImageFetcher.setImageSize(height);            notifyDataSetChanged();        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "setNumColumns", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setNumColumns(int numColumns) {            mNumColumns = numColumns;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getNumColumns", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getNumColumns() {            return mNumColumns;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridFragment.java", "stars": "74", "class": {"name": "ImageAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "withinBounds", "params": ["int", "int", "float", "float", "float", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean withinBounds(int mouseX, int mouseY, float x, float y, float width, float height) {        return (mouseX >= x && mouseX <= (x + width)) && (mouseY >= y && mouseY <= (y + height));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/MouseUtil.java", "stars": "12", "class": {"name": "MouseUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getStatus() {\t\treturn status;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Problema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setStatus(Integer status) {\t\tthis.status = status;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Problema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataHora", "params": [], "throws": null, "modifiers": ["public"], "return_type": "OffsetDateTime", "snippet": "\tpublic OffsetDateTime getDataHora() {\t\treturn dataHora;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Problema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataHora", "params": ["OffsetDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDataHora(OffsetDateTime dataHora) {\t\tthis.dataHora = dataHora;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Problema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitulo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getTitulo() {\t\treturn titulo;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Problema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitulo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTitulo(String titulo) {\t\tthis.titulo = titulo;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Problema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCampos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Campo>", "snippet": "\tpublic List<Campo> getCampos() {\t\treturn campos;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Problema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCampos", "params": ["List<Campo>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCampos(List<Campo> campos) {\t\tthis.campos = campos;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Problema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNome", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getNome() {\t\t\treturn nome;\t\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Campo", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setNome", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setNome(String nome) {\t\t\tthis.nome = nome;\t\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Campo", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMensagem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getMensagem() {\t\t\treturn mensagem;\t\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Campo", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setMensagem", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setMensagem(String mensagem) {\t\t\tthis.mensagem = mensagem;\t\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/exceptionhandler/Problema.java", "stars": "2", "class": {"name": "Campo", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(int id) {      this.id = id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLiteId.java", "stars": "15", "class": {"name": "PostLiteId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLiteId.java", "stars": "15", "class": {"name": "PostLiteId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) {            return true;        }        if (o == null || getClass() != o.getClass()) {            return false;        }        final PostLiteId that = (PostLiteId) o;        if (id != that.id) {            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLiteId.java", "stars": "15", "class": {"name": "PostLiteId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLiteId.java", "stars": "15", "class": {"name": "PostLiteId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Usuario", "snippet": "\tpublic Usuario execute(String username, String password) {            \tUsuario u = userRepository.authenticate(username, password);                if (u != null)            return u;        else             throw new LibrarySystemException(\"Unauthorized user!\");    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/services/AuthenticateService.java", "stars": "2", "class": {"name": "AuthenticateService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "discount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void discount() {        super.discount();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/business/VIPDiscountDecorate.java", "stars": "2", "class": {"name": "VIPDiscountDecorate", "extends": "AbstractDiscountDecorate", "implements": null, "modifiers": ["public"]}}, {"method_name": "expandBusiness", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void expandBusiness() {        System.out.println(\"VIP\u7528\u6237\u6298\u6263\u6269\u5c55\u4e1a\u52a1\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/business/VIPDiscountDecorate.java", "stars": "2", "class": {"name": "VIPDiscountDecorate", "extends": "AbstractDiscountDecorate", "implements": null, "modifiers": ["public"]}}, {"method_name": "addSuggestion", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addSuggestion(String content, String user_name) {        JdbcTemplate.update(SqlMappers.AdminSqlMapper.get(\"addSuggestion\"),content,user_name,new Date());    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/AdminDaoImpl.java", "stars": "10", "class": {"name": "AdminDaoImpl", "extends": "BaseDaoImpl", "implements": ["AdminDao"], "modifiers": ["public"]}}, {"method_name": "getUserCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getUserCount() {        List<User> list = JdbcTemplate.query(SqlMappers.AdminSqlMapper.get(\"getUserCount\"),new BeanPropertyRowMapper<User>(User.class));        return list.size();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/AdminDaoImpl.java", "stars": "10", "class": {"name": "AdminDaoImpl", "extends": "BaseDaoImpl", "implements": ["AdminDao"], "modifiers": ["public"]}}, {"method_name": "getArticleCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getArticleCount() {        List<Article> list = JdbcTemplate.query(SqlMappers.AdminSqlMapper.get(\"getArticleCount\"),new BeanPropertyRowMapper<Article>(Article.class));        return list.size();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/AdminDaoImpl.java", "stars": "10", "class": {"name": "AdminDaoImpl", "extends": "BaseDaoImpl", "implements": ["AdminDao"], "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "PmsProductAttributeValueExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdIsNull() {            addCriterion(\"product_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdIsNotNull() {            addCriterion(\"product_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdEqualTo(Long value) {            addCriterion(\"product_id =\", value, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdNotEqualTo(Long value) {            addCriterion(\"product_id <>\", value, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdGreaterThan(Long value) {            addCriterion(\"product_id >\", value, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"product_id >=\", value, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdLessThan(Long value) {            addCriterion(\"product_id <\", value, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdLessThanOrEqualTo(Long value) {            addCriterion(\"product_id <=\", value, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdIn(List<Long> values) {            addCriterion(\"product_id in\", values, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdNotIn(List<Long> values) {            addCriterion(\"product_id not in\", values, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdBetween(Long value1, Long value2) {            addCriterion(\"product_id between\", value1, value2, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductIdNotBetween(Long value1, Long value2) {            addCriterion(\"product_id not between\", value1, value2, \"productId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdIsNull() {            addCriterion(\"product_attribute_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdIsNotNull() {            addCriterion(\"product_attribute_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdEqualTo(Long value) {            addCriterion(\"product_attribute_id =\", value, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdNotEqualTo(Long value) {            addCriterion(\"product_attribute_id <>\", value, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdGreaterThan(Long value) {            addCriterion(\"product_attribute_id >\", value, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"product_attribute_id >=\", value, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdLessThan(Long value) {            addCriterion(\"product_attribute_id <\", value, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdLessThanOrEqualTo(Long value) {            addCriterion(\"product_attribute_id <=\", value, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdIn(List<Long> values) {            addCriterion(\"product_attribute_id in\", values, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdNotIn(List<Long> values) {            addCriterion(\"product_attribute_id not in\", values, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdBetween(Long value1, Long value2) {            addCriterion(\"product_attribute_id between\", value1, value2, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeIdNotBetween(Long value1, Long value2) {            addCriterion(\"product_attribute_id not between\", value1, value2, \"productAttributeId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueIsNull() {            addCriterion(\"value is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueIsNotNull() {            addCriterion(\"value is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueEqualTo(String value) {            addCriterion(\"value =\", value, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueNotEqualTo(String value) {            addCriterion(\"value <>\", value, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueGreaterThan(String value) {            addCriterion(\"value >\", value, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueGreaterThanOrEqualTo(String value) {            addCriterion(\"value >=\", value, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueLessThan(String value) {            addCriterion(\"value <\", value, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueLessThanOrEqualTo(String value) {            addCriterion(\"value <=\", value, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueLike(String value) {            addCriterion(\"value like\", value, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueNotLike(String value) {            addCriterion(\"value not like\", value, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueIn(List<String> values) {            addCriterion(\"value in\", values, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueNotIn(List<String> values) {            addCriterion(\"value not in\", values, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueBetween(String value1, String value2) {            addCriterion(\"value between\", value1, value2, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andValueNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andValueNotBetween(String value1, String value2) {            addCriterion(\"value not between\", value1, value2, \"value\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValueExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "error", "params": ["String", "TokenStream"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void error (String message, TokenStream stream) {\t\tif (stream.hasMore()) {            error(message, stream.consume().getSpan());        } else {\t\t\tString source = stream.getSource();\t\t\tif (source == null) {                error(message, new Span(\" \", 0, 1));            } else {                error(message, new Span(source, source.length() - 1, source.length()));            }\t\t}\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionError.java", "stars": "13", "class": {"name": "ExpressionError", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "error", "params": ["String", "Span", "Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void error (String message, Span location, Throwable cause) {\t\tSpan.Line line = location.getLine();\t\tmessage = \"Error (\" + line.getLineNumber() + \"): \" + message + \"\\n\\n\";\t\tmessage += line.getText();\t\tmessage += \"\\n\";\t\tint errorStart = location.getStart() - line.getStart();\t\tint errorEnd = errorStart + location.getText().length() - 1;\t\tfor (int i = 0, n = line.getText().length(); i < n; i++) {\t\t\tboolean useTab = line.getText().charAt(i) == '\\t';\t\t\tmessage += i >= errorStart && i <= errorEnd ? \"^\" : useTab ? \"\\t\" : \" \";\t\t}\t\tif (cause == null) {            throw new TemplateException(message, location);        } else {            throw new TemplateException(message, location, cause);        }\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionError.java", "stars": "13", "class": {"name": "ExpressionError", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "error", "params": ["String", "Span"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void error (String message, Span location) {\t\terror(message, location, null);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionError.java", "stars": "13", "class": {"name": "ExpressionError", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Span", "snippet": "\t\tpublic Span getLocation () {\t\t\treturn location;\t\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionError.java", "stars": "13", "class": {"name": "TemplateException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getMessage () {\t\t\tStringBuilder builder = new StringBuilder();\t\t\tif (getCause() == null || getCause() == this) {\t\t\t\treturn super.getMessage();\t\t\t}\t\t\tbuilder.append(errorMessage.substring(0, errorMessage.indexOf('\\n')));\t\t\tbuilder.append(\"\\n\");\t\t\tThrowable cause = getCause();\t\t\twhile (cause != null && cause != this) {\t\t\t\tif (cause instanceof TemplateException) {\t\t\t\t\tTemplateException ex = (TemplateException)cause;\t\t\t\t\tif (ex.getCause() == null || ex.getCause() == ex) {                        builder.append(ex.errorMessage);                    } else {                        builder.append(ex.errorMessage.substring(0, ex.errorMessage.indexOf('\\n')));                    }\t\t\t\t\tbuilder.append(\"\\n\");\t\t\t\t}\t\t\t\tcause = cause.getCause();\t\t\t}\t\t\treturn builder.toString();\t\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionError.java", "stars": "13", "class": {"name": "TemplateException", "extends": "RuntimeException", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(final Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_account_details);        serviceName = findViewById(R.id.service);        username = findViewById(R.id.username);        password = findViewById(R.id.password);        last_edited = findViewById(R.id.last_edited);        save = findViewById(R.id.save);        delete = findViewById(R.id.delete);        generate_password = findViewById(R.id.generate_password);        save.setVisibility(View.GONE);        extras = getIntent().getExtras();        if (extras.containsKey(\"action\"))            action = extras.getString(\"action\");        if (action.equals(\"creating_new\")) {            setTitle(\"Add Account\");            delete.setVisibility(View.GONE);        } else {            generate_password.setVisibility(View.GONE);            if (extras.containsKey(\"serviceName\")) {                serviceName.setText(extras.getString(\"serviceName\"));                setTitle(extras.getString(\"serviceName\") + \" Account\");            }            if (extras.containsKey(\"username\"))                username.setText(extras.getString(\"username\"));            if (extras.containsKey(\"password\"))                password.setText(extras.getString(\"password\"));            if (extras.containsKey(\"last_edited\"))                last_edited.setText(\"Last edited on \" + extras.getString(\"last_edited\"));        }        serviceName.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                updateButtons();            }        });        username.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                updateButtons();            }        });        password.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                updateButtons();            }        });    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/AccountDetails.java", "stars": "2", "class": {"name": "AccountDetails", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void save(View view) {        boolean success = false;        // if no field is empty        if (serviceName.getText().toString().length() > 0 && username.getText().toString().length() > 0 && password.getText().toString().length() > 0) {            ArrayList<Account> accounts = new Helpers().readAccounts(this);            if (action.equals(\"creating_new\")) {                Account account = null;                for (Account account1 : accounts) {                    if (account1.getServiceName().equals(serviceName.getText().toString()) && account1.getUsername().equals(username.getText().toString()))                        account = account1;                }                if (account != null) { // if the requested account already exists                    Toast.makeText(this, \"An account with this service name and username already exist.\", Toast.LENGTH_SHORT).show();                } else {                    account = new Account();                    account.setServiceName(serviceName.getText().toString());                    account.setUsername(username.getText().toString());                    account.setPassword(password.getText().toString());                    account.setLastChanged(new Helpers().getStringDate());                    accounts.add(account);                    success = true;                }            } else {                boolean checked = true;                for (Account account : accounts) {                    Log.d(null, \"service: \" + account.getServiceName() + \" \" + serviceName.getText().toString() + \"\\nusername: \" + account.getUsername() + \" \" + username.getText().toString());                    if((account.getServiceName().equals(serviceName.getText().toString()) && account.getUsername().equals(username.getText().toString())) && (!extras.getString(\"serviceName\").equals(serviceName.getText().toString()) || !extras.getString(\"username\").equals(username.getText().toString()))) {                        Toast.makeText(this, \"An account with this service name and username already exist.\", Toast.LENGTH_SHORT).show();                        checked = false;                        break;                    }                }                if(checked) {                    for(Account account : accounts) {                        if(account.getServiceName().equals(extras.getString(\"serviceName\")) && account.getUsername().equals(extras.getString(\"username\"))) {                            account.setServiceName(serviceName.getText().toString());                            account.setUsername(username.getText().toString());                            account.setPassword(password.getText().toString());                            account.setLastChanged(new Helpers().getStringDate());                            success = true;                            break;                        }                    }                }            }            if (success) {                String message_text = action.equals(\"creating_new\") ? \"Account created successfully.\" : \"Account updated successfully.\";                if (new Helpers().saveAccounts(this, accounts))                    this.finish();                else // an error occurred saving the accounts to the file                    message_text = \"Error\";                Toast.makeText(this, message_text, Toast.LENGTH_SHORT).show();            }        } else {            Toast.makeText(this, \"At least one field is empty.\", Toast.LENGTH_SHORT).show();        }    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/AccountDetails.java", "stars": "2", "class": {"name": "AccountDetails", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void delete(View view) {        ArrayList<Account> accounts = new Helpers().readAccounts(this);        String compare_to;        if (extras.containsKey(\"serviceName\"))            compare_to = extras.getString(\"serviceName\");        else            compare_to = serviceName.getText().toString();        for (int i = 0; i < accounts.size(); i++) {            if (accounts.get(i).getServiceName().equals(compare_to)) {                accounts.remove(accounts.get(i));                break;            }        }        if (new Helpers().saveAccounts(this, accounts))            this.finish();        else            Toast.makeText(this, \"Error deleting account.\", Toast.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/AccountDetails.java", "stars": "2", "class": {"name": "AccountDetails", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "generatePassword", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void generatePassword(View view) {        password.setText(new Helpers().generatePassword(8));    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/AccountDetails.java", "stars": "2", "class": {"name": "AccountDetails", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateButtons", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateButtons() {        if (!action.equals(\"creating_new\")) {            if (!serviceName.getText().toString().equals(extras.getString(\"serviceName\")) || !username.getText().toString().equals(extras.getString(\"username\")) || !password.getText().toString().equals(extras.getString(\"password\")))                save.setVisibility(View.VISIBLE);            else                save.setVisibility(View.GONE);        } else {            save.setVisibility(View.VISIBLE);        }    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/AccountDetails.java", "stars": "2", "class": {"name": "AccountDetails", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseMultipart", "params": ["HttpServletRequest"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> parseMultipart(final HttpServletRequest request)      throws IOException, ServletException {    final ServletFileUpload upload = new ServletFileUpload(this._uploadItemFactory);    List<FileItem> items = null;    try {      items = upload.parseRequest(request);    } catch (final FileUploadException e) {      throw new ServletException(e);    }    final Map<String, Object> params = new HashMap<>();    for (final FileItem item : items) {      if (item.isFormField()) {        params.put(item.getFieldName(), item.getString());      } else {        params.put(item.getFieldName(), item);      }    }    return params;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/MultipartParser.java", "stars": "18", "class": {"name": "MultipartParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        File file = new File(\"/Users/chengcheng/Desktop/test/abc\");        getAllFile(file);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/File/FileFilter.java", "stars": "2", "class": {"name": "FileFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFile", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void getAllFile(File dir){        //System.out.println(dir);//\u6253\u5370\u88ab\u904d\u5386\u7684\u76ee\u5f55\u7ed3\u6784        File[] files = dir.listFiles(new FileFilterImpl());        for (File f : files){            //\u5224\u65ad\u662f\u5426\u6587\u4ef6\u5939            if(f.isDirectory()){                //\u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u8c03\u7528\u81ea\u5df1                getAllFile(f);            }else{                System.out.println(f);            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/File/FileFilter.java", "stars": "2", "class": {"name": "FileFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHBASEImpl", "params": ["FileSystem"], "throws": null, "modifiers": ["public", "static"], "return_type": "HFileParser", "snippet": "    public static HFileParser getHBASEImpl(FileSystem fileSystem){        return hFileParserStoreMap.computeIfAbsent(\"HBASEImpl\", key -> new HBASEV1HFileParser(fileSystem));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/hfile/HFileParserFactory.java", "stars": "23", "class": {"name": "HFileParserFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHBASEImpl", "params": ["FileSystem", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "HFileParser", "snippet": "    public static HFileParser getHBASEImpl(FileSystem fileSystem, String encoding){        return hFileParserStoreMap.computeIfAbsent(\"HBASEImpl\", key -> new HBASEV1HFileParser(fileSystem, encoding));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/hfile/HFileParserFactory.java", "stars": "23", "class": {"name": "HFileParserFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAnimationCancel", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationCancel (android.animation.Animator p0)\t{\t\tn_onAnimationCancel (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationCancel", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationCancel (android.animation.Animator p0);\tpublic void onAnimationEnd (android.animation.Animator p0)\t{\t\tn_onAnimationEnd (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onAnimationEnd", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationEnd (android.animation.Animator p0)\t{\t\tn_onAnimationEnd (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationEnd", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationEnd (android.animation.Animator p0);\tpublic void onAnimationRepeat (android.animation.Animator p0)\t{\t\tn_onAnimationRepeat (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onAnimationRepeat", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationRepeat (android.animation.Animator p0)\t{\t\tn_onAnimationRepeat (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationRepeat", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationRepeat (android.animation.Animator p0);\tpublic void finalize ()\t{\t\tn_finalize ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "finalize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void finalize ()\t{\t\tn_finalize ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_finalize", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_finalize ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GenericAnimatorListener.java", "stars": "2", "class": {"name": "GenericAnimatorListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getPriorityLevel", "params": ["Class<CapabilityMethods>"], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPriorityLevel(Class<? extends CapabilityMethods> clazz) {        if (clazz.equals(MediaPlayer.class)) {            return getMediaPlayerCapabilityLevel();        }        else if (clazz.equals(MediaControl.class)) {            return getMediaControlCapabilityLevel();        }        return CapabilityPriorityLevel.NOT_SUPPORTED;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "discoveryFilter", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DiscoveryFilter", "snippet": "    public static DiscoveryFilter discoveryFilter() {        return new DiscoveryFilter(ID, \"_airplay._tcp.local.\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaControl", "snippet": "    public MediaControl getMediaControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "play", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play(ResponseListener<Object> listener) {        Map <String,String> params = new HashMap<String,String>();        params.put(\"value\", \"1.000000\");        String uri = getRequestURL(\"rate\", params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "pause", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause(ResponseListener<Object> listener) {        Map <String,String> params = new HashMap<String,String>();        params.put(\"value\", \"0.000000\");        String uri = getRequestURL(\"rate\", params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "stop", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop(ResponseListener<Object> listener) {        String uri = getRequestURL(\"stop\");        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, null, listener);        // TODO This is temp fix for issue https://github.com/ConnectSDK/Connect-SDK-Android/issues/66        request.send();        request.send();        stopTimer();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "rewind", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rewind(ResponseListener<Object> listener) {        Map <String,String> params = new HashMap<String,String>();        params.put(\"value\", \"-2.000000\");        String uri = getRequestURL(\"rate\", params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "fastForward", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fastForward(ResponseListener<Object> listener) {        Map <String,String> params = new HashMap<String,String>();        params.put(\"value\", \"2.000000\");        String uri = getRequestURL(\"rate\", params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "previous", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void previous(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "next", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void next(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "seek", "params": ["long", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seek(long position, ResponseListener<Object> listener) {        float pos = ((float) position / 1000);         Map <String,String> params = new HashMap<String,String>();        params.put(\"position\", String.valueOf(pos));        String uri = getRequestURL(\"scrub\", params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getPosition", "params": ["PositionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPosition(final PositionListener listener) {        getPlaybackPosition(new PlaybackPositionListener() {            @Override            public void onGetPlaybackPositionSuccess(long duration, long position) {                Util.postSuccess(listener, position);            }            @Override            public void onGetPlaybackPositionFailed(ServiceCommandError error) {                Util.postError(listener, new ServiceCommandError(0, \"Unable to get position\", null));            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getPlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPlayState(final PlayStateListener listener) {        getPlaybackInfo(new ResponseListener<Object>() {            @Override            public void onSuccess(Object object) {                PlayStateStatus playState = PlayStateStatus.Unknown;                try {                    JSONObject response = new PListParser().parse(object.toString());                    if (!response.has(\"rate\")) {                        playState = PlayStateStatus.Finished;                    } else {                        int rate = response.getInt(\"rate\");                        if (rate == 0) {                            playState = PlayStateStatus.Paused;                        } else if (rate == 1) {                            playState = PlayStateStatus.Playing;                        }                    }                    Util.postSuccess(listener, playState);                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(500, e.getMessage(), null));                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getDuration", "params": ["DurationListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getDuration(final DurationListener listener) {        getPlaybackPosition(new PlaybackPositionListener() {            @Override            public void onGetPlaybackPositionSuccess(long duration, long position) {                Util.postSuccess(listener, duration);            }            @Override            public void onGetPlaybackPositionFailed(ServiceCommandError error) {                Util.postError(listener, new ServiceCommandError(0, \"Unable to get duration\", null));            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getPlaybackPosition", "params": ["PlaybackPositionListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getPlaybackPosition(final PlaybackPositionListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String strResponse = (String) response;                long duration = 0;                long position = 0;                StringTokenizer st = new StringTokenizer(strResponse);                while (st.hasMoreTokens()) {                    String str = st.nextToken();                    if (str.contains(\"duration\")) {                        duration = parseTimeValueFromString(st.nextToken());                    }                    else if (str.contains(\"position\")) {                        position = parseTimeValueFromString(st.nextToken());                    }                }                if (listener != null) {                    listener.onGetPlaybackPositionSuccess(duration, position);                }            }            @Override            public void onError(ServiceCommandError error) {                if (listener != null)                    listener.onGetPlaybackPositionFailed(error);            }        };        String uri = getRequestURL(\"scrub\");        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, null, responseListener);        request.setHttpMethod(ServiceCommand.TYPE_GET);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "parseTimeValueFromString", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long parseTimeValueFromString(String value) {        long duration = 0L;        try {            float f = Float.valueOf(value);            duration = (long) f * 1000;        } catch (RuntimeException e) {            e.printStackTrace();        }        return duration;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getPlaybackInfo", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getPlaybackInfo(ResponseListener<Object> listener) {        String uri = getRequestURL(\"playback-info\");        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, null, listener);        request.setHttpMethod(ServiceCommand.TYPE_GET);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "subscribePlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<PlayStateListener>", "snippet": "    public ServiceSubscription<PlayStateListener> subscribePlayState(            PlayStateListener listener) {        URLServiceSubscription<PlayStateListener> request = new URLServiceSubscription<>(this, PLAY_STATE, null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "    public MediaPlayer getMediaPlayer() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayerCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaPlayerCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMediaInfo(MediaInfoListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "subscribeMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<MediaInfoListener>", "snippet": "    public ServiceSubscription<MediaInfoListener> subscribeMediaInfo(            MediaInfoListener listener) {        listener.onError(ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["String", "String", "String", "String", "String", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(final String url, String mimeType, String title,            String description, String iconSrc, final LaunchListener listener) {        Util.runInBackground(new Runnable() {            @Override            public void run() {                ResponseListener<Object> responseListener = new ResponseListener<Object>() {                    @Override                    public void onSuccess(Object response) {                        LaunchSession launchSession = new LaunchSession();                        launchSession.setService(AirPlayService.this);                        launchSession.setSessionType(LaunchSessionType.Media);                        Util.postSuccess(listener, new MediaLaunchObject(launchSession, AirPlayService.this));                    }                    @Override                    public void onError(ServiceCommandError error) {                        Util.postError(listener, error);                    }                };                String uri = getRequestURL(\"photo\");                byte[] payload = null;                try {                    URL imagePath = new URL(url);                    HttpURLConnection connection = (HttpURLConnection) imagePath.openConnection();                    connection.setInstanceFollowRedirects(true);                    connection.setDoInput(true);                    connection.connect();                    int responseCode = connection.getResponseCode();                    boolean redirect = (responseCode == HttpURLConnection.HTTP_MOVED_TEMP                            || responseCode == HttpURLConnection.HTTP_MOVED_PERM                            || responseCode == HttpURLConnection.HTTP_SEE_OTHER);                    if(redirect) {                        String newPath = connection.getHeaderField(\"Location\");                        URL newImagePath = new URL(newPath);                        connection = (HttpURLConnection) newImagePath.openConnection();                        connection.setInstanceFollowRedirects(true);                        connection.setDoInput(true);                        connection.connect();                    }                    InputStream input = connection.getInputStream();                    Bitmap myBitmap = BitmapFactory.decodeStream(input);                    ByteArrayOutputStream stream = new ByteArrayOutputStream();                    myBitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);                    payload = stream.toByteArray();                } catch (MalformedURLException e) {                    e.printStackTrace();                } catch (IOException e) {                    e.printStackTrace();                } catch (Exception e) {                    e.printStackTrace();                }                ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(AirPlayService.this, uri, payload, responseListener);                request.setHttpMethod(ServiceCommand.TYPE_PUT);                request.send();            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["MediaInfo", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(MediaInfo mediaInfo, LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        displayImage(mediaUrl, mimeType, title, desc, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "playVideo", "params": ["String", "String", "String", "String", "String", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playVideo(final String url, String mimeType, String title,            String description, String iconSrc, boolean shouldLoop,            final LaunchListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                LaunchSession launchSession = new LaunchSession();                launchSession.setService(AirPlayService.this);                launchSession.setSessionType(LaunchSessionType.Media);                Util.postSuccess(listener, new MediaLaunchObject(launchSession, AirPlayService.this));                startTimer();            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String uri = getRequestURL(\"play\");        String payload = null;        PListBuilder builder = new PListBuilder();        builder.putString(\"Content-Location\", url);        builder.putReal(\"Start-Position\", 0);        payload = builder.toString();        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, payload, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["String", "String", "String", "String", "String", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(String url, String mimeType, String title,            String description, String iconSrc, boolean shouldLoop,            LaunchListener listener) {        if (mimeType.contains(\"image\")) {            displayImage(url, mimeType, title, description, iconSrc, listener);        }        else {            playVideo(url, mimeType, title, description, iconSrc, shouldLoop, listener);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["MediaInfo", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(MediaInfo mediaInfo, boolean shouldLoop, LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        playMedia(mediaUrl, mimeType, title, desc, iconSrc, shouldLoop, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "closeMedia", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeMedia(LaunchSession launchSession,            ResponseListener<Object> listener) {        stop(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "sendCommand", "params": ["ServiceCommand<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendCommand(final ServiceCommand<?> serviceCommand) {        Util.runInBackground(new Runnable() {            @Override            public void run() {                try {                    StringBuilder sb = new StringBuilder();                    sb.append(\"http://\").append(serviceDescription.getIpAddress()).append(\":\").append(serviceDescription.getPort());                    sb.append(serviceCommand.getTarget());                    HttpConnection connection = HttpConnection.newInstance(URI.create(sb.toString()));                    connection.setHeader(HTTP.USER_AGENT, \"ConnectSDK MediaControl/1.0\");                    connection.setHeader(X_APPLE_SESSION_ID, mSessionId);                    if (password != null) {                        String authorization = getAuthenticate(serviceCommand.getHttpMethod(), serviceCommand.getTarget(), authenticate);                        connection.setHeader(\"Authorization\", authorization);                    }                    Object payload = serviceCommand.getPayload();                    if (serviceCommand.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)                            || serviceCommand.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_PUT)) {                        if (payload != null) {                            if (payload instanceof String) {                                connection.setHeader(HttpMessage.CONTENT_TYPE_HEADER, HttpMessage.CONTENT_TYPE_APPLICATION_PLIST);                                connection.setPayload(payload.toString());                            } else if (payload instanceof byte[]) {                                connection.setPayload((byte[]) payload);                            }                        }                    }                    if (serviceCommand.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {                        connection.setMethod(HttpConnection.Method.POST);                    } else if (serviceCommand.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_PUT)) {                        connection.setMethod(HttpConnection.Method.PUT);                    } else {                        connection.setHeader(\"Content-Length\", \"0\");                    }                    connection.execute();                    int code = connection.getResponseCode();                    if (code == HttpURLConnection.HTTP_OK) {                        Util.postSuccess(serviceCommand.getResponseListener(), connection.getResponseString());                    } else if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {                        authenticate = connection.getResponseHeader(\"WWW-Authenticate\");                        pendingCommand = serviceCommand;                        Util.runOnUI(new Runnable() {                            @Override                            public void run() {                                if (listener != null) {                                    listener.onPairingRequired(AirPlayService.this, pairingType, null);                                }                            }                        });                    } else {                        Util.postError(serviceCommand.getResponseListener(), ServiceCommandError.getError(code));                    }                } catch (IOException e) {                    e.printStackTrace();                    Util.postError(serviceCommand.getResponseListener(), new ServiceCommandError(0, e.getMessage(), null));                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "sendPairingKey", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendPairingKey(String pairingKey) {        password = pairingKey;        if (pendingCommand != null)            pendingCommand.send();        pendingCommand = null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getAuthenticate", "params": ["String", "String", "String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String getAuthenticate(String method, String digestURI, String authStr) {        String realm = null;        String nonce = null;        StringTokenizer st = new StringTokenizer(authStr, \"=\\\", \");        while (st.hasMoreTokens()) {            String str = st.nextToken();            if (str.equalsIgnoreCase(\"realm\")) {     // Digest realm                realm = st.nextToken();            } else if (str.equalsIgnoreCase(\"nonce\")) {                nonce = st.nextToken();            }        }        StringBuilder sb = new StringBuilder();        sb.append(\"AirPlay\").append(\":\").append(realm).append(\":\").append(password);        String HA1 = digestAuthentication(sb.toString());        sb = new StringBuilder();        sb.append(method).append(\":\").append(digestURI);        String HA2 = digestAuthentication(sb.toString());        sb = new StringBuilder();        sb.append(HA1).append(\":\").append(nonce).append(\":\").append(HA2);        String response = digestAuthentication(sb.toString());        sb = new StringBuilder();        sb.append(\"Digest username\").append(\"=\").append(\"\\\"\").append(\"AirPlay\").append(\"\\\"\").append(\", \");        sb.append(\"realm\").append(\"=\").append(\"\\\"\").append(realm).append(\"\\\"\").append(\", \");        sb.append(\"nonce\").append(\"=\").append(\"\\\"\").append(nonce).append(\"\\\"\").append(\", \");        sb.append(\"uri\").append(\"=\").append(\"\\\"\").append(digestURI).append(\"\\\"\").append(\", \");        sb.append(\"response\").append(\"=\").append(\"\\\"\").append(response).append(\"\\\"\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "digestAuthentication", "params": ["String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String digestAuthentication(String md5) {        try {            MessageDigest md = MessageDigest.getInstance(\"MD5\");            byte[] digest = md.digest(md5.getBytes());            StringBuffer sb = new StringBuffer();            for (byte b : digest) {                sb.append(String.format(\"%02x\", b & 0xFF));            }            return sb.toString();        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        } catch (NullPointerException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "updateCapabilities", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateCapabilities() {        List<String> capabilities = new ArrayList<String>();        capabilities.add(Display_Image);        capabilities.add(Play_Video);        capabilities.add(Play_Audio);        capabilities.add(Close);        capabilities.add(Play);        capabilities.add(Pause);        capabilities.add(Stop);        capabilities.add(Position);        capabilities.add(Duration);        capabilities.add(PlayState);        capabilities.add(Seek);        capabilities.add(Rewind);        capabilities.add(FastForward);        capabilities.add(PlayState_Subscribe);        setCapabilities(capabilities);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getRequestURL", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getRequestURL(String command) {        return getRequestURL(command, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getRequestURL", "params": ["String", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getRequestURL(String command, Map<String, String> params) {        StringBuilder sb = new StringBuilder();        sb.append(\"/\").append(command);        if (params != null) {            for (Map.Entry<String, String> entry : params.entrySet()) {                String param = String.format(\"?%s=%s\", entry.getKey(), entry.getValue());                sb.append(param);             }        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "isConnectable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnectable() {        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() {        mSessionId = UUID.randomUUID().toString();        getPlaybackInfo(new ResponseListener<Object>() {            @Override            public void onSuccess(Object object) {                connected = true;                reportConnected(true);            }            @Override            public void onError(ServiceCommandError error) {                if (listener != null) {                    listener.onConnectionFailure(AirPlayService.this, error);                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {        stopTimer();        connected=false;        password = null;        if (mServiceReachability != null)            mServiceReachability.stop();        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (listener != null)                    listener.onDisconnect(AirPlayService.this, null);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "onLoseReachability", "params": ["DeviceServiceReachability"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoseReachability(DeviceServiceReachability reachability) {        if (connected) {            disconnect();        } else {            mServiceReachability.stop();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "startTimer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startTimer() {        stopTimer();        timer = new Timer();        timer.scheduleAtFixedRate(new TimerTask() {            @Override            public void run() {                Log.d(\"Timer\", \"Timer\");                getPlaybackPosition(new PlaybackPositionListener() {                    @Override                    public void onGetPlaybackPositionSuccess(long duration, long position) {                        if (position >= duration) {                            stopTimer();                        }                    }                    @Override                    public void onGetPlaybackPositionFailed(ServiceCommandError error) {                    }                });            }        }, KEEP_ALIVE_PERIOD, KEEP_ALIVE_PERIOD);        updateTimer = new Timer();        updateTimer.scheduleAtFixedRate(new TimerTask() {            @Override            public void run() {                getPlaybackInfo(new ResponseListener<Object>() {                    @Override                    public void onSuccess(Object object) {                        PlayStateStatus playState = PlayStateStatus.Unknown;                        try {                            JSONObject response = new PListParser().parse(object.toString());                            if (response.length() > 0) {                                boolean readyToPlay = false;                                if (response.has(\"readyToPlay\")) {                                    readyToPlay = response.getBoolean(\"readyToPlay\");                                }                                if (!readyToPlay) {                                    playState = PlayStateStatus.Buffering;                                } else {                                    if (!response.has(\"rate\")) {                                        playState = PlayStateStatus.Finished;                                    } else {                                        int rate = response.getInt(\"rate\");                                        if (rate == 0) {                                            playState = PlayStateStatus.Paused;                                        } else if (rate == 1) {                                            playState = PlayStateStatus.Playing;                                        }                                    }                                }                                if (mSubscriptions.size() > 0) {                                    for (URLServiceSubscription<?> subscription : mSubscriptions) {                                        if (subscription.getTarget().equalsIgnoreCase(PLAY_STATE)) {                                            for (int i = 0; i < subscription.getListeners().size(); i++) {                                                @SuppressWarnings(\"unchecked\")                                                ResponseListener<Object> listener = (ResponseListener<Object>) subscription.getListeners().get(i);                                                Util.postSuccess(listener, playState);                                            }                                        }                                    }                                }                            }                        } catch (Exception e) {                        }                    }                    @Override                    public void onError(ServiceCommandError error) {                    }                });            }        }, 0, UPDATE_PERIOD);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "stopTimer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void stopTimer() {        if (timer != null) {            timer.cancel();        }        if(updateTimer != null) {            updateTimer.cancel();        }        updateTimer = null;        timer = null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "addSubscription", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addSubscription(URLServiceSubscription<?> subscription) {        mSubscriptions.add(subscription);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "unsubscribe", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unsubscribe(URLServiceSubscription<?> subscription) {        mSubscriptions.remove(subscription);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getSubscriptions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<URLServiceSubscription>", "snippet": "    public List<URLServiceSubscription<?>> getSubscriptions() {        return mSubscriptions;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "setSubscriptions", "params": ["List<URLServiceSubscription>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubscriptions(List<URLServiceSubscription<?>> subscriptions) {        this.mSubscriptions = subscriptions;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/AirPlayService.java", "stars": "4", "class": {"name": "AirPlayService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Father.java", "stars": "15", "class": {"name": "Father", "extends": "Base", "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Father.java", "stars": "15", "class": {"name": "Father", "extends": "Base", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Father.java", "stars": "15", "class": {"name": "Father", "extends": "Base", "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Father.java", "stars": "15", "class": {"name": "Father", "extends": "Base", "implements": null, "modifiers": ["public"]}}, {"method_name": "getChildren", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Child>", "snippet": "  public List<Child> getChildren() {    return children;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Father.java", "stars": "15", "class": {"name": "Father", "extends": "Base", "implements": null, "modifiers": ["public"]}}, {"method_name": "setChildren", "params": ["List<Child>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setChildren(List<Child> children) {    this.children = children;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Father.java", "stars": "15", "class": {"name": "Father", "extends": "Base", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean start() {        if (isReleased())            throw new IllegalStateException(\"MediaDiscoverer is released\");        return nativeStart();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        if (isReleased())            throw new IllegalStateException(\"MediaDiscoverer is released\");        nativeStop();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "setEventListener", "params": ["EventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEventListener(EventListener listener) {        super.setEventListener(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEventNative", "params": ["int", "long", "float"], "throws": null, "modifiers": ["protected"], "return_type": "Event", "snippet": "    protected Event onEventNative(int eventType, long arg1, float arg2) {        switch (eventType) {            case Event.Started:            case Event.Ended:                return new Event(eventType);        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaList", "snippet": "    public MediaList getMediaList() {        synchronized (this) {            if (mMediaList != null) {                mMediaList.retain();                return mMediaList;            }        }        final MediaList mediaList = new MediaList(this);        synchronized (this) {            mMediaList = mediaList;            mMediaList.retain();            return mMediaList;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "onReleaseNative", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onReleaseNative() {        if (mMediaList != null)            mMediaList.release();        nativeRelease();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeNew", "params": ["LibVLC", "String"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeNew(LibVLC libVLC, String name);    private native void nativeRelease();    private native boolean nativeStart();    private native void nativeStop();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeRelease", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeRelease();    private native boolean nativeStart();    private native void nativeStop();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeStart", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "    private native boolean nativeStart();    private native void nativeStop();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeStop", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeStop();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaDiscoverer.java", "stars": "4", "class": {"name": "MediaDiscoverer", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "javaTimeModule", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JavaTimeModule", "snippet": "    public JavaTimeModule javaTimeModule() {        return new JavaTimeModule();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/JacksonConfiguration.java", "stars": "2", "class": {"name": "JacksonConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jdk8TimeModule", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Jdk8Module", "snippet": "    public Jdk8Module jdk8TimeModule() {        return new Jdk8Module();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/JacksonConfiguration.java", "stars": "2", "class": {"name": "JacksonConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hibernate5Module", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Hibernate5Module", "snippet": "    public Hibernate5Module hibernate5Module() {        return new Hibernate5Module();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/JacksonConfiguration.java", "stars": "2", "class": {"name": "JacksonConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "afterburnerModule", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AfterburnerModule", "snippet": "    public AfterburnerModule afterburnerModule() {        return new AfterburnerModule();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/JacksonConfiguration.java", "stars": "2", "class": {"name": "JacksonConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "problemModule", "params": [], "throws": null, "modifiers": [], "return_type": "ProblemModule", "snippet": "    ProblemModule problemModule() {        if (Arrays.stream(env.getActiveProfiles()).noneMatch(profileString -> profileString.equals(\"prod\"))) {            return new ProblemModule().withStackTraces();        } else {            return new ProblemModule();        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/JacksonConfiguration.java", "stars": "2", "class": {"name": "JacksonConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "constraintViolationProblemModule", "params": [], "throws": null, "modifiers": [], "return_type": "ConstraintViolationProblemModule", "snippet": "    ConstraintViolationProblemModule constraintViolationProblemModule() {        return new ConstraintViolationProblemModule();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/JacksonConfiguration.java", "stars": "2", "class": {"name": "JacksonConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getHost() {\t\treturn host;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setHost", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setHost(String host) {\t\tthis.host = host;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getHost_server_list", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<HostServer>", "snippet": "\tpublic List<HostServer> getHost_server_list() {\t\treturn host_server_list;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setHost_server_list", "params": ["List<HostServer>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setHost_server_list(List<HostServer> host_server_list) {\t\tthis.host_server_list = host_server_list;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMax_delay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getMax_delay() {\t\treturn max_delay;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMax_delay", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setMax_delay(Integer max_delay) {\t\tthis.max_delay = max_delay;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getPort() {\t\treturn port;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPort", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPort(Integer port) {\t\tthis.port = port;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getRefresh_rate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getRefresh_rate() {\t\treturn refresh_rate;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setRefresh_rate", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setRefresh_rate(Integer refresh_rate) {\t\tthis.refresh_rate = refresh_rate;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getRefresh_row_factor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getRefresh_row_factor() {\t\treturn refresh_row_factor;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setRefresh_row_factor", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setRefresh_row_factor(Integer refresh_row_factor) {\t\tthis.refresh_row_factor = refresh_row_factor;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getServer_list", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<HostServerIp>", "snippet": "\tpublic List<HostServerIp> getServer_list() {\t\treturn server_list;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setServer_list", "params": ["List<HostServerIp>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setServer_list(List<HostServerIp> server_list) {\t\tthis.server_list = server_list;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getToken() {\t\treturn token;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setToken(String token) {\t\tthis.token = token;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"Conf [host=\" + host + \", host_server_list=\" + host_server_list + \", max_delay=\" + max_delay + \", port=\"\t\t\t\t+ port + \", refresh_rate=\" + refresh_rate + \", refresh_row_factor=\" + refresh_row_factor\t\t\t\t+ \", server_list=\" + server_list + \", token=\" + token + \"]\";\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/entity/Conf.java", "stars": "3", "class": {"name": "Conf", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "\tpublic ViewHolder onCreateViewHolder(ViewGroup parent) {\t\tfinal MoreCardView cardView = new MoreCardView(mContext);\t\treturn new ViewHolder(cardView);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MorePresenter.java", "stars": "4", "class": {"name": "MorePresenter", "extends": "Presenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["ViewHolder", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBindViewHolder(ViewHolder viewHolder, Object item) {\t\tMoreItem moreItem = (MoreItem) item;\t\tMoreCardView cardView = (MoreCardView) viewHolder.view;\t\tcardView.setTitleText(StringUtils.capWords(moreItem.mTitle.toLowerCase()));\t\tcardView.setImageResource(moreItem.mIcon);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MorePresenter.java", "stars": "4", "class": {"name": "MorePresenter", "extends": "Presenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUnbindViewHolder", "params": ["ViewHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onUnbindViewHolder(ViewHolder viewHolder) {\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MorePresenter.java", "stars": "4", "class": {"name": "MorePresenter", "extends": "Presenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getId() {\t\t\treturn mId;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MorePresenter.java", "stars": "4", "class": {"name": "MoreItem", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNavInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaProvider", "snippet": "\t\tpublic MediaProvider.NavInfo getNavInfo() {\t\t\treturn mNavInfo;\t\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MorePresenter.java", "stars": "4", "class": {"name": "MoreItem", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);        mShowReload = true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_videoplayer, container, false);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        view.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                return onTouchEvent(event);            }        });        ButterKnife.bind(this, view);        if (LocaleUtils.isRTL(LocaleUtils.getCurrent())) {            Drawable forward = mForwardButton.getDrawable();            Drawable rewind = mRewindButton.getDrawable();            mRewindButton.setImageDrawable(forward);            mForwardButton.setImageDrawable(rewind);        }        int color = getResources().getColor(R.color.primary);        LayerDrawable progressDrawable;        if (!VersionUtils.isLollipop()) {            progressDrawable = (LayerDrawable) getResources().getDrawable(R.drawable.scrubber_progress_horizontal);        } else {            if (mControlBar.getProgressDrawable() instanceof StateListDrawable) {                StateListDrawable stateListDrawable = (StateListDrawable) mControlBar.getProgressDrawable();                progressDrawable = (LayerDrawable) stateListDrawable.getCurrent();            } else {                progressDrawable = (LayerDrawable) mControlBar.getProgressDrawable();            }        }        progressDrawable.findDrawableByLayerId(android.R.id.progress).setColorFilter(color, PorterDuff.Mode.SRC_IN);        progressDrawable.findDrawableByLayerId(android.R.id.secondaryProgress).setColorFilter(color, PorterDuff.Mode.SRC_IN);        mControlBar.setProgressDrawable(progressDrawable);        mControlBar.getThumbDrawable().setColorFilter(color, PorterDuff.Mode.SRC_IN);        mGestureDetector = new GestureDetectorCompat(getActivity(), mGestureListener);        mGestureDetector.setOnDoubleTapListener(mGestureListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        setRetainInstance(true);        getAppCompatActivity().setSupportActionBar(mToolbar);        videoSurface.setVisibility(View.VISIBLE);        mToolbar.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                onTouchEvent(event);                return true;            }        });\t\t/* Services and miscellaneous */        mAudioManager = (AudioManager) getActivity().getSystemService(Context.AUDIO_SERVICE);        mAudioMax = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);        mDisplayHandler = new Handler(Looper.getMainLooper());        mDecorView = getActivity().getWindow().getDecorView();        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {            mDecorView.setOnSystemUiVisibilityChangeListener(this);        }        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR2) {            getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);            getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);            mToolbar.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,                    getResources().getDimensionPixelSize(R.dimen.abc_action_bar_default_height_material) +                            PixelUtils.getStatusBarHeight(getActivity())));            mToolbar.setPadding(mToolbar.getPaddingLeft(), PixelUtils.getStatusBarHeight(getActivity()), mToolbar.getPaddingRight(),                    mToolbar.getPaddingBottom());        }        if(getAppCompatActivity().getSupportActionBar() != null) {            if (null != mCallback.getInfo()) {                if (mMedia != null && mMedia.title != null) {                    if (null != mCallback.getInfo().getQuality()) {                        getAppCompatActivity().getSupportActionBar().setTitle(                                getString(R.string.now_playing) + \": \" + mMedia.title + \" (\" + mCallback.getInfo().getQuality() + \")\");                    } else {                        getAppCompatActivity().getSupportActionBar().setTitle(getString(R.string.now_playing) + \": \" + mMedia.title);                    }                } else {                    getAppCompatActivity().getSupportActionBar().setTitle(getString(R.string.now_playing));                }            } else {                getAppCompatActivity().getSupportActionBar().setTitle(getString(R.string.now_playing));            }            getAppCompatActivity().getSupportActionBar().setDisplayHomeAsUpEnabled(true);        }        mSubtitleText.setTextColor(PrefUtils.get(getActivity(), Prefs.SUBTITLE_COLOR, Color.WHITE));        mSubtitleText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, PrefUtils.get(getActivity(), Prefs.SUBTITLE_SIZE, 16));        mSubtitleText.setStrokeColor(PrefUtils.get(getActivity(), Prefs.SUBTITLE_STROKE_COLOR, Color.BLACK));        mSubtitleText.setStrokeWidth(TypedValue.COMPLEX_UNIT_DIP, PrefUtils.get(getActivity(), Prefs.SUBTITLE_STROKE_WIDTH, 2));        mControlBar.setOnSeekBarChangeListener(mOnControlBarListener);        getAppCompatActivity().setVolumeControlStream(AudioManager.STREAM_MUSIC);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onPlaybackEndReached", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlaybackEndReached() {        getVideoSurface().setKeepScreenOn(false);        //todod:    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onStop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStop() {        super.onStop();        //restore brightness        if (mRestoreAutoBrightness != -1f) {            int brightness = (int) (mRestoreAutoBrightness * 255f);            Settings.System.putInt(getActivity().getContentResolver(),                    Settings.System.SCREEN_BRIGHTNESS,                    brightness);            Settings.System.putInt(getActivity().getContentResolver(),                    Settings.System.SCREEN_BRIGHTNESS_MODE,                    Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onDestroyView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroyView() {        super.onDestroyView();        mAudioManager = null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "getAppCompatActivity", "params": [], "throws": null, "modifiers": ["private"], "return_type": "AppCompatActivity", "snippet": "    private AppCompatActivity getAppCompatActivity() {        return (AppCompatActivity) getActivity();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "getVideoSurface", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "SurfaceView", "snippet": "    protected SurfaceView getVideoSurface() {        return videoSurface;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTouchEvent(MotionEvent event) {        mGestureDetector.onTouchEvent(event);        DisplayMetrics screen = new DisplayMetrics();        getAppCompatActivity().getWindowManager().getDefaultDisplay().getMetrics(screen);        if (mSurfaceYDisplayRange == 0) {            mSurfaceYDisplayRange = Math.min(screen.widthPixels, screen.heightPixels);        }        float y_changed = event.getRawY() - mTouchY;        float x_changed = event.getRawX() - mTouchX;        // coef is the gradient's move to determine a neutral zone        float coef = Math.abs(y_changed / x_changed);        float xgesturesize = ((x_changed / screen.xdpi) * 2.54f);        int[] offset = new int[2];        videoSurface.getLocationOnScreen(offset);        switch (event.getAction()) {            case MotionEvent.ACTION_DOWN:                // Audio                mTouchY = event.getRawY();                mVol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);                mTouchAction = TOUCH_NONE;                // Seek                mTouchX = event.getRawX();                break;            case MotionEvent.ACTION_MOVE:                if (coef > 2) {                    mTouchY = event.getRawY();                    mTouchX = event.getRawX();                    if ((int) mTouchX > (screen.widthPixels / 2)) {                        doVolumeTouch(y_changed);                    }                    if ((int) mTouchX < (screen.widthPixels / 2)) {                        if (VersionUtils.isMarshmallow()) {                            if (Settings.System.canWrite(getContext())) {                                doVolumeTouch(y_changed);                            }                        } else {                            doBrightnessTouch(y_changed);                        }                    }                } else {                    // Seek (Right or Left move)                    doSeekTouch(coef, xgesturesize, false);                }                break;            case MotionEvent.ACTION_UP:                doSeekTouch(coef, xgesturesize, true);                break;        }        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onSystemUiVisibilityChange", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSystemUiVisibilityChange(int visibility) {        if ((mLastSystemUIVisibility & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) != 0 &&                (visibility & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0) {            showOverlay();        }        mLastSystemUIVisibility = visibility;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "doSeekTouch", "params": ["float", "float", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doSeekTouch(float coef, float gesturesize, boolean seek) {        // No seek action if coef > 0.5 and gesturesize < 1cm        if (coef > 0.5 || Math.abs(gesturesize) < 1) {            return;        }        if (mTouchAction != TOUCH_NONE && mTouchAction != TOUCH_SEEK) {            return;        }        mTouchAction = TOUCH_SEEK;        // Size of the jump, 10 minutes max (600000), with a bi-cubic progression, for a 8cm gesture        int jump = (int) (Math.signum(gesturesize) * ((600000 * Math.pow((gesturesize / 8), 4)) + 3000));        // Adjust the jump        if ((jump > 0) && ((getCurrentTime() + jump) > mControlBar.getSecondaryProgress())) {            jump = (int) (mControlBar.getSecondaryProgress() - getCurrentTime());        }        if ((jump < 0) && ((getCurrentTime() + jump) < 0)) {            jump = (int) -getCurrentTime();        }        long currentTime = getCurrentTime();        if (seek && mControlBar.getSecondaryProgress() > 0) {            seek(jump);        }        if (getDuration() > 0) {            showPlayerInfo(String.format(\"%s%s (%s)\", jump >= 0 ? \"+\" : \"\", StringUtils.millisToString(jump), StringUtils.millisToString(currentTime + jump)));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "doVolumeTouch", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doVolumeTouch(float y_changed) {        if (mTouchAction != TOUCH_NONE && mTouchAction != TOUCH_VOLUME)            return;        float delta = -((y_changed / mSurfaceYDisplayRange) * mAudioMax);        mVol += delta;        int vol = (int) Math.min(Math.max(mVol, 0), mAudioMax);        if (delta != 0f) {            setAudioVolume(vol);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "setAudioVolume", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setAudioVolume(int vol) {        mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, vol, 0);        /* Since android 4.3, the safe volume warning dialog is displayed only with the FLAG_SHOW_UI flag.         * We don't want to always show the default UI volume, so show it only when volume is not set. */        int newVol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);        if (vol != newVol)            mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, vol, AudioManager.FLAG_SHOW_UI);        mTouchAction = TOUCH_VOLUME;        showPlayerInfo(getString(R.string.volume) + '\\u00A0' + Integer.toString(vol));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "initBrightnessTouch", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initBrightnessTouch() {        float brightnesstemp = 0.6f;        try {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO &&                    Settings.System.getInt(getActivity().getContentResolver(), Settings.System.SCREEN_BRIGHTNESS_MODE) == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC) {                if (VersionUtils.isMarshmallow() && Settings.System.canWrite(getActivity()))                    Settings.System.putInt(getActivity().getContentResolver(),                            Settings.System.SCREEN_BRIGHTNESS_MODE,                            Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);                mRestoreAutoBrightness = android.provider.Settings.System.getInt(getActivity().getContentResolver(),                        android.provider.Settings.System.SCREEN_BRIGHTNESS) / 255.0f;            } else {                brightnesstemp = android.provider.Settings.System.getInt(getActivity().getContentResolver(),                        android.provider.Settings.System.SCREEN_BRIGHTNESS) / 255.0f;            }        } catch (Settings.SettingNotFoundException e) {            e.printStackTrace();        }        WindowManager.LayoutParams lp = getAppCompatActivity().getWindow().getAttributes();        lp.screenBrightness = brightnesstemp;        getAppCompatActivity().getWindow().setAttributes(lp);        mIsFirstBrightnessGesture = false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "doBrightnessTouch", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doBrightnessTouch(float y_changed) {        if (mTouchAction != TOUCH_NONE && mTouchAction != TOUCH_BRIGHTNESS)            return;        if (mIsFirstBrightnessGesture) initBrightnessTouch();        mTouchAction = TOUCH_BRIGHTNESS;        // Set delta : 2f is arbitrary for now, it possibly will change in the future        float delta = -y_changed / mSurfaceYDisplayRange;        changeBrightness(delta);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "changeBrightness", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void changeBrightness(float delta) {        // Estimate and adjust Brightness        WindowManager.LayoutParams lp = getAppCompatActivity().getWindow().getAttributes();        lp.screenBrightness = Math.min(Math.max(lp.screenBrightness + delta, 0.01f), 1);        // Set Brightness        getAppCompatActivity().getWindow().setAttributes(lp);        showPlayerInfo(getString(R.string.brightness) + '\\u00A0' + Math.round(lp.screenBrightness * 15));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onErrorEncountered", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onErrorEncountered() {        /* Encountered Error, exit player with a message */        AlertDialog dialog = new AlertDialog.Builder(getActivity())                .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                        getAppCompatActivity().finish();                    }                })                .setTitle(R.string.encountered_error_title)                .setMessage(R.string.encountered_error)                .create();        dialog.show();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "showOverlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showOverlay() {        if (!mOverlayVisible) {            updatePlayPauseState();            AnimUtils.fadeIn(mControlLayout);            AnimUtils.fadeIn(mToolbar);            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {                int uiOptions = View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION |                        View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;                mDecorView.setSystemUiVisibility(uiOptions);            } else {                getAppCompatActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);                getAppCompatActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);            }            mLastSystemShowTime = System.currentTimeMillis();        }        mOverlayVisible = true;        mDisplayHandler.removeCallbacks(mOverlayHideRunnable);        mDisplayHandler.postDelayed(mOverlayHideRunnable, FADE_OUT_OVERLAY);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "hideOverlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hideOverlay() {        // Can only hide 1000 millisec after show, because navbar doesn't seem to hide otherwise.        if (mLastSystemShowTime + 1000 < System.currentTimeMillis()) {            AnimUtils.fadeOut(mControlLayout);            AnimUtils.fadeOut(mToolbar);            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {                int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;                mDecorView.setSystemUiVisibility(uiOptions);            } else {                getAppCompatActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);                getAppCompatActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);            }            mDisplayHandler.removeCallbacks(mOverlayHideRunnable);            mOverlayVisible = false;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "showPlayerInfo", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showPlayerInfo(String text) {        mPlayerInfo.setVisibility(View.VISIBLE);        mPlayerInfo.setText(text);        mDisplayHandler.removeCallbacks(mInfoHideRunnable);        mDisplayHandler.postDelayed(mInfoHideRunnable, FADE_OUT_INFO);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "hidePlayerInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void hidePlayerInfo() {        if (mPlayerInfo.getVisibility() == View.VISIBLE) {            Animation fadeOutAnim = AnimationUtils.loadAnimation(getActivity(), android.R.anim.fade_out);            mPlayerInfo.startAnimation(fadeOutAnim);        }        mPlayerInfo.setVisibility(View.INVISIBLE);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "updatePlayPauseState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updatePlayPauseState() {        if(FragmentUtil.isNotAdded(this))            return;        if (isPlaying()) {            mPlayButton.setImageResource(R.drawable.ic_av_pause);            mPlayButton.setContentDescription(getString(R.string.pause));        } else {            mPlayButton.setImageResource(R.drawable.ic_av_play);            mPlayButton.setContentDescription(getString(R.string.play));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onHardwareAccelerationError", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onHardwareAccelerationError() {        AlertDialog dialog = new AlertDialog.Builder(getActivity())                .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                        disableHardwareAcceleration();                        loadMedia();                    }                })                .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                        getAppCompatActivity().finish();                    }                })                .setTitle(R.string.hardware_acceleration_error_title)                .setMessage(R.string.hardware_acceleration_error_message)                .create();        if (!getAppCompatActivity().isFinishing())            dialog.show();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "showTimedCaptionText", "params": ["Caption"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showTimedCaptionText(final Caption text) {        mDisplayHandler.post(new Runnable() {            @Override            public void run() {                if (text == null) {                    if (mSubtitleText.getText().length() > 0) {                        mSubtitleText.setText(\"\");                    }                    return;                }                SpannableStringBuilder styledString = (SpannableStringBuilder) Html.fromHtml(text.content);                ForegroundColorSpan[] toRemoveSpans = styledString.getSpans(0, styledString.length(), ForegroundColorSpan.class);                for (ForegroundColorSpan remove : toRemoveSpans) {                    styledString.removeSpan(remove);                }                if (!mSubtitleText.getText().toString().equals(styledString.toString())) {                    mSubtitleText.setText(styledString);                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "setProgressVisible", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setProgressVisible(boolean visible) {        if(mProgressIndicator.getVisibility() == View.VISIBLE && visible)            return;        if(mProgressIndicator.getVisibility() == View.GONE && !visible)            return;        mProgressIndicator.setVisibility(visible ? View.VISIBLE : View.GONE);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onProgressChanged", "params": ["long", "long"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onProgressChanged(long currentTime, long duration) {        mControlBar.setMax((int) duration);        mControlBar.setProgress((int) currentTime);        mControlBar.setSecondaryProgress(0); // hack to make the secondary progress appear on Android 5.0        mControlBar.setSecondaryProgress(getStreamerProgress());        if (getCurrentTime() >= 0)            mCurrentTimeTextView.setText(StringUtils.millisToString(currentTime));        if (getDuration() >= 0)            lengthTime.setText(StringUtils.millisToString(duration));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onStreamProgress", "params": ["Torrent", "StreamStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamProgress(Torrent torrent, StreamStatus streamStatus) {        super.onStreamProgress(torrent, streamStatus);        mControlBar.setSecondaryProgress(getStreamerProgress());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "enableSubsButton", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enableSubsButton(boolean b) {        mSubsButton.setVisibility(b ? View.VISIBLE : View.INVISIBLE);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "updateSubtitleSize", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateSubtitleSize(int size) {        mSubtitleText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, size);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onPlayPauseClick", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void onPlayPauseClick() {        togglePlayPause();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onRewindClick", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void onRewindClick() {        seekBackwardClick();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onForwardClick", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void onForwardClick() {        seekForwardClick();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onScaleClick", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void onScaleClick() {        scaleClick();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onSubsClick", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void onSubsClick() {        subsClick();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "startBeamPlayerActivity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startBeamPlayerActivity(){        BeamPlayerActivity.startActivity(getActivity(), mCallback.getInfo(), getCurrentTime());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/VideoPlayerFragment.java", "stars": "4", "class": {"name": "VideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "addLog", "params": ["String", "String", "String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addLog(String action, String data, String ip, Integer authorId) {        LogDomain logDomain = new LogDomain();        logDomain.setAuthorId(authorId);        logDomain.setIp(ip);        logDomain.setData(data);        logDomain.setAction(action);        logDao.addLog(logDomain);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/LogServiceImpl.java", "stars": "2", "class": {"name": "LogServiceImpl", "extends": null, "implements": ["LogService"], "modifiers": ["public"]}}, {"method_name": "deleteLogById", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteLogById(Integer id) {        if (null == id)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        deleteLogById(id);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/LogServiceImpl.java", "stars": "2", "class": {"name": "LogServiceImpl", "extends": null, "implements": ["LogService"], "modifiers": ["public"]}}, {"method_name": "getLogs", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "PageInfo<LogDomain>", "snippet": "    public PageInfo<LogDomain> getLogs(int pageNum, int pageSize) {        PageHelper.startPage(pageNum, pageSize);        List<LogDomain> logs = logDao.getLogs();        PageInfo<LogDomain> pageInfo = new PageInfo<>(logs);        return pageInfo;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/LogServiceImpl.java", "stars": "2", "class": {"name": "LogServiceImpl", "extends": null, "implements": ["LogService"], "modifiers": ["public"]}}, {"method_name": "create", "params": ["Payment"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult", "snippet": "    public CommonResult create(@RequestBody Payment payment) {        int result = paymentService.create(payment);        log.info(\"*****\u63d2\u5165\u7ed3\u679c\uff1a\" + result);        Long insertId = payment.getId();        if (result > 0) {            return new CommonResult(200, \"\u63d2\u5165\u6570\u636e\u5e93\u6210\u529f,serverPort: \" + serverPort, result + \"   \u63d2\u5165\u7684id\uff1a\" + insertId);        } else {            return new CommonResult(444, \"\u63d2\u5165\u6570\u636e\u5e93\u5931\u8d25\", null);        }    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-provider-paymeny8001/src/main/java/com/atguigu/springcloud/controller/PaymentController.java", "stars": "1", "class": {"name": "PaymentController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPaymentById", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult<Payment>", "snippet": "    public CommonResult<Payment> getPaymentById(@PathVariable(\"id\") Long id) {        Payment payment = paymentService.getPaymentById(id);        if (payment != null) {            return new CommonResult(200, \"\u67e5\u8be2\u6210\u529f,serverPort:  \" + serverPort, payment);        } else {            return new CommonResult(444, \"\u6ca1\u6709\u5bf9\u5e94\u8bb0\u5f55,\u67e5\u8be2ID: \" + id, null);        }    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-provider-paymeny8001/src/main/java/com/atguigu/springcloud/controller/PaymentController.java", "stars": "1", "class": {"name": "PaymentController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPaymentLB", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPaymentLB() {        return serverPort;    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-provider-paymeny8001/src/main/java/com/atguigu/springcloud/controller/PaymentController.java", "stars": "1", "class": {"name": "PaymentController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "paymentFeignTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String paymentFeignTimeout() {        // \u4e1a\u52a1\u903b\u8f91\u5904\u7406\u6b63\u786e\uff0c\u4f46\u662f\u9700\u8981\u8017\u8d393\u79d2\u949f        try {            TimeUnit.SECONDS.sleep(3);        } catch (InterruptedException e) {            e.printStackTrace();        }        return serverPort;    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-provider-paymeny8001/src/main/java/com/atguigu/springcloud/controller/PaymentController.java", "stars": "1", "class": {"name": "PaymentController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "paymentZipkin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String paymentZipkin() {        return \"hi ,i'am paymentzipkin server fall back\uff0cwelcome to atguigu\uff0cO(\u2229_\u2229)O\u54c8\u54c8~\";    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-provider-paymeny8001/src/main/java/com/atguigu/springcloud/controller/PaymentController.java", "stars": "1", "class": {"name": "PaymentController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["String"], "throws": ["XmlPullParserException", "IOException", "JSONException"], "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject parse(String text) throws XmlPullParserException, IOException, JSONException {        XmlPullParser parser = Xml.newPullParser();        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);        Reader stream = new StringReader(text);        parser.setInput(stream);        parser.nextTag();        return readPlist(parser);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["InputStream"], "throws": ["XmlPullParserException", "IOException", "JSONException"], "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject parse(InputStream in) throws XmlPullParserException, IOException, JSONException {        try {            XmlPullParser parser = Xml.newPullParser();            parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);            parser.setInput(in, null);            parser.nextTag();            return readPlist(parser);        } finally {            in.close();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readPlist", "params": ["XmlPullParser"], "throws": ["XmlPullParserException", "IOException", "JSONException"], "modifiers": ["private"], "return_type": "JSONObject", "snippet": "    private JSONObject readPlist(XmlPullParser parser) throws XmlPullParserException, IOException, JSONException {        JSONObject plist = null;        parser.require(XmlPullParser.START_TAG, ns, \"plist\");        while (parser.next() != XmlPullParser.END_TAG) {            if (parser.getEventType() != XmlPullParser.START_TAG) {                continue;            }            String name = parser.getName();            if (name.equals(\"dict\")) {                plist = readDict(parser);            }        }          return plist;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readDict", "params": ["XmlPullParser"], "throws": ["IOException", "XmlPullParserException", "JSONException"], "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject readDict(XmlPullParser parser) throws IOException, XmlPullParserException, JSONException {        JSONObject plist = new JSONObject();        parser.require(XmlPullParser.START_TAG, ns, \"dict\");        String key = null;        while (parser.next() != XmlPullParser.END_TAG) {            if (parser.getEventType() != XmlPullParser.START_TAG) {                continue;            }            String name = parser.getName();            if (name.equals(\"key\")) {                key = readKey(parser);                Log.d(\"\", \"plist \" + key);            }            else if (key != null) {                if (name.equals(\"data\")) {                    plist.put(key, readData(parser));                }                else if (name.equals(\"integer\")) {                    plist.put(key, readInteger(parser));                }                else if (name.equals(\"string\")) {                    plist.put(key, readString(parser));                }                else if (name.equals(\"real\")) {                    plist.put(key, readReal(parser));                }                else if (name.equals(\"array\")) {                    plist.put(key, readArray(parser));                }                else if (name.equals(\"dict\")) {                    plist.put(key, readDict(parser));                }                else if (name.equals(\"true\") || name.equals(\"false\")) {                    plist.put(key, Boolean.valueOf(name));                    skip(parser);                }                key = null;            }        }        return plist;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readArray", "params": ["XmlPullParser"], "throws": ["IOException", "XmlPullParserException", "JSONException"], "modifiers": ["private"], "return_type": "JSONArray", "snippet": "    private JSONArray readArray(XmlPullParser parser) throws IOException, XmlPullParserException, JSONException {        JSONArray plist = new JSONArray();        parser.require(XmlPullParser.START_TAG, ns, \"array\");        while (parser.next() != XmlPullParser.END_TAG) {            if (parser.getEventType() != XmlPullParser.START_TAG) {                continue;            }            String name = parser.getName();            if (name.equals(\"dict\")) {                plist.put(readDict(parser));            }        }        return plist;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readKey", "params": ["XmlPullParser"], "throws": ["IOException", "XmlPullParserException"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String readKey(XmlPullParser parser) throws IOException, XmlPullParserException {        parser.require(XmlPullParser.START_TAG, ns, \"key\");        String key = readText(parser);        parser.require(XmlPullParser.END_TAG, ns, \"key\");        return key;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readData", "params": ["XmlPullParser"], "throws": ["IOException", "XmlPullParserException"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String readData(XmlPullParser parser) throws IOException, XmlPullParserException {        parser.require(XmlPullParser.START_TAG, ns, \"data\");        String value = readText(parser);        parser.require(XmlPullParser.END_TAG, ns, \"data\");        return value;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readInteger", "params": ["XmlPullParser"], "throws": ["IOException", "XmlPullParserException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int readInteger(XmlPullParser parser) throws IOException, XmlPullParserException {        parser.require(XmlPullParser.START_TAG, ns, \"integer\");        int value = Integer.parseInt(readText(parser));        parser.require(XmlPullParser.END_TAG, ns, \"integer\");        return value;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readReal", "params": ["XmlPullParser"], "throws": ["IOException", "XmlPullParserException"], "modifiers": ["private"], "return_type": "double", "snippet": "    private double readReal(XmlPullParser parser) throws IOException, XmlPullParserException {        parser.require(XmlPullParser.START_TAG, ns, \"real\");        double value = Double.valueOf(readText(parser));        parser.require(XmlPullParser.END_TAG, ns, \"real\");        return value;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readString", "params": ["XmlPullParser"], "throws": ["IOException", "XmlPullParserException"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String readString(XmlPullParser parser) throws IOException, XmlPullParserException {        parser.require(XmlPullParser.START_TAG, ns, \"string\");        String value = readText(parser);        parser.require(XmlPullParser.END_TAG, ns, \"string\");        return value;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readText", "params": ["XmlPullParser"], "throws": ["IOException", "XmlPullParserException"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String readText(XmlPullParser parser) throws IOException, XmlPullParserException {        String result = \"\";        if (parser.next() == XmlPullParser.TEXT) {            result = parser.getText();            parser.nextTag();        }        return result;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skip", "params": ["XmlPullParser"], "throws": ["XmlPullParserException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void skip(XmlPullParser parser) throws XmlPullParserException, IOException {        if (parser.getEventType() != XmlPullParser.START_TAG) {            throw new IllegalStateException();        }        int depth = 1;        while (depth != 0) {            switch (parser.next()) {            case XmlPullParser.END_TAG:                depth--;                break;            case XmlPullParser.START_TAG:                depth++;                break;            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/airplay/PListParser.java", "stars": "4", "class": {"name": "PListParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "method", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void method(String s) {        System.out.println(s);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/GenericInterfaceImpl1.java", "stars": "2", "class": {"name": "GenericInterfaceImpl1", "extends": null, "implements": ["GenericInterface"], "modifiers": ["public"]}}, {"method_name": "parsesandwichJson", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Sandwich", "snippet": "    public static Sandwich parsesandwichJson(String json){        Sandwich sandwich = new Sandwich();        try {            JSONObject jsonObject = new JSONObject(json);            JSONObject nameObject = jsonObject.getJSONObject(NAME);            sandwich.setMainName(nameObject.getString(MAIN_NAME));            JSONArray alsoKnownAsJsonArray = nameObject.getJSONArray(ALSO_KNOWN_AS);            List<String> alsoKnownAs = new ArrayList<>();            for (int i=0;i<alsoKnownAsJsonArray.length();i++){                alsoKnownAs.add(alsoKnownAsJsonArray.getString(i));            }            jsonObject.getJSONArray(INGREDIENTS);            sandwich.setAlsoKnownAs(alsoKnownAs);            sandwich.setPlaceOfOrigin(jsonObject.getString(PLACE_OF_ORIGIN));            sandwich.setDescription(jsonObject.getString(DESCRIPTION));            sandwich.setImage(jsonObject.getString(IMAGE));            JSONArray ingredientsJsonArray = jsonObject.getJSONArray(INGREDIENTS);            List<String> ingredients = new ArrayList<>();            for(int i=0 ;i< ingredientsJsonArray.length(); i++){                ingredients.add(ingredientsJsonArray.getString(i));            }            sandwich.setIngredients(ingredients);        } catch (JSONException e) {            e.printStackTrace();        }        return sandwich;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/utils/JsonUtils.java", "stars": "2", "class": {"name": "JsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testDirectoryDelete", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testDirectoryDelete() throws IOException {    File root = Files.createTempDir();    File parent = root;    File child = null;    for (int i=0; i < DIRECTORY_LEVEL; i++) {      child = createTmpDirWithRandomFiles(parent);      parent = child;    }    Assert.assertTrue(\"Failed to create \" + root.getAbsolutePath(), root.exists());    FileUtils.deleteFileOrDirectory(root);    Assert.assertTrue(\"Failed to delete \" + root.getAbsolutePath(), !root.exists());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestFileUtils.java", "stars": "18", "class": {"name": "TestFileUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testFileDelete", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testFileDelete() throws IOException {    File f = File.createTempFile(this.getClass().getSimpleName(), \".txt\");    BufferedWriter w = new BufferedWriter(new FileWriter(f));    w.write(RandomStringUtils.randomAlphanumeric(1024));    w.close();    Assert.assertTrue(\"Failed to create \" + f.getAbsolutePath(), f.exists());    FileUtils.deleteFileOrDirectory(f);    Assert.assertTrue(\"Failed to delete \" + f.getAbsolutePath(), !f.exists());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestFileUtils.java", "stars": "18", "class": {"name": "TestFileUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createTmpDirWithRandomFiles", "params": ["File"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "File", "snippet": "  private File createTmpDirWithRandomFiles(File parentDir) throws IOException {    File dir = Files.createTempDir();    for (int i = 0; i < NUM_FILES; i++) {      File f = new File(dir, \"\"+i+\".txt\");      f.createNewFile();      BufferedWriter w = new BufferedWriter(new FileWriter(f));      w.write(RandomStringUtils.randomAlphanumeric(1024));      w.close();    }    File tmp = new File(parentDir, dir.getName());    Files.move(dir, tmp);    return tmp;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestFileUtils.java", "stars": "18", "class": {"name": "TestFileUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testlistFiles", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testlistFiles() throws IOException {    File root = Files.createTempDir();    root.deleteOnExit();    File dir = createTmpDirWithRandomFiles(root);    //List using wild card    Collection<String> actual = FileUtils.listFiles(dir.getAbsolutePath() + File.separator + \"*\", DELIMITER);    Collection<String> expected = new HashSet<String>();    for (int i = 0; i < NUM_FILES; i++) {      expected.add(dir.getAbsolutePath() + File.separator + i +\".txt\");    }    Assert.assertEquals(\"Failed to list all files with wildcard\", expected, new HashSet<String>(actual));    //List using explicit path    actual = FileUtils.listFiles(dir.getAbsolutePath() + File.separator + \"1.txt\" + DELIMITER + dir.getAbsolutePath() + File.separator + \"2.txt\", DELIMITER);    expected = new HashSet<String>();    expected.add(dir.getAbsolutePath() + File.separator + \"1.txt\");    expected.add(dir.getAbsolutePath() + File.separator + \"2.txt\");    Assert.assertEquals(\"Failed to list all files\", expected, new HashSet<String>(actual));    FileUtils.deleteFileOrDirectory(root);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestFileUtils.java", "stars": "18", "class": {"name": "TestFileUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMsg", "params": ["int", "Properties", "Logger"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean sendMsg(int jobId, Properties props, Logger log) {            boolean result = false;            PreparedStatement pstmt = null;            Connection msgConn = null;            String sendTime = DateFormatUtils.format(new Date(), \"yyyy-MM-dd HH:mm:ss\");            String sqlForSendMsg = \"INSERT INTO event_queue (sender,send_time,topic,msg_name,msg,send_ip) VALUES(?,?,?,?,?,?)\";            try {                String vIP = getLinuxLocalIp(log);                msgConn = getEventCheckerConnection(props,log);                if(msgConn==null) return false;                pstmt = msgConn.prepareCall(sqlForSendMsg);                pstmt.setString(1, sender);                pstmt.setString(2, sendTime);                pstmt.setString(3, topic);                pstmt.setString(4, msgName);                pstmt.setString(5, msg);                pstmt.setString(6, vIP);                int rs = pstmt.executeUpdate();                if (rs == 1) {                    result = true;                    log.info(\"Send msg success!\");                } else {                    log.error(\"Send msg failed for update database!\");                }            } catch (SQLException e) {                throw new RuntimeException(\"Send EventChecker msg failed!\" + e);            } finally {                closeQueryStmt(pstmt, log);                closeConnection(msgConn, log);            }            return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/EventCheckSender.java", "stars": "18", "class": {"name": "EventCheckSender", "extends": "AbstractEventCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/inheritance/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/inheritance/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/inheritance/InheritanceTest.java", "stars": "15", "class": {"name": "InheritanceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      UserProfileMapper mapper = sqlSession.getMapper(UserProfileMapper.class);      UserProfile user = mapper.retrieveById(1);      Assertions.assertEquals(\"Profile1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/inheritance/InheritanceTest.java", "stars": "15", "class": {"name": "InheritanceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getCurrentDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ConnectableDevice", "snippet": "    public ConnectableDevice getCurrentDevice() {        return activeDevice;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "loadStringIds", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void loadStringIds() {        selectDeviceResId = getStringId(\"connect_sdk_picker_select_device\");        simplePairingTitleResId = getStringId(\"connect_sdk_pairing_simple_title_tv\");        simplePairingPromptResId = getStringId(\"connect_sdk_pairing_simple_prompt_tv\");        pinPairingPromptResId = getStringId(\"connect_sdk_pairing_pin_prompt_tv\");        connectionFailedResId = getStringId(\"connect_sdk_connection_failed\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "getStringId", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getStringId(String key) {        // First try to get resource from application        int id = this.activity.getResources().getIdentifier(key, \"string\", activity.getPackageName());        // Then try to get from Connect SDK library        if (id == 0) {            id = this.activity.getResources().getIdentifier(key, \"string\", \"com.connectsdk\");        }        if (id == 0) {            Log.w(\"ConnectSDK\", \"missing string resource for \\\"\" + key + \"\\\"\");            throw new Resources.NotFoundException(key);        }        return id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["SimpleDevicePickerListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(SimpleDevicePickerListener listener) {        this.listener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "cleanupPending", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cleanupPending() {        if (pendingDevice != null) {            pendingDevice.removeListener(this);            pendingDevice = null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "cleanupActive", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cleanupActive() {        if (pendingDevice != null) {            pendingDevice.removeListener(this);            pendingDevice = null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "showPicker", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showPicker() {        cleanupPending(); // remove any currently pending device        hidePicker();        pickerDialog = picker.getPickerDialog(activity.getString(selectDeviceResId), new OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> adapter, View view, int pos,                    long id) {                ConnectableDevice device = (ConnectableDevice) adapter.getItemAtPosition(pos);                selectDevice(device);            }        });        pickerDialog.show();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "hidePicker", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hidePicker() {        if (pickerDialog != null) {            pickerDialog.dismiss();            pickerDialog = null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "selectDevice", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void selectDevice(ConnectableDevice device) {        if (device != null) {            pendingDevice = device;            pendingDevice.addListener(this);            if (listener != null) {                // Give listener a chance to setup device before connecting                listener.onPrepareDevice(device);            }            if (!device.isConnected()) {                device.connect();            } else {                onDeviceReady(device);            }        } else {            cleanupPending();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "createSimplePairingDialog", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Dialog", "snippet": "    protected Dialog createSimplePairingDialog() {        PairingDialog dialog = new PairingDialog(activity, pendingDevice);        return dialog.getSimplePairingDialog(simplePairingTitleResId, simplePairingPromptResId);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "createPinPairingDialog", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Dialog", "snippet": "    protected Dialog createPinPairingDialog() {        PairingDialog dialog = new PairingDialog(activity, pendingDevice);        return dialog.getPairingDialog(pinPairingPromptResId);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "showPairingDialog", "params": ["PairingType"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showPairingDialog(PairingType pairingType) {        switch (pairingType) {         case FIRST_SCREEN:            pairingDialog = createSimplePairingDialog();            break;        case PIN_CODE:            pairingDialog = createPinPairingDialog();            break;        case NONE:        default:            break;        }        if (pairingDialog != null) {            pairingDialog.show();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "hidePairingDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hidePairingDialog() {        // cancel pairing        if (pairingDialog != null) {            pairingDialog.dismiss();            pairingDialog = null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceReady", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceReady(final ConnectableDevice device) {        Util.runOnUI(new Runnable() {            @Override            public void run() {                hidePairingDialog();                if (device == pendingDevice) {                    activeDevice = pendingDevice;                    if (listener != null)                        listener.onPickDevice(pendingDevice);                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceDisconnected", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceDisconnected(final ConnectableDevice device) {        if (device == pendingDevice) {            pickFailed(device);        }        if (device == activeDevice) {            cleanupActive();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "onCapabilityUpdated", "params": ["ConnectableDevice", "List<String>", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCapabilityUpdated(ConnectableDevice device, List<String> added, List<String> removed) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "onConnectionFailed", "params": ["ConnectableDevice", "ServiceCommandError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConnectionFailed(ConnectableDevice device, ServiceCommandError error) {        if (device == pendingDevice) {            pickFailed(device);        }        if (device == activeDevice) {            cleanupActive();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "onPairingRequired", "params": ["ConnectableDevice", "DeviceService", "PairingType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPairingRequired(ConnectableDevice device, DeviceService service, final PairingType pairingType) {        Log.d(\"SimpleDevicePicker\", \"pairing required for device \" + device.getFriendlyName());        Util.runOnUI(new Runnable() {            @Override            public void run() {                showPairingDialog(pairingType);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "pickFailed", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void pickFailed(final ConnectableDevice device) {        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (pendingDevice == device) {                    // Device failed before successfully picking device                    if (listener != null) {                        listener.onPickDeviceFailed(false);                    }                }                cleanupPending();                Toast.makeText(activity, connectionFailedResId, Toast.LENGTH_SHORT).show();            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/SimpleDevicePicker.java", "stars": "4", "class": {"name": "SimpleDevicePicker", "extends": null, "implements": ["ConnectableDeviceListener"], "modifiers": ["public"]}}, {"method_name": "getAsObject", "params": ["FacesContext", "UIComponent", "String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getAsObject(FacesContext context, UIComponent component, String value) {\t\tif (value == null || value.isEmpty()) {\t\t\treturn null;\t\t}\t\treturn produtoDao.buscarPorId(new Long(value));\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/converter/ProdutoConverter.java", "stars": "1", "class": {"name": "ProdutoConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "getAsString", "params": ["FacesContext", "UIComponent", "Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAsString(FacesContext context, UIComponent component, Object value) {\t\tif (value == null) {\t\t\treturn null;\t\t}\t\tProduto produto = (Produto) value;\t\t\tif (produto.getId() == null) {\t\t\t\treturn null;\t\t\t}\t\t\treturn produto.getId().toString();\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/converter/ProdutoConverter.java", "stars": "1", "class": {"name": "ProdutoConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(),        PgContainer.getUnpooledDataSource());    configuration.setEnvironment(environment);    configuration.addMapper(Mapper.class);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/type/SqlxmlTypeHandlerTest.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    when(connection.createSQLXML()).thenReturn(sqlxml);    when(ps.getConnection()).thenReturn(connection);    String xml = \"<message>test</message>\";    TYPE_HANDLER.setParameter(ps, 1, xml, null);    verify(ps).setSQLXML(1, sqlxml);    verify(sqlxml).setString(xml);    verify(sqlxml).free();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    String xml = \"<message>test</message>\";    when(sqlxml.getString()).thenReturn(xml);    when(rs.getSQLXML(\"column\")).thenReturn(sqlxml);    assertEquals(xml, TYPE_HANDLER.getResult(rs, \"column\"));    verify(sqlxml).free();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getSQLXML(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    String xml = \"<message>test</message>\";    when(sqlxml.getString()).thenReturn(xml);    when(rs.getSQLXML(1)).thenReturn(sqlxml);    assertEquals(xml, TYPE_HANDLER.getResult(rs, 1));    verify(sqlxml).free();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getSQLXML(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    String xml = \"<message>test</message>\";    when(sqlxml.getString()).thenReturn(xml);    when(cs.getSQLXML(1)).thenReturn(sqlxml);    assertEquals(xml, TYPE_HANDLER.getResult(cs, 1));    verify(sqlxml).free();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getSQLXML(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldReturnXmlAsString", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnXmlAsString() {    try (SqlSession session = sqlSessionFactory.openSession()) {      Mapper mapper = session.getMapper(Mapper.class);      XmlBean bean = mapper.select(1);      assertEquals(\"<title>XML data</title>\",          bean.getContent());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldReturnNull", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnNull() {    try (SqlSession session = sqlSessionFactory.openSession()) {      Mapper mapper = session.getMapper(Mapper.class);      XmlBean bean = mapper.select(2);      assertNull(bean.getContent());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldInsertXmlString", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertXmlString() {    final Integer id = 100;    final String content = \"<books><book><title>Save XML</title></book><book><title>Get XML</title></book></books>\";    // Insert    try (SqlSession session = sqlSessionFactory.openSession()) {      Mapper mapper = session.getMapper(Mapper.class);      XmlBean bean = new XmlBean();      bean.setId(id);      bean.setContent(content);      mapper.insert(bean);      session.commit();    }    // Select to verify    try (SqlSession session = sqlSessionFactory.openSession()) {      Mapper mapper = session.getMapper(Mapper.class);      XmlBean bean = mapper.select(id);      assertEquals(content, bean.getContent());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlxmlTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "XmlBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {      this.id = id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "XmlBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getContent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getContent() {      return content;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "XmlBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setContent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContent(String content) {      this.content = content;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlxmlTypeHandlerTest.java", "stars": "15", "class": {"name": "XmlBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Character", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Character parameter, JdbcType jdbcType) throws SQLException {    ps.setString(i, parameter.toString());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/CharacterTypeHandler.java", "stars": "15", "class": {"name": "CharacterTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Character", "snippet": "  public Character getNullableResult(ResultSet rs, String columnName) throws SQLException {    String columnValue = rs.getString(columnName);    if (columnValue != null) {      return columnValue.charAt(0);    } else {      return null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/CharacterTypeHandler.java", "stars": "15", "class": {"name": "CharacterTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Character", "snippet": "  public Character getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    String columnValue = rs.getString(columnIndex);    if (columnValue != null) {      return columnValue.charAt(0);    } else {      return null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/CharacterTypeHandler.java", "stars": "15", "class": {"name": "CharacterTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Character", "snippet": "  public Character getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    String columnValue = cs.getString(columnIndex);    if (columnValue != null) {      return columnValue.charAt(0);    } else {      return null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/CharacterTypeHandler.java", "stars": "15", "class": {"name": "CharacterTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "addMeta", "params": ["MetaDomain"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addMeta(MetaDomain meta) {        if (null == meta)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        metaDao.addMeta(meta);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "saveMeta", "params": ["String", "String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveMeta(String type, String name, Integer mid) {        if (StringUtils.isNotBlank(type) && StringUtils.isNotBlank(name)){            MetaCond metaCond = new MetaCond();            metaCond.setName(name);            metaCond.setType(type);            List<MetaDomain> metas = metaDao.getMetasByCond(metaCond);            if (null == metas || metas.size() == 0){                MetaDomain metaDomain = new MetaDomain();                metaDomain.setName(name);                if (null != mid){                    MetaDomain meta = metaDao.getMetaById(mid);                    if (null != meta)                        metaDomain.setMid(mid);                    metaDao.updateMeta(metaDomain);                    //\u66f4\u65b0\u539f\u6709\u7684\u6587\u7ae0\u5206\u7c7b                    contentService.updateCategory(meta.getName(), name);                } else {                    metaDomain.setType(type);                    metaDao.addMeta(metaDomain);                }            } else {                throw BusinessException.withErrorCode(ErrorConstant.Meta.META_IS_EXIST);            }        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "addMetas", "params": ["Integer", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addMetas(Integer cid, String names, String type) {        if (null == cid)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        if (StringUtils.isNotBlank(names) && StringUtils.isNotBlank(type)) {            String[] nameArr = StringUtils.split(names, \",\");            for (String name : nameArr) {                this.saveOrUpdate(cid, name, type);            }        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "saveOrUpdate", "params": ["Integer", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveOrUpdate(Integer cid, String name, String type) {        MetaCond metaCond = new MetaCond();        metaCond.setName(name);        metaCond.setType(type);        List<MetaDomain> metas = this.getMetas(metaCond);        int mid;        MetaDomain metaDomain;        if (metas.size() == 1){            MetaDomain meta = metas.get(0);            mid = meta.getMid();        }else if (metas.size() > 1){            throw BusinessException.withErrorCode(ErrorConstant.Meta.NOT_ONE_RESULT);        } else {            metaDomain = new MetaDomain();            metaDomain.setSlug(name);            metaDomain.setName(name);            metaDomain.setType(type);            this.addMeta(metaDomain);            mid = metaDomain.getMid();        }        if (mid != 0){            Long count = relationShipDao.getCountById(cid, mid);            if (count == 0){                RelationShipDomain relationShip = new RelationShipDomain();                relationShip.setCid(cid);                relationShip.setMid(mid);                relationShipDao.addRelationShip(relationShip);            }        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "deleteMetaById", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteMetaById(Integer mid) {        if (null == mid)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        MetaDomain meta = metaDao.getMetaById(mid);        if (null != meta){            String type = meta.getType();            String name = meta.getName();            metaDao.deleteMetaById(mid);            //\u9700\u8981\u628a\u76f8\u5173\u7684\u6570\u636e\u5220\u9664            List<RelationShipDomain> relationShips = relationShipDao.getRelationShipByMid(mid);            if (null != relationShips && relationShips.size() > 0){                for (RelationShipDomain relationShip : relationShips) {                    ContentDomain article = contentService.getAtricleById(relationShip.getCid());                    if (null != article){                        ContentDomain temp = new ContentDomain();                        temp.setCid(relationShip.getCid());                        if (type.equals(Types.CATEGORY.getType())) {                            temp.setCategories(reMeta(name, article.getCategories()));                        }                        if (type.equals(Types.TAG.getType())) {                            temp.setTags(reMeta(name, article.getTags()));                        }                        //\u5c06\u5220\u9664\u7684\u8d44\u6e90\u53bb\u9664                        contentService.updateArticleById(temp);                    }                }                relationShipDao.deleteRelationShipByMid(mid);            }        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "updateMeta", "params": ["MetaDomain"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateMeta(MetaDomain meta) {        if (null == meta || null == meta.getMid())            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        metaDao.updateMeta(meta);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "getMetaById", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "MetaDomain", "snippet": "    public MetaDomain getMetaById(Integer mid) {        if (null == mid)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        return metaDao.getMetaById(mid);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "getMetas", "params": ["MetaCond"], "throws": null, "modifiers": ["public"], "return_type": "List<MetaDomain>", "snippet": "    public List<MetaDomain> getMetas(MetaCond metaCond) {        return metaDao.getMetasByCond(metaCond);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "getMetaList", "params": ["String", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<MetaDto>", "snippet": "    public List<MetaDto> getMetaList(String type, String orderby, int limit) {        if (StringUtils.isNotBlank(type)){            if (StringUtils.isBlank(orderby)) {                orderby = \"count desc, a.mid desc\";            }            if (limit < 1 || limit > WebConst.MAX_POSTS) {                limit = 10;            }            Map<String, Object> paraMap = new HashMap<>();            paraMap.put(\"type\", type);            paraMap.put(\"order\", orderby);            paraMap.put(\"limit\", limit);            return metaDao.selectFromSql(paraMap);        }        return null;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "reMeta", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String reMeta(String name, String metas) {        String[] ms = StringUtils.split(metas, \",\");        StringBuilder sbuf = new StringBuilder();        for (String m : ms) {            if (!name.equals(m)) {                sbuf.append(\",\").append(m);            }        }        if (sbuf.length() > 0) {            return sbuf.substring(1);        }        return \"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/MetaServiceImpl.java", "stars": "2", "class": {"name": "MetaServiceImpl", "extends": null, "implements": ["MetaService"], "modifiers": ["public"]}}, {"method_name": "hasResource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean hasResource() {\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/ResourceBackedTile.java", "stars": "3", "class": {"name": "ResourceBackedTile", "extends": null, "implements": ["Tile"], "modifiers": ["public"]}}, {"method_name": "getResource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Identifier", "snippet": "\tpublic Identifier getResource() {\t\treturn resource;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/ResourceBackedTile.java", "stars": "3", "class": {"name": "ResourceBackedTile", "extends": null, "implements": ["Tile"], "modifiers": ["public"]}}, {"method_name": "getImage", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "BufferedImage", "snippet": "\tpublic BufferedImage getImage() throws IOException {\t\treturn ImageIO.read(resourceManager.getResource(resource).getInputStream());\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/ResourceBackedTile.java", "stars": "3", "class": {"name": "ResourceBackedTile", "extends": null, "implements": ["Tile"], "modifiers": ["public"]}}, {"method_name": "onItemHoverEnter", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onItemHoverEnter (android.support.v7.view.menu.MenuBuilder p0, android.view.MenuItem p1)\t{\t\tn_onItemHoverEnter (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/MenuItemHoverListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemHoverListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onItemHoverEnter", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onItemHoverEnter (android.support.v7.view.menu.MenuBuilder p0, android.view.MenuItem p1);\tpublic void onItemHoverExit (android.support.v7.view.menu.MenuBuilder p0, android.view.MenuItem p1)\t{\t\tn_onItemHoverExit (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/MenuItemHoverListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemHoverListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onItemHoverExit", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onItemHoverExit (android.support.v7.view.menu.MenuBuilder p0, android.view.MenuItem p1)\t{\t\tn_onItemHoverExit (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/MenuItemHoverListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemHoverListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onItemHoverExit", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onItemHoverExit (android.support.v7.view.menu.MenuBuilder p0, android.view.MenuItem p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/MenuItemHoverListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemHoverListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/MenuItemHoverListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemHoverListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/MenuItemHoverListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemHoverListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "loadUserByUsername", "params": ["String"], "throws": ["UsernameNotFoundException"], "modifiers": ["public"], "return_type": "UserDetails", "snippet": "    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        User user = userRepository.findByUsername(username);        Set<GrantedAuthority> grantedAuthorities = new HashSet<>();        for (Role role : user.getRoles()){            grantedAuthorities.add(new SimpleGrantedAuthority(role.getName()));        }        return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), grantedAuthorities);    }", "url": "https://raw.githubusercontent.com/Ankita2427/login-application/master/ankita-login-application/src/main/java/springboot/ankitaloginapplication/service/UserDetailsServiceImpl.java", "stars": "1", "class": {"name": "UserDetailsServiceImpl", "extends": null, "implements": ["UserDetailsService"], "modifiers": ["public"]}}, {"method_name": "act", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void act()     {        startMenu();    }", "url": "https://raw.githubusercontent.com/jesus-antulio/Tankzors-Fangame/master/Tanque.java", "stars": "1", "class": {"name": "Tanque", "extends": "Actor", "implements": null, "modifiers": ["public"]}}, {"method_name": "startMenu", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startMenu(){        int x = getX();        int y = getY();        int i = 0;              /*if(i==0){            setLocation(x, y+(yDirection*vel));                        if(isAtEdge()){                yDirection *= -1;                turn(-90);                i=1;            }        }                if(i==1){            setLocation(x+(xDirection*vel), y);                        if(isAtEdge()){                xDirection *= -1;                turn(-90);                i=0;            }        }*/    }", "url": "https://raw.githubusercontent.com/jesus-antulio/Tankzors-Fangame/master/Tanque.java", "stars": "1", "class": {"name": "Tanque", "extends": "Actor", "implements": null, "modifiers": ["public"]}}, {"method_name": "methodToProperty", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String methodToProperty(String name) {    if (name.startsWith(\"is\")) {      name = name.substring(2);    } else if (name.startsWith(\"get\") || name.startsWith(\"set\")) {      name = name.substring(3);    } else {      throw new ReflectionException(\"Error parsing property name '\" + name + \"'.  Didn't start with 'is', 'get' or 'set'.\");    }    if (name.length() == 1 || (name.length() > 1 && !Character.isUpperCase(name.charAt(1)))) {      name = name.substring(0, 1).toLowerCase(Locale.ENGLISH) + name.substring(1);    }    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyNamer.java", "stars": "15", "class": {"name": "PropertyNamer", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isProperty", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isProperty(String name) {    return isGetter(name) || isSetter(name);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyNamer.java", "stars": "15", "class": {"name": "PropertyNamer", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isGetter", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isGetter(String name) {    return (name.startsWith(\"get\") && name.length() > 3) || (name.startsWith(\"is\") && name.length() > 2);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyNamer.java", "stars": "15", "class": {"name": "PropertyNamer", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isSetter", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isSetter(String name) {    return name.startsWith(\"set\") && name.length() > 3;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyNamer.java", "stars": "15", "class": {"name": "PropertyNamer", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure RedAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure RedAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure RedAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure RedAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(RedAmaranthBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/RedAmaranthPlayerProcedure.java", "stars": "2", "class": {"name": "RedAmaranthPlayerProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["Character"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(Character s) {        this.value = s;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/CharTag.java", "stars": "2", "class": {"name": "CharTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Character", "snippet": "    public Character getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/CharTag.java", "stars": "2", "class": {"name": "CharTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/CharTag.java", "stars": "2", "class": {"name": "CharTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/CharTag.java", "stars": "2", "class": {"name": "CharTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "writeData", "params": ["DataOutputStream"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeData(DataOutputStream dos) throws IOException {        // Indicates the string        dos.write(getID());        //Create a new DataOutputStream        ByteArrayOutputStream os = new ByteArrayOutputStream();        CountingOutputStream cos = new CountingOutputStream(os);        DataOutputStream tempDos = new DataOutputStream(cos);        tempDos.writeShort(name.getBytes(StandardCharsets.UTF_8).length);        tempDos.write(name.getBytes(StandardCharsets.UTF_8));        tempDos.writeChar(value);        dos.writeInt(cos.getCount());        dos.write(os.toByteArray());        tempDos.close();    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/CharTag.java", "stars": "2", "class": {"name": "CharTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "createFromData", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "Tag<Character>", "snippet": "    public Tag<Character> createFromData(byte[] value) {        ByteBuffer wrappedFloat = ByteBuffer.wrap(value);        this.value = wrappedFloat.getChar();        wrappedFloat.clear();        return this;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/CharTag.java", "stars": "2", "class": {"name": "CharTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte getID() {        return 7;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/CharTag.java", "stars": "2", "class": {"name": "CharTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Context", "StarDriverResult"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(Context context, StarDriverResult result) {        try {            Thread.sleep(10);        } catch (InterruptedException e) {            result.success = false;            result.errorMessage = e.toString();            return;        }        result.success = true;    }", "url": "https://raw.githubusercontent.com/succlz123/StarDriver-APT/master/app/src/main/java/org/succlz123/stardriver/app/task/AppInitAccountInfo.java", "stars": "4", "class": {"name": "AppInitAccountInfo", "extends": "IStarDriver", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseLine", "params": ["List<String>"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String[] parseLine(List<String> lines) {        var site = Bored.env().getSiteConfig();        var count = 0;        var header = new StringBuilder();        var content = new StringBuilder();        for (var line : lines) {            if (line.contains(site.getFrontMatterSeparator())) {                count++;                continue;            }            if (count < 2) {                header.append(line).append(System.getProperty(\"line.separator\"));            } else {                content.append(line).append(System.getProperty(\"line.separator\"));            }        }        String[] headerAndContent = new String[2];        headerAndContent[0] = header.toString();        headerAndContent[1] = content.toString();        return headerAndContent;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/model/PageFile.java", "stars": "2", "class": {"name": "PageFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Page", "snippet": "    public Page toPage() {        var page = new Page();        BeanUtil.copyProperties(this.getFrontMatter(), page);        if (StrUtil.isNotBlank(this.getFrontMatter().getUrl())) {            page.setPermLink(this.getFrontMatter().getUrl());        } else {            page.setPermLink(this.getPermLink());        }        if (Objects.isNull(page.getDate())) {            page.setDate(DateUtil.date());        }        if (StrUtil.isEmpty(page.getDescription()) || page.getDescription().length() > 200) {            var str = StrUtil.split(this.content.replaceAll(\"[`~!@#$%^&*()+=|{}':;',\\\\\\\\[\\\\\\\\].<>/?~\uff01@#\uffe5%\u2026\u2026&*\uff08\uff09\u2014\u2014+|{}\u3010\u3011\u2018\uff1b\uff1a\u201d\u201c\u2019\u3002\uff0c\u3001\uff1f]+\", \"\"), 200);            page.setDescription(str[0]);        }        page.setContent(MarkdownUtil.markdown2Html(this.content));        if (Objects.isNull(page.getCategories())) {            page.setCategories(new ArrayList<>());        }        if (Objects.isNull(page.getTags())) {            page.setTags(new ArrayList<>());        }        return page;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/model/PageFile.java", "stars": "2", "class": {"name": "PageFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pageToURL", "params": ["Page"], "throws": null, "modifiers": ["public"], "return_type": "URL", "snippet": "    public URL pageToURL(Page page) {        var context = Context.builder()                .time(page.getDate()).title(page.getTitle()).url(page.getPermLink()).type(this.getFrontMatter().getType())                .layout(this.getFrontMatter().getLayout()).build();        return URL.builder()                .fullFilePath(String.format(\"%s/%s/%s\", Bored.env().getOutputPath(), context.type, this.getHtmlFileName()))                .uri(context.url)                .context(context)                .contentType(\"text/html;charset=utf-8\")                .build().add(\"page\", page);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/model/PageFile.java", "stars": "2", "class": {"name": "PageFile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Flow>", "snippet": "  public Map<String, Flow> getFlowMap() {    return this.flowMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "getErrors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getErrors() {    return this.errors;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "getEdgeMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,List>", "snippet": "  public Map<String, List<Edge>> getEdgeMap() {    return this.edgeMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "loadProjectFlow", "params": ["Project", "File"], "throws": null, "modifiers": ["public"], "return_type": "ValidationReport", "snippet": "  public ValidationReport loadProjectFlow(final Project project, final File projectDir) {    convertYamlFiles(projectDir);    FlowLoaderUtils.checkJobProperties(project.getId(), this.props, this.jobPropsMap, this.errors);    return FlowLoaderUtils.generateFlowLoaderReport(this.errors);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "convertYamlFiles", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void convertYamlFiles(final File projectDir) {    // Todo jamiesjc: convert project yaml file.    for (final File file : projectDir.listFiles(new SuffixFilter(Constants.FLOW_FILE_SUFFIX))) {      final NodeBeanLoader loader = new NodeBeanLoader();      try {        final NodeBean nodeBean = loader.load(file);        if (!loader.validate(nodeBean)) {          this.errors.add(\"Failed to validate nodeBean for \" + file.getName()              + \". Duplicate nodes found or dependency undefined.\");        } else {          final AzkabanFlow azkabanFlow = (AzkabanFlow) loader.toAzkabanNode(nodeBean);          if (this.flowMap.containsKey(azkabanFlow.getName())) {            this.errors.add(\"Duplicate flows found in the project with name \" + azkabanFlow                .getName());          } else {            final Flow flow = convertAzkabanFlowToFlow(azkabanFlow, azkabanFlow.getName(), file);            this.flowMap.put(flow.getId(), flow);          }        }      } catch (final Exception e) {        this.errors.add(\"Error loading flow yaml file \" + file.getName() + \":\"            + e.getMessage());      }    }    for (final File file : projectDir.listFiles(new DirFilter())) {      convertYamlFiles(file);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "convertAzkabanFlowToFlow", "params": ["AzkabanFlow", "String", "File"], "throws": null, "modifiers": ["private"], "return_type": "Flow", "snippet": "  private Flow convertAzkabanFlowToFlow(final AzkabanFlow azkabanFlow, final String flowName,      final File flowFile) {    final Flow flow = new Flow(flowName);    flow.setAzkabanFlowVersion(Constants.AZKABAN_FLOW_VERSION_2_0);    final Props props = azkabanFlow.getProps();    FlowLoaderUtils.addEmailPropsToFlow(flow, props);    props.setSource(flowFile.getName());    flow.addAllFlowProperties(ImmutableList.of(new FlowProps(props)));    // Convert azkabanNodes to nodes inside the flow.    azkabanFlow.getNodes().values().stream()        .map(n -> convertAzkabanNodeToNode(n, flowName, flowFile, azkabanFlow))        .forEach(n -> flow.addNode(n));    // Add edges for the flow.    buildFlowEdges(azkabanFlow, flowName);    if (this.edgeMap.containsKey(flowName)) {      flow.addAllEdges(this.edgeMap.get(flowName));    }    // Todo jamiesjc: deprecate startNodes, endNodes and numLevels, and remove below method finally.    // Blow method will construct startNodes, endNodes and numLevels for the flow.    flow.initialize();    return flow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "convertAzkabanNodeToNode", "params": ["AzkabanNode", "String", "File", "AzkabanFlow"], "throws": null, "modifiers": ["private"], "return_type": "Node", "snippet": "  private Node convertAzkabanNodeToNode(final AzkabanNode azkabanNode, final String flowName,      final File flowFile, final AzkabanFlow azkabanFlow) {    final Node node = new Node(azkabanNode.getName());    node.setType(azkabanNode.getType());    validateCondition(node, azkabanNode, azkabanFlow);    node.setCondition(azkabanNode.getCondition());    node.setPropsSource(flowFile.getName());    node.setJobSource(flowFile.getName());    if (azkabanNode.getType().equals(Constants.FLOW_NODE_TYPE)) {      final String embeddedFlowId = flowName + Constants.PATH_DELIMITER + node.getId();      node.setEmbeddedFlowId(embeddedFlowId);      final Flow flowNode = convertAzkabanFlowToFlow((AzkabanFlow) azkabanNode, embeddedFlowId,          flowFile);      flowNode.setEmbeddedFlow(true);      flowNode.setCondition(node.getCondition());      this.flowMap.put(flowNode.getId(), flowNode);    }    this.jobPropsMap        .put(flowName + Constants.PATH_DELIMITER + node.getId(), azkabanNode.getProps());    return node;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "buildFlowEdges", "params": ["AzkabanFlow", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void buildFlowEdges(final AzkabanFlow azkabanFlow, final String flowName) {    // Recursive stack to record searched nodes. Used for detecting dependency cycles.    final HashSet<String> recStack = new HashSet<>();    // Nodes that have already been visited and added edges.    final HashSet<String> visited = new HashSet<>();    for (final AzkabanNode node : azkabanFlow.getNodes().values()) {      addEdges(node, azkabanFlow, flowName, recStack, visited);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "addEdges", "params": ["AzkabanNode", "AzkabanFlow", "String", "HashSet<String>", "HashSet<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addEdges(final AzkabanNode node, final AzkabanFlow azkabanFlow,      final String flowName, final HashSet<String> recStack, final HashSet<String> visited) {    if (!visited.contains(node.getName())) {      recStack.add(node.getName());      visited.add(node.getName());      final List<String> dependsOnList = node.getDependsOn();      for (final String parent : dependsOnList) {        final Edge edge = new Edge(parent, node.getName());        if (!this.edgeMap.containsKey(flowName)) {          this.edgeMap.put(flowName, new ArrayList<>());        }        this.edgeMap.get(flowName).add(edge);        if (recStack.contains(parent)) {          // Cycles found, including self cycle.          edge.setError(\"Cycles found.\");          this.errors.add(\"Cycles found at \" + edge.getId());        } else {          // Valid edge. Continue to process the parent node recursively.          addEdges(azkabanFlow.getNode(parent), azkabanFlow, flowName, recStack, visited);        }      }      recStack.remove(node.getName());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "validateCondition", "params": ["Node", "AzkabanNode", "AzkabanFlow"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateCondition(final Node node, final AzkabanNode azkabanNode,      final AzkabanFlow azkabanFlow) {    boolean foundConditionOnJobStatus = false;    final String condition = azkabanNode.getCondition();    if (condition == null) {      return;    }    // First, remove all the whitespaces and parenthesis ().    final String replacedCondition = condition.replaceAll(\"\\\\s+|\\\\(|\\\\)\", \"\");    // Second, split the condition by operators &&, ||, ==, !=, >, >=, <, <=    final String[] operands = replacedCondition.split(VALID_CONDITION_OPERATORS);    // Third, check whether all the operands are valid: only conditionOnJobStatus macros, numbers,    // strings, and variable substitution ${jobName:param} are allowed.    for (int i = 0; i < operands.length; i++) {      final Matcher matcher = CONDITION_ON_JOB_STATUS_PATTERN.matcher(operands[i]);      if (matcher.matches()) {        this.logger.info(\"Operand \" + operands[i] + \" is a condition on job\" + node.getId() + \" status.\");        if (foundConditionOnJobStatus) {          this.errors.add(\"Invalid condition for \" + node.getId()              + \": cannot combine more than one conditionOnJobStatus macros.\");        }        foundConditionOnJobStatus = true;        node.setConditionOnJobStatus(ConditionOnJobStatus.fromString(matcher.group(1)));      } else {        if (operands[i].startsWith(\"!\")) {          // Remove the operator '!' from the operand.          operands[i] = operands[i].substring(1);        }        if (operands[i].equals(\"\")) {          this.errors              .add(\"Invalid condition for \" + node.getId() + \": operand is an empty string.\");        } else if (!DIGIT_STRING_PATTERN.matcher(operands[i]).matches()) {          validateVariableSubstitution(operands[i], azkabanNode, azkabanFlow);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "validateVariableSubstitution", "params": ["String", "AzkabanNode", "AzkabanFlow"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateVariableSubstitution(final String operand, final AzkabanNode azkabanNode,      final AzkabanFlow azkabanFlow) {    final Matcher matcher = CONDITION_VARIABLE_REPLACEMENT_PATTERN.matcher(operand);    if (matcher.matches()) {      final String jobName = matcher.group(1);      final AzkabanNode conditionNode = azkabanFlow.getNode(jobName);      if (conditionNode == null) {        this.errors.add(\"Invalid condition for \" + azkabanNode.getName() + \": \" + jobName            + \" doesn't exist in the flow.\");      }      // If a job defines condition on its descendant nodes, then that condition is invalid.      else if (isDescendantNode(conditionNode, azkabanNode, azkabanFlow)) {        this.errors.add(\"Invalid condition for \" + azkabanNode.getName()            + \": should not define condition on its descendant node \" + jobName + \".\");      }    } else {      this.errors.add(\"Invalid condition for \" + azkabanNode.getName()          + \": cannot resolve the condition. Please check the syntax for supported conditions.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "isDescendantNode", "params": ["AzkabanNode", "AzkabanNode", "AzkabanFlow"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isDescendantNode(final AzkabanNode current, final AzkabanNode target,      final AzkabanFlow azkabanFlow) {    // Check if the current node is a descendant of the target node.    if (current == null || target == null) {      return false;    } else if (current.getDependsOn() == null) {      return false;    } else if (current.getDependsOn().contains(target.getName())) {      return true;    } else {      for (final String nodeName : current.getDependsOn()) {        if (isDescendantNode(azkabanFlow.getNode(nodeName), target, azkabanFlow)) {          return true;        }      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java", "stars": "18", "class": {"name": "DirectoryYamlFlowLoader", "extends": null, "implements": ["FlowLoader"], "modifiers": ["public"]}}, {"method_name": "uploadFile", "params": ["File"], "throws": ["QiniuException"], "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response uploadFile(File file) throws QiniuException {        String token = getUploadToken();        Response response = uploadManager.put(file, null, token);        int retryCount = 0;        while(response.needRetry() && retryCount++ < 3){            response = uploadManager.put(file, null, token);        }        return response;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/QiniuServiceImpl.java", "stars": "3", "class": {"name": "QiniuServiceImpl", "extends": null, "implements": ["QiniuService", "InitializingBean"], "modifiers": ["public"]}}, {"method_name": "uploadFile", "params": ["InputStream"], "throws": ["QiniuException"], "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response uploadFile(InputStream inputStream) throws QiniuException {        String token = getUploadToken();        Response response = uploadManager.put(inputStream, null, token, null, null);        int retryCount = 0;        while(response.needRetry() && retryCount++ < 3){            response = uploadManager.put(inputStream, null, token, null, null);        }        return response;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/QiniuServiceImpl.java", "stars": "3", "class": {"name": "QiniuServiceImpl", "extends": null, "implements": ["QiniuService", "InitializingBean"], "modifiers": ["public"]}}, {"method_name": "deleteFile", "params": ["String"], "throws": ["QiniuException"], "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response deleteFile(String key) throws QiniuException {        Response response = bucketManager.delete(bucket, key);        int retryCount = 0;        while(response.needRetry() && retryCount++ < 3){            response = bucketManager.delete(bucket, key);        }        return response;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/QiniuServiceImpl.java", "stars": "3", "class": {"name": "QiniuServiceImpl", "extends": null, "implements": ["QiniuService", "InitializingBean"], "modifiers": ["public"]}}, {"method_name": "getUploadToken", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUploadToken(){        return auth.uploadToken(bucket, null, 3600, uploadPolicy);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/QiniuServiceImpl.java", "stars": "3", "class": {"name": "QiniuServiceImpl", "extends": null, "implements": ["QiniuService", "InitializingBean"], "modifiers": ["public"]}}, {"method_name": "afterPropertiesSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterPropertiesSet(){        uploadPolicy = new StringMap();        uploadPolicy.put(\"returnBody\",                \"{\\\"key\\\":\\\"$(key)\\\", \" +                \"\\\"hash\\\":\\\"$(etag)\\\",\" +                \"\\\"bucket\\\":\\\"$(bucket)\\\",\" +                \"\\\"height\\\":$(imageInfo.height),\" +                \"\\\"width\\\":$(imageInfo.width)}\");    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/QiniuServiceImpl.java", "stars": "3", "class": {"name": "QiniuServiceImpl", "extends": null, "implements": ["QiniuService", "InitializingBean"], "modifiers": ["public"]}}, {"method_name": "getAvailableComparatorNames", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Set<String>", "snippet": "  public static Set<String> getAvailableComparatorNames() {    return comparatorCreatorRepository.keySet();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorComparator.java", "stars": "18", "class": {"name": "ExecutorComparator", "extends": "CandidateComparator", "implements": null, "modifiers": ["public"]}}, {"method_name": "statisticsObjectCheck", "params": ["ExecutorInfo", "ExecutorInfo", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean statisticsObjectCheck(final ExecutorInfo statisticsObj1,      final ExecutorInfo statisticsObj2, final String caller) {    // both doesn't expose the info    if (null == statisticsObj1 && null == statisticsObj2) {      logger.debug(String.format(\"%s : neither of the executors exposed statistics info.\",          caller));      return true;    }    //right side doesn't expose the info.    if (null == statisticsObj2) {      logger.debug(String.format(          \"%s : choosing left side and the right side executor doesn't expose statistics info\",          caller));      return true;    }    //left side doesn't expose the info.    if (null == statisticsObj1) {      logger.debug(String.format(          \"%s : choosing right side and the left side executor doesn't expose statistics info\",          caller));      return true;    }    // both not null    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorComparator.java", "stars": "18", "class": {"name": "ExecutorComparator", "extends": "CandidateComparator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumberOfAssignedFlowComparator", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "FactorComparator<Executor>", "snippet": "  private static FactorComparator<Executor> getNumberOfAssignedFlowComparator(final int weight) {    return FactorComparator        .create(NUMOFASSIGNEDFLOW_COMPARATOR_NAME, weight, new Comparator<Executor>() {          @Override          public int compare(final Executor o1, final Executor o2) {            final ExecutorInfo stat1 = o1.getExecutorInfo();            final ExecutorInfo stat2 = o2.getExecutorInfo();            final Integer result = 0;            if (statisticsObjectCheck(stat1, stat2, NUMOFASSIGNEDFLOW_COMPARATOR_NAME)) {              return result;            }            return ((Integer) stat1.getRemainingFlowCapacity())                .compareTo(stat2.getRemainingFlowCapacity());          }        });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorComparator.java", "stars": "18", "class": {"name": "ExecutorComparator", "extends": "CandidateComparator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCpuUsageComparator", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "FactorComparator<Executor>", "snippet": "  private static FactorComparator<Executor> getCpuUsageComparator(final int weight) {    return FactorComparator.create(CPUUSAGE_COMPARATOR_NAME, weight, new Comparator<Executor>() {      @Override      public int compare(final Executor o1, final Executor o2) {        final ExecutorInfo stat1 = o1.getExecutorInfo();        final ExecutorInfo stat2 = o2.getExecutorInfo();        final int result = 0;        if (statisticsObjectCheck(stat1, stat2, CPUUSAGE_COMPARATOR_NAME)) {          return result;        }        // CPU usage , the lesser the value is, the better.        return ((Double) stat2.getCpuUsage()).compareTo(stat1.getCpuUsage());      }    });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorComparator.java", "stars": "18", "class": {"name": "ExecutorComparator", "extends": "CandidateComparator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLstDispatchedTimeComparator", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "FactorComparator<Executor>", "snippet": "  private static FactorComparator<Executor> getLstDispatchedTimeComparator(final int weight) {    return FactorComparator        .create(LSTDISPATCHED_COMPARATOR_NAME, weight, new Comparator<Executor>() {          @Override          public int compare(final Executor o1, final Executor o2) {            final ExecutorInfo stat1 = o1.getExecutorInfo();            final ExecutorInfo stat2 = o2.getExecutorInfo();            final int result = 0;            if (statisticsObjectCheck(stat1, stat2, LSTDISPATCHED_COMPARATOR_NAME)) {              return result;            }            // Note: an earlier date time indicates higher weight.            return ((Long) stat2.getLastDispatchedTime()).compareTo(stat1.getLastDispatchedTime());          }        });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorComparator.java", "stars": "18", "class": {"name": "ExecutorComparator", "extends": "CandidateComparator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMemoryComparator", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "FactorComparator<Executor>", "snippet": "  private static FactorComparator<Executor> getMemoryComparator(final int weight) {    return FactorComparator.create(MEMORY_COMPARATOR_NAME, weight, new Comparator<Executor>() {      @Override      public int compare(final Executor o1, final Executor o2) {        final ExecutorInfo stat1 = o1.getExecutorInfo();        final ExecutorInfo stat2 = o2.getExecutorInfo();        final int result = 0;        if (statisticsObjectCheck(stat1, stat2, MEMORY_COMPARATOR_NAME)) {          return result;        }        if (stat1.getRemainingMemoryInMB() != stat2.getRemainingMemoryInMB()) {          return stat1.getRemainingMemoryInMB() > stat2.getRemainingMemoryInMB() ? 1 : -1;        }        return Double.compare(stat1.getRemainingMemoryPercent(), stat2.getRemainingMemoryPercent());      }    });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorComparator.java", "stars": "18", "class": {"name": "ExecutorComparator", "extends": "CandidateComparator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return \"ExecutorComparator\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorComparator.java", "stars": "18", "class": {"name": "ExecutorComparator", "extends": "CandidateComparator", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnumFromString", "params": ["Class<T>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T extends Enum<T>> T getEnumFromString(Class<T> c, String string) {        if (c != null && string != null) {            try {                return Enum.valueOf(c, string.trim().toUpperCase());            } catch (IllegalArgumentException ignored) {            }        }        return null;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/util/EnumUtils.java", "stars": "3", "class": {"name": "EnumUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getEnumFromStringCaseSensitive", "params": ["Class<T>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T extends Enum<T>> T getEnumFromStringCaseSensitive(Class<T> c, String string) {        if (c != null && string != null) {            try {                return Enum.valueOf(c, string);            } catch (IllegalArgumentException ignored) {            }        }        return null;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/util/EnumUtils.java", "stars": "3", "class": {"name": "EnumUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getEnumSetFromString", "params": ["Class<T>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "EnumSet<T>", "snippet": "    public static <T extends Enum<T>> EnumSet<T> getEnumSetFromString(Class<T> enumClass, String string) {        if (string == null || string.isEmpty()) {            return EnumSet.noneOf(enumClass);        }        return Sets.newEnumSet(Arrays.stream(string.trim().split(\"\\\\|\"))                .map(part -> getEnumFromString(enumClass, part))                .collect(Collectors.toList()), enumClass);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/util/EnumUtils.java", "stars": "3", "class": {"name": "EnumUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "act", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void act()     {        // Add your action code here.    }", "url": "https://raw.githubusercontent.com/jesus-antulio/Tankzors-Fangame/master/Pared_v.java", "stars": "1", "class": {"name": "Pared_v", "extends": "Actor", "implements": null, "modifiers": ["public"]}}, {"method_name": "isMine", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isMine() {\t\treturn mine;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMine", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setMine(boolean mine) {\t\tthis.mine = mine;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMarked", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isMarked() {\t\treturn marked;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMarked", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setMarked(boolean marked) {\t\tthis.marked = marked;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isRevealed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isRevealed() {\t\treturn revealed;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRevealed", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setRevealed(boolean revealed) {\t\tthis.revealed = revealed;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getNumber() {\t\treturn number;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNumber", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setNumber(int number) {\t\tthis.number = number;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getX() {\t\treturn x;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setX", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setX(int x) {\t\tthis.x = x;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getY() {\t\treturn y;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setY", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setY(int y) {\t\tthis.y = y;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\tif (!revealed) {\t\t\treturn marked ? \"!\" : \"\\u00B7\";\t\t} else if (mine) {\t\t\treturn \"X\";\t\t} else {\t\t\treturn number == 0 ? \" \" : number + \"\";\t\t}\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/model/Cell.java", "stars": "1", "class": {"name": "Cell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkText", "params": ["String", "int", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean checkText(String text, int maxlen, String name) {        try {            int len = text.getBytes(\"UTF-8\").length;            if (len > maxlen) {                JOptionPane.showMessageDialog(                        FileSaveDialog.this,                        name + \"\u306e\u9577\u3055(\" + len + \"\u30d0\u30a4\u30c8)\u304c\u6700\u5927\u5024(\" + maxlen + \"\u30d0\u30a4\u30c8)\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002\",                        \"\u30a8\u30e9\u30fc\",                        JOptionPane.ERROR_MESSAGE);                return false;            }        }        catch (UnsupportedEncodingException e) {            JOptionPane.showMessageDialog(                    FileSaveDialog.this,                    name + \"\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u4e0d\u6b63\u3067\u3059\u3002\",                    \"\u30a8\u30e9\u30fc\",                    JOptionPane.ERROR_MESSAGE);            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "FileSaveDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkParameters", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean checkParameters() {        if (textField_filename.getText().equals(\"\")) {            JOptionPane.showMessageDialog(                    FileSaveDialog.this,                    \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\",                    \"\u30a8\u30e9\u30fc\",                    JOptionPane.ERROR_MESSAGE);            return false;        }        AddressRegionTableModel dm = (AddressRegionTableModel)table_addressRegions.getModel();        if (dm.getRowCount() > 0) {            for (AddressRegion r : dm.getAllAddressRegions()) {                if (r.getStartAddress() > r.getEndAddress()) {                    JOptionPane.showMessageDialog(                            FileSaveDialog.this,                            \"\u30a2\u30c9\u30ec\u30b9\u7bc4\u56f2\u304c\u4e0d\u6b63\u3067\u3059\u3002\" + r.toString(),                            \"\u30a8\u30e9\u30fc\",                            JOptionPane.ERROR_MESSAGE);                    return false;                }                if (!checkText(r.getComment(), ProgFormatFile.PROG_MAX_COMMENT_LENGTH, \"\u30a2\u30c9\u30ec\u30b9\u7bc4\u56f2\u306e\u30b3\u30e1\u30f3\u30c8\")) {                    return false;                }            }        }        return true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "FileSaveDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExtension", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getExtension() {            return extension;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "FileFormatEntry", "extends": null, "implements": ["Comparable"], "modifiers": ["static"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getDescription() {            return description;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "FileFormatEntry", "extends": null, "implements": ["Comparable"], "modifiers": ["static"]}}, {"method_name": "compareTo", "params": ["FileFormatEntry"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int compareTo(FileFormatEntry e) {            return this.extension.compareTo(e.getExtension());        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "FileFormatEntry", "extends": null, "implements": ["Comparable"], "modifiers": ["static"]}}, {"method_name": "getListCellRendererComponent", "params": ["JList<?>", "Object", "int", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "Component", "snippet": "        public Component getListCellRendererComponent(                JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {            JLabel label = (JLabel)super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);            if (value != null) {                setText(((FileFormatEntry)value).getDescription());            }            return label;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "FileFormatRenderer", "extends": "DefaultListCellRenderer", "implements": null, "modifiers": []}}, {"method_name": "getAllAddressRegions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<AddressRegion>", "snippet": "        public ArrayList<AddressRegion> getAllAddressRegions() {            return regions;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "getColumnName", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getColumnName(int column) {            return column_array[column].columnName;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "getColumnClass", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "        public Class<?> getColumnClass(int column) {            return column_array[column].columnClass;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "getColumnCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getColumnCount() {            return column_array.length;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "getRowCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getRowCount() {            return regions.size();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "isCellEditable", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isCellEditable(int rowIndex, int columnIndex) {            return column_array[columnIndex].isEditable;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "removeRow", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void removeRow(int row) {            regions.remove(row);            fireTableRowsDeleted(row, row);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "getValueAt", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValueAt(int rowIndex, int columnIndex) {            AddressRegion r = regions.get(rowIndex);            switch (columnIndex) {            case 0:                return r.getStartAddress();            case 1:                return r.getEndAddress();            case 2:                return r.getComment();            default:                return \"\";            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "setValueAt", "params": ["Object", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setValueAt(Object obj, int model_row, int model_column) {            AddressRegion r = regions.get(model_row);            if (model_column == 0) {                r.setStartAddress((Integer)obj);                fireTableCellUpdated(model_row, model_column);            }            else if (model_column == 1) {                r.setEndAddress((Integer)obj);                fireTableCellUpdated(model_row, model_column);            }            else {                String value = (String)obj;                if (value.length() > ProgFormatFile.PROG_MAX_COMMENT_LENGTH) {                    return ;                }                r.setComment(value);                fireTableCellUpdated(model_row, model_column);            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "addAddressRegion", "params": ["int", "int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void addAddressRegion(int start, int end, String comment) {            regions.add(new AddressRegion(start, end, comment));        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "addAddressRegion", "params": ["AddressRegion"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void addAddressRegion(AddressRegion r) {            regions.add(r);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRegionTableModel", "extends": "AbstractTableModel", "implements": null, "modifiers": []}}, {"method_name": "getTableCellRendererComponent", "params": ["JTable", "Object", "boolean", "boolean", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Component", "snippet": "        public Component getTableCellRendererComponent(                JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {            DefaultTableCellRenderer c =                    (DefaultTableCellRenderer)super.getTableCellRendererComponent(                            table, String.format(\"%04X\", value), isSelected, hasFocus, row, column);            c.setHorizontalAlignment(SwingConstants.CENTER);            return c;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressRenderer", "extends": "DefaultTableCellRenderer", "implements": null, "modifiers": []}}, {"method_name": "getTableCellEditorComponent", "params": ["JTable", "Object", "boolean", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Component", "snippet": "        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {            ((JComponent)getComponent()).setBorder(BorderFactory.createLineBorder(Color.BLUE));            JTextField c = (JTextField)super.getTableCellEditorComponent(table, String.format(\"%04X\", value), isSelected, row, column);            c.setHorizontalAlignment(SwingConstants.CENTER);            c.setFont(table.getFont());            return c;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressEditor", "extends": "DefaultCellEditor", "implements": null, "modifiers": ["private"]}}, {"method_name": "stopCellEditing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean stopCellEditing() {            int value = 0;            String s = (String)super.getCellEditorValue();            if (s != null && !s.isEmpty()) {                try {                    value = Integer.parseInt(s, 16);                    if (value < 0 || value > 0xffff) {                        ((JComponent)getComponent()).setBorder(BorderFactory.createLineBorder(Color.RED));                        label_message.setText(\"\u6570\u5024\u304c\u7bc4\u56f2\u5916\u3067\u3059\u3002\");                        return false;                    }                }                catch (NumberFormatException e) {                    label_message.setText(\"\u6570\u5024\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u4e0d\u6b63\u3067\u3059\u3002\");                    ((JComponent)getComponent()).setBorder(BorderFactory.createLineBorder(Color.RED));                    return false;                }            }            else {                label_message.setText(\"\u6570\u5024\u304c\u7a7a\u3067\u3059\u3002\");                ((JComponent)getComponent()).setBorder(BorderFactory.createLineBorder(Color.RED));                return false;            }            this.address = value;            label_message.setText(\"\");            return super.stopCellEditing();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressEditor", "extends": "DefaultCellEditor", "implements": null, "modifiers": ["private"]}}, {"method_name": "getCellEditorValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getCellEditorValue() {            return address;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "AddressEditor", "extends": "DefaultCellEditor", "implements": null, "modifiers": ["private"]}}, {"method_name": "getTableCellRendererComponent", "params": ["JTable", "Object", "boolean", "boolean", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Component", "snippet": "        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {            if (isSelected) {                setForeground(table.getSelectionForeground());                setBackground(table.getSelectionBackground());            } else {                setForeground(table.getForeground());                setBackground(table.getBackground());            }            if (hasFocus) {                setBorder(UIManager.getBorder(\"Table.focusCellHighlightBorder\"));            }            else {                setBorder(noFocusBorder);            }            setText(Objects.toString(value, \"\"));            adjustRowHeight(table, row, column);            return this;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentRenderer", "extends": "JTextArea", "implements": ["TableCellRenderer"], "modifiers": []}}, {"method_name": "adjustRowHeight", "params": ["JTable", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void adjustRowHeight(JTable table, int row, int column) {            setBounds(table.getCellRect(row, column, false));            int preferredHeight = getPreferredSize().height;            // \u884c\u304c\u8ffd\u52a0\u3055\u308c\u305f\u5834\u5408\u306b\u65b0\u3057\u3044\u884c\u306e\u914d\u5217\u3092\u8ffd\u52a0\u3059\u308b\u3002            while (rowAndCellHeights.size() <= row) {                rowAndCellHeights.add(new ArrayList<>(column));            }            // \u5217\u304c\u8ffd\u52a0\u3055\u308c\u305f\u5834\u5408\u306b\u65b0\u3057\u3044\u5217\u306e\u9ad8\u3055\u3092\u4eee\u306b\u30bc\u30ed\u3068\u8a2d\u5b9a\u3059\u308b\u3002            List<Integer> list = rowAndCellHeights.get(row);            while (list.size() <= column) {                list.add(0);            }            list.set(column, preferredHeight);            int max = list.stream().max(Integer::compare).get();            if (table.getRowHeight(row) != max) {                table.setRowHeight(row, max);            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentRenderer", "extends": "JTextArea", "implements": ["TableCellRenderer"], "modifiers": []}}, {"method_name": "getCellEditorValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getCellEditorValue() {            return getText();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "getTableCellEditorComponent", "params": ["JTable", "Object", "boolean", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Component", "snippet": "        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {            setFont(table.getFont());            setBorder(BorderFactory.createLineBorder(Color.BLUE));            setText(Objects.toString(value, \"\"));            table.setRowHeight(row, Math.max(48, table.getCellRect(row, column, true).height));            // invokeLater\u304b\u3089\u547c\u3073\u51fa\u3055\u306a\u3044\u3068\u3001\u30ad\u30fc\u30a4\u30d9\u30f3\u30c8\u3067\u7de8\u96c6\u3092\u958b\u59cb\u3057\u305f\u5834\u5408\u306btext area\u304c\u66f4\u65b0\u3055\u308c\u306a\u3044\u3002            SwingUtilities.invokeLater(new Runnable() {                @Override                public void run() {                    setCaretPosition(getText().length());                    requestFocusInWindow();                }            });            return scroll;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "isCellEditable", "params": ["EventObject"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isCellEditable(final EventObject e) {            if (e instanceof MouseEvent) {                return ((MouseEvent) e).getClickCount() >= 2;            }            SwingUtilities.invokeLater(new Runnable() {                @Override                public void run() {                    if (e instanceof KeyEvent) {                        KeyEvent ke = (KeyEvent) e;                        char kc = ke.getKeyChar();                        // \u5236\u5fa1\u30ad\u30fc\u3067\u306f\u306a\u304f\u6587\u5b57\u306e\u30ad\u30fc\u304c\u62bc\u4e0b\u3055\u308c\u305f\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002                        if (Character.isUnicodeIdentifierStart(kc)) {                            setText(getText() + kc);                        }                    }                }            });            return true;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "shouldSelectCell", "params": ["EventObject"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean shouldSelectCell(EventObject e) {            return true;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "stopCellEditing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean stopCellEditing() {            try {                if (getText().getBytes(\"UTF-8\").length > ProgFormatFile.PROG_MAX_COMMENT_LENGTH) {                    label_message.setText(\"\u6587\u5b57\u5217\u304c\u9577\u3059\u304e\u307e\u3059\u3002\");                    setBorder(BorderFactory.createLineBorder(Color.RED));                    return false;                }            }            catch (UnsupportedEncodingException e) {                label_message.setText(\"\u4e0d\u6b63\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\");                setBorder(BorderFactory.createLineBorder(Color.RED));                return false;            }            label_message.setText(\"\");            fireEditingStopped();            return true;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "cancelCellEditing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void cancelCellEditing() {            fireEditingCanceled();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "addCellEditorListener", "params": ["CellEditorListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void addCellEditorListener(CellEditorListener l) {            listenerList.add(CellEditorListener.class, l);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "removeCellEditorListener", "params": ["CellEditorListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void removeCellEditorListener(CellEditorListener l) {            listenerList.remove(CellEditorListener.class, l);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "getCellEditorListeners", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CellEditorListener", "snippet": "        public CellEditorListener[] getCellEditorListeners() {            return listenerList.getListeners(CellEditorListener.class);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "fireEditingStopped", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void fireEditingStopped() {            Object[] listeners = listenerList.getListenerList();            for (int i = listeners.length - 2; i >= 0; i -= 2) {                if (listeners[i] == CellEditorListener.class) {                    if (Objects.isNull(changeEvent)) {                        changeEvent = new ChangeEvent(this);                    }                    ((CellEditorListener) listeners[i + 1]).editingStopped(changeEvent);                }            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "fireEditingCanceled", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void fireEditingCanceled() {            Object[] listeners = listenerList.getListenerList();            for (int i = listeners.length - 2; i >= 0; i -= 2) {                if (listeners[i] == CellEditorListener.class) {                    if (Objects.isNull(changeEvent)) {                        changeEvent = new ChangeEvent(this);                    }                    ((CellEditorListener) listeners[i + 1]).editingCanceled(changeEvent);                }            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "CommentEditor", "extends": "JTextArea", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "updateUI", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void updateUI() {            super.updateUI();            setBorder(BorderFactory.createEmptyBorder());            setFocusable(false);            setRolloverEnabled(false);            setText(\"X\");        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButton", "extends": "JButton", "implements": null, "modifiers": []}}, {"method_name": "getTableCellRendererComponent", "params": ["JTable", "Object", "boolean", "boolean", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Component", "snippet": "        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {            if (hasFocus) {                setBackground(table.getSelectionBackground());                setBorder(UIManager.getBorder(\"Table.focusCellHighlightBorder\"));            }            else {                setBackground(table.getBackground());                setBorder(noFocusBorder);            }            return this;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonRenderer", "extends": "DeleteButton", "implements": ["TableCellRenderer"], "modifiers": []}}, {"method_name": "updateUI", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void updateUI() {            removeActionListener(listener);            super.updateUI();            listener = e -> {                Object o = SwingUtilities.getAncestorOfClass(JTable.class, this);                if (o instanceof JTable) {                    Object[] options = {\"\u306f\u3044\", \"\u3044\u3044\u3048\" };                    int answer = JOptionPane.showOptionDialog(                            FileSaveDialog.this,                            \"\u524a\u9664\u3057\u3066\u3082\u826f\u3044\u3067\u3059\u304b?\",                            \"\u524a\u9664\u78ba\u8a8d\",                            JOptionPane.DEFAULT_OPTION,                            JOptionPane.QUESTION_MESSAGE,                            null,                            options, options[1]);                    if (answer == JOptionPane.NO_OPTION) {                        return ;                    }                    JTable table = (JTable) o;                    int row = table.convertRowIndexToModel(table.getEditingRow());                    fireEditingStopped();                    AddressRegionTableModel artm = (AddressRegionTableModel)table.getModel();                    artm.removeRow(row);                }            };            addActionListener(listener);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "getTableCellEditorComponent", "params": ["JTable", "Object", "boolean", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Component", "snippet": "        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {            return this;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "getCellEditorValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getCellEditorValue() {            return \"\";        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "isCellEditable", "params": ["EventObject"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isCellEditable(EventObject e) {            return true;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "shouldSelectCell", "params": ["EventObject"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean shouldSelectCell(EventObject anEvent) {            return true;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "stopCellEditing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean stopCellEditing() {            fireEditingStopped();            return true;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "cancelCellEditing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void cancelCellEditing() {            fireEditingCanceled();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "addCellEditorListener", "params": ["CellEditorListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void addCellEditorListener(CellEditorListener l) {            listenerList.add(CellEditorListener.class, l);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "removeCellEditorListener", "params": ["CellEditorListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void removeCellEditorListener(CellEditorListener l) {            listenerList.remove(CellEditorListener.class, l);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "getCellEditorListeners", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CellEditorListener", "snippet": "        public CellEditorListener[] getCellEditorListeners() {            return listenerList.getListeners(CellEditorListener.class);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "fireEditingStopped", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void fireEditingStopped() {            Object[] listeners = listenerList.getListenerList();            for (int i = listeners.length - 2; i >= 0; i -= 2) {                if (listeners[i] == CellEditorListener.class) {                    if (Objects.isNull(changeEvent)) {                        changeEvent = new ChangeEvent(this);                    }                    ((CellEditorListener) listeners[i + 1]).editingStopped(changeEvent);                }            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "fireEditingCanceled", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void fireEditingCanceled() {            Object[] listeners = listenerList.getListenerList();            for (int i = listeners.length - 2; i >= 0; i -= 2) {                if (listeners[i] == CellEditorListener.class) {                    if (Objects.isNull(changeEvent)) {                        changeEvent = new ChangeEvent(this);                    }                    ((CellEditorListener) listeners[i + 1]).editingCanceled(changeEvent);                }            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "DeleteButtonEditor", "extends": "DeleteButton", "implements": ["TableCellEditor"], "modifiers": []}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void actionPerformed(ActionEvent e) {            FileSaveDialog.this.dispose();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "SwingAction", "extends": "AbstractAction", "implements": null, "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void actionPerformed(ActionEvent e) {            JFileChooser chooser = new JFileChooser(Application.getCurrentDirectory());            chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);            int selected = chooser.showDialog(FileSaveDialog.this, \"\u9078\u629e\");            Application.setCurrentDirectory(chooser.getCurrentDirectory().getAbsolutePath());            if (selected == JFileChooser.APPROVE_OPTION) {                File file = chooser.getSelectedFile();                if (file.isDirectory()) {                    textField_pathname.setText(file.getAbsolutePath());                }                else {                    textField_filename.setText(file.getName());                    textField_pathname.setText(file.getParent());                }            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "SwingAction_1", "extends": "AbstractAction", "implements": null, "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void actionPerformed(ActionEvent e) {            if (!checkParameters()) {                return ;            }            // Program\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210            Program p = computer.getProgram();            if (p == null) {                p = new Program(computer.getHardware().getMemory());            }            String name = textField_programName.getText();            if (name != null && !name.equals(\"\")) {                p.setName(textField_programName.getText());            }            String comment = textArea_programComment.getText();            if (comment != null && !comment.equals(\"\")) {                p.setComment(comment);            }            p.setBasicArea(checkBox_saveBasicArea.isSelected());            AddressRegionTableModel dm = (AddressRegionTableModel)table_addressRegions.getModel();            ArrayList<AddressRegion> regions = p.getAllAddressRegions();            regions.clear();            dm.getAllAddressRegions().forEach(r -> regions.add(r.clone()));            /*             * \u4fdd\u5b58\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u89e3\u6c7a             * \u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u304c\u3001\u6307\u5b9a\u3055\u308c\u305f\u4fdd\u5b58\u5f62\u5f0f\u306e\u6a19\u6e96\u62e1\u5f35\u5b50(.prg, .bas, .dat)\u3068             * \u4e00\u81f4\u3059\u308b\u5834\u5408\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u305d\u306e\u307e\u307e\u4f7f\u7528\u3059\u308b\u3002             * \u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u304c\u3001\u6307\u5b9a\u3055\u308c\u305f\u4fdd\u5b58\u5f62\u5f0f\u306e\u6a19\u6e96\u62e1\u5f35\u5b50\u3068\u4e00\u81f4\u3057\u306a\u3044\u5834\u5408\u306f\u3001             * \u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u6a19\u6e96\u62e1\u5f35\u5b50\u3092\u4ed8\u4e0e\u3059\u308b\u3002             * \u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306b\u62e1\u5f35\u5b50\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u4fdd\u5b58\u5f62\u5f0f\u306e\u6a19\u6e96\u62e1\u5f35\u5b50\u3092             * \u4ed8\u52a0\u3059\u308b\u3002             *             */            StringBuilder path_name = new StringBuilder();            path_name.append(textField_pathname.getText());            path_name.append(File.separator);            path_name.append(textField_filename.getText());            String ext = DataFile.getExtension(textField_filename.getText());            FileFormatEntry selected_format = (FileFormatEntry)comboBox_fileFormat.getSelectedItem();            if (ext == null) {                path_name.append(\".\");                path_name.append(selected_format.getExtension());            }            else if (!ext.equals(selected_format.getExtension())) {                path_name.append(\".\");                path_name.append(selected_format.getExtension());            }            File file = new File(path_name.toString());            if (file.exists()) {                int selected =                    JOptionPane.showConfirmDialog(                        FileSaveDialog.this,                        \"\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u4e0a\u66f8\u304d\u3057\u3066\u3082\u3088\u3044\u3067\u3059\u304b?\",                        \"\u78ba\u8a8d\",                        JOptionPane.YES_NO_OPTION);                if (selected == JOptionPane.NO_OPTION) {                    return ;                }                else {                    Path target_file = Paths.get(path_name.toString());                    Path backup_file = Paths.get(path_name.toString() + \"~\");                    try {                        Files.move(target_file, backup_file, StandardCopyOption.REPLACE_EXISTING);                    }                    catch (IOException exc) {                        JOptionPane.showMessageDialog(                                FileSaveDialog.this,                                exc.getMessage(),                                \"\u30a8\u30e9\u30fc\",                                JOptionPane.ERROR_MESSAGE);                        return ;                    }                }            }            DataFile data_file = null;            if (selected_format.compareTo(FORMAT_PROG) == 0) {                data_file = new ProgFormatFile(file);            }            else if (selected_format.compareTo(FORMAT_BASIC) == 0) {                data_file = new BasicTextFormatFile(file);            }            else if (selected_format.compareTo(FORMAT_DUMP) == 0) {                data_file = new BinaryTextFormatFile(file);            }            else {                throw new AssertionError(\"\u672a\u5b9a\u7fa9\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u4fdd\u5b58\u3057\u3088\u3046\u3068\u3057\u305f\u3002\");            }            data_file.save_jr100(p, 2);            if (data_file.getErrorStatus() != DataFile.STATUS_SUCCESS) {                JOptionPane.showMessageDialog(                        FileSaveDialog.this,                        data_file.getErrorMessage(),                        \"\u30a8\u30e9\u30fc\",                        JOptionPane.ERROR_MESSAGE);                return ;            }            p.setFile(file);            computer.setProgram(p);            FileSaveDialog.this.dispose();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileSaveDialog.java", "stars": "4", "class": {"name": "SwingAction_2", "extends": "AbstractAction", "implements": null, "modifiers": ["private"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        launch(args);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientRunner.java", "stars": "2", "class": {"name": "ClientRunner", "extends": "Application", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["Stage"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void start(Stage primaryStage) throws Exception {        Parent root = FXMLLoader.load(getClass().getResource(                Utils.rebuildPath(\"\\\\UserInterface\\\\FXML\\\\login.fxml\")));        primaryStage.setTitle(\"Chatroom Login\");        primaryStage.setScene(new Scene(root));        primaryStage.setResizable(false);        primaryStage.getIcons().add(new Image(                new File(Utils.rebuildPath(\"src\\\\Resources\\\\Icons\\\\icon.png\")).toURI().toString()));        primaryStage.setOnCloseRequest(e -> Platform.exit());        primaryStage.show();    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientRunner.java", "stars": "2", "class": {"name": "ClientRunner", "extends": "Application", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkAllNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkAllNull() {        return latitude == null && longitude == null && radiusInKM == null;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/criteria/LocationFilterCriteria.java", "stars": "2", "class": {"name": "LocationFilterCriteria", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkNonNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkNonNull() {        return latitude != null && longitude != null && radiusInKM != null;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/criteria/LocationFilterCriteria.java", "stars": "2", "class": {"name": "LocationFilterCriteria", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) throws Exception {    @SuppressWarnings(\"unused\")    JavaJobRunnerMain wrapper = new JavaJobRunnerMain();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/JavaJobRunnerMain.java", "stars": "18", "class": {"name": "JavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runMethod", "params": ["Object", "String"], "throws": ["IllegalAccessException", "InvocationTargetException", "NoSuchMethodException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void runMethod(Object obj, String runMethod)      throws IllegalAccessException, InvocationTargetException,      NoSuchMethodException {    obj.getClass().getMethod(runMethod, new Class<?>[] {}).invoke(obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/JavaJobRunnerMain.java", "stars": "18", "class": {"name": "JavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "outputGeneratedProperties", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void outputGeneratedProperties(Props outputProperties) {    if (outputProperties == null) {      _logger.info(\"  no gend props\");      return;    }    for (String key : outputProperties.getKeySet()) {      _logger          .info(\"  gend prop \" + key + \" value:\" + outputProperties.get(key));    }    String outputFileStr = System.getenv(ProcessJob.JOB_OUTPUT_PROP_FILE);    if (outputFileStr == null) {      return;    }    _logger.info(\"Outputting generated properties to \" + outputFileStr);    Map<String, String> properties = new LinkedHashMap<String, String>();    for (String key : outputProperties.getKeySet()) {      properties.put(key, outputProperties.get(key));    }    Writer writer = null;    try {      writer = new BufferedWriter(new FileWriter(outputFileStr));      JSONUtils.writePropsNoJarDependency(properties, writer);    } catch (Exception e) {      throw new RuntimeException(\"Unable to store output properties to: \"          + outputFileStr);    } finally {      if (writer != null) {        try {          writer.close();        } catch (IOException e) {        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/JavaJobRunnerMain.java", "stars": "18", "class": {"name": "JavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelJob", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelJob() {    if (_isFinished) {      return;    }    _logger.info(\"Attempting to call cancel on this job\");    if (_javaObject == null) {      return;    }    Method method = null;    try {      method = _javaObject.getClass().getMethod(_cancelMethod);    } catch (SecurityException e) {    } catch (NoSuchMethodException e) {    }    if (method != null) {      try {        method.invoke(_javaObject);      } catch (Exception e) {        if (_logger != null) {          _logger.error(\"Cancel method failed! \", e);        }      }    } else {      throw new RuntimeException(\"Job \" + _jobName          + \" does not have cancel method \" + _cancelMethod);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/JavaJobRunnerMain.java", "stars": "18", "class": {"name": "JavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["String", "String", "Properties", "Logger"], "throws": ["Exception"], "modifiers": ["private", "static"], "return_type": "Object", "snippet": "  private static Object getObject(String jobName, String className,      Properties properties, Logger logger) throws Exception {    Class<?> runningClass =        JavaJobRunnerMain.class.getClassLoader().loadClass(className);    if (runningClass == null) {      throw new Exception(\"Class \" + className          + \" was not found. Cannot run job.\");    }    Class<?> propsClass = null;    for (String propClassName : PROPS_CLASSES) {      try {        propsClass =            JavaJobRunnerMain.class.getClassLoader().loadClass(propClassName);      } catch (ClassNotFoundException e) {      }      if (propsClass != null          && getConstructor(runningClass, String.class, propsClass) != null) {        // is this the props class        break;      }      propsClass = null;    }    Object obj = null;    if (propsClass != null        && getConstructor(runningClass, String.class, propsClass) != null) {      // Create props class      Constructor<?> propsCon =          getConstructor(propsClass, propsClass, Properties[].class);      Object props =          propsCon.newInstance(null, new Properties[] { properties });      Constructor<?> con =          getConstructor(runningClass, String.class, propsClass);      logger.info(\"Constructor found \" + con.toGenericString());      obj = con.newInstance(jobName, props);    } else if (getConstructor(runningClass, String.class, Properties.class) != null) {      Constructor<?> con =          getConstructor(runningClass, String.class, Properties.class);      logger.info(\"Constructor found \" + con.toGenericString());      obj = con.newInstance(jobName, properties);    } else if (getConstructor(runningClass, String.class, Map.class) != null) {      Constructor<?> con =          getConstructor(runningClass, String.class, Map.class);      logger.info(\"Constructor found \" + con.toGenericString());      HashMap<Object, Object> map = new HashMap<Object, Object>();      for (Map.Entry<Object, Object> entry : properties.entrySet()) {        map.put(entry.getKey(), entry.getValue());      }      obj = con.newInstance(jobName, map);    } else if (getConstructor(runningClass, String.class) != null) {      Constructor<?> con = getConstructor(runningClass, String.class);      logger.info(\"Constructor found \" + con.toGenericString());      obj = con.newInstance(jobName);    } else if (getConstructor(runningClass) != null) {      Constructor<?> con = getConstructor(runningClass);      logger.info(\"Constructor found \" + con.toGenericString());      obj = con.newInstance();    } else {      logger.error(\"Constructor not found. Listing available Constructors.\");      for (Constructor<?> c : runningClass.getConstructors()) {        logger.info(c.toGenericString());      }    }    return obj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/JavaJobRunnerMain.java", "stars": "18", "class": {"name": "JavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConstructor", "params": ["Class<?>", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Constructor<?>", "snippet": "  private static Constructor<?> getConstructor(Class<?> c, Class<?>... args) {    try {      Constructor<?> cons = c.getConstructor(args);      return cons;    } catch (NoSuchMethodException e) {      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/JavaJobRunnerMain.java", "stars": "18", "class": {"name": "JavaJobRunnerMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        String message;        while (isOnline) {            try {                //Wait for client to send a message .                logger.debug(\"Waiting for client message\");                message = client.receiveMessageFromClient();                logger.debug(\"User Message : \" + message);                // If is the first message from client, will parse as the handshake request                if (establishingConnectionState) {                    /* If this handshake was valid (sign and user name) it will send                       the welcome message to the client and broad cast this join to the                       other online users.                     */                    if (establishingConnection(message)) {                        welcomeMessages();                    } else                        rejectConnection();//If it was not valid, it will reject this connection.                    establishingConnectionState = false;                } else {                    /* For the rest of time, parse any message from client to                       to recognize the proper action for the request.                     */                    Message parsedMessage = parser.parse(message);                    if (parsedMessage.getType() == PUBLIC_DATA || parsedMessage.getType() == PRIVATE_DATA)                        handlingUploadMessages(parsedMessage);                    else if (parsedMessage.getType() == PRIVATE)                        handlingPrivateMessage(parsedMessage);                    else if (parsedMessage.getType() == PUBLIC)                        handlingPublicMessage(parsedMessage);                    else if (parsedMessage.getType() == COMMAND)                        handlingCommands(parsedMessage);                    else if (parsedMessage.getType() == DL)                        handlingDownloadRequest(parsedMessage);                }            } catch (MessageIsNotValid | MessageTypeIsNotValid | MessageLengthDoesNotExists | MessageIsTooLong |                    ReceiverDoesNotExists e) {                logger.error(e.getMessage());            } catch (SendingToClientWasFailed | ReceivingFromClientWasFailed e) {                //Any problem in connecting to client, will refuse the connection.                forceLogout(e);            }        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handlingUploadMessages", "params": ["Message"], "throws": ["SendingToClientWasFailed"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handlingUploadMessages(Message message) throws SendingToClientWasFailed {        if (downloadingInProgress < FILE_SHARING_CAPACITY) {            fileDownloadingExecutor.execute(new ServerFileDownloader(this, client, message));            downloadingInProgress++;        } else            client.sendMessageToClient(ServerMessageBuilder.responseBuilder(FILE_UPLOADING_REJECTED,                    \"You can't upload more file till previous files be done!\"));    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handlingDownloadRequest", "params": ["Message"], "throws": ["SendingToClientWasFailed"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handlingDownloadRequest(Message message) throws SendingToClientWasFailed {        if (uploadingInProgress < FILE_SHARING_CAPACITY) {            fileUploadingExecutor.execute(new ServerFileUploader(this, client, message));            uploadingInProgress++;        } else            client.sendMessageToClient(ServerMessageBuilder.responseBuilder(FILE_DOWNLOADING_REJECTED,                    \"You can't download more file till previous files be done!\"));    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handlingCommands", "params": ["Message"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handlingCommands(Message message) {        try {            if (message.getBody().equals(SIGN_OUT))                signOut(false);            else if (message.getBody().equals(GET_USERS_LIST))                client.sendMessageToClient(ServerMessageBuilder.responseBuilder(LIST_PASSED,                        ServerMessageBuilder.sendUsersList(client.getServer().getOnlineUsers())                ));        } catch (SendingToClientWasFailed e) {            logger.error(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handlingPublicMessage", "params": ["Message"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handlingPublicMessage(Message message) {        client.getServer().broadCastMessage(ServerMessageBuilder.publicMessage(message.getSafeBody(),                message.getLength(), client.getUserName()));    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handlingPrivateMessage", "params": ["Message"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handlingPrivateMessage(Message message) {        String[] notReceivedClients = client.getServer().                sendPrivateMessage(ServerMessageBuilder.privateMessage(message.getSafeBody(),                        message.getLength(), client.getUserName(),                        message.getReceivers()), message.getReceivers());        try {            if (notReceivedClients.length == 0)                client.sendMessageToClient(ServerMessageBuilder.                        responseBuilder(SENDING_PRIVATE_MESSAGE_WAS_SUCCESSFUL, \"\"));            else                client.sendMessageToClient(ServerMessageBuilder.responseBuilder(                        SENDING_PRIVATE_MESSAGE_WAS_NOT_SUCCESSFUL,                        ServerMessageBuilder.convertListToString(notReceivedClients)                ));        } catch (SendingToClientWasFailed e) {            logger.error(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "establishingConnection", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean establishingConnection(String handshake) {        if (Optional.ofNullable(handshake).isPresent()) {            if (validateHandshake(handshake)) {                if (client.getServer().addClient(client, extractingUserName(handshake))) {                    parser = new ServerMessageParser(client.getUserName());                    return true;                }            }        }        return false;    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "welcomeMessages", "params": [], "throws": ["SendingToClientWasFailed"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void welcomeMessages() throws SendingToClientWasFailed {        client.sendMessageToClient(ServerMessageBuilder.responseBuilder(HANDSHAKE_ACCEPTED, \"\"));        client.sendMessageToClient(ServerMessageBuilder.responseBuilder(HANDSHAKE_ACCEPTED,                ServerMessageBuilder.handshakeAcceptResponse(client.getUserName())        ));        String joinMessage = ServerMessageBuilder.userJoiningInChatRoom                (client.getUserName());        String publicMessage = ServerMessageBuilder.publicMessage(                joinMessage,                joinMessage.length(),                \"Server\"        );        client.getServer().broadCastMessage(publicMessage);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "validateHandshake", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean validateHandshake(String handshake) {        try {            String handshakeSign = handshake.substring(0, handshake.indexOf(\"<\"));            return handshakeSign.equals(HANDSHAKE_SIGN);        } catch (IndexOutOfBoundsException e) {            logger.debug(String.format(\"Passed handshake doesn't contain handshake sign, handshake: %s\", handshake));            return false;        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "rejectConnection", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void rejectConnection() {        isOnline = false;        try {            client.sendMessageToClient(ServerMessageBuilder.responseBuilder(HANDSHAKE_REJECTED, \"\"));            client.getServer().updateCapacity(-1);        } catch (SendingToClientWasFailed e) {            logger.error(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "signOut", "params": ["boolean"], "throws": ["SendingToClientWasFailed"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void signOut(boolean forcedSignOut) throws SendingToClientWasFailed {        if (!forcedSignOut)            client.sendMessageToClient(ServerMessageBuilder.responseBuilder(LOG_OUT, \"\"));        isOnline = false;        client.getServer().broadCastMessage(ServerMessageBuilder.responseBuilder(USER_LOGOUT,                ServerMessageBuilder.logoutMessage(client.getUserName())        ));        try {            client.disconnectClient();            logger.debug(\"Client logged out!\");        } catch (IOException e) {            logger.error(\"Logging of client (closing socket) was not successful!\");        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "forceLogout", "params": ["Exception"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void forceLogout(Exception e) {        logger.fatal(e.getMessage());        logger.debug(\"This Connection forced close!\");        try {            signOut(true);        } catch (SendingToClientWasFailed ex) {        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "extractingUserName", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String extractingUserName(String handshake) {        try {            return handshake.substring(handshake.indexOf(\"<\") + 1,                    handshake.lastIndexOf(\">\"));        } catch (IndexOutOfBoundsException e) {            logger.debug(String.format(\"Passed handshake doesn't contain username, handshake: %s\", handshake));            return \"\";        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "decreaseDownloadInProgress", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void decreaseDownloadInProgress() {        downloadingInProgress--;    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "decreaseUploadInProgress", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void decreaseUploadInProgress() {        uploadingInProgress--;    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerWorker.java", "stars": "2", "class": {"name": "ServerWorker", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //1.\u4f7f\u7528\u7ebf\u7a0b\u6c60\u7684\u5de5\u5382\u7c7bExecutors\u91cc\u8fb9\u63d0\u4f9b\u7684\u9759\u6001\u65b9\u6cd5newFixedThreadPool\u751f\u4ea7\u4e00\u4e2a\u6307\u5b9a\u7ebf\u7a0b\u6570\u91cf\u7684\u7ebf\u7a0b\u6c60        ExecutorService es = Executors.newFixedThreadPool(2);        //3.\u8c03\u7528ExecutorService\u4e2d\u7684\u65b9\u6cd5submit,\u4f20\u9012\u7ebf\u7a0b\u4efb\u52a1(\u5b9e\u73b0\u7c7b),\u5f00\u542f\u7ebf\u7a0b,\u6267\u884crun\u65b9\u6cd5        es.submit(new RunnableImpl());//pool-1-thread-1\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u6267\u884c        //\u7ebf\u7a0b\u6c60\u4f1a\u4e00\u76f4\u5f00\u542f,\u4f7f\u7528\u5b8c\u4e86\u7ebf\u7a0b,\u4f1a\u81ea\u52a8\u628a\u7ebf\u7a0b\u5f52\u8fd8\u7ed9\u7ebf\u7a0b\u6c60,\u7ebf\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528        es.submit(new RunnableImpl());//pool-1-thread-1\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u6267\u884c        es.submit(new RunnableImpl());//pool-1-thread-2\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u6267\u884c        //4.\u8c03\u7528ExecutorService\u4e2d\u7684\u65b9\u6cd5shutdown\u9500\u6bc1\u7ebf\u7a0b\u6c60(\u4e0d\u5efa\u8bae\u6267\u884c)        es.shutdown();        es.submit(new RunnableImpl());//\u629b\u5f02\u5e38,\u7ebf\u7a0b\u6c60\u90fd\u6ca1\u6709\u4e86,\u5c31\u4e0d\u80fd\u83b7\u53d6\u7ebf\u7a0b\u4e86    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/18.%E3%80%90%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%91-%E7%AC%94%E8%AE%B0/code/07_ThreadAndLambda/src/com/itheima/demo02/ThreadPool/Demo01ThreadPool.java", "stars": "2", "class": {"name": "Demo01ThreadPool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDaemon", "params": ["AbstractTaskDaemon"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDaemon(AbstractTaskDaemon daemon){        this.internalPool.execute(daemon);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/TaskDaemonPoolManager.java", "stars": "23", "class": {"name": "TaskDaemonPoolManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean shutdown() throws InterruptedException {        internalPool.shutdown();        return internalPool.awaitTermination(SHUTDOWN_WAIT_SECOND, TimeUnit.SECONDS);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/TaskDaemonPoolManager.java", "stars": "23", "class": {"name": "TaskDaemonPoolManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newThread", "params": ["Runnable"], "throws": null, "modifiers": ["public"], "return_type": "Thread", "snippet": "        public Thread newThread(Runnable r) {            Thread t = new Thread(group, r,                    namePrefix + threadNumber.getAndIncrement(), 0);            if(t.isDaemon()){                t.setDaemon(false);            }            if (t.getPriority() != Thread.NORM_PRIORITY){                t.setPriority(Thread.NORM_PRIORITY);            }            return t;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/TaskDaemonPoolManager.java", "stars": "23", "class": {"name": "DaemonThreadFactory", "extends": null, "implements": ["ThreadFactory"], "modifiers": ["private"]}}, {"method_name": "getErrorPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getErrorPath() {        return ERROR_PATH;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/web/controller/AppErrorController.java", "stars": "3", "class": {"name": "AppErrorController", "extends": null, "implements": ["ErrorController"], "modifiers": ["public"]}}, {"method_name": "errorApiHandler", "params": ["WebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ApiResponse", "snippet": "    public ApiResponse errorApiHandler(WebRequest req) {        Map<String, Object> attr = this.errorAttributes.getErrorAttributes(req, false);        int status = (int) attr.get(\"status\");        return ApiResponse.ofMessage(status, String.valueOf(attr.getOrDefault(\"message\", \"error\")));    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/web/controller/AppErrorController.java", "stars": "3", "class": {"name": "AppErrorController", "extends": null, "implements": ["ErrorController"], "modifiers": ["public"]}}, {"method_name": "formatDirty", "params": ["Record", "Throwable", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String formatDirty(final Record dirty, final Throwable t,                               final String msg) {        Map<String, Object> msgGroup = new HashMap<String, Object>();        msgGroup.put(\"type\", super.getPluginType().toString());        if (StringUtils.isNotBlank(msg)) {            msgGroup.put(\"message\", msg);        }        if (null != t && StringUtils.isNotBlank(t.getMessage())) {            msgGroup.put(\"exception\", t.getMessage());        }        if (null != dirty) {            msgGroup.put(\"record\", dirty instanceof  DirtyRecord ? dirty.getColumns():DirtyRecord.asDirtyRecord(dirty)                    .getColumns());        }        return JSON.toJSONString(msgGroup);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/StdoutPluginCollector.java", "stars": "23", "class": {"name": "StdoutPluginCollector", "extends": "AbstractTaskPluginCollector", "implements": null, "modifiers": ["public"]}}, {"method_name": "collectDirtyRecord", "params": ["Record", "Throwable", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void collectDirtyRecord(Record dirtyRecord, Throwable t,                                   String errorMessage) {        int logNum = currentLogNum.getAndIncrement();        if (logNum == 0 && t != null) {            LOG.error(\"\", t);        }        LOG.error(\"\u810f\u6570\u636e: \\n\"                + this.formatDirty(dirtyRecord, t, errorMessage));        super.collectDirtyRecord(dirtyRecord, t, errorMessage);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/StdoutPluginCollector.java", "stars": "23", "class": {"name": "StdoutPluginCollector", "extends": "AbstractTaskPluginCollector", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        final View v= inflater.inflate(R.layout.frag_notification, container, false);        final RecyclerView rv=v.findViewById(R.id.recyview);        DatabaseReference db=FirebaseDatabase.getInstance().getReference(\"Users\");        SharedPreferences sf=getActivity().getSharedPreferences(\"Login data\",MODE_PRIVATE);        String s=sf.getString(\"user\",\"unable to fetch\");        db.child(s).child(\"Transactions\").child(\"give money\").addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                if (dataSnapshot != null) {                    for (DataSnapshot snap : dataSnapshot.getChildren()) {                            String remark=snap.getKey();                            for(DataSnapshot inside:snap.getChildren()){                                String name=inside.getKey();                                String money=inside.getValue().toString();                                ll.add(new notification_data(money,remark,name));                            }                    }                }                System.out.println(ll.size());                if(ll.size()==0){                    TextView t=v.findViewById(R.id.textView5);                    t.setText(\"No Notification\");                }                rv.setAdapter(new notification_adapter(getContext(),ll));                rv.setLayoutManager(new LinearLayoutManager(getContext()));            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });        return v;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/notification_fragment.java", "stars": "2", "class": {"name": "notification_fragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void set(String key, Object value) {        valueTable.put(key, value);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/StateSet.java", "stars": "4", "class": {"name": "StateSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object get(String key, Object default_value) {        Object value = valueTable.get(key);        return value == null ? default_value : value;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/StateSet.java", "stars": "4", "class": {"name": "StateSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object get(String key) {        return get(key, null);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/StateSet.java", "stars": "4", "class": {"name": "StateSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveState", "params": ["Computer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveState(Computer computer) {        computer.saveState(this);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/StateSet.java", "stars": "4", "class": {"name": "StateSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadState", "params": ["Computer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadState(Computer computer) {        computer.loadState(this);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/StateSet.java", "stars": "4", "class": {"name": "StateSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeFile", "params": ["String"], "throws": ["FileNotFoundException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeFile(String file_name) throws FileNotFoundException, IOException {        FileOutputStream fos = new FileOutputStream(new File(file_name));        ObjectOutputStream oos = new ObjectOutputStream(fos);        oos.writeObject(SIGNATURE);        oos.writeInt(VERSION);        oos.writeObject(name);        oos.writeObject(createdDate);        oos.writeObject(comment);        oos.writeObject(valueTable);        oos.close();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/StateSet.java", "stars": "4", "class": {"name": "StateSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readFile", "params": ["String"], "throws": ["FileNotFoundException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void readFile(String file_name) throws FileNotFoundException, IOException {        FileInputStream fis = new FileInputStream(new File(file_name));        ObjectInputStream ois = new ObjectInputStream(fis);        try {            if (!((String)ois.readObject()).equals(SIGNATURE)) {            \tois.close();                throw new IOException(\"\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u4e0d\u6b63\u3067\u3059\u3002\");            }            if (ois.readInt() != VERSION) {            \tois.close();                throw new IOException(\"\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u4e0d\u6b63\u3067\u3059\u3002\");            }            this.name = (String)ois.readObject();            this.createdDate = (Date)ois.readObject();            this.comment = (String)ois.readObject();            this.valueTable = (Hashtable<String, Object>)ois.readObject();        }        catch (ClassNotFoundException e) {        }        ois.close();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/StateSet.java", "stars": "4", "class": {"name": "StateSet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "injectResources", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void injectResources(Props props) {    // Add mapred, yarn and hdfs site configs (in addition to core-site, which    // is automatically added) as default resources before we add the injected    // configuration. This will cause the injected properties to override the    // default site properties (instead of vice-versa). This is safe to do,    // even when these site files don't exist for your Hadoop installation.    if (props.getBoolean(\"azkaban.inject.hadoop-site.configs\", true)) {      Configuration.addDefaultResource(\"mapred-default.xml\");      Configuration.addDefaultResource(\"mapred-site.xml\");      Configuration.addDefaultResource(\"yarn-default.xml\");      Configuration.addDefaultResource(\"yarn-site.xml\");      Configuration.addDefaultResource(\"hdfs-default.xml\");      Configuration.addDefaultResource(\"hdfs-site.xml\");    }    Configuration.addDefaultResource(INJECT_FILE);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopConfigurationInjector.java", "stars": "18", "class": {"name": "HadoopConfigurationInjector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareResourcesToInject", "params": ["Props", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void prepareResourcesToInject(Props props, String workingDir) {    try {      Configuration conf = new Configuration(false);      // First, inject a series of Azkaban links. These are equivalent to      // CommonJobProperties.[EXECUTION,WORKFLOW,JOB,JOBEXEC,ATTEMPT]_LINK      addHadoopProperties(props);      // Next, automatically inject any properties that begin with the      // designated injection prefix.      Map<String, String> confProperties = props.getMapByPrefix(INJECT_PREFIX);      for (Map.Entry<String, String> entry : confProperties.entrySet()) {        String confKey = entry.getKey().replace(INJECT_PREFIX, \"\");        String confVal = entry.getValue();        if (confVal != null) {          conf.set(confKey, confVal);        }      }      // Now write out the configuration file to inject.      File file = getConfFile(props, workingDir, INJECT_FILE);      OutputStream xmlOut = new FileOutputStream(file);      conf.writeXml(xmlOut);      xmlOut.close();    } catch (Throwable e) {      _logger.error(\"Encountered error while preparing the Hadoop configuration resource file\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopConfigurationInjector.java", "stars": "18", "class": {"name": "HadoopConfigurationInjector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addHadoopProperty", "params": ["Props", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void addHadoopProperty(Props props, String propertyName) {      props.put(INJECT_PREFIX + propertyName, props.get(propertyName));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopConfigurationInjector.java", "stars": "18", "class": {"name": "HadoopConfigurationInjector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addHadoopProperties", "params": ["Props"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void addHadoopProperties(Props props) {    String[] propsToInject = new String[]{        CommonJobProperties.EXEC_ID,        CommonJobProperties.FLOW_ID,        CommonJobProperties.JOB_ID,        CommonJobProperties.PROJECT_NAME,        CommonJobProperties.PROJECT_VERSION,        CommonJobProperties.EXECUTION_LINK,        CommonJobProperties.JOB_LINK,        CommonJobProperties.WORKFLOW_LINK,        CommonJobProperties.JOBEXEC_LINK,        CommonJobProperties.ATTEMPT_LINK,        CommonJobProperties.OUT_NODES,        CommonJobProperties.IN_NODES,        CommonJobProperties.PROJECT_LAST_CHANGED_DATE,        CommonJobProperties.PROJECT_LAST_CHANGED_BY,        CommonJobProperties.SUBMIT_USER    };    for(String propertyName : propsToInject) {      addHadoopProperty(props, propertyName);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopConfigurationInjector.java", "stars": "18", "class": {"name": "HadoopConfigurationInjector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfFile", "params": ["Props", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "File", "snippet": "  public static File getConfFile(Props props, String workingDir, String fileName) {    File jobDir = new File(workingDir, getDirName(props));    if (!jobDir.exists()) {      jobDir.mkdir();    }    return new File(jobDir, fileName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopConfigurationInjector.java", "stars": "18", "class": {"name": "HadoopConfigurationInjector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDirName", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getDirName(Props props) {    String dirSuffix = props.get(CommonJobProperties.NESTED_FLOW_PATH);    if ((dirSuffix == null) || (dirSuffix.length() == 0)) {      dirSuffix = props.get(CommonJobProperties.JOB_ID);      if ((dirSuffix == null) || (dirSuffix.length() == 0)) {        throw new RuntimeException(\"azkaban.flow.nested.path and azkaban.job.id were not set\");      }    }    return \"_resources_\" + dirSuffix.replace(':', '_');  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopConfigurationInjector.java", "stars": "18", "class": {"name": "HadoopConfigurationInjector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPath", "params": ["Props", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getPath(Props props, String workingDir) {    return new File(workingDir, getDirName(props)).toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopConfigurationInjector.java", "stars": "18", "class": {"name": "HadoopConfigurationInjector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadProp", "params": ["Props", "Configuration", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void loadProp(Props props, Configuration conf, String name) {    String prop = props.get(name);    if (prop != null) {      conf.set(name, prop);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopConfigurationInjector.java", "stars": "18", "class": {"name": "HadoopConfigurationInjector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onScanFinished", "params": ["BleDevice"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onScanFinished(BleDevice scanResult);    public void onLeScan(BleDevice bleDevice) {    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleScanAndConnectCallback.java", "stars": "2", "class": {"name": "BleScanAndConnectCallback", "extends": "BleGattCallback", "implements": ["BleScanPresenterImp"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLeScan", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLeScan(BleDevice bleDevice) {    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleScanAndConnectCallback.java", "stars": "2", "class": {"name": "BleScanAndConnectCallback", "extends": "BleGattCallback", "implements": ["BleScanPresenterImp"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentState() {        return state;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/GamepadAxisEvent.java", "stars": "4", "class": {"name": "GamepadAxisEvent", "extends": "GamepadEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAction() {        return action;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/GamepadAxisEvent.java", "stars": "4", "class": {"name": "GamepadAxisEvent", "extends": "GamepadEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "userDefinedMappingsSecureByDefault", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid userDefinedMappingsSecureByDefault() throws Exception {\t\tWebClient webClient = this.webClientBuilder.baseUrl(\"http://localhost:\" + this.port + \"/\").build();\t\tClientResponse response = webClient.get().header(\"Authorization\", getBasicAuth()).exchange()\t\t\t\t.block(Duration.ofSeconds(30));\t\tassertThat(response.statusCode()).isEqualTo(HttpStatus.OK);\t\tResponseCookie sessionCookie = response.cookies().getFirst(\"SESSION\");\t\tString sessionId = response.bodyToMono(String.class).block(Duration.ofSeconds(30));\t\tresponse = webClient.get().cookie(\"SESSION\", sessionCookie.getValue()).exchange().block(Duration.ofSeconds(30));\t\tassertThat(response.statusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(response.bodyToMono(String.class).block(Duration.ofSeconds(30))).isEqualTo(sessionId);\t\tThread.sleep(2000);\t\tresponse = webClient.get().cookie(\"SESSION\", sessionCookie.getValue()).exchange().block(Duration.ofSeconds(30));\t\tassertThat(response.statusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-webflux/src/test/java/smoketest/session/SampleSessionWebFluxApplicationTests.java", "stars": "47572", "class": {"name": "SampleSessionWebFluxApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getBasicAuth", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String getBasicAuth() {\t\treturn \"Basic \" + Base64.getEncoder().encodeToString(\"user:password\".getBytes());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-webflux/src/test/java/smoketest/session/SampleSessionWebFluxApplicationTests.java", "stars": "47572", "class": {"name": "SampleSessionWebFluxApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "scheduleToTrigger", "params": ["Schedule"], "throws": null, "modifiers": ["private"], "return_type": "Trigger", "snippet": "  private Trigger scheduleToTrigger(final Schedule s) {    final Condition triggerCondition = createTriggerCondition(s);    final Condition expireCondition = createExpireCondition(s);    final List<TriggerAction> actions = createActions(s);    final Trigger t = new Trigger.TriggerBuilder(s.getSubmitUser(),        this.triggerSource,        triggerCondition,        expireCondition,        actions)        .setSubmitTime(s.getSubmitTime())        .setLastModifyTime(s.getLastModifyTime())        .setId(s.getScheduleId())        .build();    if (s.isRecurring()) {      t.setResetOnTrigger(true);    } else {      t.setResetOnTrigger(false);    }    return t;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "createActions", "params": ["Schedule"], "throws": null, "modifiers": ["private"], "return_type": "List<TriggerAction>", "snippet": "  private List<TriggerAction> createActions(final Schedule s) {    final List<TriggerAction> actions = new ArrayList<>();\t  // FIXME\u00a0The ExecuteFlowAction constructor is overloaded, adding some parameters, such as failure retry, failure skip.    final ExecuteFlowAction executeAct =        new ExecuteFlowAction(\"executeFlowAction\", s.getProjectId(),            s.getProjectName(), s.getFlowName(), s.getSubmitUser(),            s.getExecutionOptions(), s.getSlaOptions(), s.getOtherOption());    actions.add(executeAct);    return actions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "createTriggerCondition", "params": ["Schedule"], "throws": null, "modifiers": ["private"], "return_type": "Condition", "snippet": "  private Condition createTriggerCondition(final Schedule s) {    final Map<String, ConditionChecker> checkers =        new HashMap<>();    final ConditionChecker checker =        new BasicTimeChecker(\"BasicTimeChecker_1\", s.getFirstSchedTime(),            s.getTimezone(), s.isRecurring(), s.skipPastOccurrences(),            s.getPeriod(), s.getCronExpression());    checkers.put(checker.getId(), checker);    final String expr = checker.getId() + \".eval()\";    final Condition cond = new Condition(checkers, expr);    return cond;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "createExpireCondition", "params": ["Schedule"], "throws": null, "modifiers": ["private"], "return_type": "Condition", "snippet": "  private Condition createExpireCondition(final Schedule s) {    final Map<String, ConditionChecker> checkers = new HashMap<>();    final ConditionChecker checker = new BasicTimeChecker(\"EndTimeChecker_1\", s.getFirstSchedTime(),        s.getTimezone(), s.getEndSchedTime(), false, false,        null, null);    checkers.put(checker.getId(), checker);    final String expr = checker.getId() + \".eval()\";    return new Condition(checkers, expr);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "insertSchedule", "params": ["Schedule"], "throws": ["ScheduleManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void insertSchedule(final Schedule s) throws ScheduleManagerException {    final Trigger t = scheduleToTrigger(s);    try {      this.triggerManager.insertTrigger(t, t.getSubmitUser());      s.setScheduleId(t.getTriggerId());    } catch (final TriggerManagerException e) {      throw new ScheduleManagerException(\"Failed to insert new schedule!\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "updateSchedule", "params": ["Schedule"], "throws": ["ScheduleManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateSchedule(final Schedule s) throws ScheduleManagerException {    final Trigger t = scheduleToTrigger(s);    try {      this.triggerManager.updateTrigger(t, t.getSubmitUser());    } catch (final TriggerManagerException e) {      throw new ScheduleManagerException(\"Failed to update schedule!\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "triggerToSchedule", "params": ["Trigger"], "throws": ["ScheduleManagerException"], "modifiers": ["private"], "return_type": "Schedule", "snippet": "  private Schedule triggerToSchedule(final Trigger t) throws ScheduleManagerException {    final BasicTimeChecker triggerTimeChecker = getBasicTimeChecker(t.getTriggerCondition().getCheckers());    final BasicTimeChecker endTimeChecker = getEndTimeChecker(t);    final List<TriggerAction> actions = t.getActions();    ExecuteFlowAction act = null;    for (final TriggerAction action : actions) {      if (action.getType().equals(ExecuteFlowAction.type)) {        act = (ExecuteFlowAction) action;        break;      }    }    if (triggerTimeChecker != null && act != null) {      return new Schedule(t.getTriggerId(),          act.getProjectId(),          act.getProjectName(),          act.getFlowName(),          t.getStatus().toString(),          triggerTimeChecker.getFirstCheckTime(),          endTimeChecker == null ? Constants.DEFAULT_SCHEDULE_END_EPOCH_TIME : endTimeChecker.getNextCheckTime(),          triggerTimeChecker.getTimeZone(),          triggerTimeChecker.getPeriod(),          t.getLastModifyTime(),          triggerTimeChecker.getNextCheckTime(),          t.getSubmitTime(),          t.getSubmitUser(),          act.getExecutionOptions(),          act.getSlaOptions(),          triggerTimeChecker.getCronExpression(),          act.getOtherOption());    } else {      logger.error(\"Failed to parse schedule from trigger!\");      throw new ScheduleManagerException(\"Failed to parse schedule from trigger!\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "getBasicTimeChecker", "params": ["Map<String,ConditionChecker>"], "throws": null, "modifiers": ["private"], "return_type": "BasicTimeChecker", "snippet": "  private BasicTimeChecker getBasicTimeChecker(final Map<String, ConditionChecker> checkers) {    for (final ConditionChecker checker : checkers.values()) {      if (checker.getType().equals(BasicTimeChecker.type)) {        return (BasicTimeChecker) checker;      }    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "getEndTimeChecker", "params": ["Trigger"], "throws": null, "modifiers": ["private"], "return_type": "BasicTimeChecker", "snippet": "  private BasicTimeChecker getEndTimeChecker(final Trigger t) {    if (t.getExpireCondition().getExpression().contains(\"EndTimeChecker\")) {      return getBasicTimeChecker(t.getExpireCondition().getCheckers());    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "removeSchedule", "params": ["Schedule"], "throws": ["ScheduleManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void removeSchedule(final Schedule s) throws ScheduleManagerException {    try {      this.triggerManager.removeTrigger(s.getScheduleId(), s.getSubmitUser());    } catch (final TriggerManagerException e) {      throw new ScheduleManagerException(e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "updateNextExecTime", "params": ["Schedule"], "throws": ["ScheduleManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateNextExecTime(final Schedule s) throws ScheduleManagerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "loadUpdatedSchedules", "params": [], "throws": ["ScheduleManagerException"], "modifiers": ["synchronized", "public"], "return_type": "List<Schedule>", "snippet": "  public synchronized List<Schedule> loadUpdatedSchedules()      throws ScheduleManagerException {    final List<Trigger> triggers;    try {      triggers = this.triggerManager.getTriggerUpdates(this.triggerSource, this.lastUpdateTime);    } catch (final TriggerManagerException e) {      logger.error(\"load updated schedules failed, caused by:\" + e);      throw new ScheduleManagerException(e);    }    final List<Schedule> schedules = new ArrayList<>();    for (final Trigger t : triggers) {      this.lastUpdateTime = Math.max(this.lastUpdateTime, t.getLastModifyTime());      final Schedule s = triggerToSchedule(t);      schedules.add(s);      logger.info(\"loaded schedule for \" + s.getProjectName() + \" (project_ID: \" + s.getProjectId() + \")\");    }    return schedules;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "loadAllSchedulesId", "params": [], "throws": ["TriggerLoaderException"], "modifiers": ["synchronized", "public"], "return_type": "List<Integer>", "snippet": "  public synchronized List<Integer> loadAllSchedulesId() throws TriggerLoaderException {    List<Integer> triggersId = null;    try {      triggersId = this.triggerManager.getAllTriggersId();    } catch (TriggerLoaderException e) {      logger.error(\"load updated schedules failed, caused by:\" + e);    }    return triggersId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java", "stars": "18", "class": {"name": "TriggerBasedScheduleLoader", "extends": null, "implements": ["ScheduleLoader"], "modifiers": ["public"]}}, {"method_name": "index", "params": ["HttpServletRequest", "Model", "int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String index(HttpServletRequest request, Model model, @RequestParam(required = false, defaultValue = \"-1\") int jobGroup) {\t\t// \u679a\u4e3e-\u5b57\u5178\t\tmodel.addAttribute(\"ExecutorRouteStrategyEnum\", ExecutorRouteStrategyEnum.values());\t    // \u8def\u7531\u7b56\u7565-\u5217\u8868\t\tmodel.addAttribute(\"GlueTypeEnum\", GlueTypeEnum.values());\t\t\t\t\t\t\t\t// Glue\u7c7b\u578b-\u5b57\u5178\t\tmodel.addAttribute(\"ExecutorBlockStrategyEnum\", ExecutorBlockStrategyEnum.values());\t    // \u963b\u585e\u5904\u7406\u7b56\u7565-\u5b57\u5178\t\t// \u6267\u884c\u5668\u5217\u8868\t\tList<XxlJobGroup> jobGroupList_all =  xxlJobGroupDao.findAll();\t\t// filter group\t\tList<XxlJobGroup> jobGroupList = filterJobGroupByRole(request, jobGroupList_all);\t\t/*if (jobGroupList==null || jobGroupList.size()==0) {\t\t\tthrow new XxlJobException(I18nUtil.getString(\"jobgroup_empty\"));\t\t}*/\t\tmodel.addAttribute(\"JobGroupList\", jobGroupList);\t\tmodel.addAttribute(\"jobGroup\", jobGroup);\t\treturn \"jobinfo/jobinfo.index\";\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filterJobGroupByRole", "params": ["HttpServletRequest", "List<XxlJobGroup>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<XxlJobGroup>", "snippet": "\tpublic static List<XxlJobGroup> filterJobGroupByRole(HttpServletRequest request, List<XxlJobGroup> jobGroupList_all){\t\tList<XxlJobGroup> jobGroupList = new ArrayList<>();\t\tif (jobGroupList_all!=null && jobGroupList_all.size()>0) {\t\t\tXxlJobUser loginUser = (XxlJobUser) request.getAttribute(LoginService.LOGIN_IDENTITY_KEY);\t\t\tif (loginUser.getRole() == 1) {\t\t\t\tjobGroupList = jobGroupList_all;\t\t\t} else {\t\t\t\tList<String> groupIdStrs = new ArrayList<>();\t\t\t\tif (loginUser.getPermission()!=null && loginUser.getPermission().trim().length()>0) {\t\t\t\t\tgroupIdStrs = Arrays.asList(loginUser.getPermission().trim().split(\",\"));\t\t\t\t}\t\t\t\tfor (XxlJobGroup groupItem:jobGroupList_all) {\t\t\t\t\tif (groupIdStrs.contains(String.valueOf(groupItem.getId()))) {\t\t\t\t\t\tjobGroupList.add(groupItem);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\treturn jobGroupList;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validPermission", "params": ["HttpServletRequest", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void validPermission(HttpServletRequest request, int jobGroup) {\t\tXxlJobUser loginUser = (XxlJobUser) request.getAttribute(LoginService.LOGIN_IDENTITY_KEY);\t\tif (!loginUser.validPermission(jobGroup)) {\t\t\tthrow new RuntimeException(I18nUtil.getString(\"system_permission_limit\") + \"[username=\"+ loginUser.getUsername() +\"]\");\t\t}\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pageList", "params": ["int", "int", "int", "int", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "\tpublic Map<String, Object> pageList(@RequestParam(required = false, defaultValue = \"0\") int start,  \t\t\t@RequestParam(required = false, defaultValue = \"10\") int length,\t\t\tint jobGroup, int triggerStatus, String jobDesc, String executorHandler, String author) {\t\t\t\treturn xxlJobService.pageList(start, length, jobGroup, triggerStatus, jobDesc, executorHandler, author);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["XxlJobInfo"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> add(XxlJobInfo jobInfo) {\t\treturn xxlJobService.add(jobInfo);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["XxlJobInfo"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> update(XxlJobInfo jobInfo) {\t\treturn xxlJobService.update(jobInfo);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> remove(int id) {\t\treturn xxlJobService.remove(id);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pause", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> pause(int id) {\t\treturn xxlJobService.stop(id);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> start(int id) {\t\treturn xxlJobService.start(id);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "triggerJob", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> triggerJob(int id, String executorParam) {\t\t// force cover job param\t\tif (executorParam == null) {\t\t\texecutorParam = \"\";\t\t}\t\tJobTriggerPoolHelper.trigger(id, TriggerTypeEnum.MANUAL, -1, null, executorParam);\t\treturn ReturnT.SUCCESS;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextTriggerTime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<List>", "snippet": "\tpublic ReturnT<List<String>> nextTriggerTime(String cron) {\t\tList<String> result = new ArrayList<>();\t\ttry {\t\t\tCronExpression cronExpression = new CronExpression(cron);\t\t\tDate lastTime = new Date();\t\t\tfor (int i = 0; i < 5; i++) {\t\t\t\tlastTime = cronExpression.getNextValidTimeAfter(lastTime);\t\t\t\tif (lastTime != null) {\t\t\t\t\tresult.add(DateUtil.formatDateTime(lastTime));\t\t\t\t} else {\t\t\t\t\tbreak;\t\t\t\t}\t\t\t}\t\t} catch (ParseException e) {\t\t\treturn new ReturnT<List<String>>(ReturnT.FAIL_CODE, I18nUtil.getString(\"jobinfo_field_cron_unvalid\"));\t\t}\t\treturn new ReturnT<List<String>>(result);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobInfoController.java", "stars": "1", "class": {"name": "JobInfoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Danmakus", "snippet": "    public Danmakus parse() {        if (mDataSource != null) {            AndroidFileSource source = (AndroidFileSource) mDataSource;            try {                XMLReader xmlReader = XMLReaderFactory.createXMLReader();                XmlContentHandler contentHandler = new XmlContentHandler();                xmlReader.setContentHandler(contentHandler);                xmlReader.parse(new InputSource(source.data()));                return contentHandler.getResult();            } catch (SAXException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            }        }        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "BiliDanmukuParser", "extends": "BaseDanmakuParser", "implements": null, "modifiers": ["public"]}}, {"method_name": "isPercentageNumber", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isPercentageNumber(float number) {        return number >= 0f && number <= 1f;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "BiliDanmukuParser", "extends": "BaseDanmakuParser", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDisplayer", "params": ["IDisplayer"], "throws": null, "modifiers": ["public"], "return_type": "BaseDanmakuParser", "snippet": "    public BaseDanmakuParser setDisplayer(IDisplayer disp) {        super.setDisplayer(disp);        mDispScaleX = mDispWidth / DanmakuFactory.BILI_PLAYER_WIDTH;        mDispScaleY = mDispHeight / DanmakuFactory.BILI_PLAYER_HEIGHT;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "BiliDanmukuParser", "extends": "BaseDanmakuParser", "implements": null, "modifiers": ["public"]}}, {"method_name": "getResult", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Danmakus", "snippet": "        public Danmakus getResult() {            return result;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "XmlContentHandler", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "startDocument", "params": [], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void startDocument() throws SAXException {        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "XmlContentHandler", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "endDocument", "params": [], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void endDocument() throws SAXException {            completed = true;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "XmlContentHandler", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "startElement", "params": ["String", "String", "String", "Attributes"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void startElement(String uri, String localName, String qName, Attributes attributes)                throws SAXException {            String tagName = localName.length() != 0 ? localName : qName;            tagName = tagName.toLowerCase(Locale.getDefault()).trim();            if (tagName.equals(\"d\")) {                // <d p=\"23.826000213623,1,25,16777215,1422201084,0,057075e9,757076900\">\u6211\u4ece\u672a\u89c1\u8fc7\u5982\u6b64\u539a\u989c\u65e0\u803b\u4e4b\u7334</d>                // 0:\u65f6\u95f4(\u5f39\u5e55\u51fa\u73b0\u65f6\u95f4)                // 1:\u7c7b\u578b(1\u4ece\u53f3\u81f3\u5de6\u6eda\u52a8\u5f39\u5e55|6\u4ece\u5de6\u81f3\u53f3\u6eda\u52a8\u5f39\u5e55|5\u9876\u7aef\u56fa\u5b9a\u5f39\u5e55|4\u5e95\u7aef\u56fa\u5b9a\u5f39\u5e55|7\u9ad8\u7ea7\u5f39\u5e55|8\u811a\u672c\u5f39\u5e55)                // 2:\u5b57\u53f7                // 3:\u989c\u8272                // 4:\u65f6\u95f4\u6233 ?                // 5:\u5f39\u5e55\u6c60id                // 6:\u7528\u6237hash                // 7:\u5f39\u5e55id                String pValue = attributes.getValue(\"p\");                // parse p value to danmaku                String[] values = pValue.split(\",\");                if (values.length > 0) {                    long time = (long) (Float.parseFloat(values[0]) * 1000); // \u51fa\u73b0\u65f6\u95f4                    int type = Integer.parseInt(values[1]); // \u5f39\u5e55\u7c7b\u578b                    float textSize = Float.parseFloat(values[2]); // \u5b57\u4f53\u5927\u5c0f                    int color = (int) ((0x00000000ff000000 | Long.parseLong(values[3])) & 0x00000000ffffffff); // \u989c\u8272                    // int poolType = Integer.parseInt(values[5]); // \u5f39\u5e55\u6c60\u7c7b\u578b\uff08\u5ffd\u7565                    item = mContext.mDanmakuFactory.createDanmaku(type, mContext);                    if (item != null) {                        item.setTime(time);                        item.textSize = textSize * (mDispDensity - 0.6f);                        item.textColor = color;                        item.textShadowColor = color <= Color.BLACK ? Color.WHITE : Color.BLACK;                    }                }            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "XmlContentHandler", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "endElement", "params": ["String", "String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void endElement(String uri, String localName, String qName) throws SAXException {            if (item != null && item.text != null) {                if (item.duration != null) {                    String tagName = localName.length() != 0 ? localName : qName;                    if (tagName.equalsIgnoreCase(\"d\")) {                        item.setTimer(mTimer);                        item.flags = mContext.mGlobalFlagValues;                        Object lock = result.obtainSynchronizer();                        synchronized (lock) {                            result.addItem(item);                        }                    }                }                item = null;            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "XmlContentHandler", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "characters", "params": ["char", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void characters(char[] ch, int start, int length) {            if (item != null) {                DanmakuUtils.fillText(item, decodeXmlString(new String(ch, start, length)));                item.index = index++;                // initial specail danmaku data                String text = String.valueOf(item.text).trim();                if (item.getType() == BaseDanmaku.TYPE_SPECIAL && text.startsWith(\"[\")                        && text.endsWith(\"]\")) {                    //text = text.substring(1, text.length() - 1);                    String[] textArr = null;//text.split(\",\", -1);                    try {                        JSONArray jsonArray = new JSONArray(text);                        textArr = new String[jsonArray.length()];                        for (int i = 0; i < textArr.length; i++) {                            textArr[i] = jsonArray.getString(i);                        }                    } catch (JSONException e) {                        e.printStackTrace();                    }                    if (textArr == null || textArr.length < 5 || TextUtils.isEmpty(textArr[4])) {                        item = null;                        return;                    }                    item.text = textArr[4];                    float beginX = Float.parseFloat(textArr[0]);                    float beginY = Float.parseFloat(textArr[1]);                    float endX = beginX;                    float endY = beginY;                    String[] alphaArr = textArr[2].split(\"-\");                    int beginAlpha = (int) (AlphaValue.MAX * Float.parseFloat(alphaArr[0]));                    int endAlpha = beginAlpha;                    if (alphaArr.length > 1) {                        endAlpha = (int) (AlphaValue.MAX * Float.parseFloat(alphaArr[1]));                    }                    long alphaDuraion = (long) (Float.parseFloat(textArr[3]) * 1000);                    long translationDuration = alphaDuraion;                    long translationStartDelay = 0;                    float rotateY = 0, rotateZ = 0;                    if (textArr.length >= 7) {                        rotateZ = Float.parseFloat(textArr[5]);                        rotateY = Float.parseFloat(textArr[6]);                    }                    if (textArr.length >= 11) {                        endX = Float.parseFloat(textArr[7]);                        endY = Float.parseFloat(textArr[8]);                        if (!\"\".equals(textArr[9])) {                            translationDuration = Integer.parseInt(textArr[9]);                        }                        if (!\"\".equals(textArr[10])) {                            translationStartDelay = (long) (Float.parseFloat(textArr[10]));                        }                    }                    if (isPercentageNumber(beginX)) {                        beginX *= DanmakuFactory.BILI_PLAYER_WIDTH;                    }                    if (isPercentageNumber(beginY)) {                        beginY *= DanmakuFactory.BILI_PLAYER_HEIGHT;                    }                    if (isPercentageNumber(endX)) {                        endX *= DanmakuFactory.BILI_PLAYER_WIDTH;                    }                    if (isPercentageNumber(endY)) {                        endY *= DanmakuFactory.BILI_PLAYER_HEIGHT;                    }                    item.duration = new Duration(alphaDuraion);                    item.rotationZ = rotateZ;                    item.rotationY = rotateY;                    mContext.mDanmakuFactory.fillTranslationData(item, beginX,                            beginY, endX, endY, translationDuration, translationStartDelay, mDispScaleX, mDispScaleY);                    mContext.mDanmakuFactory.fillAlphaData(item, beginAlpha, endAlpha, alphaDuraion);                    if (textArr.length >= 12) {                        // \u662f\u5426\u6709\u63cf\u8fb9                        if (!TextUtils.isEmpty(textArr[11]) && TRUE_STRING.equals(textArr[11])) {                            item.textShadowColor = Color.TRANSPARENT;                        }                    }                    if (textArr.length >= 13) {                        //TODO \u5b57\u4f53 textArr[12]                    }                    if (textArr.length >= 14) {                        //TODO \u662f\u5426\u6709\u52a8\u753b\u7f13\u51b2(easing)                    }                    if (textArr.length >= 15) {                        // \u8def\u5f84\u6570\u636e                        if (!\"\".equals(textArr[14])) {                            String motionPathString = textArr[14].substring(1);                            String[] pointStrArray = motionPathString.split(\"L\");                            if (pointStrArray != null && pointStrArray.length > 0) {                                float[][] points = new float[pointStrArray.length][2];                                for (int i = 0; i < pointStrArray.length; i++) {                                    String[] pointArray = pointStrArray[i].split(\",\");                                    points[i][0] = Float.parseFloat(pointArray[0]);                                    points[i][1] = Float.parseFloat(pointArray[1]);                                }                                mContext.mDanmakuFactory.fillLinePathData(item, points, mDispScaleX,                                        mDispScaleY);                            }                        }                    }                }            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "XmlContentHandler", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "decodeXmlString", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "        private String decodeXmlString(String title) {            if (title.contains(\"&amp;\")) {                title = title.replace(\"&amp;\", \"&\");            }            if (title.contains(\"&quot;\")) {                title = title.replace(\"&quot;\", \"\\\"\");            }            if (title.contains(\"&gt;\")) {                title = title.replace(\"&gt;\", \">\");            }            if (title.contains(\"&lt;\")) {                title = title.replace(\"&lt;\", \"<\");            }            return title;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/BiliDanmukuParser.java", "stars": "2", "class": {"name": "XmlContentHandler", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOsTotalFreeMemorySize", "params": [], "throws": null, "modifiers": [], "return_type": "long", "snippet": "  long getOsTotalFreeMemorySize() {    if (!Files.isRegularFile(Paths.get(MEM_INFO_FILE))) {      // Mac doesn't support /proc/meminfo for example.      return 0;    }    final List<String> lines;    // The file /proc/meminfo is assumed to contain only ASCII characters.    // The assumption is that the file is not too big. So it is simpler to read the whole file    // into memory.    try {      lines = Files.readAllLines(Paths.get(MEM_INFO_FILE), StandardCharsets.UTF_8);    } catch (final IOException e) {      final String errMsg = \"Failed to open mem info file: \" + MEM_INFO_FILE;      logger.error(errMsg, e);      return 0;    }    return getOsTotalFreeMemorySizeFromStrings(lines);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/OsMemoryUtil.java", "stars": "18", "class": {"name": "OsMemoryUtil", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getOsTotalFreeMemorySizeFromStrings", "params": ["List<String>"], "throws": null, "modifiers": [], "return_type": "long", "snippet": "  long getOsTotalFreeMemorySizeFromStrings(final List<String> lines) {    long totalFree = 0;    int count = 0;    for (final String line : lines) {      for (final String keyName : MEM_KEYS) {        if (line.startsWith(keyName)) {          count++;          final long size = parseMemoryLine(line);          if (size == 0) {            return 0;          }          totalFree += size;        }      }    }    final int length = MEM_KEYS.size();    if (count != length) {      final String errMsg = String          .format(\"Expect %d keys in the meminfo file. Got %d. content: %s\", length, count, lines);      logger.error(errMsg);      totalFree = 0;    }    return totalFree;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/OsMemoryUtil.java", "stars": "18", "class": {"name": "OsMemoryUtil", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "parseMemoryLine", "params": ["String"], "throws": null, "modifiers": [], "return_type": "long", "snippet": "  long parseMemoryLine(final String line) {    final int idx1 = line.indexOf(\":\");    final int idx2 = line.lastIndexOf(\"kB\");    final String sizeString = line.substring(idx1 + 1, idx2 - 1).trim();    try {      return Long.parseLong(sizeString);    } catch (final NumberFormatException e) {      final String err = \"Failed to parse the meminfo file. Line: \" + line;      logger.error(err);      return 0;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/OsMemoryUtil.java", "stars": "18", "class": {"name": "OsMemoryUtil", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.drawCircle(300, 300, 200, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice02RadialGradientView.java", "stars": "2", "class": {"name": "Practice02RadialGradientView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getResult(CallableStatement cs, int columnIndex)      throws SQLException {    return cs.getString(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/FirstNameTypeHandler.java", "stars": "15", "class": {"name": "FirstNameTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getResult(ResultSet rs, String columnName)      throws SQLException {    return rs.getString(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/FirstNameTypeHandler.java", "stars": "15", "class": {"name": "FirstNameTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getResult(ResultSet rs, int columnIndex)      throws SQLException {    return rs.getString(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/FirstNameTypeHandler.java", "stars": "15", "class": {"name": "FirstNameTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "setParameter", "params": ["PreparedStatement", "int", "Object", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setParameter(PreparedStatement ps, int i, Object parameter,                           JdbcType jdbcType) throws SQLException {    if (parameter == null) {      ps.setNull(i, Types.VARCHAR);    } else {      Name name = (Name) parameter;      ps.setString(i, name.getFirstName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/FirstNameTypeHandler.java", "stars": "15", "class": {"name": "FirstNameTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "updatePlayerMoveState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updatePlayerMoveState()    {        this.moveStrafe = 0.0F;        this.moveForward = 0.0F;        if (this.gameSettings.keyBindForward.isKeyDown())        {            ++this.moveForward;            this.forwardKeyDown = true;        }        else        {            this.forwardKeyDown = false;        }        if (this.gameSettings.keyBindBack.isKeyDown())        {            --this.moveForward;            this.backKeyDown = true;        }        else        {            this.backKeyDown = false;        }        if (this.gameSettings.keyBindLeft.isKeyDown())        {            ++this.moveStrafe;            this.leftKeyDown = true;        }        else        {            this.leftKeyDown = false;        }        if (this.gameSettings.keyBindRight.isKeyDown())        {            --this.moveStrafe;            this.rightKeyDown = true;        }        else        {            this.rightKeyDown = false;        }        this.jump = this.gameSettings.keyBindJump.isKeyDown();        if (Mercury.INSTANCE.getModuleManager().find(Scaffold.class).isEnabled() && Scaffold.down) this.sneak = false;        else this.sneak = this.gameSettings.keyBindSneak.isKeyDown();        if (this.sneak)        {            this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);            this.moveForward = (float)((double)this.moveForward * 0.3D);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinMovementInputFromOptions.java", "stars": "12", "class": {"name": "MixinMovementInputFromOptions", "extends": "MovementInput", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        animateBt = (Button) findViewById(R.id.animateBt);        imageView = (ImageView) findViewById(R.id.imageView);        imageView.setScaleX(0);        imageView.setScaleY(0);        imageView.setAlpha(0f);        animateBt.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                // TODO \u5728\u8fd9\u91cc\u5904\u7406\u70b9\u51fb\u4e8b\u4ef6\uff0c\u540c\u65f6\u5bf9\u591a\u4e2a\u5c5e\u6027\u505a\u52a8\u753b                imageView.animate()                        .scaleX(1.5f)                        .scaleY(1.5f)                        .alpha(1f)                        .translationX(400f);            }        });    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson5/Practice05MultiProperties.java", "stars": "2", "class": {"name": "Practice05MultiProperties", "extends": "ConstraintLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseResponse", "params": ["HttpResponse"], "throws": ["HttpResponseException", "IOException"], "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String parseResponse(final HttpResponse response)      throws HttpResponseException, IOException {    final StatusLine statusLine = response.getStatusLine();    final String responseBody = response.getEntity() != null ?        EntityUtils.toString(response.getEntity()) : \"\";    if (statusLine.getStatusCode() >= 300) {      logger.error(String.format(\"unable to parse response as the response status is %s\",          statusLine.getStatusCode()));      throw new HttpResponseException(statusLine.getStatusCode(), responseBody);    }    return responseBody;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorApiClient.java", "stars": "18", "class": {"name": "ExecutorApiClient", "extends": "RestfulApiClient", "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void test() {    UrlParam urlParam = new UrlParam(123, \"tester\");    Assert.assertEquals(\"\", urlParam.getStatus());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/test/java/StringTest.java", "stars": "2", "class": {"name": "StringTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test2", "params": [], "throws": ["JsonProcessingException", "DefaultException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void test2() throws JsonProcessingException, DefaultException {    UrlParam urlParam = new UrlParam(VALID_APPID, VALID_APPKEY);    urlParam.setGroupId(4).setRequestUri(\"http://www.google.com\");    DomainUrlProtectService domainUrlProtectService = new DomainUrlProtectService();    String res = domainUrlProtectService.dynamicSetURIParameters(urlParam);    System.out.println(res);  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/test/java/StringTest.java", "stars": "2", "class": {"name": "StringTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        try {            this.scheduler = StdSchedulerFactory.getDefaultScheduler();            this.scheduler.start();            initScheduleJobs();        }catch(Exception e){            LOG.error(\"SCHEDULE_ERROR: [\" + e.getMessage() +\"]\", e);            System.exit(1);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/backend/BackendScheduler.java", "stars": "23", "class": {"name": "BackendScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scheduleInterval", "params": ["String", "Class<Job>", "long", "TimeUnit"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void scheduleInterval(String id, Class<? extends Job> jobClass, long interval, TimeUnit timeUnit) {        JobDetail job = JobBuilder.newJob(jobClass)                .withIdentity(id).build();        Trigger trigger = TriggerBuilder.newTrigger()                .withIdentity(id).withSchedule(                        SimpleScheduleBuilder.simpleSchedule()                                .withIntervalInSeconds(Math.toIntExact(timeUnit.toSeconds(interval)))                                .repeatForever()                ).build();        try {            this.scheduler.scheduleJob(job, trigger);        } catch (SchedulerException e) {            LOG.error(\"SCHEDULE_ERROR: Fail to schedule interval: [\" + e.getMessage() +\"]\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/backend/BackendScheduler.java", "stars": "23", "class": {"name": "BackendScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scheduleCorn", "params": ["String", "Class<Job>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void scheduleCorn(String id, Class<? extends Job> jobClass, String cornExpression){        JobDetail job = JobBuilder.newJob(jobClass)                .withIdentity(id).build();        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(cornExpression)            .withMisfireHandlingInstructionDoNothing();        CronTrigger trigger = TriggerBuilder.newTrigger()                .withIdentity(id).withSchedule(cronScheduleBuilder).build();        try {            this.scheduler.scheduleJob(job, trigger);        } catch (SchedulerException e) {            LOG.error(\"SCHEDULE_ERROR: Fail to schedule corn: [\" + e.getMessage() +\"]\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/backend/BackendScheduler.java", "stars": "23", "class": {"name": "BackendScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopSchedule", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopSchedule(String id){        try {            this.scheduler.pauseJob(JobKey.jobKey(id));        } catch (SchedulerException e) {            LOG.error(\"SCHEDULE_ERROR: Fail to stop schedule job[\" + id + \"]: [\" + e.getMessage() +\"]\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/backend/BackendScheduler.java", "stars": "23", "class": {"name": "BackendScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown(){        try {            this.scheduler.shutdown();        } catch (SchedulerException e) {            //Ignore        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/backend/BackendScheduler.java", "stars": "23", "class": {"name": "BackendScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initScheduleJobs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initScheduleJobs(){        this.scheduleInterval(\"BACKEND-LOG-CLEAN\", LogCleanerJob.class,1, TimeUnit.HOURS);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/backend/BackendScheduler.java", "stars": "23", "class": {"name": "BackendScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        int y = 100;        // \u4f7f\u7528 paint.setTextSize() \u6765\u8bbe\u7f6e\u4e0d\u540c\u5927\u5c0f\u7684\u6587\u5b57        // \u7b2c\u4e00\u5904\uff1a\u6587\u5b57\u5927\u5c0f 16        paint.setTextSize(16);        canvas.drawText(text, 50, y, paint);        y += 30;        // \u7b2c\u4e00\u5904\uff1a\u6587\u5b57\u5927\u5c0f 24        paint.setTextSize(24);        canvas.drawText(text, 50, y, paint);        y += 55;        // \u7b2c\u4e00\u5904\uff1a\u6587\u5b57\u5927\u5c0f 48        paint.setTextSize(48);        canvas.drawText(text, 50, y, paint);        y += 80;        // \u7b2c\u4e00\u5904\uff1a\u6587\u5b57\u5927\u5c0f 72        paint.setTextSize(72);        canvas.drawText(text, 50, y, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice03SetTextSizeView.java", "stars": "2", "class": {"name": "Practice03SetTextSizeView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "groupAnagrams", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<List>", "snippet": "    public List<List<String>> groupAnagrams(String[] strs) {        HashMap<String, List<String>> map = new HashMap<>();        for(int i = 0; i < strs.length; i ++) {            char[] chars = strs[i].toCharArray();            Arrays.sort(chars);            String sorted = String.valueOf(chars);            if(map.containsKey(sorted)) {                map.get(sorted).add(strs[i]);            } else {                map.put(sorted, new LinkedList<>());                map.get(sorted).add(strs[i]);            }        }        return new LinkedList<>(map.values());    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/GroupAnagrams.java", "stars": "1", "class": {"name": "GroupAnagrams", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return DRAWABLES.length;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/pager/GuidePagerAdapter.java", "stars": "1", "class": {"name": "GuidePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isViewFromObject", "params": ["View", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {        return view == object;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/pager/GuidePagerAdapter.java", "stars": "1", "class": {"name": "GuidePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "instantiateItem", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object instantiateItem(@NonNull ViewGroup container, int position) {        AppCompatImageView imageView = new AppCompatImageView(container.getContext());        imageView.setPaddingRelative(0, 0, 0,                (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, container.getContext().getResources().getDisplayMetrics()));        imageView.setImageResource(DRAWABLES[position]);        container.addView(imageView);        return imageView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/pager/GuidePagerAdapter.java", "stars": "1", "class": {"name": "GuidePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "destroyItem", "params": ["ViewGroup", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {        container.removeView((View) object);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/pager/GuidePagerAdapter.java", "stars": "1", "class": {"name": "GuidePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onTouch", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouch (android.view.View p0, android.view.MotionEvent p1)\t{\t\treturn n_onTouch (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ConditionalFocusLayout.java", "stars": "2", "class": {"name": "ConditionalFocusLayout", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTouch", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouch (android.view.View p0, android.view.MotionEvent p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ConditionalFocusLayout.java", "stars": "2", "class": {"name": "ConditionalFocusLayout", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ConditionalFocusLayout.java", "stars": "2", "class": {"name": "ConditionalFocusLayout", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ConditionalFocusLayout.java", "stars": "2", "class": {"name": "ConditionalFocusLayout", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "addPerfRecord", "params": ["int", "int", "PHASE", "long", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void addPerfRecord(int taskGroupId, int taskId, PHASE phase, long startTime, long elapsedTimeInNs) {        if (PerfTrace.getInstance().isEnable()) {            PerfRecord perfRecord = new PerfRecord(taskGroupId, taskId, phase);            perfRecord.elapsedTimeInNs = elapsedTimeInNs;            perfRecord.action = ACTION.end;            perfRecord.startTime = new Date(startTime);            //\u5728PerfTrace\u91cc\u6ce8\u518c            PerfTrace.getInstance().tracePerfRecord(perfRecord);            perf.info(perfRecord.toString());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        if (PerfTrace.getInstance().isEnable()) {            this.startTime = new Date();            this.startTimeInNs = System.nanoTime();            this.action = ACTION.start;            //\u5728PerfTrace\u91cc\u6ce8\u518c            PerfTrace.getInstance().tracePerfRecord(this);            perf.info(toString());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "addCount", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCount(long count) {        this.count.addAndGet(count);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "addSize", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addSize(long size) {        this.count.addAndGet(size);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "end", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void end() {        if (PerfTrace.getInstance().isEnable()) {            this.elapsedTimeInNs = System.nanoTime() - startTimeInNs;            this.action = ACTION.end;            PerfTrace.getInstance().tracePerfRecord(this);            perf.info(toString());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "end", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void end(long elapsedTimeInNs) {        if (PerfTrace.getInstance().isEnable()) {            this.elapsedTimeInNs = elapsedTimeInNs;            this.action = ACTION.end;            PerfTrace.getInstance().tracePerfRecord(this);            perf.info(toString());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return String.format(\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\"                , getInstId(), taskGroupId, taskId, phase, action,                DateFormatUtils.format(startTime, datetimeFormat), elapsedTimeInNs, count.get(), size.get(), getHostIP());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "compareTo", "params": ["PerfRecord"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int compareTo(PerfRecord o) {        if (o == null) {            return 1;        }        return this.elapsedTimeInNs > o.elapsedTimeInNs ? 1 : this.elapsedTimeInNs == o.elapsedTimeInNs ? 0 : -1;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        long jobId = getInstId();        int result = (int) (jobId ^ (jobId >>> 32));        result = 31 * result + taskGroupId;        result = 31 * result + taskId;        result = 31 * result + phase.toInt();        result = 31 * result + (startTime != null ? startTime.hashCode() : 0);        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if(this == o) {            return true;        }        if (!(o instanceof PerfRecord)) {            return false;        }        PerfRecord dst = (PerfRecord) o;        if (this.getInstId() != dst.getInstId()){            return false;        }        if(this.taskGroupId != dst.taskGroupId){            return false;        }        if(this.taskId != dst.taskId){            return false;        }        if(phase != null ? !phase.equals(dst.phase) : dst.phase != null){            return false;        }        if(startTime != null ? !startTime.equals(dst.startTime) : dst.startTime != null){            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "copy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PerfRecord", "snippet": "    public PerfRecord copy() {        PerfRecord copy = new PerfRecord(this.taskGroupId, this.getTaskId(), this.phase);        copy.action = this.action;        copy.startTime = this.startTime;        copy.elapsedTimeInNs = this.elapsedTimeInNs;        copy.count = this.count;        copy.size = this.size;        return copy;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getTaskGroupId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTaskGroupId() {        return taskGroupId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getTaskId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTaskId() {        return taskId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getPhase", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PHASE", "snippet": "    public PHASE getPhase() {        return phase;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getAction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ACTION", "snippet": "    public ACTION getAction() {        return action;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getElapsedTimeInNs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getElapsedTimeInNs() {        return elapsedTimeInNs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getCount() {        return count.get();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getSize() {        return size.get();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getInstId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getInstId() {        return PerfTrace.getInstance().getInstId();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getHostIP", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getHostIP() {        return HostUtils.IP;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getHostName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getHostName() {        return HostUtils.HOSTNAME;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getStartTime() {        return startTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getStartTimeInMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getStartTimeInMs() {        return startTime.getTime();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getStartTimeInNs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getStartTimeInNs() {        return startTimeInNs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getDatetime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDatetime() {        if (startTime == null) {            return \"null time\";        }        return DateFormatUtils.format(startTime, datetimeFormat);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "isReport", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isReport() {        return isReport;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "setIsReport", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsReport(boolean isReport) {        this.isReport = isReport;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfRecord.java", "stars": "23", "class": {"name": "PerfRecord", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "findByCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Country", "snippet": "\tpublic Country findByCode(String code) {\t\tSystem.out.println(\"---> Loading country with code '\" + code + \"'\");\t\treturn new Country(code);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-hazelcast4/src/main/java/smoketest/hazelcast4/CountryRepository.java", "stars": "47572", "class": {"name": "CountryRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendAcCmd", "params": ["Friend", "int", "int", "int", "int", "int"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void sendAcCmd(Friend sender, int c, int p, int m, int t, int f) {        String cmd = String.format(acForm, c, p, m, t, f);        mqtt.connection.publish(\"m5go/cmd/ac\", cmd.getBytes(), QoS.AT_LEAST_ONCE, false, new Callback<Void>() {            @Override            public void onSuccess(Void value) {                responseflag = true;            }            @Override            public void onFailure(Throwable value) {                sender.sendMessage(\"\u64cd\u4f5c\u5931\u8d25\");            }        });    }", "url": "https://raw.githubusercontent.com/luzy99/IOT-Terminal/master/MqttTrans/src/main/java/com/m5go/plugin/MqttTransMain.java", "stars": "2", "class": {"name": "MqttTransMain", "extends": "PluginBase", "implements": null, "modifiers": []}}, {"method_name": "onLoad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoad() {        getLogger().info(\"MqttPlugin loaded!\");        setting = loadConfig(\"manager.yml\");        if (!setting.contains(\"manager\")) {            managerSet = new HashSet<>();            managerSet.add((long) 1694957926);            setting.set(\"manager\", managerSet);            setting.save();        } else {            managerSet = new HashSet<>(setting.getLongList(\"manager\"));        }    }", "url": "https://raw.githubusercontent.com/luzy99/IOT-Terminal/master/MqttTrans/src/main/java/com/m5go/plugin/MqttTransMain.java", "stars": "2", "class": {"name": "MqttTransMain", "extends": "PluginBase", "implements": null, "modifiers": []}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        getLogger().info(\"MQTTPlugin enabled!\");        responseflag = false;        enableflag = false;        acMode = false;        String usage = \"/m help: \u663e\u793a\u5e2e\u52a9\u4fe1\u606f\\n\" +                \"/m enable: \u542f\u52a8\u670d\u52a1\\n\" +                \"/m \u67e5\u8be2\uff1a\u67e5\u8be2\u5b9e\u65f6\u73af\u5883\u6570\u636e\\n\" +                \"/m \u7a7a\u8c03\uff1a\u5f00\u542f\u7a7a\u8c03\u9065\u63a7\u6a21\u5f0f\\n\" +                \"/m \u8054\u7cfb\u4eba\uff1a\u67e5\u770b\u7d27\u6025\u8054\u7cfb\u4eba\u5217\u8868\\n\" +                \"/m \u65b0\u589e\u8054\u7cfb\u4eba [QQ\u53f7] [QQ\u53f7] ...\\n\" +                \"/m \u5929\u6c14 [\u57ce\u5e02]\uff1a\u8bbe\u7f6e\u5929\u6c14\u5b9a\u4f4d\\n\" +                \"\u5386\u53f2\u8bb0\u5f55\uff1a\u67e5\u770b\u8fc7\u53bb24\u5c0f\u65f6\u6e29\u6e7f\u5ea6\u53d8\u5316\u56fe\";        JCommandManager.getInstance().register(this,                new BlockingCommand(\"m\", new ArrayList<>(), \"m5go \u72b6\u6001\u67e5\u8be2\", usage) {                    @Override                    public boolean onCommandBlocking(@NotNull CommandSender commandSender, @NotNull List<String> list) {                        if (list.size() < 1) {                            return false;                        }                        switch (list.get(0)) {                            case \"help\":                                commandSender.sendMessageBlocking(usage);                                break;                            case \"enable\":                                if (enableflag) {                                    commandSender.sendMessageBlocking(\"MQTT\u5df2\u542f\u52a8\");                                    return true;                                }                                enableflag = true;                                mqtt = new MqttServer();                                mybot = Bot.getInstance(1246562471);                                mqtt.connection.listener(new Listener() {                                    @Override                                    public void onConnected() {                                    }                                    @Override                                    public void onDisconnected() {                                    }                                    @Override                                    public void onPublish(UTF8Buffer topic, Buffer body, Runnable ack) {                                        //\u63a5\u6536\u8ba2\u9605\u4fe1\u606f                                        String topi = new String(topic.toByteArray());                                        String msg = \"\";                                        getLogger().debug(topi);                                        //\u73af\u5883\u53cd\u9988                                        switch (topi) {                                            case \"m5go/response/env\": {     //\u73af\u5883\u53cd\u9988                                                if (!responseflag) return;                                                JsonObject resObj = JsonParser.parseString(new String(body.toByteArray())).getAsJsonObject();                                                float tmp = resObj.get(\"tmp\").getAsFloat();                                                float hum = resObj.get(\"hum\").getAsFloat();                                                float press = resObj.get(\"press\").getAsFloat();                                                responseflag = false;                                                msg = String.format(\"\u67e5\u8be2\u6210\u529f\uff01\\n\u5f53\u524d\u6e29\u5ea6\uff1a%.1f\u2103\\n\u6e7f\u5ea6\uff1a%.1f%%\\n\u6c14\u538b\uff1a%.1fkPa\", tmp, hum, press);                                                getLogger().debug(msg);                                                break;                                            }                                            case \"m5go/response/ac\": {       //\u7a7a\u8c03\u53cd\u9988                                                if (!responseflag) return;                                                String payload = new String(body.toByteArray());                                                JsonObject resObj = JsonParser.parseString(payload).getAsJsonObject();                                                int power = resObj.get(\"power\").getAsInt();                                                int mode = resObj.get(\"mode\").getAsInt();                                                int tmp = resObj.get(\"tmp\").getAsInt();                                                int fan = resObj.get(\"fan\").getAsInt();                                                float realtmp = resObj.get(\"realtmp\").getAsFloat();                                                String form = \"\u7a7a\u8c03\u5df2%s\\n\u5f53\u524d\u6a21\u5f0f\uff1a%s\\n\u8bbe\u5b9a\u6e29\u5ea6\uff1a%d\u2103\\n\u5f53\u524d\u6e29\u5ea6\uff1a%.1f\u2103\\n\u98ce\u901f\uff1a%s\";                                                String p = power == 1 ? \"\u5f00\u542f\" : \"\u5173\u95ed\";                                                String m = \"\";                                                if (mode == 0) {                                                    m = \"\u81ea\u52a8\";                                                } else if (mode == 1) {                                                    m = \"\u5236\u51b7\";                                                } else if (mode == 2) {                                                    m = \"\u9664\u6e7f\";                                                } else if (mode == 3) {                                                    m = \"\u9001\u98ce\";                                                } else if (mode == 4) {                                                    m = \"\u5236\u70ed\";                                                }                                                String f = \"\";                                                if (fan == 0) {                                                    f = \"\u81ea\u52a8\";                                                } else if (fan == 1) {                                                    f = \"\u4f4e\";                                                } else if (fan == 2) {                                                    f = \"\u4e2d\";                                                } else if (fan == 3) {                                                    f = \"\u9ad8\";                                                }                                                msg = String.format(form, p, m, tmp, realtmp, f);                                                responseflag = false;                                                break;                                            }                                            case \"m5go/direct\":                                                String s = new String(body.toByteArray());                                                if (s.equals(\"warning\")) {                                                    SimpleDateFormat fmt = new SimpleDateFormat(\"[MM-dd HH:mm:ss]\");                                                    String timestr = fmt.format(System.currentTimeMillis());                                                    msg += timestr + \"M5GO \u89e6\u53d1\u8b66\u62a5\uff01\uff01\uff01\";                                                } else if (s.equals(\"offline\")) {                                                    msg = \"M5GO \u8bbe\u5907\u5df2\u79bb\u7ebf\";                                                } else {                                                    msg = s;                                                }                                                break;                                            case \"m5go/env\":                                                MqttServer.saveToDB(new String(body.toByteArray()));                                                break;                                            case \"m5go/test\":                                                msg = new String(body.toByteArray());                                                break;                                            default:                                                return;                                        }                                        if (!msg.isEmpty()) {                                            mybot.getFriend(1694957926).sendMessage(msg);                                        }                                        ack.run();                                    }                                    @Override                                    public void onFailure(Throwable value) {                                    }                                });                                commandSender.sendMessageBlocking(\"MQTT\u63a8\u9001\u670d\u52a1\u542f\u52a8\u6210\u529f\");                                break;                            case \"\u67e5\u8be2\":                                if (!enableflag) {                                    commandSender.sendMessageBlocking(\"\u670d\u52a1\u5c1a\u672a\u542f\u52a8\uff0c\u67e5\u8be2\u5931\u8d25\\n\u8f93\u5165/m enable\u542f\u52a8\u670d\u52a1\");                                    return true;                                }                                try {                                    mqtt.connection.publish(\"m5go/cmd/env\", \"get\".getBytes(), QoS.AT_LEAST_ONCE, false, new Callback<Void>() {                                        @Override                                        public void onSuccess(Void value) {                                            responseflag = true;                                        }                                        @Override                                        public void onFailure(Throwable value) {                                            commandSender.sendMessageBlocking(\"\u67e5\u8be2\u5931\u8d25\");                                        }                                    });//                                commandSender.sendMessageBlocking(mqtt.getMessage());                                } catch (Exception e) {                                    e.printStackTrace();                                    commandSender.sendMessageBlocking(e.toString());                                }                                break;                            case \"\u7a7a\u8c03\":                                if (!enableflag) {                                    commandSender.sendMessageBlocking(\"\u670d\u52a1\u5c1a\u672a\u542f\u52a8\uff0c\u64cd\u4f5c\u5931\u8d25\\n\u8f93\u5165/m enable\u542f\u52a8\u670d\u52a1\");                                    return true;                                }                                try {                                    mqtt.connection.publish(\"m5go/cmd/ac\", \"{\\\"cmd\\\":0}\".getBytes(), QoS.AT_MOST_ONCE, false, new Callback<Void>() {                                        @Override                                        public void onSuccess(Void value) {                                            responseflag = true;                                            acMode = true;                                            commandSender.sendMessageBlocking(\"\u5f00\u542f\u7a7a\u8c03\u8bbe\u7f6e\u6a21\u5f0f\uff0c\u9000\u51fa\u8bf7\u56de\u590d\u201d\u9000\u51fa\u201c\\n\" +                                                    \"\u64cd\u4f5c\u6307\u4ee4\uff1a\\n[\u5f00\u542f|\u5173\u95ed]\\n[17-30] \u8bbe\u7f6e\u6e29\u5ea6\\n[\u5236\u51b7|\u5236\u70ed|\u9664\u6e7f|\u9001\u98ce|\u81ea\u52a8] \u8bbe\u7f6e\u6a21\u5f0f\\n[\u9ad8\u98ce|\u4e2d\u98ce|\u4f4e\u98ce|\u81ea\u52a8\u98ce] \u8bbe\u7f6e\u98ce\u901f\");                                        }                                        @Override                                        public void onFailure(Throwable value) {                                            value.printStackTrace();                                            commandSender.sendMessageBlocking(\"\u64cd\u4f5c\u5931\u8d25\");                                        }                                    });                                } catch (Exception e) {                                    e.printStackTrace();                                    commandSender.sendMessageBlocking(e.toString());                                }                                break;                            case \"\u65b0\u589e\u8054\u7cfb\u4eba\":                                int listsize = list.size();                                if (listsize < 2) {                                    commandSender.sendMessageBlocking(\"\u6307\u4ee4\u683c\u5f0f\u9519\u8bef\uff01\\n/m \u65b0\u589e\u8054\u7cfb\u4eba 1234 3456 ...\");                                    break;                                }                                for (int i = 1; i < listsize; i++) {                                    try {                                        long account = Long.parseLong(list.get(i));                                        managerSet.add(account);                                    } catch (NumberFormatException e) {                                        commandSender.sendMessageBlocking(\"\u6307\u4ee4\u683c\u5f0f\u9519\u8bef\uff01\\n/m \u65b0\u589e\u8054\u7cfb\u4eba 1234 3456 ...\");                                        break;                                    }                                }                                commandSender.sendMessageBlocking(\"\u65b0\u589e\u7d27\u6025\u8054\u7cfb\u4eba\u6210\u529f\uff01\");                                break;                            case \"\u8054\u7cfb\u4eba\":                                String backmsg = \"\u7d27\u6025\u8054\u7cfb\u4eba\u5217\u8868\uff1a\\n\";                                for (Long s : managerSet) {                                    backmsg += String.valueOf(s) + \"\\n\";                                }                                commandSender.sendMessageBlocking(backmsg);                                break;                            case \"\u5929\u6c14\":                                if (list.size() != 2) {                                    commandSender.sendMessageBlocking(\"\u6307\u4ee4\u683c\u5f0f\u9519\u8bef\uff01\\n/m \u5929\u6c14 [\u57ce\u5e02]\");                                    break;                                }                                String city = list.get(1);                                mqtt.connection.publish(\"m5go/cmd/city\", city.getBytes(), QoS.AT_LEAST_ONCE, false, new Callback<Void>() {                                    @Override                                    public void onSuccess(Void value) {                                        commandSender.sendMessageBlocking(\"\u5929\u6c14\u5b9a\u4f4d\u5df2\u4fee\u6539\uff1a\" + city);                                    }                                    @Override                                    public void onFailure(Throwable value) {                                        commandSender.sendMessageBlocking(\"\u64cd\u4f5c\u5931\u8d25\");                                    }                                });                                break;                            default:                                commandSender.sendMessageBlocking(usage);                                break;                        }                        return true;                    }                }        );        this.getEventListener().subscribeAlways(FriendMessageEvent.class, (FriendMessageEvent event) -> {            Friend sender = event.getSender();            String msg = event.getMessage().contentToString();            if (managerSet.contains(sender.getId())) {                if (!enableflag) {                    sender.sendMessage(\"\u670d\u52a1\u5c1a\u672a\u542f\u52a8\uff0c\u64cd\u4f5c\u5931\u8d25\\n\u8f93\u5165/m enable\u542f\u52a8\u670d\u52a1\");                    return;                }                if (acMode) {                    if (msg.equals(\"\u9000\u51fa\")) {                        acMode = false;                        sender.sendMessage(\"\u5df2\u9000\u51fa\u7a7a\u8c03\u8bbe\u7f6e\u6a21\u5f0f\");                    } else if (msg.contains(\"\u5f00\")) {                        sendAcCmd(sender, 1, 1, -1, -1, -1);                    } else if (msg.contains(\"\u5173\")) {                        sendAcCmd(sender, 1, 0, -1, -1, -1);                    } else if (msg.equals(\"\u81ea\u52a8\")) {                        sendAcCmd(sender, 1, -1, 0, -1, -1);                    } else if (msg.equals(\"\u5236\u51b7\")) {                        sendAcCmd(sender, 1, -1, 1, -1, -1);                    } else if (msg.equals(\"\u9664\u6e7f\")) {                        sendAcCmd(sender, 1, -1, 2, -1, -1);                    } else if (msg.equals(\"\u9001\u98ce\")) {                        sendAcCmd(sender, 1, -1, 3, -1, -1);                    } else if (msg.equals(\"\u5236\u70ed\")) {                        sendAcCmd(sender, 1, -1, 4, -1, -1);                    } else if (msg.equals(\"\u81ea\u52a8\u98ce\")) {                        sendAcCmd(sender, 1, -1, -1, -1, 0);                    } else if (msg.equals(\"\u4f4e\u98ce\")) {                        sendAcCmd(sender, 1, -1, -1, -1, 1);                    } else if (msg.equals(\"\u4e2d\u98ce\")) {                        sendAcCmd(sender, 1, -1, -1, -1, 2);                    } else if (msg.equals(\"\u9ad8\u98ce\")) {                        sendAcCmd(sender, 1, -1, -1, -1, 3);                    } else if (msg.matches(\"\\\\d+\")) {                        int i = Integer.parseInt(msg);                        if (i < 17 || i > 30) {                            sender.sendMessage(\"\u8f93\u5165\u9519\u8bef\uff01\u6e29\u5ea6\u8303\u56f4\uff1a17~30\");                        } else {                            sendAcCmd(sender, 1, -1, -1, i, -1);                        }                    }                }                if (msg.equals(\"\u5386\u53f2\u8bb0\u5f55\")) {                    String path = JChart.createPic(this.getDataFolder().getAbsolutePath() + \"/env/\");                    Image img = sender.uploadImage(new File(path));                    sender.sendMessage(img);                }            }        });    }", "url": "https://raw.githubusercontent.com/luzy99/IOT-Terminal/master/MqttTrans/src/main/java/com/m5go/plugin/MqttTransMain.java", "stars": "2", "class": {"name": "MqttTransMain", "extends": "PluginBase", "implements": null, "modifiers": []}}, {"method_name": "onKeyPress", "params": ["KeypressEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onKeyPress(KeypressEvent event) {        Mercury.INSTANCE.getModuleManager().getRegistry().values().forEach(m -> {            if (m.getBind() == event.getKey()) {                m.toggle();            }        });        if (event.getKey() == Keyboard.KEY_RSHIFT) {            if (guiCllck == null) {                guiCllck = new Menu();                guiCllck.init();            }            mc.displayGuiScreen(guiCllck);        }        if (event.getKey() == Keyboard.KEY_GRAVE) {            if (guiHud == null) {                guiHud = new GuiHud();            }            mc.displayGuiScreen(guiHud);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/persistent/KeyBinds.java", "stars": "12", "class": {"name": "KeyBinds", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "initCapabilities", "params": ["ItemStack", "NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "ICapabilityProvider", "snippet": "    public ICapabilityProvider initCapabilities(ItemStack stack, @Nullable NBTTagCompound nbt) {        return new EVEStorageItem(stack, hueRange, brightRange, capacity);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseItemEveBase.java", "stars": "2", "class": {"name": "PhaseItemEveBase", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getShowState", "params": ["ItemStack"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean getShowState(ItemStack stack) {        return !Minecraft.getMinecraft().player.isSneaking() && DataHelper.getEVEFromStack(stack).getSaturation() > 0;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseItemEveBase.java", "stars": "2", "class": {"name": "PhaseItemEveBase", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRGBDurabilityForDisplay", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getRGBDurabilityForDisplay(ItemStack stack) {        return getShowState(stack) ? DataHelper.getEVEFromStack(stack).getColor() : super.getRGBDurabilityForDisplay(stack);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseItemEveBase.java", "stars": "2", "class": {"name": "PhaseItemEveBase", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDurabilityForDisplay", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getDurabilityForDisplay(ItemStack stack) {        return getShowState(stack) ? 1f - DataHelper.getEVEFromStack(stack).getSaturation() : super.getDurabilityForDisplay(stack);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseItemEveBase.java", "stars": "2", "class": {"name": "PhaseItemEveBase", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "showDurabilityBar", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean showDurabilityBar(ItemStack stack) {        return getShowState(stack) || super.showDurabilityBar(stack);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseItemEveBase.java", "stars": "2", "class": {"name": "PhaseItemEveBase", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {        EntityUtil.resetTimer();        mc.player.setVelocity(0, 0, 0);        this.moveSpeed = MotionUtil.getBaseMoveSpeed();        this.lastDist = 0;        if (noclip)            mc.player.noClip = false;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Flight.java", "stars": "12", "class": {"name": "Flight", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        level = 0;        if (this.mode.equalsIgnoreCase(\"packet\")) {            if (mc.world != null) {                this.teleportId = 0;                this.packets.clear();                final CPacketPlayer bounds = new CPacketPlayer.Position(mc.player.posX, mc.player.posY <= 10 ? 255 : 1, mc.player.posZ, mc.player.onGround);                this.packets.add(bounds);                mc.player.connection.sendPacket(bounds);            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Flight.java", "stars": "12", "class": {"name": "Flight", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (mode.equalsIgnoreCase(\"damage\")) {            if (event.getTiming().equals(EventTiming.PRE)) {                mc.player.motionY = 0;                double motionY = 0.42f;                if (mc.player.onGround) {                    if (mc.player.isPotionActive(MobEffects.JUMP_BOOST)) {                        motionY += (mc.player.getActivePotionEffect(MobEffects.JUMP_BOOST).getAmplifier() + 1) * 0.1f;                    }                    event.getLocation().setY(mc.player.motionY = motionY);                    this.moveSpeed *= 2.149;                }            }            if (mc.player.ticksExisted % 2 == 0) {                mc.player.setPosition(mc.player.posX, mc.player.posY + MathUtil.getRandom(1.2354235325235235E-14, 1.2354235325235233E-13), mc.player.posZ);            }            if (mc.gameSettings.keyBindJump.isKeyDown())                mc.player.motionY += speed / 2;            if (mc.gameSettings.keyBindSneak.isKeyDown())                mc.player.motionY -= speed / 2;        }        if (mode.equalsIgnoreCase(\"Normal\")) {            if (mc.gameSettings.keyBindJump.isKeyDown()) {                mc.player.motionY = speed;            } else if (mc.gameSettings.keyBindSneak.isKeyDown()) {                mc.player.motionY = -speed;            } else {                mc.player.motionY = 0;            }            if (antikick) {                if (mc.player.ticksExisted % 5 == 0) {                    event.getLocation().setY(event.getLocation().getY() - 0.03125D);                    event.getLocation().setOnGround(true);                }            }            double[] dir = MotionUtil.forward(speed);            mc.player.motionX = dir[0];            mc.player.motionZ = dir[1];        }        if (mode.equalsIgnoreCase(\"packet\")) {            if (this.teleportId <= 0) {                final CPacketPlayer bounds = new CPacketPlayer.Position(mc.player.posX, mc.player.posY <= 10 ? 255 : 1, mc.player.posZ, mc.player.onGround);                this.packets.add(bounds);                mc.player.connection.sendPacket(bounds);                return;            }            mc.player.setVelocity(0,0,0);            double posY = -0.00000001;            if (!mc.gameSettings.keyBindJump.isKeyDown() && !mc.gameSettings.keyBindSneak.isKeyDown()){                if (MotionUtil.isMoving(mc.player)) {                    for (double x = 0.0625; x < this.speed; x += 0.262) {                        final double[] dir = MotionUtil.forward(x);                        mc.player.setVelocity(dir[0], posY, dir[1]);                        move(dir[0], posY, dir[1]);                    }                 //   if (mc.player.ticksExisted % 5 == 0)                  //      mc.player.motionY -= 0.03125D;                }            } else {                if (mc.gameSettings.keyBindJump.isKeyDown()) {                    for (int i = 0; i <= 3; i++) {                        //mc.player.getEntityBoundingBox().offset(0, 0.10000545, 0);                        mc.player.setVelocity(0, mc.player.ticksExisted % 20 == 0 ? -0.04f : 0.062f * i, 0);                        move(0, mc.player.ticksExisted % 20 == 0 ? -0.04f : 0.062f * i, 0);                    }                } else if (mc.gameSettings.keyBindSneak.isKeyDown()){                    for (int i = 0; i <= 3; i++) {                        mc.player.setVelocity(0, posY - 0.0625 * i, 0);                        move(0, posY - 0.0625 * i, 0);                    }                }            }            //mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX + mc.player.motionX, 0.0, mc.player.posZ + mc.player.motionZ, true));        }        if (mode.equalsIgnoreCase(\"slowpacket\")) {            double posX = mc.player.posX;            double posY = mc.player.posY;            double posZ = mc.player.posZ;            boolean ground = mc.player.onGround;            mc.player.setVelocity(0,0,0);                if (!mc.gameSettings.keyBindJump.isKeyDown() && !mc.gameSettings.keyBindSneak.isKeyDown()) {                    double[] dir = MotionUtil.forward(0.0625);                    mc.player.connection.sendPacket(new CPacketPlayer.Position(posX + dir[0], posY, posZ + dir[1], ground));                    //mc.player.setVelocity(dir[0],0,dir[1]);                    mc.player.setPositionAndUpdate(posX + dir[0], posY, posZ + dir[1]);                } else {                    if (mc.gameSettings.keyBindJump.isKeyDown()) {                        mc.player.connection.sendPacket(new CPacketPlayer.Position(posX, posY + 0.0625, posZ, ground));                        //mc.player.setVelocity(0,0.0625,0);                        mc.player.setPositionAndUpdate(posX, posY + 0.0625, posZ);                    } else if (mc.gameSettings.keyBindSneak.isKeyDown()) {                        mc.player.connection.sendPacket(new CPacketPlayer.Position(posX, posY - 0.0625, posZ, ground));                        //mc.player.setVelocity(0,-0.0625,0);                        mc.player.setPositionAndUpdate(posX, posY - 0.0625, posZ);                    }                }                mc.player.connection.sendPacket(new CPacketPlayer.Position(posX + mc.player.motionX, mc.player.posY <= 10 ? 255 : 1, posZ + mc.player.motionZ, ground));            /*if (this.teleportId <= 0) {                final CPacketPlayer bounds = new CPacketPlayer.Position(mc.player.posX, mc.player.posY <= 10 ? 255 : 1, mc.player.posZ, mc.player.onGround);                this.packets.add(bounds);                mc.player.connection.sendPacket(bounds);                return;            }            mc.player.setVelocity(0,0,0);            double posY = -0.00000001;            if (!mc.gameSettings.keyBindJump.isKeyDown() && !mc.gameSettings.keyBindSneak.isKeyDown()){                if (MotionUtil.isMoving(mc.player)) {                    final double[] dir = MotionUtil.forward(0.0625);                    mc.player.setVelocity(dir[0], posY, dir[1]);                    move(dir[0], posY, dir[1]);                    //   if (mc.player.ticksExisted % 5 == 0)                    //      mc.player.motionY -= 0.03125D;                }            } else {                if (mc.gameSettings.keyBindJump.isKeyDown()) {                    //mc.player.getEntityBoundingBox().offset(0, 0.10000545, 0);                    mc.player.setVelocity(0, 0.062f, 0);                    move(0, 0.062f, 0);                } else if (mc.gameSettings.keyBindSneak.isKeyDown()){                    mc.player.setVelocity(0, 0.0625, 0);                    move(0, 0.0625, 0);                }            }*/        }        if (mode.equalsIgnoreCase(\"delaypacket\")) {            if (delayTimer.hasReached(1000))                delayTimer.reset();            if (delayTimer.hasReached(600)) {                mc.player.setVelocity(0,0,0);                return;            }            if (this.teleportId <= 0) {                final CPacketPlayer bounds = new CPacketPlayer.Position(mc.player.posX, mc.player.posY <= 10 ? 255 : 1, mc.player.posZ, mc.player.onGround);                this.packets.add(bounds);                mc.player.connection.sendPacket(bounds);                return;            }            mc.player.setVelocity(0,0,0);            double posY = -0.00000001;            if (!mc.gameSettings.keyBindJump.isKeyDown() && !mc.gameSettings.keyBindSneak.isKeyDown()){                if (MotionUtil.isMoving(mc.player)) {                    final double[] dir = MotionUtil.forward(0.2);                    mc.player.setVelocity(dir[0], posY, dir[1]);                    move(dir[0], posY, dir[1]);                    //   if (mc.player.ticksExisted % 5 == 0)                    //      mc.player.motionY -= 0.03125D;                }            } else {                if (mc.gameSettings.keyBindJump.isKeyDown()) {                    //mc.player.getEntityBoundingBox().offset(0, 0.10000545, 0);                    mc.player.setVelocity(0, 0.062f, 0);                    move(0, 0.062f, 0);                } else if (mc.gameSettings.keyBindSneak.isKeyDown()){                    mc.player.setVelocity(0, 0.0625, 0);                    move(0, 0.0625, 0);                }            }        }        if (noclip)            mc.player.noClip = true;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Flight.java", "stars": "12", "class": {"name": "Flight", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMove", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMove(MotionEvent event) {        if (mode.equalsIgnoreCase(\"damage\")) {                        double forward = mc.player.movementInput.moveForward;                        double strafe = mc.player.movementInput.moveStrafe;                        final float yaw = mc.player.rotationYaw;                        if (forward == 0.0 && strafe == 0.0) {                            event.setX(0.0);                            event.setZ(0.0);                        }                        if (forward != 0.0 && strafe != 0.0) {                            forward *= Math.sin(0.7853981633974483);                            strafe *= Math.cos(0.7853981633974483);                        }                        if (this.level != 1 || (mc.player.moveForward == 0.0f && mc.player.moveStrafing == 0.0f)) {                            if (this.level == 2) {                                ++this.level;                            }                            else if (this.level == 3) {                                ++this.level;                                final double difference = (double)((((mc.player.ticksExisted % 2 == 0) ? -0.05 : 0.1)) * (this.lastDist - MotionUtil.getBaseMoveSpeed()));                                this.moveSpeed = this.lastDist - difference;                            }                            else {                                if (mc.world.getCollisionBoxes(mc.player, mc.player.getEntityBoundingBox().offset(0.0, mc.player.motionY, 0.0)).size() > 0 || mc.player.collidedVertically) {                                    this.level = 1;                                }                                this.moveSpeed = this.lastDist - this.lastDist / 159.0;                            }                        }                        else {                            this.level = 2;                            final double boost = mc.player.isPotionActive(MobEffects.SPEED) ? 1.86 : 2.05;                            this.moveSpeed = boost * MotionUtil.getBaseMoveSpeed() - 0.01;                        }                        this.moveSpeed = Math.max(this.moveSpeed, MotionUtil.getBaseMoveSpeed());                        final double mx = -Math.sin(Math.toRadians(yaw));                        final double mz = Math.cos(Math.toRadians(yaw));                        event.setX(forward * this.moveSpeed * mx + strafe * this.moveSpeed * mz);                        event.setZ(forward * this.moveSpeed * mz - strafe * this.moveSpeed * mx);                }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Flight.java", "stars": "12", "class": {"name": "Flight", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        switch (event.getType()) {            case INCOMING:                if (this.mode.equalsIgnoreCase(\"packet\") /*|| mode.equalsIgnoreCase(\"slowpacket\")*/ || mode.equalsIgnoreCase(\"delaypacket\")) {                    if (event.getPacket() instanceof SPacketPlayerPosLook) {                        final SPacketPlayerPosLook packet = (SPacketPlayerPosLook) event.getPacket();                        if (Minecraft.getMinecraft().player.isEntityAlive() && Minecraft.getMinecraft().world.isBlockLoaded(new BlockPos(Minecraft.getMinecraft().player.posX, Minecraft.getMinecraft().player.posY, Minecraft.getMinecraft().player.posZ)) && !(Minecraft.getMinecraft().currentScreen instanceof GuiDownloadTerrain)) {                            if (this.teleportId <= 0) {                                this.teleportId = packet.getTeleportId();                            } else {                                event.setCancelled(true);                            }                        }                    }                }                break;            case OUTGOING:                if (this.mode.equalsIgnoreCase(\"packet\") /*|| mode.equalsIgnoreCase(\"slowpacket\")*/ || mode.equalsIgnoreCase(\"delaypacket\")) {                    if (event.getPacket() instanceof CPacketPlayer && !(event.getPacket() instanceof CPacketPlayer.Position)) {                        event.setCancelled(true);                    }                    if (event.getPacket() instanceof CPacketPlayer) {                        final CPacketPlayer packet = (CPacketPlayer) event.getPacket();                        if (packets.contains(packet)) {                            packets.remove(packet);                            return;                        }                        event.setCancelled(true);                    }                }                break;        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Flight.java", "stars": "12", "class": {"name": "Flight", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCollision", "params": ["CollisionBoxEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCollision(CollisionBoxEvent event) {        if (noclip && event.getEntity() == mc.player)            event.setAABB(Block.NULL_AABB);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Flight.java", "stars": "12", "class": {"name": "Flight", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "move", "params": ["double", "double", "double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void move(double x, double y, double z) {        final Minecraft mc = Minecraft.getMinecraft();        final CPacketPlayer pos = new CPacketPlayer.Position(mc.player.posX + x, mc.player.posY + y, mc.player.posZ + z, mc.player.onGround);        this.packets.add(pos);        mc.player.connection.sendPacket(pos);        final CPacketPlayer bounds = new CPacketPlayer.Position(mc.player.posX + x, mc.player.posY <= 10 ? 255 : 1, mc.player.posZ + z, mc.player.onGround);        this.packets.add(bounds);        mc.player.connection.sendPacket(bounds);        this.teleportId++;        mc.player.connection.sendPacket(new CPacketConfirmTeleport(this.teleportId - 1));        mc.player.connection.sendPacket(new CPacketConfirmTeleport(this.teleportId));        mc.player.connection.sendPacket(new CPacketConfirmTeleport(this.teleportId + 1));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/movement/Flight.java", "stars": "12", "class": {"name": "Flight", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "verifier", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Map<TypeMasque,Integer>", "snippet": "    public Map<TypeMasque, Integer> verifier(String hashIdentite) {        String hashDemandeur = creerEmpreinteIdentite.creer(hashIdentite);        List<DistributionMasque> distributionMasques = distributionMasquePersistance.recupererParDemandeurSurLes15DerniersJours(hashDemandeur);        return recuperer(distributionMasques);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/domain/use_cases/RecupererDistributionsMasques.java", "stars": "5", "class": {"name": "RecupererDistributionsMasques", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recuperer", "params": ["List<DistributionMasque>"], "throws": null, "modifiers": ["private"], "return_type": "Map<TypeMasque,Integer>", "snippet": "    private Map<TypeMasque, Integer> recuperer(List<DistributionMasque> distributionMasques) {        return distributionMasques.stream()                .collect(                        Collectors.groupingBy(                                DistributionMasque::getTypeMasque,                                Collectors.summingInt(DistributionMasque::getNbMasques)                        )                );    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/domain/use_cases/RecupererDistributionsMasques.java", "stars": "5", "class": {"name": "RecupererDistributionsMasques", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroy() throws Exception {        for (GameInitializer txLcnInitializer : initializers) {            txLcnInitializer.destroy();        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/GameApplicationRunner.java", "stars": "1", "class": {"name": "GameApplicationRunner", "extends": null, "implements": ["ApplicationRunner", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["ApplicationArguments"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void run(ApplicationArguments args) throws Exception {        Map<String, GameInitializer> runnerMap = applicationContext.getBeansOfType(GameInitializer.class);        initializers = runnerMap.values().stream().sorted(Comparator.comparing(GameInitializer::order))                .collect(Collectors.toList());        for (GameInitializer txLcnInitializer : initializers) {            //\u8fd0\u884cnetty\u7684\u670d\u52a1\u5668            txLcnInitializer.init();        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/GameApplicationRunner.java", "stars": "1", "class": {"name": "GameApplicationRunner", "extends": null, "implements": ["ApplicationRunner", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "registerBuiltinActions", "params": ["Map<String,Class>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void registerBuiltinActions(      final Map<String, Class<? extends TriggerAction>> builtinActions) {    actionToClass.putAll(builtinActions);    for (final String type : builtinActions.keySet()) {      logger.info(\"Loaded \" + type + \" action.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/ActionTypeLoader.java", "stars": "18", "class": {"name": "ActionTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Props"], "throws": ["TriggerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void init(final Props props) throws TriggerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/ActionTypeLoader.java", "stars": "18", "class": {"name": "ActionTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerActionType", "params": ["String", "Class<TriggerAction>"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void registerActionType(final String type,      final Class<? extends TriggerAction> actionClass) {    logger.info(\"Registering action \" + type);    if (!actionToClass.containsKey(type)) {      actionToClass.put(type, actionClass);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/ActionTypeLoader.java", "stars": "18", "class": {"name": "ActionTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createActionFromJson", "params": ["String", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "TriggerAction", "snippet": "  public TriggerAction createActionFromJson(final String type, final Object obj)      throws Exception {    TriggerAction action = null;    final Class<? extends TriggerAction> actionClass = actionToClass.get(type);    if (actionClass == null) {      throw new Exception(\"Action Type \" + type + \" not supported!\");    }    action =        (TriggerAction) Utils.invokeStaticMethod(actionClass.getClassLoader(),            actionClass.getName(), \"createFromJson\", obj);    return action;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/ActionTypeLoader.java", "stars": "18", "class": {"name": "ActionTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createAction", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "TriggerAction", "snippet": "  public TriggerAction createAction(final String type, final Object... args) {    TriggerAction action = null;    final Class<? extends TriggerAction> actionClass = actionToClass.get(type);    action = (TriggerAction) Utils.callConstructor(actionClass, args);    return action;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/ActionTypeLoader.java", "stars": "18", "class": {"name": "ActionTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSupportedActions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getSupportedActions() {    return actionToClass.keySet();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/ActionTypeLoader.java", "stars": "18", "class": {"name": "ActionTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efa\u9501\u5bf9\u8c61\uff0c\u4fdd\u8bc1\u552f\u4e00        Object obj = new Object();        //\u521b\u5efa\u4e00\u4e2a\u987e\u5ba2\uff08\u6d88\u8d39\u8005\uff09\u7ebf\u7a0b        new Thread(){            @Override            public void run() {                while (true) {                    //\u4fdd\u8bc1\u7b49\u5f85\u548c\u5524\u9192\u7684\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u6267\u884c\uff0c\u9700\u8981\u4f7f\u7528\u540c\u6b65\u6280\u672f                    synchronized (obj) {                        System.out.println(\"\u544a\u77e5\u8001\u677f\u8981\u7684\u5305\u5b50\u79cd\u7c7b\u548c\u6570\u91cf\");                        //\u8c03\u7528wait\u65b9\u6cd5\uff0c\u653e\u5f03cpu\u7684\u6267\u884c\uff0c\u8fdb\u5165\u5230WAITING\u72b6\u6001\uff08\u65e0\u9650\u7b49\u5f85\uff09                        try {                            obj.wait();                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                        //\u5524\u9192\u4e4b\u540e\u6267\u884c\u7684\u4ee3\u7801                        System.out.println(\"\u5305\u5b50\u505a\u597d\u4e86\uff0c\u5f00\u5403\uff01\");                        System.out.println(\"---------------------\");                    }                }            }        }.start();        //\u521b\u5efa\u4e00\u4e2a\u8001\u677f\u7ebf\u7a0b\uff08\u751f\u4ea7\u8005\uff09        new Thread(){            @Override            public void run() {                while (true) {                    //\u82b1\u4e865\u79d2\u505a\u5305\u5b50                    try {                        Thread.sleep(5000);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    synchronized (obj) {                        System.out.println(\"\u8001\u677f5\u79d2\u949f\u4e4b\u540e\u505a\u597d\u5305\u5b50\uff0c\u544a\u77e5\u987e\u5ba2\uff0c\u53ef\u4ee5\u5403\u5305\u5b50\u4e86\");                        obj.notify();                    }                }            }        }.start();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/Wait/WaitWake.java", "stars": "2", "class": {"name": "WaitWake", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        /*            Person\u7c7b\u9ed8\u8ba4\u7ee7\u627f\u4e86Object\u7c7b,\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528Object\u7c7b\u4e2d\u7684toString\u65b9\u6cd5            String toString() \u8fd4\u56de\u8be5\u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002         */        Person p = new Person(\"\u5f20\u4e09\",18);        String s = p.toString();        System.out.println(s);//com.itheima.demo01.Object.Person@75412c2f | abc | Person{name=\u5f20\u4e09 ,age=18}        //\u76f4\u63a5\u6253\u5370\u5bf9\u8c61\u7684\u540d\u5b57,\u5176\u5b9e\u5c31\u662f\u8c03\u7528\u5bf9\u8c61\u7684toString  p=p.toString();        System.out.println(p);//com.itheima.demo01.Object.Person@5f150435 | abc | Person{name=\u5f20\u4e09 ,age=18}        //\u770b\u4e00\u4e2a\u7c7b\u662f\u5426\u91cd\u5199\u4e86toString,\u76f4\u63a5\u6253\u5370\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u5373\u53ef,\u5982\u679c\u6ca1\u6709\u91cd\u5199toString\u65b9\u6cd5\u90a3\u4e48\u6253\u5370\u7684\u662f\u5bf9\u8c61\u7684\u5730\u5740\u503c        Random r = new Random();        System.out.println(r);//java.util.Random@3f3afe78  \u6ca1\u6709\u91cd\u5199toString\u65b9\u6cd5        Scanner sc = new Scanner(System.in);        System.out.println(sc);//java.util.Scanner[delimiters=\\p{javaWhitespace}+..  \u91cd\u5199toString\u65b9\u6cd5        ArrayList<Integer> list = new ArrayList<>();        list.add(1);        list.add(2);        list.add(3);        System.out.println(list);//[1, 2, 3]  \u91cd\u5199toString\u65b9\u6cd5    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo01/Object/Demo01ToString.java", "stars": "2", "class": {"name": "Demo01ToString", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sort", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void sort(int[] arr) {\t\tint min ;\t\tint temp ;\t\tfor(int i = 0;i < arr.length;i++) {\t\t\tmin = i;\t\t\tfor(int j = i+1;j < arr.length;j++) {\t\t\t\tif(arr[j] < arr[min]) {\t\t\t\t\ttemp =arr[min];\t\t\t\t\tarr[min] = arr[j];\t\t\t\t\tarr[j] = temp; \t\t\t\t}\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/likith22/DataStructures/master/SelectionSort.java", "stars": "2", "class": {"name": "SelectionSort", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEnabled() {        return this.enabled;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/events/ToggleSubtitleEvent.java", "stars": "4", "class": {"name": "ToggleSubtitleEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\t\t\tSystem.setProperty(ChromeDriverService.CHROME_DRIVER_SILENT_OUTPUT_PROPERTY, \"true\");\t// System.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\tWebDriver driver = new ChromeDriver();\tString url = \"https://www.seleniumeasy.com/test/basic-select-dropdown-demo.html\";\tdriver.get(url);\t\t// 1. single DropDown  (select only one)\t// If there is a select tag, Use select class\t\tWebElement days= driver.findElement(By.id(\"select-demo\"));\tSelect select= new Select(days);\t\t// Select class allows us to use the dd in 3 ways\t//1. Select By index\t//2. Select by visible Text\t//3. select value (Attribute)\t\t// getOptions()\tList<WebElement> optionsOfDays= select.getOptions();\tSystem.out.println(optionsOfDays.size());\t\tThread.sleep(2000);\tselect.selectByIndex(3);  // Tuesday\tThread.sleep(2000);\tselect.selectByVisibleText(\"Thursday\"); //Thursday\tThread.sleep(2000);\tselect.selectByValue(\"Friday\"); // Friday\t\t//isMultiple()\t\tboolean isDayMultiple= select.isMultiple(); // True: multiple, False: single\tSystem.out.println(isDayMultiple);\t\t// de selecting is not allowed\t\t\t// 2. single DropDown  (can select more than one)\t\tdriver.quit();\t\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class4/DropDowns.java", "stars": "3", "class": {"name": "DropDowns", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addCommonFlowProperties", "params": ["Props", "ExecutableFlowBase"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props addCommonFlowProperties(final Props parentProps,      final ExecutableFlowBase flow) {    final Props props = new Props(parentProps);    props.put(CommonJobProperties.FLOW_ID, flow.getFlowId());    props.put(CommonJobProperties.EXEC_ID, flow.getExecutionId());    props.put(CommonJobProperties.PROJECT_ID, flow.getProjectId());    props.put(CommonJobProperties.PROJECT_NAME, flow.getProjectName());    props.put(CommonJobProperties.PROJECT_VERSION, flow.getVersion());    props.put(CommonJobProperties.FLOW_UUID, UUID.randomUUID().toString());    props.put(CommonJobProperties.PROJECT_LAST_CHANGED_BY, flow.getLastModifiedByUser());    props.put(CommonJobProperties.PROJECT_LAST_CHANGED_DATE, flow.getLastModifiedTimestamp());    props.put(CommonJobProperties.SUBMIT_USER, flow.getExecutableFlow().getSubmitUser());    final DateTime loadTime = new DateTime();    props.put(CommonJobProperties.FLOW_START_TIMESTAMP, loadTime.toString());    props.put(CommonJobProperties.FLOW_START_YEAR, loadTime.toString(\"yyyy\"));    props.put(CommonJobProperties.FLOW_START_MONTH, loadTime.toString(\"MM\"));    props.put(CommonJobProperties.FLOW_START_DAY, loadTime.toString(\"dd\"));    props.put(CommonJobProperties.FLOW_START_HOUR, loadTime.toString(\"HH\"));    props.put(CommonJobProperties.FLOW_START_MINUTE, loadTime.toString(\"mm\"));    props.put(CommonJobProperties.FLOW_START_SECOND, loadTime.toString(\"ss\"));    props.put(CommonJobProperties.FLOW_START_MILLISSECOND,        loadTime.toString(\"SSS\"));    props.put(CommonJobProperties.FLOW_START_TIMEZONE,        loadTime.toString(\"ZZZZ\"));    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyDisabledJobs", "params": ["List<Object>", "ExecutableFlowBase"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void applyDisabledJobs(final List<Object> disabledJobs,      final ExecutableFlowBase exflow) {    for (final Object disabled : disabledJobs) {      if (disabled instanceof String) {        final String nodeName = (String) disabled;        final ExecutableNode node = exflow.getExecutableNode(nodeName);        if (node != null) {          node.setStatus(Status.DISABLED);        }      } else if (disabled instanceof Map) {        final Map<String, Object> nestedDisabled = (Map<String, Object>) disabled;        final String nodeName = (String) nestedDisabled.get(\"id\");        final List<Object> subDisabledJobs =            (List<Object>) nestedDisabled.get(\"children\");        if (nodeName == null || subDisabledJobs == null) {          return;        }        final ExecutableNode node = exflow.getExecutableNode(nodeName);        if (node != null && node instanceof ExecutableFlowBase) {          applyDisabledJobs(subDisabledJobs, (ExecutableFlowBase) node);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resetJobDisabled", "params": ["List<Object>", "ExecutableFlowBase"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void resetJobDisabled(final List<Object> disabledJobs,                                       final ExecutableFlowBase exflow) {    for (final Object disabled : disabledJobs) {      if (disabled instanceof String) {        final String nodeName = (String) disabled;        final ExecutableNode node = exflow.getExecutableNode(nodeName);        if (node != null && node.getStatus().equals(Status.CANCELLED)) {          logger.info(\"reset job {} status {} to DISABLED.\", node.getNestedId(), node.getStatus());          node.setStatus(Status.DISABLED);          node.setEndTime(-1);          node.setStartTime(-1);          node.setUpdateTime(System.currentTimeMillis());        }      } else if (disabled instanceof Map) {        final Map<String, Object> nestedDisabled = (Map<String, Object>) disabled;        final String nodeName = (String) nestedDisabled.get(\"id\");        final List<Object> subDisabledJobs =            (List<Object>) nestedDisabled.get(\"children\");        if (nodeName == null || subDisabledJobs == null) {          return;        }        final ExecutableNode node = exflow.getExecutableNode(nodeName);        if (node != null && node instanceof ExecutableFlowBase) {          resetJobDisabled(subDisabledJobs, (ExecutableFlowBase) node);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProject", "params": ["ProjectManager", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Project", "snippet": "  public static Project getProject(final ProjectManager projectManager, final int projectId) {    final Project project = projectManager.getProject(projectId);    if (project == null) {      throw new RuntimeException(\"Error finding the project to execute \"          + projectId);    }    return project;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlow", "params": ["Project", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Flow", "snippet": "  public static Flow getFlow(final Project project, final String flowName) {    final Project nonNullProj = requireNonNull(project);    final Flow flow = nonNullProj.getFlow(flowName);    if (flow == null) {      throw new RuntimeException(\"Error finding the flow to execute \" + flowName);    }    return flow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createExecutableFlow", "params": ["Project", "Flow"], "throws": null, "modifiers": ["public", "static"], "return_type": "ExecutableFlow", "snippet": "  public static ExecutableFlow createExecutableFlow(final Project project, final Flow flow) {    final ExecutableFlow exflow = new ExecutableFlow(project, flow);    exflow.addAllProxyUsers(project.getProxyUsers());    return exflow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJson", "params": ["Project"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String toJson(final Project proj) {    final Gson gson = new Gson();    final String jsonStr = gson.toJson(proj);    return jsonStr;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toProject", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Project", "snippet": "  public static Project toProject(final String json) {    final Gson gson = new Gson();    return gson.fromJson(json, Project.class);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addRepeatCommonFlowProperties", "params": ["Props", "long", "ExecutableFlowBase"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props addRepeatCommonFlowProperties(final Props parentProps,      final long repeatTime,      final ExecutableFlowBase flow) {    final Props props = new Props(parentProps);    props.put(CommonJobProperties.FLOW_ID, flow.getFlowId());    props.put(CommonJobProperties.EXEC_ID, flow.getExecutionId());    props.put(CommonJobProperties.PROJECT_ID, flow.getProjectId());    props.put(CommonJobProperties.PROJECT_NAME, flow.getProjectName());    props.put(CommonJobProperties.PROJECT_VERSION, flow.getVersion());    props.put(CommonJobProperties.FLOW_UUID, UUID.randomUUID().toString());    props.put(CommonJobProperties.PROJECT_LAST_CHANGED_BY, flow.getLastModifiedByUser());    props.put(CommonJobProperties.PROJECT_LAST_CHANGED_DATE, flow.getLastModifiedTimestamp());    props.put(CommonJobProperties.SUBMIT_USER, flow.getExecutableFlow().getSubmitUser());    final DateTime loadTime = new DateTime(repeatTime);    props.put(CommonJobProperties.FLOW_START_TIMESTAMP, loadTime.toString());    props.put(CommonJobProperties.FLOW_START_YEAR, loadTime.toString(\"yyyy\"));    props.put(CommonJobProperties.FLOW_START_MONTH, loadTime.toString(\"MM\"));    props.put(CommonJobProperties.FLOW_START_DAY, loadTime.toString(\"dd\"));    props.put(CommonJobProperties.FLOW_START_HOUR, loadTime.toString(\"HH\"));    props.put(CommonJobProperties.FLOW_START_MINUTE, loadTime.toString(\"mm\"));    props.put(CommonJobProperties.FLOW_START_SECOND, loadTime.toString(\"ss\"));    props.put(CommonJobProperties.FLOW_START_MILLISSECOND,        loadTime.toString(\"SSS\"));    props.put(CommonJobProperties.FLOW_START_TIMEZONE,        loadTime.toString(\"ZZZZ\"));    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFailedNodeList", "params": ["ExecutableFlowBase", "List<ExecutableNode>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void getAllFailedNodeList(ExecutableFlowBase node, List<ExecutableNode> executableNodeList){    for(ExecutableNode execNode: node.getExecutableNodes()){      if(execNode instanceof ExecutableFlowBase){        getAllFailedNodeList((ExecutableFlowBase) execNode, executableNodeList);      } else if(execNode instanceof ExecutableNode) {        if(Status.isFailed(execNode.getStatus())){          executableNodeList.add(execNode);        }      }    }    return;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFailedNodeNestIdSortByEndTime", "params": ["List<ExecutableNode>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "  public static List<String> getAllFailedNodeNestIdSortByEndTime(List<ExecutableNode> nodeList){    return nodeList.stream().sorted(new Comparator<ExecutableNode>() {      @Override      public int compare(ExecutableNode o1, ExecutableNode o2) {        if(o1.getEndTime() < o2.getEndTime()){          return -1;        } else if(o1.getEndTime() == o2.getEndTime()){          return 0;        }        return 1;      }    }).map(x -> x.getNestedId()).collect(Collectors.toList());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThreeFailedNodeNestId", "params": ["List<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "  public static List<String> getThreeFailedNodeNestId(List<String> list){    if(list.size() > 3){      return list.subList(0, 3);    } else {      return list;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/FlowUtils.java", "stars": "18", "class": {"name": "FlowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onOutlineActive", "params": ["Entity", "Entity", "ICamera", "CallbackInfoReturnable<Boolean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onOutlineActive(Entity entityIn, Entity viewer, ICamera camera, CallbackInfoReturnable<Boolean> cir) {        OutlineEvent event = new OutlineEvent(entityIn);        Mercury.INSTANCE.getEventManager().fireEvent(event);        if (event.isCancelled()) {            cir.setReturnValue(true);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinRenderGlobal.java", "stars": "12", "class": {"name": "MixinRenderGlobal", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "flush", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean flush() {        this.ticket = null;        return true;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/security/SecurityTicketParser.java", "stars": "2", "class": {"name": "SecurityTicketParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "parse", "params": ["IMessageDataWrapper"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean parse(IMessageDataWrapper wrapper) {        if(wrapper == null) return false;        this.ticket = wrapper.readString();        return true;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/security/SecurityTicketParser.java", "stars": "2", "class": {"name": "SecurityTicketParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "getTicket", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTicket() {        return this.ticket;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/security/SecurityTicketParser.java", "stars": "2", "class": {"name": "SecurityTicketParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result = \"\";\t\tresult += super.generateCode();\t\t\t\tString label_debut = \"_while_label_debut__\" + this.getId();\t\tString label_then = \"_while_label_then__\" + this.getId();\t\tString label_fin = \"_while_label_fin__\" + this.getId();\t\tresult += tab() + label_debut + \": {\" + NL;\t\t\tincIndent();\t\t\tresult += tab() + \"if (\" + test.generateCode() + \")\" + NL;\t\t\t\tincIndent();\t\t\t\tresult += tab() + \"goto \" + label_then + \";\" + NL;\t\t\t\tdecIndent();\t\t\tresult += tab() + \"else\" + NL;\t\t\t\tincIndent();\t\t\t\tresult += tab() + \"goto \" + label_fin + \";\" + NL;\t\t\t\tdecIndent();\t\t\t\t\t\tresult += tab() + label_then + \": {\" + NL;\t\t\t\tincIndent();\t\t\t\tresult += getSon().generateCode();\t\t\t\tresult += tab() + \"goto \" + label_debut + \";\" + NL;\t\t\t\tdecIndent();\t\t\tresult += tab() + \"}\" + NL;\t\t\t\t\t\tdecIndent();\t\tresult += tab() + \"}\" + NL;\t\t\t\tresult += tab() + label_fin + \": { }\" + NL;\t\t\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmWHILE.java", "stars": "3", "class": {"name": "StmWHILE", "extends": "StmUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\ttest.checkType();\t\tif (this.getSon() != null)\t\t\tgetSon().checkType();\t\ttest.getType().assertType(this, TypeCode.BOOLEAN);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmWHILE.java", "stars": "3", "class": {"name": "StmWHILE", "extends": "StmUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"while (\"+ test + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmWHILE.java", "stars": "3", "class": {"name": "StmWHILE", "extends": "StmUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDependencyPluginManager", "params": ["Props"], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["public"], "return_type": "FlowTriggerDependencyPluginManager", "snippet": "  public FlowTriggerDependencyPluginManager getDependencyPluginManager(final Props props)      throws FlowTriggerDependencyPluginException {    //todo chengren311: disable requireNonNull for now in beta since dependency plugin dir is not    // required. Add it back when flow trigger feature is enabled in production    String dependencyPluginDir;    try {      dependencyPluginDir = props.getString(ConfigurationKeys.DEPENDENCY_PLUGIN_DIR);    } catch (final Exception ex) {      dependencyPluginDir = null;    }    return new FlowTriggerDependencyPluginManager(dependencyPluginDir);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java", "stars": "18", "class": {"name": "AzkabanWebServerModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void configure() {    bind(Server.class).toProvider(WebServerProvider.class);    bind(ScheduleLoader.class).to(TriggerBasedScheduleLoader.class);    bind(FlowTriggerInstanceLoader.class).to(JdbcFlowTriggerInstanceLoaderImpl.class);    bind(ExecutorManagerAdapter.class).to(resolveExecutorManagerAdaptorClassType());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java", "stars": "18", "class": {"name": "AzkabanWebServerModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveExecutorManagerAdaptorClassType", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Class<ExecutorManagerAdapter>", "snippet": "  private Class<? extends ExecutorManagerAdapter> resolveExecutorManagerAdaptorClassType() {    if(props.getBoolean(ConfigurationKeys.AZKABAN_POLL_MODEL, false)){      return ExecutionController.class;    }else if(props.getBoolean(ConfigurationKeys.WEBSERVER_HA_MODEL, false)){      return ExecutorManagerHA.class;    }else{      return ExecutorManager.class;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java", "stars": "18", "class": {"name": "AzkabanWebServerModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "createVelocityEngine", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "VelocityEngine", "snippet": "  public VelocityEngine createVelocityEngine(final Props props) {    final boolean devMode = props.getBoolean(VELOCITY_DEV_MODE_PARAM, false);    final VelocityEngine engine = new VelocityEngine();    engine.setProperty(\"resource.loader\", \"classpath, jar\");    engine.setProperty(\"classpath.resource.loader.class\",        ClasspathResourceLoader.class.getName());    engine.setProperty(\"classpath.resource.loader.cache\", !devMode);    engine.setProperty(\"classpath.resource.loader.modificationCheckInterval\",        5L);    engine.setProperty(\"jar.resource.loader.class\",        JarResourceLoader.class.getName());    engine.setProperty(\"jar.resource.loader.cache\", !devMode);    engine.setProperty(\"resource.manager.logwhenfound\", false);    engine.setProperty(\"input.encoding\", \"UTF-8\");    engine.setProperty(\"output.encoding\", \"UTF-8\");    engine.setProperty(\"directive.set.null.allowed\", true);    engine.setProperty(\"resource.manager.logwhenfound\", false);    engine.setProperty(\"velocimacro.permissions.allow.inline\", true);    engine.setProperty(\"velocimacro.library.autoreload\", devMode);    engine.setProperty(\"velocimacro.library\",        \"/azkaban/webapp/servlet/velocity/macros.vm\");    engine.setProperty(        \"velocimacro.permissions.allow.inline.to.replace.global\", true);    engine.setProperty(\"velocimacro.arguments.strict\", true);    engine.setProperty(\"runtime.log.invalid.references\", devMode);    engine.setProperty(\"runtime.log.logsystem.class\", Log4JLogChute.class);    engine.setProperty(\"runtime.log.logsystem.log4j.logger\",        Logger.getLogger(\"org.apache.velocity.Logger\"));    engine.setProperty(\"parser.pool.size\", 3);    return engine;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java", "stars": "18", "class": {"name": "AzkabanWebServerModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatch", "params": ["Computer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispatch(Computer computer) {        computer.setRunningStatus(Computer.STATUS_RUNNING);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/ResumeEvent.java", "stars": "4", "class": {"name": "ResumeEvent", "extends": "EmulatorEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        if (nettyProperties.isEnableMqtt() || nettyProperties.isEnableTcp()) {            mainGroup = new NioEventLoopGroup(1);            subGroup = new NioEventLoopGroup();            handlerGroup = new NioEventLoopGroup();        }        if (nettyProperties.isEnableMqtt()) {            startMqtt();        }        if (nettyProperties.isEnableTcp()) {            startTcp();        }    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/NettyAutoConfiguration.java", "stars": "6", "class": {"name": "NettyAutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startMqtt", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startMqtt() {        // \u626b\u63cfmqtt\u4e1a\u52a1\u5904\u7406\u5668        applicationContext.getBeansOfType(MqttHandler.class).values().forEach(MqttHandlerProcessor::registerHandler);        ServerBootstrap serverBootstrap = new ServerBootstrap();        serverBootstrap.group(mainGroup, subGroup)                .channel(NioServerSocketChannel.class)                .handler(new LoggingHandler(LogLevel.DEBUG))                .childHandler(new ChannelInitializer<SocketChannel>() {                    @Override                    protected void initChannel(SocketChannel ch) throws Exception {                        ch.pipeline().addLast(MqttEncoder.INSTANCE);                        ch.pipeline().addLast(new MqttDecoder());                        ch.pipeline().addLast(new IdleStateHandler(45, 0, 0, TimeUnit.SECONDS));                        ch.pipeline().addLast(handlerGroup, new NettyMqttHandler());                    }                });        serverBootstrap.bind(nettyProperties.getMqttPort()).sync();        log.info(\"Netty on port: {} (mqtt) \", nettyProperties.getMqttPort());    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/NettyAutoConfiguration.java", "stars": "6", "class": {"name": "NettyAutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startTcp", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startTcp() {        // \u626b\u63cftcp\u534f\u8bae\u5305        PackageFactory.scanPackage(\"com.github.taoroot.taoiot.netty.tcp.pkg\");        // \u626b\u7801tcp\u5904\u7406\u5668        applicationContext.getBeansOfType(PackageHandler.class).values().forEach(PackageHandlerProcessor::registerHandler);        ServerBootstrap serverBootstrap = new ServerBootstrap();        serverBootstrap.group(mainGroup, subGroup)                .channel(NioServerSocketChannel.class)                .handler(new LoggingHandler(LogLevel.DEBUG))                .childHandler(new ChannelInitializer<SocketChannel>() {                    @Override                    protected void initChannel(SocketChannel ch) {                        ChannelPipeline pipeline = ch.pipeline();                        pipeline.addLast(new LoggingHandler(LogLevel.DEBUG));                    }                });        serverBootstrap.bind(nettyProperties.getTcpPort()).sync();        log.info(\"Netty on port: {} (tcp) \", nettyProperties.getTcpPort());    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/NettyAutoConfiguration.java", "stars": "6", "class": {"name": "NettyAutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void stop() {        if (mainGroup != null) {            mainGroup.shutdownGracefully().sync();        }        if (subGroup != null) {            subGroup.shutdownGracefully().sync();        }        if (handlerGroup != null) {            handlerGroup.shutdownGracefully().sync();        }        log.info(\"Netty stopped\");    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/NettyAutoConfiguration.java", "stars": "6", "class": {"name": "NettyAutoConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        initStage();    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initStage", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initStage() {        menu = new StageMenu(messageService);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeUser(String username) {        UserBo userBo = onlineUserService.get(username);        if (userBo == null) {            return;        }        BaseStage stage = currentStage(userBo);        if (stage == null) {            return;        }        onlineUserService.remove(username);        stage.remove(username);        sendUserStatusAndMessage(username, true);        //\u623f\u95f4\u4e3a\u7a7a\u65f6\u5220\u9664\u623f\u95f4        if (!(stage instanceof StageRoom)) {            return;        }        StageRoom room = (StageRoom) stage;        if (room.getUserCount() != 0) {            return;        }        log.info(\"room:{} will be removed\", room.getRoomId());        roomService.remove(room);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "receiveMessage", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void receiveMessage(MessageDto messageDto, String sendFrom) {        //\u65b0\u7528\u6237\u52a0\u5165\u65f6\u5904\u7406\uff0c\u4e0d\u9700\u8981\u68c0\u67e5\u7528\u6237\u662f\u5426\u5b58\u5728        if (messageDto.getMessageType() == MessageType.CLIENT_READY) {            processNewUserReady(messageDto, sendFrom);            return;        }        UserBo userBo = userCheckAndGetSendFrom(messageDto, sendFrom);        if (userBo == null) {            return;        }        log.info(\"receive:{} from user:{}\", messageDto.toString(), sendFrom);        switch (messageDto.getMessageType()) {            case USER_MESSAGE:                processUserMessage(messageDto, sendFrom);                break;            case CREATE_ROOM:                createRoom(messageDto, sendFrom);                break;            case JOIN_ROOM:                joinRoom(messageDto, sendFrom);            default:                currentStage(userBo).processMessage(messageDto, sendFrom);                break;        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processUserMessage", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processUserMessage(MessageDto messageDto, String sendFrom) {        List<String> sendToList = messageDto.getSendToList();        if (sendToList != null && sendToList.isEmpty()) {            return;        }        if (sendToList == null) {            messageDto.setMessage(String.format(\"%s: %s\", sendFrom, messageDto.getMessage()));            messageService.sendMessage(messageDto);        } else {            //\u5148\u7ed9\u53d1\u9001\u65b9\u56de\u590d\u4e00\u4efd            String messageToSendFrom = String.format(\"%s \u2192 %s: %s\", sendFrom, messageDto.getSendToList().toString(), messageDto.getMessage());            messageService.sendMessage(new MessageDto(messageToSendFrom, messageDto.getMessageType(), sendFrom));            //\u518d\u7ed9\u6240\u6709\u63a5\u9001\u8005\u53d1\u9001\u4e00\u4efd            for (String sendTo : messageDto.getSendToList()) {                if (sendFrom.equals(sendTo)) {                    continue;                }                String sendMessage = String.format(\"%s \u2192 %s: %s\", sendFrom, sendTo, messageDto.getMessage());                messageService.sendMessage(new MessageDto(sendMessage, messageDto.getMessageType(), sendTo));            }        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createRoom", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createRoom(MessageDto messageDto, String sendFrom) {        RoomDto roomDto = ObjectUtil.readValue(messageDto.getMessage(), RoomDto.class);        if (roomDto == null) {            return;        }        roomDto.setCreator(sendFrom);        //check user        UserBo userBo = onlineUserService.get(roomDto.getCreator());        if (userBo == null) {            throw new CustomException(\"\u7528\u6237\u4e0d\u5b58\u5728:\" + roomDto.getCreator());        }        StageRoom room = roomService.create(roomDto, userBo);        //remove from old stage        currentStage(userBo).remove(userBo.getUsername());        //add into new stage        room.add(userBo, roomDto.getJoinTeamType());    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "joinRoom", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void joinRoom(MessageDto messageDto, String sendFrom) {        RoomDto roomDto = ObjectUtil.readValue(messageDto.getMessage(), RoomDto.class);        if (roomDto == null) {            return;        }        //check user        UserBo userBo = onlineUserService.get(sendFrom);        if (userBo == null) {            throw new CustomException(\"\u7528\u6237\u4e0d\u5b58\u5728:\" + sendFrom);        }        //check room        if (!roomService.roomNameExists(roomDto.getRoomId())) {            throw new CustomException(\"\u623f\u95f4\u4e0d\u5b58\u5728:\" + roomDto.getRoomId());        }        //remove from old stage        currentStage(userBo).remove(userBo.getUsername());        //add into new stage        roomService.get(roomDto.getRoomId()).add(userBo, roomDto.getJoinTeamType());    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void update() {        menu.update();        roomService.update();    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "currentStage", "params": ["UserBo"], "throws": null, "modifiers": ["private"], "return_type": "BaseStage", "snippet": "    private BaseStage currentStage(UserBo userBo) {        if (!StringUtils.isEmpty(userBo.getRoomId())) {            if (!roomService.roomNameExists(userBo.getRoomId())) {                log.warn(\"can not find room:{} from user:{}\", userBo.getRoomId(), userBo.getUsername());            }            return roomService.get(userBo.getRoomId());        } else {            return menu;        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "userCheckAndGetSendFrom", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["private"], "return_type": "UserBo", "snippet": "    private UserBo userCheckAndGetSendFrom(MessageDto messageDto, String sendFrom) {        //\u68c0\u67e5\u63a5\u6536\u65b9        List<String> sendToList = messageDto.getSendToList();        if (sendToList != null) {            for (int i = 0; i < sendToList.size(); ++i) {                if (!onlineUserService.exists(sendToList.get(i))) {                    sendToList.remove(i);                    --i;                }            }            //\u6240\u6709\u63a5\u6536\u65b9\u90fd\u4e0d\u7b26\u5408\u89c4\u8303\uff0c\u4e0d\u53d1\u9001            if (sendToList.isEmpty()) {                return null;            }        }        //\u68c0\u67e5\u53d1\u9001\u65b9        return onlineUserService.get(sendFrom);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processNewUserReady", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processNewUserReady(MessageDto messageDto, String sendFrom) {        if (onlineUserService.processNewUserReady(sendFrom)) {            sendUserStatusAndMessage(sendFrom, false);        }        menu.addTank(messageDto, sendFrom);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendUserStatusAndMessage", "params": ["String", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendUserStatusAndMessage(String username, boolean isLeave) {        //\u6ca1\u4eba\u4e86\uff0c\u4e0d\u7528\u66f4\u65b0\u72b6\u6001        if (onlineUserService.getUserList().isEmpty()) {            log.info(\"no user in service, no need to send message\");            return;        }        if (isLeave) {            messageService.sendMessage(new MessageDto(String.format(\"%s \u79bb\u5f00\u4e86! \u5f53\u524d\u603b\u4eba\u6570: %d\",                                                                    username,                                                                    onlineUserService.getUserList().size()),                                                      MessageType.SYSTEM_MESSAGE));        } else {            messageService.sendMessage(new MessageDto(String.format(\"%s \u52a0\u5165\u4e86! \u5f53\u524d\u603b\u4eba\u6570: %d\",                                                                    username,                                                                    onlineUserService.getUserList().size()),                                                      MessageType.SYSTEM_MESSAGE));        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/service/GameService.java", "stars": "2", "class": {"name": "GameService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/response/CommonReturnType.java", "stars": "1", "class": {"name": "CommonReturnType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(String status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/response/CommonReturnType.java", "stars": "1", "class": {"name": "CommonReturnType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getData() {        return data;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/response/CommonReturnType.java", "stars": "1", "class": {"name": "CommonReturnType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(Object data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/response/CommonReturnType.java", "stars": "1", "class": {"name": "CommonReturnType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createSuccess", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "CommonReturnType", "snippet": "    public static CommonReturnType createSuccess(Object data) {        return create(data, \"success\");    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/response/CommonReturnType.java", "stars": "1", "class": {"name": "CommonReturnType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createFail", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "CommonReturnType", "snippet": "    public static CommonReturnType createFail(Object data) {        return create(data, \"fail\");    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/response/CommonReturnType.java", "stars": "1", "class": {"name": "CommonReturnType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["Object", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "CommonReturnType", "snippet": "    private static CommonReturnType create(Object data, String status) {        CommonReturnType commonRetrunType = new CommonReturnType();        commonRetrunType.setStatus(status);        commonRetrunType.setData(data);        return commonRetrunType;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/response/CommonReturnType.java", "stars": "1", "class": {"name": "CommonReturnType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onVisitControlFlowEdge", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onVisitControlFlowEdge(int insnIndex, int successorIndex) {\t\tif (hasHitOpaquePredicate && doesOpaqueJumpGotoDestination) {\t\t\tint fallthroughIndex = insnIndex + 1;\t\t\tstopAnalyzerFromGoingToFallthrough(fallthroughIndex);\t\t}\t\t// Reset opaque predicate marker\t\thasHitOpaquePredicate = false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/OpaqueHandler.java", "stars": "12", "class": {"name": "OpaqueHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOpaqueJump", "params": ["AbstractInsnNode", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setOpaqueJump(AbstractInsnNode insn, boolean gotoDestination) {\t\t// Update map of <jump-insn, do-jump>\t\topaqueJumpMap.put(insn, gotoDestination ? GOTO_DESTINATION : FALL_THROUGH);\t\t// Update mark opaque predicate flags\t\tthis.hasHitOpaquePredicate = true;\t\tthis.doesOpaqueJumpGotoDestination = gotoDestination;\t\tif (insn instanceof JumpInsnNode)\t\t\tthis.destination = ((JumpInsnNode) insn).label;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/OpaqueHandler.java", "stars": "12", "class": {"name": "OpaqueHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopAnalyzerFromGoingToFallthrough", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void stopAnalyzerFromGoingToFallthrough(int fallthroughIndex) {\t\ttry {\t\t\t// inInstructionsToProcess[fallthroughIndex] = false;\t\t\t// instructionsToProcess[numInstructionsToProcess - 1] = destinationLabelIndex;\t\t\tField f_inInstructionsToProcess = Analyzer.class.getDeclaredField(\t\t\t\t\t\"inInstructionsToProcess\");\t\t\tField f_instructionsToProcess = Analyzer.class.getDeclaredField(\t\t\t\t\t\"instructionsToProcess\");\t\t\tField f_numInstructionsToProcess = Analyzer.class.getDeclaredField(\t\t\t\t\t\"numInstructionsToProcess\");\t\t\tf_inInstructionsToProcess.setAccessible(true);\t\t\tf_instructionsToProcess.setAccessible(true);\t\t\tf_numInstructionsToProcess.setAccessible(true);\t\t\tboolean[] inInstructionsToProcess =\t\t\t\t\t(boolean[]) f_inInstructionsToProcess.get(analyzer);\t\t\tint[] instructionsToProcess = (int[]) f_instructionsToProcess.get(analyzer);\t\t\tint numInstructionsToProcess = (int) f_numInstructionsToProcess.get(analyzer);\t\t\tinInstructionsToProcess[fallthroughIndex] = false;\t\t\tinstructionsToProcess[numInstructionsToProcess - 1] = InsnUtil.index(destination);\t\t} catch(Throwable t) {\t\t\tthrow new IllegalStateException(\"Did the analyzer internals change?\", t);\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/OpaqueHandler.java", "stars": "12", "class": {"name": "OpaqueHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOpaqueJumpMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<AbstractInsnNode,OpaquePredicateType>", "snippet": "\tpublic Map<AbstractInsnNode, OpaquePredicateType> getOpaqueJumpMap() {\t\treturn opaqueJumpMap;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/OpaqueHandler.java", "stars": "12", "class": {"name": "OpaqueHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new BlockCustomFlower());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RedAmaranthBlock.java", "stars": "2", "class": {"name": "RedAmaranthBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RedAmaranthBlock.java", "stars": "2", "class": {"name": "RedAmaranthBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tFlowersFeature feature = new DefaultFlowersFeature(BlockClusterFeatureConfig::func_227300_a_) {\t\t\t@Override\t\t\tpublic BlockState getFlowerToPlace(Random random, BlockPos bp, BlockClusterFeatureConfig fc) {\t\t\t\treturn block.getDefaultState();\t\t\t}\t\t\t@Override\t\t\tpublic boolean place(IWorld world, ChunkGenerator generator, Random random, BlockPos pos, BlockClusterFeatureConfig config) {\t\t\t\tDimensionType dimensionType = world.getDimension().getType();\t\t\t\tboolean dimensionCriteria = false;\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\tdimensionCriteria = true;\t\t\t\tif (!dimensionCriteria)\t\t\t\t\treturn false;\t\t\t\treturn super.place(world, generator, random, pos, config);\t\t\t}\t\t};\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tboolean biomeCriteria = false;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"jungle\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"jungle_hills\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"jungle_edge\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"modified_jungle\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"modified_jungle_edge\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (!biomeCriteria)\t\t\t\tcontinue;\t\t\tbiome.addFeature(GenerationStage.Decoration.VEGETAL_DECORATION,\t\t\t\t\tfeature.withConfiguration(\t\t\t\t\t\t\t(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(block.getDefaultState()), new SimpleBlockPlacer()))\t\t\t\t\t\t\t\t\t.tries(64).build())\t\t\t\t\t\t\t.withPlacement(Placement.COUNT_HEIGHTMAP_32.configure(new FrequencyConfig(1))));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RedAmaranthBlock.java", "stars": "2", "class": {"name": "RedAmaranthBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(RedAmaranthBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RedAmaranthBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(RedAmaranthBlock.block, (int) (1)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RedAmaranthBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlantType", "params": ["IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "PlantType", "snippet": "\t\tpublic PlantType getPlantType(IBlockReader world, BlockPos pos) {\t\t\treturn PlantType.Plains;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RedAmaranthBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onOK", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onOK() {        final float length = Float.parseFloat(textFieldLength.getText());        final float width = Float.parseFloat(textFieldWidth.getText());        final float height = Float.parseFloat(textFieldHeight.getText());        final Wood wood = (Wood) comboBoxWood.getSelectedItem();        try {            timber = new Timber(wood, length, height, width);        } catch (Exception e) {            JOptionPane.showMessageDialog(null, e.getMessage(), \"Timber dialog error\", JOptionPane.ERROR_MESSAGE);            timber = null;        }        setVisible(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgTimber.java", "stars": "2", "class": {"name": "DlgTimber", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "onCancel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onCancel() {        timber = null;        setVisible(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgTimber.java", "stars": "2", "class": {"name": "DlgTimber", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getObject() {        return timber;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgTimber.java", "stars": "2", "class": {"name": "DlgTimber", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "setWoodDirectory", "params": ["WoodDirectory"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWoodDirectory(WoodDirectory woodDirectory) {        comboBoxWood.setModel(new DefaultComboBoxModel<>(woodDirectory.getArr()));    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgTimber.java", "stars": "2", "class": {"name": "DlgTimber", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Timber\";    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgTimber.java", "stars": "2", "class": {"name": "DlgTimber", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "shouldCloseImmediatelyIfResultSetIsClosed", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldCloseImmediatelyIfResultSetIsClosed() throws Exception {    final MappedStatement ms = getNestedAndOrderedMappedStatement();    final ResultMap rm = ms.getResultMaps().get(0);    final Executor executor = null;    final ParameterHandler parameterHandler = null;    final ResultHandler<?> resultHandler = null;    final BoundSql boundSql = null;    final RowBounds rowBounds = RowBounds.DEFAULT;    final DefaultResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, ms, parameterHandler,      resultHandler, boundSql, rowBounds);    when(rsmd.getColumnCount()).thenReturn(2);    doReturn(\"id\").when(rsmd).getColumnLabel(1);    doReturn(Types.INTEGER).when(rsmd).getColumnType(1);    doReturn(Integer.class.getCanonicalName()).when(rsmd).getColumnClassName(1);    doReturn(\"role\").when(rsmd).getColumnLabel(2);    doReturn(Types.VARCHAR).when(rsmd).getColumnType(2);    doReturn(String.class.getCanonicalName()).when(rsmd).getColumnClassName(2);    final ResultSetWrapper rsw = new ResultSetWrapper(rs, ms.getConfiguration());    try (DefaultCursor<?> cursor = new DefaultCursor<>(resultSetHandler, rm, rsw, RowBounds.DEFAULT)) {      Iterator<?> iter = cursor.iterator();      assertTrue(iter.hasNext());      Map<String, Object> map = (Map<String, Object>) iter.next();      assertEquals(1, map.get(\"id\"));      assertEquals(\"CEO\", ((Map<String, Object>) map.get(\"roles\")).get(\"role\"));      assertFalse(cursor.isConsumed());      assertTrue(cursor.isOpen());      assertFalse(iter.hasNext());      assertTrue(cursor.isConsumed());      assertFalse(cursor.isOpen());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "DefaultCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getNestedAndOrderedMappedStatement", "params": [], "throws": null, "modifiers": ["private"], "return_type": "MappedStatement", "snippet": "  private MappedStatement getNestedAndOrderedMappedStatement() {    final Configuration config = new Configuration();    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    ResultMap nestedResultMap = new ResultMap.Builder(config, \"roleMap\", HashMap.class,      new ArrayList<ResultMapping>() {        {          add(new ResultMapping.Builder(config, \"role\", \"role\", registry.getTypeHandler(String.class))            .build());        }      }).build();    config.addResultMap(nestedResultMap);    return new MappedStatement.Builder(config, \"selectPerson\", new StaticSqlSource(config, \"select person...\"),      SqlCommandType.SELECT).resultMaps(        new ArrayList<ResultMap>() {          {            add(new ResultMap.Builder(config, \"personMap\", HashMap.class, new ArrayList<ResultMapping>() {              {                add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(Integer.class))                  .build());                add(new ResultMapping.Builder(config, \"roles\").nestedResultMapId(\"roleMap\").build());              }            }).build());          }        })        .resultOrdered(true)        .build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "DefaultCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "next", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean next() throws SQLException {      throwIfClosed();      return ++rowIndex < rows.size();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "isClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isClosed() {      return rowIndex >= rows.size();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "getString", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String getString(String columnLabel) throws SQLException {      throwIfClosed();      return (String) rows.get(rowIndex).get(columnLabel);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "getInt", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getInt(String columnLabel) throws SQLException {      throwIfClosed();      return (Integer) rows.get(rowIndex).get(columnLabel);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "wasNull", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean wasNull() throws SQLException {      throwIfClosed();      return false;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "getMetaData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResultSetMetaData", "snippet": "    public ResultSetMetaData getMetaData() {      return rsmd;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "getType", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getType() throws SQLException {      throwIfClosed();      return ResultSet.TYPE_FORWARD_ONLY;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "throwIfClosed", "params": [], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void throwIfClosed() throws SQLException {      if (rowIndex >= rows.size()) {        throw new SQLException(\"Invalid operation: result set is closed.\");      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "hash", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "long", "snippet": "    private static long hash(String key) {        // md5 byte        MessageDigest md5;        try {            md5 = MessageDigest.getInstance(\"MD5\");        } catch (NoSuchAlgorithmException e) {            throw new RuntimeException(\"MD5 not supported\", e);        }        md5.reset();        byte[] keyBytes = null;        try {            keyBytes = key.getBytes(\"UTF-8\");        } catch (UnsupportedEncodingException e) {            throw new RuntimeException(\"Unknown string :\" + key, e);        }        md5.update(keyBytes);        byte[] digest = md5.digest();        // hash code, Truncate to 32-bits        long hashCode = ((long) (digest[3] & 0xFF) << 24)                | ((long) (digest[2] & 0xFF) << 16)                | ((long) (digest[1] & 0xFF) << 8)                | (digest[0] & 0xFF);        long truncateHashCode = hashCode & 0xffffffffL;        return truncateHashCode;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteConsistentHash.java", "stars": "1", "class": {"name": "ExecutorRouteConsistentHash", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "hashJob", "params": ["int", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String hashJob(int jobId, List<String> addressList) {        // ------A1------A2-------A3------        // -----------J1------------------        TreeMap<Long, String> addressRing = new TreeMap<Long, String>();        for (String address: addressList) {            for (int i = 0; i < VIRTUAL_NODE_NUM; i++) {                long addressHash = hash(\"SHARD-\" + address + \"-NODE-\" + i);                addressRing.put(addressHash, address);            }        }        long jobHash = hash(String.valueOf(jobId));        SortedMap<Long, String> lastRing = addressRing.tailMap(jobHash);        if (!lastRing.isEmpty()) {            return lastRing.get(lastRing.firstKey());        }        return addressRing.firstEntry().getValue();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteConsistentHash.java", "stars": "1", "class": {"name": "ExecutorRouteConsistentHash", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "route", "params": ["TriggerParam", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> route(TriggerParam triggerParam, List<String> addressList) {        String address = hashJob(triggerParam.getJobId(), addressList);        return new ReturnT<String>(address);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteConsistentHash.java", "stars": "1", "class": {"name": "ExecutorRouteConsistentHash", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTankType", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "TankTypeBo", "snippet": "    public static TankTypeBo getTankType(String id) {        ConcurrentHashMap<String, TankTypeBo> map = getTypeMap();        if (!map.containsKey(id)) {            throw new CustomException(String.format(\"tank type:%s can not be found! \", id));        }        return map.get(id);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/bo/TankTypeBo.java", "stars": "2", "class": {"name": "TankTypeBo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTypeMap", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "ConcurrentHashMap<String,TankTypeBo>", "snippet": "    private static ConcurrentHashMap<String, TankTypeBo> getTypeMap() {        if (tankTypeMap == null) {            initTypeMap();        }        return tankTypeMap;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/bo/TankTypeBo.java", "stars": "2", "class": {"name": "TankTypeBo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initTypeMap", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void initTypeMap() {        tankTypeMap = new ConcurrentHashMap<>(16);        //menu        tankTypeMap.put(\"tankMenu\", new TankTypeBo(                            \"tankMenu\",                            1.0,                            1,                            5.0,                            60,                            0,                            false,                            null,                            null));        //player        tankTypeMap.put(\"tank01\", new TankTypeBo(                            \"tank01\",                            1.0,                            1,                            5.0,                            300,                            0,                            false,                            null,                            \"tank02\"));        tankTypeMap.put(\"tank02\", new TankTypeBo(                            \"tank02\",                            2.0,                            1,                            10.0,                            300,                            0,                            false,                            null,                            \"tank03\"));        tankTypeMap.put(\"tank03\", new TankTypeBo(                            \"tank03\",                            2.0,                            2,                            10.0,                            300,                            0,                            false,                            \"tank01\",                            \"tank04\"));        tankTypeMap.put(\"tank04\", new TankTypeBo(                            \"tank04\",                            2.0,                            2,                            10.0,                            300,                            0,                            true,                            \"tank02\",                            null));        //computer        initComType();    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/bo/TankTypeBo.java", "stars": "2", "class": {"name": "TankTypeBo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initComType", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void initComType() {        TankTypeBo com = comCopyType(                             \"tank05\",                             \"tank01\",                             null,                             60,                             \"tank06\",                             null);        tankTypeMap.put(com.getTypeId(), com);        com = comCopyType(                  \"tank06\",                  \"tank02\",                  null,                  60,                  null,                  null);        tankTypeMap.put(com.getTypeId(), com);        com = comCopyType(                  \"tank07\",                  \"tank02\",                  3.0,                  60,                  null,                  null);        tankTypeMap.put(com.getTypeId(), com);        com = comCopyType(                  \"tank08\",                  \"tank03\",                  2.5,                  20,                  null,                  null);        tankTypeMap.put(com.getTypeId(), com);        com = comCopyType(                  \"tank09\",                  \"tank04\",                  2.5,                  30,                  null,                  \"tank10\");        tankTypeMap.put(com.getTypeId(), com);        com = comCopyType(                  \"tank10\",                  \"tank04\",                  null,                  50,                  null,                  \"tank11\");        tankTypeMap.put(com.getTypeId(), com);        com = comCopyType(                  \"tank11\",                  \"tank03\",                  null,                  60,                  null,                  \"tank12\");        tankTypeMap.put(com.getTypeId(), com);        com = comCopyType(                  \"tank12\",                  \"tank02\",                  null,                  60,                  null,                  null);        tankTypeMap.put(com.getTypeId(), com);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/bo/TankTypeBo.java", "stars": "2", "class": {"name": "TankTypeBo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "comCopyType", "params": ["String", "String", "Double", "int", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "TankTypeBo", "snippet": "    private static TankTypeBo comCopyType(String newId,                                          String oldId,                                          Double speed,                                          int ammoReloadTime,                                          String upId,                                          String downId) {        TankTypeBo com = new TankTypeBo();        BeanUtils.copyProperties(tankTypeMap.get(oldId), com);        com.ammoReloadTime = ammoReloadTime;        com.typeId = newId;        if (speed != null) {            com.speed = speed;        }        com.upId = upId;        com.downId = downId;        return com;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/bo/TankTypeBo.java", "stars": "2", "class": {"name": "TankTypeBo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// \u8bf7\u5c06\u4e0b\u9762\u4e00\u7ec4int\u503c\u89c6\u4e3a\u5b57\u7b26\u7684Unicode\u7801\uff0c\u628a\u5b83\u4eec\u62fc\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a\t\tint a = 72;        int b = 105;        int c = 65281;\t\tString s = \"\" + (char)a + (char)b + (char)c;\t\tSystem.out.println(s);\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part1/src/com/basic/javapractice/JoinChar.java", "stars": "2", "class": {"name": "JoinChar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(String[] args) {        Deque<String> argList = new LinkedList<>(Arrays.asList(args));        if (argList.isEmpty()) {            Command.displayHelp();            return;        }        String command = argList.remove();        for (Command c : Command.getCommands()) {            if (c.getName().equals(command)) {                try {                    c.execute(argList);                } catch (IllegalArgumentException iae) {                    return; // already handled by command                } catch (Throwable e) {                    e.printStackTrace();                }                return;            }        }        System.out.println(\"Unknown command \" + command + \".\");        Command.displayHelp();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/CommandExecute.java", "stars": "2", "class": {"name": "CommandExecute", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getId() {        return id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(String id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getImdbId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImdbId() {        return imdbId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setImdbId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImdbId(String imdbId) {        this.imdbId = imdbId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getYear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getYear() {        return year;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setYear", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setYear(String year) {        this.year = year;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSynopsis", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSynopsis() {        return synopsis;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSynopsis", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSynopsis(String synopsis) {        this.synopsis = synopsis;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRuntime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRuntime() {        return runtime;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRuntime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRuntime(String runtime) {        this.runtime = runtime;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getReleased", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getReleased() {        return released;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setReleased", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setReleased(int released) {        this.released = released;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTrailer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTrailer() {        return trailer;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTrailer", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTrailer(String trailer) {        this.trailer = trailer;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCertification", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCertification() {        return certification;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCertification", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCertification(String certification) {        this.certification = certification;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTorrents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Torrents", "snippet": "    public Torrents getTorrents() {        return torrents;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTorrents", "params": ["Torrents"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTorrents(Torrents torrents) {        this.torrents = torrents;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGenres", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getGenres() {        return genres;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGenres", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGenres(List<String> genres) {        this.genres = genres;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getImages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Images", "snippet": "    public Images getImages() {        return images;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setImages", "params": ["Images"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImages(Images images) {        this.images = images;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRating", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Rating", "snippet": "    public Rating getRating() {        return rating;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRating", "params": ["Rating"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRating(Rating rating) {        this.rating = rating;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Movie.java", "stars": "4", "class": {"name": "Movie", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSQL", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getSQL(int code) {\t\tStringBuffer buff = new StringBuffer();\t\tswitch(code) {\t\tcase SEL_LOGIN_CNT:\t\t\tbuff.append(\"SELECT \");\t\t\tbuff.append(\"\tCOUNT(*) cnt \");\t\t\tbuff.append(\"FROM \");\t\t\tbuff.append(\"\tmember \");\t\t\tbuff.append(\"WHERE \");\t\t\tbuff.append(\"\tid = ? \");\t\t\tbuff.append(\"\tAND pw = ? \");\t\t\tbreak;\t\t}\t\treturn buff.toString();\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/sql/MemberSQL.java", "stars": "2", "class": {"name": "MemberSQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "launchSessionForAppId", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "LaunchSession", "snippet": "    public static LaunchSession launchSessionForAppId(String appId) {        LaunchSession launchSession = new LaunchSession();        launchSession.appId = appId;        return launchSession;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "launchSessionFromJSONObject", "params": ["JSONObject"], "throws": null, "modifiers": ["public", "static"], "return_type": "LaunchSession", "snippet": "    public static LaunchSession launchSessionFromJSONObject(JSONObject json) {        LaunchSession launchSession = new LaunchSession();        try {            launchSession.fromJSONObject(json);        } catch (JSONException e) {            e.printStackTrace();        }        return launchSession;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "getAppId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAppId() {        return appId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "setAppId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAppId(String appId) {        this.appId = appId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "getAppName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAppName() {        return appName;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "setAppName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAppName(String appName) {        this.appName = appName;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "getSessionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSessionId() {        return sessionId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "setSessionId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSessionId(String sessionId) {        this.sessionId = sessionId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "getService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DeviceService", "snippet": "    public DeviceService getService() {        return service;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "setService", "params": ["DeviceService"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setService(DeviceService service) {        this.service = service;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "getRawData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getRawData() {        return rawData;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "setRawData", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRawData(Object rawData) {        this.rawData = rawData;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "getSessionType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LaunchSessionType", "snippet": "    public LaunchSessionType getSessionType() {        return sessionType;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "setSessionType", "params": ["LaunchSessionType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSessionType(LaunchSessionType sessionType) {        this.sessionType = sessionType;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "close", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close (ResponseListener<Object> listener) {        service.closeLaunchSession(this, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "toJSONObject", "params": [], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject toJSONObject() throws JSONException {        JSONObject obj = new JSONObject();        obj.putOpt(\"appId\", appId);        obj.putOpt(\"sessionId\", sessionId);        obj.putOpt(\"name\", appName);        obj.putOpt(\"sessionType\", sessionType.name());        if (service != null) obj.putOpt(\"serviceName\", service.getServiceName());        if (rawData != null) {            if (rawData instanceof JSONObject) obj.putOpt(\"rawData\", rawData);            if (rawData instanceof List<?>) {                JSONArray arr = new JSONArray();                for (Object item : (List<?>) rawData)                    arr.put(item);                obj.putOpt(\"rawData\", arr);            }            if (rawData instanceof Object[]) {                JSONArray arr = new JSONArray();                for (Object item : (Object[]) rawData)                    arr.put(item);                obj.putOpt(\"rawData\", arr);            }            if (rawData instanceof String) obj.putOpt(\"rawData\", rawData);        }        return obj;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "fromJSONObject", "params": ["JSONObject"], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void fromJSONObject(JSONObject obj) throws JSONException {        this.appId = obj.optString(\"appId\");        this.sessionId = obj.optString(\"sessionId\");        this.appName = obj.optString(\"name\");        this.sessionType = LaunchSessionType.valueOf(obj.optString(\"sessionType\"));        this.rawData = obj.opt(\"rawData\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object launchSession) {        // TODO Auto-generated method stub        return super.equals(launchSession);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/LaunchSession.java", "stars": "4", "class": {"name": "LaunchSession", "extends": null, "implements": ["JSONSerializable", "JSONDeserializable"], "modifiers": ["public"]}}, {"method_name": "onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAccuracyChanged (android.hardware.Sensor p0, int p1)\t{\t\tn_onAccuracyChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/GyroscopeListener.java", "stars": "2", "class": {"name": "GyroscopeListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAccuracyChanged (android.hardware.Sensor p0, int p1);\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/GyroscopeListener.java", "stars": "2", "class": {"name": "GyroscopeListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/GyroscopeListener.java", "stars": "2", "class": {"name": "GyroscopeListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onSensorChanged (android.hardware.SensorEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/GyroscopeListener.java", "stars": "2", "class": {"name": "GyroscopeListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/GyroscopeListener.java", "stars": "2", "class": {"name": "GyroscopeListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/GyroscopeListener.java", "stars": "2", "class": {"name": "GyroscopeListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "extractObjectFromList", "params": ["List<Object>", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object extractObjectFromList(List<Object> list, Class<?> targetType) {    Object value = null;    if (targetType != null && targetType.isAssignableFrom(list.getClass())) {      value = list;    } else if (targetType != null && objectFactory.isCollection(targetType)) {      value = objectFactory.create(targetType);      MetaObject metaObject = configuration.newMetaObject(value);      metaObject.addAll(list);    } else if (targetType != null && targetType.isArray()) {      Class<?> arrayComponentType = targetType.getComponentType();      Object array = Array.newInstance(arrayComponentType, list.size());      if (arrayComponentType.isPrimitive()) {        for (int i = 0; i < list.size(); i++) {          Array.set(array, i, list.get(i));        }        value = array;      } else {        value = list.toArray((Object[])array);      }    } else {      if (list != null && list.size() > 1) {        throw new ExecutorException(\"Statement returned more than one row, where no more than one was expected.\");      } else if (list != null && list.size() == 1) {        value = list.get(0);      }    }    return value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/ResultExtractor.java", "stars": "15", "class": {"name": "ResultExtractor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tpublic boolean onInterceptTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onInterceptTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onInterceptTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onInterceptTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onInterceptTouchEvent (android.view.MotionEvent p0);\tpublic boolean dispatchTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_dispatchTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "dispatchTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean dispatchTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_dispatchTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_dispatchTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_dispatchTouchEvent (android.view.MotionEvent p0);\tpublic android.view.View focusSearch (android.view.View p0, int p1)\t{\t\treturn n_focusSearch (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "focusSearch", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View focusSearch (android.view.View p0, int p1)\t{\t\treturn n_focusSearch (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_focusSearch", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_focusSearch (android.view.View p0, int p1);\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementRenderer_1.java", "stars": "2", "class": {"name": "VisualElementRenderer_1", "extends": "com", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_simple_detail_player);        detailPlayer = (StandardGSYVideoPlayer) findViewById(R.id.detail_player);        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.GONE);        detailPlayer.getBackButton().setVisibility(View.GONE);        initVideoBuilderMode();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleDetailActivityMode1.java", "stars": "2", "class": {"name": "SimpleDetailActivityMode1", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StandardGSYVideoPlayer", "snippet": "    public StandardGSYVideoPlayer getGSYVideoPlayer() {        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleDetailActivityMode1.java", "stars": "2", "class": {"name": "SimpleDetailActivityMode1", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder getGSYVideoOptionBuilder() {        //\u5185\u7f6e\u5c01\u9762\u53ef\u53c2\u8003SampleCoverVideo        ImageView imageView = new ImageView(this);        //loadCover(imageView, url);        return new GSYVideoOptionBuilder()                .setThumbImageView(imageView)                .setUrl(url)                .setCacheWithPlay(true)                .setVideoTitle(\"\u8fd9\u91cc\u662f\u4e00\u4e2a\u7ad6\u76f4\u65b9\u5411\u7684\u89c6\u9891\")                .setIsTouchWiget(true)                .setAutoFullWithSize(true)                .setRotateViewAuto(false)                .setLockLand(false)                .setShowFullAnimation(false)//\u6253\u5f00\u52a8\u753b                .setNeedLockFull(true)                .setSeekRatio(1);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleDetailActivityMode1.java", "stars": "2", "class": {"name": "SimpleDetailActivityMode1", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "clickForFullScreen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clickForFullScreen() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleDetailActivityMode1.java", "stars": "2", "class": {"name": "SimpleDetailActivityMode1", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDetailOrientationRotateAuto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getDetailOrientationRotateAuto() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleDetailActivityMode1.java", "stars": "2", "class": {"name": "SimpleDetailActivityMode1", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadCover", "params": ["ImageView", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadCover(ImageView imageView, String url) {        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        Glide.with(this.getApplicationContext())                .setDefaultRequestOptions(                        new RequestOptions()                                .frame(3000000)                                .centerCrop()                                .error(R.mipmap.xxx2)                                .placeholder(R.mipmap.xxx1))                .load(url)                .into(imageView);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleDetailActivityMode1.java", "stars": "2", "class": {"name": "SimpleDetailActivityMode1", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "dummy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void dummy() {  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ReuseExecutorTest.java", "stars": "15", "class": {"name": "ReuseExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFetchPostWithBlogWithCompositeKey", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldFetchPostWithBlogWithCompositeKey() throws Exception {    super.shouldFetchPostWithBlogWithCompositeKey();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ReuseExecutorTest.java", "stars": "15", "class": {"name": "ReuseExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "createExecutor", "params": ["Transaction"], "throws": null, "modifiers": ["protected"], "return_type": "Executor", "snippet": "  protected Executor createExecutor(Transaction transaction) {    return new ReuseExecutor(config,transaction);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ReuseExecutorTest.java", "stars": "15", "class": {"name": "ReuseExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "selectProductCodes", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Integer>", "snippet": "  public static List<Integer> selectProductCodes() {    try (SqlSession session = IbatisConfig.getSession()) {      ProductMapper productMapper = session.getMapper(ProductMapper.class);      return productMapper.selectProductCodes();    } catch (Exception e) {      throw new RuntimeException(e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/ProductDAO.java", "stars": "15", "class": {"name": "ProductDAO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectProductCodesL", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Long>", "snippet": "  public static List<Long> selectProductCodesL() {    try (SqlSession session = IbatisConfig.getSession()) {      ProductMapper productMapper = session.getMapper(ProductMapper.class);      return productMapper.selectProductCodesL();    } catch (Exception e) {      throw new RuntimeException(e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/ProductDAO.java", "stars": "15", "class": {"name": "ProductDAO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectProductCodesB", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<BigDecimal>", "snippet": "  public static List<BigDecimal> selectProductCodesB() {    try (SqlSession session = IbatisConfig.getSession()) {      ProductMapper productMapper = session.getMapper(ProductMapper.class);      return productMapper.selectProductCodesB();    } catch (Exception e) {      throw new RuntimeException(e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/ProductDAO.java", "stars": "15", "class": {"name": "ProductDAO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectAllProducts", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Product>", "snippet": "  public static List<Product> selectAllProducts() {    try (SqlSession session = IbatisConfig.getSession()) {      ProductMapper productMapper = session.getMapper(ProductMapper.class);      return productMapper.selectAllProducts();    } catch (Exception e) {      throw new RuntimeException(e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/ProductDAO.java", "stars": "15", "class": {"name": "ProductDAO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBaseService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IBaseService<DataSourceOwner>", "snippet": "    public IBaseService<DataSourceOwner> getBaseService() {        return dataSourceOwnerService;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceOwnerAdminController.java", "stars": "23", "class": {"name": "DataSourceOwnerAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["DataSourceOwner", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSourceOwner>", "snippet": "    public Response<DataSourceOwner> add(@Valid @RequestBody DataSourceOwner dataSourceOwner, HttpServletRequest request) {        DataSourceOwner dsOwner = dataSourceOwnerService.getByName(dataSourceOwner.getOwnerName());        if(null != dsOwner){            return new Response<DataSourceOwner>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                    super.informationSwitch(\"exchange.data_source.owner.same\"));        }        return super.add(dataSourceOwner, request);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceOwnerAdminController.java", "stars": "23", "class": {"name": "DataSourceOwnerAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["DataSourceOwner", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSourceOwner>", "snippet": "    public Response<DataSourceOwner> update(@Valid @RequestBody DataSourceOwner dataSourceOwner, HttpServletRequest request) {        if(null == dataSourceOwner.getId()){            return new Response<DataSourceOwner>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                    super.informationSwitch(\"exchange.data_source.id.not.empty\"));        }        DataSourceOwner oldOne = dataSourceOwnerService.get(dataSourceOwner.getId());        if(!oldOne.getOwnerName().equals(dataSourceOwner.getOwnerName())){            DataSourceOwner dsOwner = dataSourceOwnerService.getByName(dataSourceOwner.getOwnerName());            if(null != dsOwner){                return new Response<DataSourceOwner>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                        super.informationSwitch(\"exchange.data_source.owner.same\"));            }        }        return super.update(dataSourceOwner, request);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceOwnerAdminController.java", "stars": "23", "class": {"name": "DataSourceOwnerAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["Long", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSourceOwner>", "snippet": "    public Response<DataSourceOwner> delete(@PathVariable Long id, HttpServletRequest request) {        return super.delete(id, request);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceOwnerAdminController.java", "stars": "23", "class": {"name": "DataSourceOwnerAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        lock();        mCount = nativeGetCount();        for (int i = 0; i < mCount; ++i)            mMediaArray.put(i, new Media(this, i));        unlock();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "insertMediaFromEvent", "params": ["int"], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "Media", "snippet": "    private synchronized Media insertMediaFromEvent(int index) {        mCount++;        for (int i = mCount - 1; i >= index; --i)            mMediaArray.put(i + 1, mMediaArray.valueAt(i));        final Media media = new Media(this, index);        mMediaArray.put(index, media);        return media;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeMediaFromEvent", "params": ["int"], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "Media", "snippet": "    private synchronized Media removeMediaFromEvent(int index) {        mCount--;        final Media media = mMediaArray.get(index);        if (media != null)            media.release();        for (int i = index; i < mCount; ++i) {            mMediaArray.put(i, mMediaArray.valueAt(i + 1));        }        return media;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "setEventListener", "params": ["EventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEventListener(EventListener listener) {        super.setEventListener(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEventNative", "params": ["int", "long", "float"], "throws": null, "modifiers": ["synchronized", "protected"], "return_type": "Event", "snippet": "    protected synchronized Event onEventNative(int eventType, long arg1, float arg2) {        if (mLocked)            throw new IllegalStateException(\"already locked from event callback\");        mLocked = true;        Event event = null;        int index;        switch (eventType) {        case Event.ItemAdded:            index = (int) arg1;            if (index != -1) {                final Media media = insertMediaFromEvent(index);                event = new Event(eventType, media, index);            }            break;        case Event.ItemDeleted:            index = (int) arg1;            if (index != -1) {                final Media media = removeMediaFromEvent(index);                event = new Event(eventType, media, index);            }            break;        case Event.EndReached:            event = new Event(eventType, null, -1);            break;        }        mLocked = false;        return event;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "    public synchronized int getCount() {        return mCount;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaAt", "params": ["int"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "Media", "snippet": "    public synchronized Media getMediaAt(int index) {        if (index < 0 || index >= getCount())            throw new IndexOutOfBoundsException();        final Media media = mMediaArray.get(index);        media.retain();        return media;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "onReleaseNative", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onReleaseNative() {        for (int i = 0; i < mMediaArray.size(); ++i) {            final Media media = mMediaArray.get(i);            if (media != null)                media.release();        }        nativeRelease();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "lock", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void lock() {        if (mLocked)            throw new IllegalStateException(\"already locked\");        mLocked = true;        nativeLock();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "unlock", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void unlock() {        if (!mLocked)            throw new IllegalStateException(\"not locked\");        mLocked = false;        nativeUnlock();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "isLocked", "params": [], "throws": null, "modifiers": ["synchronized", "protected"], "return_type": "boolean", "snippet": "    protected synchronized boolean isLocked() {        return mLocked;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeNewFromLibVlc", "params": ["LibVLC"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeNewFromLibVlc(LibVLC libvlc);    private native void nativeNewFromMediaDiscoverer(MediaDiscoverer md);    private native void nativeNewFromMedia(Media m);    private native void nativeRelease();    private native int nativeGetCount();    private native void nativeLock();    private native void nativeUnlock();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeNewFromMediaDiscoverer", "params": ["MediaDiscoverer"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeNewFromMediaDiscoverer(MediaDiscoverer md);    private native void nativeNewFromMedia(Media m);    private native void nativeRelease();    private native int nativeGetCount();    private native void nativeLock();    private native void nativeUnlock();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeNewFromMedia", "params": ["Media"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeNewFromMedia(Media m);    private native void nativeRelease();    private native int nativeGetCount();    private native void nativeLock();    private native void nativeUnlock();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeRelease", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeRelease();    private native int nativeGetCount();    private native void nativeLock();    private native void nativeUnlock();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeGetCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "    private native int nativeGetCount();    private native void nativeLock();    private native void nativeUnlock();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeLock", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeLock();    private native void nativeUnlock();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeUnlock", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeUnlock();}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/MediaList.java", "stars": "4", "class": {"name": "MediaList", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() throws Exception {    logger.info(String.format(\"Starting %s\", getClass().getSimpleName()));    // hadoop conf should be on the classpath    JobConf jobconf = getJobConf();    jobconf.setJarByClass(WordCount.class);    jobconf.setOutputKeyClass(Text.class);    jobconf.setOutputValueClass(IntWritable.class);    jobconf.setMapperClass(Map.class);    jobconf.setReducerClass(Reduce.class);    jobconf.setInputFormat(TextInputFormat.class);    jobconf.setOutputFormat(TextOutputFormat.class);    FileInputFormat.addInputPath(jobconf, new Path(inputPath));    FileOutputFormat.setOutputPath(jobconf, new Path(outputPath));    if (forceOutputOverrite) {      FileSystem fs =          FileOutputFormat.getOutputPath(jobconf).getFileSystem(jobconf);      fs.delete(FileOutputFormat.getOutputPath(jobconf), true);    }    super.run();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/examples/java/WordCount.java", "stars": "18", "class": {"name": "WordCount", "extends": "AbstractHadoopJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "map", "params": ["LongWritable", "Text", "OutputCollector<Text,IntWritable>", "Reporter"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void map(LongWritable key, Text value,        OutputCollector<Text, IntWritable> output, Reporter reporter)        throws IOException {      String line = value.toString();      StringTokenizer tokenizer = new StringTokenizer(line);      while (tokenizer.hasMoreTokens()) {        word.set(tokenizer.nextToken());        output.collect(word, one);        reporter.incrCounter(Counters.INPUT_WORDS, 1);      }      if ((++numRecords % 100) == 0) {        reporter.setStatus(\"Finished processing \" + numRecords + \" records \"            + \"from the input file\");      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/examples/java/WordCount.java", "stars": "18", "class": {"name": "Map", "extends": "MapReduceBase", "implements": ["Mapper"], "modifiers": ["public", "static"]}}, {"method_name": "reduce", "params": ["Text", "Iterator<IntWritable>", "OutputCollector<Text,IntWritable>", "Reporter"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void reduce(Text key, Iterator<IntWritable> values,        OutputCollector<Text, IntWritable> output, Reporter reporter)        throws IOException {      int sum = 0;      while (values.hasNext()) {        sum += values.next().get();      }      output.collect(key, new IntWritable(sum));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/examples/java/WordCount.java", "stars": "18", "class": {"name": "Reduce", "extends": "MapReduceBase", "implements": ["Reducer"], "modifiers": ["public", "static"]}}, {"method_name": "getUserId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getUserId() {        return userId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftMsgRequest.java", "stars": "1", "class": {"name": "GiveGiftMsgRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserId", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserId(long userId) {        this.userId = userId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftMsgRequest.java", "stars": "1", "class": {"name": "GiveGiftMsgRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGiftId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGiftId() {        return giftId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftMsgRequest.java", "stars": "1", "class": {"name": "GiveGiftMsgRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGiftId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiftId(String giftId) {        this.giftId = giftId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftMsgRequest.java", "stars": "1", "class": {"name": "GiveGiftMsgRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return count;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftMsgRequest.java", "stars": "1", "class": {"name": "GiveGiftMsgRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCount(int count) {        this.count = count;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftMsgRequest.java", "stars": "1", "class": {"name": "GiveGiftMsgRequest", "extends": null, "implements": null, "modifiers": ["public"]}}]